
OpenH743I-C_TouchGfx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a29c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002614  0802a540  0802a540  0002b540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000008  0802cb54  0802cb54  0002db54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802cb5c  0802cb5c  000c3954  2**0
                  CONTENTS
  5 .ARM          00000008  0802cb5c  0802cb5c  0002db5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802cb64  0802cb64  000c3954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802cb64  0802cb64  0002db64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802cb78  0802cb78  0002db78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000100  24000000  0802cb80  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 TouchGFX_ScratchbufferA 00000100  24000100  0802cc80  0002e100  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_ScratchbufferB 00000100  24000200  0802cd80  0002e200  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00007034  24000300  0802ce80  00030300  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  24007334  0802ce80  00030334  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000c3954  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00000918  0802ce80  0802ce80  0002ee80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000030  0802d798  0802d798  0002f798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0009418c  0802d7c8  0802d7c8  0002f7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 BufferSection 000bb800  d0000000  d0000000  000c4000  2**2
                  ALLOC
 19 .debug_info   0009fa92  00000000  00000000  000c3982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00011946  00000000  00000000  00163414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003a88  00000000  00000000  00174d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00002b71  00000000  00000000  001787e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  000479c2  00000000  00000000  0017b359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0004b9fe  00000000  00000000  001c2d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    00196d90  00000000  00000000  0020e719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  003a54a9  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000fc68  00000000  00000000  003a556c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 00000069  00000000  00000000  003b51d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000300 	.word	0x24000300
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802a524 	.word	0x0802a524

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000304 	.word	0x24000304
 80002dc:	0802a524 	.word	0x0802a524

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b988 	b.w	8000a20 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	468e      	mov	lr, r1
 8000730:	4604      	mov	r4, r0
 8000732:	4688      	mov	r8, r1
 8000734:	2b00      	cmp	r3, #0
 8000736:	d14a      	bne.n	80007ce <__udivmoddi4+0xa6>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d962      	bls.n	8000804 <__udivmoddi4+0xdc>
 800073e:	fab2 f682 	clz	r6, r2
 8000742:	b14e      	cbz	r6, 8000758 <__udivmoddi4+0x30>
 8000744:	f1c6 0320 	rsb	r3, r6, #32
 8000748:	fa01 f806 	lsl.w	r8, r1, r6
 800074c:	fa20 f303 	lsr.w	r3, r0, r3
 8000750:	40b7      	lsls	r7, r6
 8000752:	ea43 0808 	orr.w	r8, r3, r8
 8000756:	40b4      	lsls	r4, r6
 8000758:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800075c:	fa1f fc87 	uxth.w	ip, r7
 8000760:	fbb8 f1fe 	udiv	r1, r8, lr
 8000764:	0c23      	lsrs	r3, r4, #16
 8000766:	fb0e 8811 	mls	r8, lr, r1, r8
 800076a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800076e:	fb01 f20c 	mul.w	r2, r1, ip
 8000772:	429a      	cmp	r2, r3
 8000774:	d909      	bls.n	800078a <__udivmoddi4+0x62>
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	f101 30ff 	add.w	r0, r1, #4294967295
 800077c:	f080 80ea 	bcs.w	8000954 <__udivmoddi4+0x22c>
 8000780:	429a      	cmp	r2, r3
 8000782:	f240 80e7 	bls.w	8000954 <__udivmoddi4+0x22c>
 8000786:	3902      	subs	r1, #2
 8000788:	443b      	add	r3, r7
 800078a:	1a9a      	subs	r2, r3, r2
 800078c:	b2a3      	uxth	r3, r4
 800078e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000792:	fb0e 2210 	mls	r2, lr, r0, r2
 8000796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800079a:	fb00 fc0c 	mul.w	ip, r0, ip
 800079e:	459c      	cmp	ip, r3
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0x8e>
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007a8:	f080 80d6 	bcs.w	8000958 <__udivmoddi4+0x230>
 80007ac:	459c      	cmp	ip, r3
 80007ae:	f240 80d3 	bls.w	8000958 <__udivmoddi4+0x230>
 80007b2:	443b      	add	r3, r7
 80007b4:	3802      	subs	r0, #2
 80007b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ba:	eba3 030c 	sub.w	r3, r3, ip
 80007be:	2100      	movs	r1, #0
 80007c0:	b11d      	cbz	r5, 80007ca <__udivmoddi4+0xa2>
 80007c2:	40f3      	lsrs	r3, r6
 80007c4:	2200      	movs	r2, #0
 80007c6:	e9c5 3200 	strd	r3, r2, [r5]
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d905      	bls.n	80007de <__udivmoddi4+0xb6>
 80007d2:	b10d      	cbz	r5, 80007d8 <__udivmoddi4+0xb0>
 80007d4:	e9c5 0100 	strd	r0, r1, [r5]
 80007d8:	2100      	movs	r1, #0
 80007da:	4608      	mov	r0, r1
 80007dc:	e7f5      	b.n	80007ca <__udivmoddi4+0xa2>
 80007de:	fab3 f183 	clz	r1, r3
 80007e2:	2900      	cmp	r1, #0
 80007e4:	d146      	bne.n	8000874 <__udivmoddi4+0x14c>
 80007e6:	4573      	cmp	r3, lr
 80007e8:	d302      	bcc.n	80007f0 <__udivmoddi4+0xc8>
 80007ea:	4282      	cmp	r2, r0
 80007ec:	f200 8105 	bhi.w	80009fa <__udivmoddi4+0x2d2>
 80007f0:	1a84      	subs	r4, r0, r2
 80007f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007f6:	2001      	movs	r0, #1
 80007f8:	4690      	mov	r8, r2
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d0e5      	beq.n	80007ca <__udivmoddi4+0xa2>
 80007fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000802:	e7e2      	b.n	80007ca <__udivmoddi4+0xa2>
 8000804:	2a00      	cmp	r2, #0
 8000806:	f000 8090 	beq.w	800092a <__udivmoddi4+0x202>
 800080a:	fab2 f682 	clz	r6, r2
 800080e:	2e00      	cmp	r6, #0
 8000810:	f040 80a4 	bne.w	800095c <__udivmoddi4+0x234>
 8000814:	1a8a      	subs	r2, r1, r2
 8000816:	0c03      	lsrs	r3, r0, #16
 8000818:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800081c:	b280      	uxth	r0, r0
 800081e:	b2bc      	uxth	r4, r7
 8000820:	2101      	movs	r1, #1
 8000822:	fbb2 fcfe 	udiv	ip, r2, lr
 8000826:	fb0e 221c 	mls	r2, lr, ip, r2
 800082a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800082e:	fb04 f20c 	mul.w	r2, r4, ip
 8000832:	429a      	cmp	r2, r3
 8000834:	d907      	bls.n	8000846 <__udivmoddi4+0x11e>
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	f10c 38ff 	add.w	r8, ip, #4294967295
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x11c>
 800083e:	429a      	cmp	r2, r3
 8000840:	f200 80e0 	bhi.w	8000a04 <__udivmoddi4+0x2dc>
 8000844:	46c4      	mov	ip, r8
 8000846:	1a9b      	subs	r3, r3, r2
 8000848:	fbb3 f2fe 	udiv	r2, r3, lr
 800084c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000850:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000854:	fb02 f404 	mul.w	r4, r2, r4
 8000858:	429c      	cmp	r4, r3
 800085a:	d907      	bls.n	800086c <__udivmoddi4+0x144>
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000862:	d202      	bcs.n	800086a <__udivmoddi4+0x142>
 8000864:	429c      	cmp	r4, r3
 8000866:	f200 80ca 	bhi.w	80009fe <__udivmoddi4+0x2d6>
 800086a:	4602      	mov	r2, r0
 800086c:	1b1b      	subs	r3, r3, r4
 800086e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000872:	e7a5      	b.n	80007c0 <__udivmoddi4+0x98>
 8000874:	f1c1 0620 	rsb	r6, r1, #32
 8000878:	408b      	lsls	r3, r1
 800087a:	fa22 f706 	lsr.w	r7, r2, r6
 800087e:	431f      	orrs	r7, r3
 8000880:	fa0e f401 	lsl.w	r4, lr, r1
 8000884:	fa20 f306 	lsr.w	r3, r0, r6
 8000888:	fa2e fe06 	lsr.w	lr, lr, r6
 800088c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000890:	4323      	orrs	r3, r4
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	fa1f fc87 	uxth.w	ip, r7
 800089a:	fbbe f0f9 	udiv	r0, lr, r9
 800089e:	0c1c      	lsrs	r4, r3, #16
 80008a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008ac:	45a6      	cmp	lr, r4
 80008ae:	fa02 f201 	lsl.w	r2, r2, r1
 80008b2:	d909      	bls.n	80008c8 <__udivmoddi4+0x1a0>
 80008b4:	193c      	adds	r4, r7, r4
 80008b6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008ba:	f080 809c 	bcs.w	80009f6 <__udivmoddi4+0x2ce>
 80008be:	45a6      	cmp	lr, r4
 80008c0:	f240 8099 	bls.w	80009f6 <__udivmoddi4+0x2ce>
 80008c4:	3802      	subs	r0, #2
 80008c6:	443c      	add	r4, r7
 80008c8:	eba4 040e 	sub.w	r4, r4, lr
 80008cc:	fa1f fe83 	uxth.w	lr, r3
 80008d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008d4:	fb09 4413 	mls	r4, r9, r3, r4
 80008d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e0:	45a4      	cmp	ip, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x1ce>
 80008e4:	193c      	adds	r4, r7, r4
 80008e6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ea:	f080 8082 	bcs.w	80009f2 <__udivmoddi4+0x2ca>
 80008ee:	45a4      	cmp	ip, r4
 80008f0:	d97f      	bls.n	80009f2 <__udivmoddi4+0x2ca>
 80008f2:	3b02      	subs	r3, #2
 80008f4:	443c      	add	r4, r7
 80008f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008fa:	eba4 040c 	sub.w	r4, r4, ip
 80008fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000902:	4564      	cmp	r4, ip
 8000904:	4673      	mov	r3, lr
 8000906:	46e1      	mov	r9, ip
 8000908:	d362      	bcc.n	80009d0 <__udivmoddi4+0x2a8>
 800090a:	d05f      	beq.n	80009cc <__udivmoddi4+0x2a4>
 800090c:	b15d      	cbz	r5, 8000926 <__udivmoddi4+0x1fe>
 800090e:	ebb8 0203 	subs.w	r2, r8, r3
 8000912:	eb64 0409 	sbc.w	r4, r4, r9
 8000916:	fa04 f606 	lsl.w	r6, r4, r6
 800091a:	fa22 f301 	lsr.w	r3, r2, r1
 800091e:	431e      	orrs	r6, r3
 8000920:	40cc      	lsrs	r4, r1
 8000922:	e9c5 6400 	strd	r6, r4, [r5]
 8000926:	2100      	movs	r1, #0
 8000928:	e74f      	b.n	80007ca <__udivmoddi4+0xa2>
 800092a:	fbb1 fcf2 	udiv	ip, r1, r2
 800092e:	0c01      	lsrs	r1, r0, #16
 8000930:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000934:	b280      	uxth	r0, r0
 8000936:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800093a:	463b      	mov	r3, r7
 800093c:	4638      	mov	r0, r7
 800093e:	463c      	mov	r4, r7
 8000940:	46b8      	mov	r8, r7
 8000942:	46be      	mov	lr, r7
 8000944:	2620      	movs	r6, #32
 8000946:	fbb1 f1f7 	udiv	r1, r1, r7
 800094a:	eba2 0208 	sub.w	r2, r2, r8
 800094e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000952:	e766      	b.n	8000822 <__udivmoddi4+0xfa>
 8000954:	4601      	mov	r1, r0
 8000956:	e718      	b.n	800078a <__udivmoddi4+0x62>
 8000958:	4610      	mov	r0, r2
 800095a:	e72c      	b.n	80007b6 <__udivmoddi4+0x8e>
 800095c:	f1c6 0220 	rsb	r2, r6, #32
 8000960:	fa2e f302 	lsr.w	r3, lr, r2
 8000964:	40b7      	lsls	r7, r6
 8000966:	40b1      	lsls	r1, r6
 8000968:	fa20 f202 	lsr.w	r2, r0, r2
 800096c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000970:	430a      	orrs	r2, r1
 8000972:	fbb3 f8fe 	udiv	r8, r3, lr
 8000976:	b2bc      	uxth	r4, r7
 8000978:	fb0e 3318 	mls	r3, lr, r8, r3
 800097c:	0c11      	lsrs	r1, r2, #16
 800097e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000982:	fb08 f904 	mul.w	r9, r8, r4
 8000986:	40b0      	lsls	r0, r6
 8000988:	4589      	cmp	r9, r1
 800098a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800098e:	b280      	uxth	r0, r0
 8000990:	d93e      	bls.n	8000a10 <__udivmoddi4+0x2e8>
 8000992:	1879      	adds	r1, r7, r1
 8000994:	f108 3cff 	add.w	ip, r8, #4294967295
 8000998:	d201      	bcs.n	800099e <__udivmoddi4+0x276>
 800099a:	4589      	cmp	r9, r1
 800099c:	d81f      	bhi.n	80009de <__udivmoddi4+0x2b6>
 800099e:	eba1 0109 	sub.w	r1, r1, r9
 80009a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009a6:	fb09 f804 	mul.w	r8, r9, r4
 80009aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009ae:	b292      	uxth	r2, r2
 80009b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009b4:	4542      	cmp	r2, r8
 80009b6:	d229      	bcs.n	8000a0c <__udivmoddi4+0x2e4>
 80009b8:	18ba      	adds	r2, r7, r2
 80009ba:	f109 31ff 	add.w	r1, r9, #4294967295
 80009be:	d2c4      	bcs.n	800094a <__udivmoddi4+0x222>
 80009c0:	4542      	cmp	r2, r8
 80009c2:	d2c2      	bcs.n	800094a <__udivmoddi4+0x222>
 80009c4:	f1a9 0102 	sub.w	r1, r9, #2
 80009c8:	443a      	add	r2, r7
 80009ca:	e7be      	b.n	800094a <__udivmoddi4+0x222>
 80009cc:	45f0      	cmp	r8, lr
 80009ce:	d29d      	bcs.n	800090c <__udivmoddi4+0x1e4>
 80009d0:	ebbe 0302 	subs.w	r3, lr, r2
 80009d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009d8:	3801      	subs	r0, #1
 80009da:	46e1      	mov	r9, ip
 80009dc:	e796      	b.n	800090c <__udivmoddi4+0x1e4>
 80009de:	eba7 0909 	sub.w	r9, r7, r9
 80009e2:	4449      	add	r1, r9
 80009e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ec:	fb09 f804 	mul.w	r8, r9, r4
 80009f0:	e7db      	b.n	80009aa <__udivmoddi4+0x282>
 80009f2:	4673      	mov	r3, lr
 80009f4:	e77f      	b.n	80008f6 <__udivmoddi4+0x1ce>
 80009f6:	4650      	mov	r0, sl
 80009f8:	e766      	b.n	80008c8 <__udivmoddi4+0x1a0>
 80009fa:	4608      	mov	r0, r1
 80009fc:	e6fd      	b.n	80007fa <__udivmoddi4+0xd2>
 80009fe:	443b      	add	r3, r7
 8000a00:	3a02      	subs	r2, #2
 8000a02:	e733      	b.n	800086c <__udivmoddi4+0x144>
 8000a04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a08:	443b      	add	r3, r7
 8000a0a:	e71c      	b.n	8000846 <__udivmoddi4+0x11e>
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	e79c      	b.n	800094a <__udivmoddi4+0x222>
 8000a10:	eba1 0109 	sub.w	r1, r1, r9
 8000a14:	46c4      	mov	ip, r8
 8000a16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a1a:	fb09 f804 	mul.w	r8, r9, r4
 8000a1e:	e7c4      	b.n	80009aa <__udivmoddi4+0x282>

08000a20 <__aeabi_idiv0>:
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <BSP_LCD_Init>:
/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/* Initialize the SDRAM */
	BSP_SDRAM_Init();
 8000a28:	f000 f906 	bl	8000c38 <BSP_SDRAM_Init>
	BSP_LCD_SelectLayer(1);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 f833 	bl	8000a98 <BSP_LCD_SelectLayer>
	/* Clear the LCD Foreground layer */
	BSP_LCD_SetLayerVisible(1, DISABLE);
 8000a32:	2100      	movs	r1, #0
 8000a34:	2001      	movs	r0, #1
 8000a36:	f000 f83f 	bl	8000ab8 <BSP_LCD_SetLayerVisible>
	/* Set Foreground Layer */
	BSP_LCD_SelectLayer(0);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f82c 	bl	8000a98 <BSP_LCD_SelectLayer>

	return LCD_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <BSP_LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @retval Used LCD X size
 */
uint32_t BSP_LCD_GetXSize(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
	return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <BSP_LCD_GetXSize+0x20>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <BSP_LCD_GetXSize+0x24>)
 8000a52:	2134      	movs	r1, #52	@ 0x34
 8000a54:	fb01 f303 	mul.w	r3, r1, r3
 8000a58:	4413      	add	r3, r2
 8000a5a:	3360      	adds	r3, #96	@ 0x60
 8000a5c:	681b      	ldr	r3, [r3, #0]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	2400031c 	.word	0x2400031c
 8000a6c:	24000450 	.word	0x24000450

08000a70 <BSP_LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @retval Used LCD Y size
 */
uint32_t BSP_LCD_GetYSize(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <BSP_LCD_GetYSize+0x20>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <BSP_LCD_GetYSize+0x24>)
 8000a7a:	2134      	movs	r1, #52	@ 0x34
 8000a7c:	fb01 f303 	mul.w	r3, r1, r3
 8000a80:	4413      	add	r3, r2
 8000a82:	3364      	adds	r3, #100	@ 0x64
 8000a84:	681b      	ldr	r3, [r3, #0]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	2400031c 	.word	0x2400031c
 8000a94:	24000450 	.word	0x24000450

08000a98 <BSP_LCD_SelectLayer>:
 * @brief  Selects the LCD Layer.
 * @param  LayerIndex: Layer foreground or background
 * @retval None
 */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	ActiveLayer = LayerIndex;
 8000aa0:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <BSP_LCD_SelectLayer+0x1c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2400031c 	.word	0x2400031c

08000ab8 <BSP_LCD_SetLayerVisible>:
 *            @arg  ENABLE
 *            @arg  DISABLE
 * @retval None
 */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
	if (State == ENABLE)
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d112      	bne.n	8000af0 <BSP_LCD_SetLayerVisible+0x38>
	{
		__HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8000aca:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	01db      	lsls	r3, r3, #7
 8000ad4:	4413      	add	r3, r2
 8000ad6:	3384      	adds	r3, #132	@ 0x84
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000adc:	6812      	ldr	r2, [r2, #0]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	01d2      	lsls	r2, r2, #7
 8000ae4:	440a      	add	r2, r1
 8000ae6:	3284      	adds	r2, #132	@ 0x84
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e011      	b.n	8000b14 <BSP_LCD_SetLayerVisible+0x5c>
	}
	else
	{
		__HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	01db      	lsls	r3, r3, #7
 8000afa:	4413      	add	r3, r2
 8000afc:	3384      	adds	r3, #132	@ 0x84
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000b02:	6812      	ldr	r2, [r2, #0]
 8000b04:	4611      	mov	r1, r2
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	01d2      	lsls	r2, r2, #7
 8000b0a:	440a      	add	r2, r1
 8000b0c:	3284      	adds	r2, #132	@ 0x84
 8000b0e:	f023 0301 	bic.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]
	}
	__HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f042 0201 	orr.w	r2, r2, #1
 8000b22:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	24000450 	.word	0x24000450

08000b34 <BSP_LCD_Clear>:
 * @brief  Clears the hole LCD.
 * @param  Color: Color of the background
 * @retval None
 */
void BSP_LCD_Clear(uint32_t Color)
{
 8000b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	6078      	str	r0, [r7, #4]
	/* Clear the LCD */
	LL_FillBuffer(ActiveLayer,
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <BSP_LCD_Clear+0x48>)
 8000b3e:	681c      	ldr	r4, [r3, #0]
			(uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress),
 8000b40:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <BSP_LCD_Clear+0x48>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0e      	ldr	r2, [pc, #56]	@ (8000b80 <BSP_LCD_Clear+0x4c>)
 8000b46:	2134      	movs	r1, #52	@ 0x34
 8000b48:	fb01 f303 	mul.w	r3, r1, r3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	335c      	adds	r3, #92	@ 0x5c
 8000b50:	681b      	ldr	r3, [r3, #0]
	LL_FillBuffer(ActiveLayer,
 8000b52:	461e      	mov	r6, r3
 8000b54:	f7ff ff78 	bl	8000a48 <BSP_LCD_GetXSize>
 8000b58:	4605      	mov	r5, r0
 8000b5a:	f7ff ff89 	bl	8000a70 <BSP_LCD_GetYSize>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	2300      	movs	r3, #0
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	462a      	mov	r2, r5
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f000 f808 	bl	8000b84 <LL_FillBuffer>
			BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7c:	2400031c 	.word	0x2400031c
 8000b80:	24000450 	.word	0x24000450

08000b84 <LL_FillBuffer>:
 * @param  ColorIndex: Color index
 * @retval None
 */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hDma2dHandler.Init.Mode = DMA2D_R2M;
 8000b92:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000b94:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b98:	605a      	str	r2, [r3, #4]
	if (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat
 8000b9a:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <LL_FillBuffer+0xa8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a24      	ldr	r2, [pc, #144]	@ (8000c30 <LL_FillBuffer+0xac>)
 8000ba0:	2134      	movs	r1, #52	@ 0x34
 8000ba2:	fb01 f303 	mul.w	r3, r1, r3
 8000ba6:	4413      	add	r3, r2
 8000ba8:	3348      	adds	r3, #72	@ 0x48
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d111      	bne.n	8000bd4 <LL_FillBuffer+0x50>
			== LTDC_PIXEL_FORMAT_RGB565)
	{ /* RGB565 format */
		hDma2dHandler.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	609a      	str	r2, [r3, #8]
		ColorIndex = ((ColorIndex & LCD_COLOR_RED) << 8)
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	f403 0278 	and.w	r2, r3, #16252928	@ 0xf80000
				| ((ColorIndex & LCD_COLOR_GREEN) << 5)
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	015b      	lsls	r3, r3, #5
 8000bc2:	f403 437c 	and.w	r3, r3, #64512	@ 0xfc00
 8000bc6:	431a      	orrs	r2, r3
				| ((ColorIndex & LCD_COLOR_BLUE) << 3);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	b2db      	uxtb	r3, r3
		ColorIndex = ((ColorIndex & LCD_COLOR_RED) << 8)
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61fb      	str	r3, [r7, #28]
 8000bd2:	e002      	b.n	8000bda <LL_FillBuffer+0x56>
	}
	else
	{ /* ARGB8888 format */
		hDma2dHandler.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	609a      	str	r2, [r3, #8]
	}
	hDma2dHandler.Init.OutputOffset = OffLine;
 8000bda:	4a13      	ldr	r2, [pc, #76]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	60d3      	str	r3, [r2, #12]

	hDma2dHandler.Instance = DMA2D;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000be2:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <LL_FillBuffer+0xb0>)
 8000be4:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if (HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK)
 8000be6:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000be8:	f002 fa98 	bl	800311c <HAL_DMA2D_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d115      	bne.n	8000c1e <LL_FillBuffer+0x9a>
	{
		if (HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK)
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000bf6:	f002 fd19 	bl	800362c <HAL_DMA2D_ConfigLayer>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10e      	bne.n	8000c1e <LL_FillBuffer+0x9a>
		{
			if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t) pDst,
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	69f9      	ldr	r1, [r7, #28]
 8000c0a:	4807      	ldr	r0, [pc, #28]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000c0c:	f002 faea 	bl	80031e4 <HAL_DMA2D_Start>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d103      	bne.n	8000c1e <LL_FillBuffer+0x9a>
					xSize, ySize) == HAL_OK)
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000c16:	210a      	movs	r1, #10
 8000c18:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000c1a:	f002 fb0e 	bl	800323a <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24000354 	.word	0x24000354
 8000c2c:	2400031c 	.word	0x2400031c
 8000c30:	24000450 	.word	0x24000450
 8000c34:	52001000 	.word	0x52001000

08000c38 <BSP_SDRAM_Init>:

/******************************************************************************
function:	SDRAM device configuration
******************************************************************************/
void BSP_SDRAM_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <BSP_SDRAM_Init+0x18>)
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <BSP_SDRAM_Init+0x1c>)
 8000c40:	601a      	str	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000c42:	f240 6003 	movw	r0, #1539	@ 0x603
 8000c46:	f000 f807 	bl	8000c58 <BSP_SDRAM_Initialization_sequence>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	240003bc 	.word	0x240003bc
 8000c54:	52004140 	.word	0x52004140

08000c58 <BSP_SDRAM_Initialization_sequence>:
function:	Programs the SDRAM device.
parameter:
	RefreshCount : SDRAM refresh counter value 
******************************************************************************/
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000c64:	4b2a      	ldr	r3, [pc, #168]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c6a:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000c70:	4b27      	ldr	r3, [pc, #156]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000c76:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000c7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c80:	4923      	ldr	r1, [pc, #140]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c82:	4824      	ldr	r0, [pc, #144]	@ (8000d14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000c84:	f006 fb6a 	bl	800735c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f002 f845 	bl	8002d18 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c96:	2208      	movs	r2, #8
 8000c98:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000ca6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000caa:	4919      	ldr	r1, [pc, #100]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cac:	4819      	ldr	r0, [pc, #100]	@ (8000d14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000cae:	f006 fb55 	bl	800735c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cba:	2208      	movs	r2, #8
 8000cbc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000cca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cce:	4910      	ldr	r1, [pc, #64]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cd0:	4810      	ldr	r0, [pc, #64]	@ (8000d14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000cd2:	f006 fb43 	bl	800735c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000cd6:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000cda:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cf2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000cf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf8:	4905      	ldr	r1, [pc, #20]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000cfc:	f006 fb2e 	bl	800735c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000d04:	f006 fb5f 	bl	80073c6 <HAL_SDRAM_ProgramRefreshRate>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	24000320 	.word	0x24000320
 8000d14:	240003bc 	.word	0x240003bc

08000d18 <GT811_Init>:
 * @brief  Initialize the GT811 communication bus
 *         from MCU to GT811 : ie I2C channel initialization (if required).
 * @retval None
 */

uint8_t GT811_Init(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09c      	sub	sp, #112	@ 0x70
 8000d1c:	af00      	add	r7, sp, #0
	I2C_Init();
 8000d1e:	f000 f875 	bl	8000e0c <I2C_Init>

	/* reset GT811 */
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2140      	movs	r1, #64	@ 0x40
 8000d26:	481a      	ldr	r0, [pc, #104]	@ (8000d90 <GT811_Init+0x78>)
 8000d28:	f002 ff9c 	bl	8003c64 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000d2c:	20c8      	movs	r0, #200	@ 0xc8
 8000d2e:	f001 fff3 	bl	8002d18 <HAL_Delay>
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2140      	movs	r1, #64	@ 0x40
 8000d36:	4816      	ldr	r0, [pc, #88]	@ (8000d90 <GT811_Init+0x78>)
 8000d38:	f002 ff94 	bl	8003c64 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000d3c:	20c8      	movs	r0, #200	@ 0xc8
 8000d3e:	f001 ffeb 	bl	8002d18 <HAL_Delay>

	/* if Version is correct, send the configuration parameters */
	if (GT811_ReadID() == GT811_VERSION_VALUE) {
 8000d42:	f000 f829 	bl	8000d98 <GT811_ReadID>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f242 0310 	movw	r3, #8208	@ 0x2010
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d119      	bne.n	8000d86 <GT811_Init+0x6e>
		/* touch screen configuration parameter (touch screen manufacturers provide) */
		uint8_t GTP_CFG_DATA[] = { 0x12, 0x10, 0x0E, 0x0C, 0x0A, 0x08, 0x06,
 8000d52:	4a10      	ldr	r2, [pc, #64]	@ (8000d94 <GT811_Init+0x7c>)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4611      	mov	r1, r2
 8000d58:	226a      	movs	r2, #106	@ 0x6a
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f028 fe9c 	bl	8029a98 <memcpy>
				0x00, 0x00, 0x00, 0x20, 0x14, 0xEC, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x30, 0x25,
				0x28, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, };

		/* config  */
		GTP_CFG_DATA[62] = GT811_MAX_WIDTH >> 8;
 8000d60:	2303      	movs	r3, #3
 8000d62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
		GTP_CFG_DATA[61] = GT811_MAX_WIDTH & 0xff;
 8000d66:	2320      	movs	r3, #32
 8000d68:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		GTP_CFG_DATA[60] = GT811_MAX_HEIGHT >> 8;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		GTP_CFG_DATA[59] = GT811_MAX_HEIGHT & 0xff;
 8000d72:	23e0      	movs	r3, #224	@ 0xe0
 8000d74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		I2C_WriteReg(GT811_CMD_WR, GT811_CONFIG_REG, (uint8_t*) GTP_CFG_DATA,
 8000d78:	1d3a      	adds	r2, r7, #4
 8000d7a:	236a      	movs	r3, #106	@ 0x6a
 8000d7c:	f240 61a2 	movw	r1, #1698	@ 0x6a2
 8000d80:	20ba      	movs	r0, #186	@ 0xba
 8000d82:	f000 fa3f 	bl	8001204 <I2C_WriteReg>
				sizeof(GTP_CFG_DATA));
	}
	return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3770      	adds	r7, #112	@ 0x70
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58021400 	.word	0x58021400
 8000d94:	0802a540 	.word	0x0802a540

08000d98 <GT811_ReadID>:
 * @brief  Read the GT811 device ID, pre initialize I2C in case of need to be
 *         able to read the GT811 device ID, and verify this is a GT811.
 * @param  DeviceAddr: I2C GT811 Slave address.
 * @retval The Device ID (two bytes).
 */
uint16_t GT811_ReadID() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	uint8_t value[2];
	I2C_ReadReg(GT811_CMD_WR, GT811_VERSION, value, 2);
 8000d9e:	1d3a      	adds	r2, r7, #4
 8000da0:	2302      	movs	r3, #2
 8000da2:	f240 7117 	movw	r1, #1815	@ 0x717
 8000da6:	20ba      	movs	r0, #186	@ 0xba
 8000da8:	f000 fa72 	bl	8001290 <I2C_ReadReg>
	printf("ID    %x\r\n", (((uint16_t) value[0] << 8) + value[1]));
 8000dac:	793b      	ldrb	r3, [r7, #4]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	797a      	ldrb	r2, [r7, #5]
 8000db2:	4413      	add	r3, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <GT811_ReadID+0x38>)
 8000db8:	f028 fcee 	bl	8029798 <iprintf>
	return value[0] * 0x100 + value[1];
 8000dbc:	793b      	ldrb	r3, [r7, #4]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	797a      	ldrb	r2, [r7, #5]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	0802a5ac 	.word	0x0802a5ac

08000dd4 <delay_us>:
/**
 * @brief  I2C delay.
 * @param  None
 * @retval None
 */
static void delay_us(uint32_t value) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint32_t i;
	i = value * 250;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	22fa      	movs	r2, #250	@ 0xfa
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	60fb      	str	r3, [r7, #12]
	while (i--) {
 8000de6:	e005      	b.n	8000df4 <delay_us+0x20>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
}
 8000dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dee:	f3bf 8f6f 	isb	sy
}
 8000df2:	bf00      	nop
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	60fa      	str	r2, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f4      	bne.n	8000de8 <delay_us+0x14>
		__DSB();
		__ISB();
	};
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <I2C_Init>:
/**
 * @brief  I2C Init.
 * @param  None
 * @retval None
 */
void I2C_Init(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
  __ASM volatile ("isb 0xF":::"memory");
 8000e12:	f3bf 8f6f 	isb	sy
}
 8000e16:	bf00      	nop
#if !(defined(__i2c_H)||defined(__I2C_H__))
	GPIO_InitTypeDef GPIO_InitStruct;

	SDA_CLK()
 8000e18:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <I2C_Init+0xa0>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	4a23      	ldr	r2, [pc, #140]	@ (8000eac <I2C_Init+0xa0>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <I2C_Init+0xa0>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("isb 0xF":::"memory");
 8000e36:	f3bf 8f6f 	isb	sy
}
 8000e3a:	bf00      	nop
	SCL_CLK()
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <I2C_Init+0xa0>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e42:	4a1a      	ldr	r2, [pc, #104]	@ (8000eac <I2C_Init+0xa0>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <I2C_Init+0xa0>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000e66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e6a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	480f      	ldr	r0, [pc, #60]	@ (8000eb0 <I2C_Init+0xa4>)
 8000e74:	f002 fd2e 	bl	80038d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SDA_GPIO_PORT, SDA_GPIO_PIN, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e7e:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <I2C_Init+0xa4>)
 8000e80:	f002 fef0 	bl	8003c64 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = SCL_GPIO_PIN;
 8000e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e88:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <I2C_Init+0xa4>)
 8000e92:	f002 fd1f 	bl	80038d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SCL_GPIO_PORT, SCL_GPIO_PIN, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e9c:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <I2C_Init+0xa4>)
 8000e9e:	f002 fee1 	bl	8003c64 <HAL_GPIO_WritePin>
#else
	MX_I2C4_Init();
#endif
}
 8000ea2:	bf00      	nop
 8000ea4:	3720      	adds	r7, #32
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	58024400 	.word	0x58024400
 8000eb0:	58020c00 	.word	0x58020c00

08000eb4 <SDA_IN>:
/**
 * @brief  Set SDA In.
 * @param  None
 * @retval None
 */
static void SDA_IN() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000eba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ebe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <SDA_IN+0x2c>)
 8000ed2:	f002 fcff 	bl	80038d4 <HAL_GPIO_Init>

}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	58020c00 	.word	0x58020c00

08000ee4 <SDA_OUT>:
/**
 * @brief  Set SDA Out.
 * @param  None
 * @retval None
 */
static void SDA_OUT() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000eea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eee:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <SDA_OUT+0x2c>)
 8000f02:	f002 fce7 	bl	80038d4 <HAL_GPIO_Init>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	58020c00 	.word	0x58020c00

08000f14 <I2C_Start>:
/**
 * @brief  I2C Start.
 * @param  None
 * @retval None
 */
void I2C_Start(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000f18:	f7ff ffe4 	bl	8000ee4 <SDA_OUT>

	SET_SDA();
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f22:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <I2C_Start+0x54>)
 8000f24:	f002 fe9e 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff ff53 	bl	8000dd4 <delay_us>

	SET_CLK();
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f34:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <I2C_Start+0x54>)
 8000f36:	f002 fe95 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff4a 	bl	8000dd4 <delay_us>

	CLR_SDA();
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f46:	4808      	ldr	r0, [pc, #32]	@ (8000f68 <I2C_Start+0x54>)
 8000f48:	f002 fe8c 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff ff41 	bl	8000dd4 <delay_us>

	CLR_CLK();
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <I2C_Start+0x54>)
 8000f5a:	f002 fe83 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f7ff ff38 	bl	8000dd4 <delay_us>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58020c00 	.word	0x58020c00

08000f6c <I2C_Stop>:
/**
 * @brief  I2C Stop.
 * @param  None
 * @retval None
 */
void I2C_Stop(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000f70:	f7ff ffb8 	bl	8000ee4 <SDA_OUT>

	CLR_SDA();
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f7a:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <I2C_Stop+0x44>)
 8000f7c:	f002 fe72 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff ff27 	bl	8000dd4 <delay_us>

	SET_CLK();
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f8c:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <I2C_Stop+0x44>)
 8000f8e:	f002 fe69 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff ff1e 	bl	8000dd4 <delay_us>

	SET_SDA();
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <I2C_Stop+0x44>)
 8000fa0:	f002 fe60 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff ff15 	bl	8000dd4 <delay_us>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	58020c00 	.word	0x58020c00

08000fb4 <I2C_Wait_Ack>:
/**
 * @brief  I2C Ack.
 * @param  None
 * @retval None
 */
uint8_t I2C_Wait_Ack(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	uint16_t ucErrTime = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	80fb      	strh	r3, [r7, #6]

	SDA_IN();
 8000fbe:	f7ff ff79 	bl	8000eb4 <SDA_IN>
	SET_SDA();
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc8:	4816      	ldr	r0, [pc, #88]	@ (8001024 <I2C_Wait_Ack+0x70>)
 8000fca:	f002 fe4b 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff ff00 	bl	8000dd4 <delay_us>
	SET_CLK();
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fda:	4812      	ldr	r0, [pc, #72]	@ (8001024 <I2C_Wait_Ack+0x70>)
 8000fdc:	f002 fe42 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff fef7 	bl	8000dd4 <delay_us>

	while (READ_SDA()) {
 8000fe6:	e009      	b.n	8000ffc <I2C_Wait_Ack+0x48>
		ucErrTime++;
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	3301      	adds	r3, #1
 8000fec:	80fb      	strh	r3, [r7, #6]
		if (ucErrTime > 250) {
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2bfa      	cmp	r3, #250	@ 0xfa
 8000ff2:	d903      	bls.n	8000ffc <I2C_Wait_Ack+0x48>
			I2C_Stop();
 8000ff4:	f7ff ffba 	bl	8000f6c <I2C_Stop>
			return 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e00e      	b.n	800101a <I2C_Wait_Ack+0x66>
	while (READ_SDA()) {
 8000ffc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001000:	4808      	ldr	r0, [pc, #32]	@ (8001024 <I2C_Wait_Ack+0x70>)
 8001002:	f002 fe17 	bl	8003c34 <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1ed      	bne.n	8000fe8 <I2C_Wait_Ack+0x34>
		}
	}
	CLR_CLK();
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001012:	4804      	ldr	r0, [pc, #16]	@ (8001024 <I2C_Wait_Ack+0x70>)
 8001014:	f002 fe26 	bl	8003c64 <HAL_GPIO_WritePin>
	return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	58020c00 	.word	0x58020c00

08001028 <I2C_Ack>:
/**
 * @brief  I2C Ack.
 * @param  None
 * @retval None
 */
void I2C_Ack(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	SDA_OUT();
 800102c:	f7ff ff5a 	bl	8000ee4 <SDA_OUT>
	CLR_CLK();
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001036:	4810      	ldr	r0, [pc, #64]	@ (8001078 <I2C_Ack+0x50>)
 8001038:	f002 fe14 	bl	8003c64 <HAL_GPIO_WritePin>

	CLR_SDA();
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001042:	480d      	ldr	r0, [pc, #52]	@ (8001078 <I2C_Ack+0x50>)
 8001044:	f002 fe0e 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fec3 	bl	8000dd4 <delay_us>

	SET_CLK();
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <I2C_Ack+0x50>)
 8001056:	f002 fe05 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff feba 	bl	8000dd4 <delay_us>

	CLR_CLK();
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <I2C_Ack+0x50>)
 8001068:	f002 fdfc 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff feb1 	bl	8000dd4 <delay_us>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	58020c00 	.word	0x58020c00

0800107c <I2C_NAck>:
/**
 * @brief  No I2C Ack.
 * @param  None
 * @retval None
 */
void I2C_NAck(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	SDA_OUT();
 8001080:	f7ff ff30 	bl	8000ee4 <SDA_OUT>

	SET_SDA();
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <I2C_NAck+0x44>)
 800108c:	f002 fdea 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8001090:	2001      	movs	r0, #1
 8001092:	f7ff fe9f 	bl	8000dd4 <delay_us>

	SET_CLK();
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800109c:	4808      	ldr	r0, [pc, #32]	@ (80010c0 <I2C_NAck+0x44>)
 800109e:	f002 fde1 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff fe96 	bl	8000dd4 <delay_us>

	CLR_CLK();
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010ae:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <I2C_NAck+0x44>)
 80010b0:	f002 fdd8 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff fe8d 	bl	8000dd4 <delay_us>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	58020c00 	.word	0x58020c00

080010c4 <I2C_Send_Byte>:
/**
 * @brief  I2C Send one byte
 * @param  1:ack 0:without ack
 * @retval None
 */
void I2C_Send_Byte(uint8_t txd) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t t;

	SDA_OUT();
 80010ce:	f7ff ff09 	bl	8000ee4 <SDA_OUT>
	CLR_CLK();       //Put low CLK to send data
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010d8:	4825      	ldr	r0, [pc, #148]	@ (8001170 <I2C_Send_Byte+0xac>)
 80010da:	f002 fdc3 	bl	8003c64 <HAL_GPIO_WritePin>

	for (t = 0; t < 8; t++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e02b      	b.n	800113c <I2C_Send_Byte+0x78>
		if (txd & 0x80)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da06      	bge.n	80010fa <I2C_Send_Byte+0x36>
			SET_SDA();
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010f2:	481f      	ldr	r0, [pc, #124]	@ (8001170 <I2C_Send_Byte+0xac>)
 80010f4:	f002 fdb6 	bl	8003c64 <HAL_GPIO_WritePin>
 80010f8:	e005      	b.n	8001106 <I2C_Send_Byte+0x42>
		else
			CLR_SDA();
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001100:	481b      	ldr	r0, [pc, #108]	@ (8001170 <I2C_Send_Byte+0xac>)
 8001102:	f002 fdaf 	bl	8003c64 <HAL_GPIO_WritePin>

		txd <<= 1;
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff fe61 	bl	8000dd4 <delay_us>

		SET_CLK();
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001118:	4815      	ldr	r0, [pc, #84]	@ (8001170 <I2C_Send_Byte+0xac>)
 800111a:	f002 fda3 	bl	8003c64 <HAL_GPIO_WritePin>
		delay_us(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fe58 	bl	8000dd4 <delay_us>
		CLR_CLK();
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800112a:	4811      	ldr	r0, [pc, #68]	@ (8001170 <I2C_Send_Byte+0xac>)
 800112c:	f002 fd9a 	bl	8003c64 <HAL_GPIO_WritePin>
		delay_us(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fe4f 	bl	8000dd4 <delay_us>
	for (t = 0; t < 8; t++) {
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	3301      	adds	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b07      	cmp	r3, #7
 8001140:	d9d0      	bls.n	80010e4 <I2C_Send_Byte+0x20>
	}

	SET_SDA();
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001148:	4809      	ldr	r0, [pc, #36]	@ (8001170 <I2C_Send_Byte+0xac>)
 800114a:	f002 fd8b 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff fe40 	bl	8000dd4 <delay_us>
	CLR_CLK();
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <I2C_Send_Byte+0xac>)
 800115c:	f002 fd82 	bl	8003c64 <HAL_GPIO_WritePin>
	delay_us(1);
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff fe37 	bl	8000dd4 <delay_us>
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	58020c00 	.word	0x58020c00

08001174 <I2C_Read_Byte>:
/**
 * @brief  I2C read one byte
 * @param  1:ack 0:without ack
 * @retval read value
 */
uint8_t I2C_Read_Byte(unsigned char ack) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	unsigned char i, receive = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	73bb      	strb	r3, [r7, #14]
	SDA_IN();         //SDA set in
 8001182:	f7ff fe97 	bl	8000eb4 <SDA_IN>
	for (i = 0; i < 8; i++) {
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e022      	b.n	80011d2 <I2C_Read_Byte+0x5e>
		CLR_CLK();
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001192:	481b      	ldr	r0, [pc, #108]	@ (8001200 <I2C_Read_Byte+0x8c>)
 8001194:	f002 fd66 	bl	8003c64 <HAL_GPIO_WritePin>
		delay_us(1);
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fe1b 	bl	8000dd4 <delay_us>
		SET_CLK();
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a4:	4816      	ldr	r0, [pc, #88]	@ (8001200 <I2C_Read_Byte+0x8c>)
 80011a6:	f002 fd5d 	bl	8003c64 <HAL_GPIO_WritePin>
		receive <<= 1;
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	73bb      	strb	r3, [r7, #14]
		if (READ_SDA())
 80011b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b4:	4812      	ldr	r0, [pc, #72]	@ (8001200 <I2C_Read_Byte+0x8c>)
 80011b6:	f002 fd3d 	bl	8003c34 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <I2C_Read_Byte+0x52>
			receive++;
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	3301      	adds	r3, #1
 80011c4:	73bb      	strb	r3, [r7, #14]
		delay_us(1);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff fe04 	bl	8000dd4 <delay_us>
	for (i = 0; i < 8; i++) {
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	3301      	adds	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d9d9      	bls.n	800118c <I2C_Read_Byte+0x18>
	}
	CLR_CLK();
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011de:	4808      	ldr	r0, [pc, #32]	@ (8001200 <I2C_Read_Byte+0x8c>)
 80011e0:	f002 fd40 	bl	8003c64 <HAL_GPIO_WritePin>
	if (!ack)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <I2C_Read_Byte+0x7c>
		I2C_NAck();   //sent nACK
 80011ea:	f7ff ff47 	bl	800107c <I2C_NAck>
 80011ee:	e001      	b.n	80011f4 <I2C_Read_Byte+0x80>
	else
		I2C_Ack();        //sent ACK
 80011f0:	f7ff ff1a 	bl	8001028 <I2C_Ack>

	return receive;
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	58020c00 	.word	0x58020c00

08001204 <I2C_WriteReg>:
 * Return         : ret
 -0  succeed
 -1  error
 * Attention		 : None
 *******************************************************************************/
uint8_t I2C_WriteReg(uint8_t I2c_Addr, uint16_t reg, uint8_t *buf, uint8_t len) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	603a      	str	r2, [r7, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	460b      	mov	r3, r1
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	71bb      	strb	r3, [r7, #6]
#if !(defined(__i2c_H)||defined(__I2C_H__))
	uint8_t i;
	uint8_t ret = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	73bb      	strb	r3, [r7, #14]
	I2C_Start();
 800121e:	f7ff fe79 	bl	8000f14 <I2C_Start>

	I2C_Send_Byte(I2c_Addr);   //Slaver Addr
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff4d 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 800122a:	f7ff fec3 	bl	8000fb4 <I2C_Wait_Ack>

#ifdef I2C_MEMADD_16BIT
	I2C_Send_Byte(reg >> 8);   	     //Data Addr high
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	b29b      	uxth	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff44 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 800123c:	f7ff feba 	bl	8000fb4 <I2C_Wait_Ack>
#endif

	I2C_Send_Byte(reg & 0xFF);   	   //Data Addr low
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff3d 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 800124a:	f7ff feb3 	bl	8000fb4 <I2C_Wait_Ack>

	for (i = 0; i < len; i++) {
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e010      	b.n	8001276 <I2C_WriteReg+0x72>
		I2C_Send_Byte(buf[i]);
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff31 	bl	80010c4 <I2C_Send_Byte>
		ret = I2C_Wait_Ack();
 8001262:	f7ff fea7 	bl	8000fb4 <I2C_Wait_Ack>
 8001266:	4603      	mov	r3, r0
 8001268:	73bb      	strb	r3, [r7, #14]
		if (ret)
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d107      	bne.n	8001280 <I2C_WriteReg+0x7c>
	for (i = 0; i < len; i++) {
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	3301      	adds	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	429a      	cmp	r2, r3
 800127c:	d3ea      	bcc.n	8001254 <I2C_WriteReg+0x50>
 800127e:	e000      	b.n	8001282 <I2C_WriteReg+0x7e>
			break;
 8001280:	bf00      	nop
	}
	I2C_Stop();
 8001282:	f7ff fe73 	bl	8000f6c <I2C_Stop>
	return ret;
 8001286:	7bbb      	ldrb	r3, [r7, #14]
#else
	uint8_t result = HAL_I2C_Mem_Write(&hi2c4, I2c_Addr, reg, sizeof(reg), buf,
			len, 1000);
	return result;
#endif
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <I2C_ReadReg>:
 *                  - len: The length of the array
 * Output         : None
 * Return         : None
 * Attention		 : None
 *******************************************************************************/
void I2C_ReadReg(uint8_t I2c_Addr, uint16_t reg, uint8_t *buf, uint8_t len) {
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	603a      	str	r2, [r7, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	460b      	mov	r3, r1
 80012a0:	80bb      	strh	r3, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	71bb      	strb	r3, [r7, #6]
#if !(defined(__i2c_H)||defined(__I2C_H__))
	uint8_t i;
	I2C_Start();
 80012a6:	f7ff fe35 	bl	8000f14 <I2C_Start>
	I2C_Send_Byte(I2c_Addr);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff09 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 80012b2:	f7ff fe7f 	bl	8000fb4 <I2C_Wait_Ack>

#ifdef I2C_MEMADD_16BIT
	I2C_Send_Byte(reg >> 8);   	     //Data Addr high
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff00 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 80012c4:	f7ff fe76 	bl	8000fb4 <I2C_Wait_Ack>
#endif

	I2C_Send_Byte(reg & 0xFF);   	   //Data Addr low
 80012c8:	88bb      	ldrh	r3, [r7, #4]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fef9 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 80012d2:	f7ff fe6f 	bl	8000fb4 <I2C_Wait_Ack>
	I2C_Stop();
 80012d6:	f7ff fe49 	bl	8000f6c <I2C_Stop>

	I2C_Start();
 80012da:	f7ff fe1b 	bl	8000f14 <I2C_Start>
	I2C_Send_Byte(I2c_Addr + 1);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff feed 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 80012ea:	f7ff fe63 	bl	8000fb4 <I2C_Wait_Ack>

	for (i = 0; i < len; i++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e013      	b.n	800131c <I2C_ReadReg+0x8c>
		buf[i] = I2C_Read_Byte(i == (len - 1) ? 0 : 1);
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	429a      	cmp	r2, r3
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	18d4      	adds	r4, r2, r3
 800130c:	4608      	mov	r0, r1
 800130e:	f7ff ff31 	bl	8001174 <I2C_Read_Byte>
 8001312:	4603      	mov	r3, r0
 8001314:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++) {
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	3301      	adds	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	429a      	cmp	r2, r3
 8001322:	d3e7      	bcc.n	80012f4 <I2C_ReadReg+0x64>
	}
	I2C_Stop();
 8001324:	f7ff fe22 	bl	8000f6c <I2C_Stop>
#else
	HAL_I2C_Mem_Read(&hi2c4, I2c_Addr, reg, sizeof(uint16_t), buf, len, 1000);
#endif
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bd90      	pop	{r4, r7, pc}

08001330 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <MX_CRC_Init+0x3c>)
 8001336:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <MX_CRC_Init+0x40>)
 8001338:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_CRC_Init+0x3c>)
 800133c:	2200      	movs	r2, #0
 800133e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <MX_CRC_Init+0x3c>)
 8001342:	2200      	movs	r2, #0
 8001344:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_CRC_Init+0x3c>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800134c:	4b07      	ldr	r3, [pc, #28]	@ (800136c <MX_CRC_Init+0x3c>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_CRC_Init+0x3c>)
 8001354:	2201      	movs	r2, #1
 8001356:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	@ (800136c <MX_CRC_Init+0x3c>)
 800135a:	f001 fded 	bl	8002f38 <HAL_CRC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001364:	f000 ff66 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	24000330 	.word	0x24000330
 8001370:	58024c00 	.word	0x58024c00

08001374 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0b      	ldr	r2, [pc, #44]	@ (80013b0 <HAL_CRC_MspInit+0x3c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d10e      	bne.n	80013a4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	4a09      	ldr	r2, [pc, #36]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 800138e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	58024c00 	.word	0x58024c00
 80013b4:	58024400 	.word	0x58024400

080013b8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013be:	4a1a      	ldr	r2, [pc, #104]	@ (8001428 <MX_DMA2D_Init+0x70>)
 80013c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80013c8:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013dc:	2202      	movs	r2, #2
 80013de:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80013fe:	4809      	ldr	r0, [pc, #36]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 8001400:	f001 fe8c 	bl	800311c <HAL_DMA2D_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800140a:	f000 ff13 	bl	8002234 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800140e:	2101      	movs	r1, #1
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 8001412:	f002 f90b 	bl	800362c <HAL_DMA2D_ConfigLayer>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800141c:	f000 ff0a 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	24000354 	.word	0x24000354
 8001428:	52001000 	.word	0x52001000

0800142c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <HAL_DMA2D_MspInit+0x48>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d116      	bne.n	800146c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <HAL_DMA2D_MspInit+0x4c>)
 8001440:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001444:	4a0c      	ldr	r2, [pc, #48]	@ (8001478 <HAL_DMA2D_MspInit+0x4c>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_DMA2D_MspInit+0x4c>)
 8001450:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2105      	movs	r1, #5
 8001460:	205a      	movs	r0, #90	@ 0x5a
 8001462:	f001 fd41 	bl	8002ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001466:	205a      	movs	r0, #90	@ 0x5a
 8001468:	f001 fd58 	bl	8002f1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	52001000 	.word	0x52001000
 8001478:	58024400 	.word	0x58024400

0800147c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
 8001490:	615a      	str	r2, [r3, #20]
 8001492:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <MX_FMC_Init+0x98>)
 8001496:	4a20      	ldr	r2, [pc, #128]	@ (8001518 <MX_FMC_Init+0x9c>)
 8001498:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800149a:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <MX_FMC_Init+0x98>)
 800149c:	2201      	movs	r2, #1
 800149e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <MX_FMC_Init+0x98>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_FMC_Init+0x98>)
 80014a8:	2204      	movs	r2, #4
 80014aa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <MX_FMC_Init+0x98>)
 80014ae:	2210      	movs	r2, #16
 80014b0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <MX_FMC_Init+0x98>)
 80014b4:	2240      	movs	r2, #64	@ 0x40
 80014b6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <MX_FMC_Init+0x98>)
 80014ba:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014be:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014c0:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <MX_FMC_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80014c6:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <MX_FMC_Init+0x98>)
 80014c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014cc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <MX_FMC_Init+0x98>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <MX_FMC_Init+0x98>)
 80014d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80014dc:	2302      	movs	r3, #2
 80014de:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80014e0:	2307      	movs	r3, #7
 80014e2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80014e4:	2304      	movs	r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80014e8:	2306      	movs	r3, #6
 80014ea:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	@ (8001514 <MX_FMC_Init+0x98>)
 80014fe:	f005 fef1 	bl	80072e4 <HAL_SDRAM_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001508:	f000 fe94 	bl	8002234 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800150c:	bf00      	nop
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	240003bc 	.word	0x240003bc
 8001518:	52004140 	.word	0x52004140

0800151c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800151c:	b580      	push	{r7, lr}
 800151e:	b0b8      	sub	sp, #224	@ 0xe0
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001532:	4b51      	ldr	r3, [pc, #324]	@ (8001678 <HAL_FMC_MspInit+0x15c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 8099 	bne.w	800166e <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 800153c:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <HAL_FMC_MspInit+0x15c>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	22c0      	movs	r2, #192	@ 0xc0
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f028 f979 	bl	8029842 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001550:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800155c:	2300      	movs	r3, #0
 800155e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4618      	mov	r0, r3
 8001566:	f004 f891 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001570:	f000 fe60 	bl	8002234 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001574:	4b41      	ldr	r3, [pc, #260]	@ (800167c <HAL_FMC_MspInit+0x160>)
 8001576:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800157a:	4a40      	ldr	r2, [pc, #256]	@ (800167c <HAL_FMC_MspInit+0x160>)
 800157c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001580:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001584:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <HAL_FMC_MspInit+0x160>)
 8001586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800158a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001592:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001596:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ac:	230c      	movs	r3, #12
 80015ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015b6:	4619      	mov	r1, r3
 80015b8:	4831      	ldr	r0, [pc, #196]	@ (8001680 <HAL_FMC_MspInit+0x164>)
 80015ba:	f002 f98b 	bl	80038d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015be:	23e0      	movs	r3, #224	@ 0xe0
 80015c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d6:	230c      	movs	r3, #12
 80015d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015e0:	4619      	mov	r1, r3
 80015e2:	4828      	ldr	r0, [pc, #160]	@ (8001684 <HAL_FMC_MspInit+0x168>)
 80015e4:	f002 f976 	bl	80038d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80015e8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80015ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001602:	230c      	movs	r3, #12
 8001604:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001608:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800160c:	4619      	mov	r1, r3
 800160e:	481e      	ldr	r0, [pc, #120]	@ (8001688 <HAL_FMC_MspInit+0x16c>)
 8001610:	f002 f960 	bl	80038d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001614:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001618:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800162e:	230c      	movs	r3, #12
 8001630:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001634:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001638:	4619      	mov	r1, r3
 800163a:	4814      	ldr	r0, [pc, #80]	@ (800168c <HAL_FMC_MspInit+0x170>)
 800163c:	f002 f94a 	bl	80038d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001640:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001644:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800165a:	230c      	movs	r3, #12
 800165c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001660:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001664:	4619      	mov	r1, r3
 8001666:	480a      	ldr	r0, [pc, #40]	@ (8001690 <HAL_FMC_MspInit+0x174>)
 8001668:	f002 f934 	bl	80038d4 <HAL_GPIO_Init>
 800166c:	e000      	b.n	8001670 <HAL_FMC_MspInit+0x154>
    return;
 800166e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001670:	37e0      	adds	r7, #224	@ 0xe0
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	240003f0 	.word	0x240003f0
 800167c:	58024400 	.word	0x58024400
 8001680:	58021400 	.word	0x58021400
 8001684:	58021c00 	.word	0x58021c00
 8001688:	58021800 	.word	0x58021800
 800168c:	58021000 	.word	0x58021000
 8001690:	58020c00 	.word	0x58020c00

08001694 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800169c:	f7ff ff3e 	bl	800151c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016ac:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <MX_FREERTOS_Init+0x28>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <MX_FREERTOS_Init+0x2c>)
 80016b2:	f008 f8b1 	bl	8009818 <osThreadNew>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <MX_FREERTOS_Init+0x30>)
 80016ba:	6013      	str	r3, [r2, #0]

  /* creation of TouchGfxTask */
  TouchGfxTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGfxTask_attributes);
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <MX_FREERTOS_Init+0x34>)
 80016be:	2100      	movs	r1, #0
 80016c0:	4807      	ldr	r0, [pc, #28]	@ (80016e0 <MX_FREERTOS_Init+0x38>)
 80016c2:	f008 f8a9 	bl	8009818 <osThreadNew>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <MX_FREERTOS_Init+0x3c>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	0802b0a4 	.word	0x0802b0a4
 80016d4:	080016e9 	.word	0x080016e9
 80016d8:	240003f4 	.word	0x240003f4
 80016dc:	0802b0c8 	.word	0x0802b0c8
 80016e0:	0800d007 	.word	0x0800d007
 80016e4:	240003f8 	.word	0x240003f8

080016e8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2140      	movs	r1, #64	@ 0x40
 80016f4:	4807      	ldr	r0, [pc, #28]	@ (8001714 <StartDefaultTask+0x2c>)
 80016f6:	f002 fab5 	bl	8003c64 <HAL_GPIO_WritePin>
		osDelay(200);
 80016fa:	20c8      	movs	r0, #200	@ 0xc8
 80016fc:	f008 f91e 	bl	800993c <osDelay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	2140      	movs	r1, #64	@ 0x40
 8001704:	4803      	ldr	r0, [pc, #12]	@ (8001714 <StartDefaultTask+0x2c>)
 8001706:	f002 faad 	bl	8003c64 <HAL_GPIO_WritePin>
		osDelay(200);
 800170a:	20c8      	movs	r0, #200	@ 0xc8
 800170c:	f008 f916 	bl	800993c <osDelay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001710:	bf00      	nop
 8001712:	e7ed      	b.n	80016f0 <StartDefaultTask+0x8>
 8001714:	58020400 	.word	0x58020400

08001718 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08e      	sub	sp, #56	@ 0x38
 800171c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172e:	4b83      	ldr	r3, [pc, #524]	@ (800193c <MX_GPIO_Init+0x224>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001734:	4a81      	ldr	r2, [pc, #516]	@ (800193c <MX_GPIO_Init+0x224>)
 8001736:	f043 0310 	orr.w	r3, r3, #16
 800173a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173e:	4b7f      	ldr	r3, [pc, #508]	@ (800193c <MX_GPIO_Init+0x224>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	623b      	str	r3, [r7, #32]
 800174a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800174c:	4b7b      	ldr	r3, [pc, #492]	@ (800193c <MX_GPIO_Init+0x224>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001752:	4a7a      	ldr	r2, [pc, #488]	@ (800193c <MX_GPIO_Init+0x224>)
 8001754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800175c:	4b77      	ldr	r3, [pc, #476]	@ (800193c <MX_GPIO_Init+0x224>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176a:	4b74      	ldr	r3, [pc, #464]	@ (800193c <MX_GPIO_Init+0x224>)
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001770:	4a72      	ldr	r2, [pc, #456]	@ (800193c <MX_GPIO_Init+0x224>)
 8001772:	f043 0320 	orr.w	r3, r3, #32
 8001776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800177a:	4b70      	ldr	r3, [pc, #448]	@ (800193c <MX_GPIO_Init+0x224>)
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001788:	4b6c      	ldr	r3, [pc, #432]	@ (800193c <MX_GPIO_Init+0x224>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178e:	4a6b      	ldr	r2, [pc, #428]	@ (800193c <MX_GPIO_Init+0x224>)
 8001790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001794:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001798:	4b68      	ldr	r3, [pc, #416]	@ (800193c <MX_GPIO_Init+0x224>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	4b65      	ldr	r3, [pc, #404]	@ (800193c <MX_GPIO_Init+0x224>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ac:	4a63      	ldr	r2, [pc, #396]	@ (800193c <MX_GPIO_Init+0x224>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b6:	4b61      	ldr	r3, [pc, #388]	@ (800193c <MX_GPIO_Init+0x224>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b5d      	ldr	r3, [pc, #372]	@ (800193c <MX_GPIO_Init+0x224>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ca:	4a5c      	ldr	r2, [pc, #368]	@ (800193c <MX_GPIO_Init+0x224>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d4:	4b59      	ldr	r3, [pc, #356]	@ (800193c <MX_GPIO_Init+0x224>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b56      	ldr	r3, [pc, #344]	@ (800193c <MX_GPIO_Init+0x224>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e8:	4a54      	ldr	r2, [pc, #336]	@ (800193c <MX_GPIO_Init+0x224>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f2:	4b52      	ldr	r3, [pc, #328]	@ (800193c <MX_GPIO_Init+0x224>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001800:	4b4e      	ldr	r3, [pc, #312]	@ (800193c <MX_GPIO_Init+0x224>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001806:	4a4d      	ldr	r2, [pc, #308]	@ (800193c <MX_GPIO_Init+0x224>)
 8001808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001810:	4b4a      	ldr	r3, [pc, #296]	@ (800193c <MX_GPIO_Init+0x224>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	4b47      	ldr	r3, [pc, #284]	@ (800193c <MX_GPIO_Init+0x224>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001824:	4a45      	ldr	r2, [pc, #276]	@ (800193c <MX_GPIO_Init+0x224>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182e:	4b43      	ldr	r3, [pc, #268]	@ (800193c <MX_GPIO_Init+0x224>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_GPIO_Port, DISP_Pin, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001842:	483f      	ldr	r0, [pc, #252]	@ (8001940 <MX_GPIO_Init+0x228>)
 8001844:	f002 fa0e 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2140      	movs	r1, #64	@ 0x40
 800184c:	483d      	ldr	r0, [pc, #244]	@ (8001944 <MX_GPIO_Init+0x22c>)
 800184e:	f002 fa09 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2110      	movs	r1, #16
 8001856:	483c      	ldr	r0, [pc, #240]	@ (8001948 <MX_GPIO_Init+0x230>)
 8001858:	f002 fa04 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	21c0      	movs	r1, #192	@ 0xc0
 8001860:	483a      	ldr	r0, [pc, #232]	@ (800194c <MX_GPIO_Init+0x234>)
 8001862:	f002 f9ff 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISP_Pin */
  GPIO_InitStruct.Pin = DISP_Pin;
 8001866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DISP_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	4830      	ldr	r0, [pc, #192]	@ (8001940 <MX_GPIO_Init+0x228>)
 8001880:	f002 f828 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_RST_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin;
 8001884:	2340      	movs	r3, #64	@ 0x40
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TP_RST_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	482a      	ldr	r0, [pc, #168]	@ (8001944 <MX_GPIO_Init+0x22c>)
 800189c:	f002 f81a 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_SCL_Pin */
  GPIO_InitStruct.Pin = TP_SCL_Pin;
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_SCL_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	4824      	ldr	r0, [pc, #144]	@ (8001944 <MX_GPIO_Init+0x22c>)
 80018b4:	f002 f80e 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_SDA_Pin */
  GPIO_InitStruct.Pin = TP_SDA_Pin;
 80018b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_SDA_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	481d      	ldr	r0, [pc, #116]	@ (8001944 <MX_GPIO_Init+0x22c>)
 80018ce:	f002 f801 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 80018d2:	2310      	movs	r3, #16
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4817      	ldr	r0, [pc, #92]	@ (8001948 <MX_GPIO_Init+0x230>)
 80018ea:	f001 fff3 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80018ee:	2380      	movs	r3, #128	@ 0x80
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4813      	ldr	r0, [pc, #76]	@ (8001950 <MX_GPIO_Init+0x238>)
 8001904:	f001 ffe6 	bl	80038d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001908:	23c0      	movs	r3, #192	@ 0xc0
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	480b      	ldr	r0, [pc, #44]	@ (800194c <MX_GPIO_Init+0x234>)
 8001920:	f001 ffd8 	bl	80038d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2105      	movs	r1, #5
 8001928:	2017      	movs	r0, #23
 800192a:	f001 fadd 	bl	8002ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800192e:	2017      	movs	r0, #23
 8001930:	f001 faf4 	bl	8002f1c <HAL_NVIC_EnableIRQ>

}
 8001934:	bf00      	nop
 8001936:	3738      	adds	r7, #56	@ 0x38
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58024400 	.word	0x58024400
 8001940:	58022000 	.word	0x58022000
 8001944:	58021400 	.word	0x58021400
 8001948:	58021c00 	.word	0x58021c00
 800194c:	58020400 	.word	0x58020400
 8001950:	58020c00 	.word	0x58020c00

08001954 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001958:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <MX_I2C4_Init+0x78>)
 800195a:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <MX_I2C4_Init+0x7c>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00000E14;
 800195e:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001960:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001964:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001966:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <MX_I2C4_Init+0x78>)
 800196e:	2201      	movs	r2, #1
 8001970:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001972:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <MX_I2C4_Init+0x78>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800197e:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <MX_I2C4_Init+0x78>)
 800198c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001992:	480e      	ldr	r0, [pc, #56]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001994:	f002 f9a4 	bl	8003ce0 <HAL_I2C_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_I2C4_Init+0x4e>
  {
    Error_Handler();
 800199e:	f000 fc49 	bl	8002234 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019a2:	2100      	movs	r1, #0
 80019a4:	4809      	ldr	r0, [pc, #36]	@ (80019cc <MX_I2C4_Init+0x78>)
 80019a6:	f002 fa37 	bl	8003e18 <HAL_I2CEx_ConfigAnalogFilter>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_I2C4_Init+0x60>
  {
    Error_Handler();
 80019b0:	f000 fc40 	bl	8002234 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80019b4:	2100      	movs	r1, #0
 80019b6:	4805      	ldr	r0, [pc, #20]	@ (80019cc <MX_I2C4_Init+0x78>)
 80019b8:	f002 fa79 	bl	8003eae <HAL_I2CEx_ConfigDigitalFilter>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_I2C4_Init+0x72>
  {
    Error_Handler();
 80019c2:	f000 fc37 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	240003fc 	.word	0x240003fc
 80019d0:	58001c00 	.word	0x58001c00

080019d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b0ba      	sub	sp, #232	@ 0xe8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	22c0      	movs	r2, #192	@ 0xc0
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f027 ff24 	bl	8029842 <memset>
  if(i2cHandle->Instance==I2C4)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a27      	ldr	r2, [pc, #156]	@ (8001a9c <HAL_I2C_MspInit+0xc8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d147      	bne.n	8001a94 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001a04:	f04f 0210 	mov.w	r2, #16
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_CSI;
 8001a10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fe35 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001a28:	f000 fc04 	bl	8002234 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a32:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = TP_SCLD12_Pin|TP_SDAD13_Pin;
 8001a4a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a52:	2312      	movs	r3, #18
 8001a54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001a64:	2304      	movs	r3, #4
 8001a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	@ (8001aa4 <HAL_I2C_MspInit+0xd0>)
 8001a72:	f001 ff2f 	bl	80038d4 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001a76:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a7c:	4a08      	ldr	r2, [pc, #32]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001a94:	bf00      	nop
 8001a96:	37e8      	adds	r7, #232	@ 0xe8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58001c00 	.word	0x58001c00
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	58020c00 	.word	0x58020c00

08001aa8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	@ 0x38
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2234      	movs	r2, #52	@ 0x34
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f027 fec4 	bl	8029842 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001aba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001abc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ba8 <MX_LTDC_Init+0x100>)
 8001abe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ac0:	4b38      	ldr	r3, [pc, #224]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001ac6:	4b37      	ldr	r3, [pc, #220]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001acc:	4b35      	ldr	r3, [pc, #212]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ad2:	4b34      	ldr	r3, [pc, #208]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 29;
 8001ad8:	4b32      	ldr	r3, [pc, #200]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ada:	221d      	movs	r2, #29
 8001adc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001ade:	4b31      	ldr	r3, [pc, #196]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ae0:	2209      	movs	r2, #9
 8001ae2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 75;
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ae6:	224b      	movs	r2, #75	@ 0x4b
 8001ae8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 32;
 8001aea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001aec:	2220      	movs	r2, #32
 8001aee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 875;
 8001af0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001af2:	f240 326b 	movw	r2, #875	@ 0x36b
 8001af6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8001af8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001afe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 881;
 8001b00:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b02:	f240 3271 	movw	r2, #881	@ 0x371
 8001b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 534;
 8001b08:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b0a:	f240 2216 	movw	r2, #534	@ 0x216
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b10:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b18:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b20:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b28:	481e      	ldr	r0, [pc, #120]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b2a:	f002 fa0c 	bl	8003f46 <HAL_LTDC_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001b34:	f000 fb7e 	bl	8002234 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001b3c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001b40:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001b46:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b4a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0xff;
 8001b50:	23ff      	movs	r3, #255	@ 0xff
 8001b52:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b5c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001b62:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 800;
 8001b68:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001b6e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b72:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b8e:	f002 fb2f 	bl	80041f0 <HAL_LTDC_ConfigLayer>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001b98:	f000 fb4c 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3738      	adds	r7, #56	@ 0x38
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	24000450 	.word	0x24000450
 8001ba8:	50001000 	.word	0x50001000

08001bac <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0c2      	sub	sp, #264	@ 0x108
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bba:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bd0:	22c0      	movs	r2, #192	@ 0xc0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f027 fe34 	bl	8029842 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4ad2      	ldr	r2, [pc, #840]	@ (8001f30 <HAL_LTDC_MspInit+0x384>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	f040 819c 	bne.w	8001f26 <HAL_LTDC_MspInit+0x37a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bee:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3N = 96;
 8001bfe:	2360      	movs	r3, #96	@ 0x60
 8001c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001c06:	2304      	movs	r3, #4
 8001c08:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3R = 9;
 8001c0a:	2309      	movs	r3, #9
 8001c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fd33 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_LTDC_MspInit+0x84>
    {
      Error_Handler();
 8001c2c:	f000 fb02 	bl	8002234 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c30:	4bc0      	ldr	r3, [pc, #768]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c36:	4abf      	ldr	r2, [pc, #764]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001c40:	4bbc      	ldr	r3, [pc, #752]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4e:	4bb9      	ldr	r3, [pc, #740]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c54:	4ab7      	ldr	r2, [pc, #732]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c5e:	4bb5      	ldr	r3, [pc, #724]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c6c:	4bb1      	ldr	r3, [pc, #708]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c72:	4ab0      	ldr	r2, [pc, #704]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c7c:	4bad      	ldr	r3, [pc, #692]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8a:	4baa      	ldr	r3, [pc, #680]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c90:	4aa8      	ldr	r2, [pc, #672]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c92:	f043 0320 	orr.w	r3, r3, #32
 8001c96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c9a:	4ba6      	ldr	r3, [pc, #664]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca8:	4ba2      	ldr	r3, [pc, #648]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cae:	4aa1      	ldr	r2, [pc, #644]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cb8:	4b9e      	ldr	r3, [pc, #632]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc6:	4b9b      	ldr	r3, [pc, #620]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ccc:	4a99      	ldr	r2, [pc, #612]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cd6:	4b97      	ldr	r3, [pc, #604]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b93      	ldr	r3, [pc, #588]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cea:	4a92      	ldr	r2, [pc, #584]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d02:	4b8c      	ldr	r3, [pc, #560]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d08:	4a8a      	ldr	r2, [pc, #552]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d12:	4b88      	ldr	r3, [pc, #544]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d20:	4b84      	ldr	r3, [pc, #528]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d26:	4a83      	ldr	r2, [pc, #524]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d28:	f043 0308 	orr.w	r3, r3, #8
 8001d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d30:	4b80      	ldr	r3, [pc, #512]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001d3e:	2370      	movs	r3, #112	@ 0x70
 8001d40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d56:	230e      	movs	r3, #14
 8001d58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4875      	ldr	r0, [pc, #468]	@ (8001f38 <HAL_LTDC_MspInit+0x38c>)
 8001d64:	f001 fdb6 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d68:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d82:	230e      	movs	r3, #14
 8001d84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d88:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	486b      	ldr	r0, [pc, #428]	@ (8001f3c <HAL_LTDC_MspInit+0x390>)
 8001d90:	f001 fda0 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dae:	230e      	movs	r3, #14
 8001db0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4861      	ldr	r0, [pc, #388]	@ (8001f40 <HAL_LTDC_MspInit+0x394>)
 8001dbc:	f001 fd8a 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dd8:	230e      	movs	r3, #14
 8001dda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dde:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001de2:	4619      	mov	r1, r3
 8001de4:	4857      	ldr	r0, [pc, #348]	@ (8001f44 <HAL_LTDC_MspInit+0x398>)
 8001de6:	f001 fd75 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8001dea:	f24a 730c 	movw	r3, #42764	@ 0xa70c
 8001dee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e04:	230e      	movs	r3, #14
 8001e06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e0a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	484d      	ldr	r0, [pc, #308]	@ (8001f48 <HAL_LTDC_MspInit+0x39c>)
 8001e12:	f001 fd5f 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e16:	2302      	movs	r3, #2
 8001e18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e2e:	2309      	movs	r3, #9
 8001e30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4844      	ldr	r0, [pc, #272]	@ (8001f4c <HAL_LTDC_MspInit+0x3a0>)
 8001e3c:	f001 fd4a 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 8001e40:	f44f 53c2 	mov.w	r3, #6208	@ 0x1840
 8001e44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e5a:	230e      	movs	r3, #14
 8001e5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e60:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e64:	4619      	mov	r1, r3
 8001e66:	483a      	ldr	r0, [pc, #232]	@ (8001f50 <HAL_LTDC_MspInit+0x3a4>)
 8001e68:	f001 fd34 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e84:	230e      	movs	r3, #14
 8001e86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e8a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	482f      	ldr	r0, [pc, #188]	@ (8001f50 <HAL_LTDC_MspInit+0x3a4>)
 8001e92:	f001 fd1f 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001e96:	23f7      	movs	r3, #247	@ 0xf7
 8001e98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eae:	230e      	movs	r3, #14
 8001eb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001eb4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4820      	ldr	r0, [pc, #128]	@ (8001f3c <HAL_LTDC_MspInit+0x390>)
 8001ebc:	f001 fd0a 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ec0:	2340      	movs	r3, #64	@ 0x40
 8001ec2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ed8:	230e      	movs	r3, #14
 8001eda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ede:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	481b      	ldr	r0, [pc, #108]	@ (8001f54 <HAL_LTDC_MspInit+0x3a8>)
 8001ee6:	f001 fcf5 	bl	80038d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f04:	2309      	movs	r3, #9
 8001f06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f0a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480f      	ldr	r0, [pc, #60]	@ (8001f50 <HAL_LTDC_MspInit+0x3a4>)
 8001f12:	f001 fcdf 	bl	80038d4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2105      	movs	r1, #5
 8001f1a:	2058      	movs	r0, #88	@ 0x58
 8001f1c:	f000 ffe4 	bl	8002ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f20:	2058      	movs	r0, #88	@ 0x58
 8001f22:	f000 fffb 	bl	8002f1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001f26:	bf00      	nop
 8001f28:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	50001000 	.word	0x50001000
 8001f34:	58024400 	.word	0x58024400
 8001f38:	58021000 	.word	0x58021000
 8001f3c:	58022000 	.word	0x58022000
 8001f40:	58021400 	.word	0x58021400
 8001f44:	58020800 	.word	0x58020800
 8001f48:	58021c00 	.word	0x58021c00
 8001f4c:	58020400 	.word	0x58020400
 8001f50:	58021800 	.word	0x58021800
 8001f54:	58020c00 	.word	0x58020c00

08001f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001f5e:	4b69      	ldr	r3, [pc, #420]	@ (8002104 <main+0x1ac>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d11b      	bne.n	8001fa2 <main+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f6a:	f3bf 8f4f 	dsb	sy
}
 8001f6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f70:	f3bf 8f6f 	isb	sy
}
 8001f74:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001f76:	4b63      	ldr	r3, [pc, #396]	@ (8002104 <main+0x1ac>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001f7e:	f3bf 8f4f 	dsb	sy
}
 8001f82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f84:	f3bf 8f6f 	isb	sy
}
 8001f88:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001f8a:	4b5e      	ldr	r3, [pc, #376]	@ (8002104 <main+0x1ac>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4a5d      	ldr	r2, [pc, #372]	@ (8002104 <main+0x1ac>)
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f94:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f96:	f3bf 8f4f 	dsb	sy
}
 8001f9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f9c:	f3bf 8f6f 	isb	sy
}
 8001fa0:	e000      	b.n	8001fa4 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001fa2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001fa4:	4b57      	ldr	r3, [pc, #348]	@ (8002104 <main+0x1ac>)
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d138      	bne.n	8002022 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001fb0:	4b54      	ldr	r3, [pc, #336]	@ (8002104 <main+0x1ac>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb8:	f3bf 8f4f 	dsb	sy
}
 8001fbc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001fbe:	4b51      	ldr	r3, [pc, #324]	@ (8002104 <main+0x1ac>)
 8001fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fc4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	0b5b      	lsrs	r3, r3, #13
 8001fca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fce:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	08db      	lsrs	r3, r3, #3
 8001fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001fe2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001fe8:	4946      	ldr	r1, [pc, #280]	@ (8002104 <main+0x1ac>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	1e5a      	subs	r2, r3, #1
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1ef      	bne.n	8001fda <main+0x82>
    } while(sets-- != 0U);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	60ba      	str	r2, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e5      	bne.n	8001fd0 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8002004:	f3bf 8f4f 	dsb	sy
}
 8002008:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800200a:	4b3e      	ldr	r3, [pc, #248]	@ (8002104 <main+0x1ac>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	4a3d      	ldr	r2, [pc, #244]	@ (8002104 <main+0x1ac>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002014:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002016:	f3bf 8f4f 	dsb	sy
}
 800201a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800201c:	f3bf 8f6f 	isb	sy
}
 8002020:	e000      	b.n	8002024 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002022:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002024:	f000 fe1c 	bl	8002c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002028:	f000 f872 	bl	8002110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800202c:	f7ff fb74 	bl	8001718 <MX_GPIO_Init>
  MX_FMC_Init();
 8002030:	f7ff fa24 	bl	800147c <MX_FMC_Init>
  MX_USART1_UART_Init();
 8002034:	f000 fbdc 	bl	80027f0 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8002038:	f7ff fd36 	bl	8001aa8 <MX_LTDC_Init>
  MX_DMA2D_Init();
 800203c:	f7ff f9bc 	bl	80013b8 <MX_DMA2D_Init>
  MX_TIM2_Init();
 8002040:	f000 fb24 	bl	800268c <MX_TIM2_Init>
  MX_CRC_Init();
 8002044:	f7ff f974 	bl	8001330 <MX_CRC_Init>
  MX_I2C4_Init();
 8002048:	f7ff fc84 	bl	8001954 <MX_I2C4_Init>
  MX_TouchGFX_Init();
 800204c:	f00a ffd3 	bl	800cff6 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8002050:	f00a ffca 	bl	800cfe8 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002054:	f007 fb96 	bl	8009784 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002058:	f7ff fb26 	bl	80016a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800205c:	f007 fbb6 	bl	80097cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	BSP_LCD_Init();
 8002060:	f7fe fce0 	bl	8000a24 <BSP_LCD_Init>
	GT811_Init();
 8002064:	f7fe fe58 	bl	8000d18 <GT811_Init>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002068:	2000      	movs	r0, #0
 800206a:	f7fe fd63 	bl	8000b34 <BSP_LCD_Clear>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800206e:	2201      	movs	r2, #1
 8002070:	2140      	movs	r1, #64	@ 0x40
 8002072:	4825      	ldr	r0, [pc, #148]	@ (8002108 <main+0x1b0>)
 8002074:	f001 fdf6 	bl	8003c64 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8002078:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800207c:	f000 fe4c 	bl	8002d18 <HAL_Delay>
		BSP_LCD_Clear(0xf000);
 8002080:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8002084:	f7fe fd56 	bl	8000b34 <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002088:	2201      	movs	r2, #1
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	481e      	ldr	r0, [pc, #120]	@ (8002108 <main+0x1b0>)
 800208e:	f001 fde9 	bl	8003c64 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8002092:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002096:	f000 fe3f 	bl	8002d18 <HAL_Delay>
		BSP_LCD_Clear(0x0f00);
 800209a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800209e:	f7fe fd49 	bl	8000b34 <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80020a2:	2201      	movs	r2, #1
 80020a4:	2110      	movs	r1, #16
 80020a6:	4819      	ldr	r0, [pc, #100]	@ (800210c <main+0x1b4>)
 80020a8:	f001 fddc 	bl	8003c64 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80020ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020b0:	f000 fe32 	bl	8002d18 <HAL_Delay>
		BSP_LCD_Clear(0x00f0);
 80020b4:	20f0      	movs	r0, #240	@ 0xf0
 80020b6:	f7fe fd3d 	bl	8000b34 <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2140      	movs	r1, #64	@ 0x40
 80020be:	4812      	ldr	r0, [pc, #72]	@ (8002108 <main+0x1b0>)
 80020c0:	f001 fdd0 	bl	8003c64 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80020c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020c8:	f000 fe26 	bl	8002d18 <HAL_Delay>
		BSP_LCD_Clear(0x000f);
 80020cc:	200f      	movs	r0, #15
 80020ce:	f7fe fd31 	bl	8000b34 <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2180      	movs	r1, #128	@ 0x80
 80020d6:	480c      	ldr	r0, [pc, #48]	@ (8002108 <main+0x1b0>)
 80020d8:	f001 fdc4 	bl	8003c64 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80020dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e0:	f000 fe1a 	bl	8002d18 <HAL_Delay>
		BSP_LCD_Clear(0xf00f);
 80020e4:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 80020e8:	f7fe fd24 	bl	8000b34 <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2110      	movs	r1, #16
 80020f0:	4806      	ldr	r0, [pc, #24]	@ (800210c <main+0x1b4>)
 80020f2:	f001 fdb7 	bl	8003c64 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80020f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020fa:	f000 fe0d 	bl	8002d18 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80020fe:	bf00      	nop
 8002100:	e7b5      	b.n	800206e <main+0x116>
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	58020400 	.word	0x58020400
 800210c:	58021c00 	.word	0x58021c00

08002110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b09c      	sub	sp, #112	@ 0x70
 8002114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800211a:	224c      	movs	r2, #76	@ 0x4c
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f027 fb8f 	bl	8029842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2220      	movs	r2, #32
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f027 fb89 	bl	8029842 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002130:	2002      	movs	r0, #2
 8002132:	f002 fa49 	bl	80045c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002136:	2300      	movs	r3, #0
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4b33      	ldr	r3, [pc, #204]	@ (8002208 <SystemClock_Config+0xf8>)
 800213c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213e:	4a32      	ldr	r2, [pc, #200]	@ (8002208 <SystemClock_Config+0xf8>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002146:	4b30      	ldr	r3, [pc, #192]	@ (8002208 <SystemClock_Config+0xf8>)
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	4b2e      	ldr	r3, [pc, #184]	@ (800220c <SystemClock_Config+0xfc>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4a2d      	ldr	r2, [pc, #180]	@ (800220c <SystemClock_Config+0xfc>)
 8002156:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800215a:	6193      	str	r3, [r2, #24]
 800215c:	4b2b      	ldr	r3, [pc, #172]	@ (800220c <SystemClock_Config+0xfc>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002168:	bf00      	nop
 800216a:	4b28      	ldr	r3, [pc, #160]	@ (800220c <SystemClock_Config+0xfc>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002176:	d1f8      	bne.n	800216a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8002178:	2311      	movs	r3, #17
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800217c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002180:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8002182:	2380      	movs	r3, #128	@ 0x80
 8002184:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8002186:	2320      	movs	r3, #32
 8002188:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800218a:	2302      	movs	r3, #2
 800218c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800218e:	2302      	movs	r3, #2
 8002190:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002192:	2304      	movs	r3, #4
 8002194:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002196:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800219a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800219c:	2302      	movs	r3, #2
 800219e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80021a0:	2302      	movs	r3, #2
 80021a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021a4:	2302      	movs	r3, #2
 80021a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80021a8:	2304      	movs	r3, #4
 80021aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 fa3f 	bl	800463c <HAL_RCC_OscConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80021c4:	f000 f836 	bl	8002234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c8:	233f      	movs	r3, #63	@ 0x3f
 80021ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021cc:	2303      	movs	r3, #3
 80021ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80021d4:	2308      	movs	r3, #8
 80021d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80021d8:	2340      	movs	r3, #64	@ 0x40
 80021da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80021dc:	2350      	movs	r3, #80	@ 0x50
 80021de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80021e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80021e6:	2340      	movs	r3, #64	@ 0x40
 80021e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2102      	movs	r1, #2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 fe7e 	bl	8004ef0 <HAL_RCC_ClockConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <SystemClock_Config+0xee>
  {
    Error_Handler();
 80021fa:	f000 f81b 	bl	8002234 <Error_Handler>
  }
}
 80021fe:	bf00      	nop
 8002200:	3770      	adds	r7, #112	@ 0x70
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	58000400 	.word	0x58000400
 800220c:	58024800 	.word	0x58024800

08002210 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002222:	f000 fd59 	bl	8002cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40010000 	.word	0x40010000

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800223c:	2201      	movs	r2, #1
 800223e:	2140      	movs	r1, #64	@ 0x40
 8002240:	4807      	ldr	r0, [pc, #28]	@ (8002260 <Error_Handler+0x2c>)
 8002242:	f001 fd0f 	bl	8003c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
 8002248:	2180      	movs	r1, #128	@ 0x80
 800224a:	4805      	ldr	r0, [pc, #20]	@ (8002260 <Error_Handler+0x2c>)
 800224c:	f001 fd0a 	bl	8003c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8002250:	2201      	movs	r2, #1
 8002252:	2110      	movs	r1, #16
 8002254:	4803      	ldr	r0, [pc, #12]	@ (8002264 <Error_Handler+0x30>)
 8002256:	f001 fd05 	bl	8003c64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800225a:	bf00      	nop
 800225c:	e7ee      	b.n	800223c <Error_Handler+0x8>
 800225e:	bf00      	nop
 8002260:	58020400 	.word	0x58020400
 8002264:	58021c00 	.word	0x58021c00

08002268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_MspInit+0x38>)
 8002270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002274:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <HAL_MspInit+0x38>)
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800227e:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HAL_MspInit+0x38>)
 8002280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	210f      	movs	r1, #15
 8002290:	f06f 0001 	mvn.w	r0, #1
 8002294:	f000 fe28 	bl	8002ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	58024400 	.word	0x58024400

080022a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08e      	sub	sp, #56	@ 0x38
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	d844      	bhi.n	800233c <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	2019      	movs	r0, #25
 80022b8:	f000 fe16 	bl	8002ee8 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022bc:	2019      	movs	r0, #25
 80022be:	f000 fe2d 	bl	8002f1c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80022c2:	4a24      	ldr	r2, [pc, #144]	@ (8002354 <HAL_InitTick+0xb0>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <HAL_InitTick+0xb4>)
 80022ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022ce:	4a22      	ldr	r2, [pc, #136]	@ (8002358 <HAL_InitTick+0xb4>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <HAL_InitTick+0xb4>)
 80022da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022e6:	f107 020c 	add.w	r2, r7, #12
 80022ea:	f107 0310 	add.w	r3, r7, #16
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 f989 	bl	8005608 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80022f6:	f003 f971 	bl	80055dc <HAL_RCC_GetPCLK2Freq>
 80022fa:	4603      	mov	r3, r0
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002302:	4a16      	ldr	r2, [pc, #88]	@ (800235c <HAL_InitTick+0xb8>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	0c9b      	lsrs	r3, r3, #18
 800230a:	3b01      	subs	r3, #1
 800230c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800230e:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <HAL_InitTick+0xbc>)
 8002310:	4a14      	ldr	r2, [pc, #80]	@ (8002364 <HAL_InitTick+0xc0>)
 8002312:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002314:	4b12      	ldr	r3, [pc, #72]	@ (8002360 <HAL_InitTick+0xbc>)
 8002316:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800231a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800231c:	4a10      	ldr	r2, [pc, #64]	@ (8002360 <HAL_InitTick+0xbc>)
 800231e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002320:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002322:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <HAL_InitTick+0xbc>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_InitTick+0xbc>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800232e:	480c      	ldr	r0, [pc, #48]	@ (8002360 <HAL_InitTick+0xbc>)
 8002330:	f005 f871 	bl	8007416 <HAL_TIM_Base_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d107      	bne.n	800234a <HAL_InitTick+0xa6>
 800233a:	e001      	b.n	8002340 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e005      	b.n	800234c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002340:	4807      	ldr	r0, [pc, #28]	@ (8002360 <HAL_InitTick+0xbc>)
 8002342:	f005 f8c9 	bl	80074d8 <HAL_TIM_Base_Start_IT>
 8002346:	4603      	mov	r3, r0
 8002348:	e000      	b.n	800234c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	3738      	adds	r7, #56	@ 0x38
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2400000c 	.word	0x2400000c
 8002358:	58024400 	.word	0x58024400
 800235c:	431bde83 	.word	0x431bde83
 8002360:	240004f8 	.word	0x240004f8
 8002364:	40010000 	.word	0x40010000

08002368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <NMI_Handler+0x4>

08002370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <HardFault_Handler+0x4>

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <MemManage_Handler+0x4>

08002380 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <BusFault_Handler+0x4>

08002388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <UsageFault_Handler+0x4>

08002390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_INT_Pin);
 80023a2:	2080      	movs	r0, #128	@ 0x80
 80023a4:	f001 fc77 	bl	8003c96 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}

080023ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023b0:	4802      	ldr	r0, [pc, #8]	@ (80023bc <TIM1_UP_IRQHandler+0x10>)
 80023b2:	f005 f960 	bl	8007676 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	240004f8 	.word	0x240004f8

080023c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80023c4:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <LTDC_IRQHandler+0x10>)
 80023c6:	f001 fe5b 	bl	8004080 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	24000450 	.word	0x24000450

080023d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80023d8:	4802      	ldr	r0, [pc, #8]	@ (80023e4 <DMA2D_IRQHandler+0x10>)
 80023da:	f001 f817 	bl	800340c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	24000354 	.word	0x24000354

080023e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
	return 1;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_kill>:

int _kill(int pid, int sig)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002402:	f027 fb1f 	bl	8029a44 <__errno>
 8002406:	4603      	mov	r3, r0
 8002408:	2216      	movs	r2, #22
 800240a:	601a      	str	r2, [r3, #0]
	return -1;
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_exit>:

void _exit (int status)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ffe7 	bl	80023f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800242a:	bf00      	nop
 800242c:	e7fd      	b.n	800242a <_exit+0x12>

0800242e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e00a      	b.n	8002456 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002440:	f3af 8000 	nop.w
 8002444:	4601      	mov	r1, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	60ba      	str	r2, [r7, #8]
 800244c:	b2ca      	uxtb	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3301      	adds	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	dbf0      	blt.n	8002440 <_read+0x12>
	}

return len;
 800245e:	687b      	ldr	r3, [r7, #4]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e009      	b.n	800248e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	60ba      	str	r2, [r7, #8]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3301      	adds	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	dbf1      	blt.n	800247a <_write+0x12>
	}
	return len;
 8002496:	687b      	ldr	r3, [r7, #4]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_close>:

int _close(int file)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	return -1;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c8:	605a      	str	r2, [r3, #4]
	return 0;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_isatty>:

int _isatty(int file)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	return 1;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
	return 0;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002510:	4a14      	ldr	r2, [pc, #80]	@ (8002564 <_sbrk+0x5c>)
 8002512:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <_sbrk+0x60>)
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <_sbrk+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <_sbrk+0x64>)
 8002526:	4a12      	ldr	r2, [pc, #72]	@ (8002570 <_sbrk+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <_sbrk+0x64>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d207      	bcs.n	8002548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002538:	f027 fa84 	bl	8029a44 <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	220c      	movs	r2, #12
 8002540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	e009      	b.n	800255c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254e:	4b07      	ldr	r3, [pc, #28]	@ (800256c <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	4a05      	ldr	r2, [pc, #20]	@ (800256c <_sbrk+0x64>)
 8002558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	24080000 	.word	0x24080000
 8002568:	00000400 	.word	0x00000400
 800256c:	24000544 	.word	0x24000544
 8002570:	24007338 	.word	0x24007338

08002574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002578:	4b39      	ldr	r3, [pc, #228]	@ (8002660 <SystemInit+0xec>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	4a38      	ldr	r2, [pc, #224]	@ (8002660 <SystemInit+0xec>)
 8002580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002588:	4b36      	ldr	r3, [pc, #216]	@ (8002664 <SystemInit+0xf0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	2b06      	cmp	r3, #6
 8002592:	d807      	bhi.n	80025a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002594:	4b33      	ldr	r3, [pc, #204]	@ (8002664 <SystemInit+0xf0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 030f 	bic.w	r3, r3, #15
 800259c:	4a31      	ldr	r2, [pc, #196]	@ (8002664 <SystemInit+0xf0>)
 800259e:	f043 0307 	orr.w	r3, r3, #7
 80025a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025a4:	4b30      	ldr	r3, [pc, #192]	@ (8002668 <SystemInit+0xf4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002668 <SystemInit+0xf4>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <SystemInit+0xf4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002668 <SystemInit+0xf4>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	492b      	ldr	r1, [pc, #172]	@ (8002668 <SystemInit+0xf4>)
 80025bc:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <SystemInit+0xf8>)
 80025be:	4013      	ands	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025c2:	4b28      	ldr	r3, [pc, #160]	@ (8002664 <SystemInit+0xf0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025ce:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <SystemInit+0xf0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 030f 	bic.w	r3, r3, #15
 80025d6:	4a23      	ldr	r2, [pc, #140]	@ (8002664 <SystemInit+0xf0>)
 80025d8:	f043 0307 	orr.w	r3, r3, #7
 80025dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025de:	4b22      	ldr	r3, [pc, #136]	@ (8002668 <SystemInit+0xf4>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025e4:	4b20      	ldr	r3, [pc, #128]	@ (8002668 <SystemInit+0xf4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <SystemInit+0xf4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <SystemInit+0xf4>)
 80025f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <SystemInit+0xfc>)
 80025f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <SystemInit+0xf4>)
 80025f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002674 <SystemInit+0x100>)
 80025fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <SystemInit+0xf4>)
 80025fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002678 <SystemInit+0x104>)
 8002600:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002602:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <SystemInit+0xf4>)
 8002604:	2200      	movs	r2, #0
 8002606:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002608:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <SystemInit+0xf4>)
 800260a:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <SystemInit+0x104>)
 800260c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800260e:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <SystemInit+0xf4>)
 8002610:	2200      	movs	r2, #0
 8002612:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002614:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <SystemInit+0xf4>)
 8002616:	4a18      	ldr	r2, [pc, #96]	@ (8002678 <SystemInit+0x104>)
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800261a:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <SystemInit+0xf4>)
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <SystemInit+0xf4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a10      	ldr	r2, [pc, #64]	@ (8002668 <SystemInit+0xf4>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800262c:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <SystemInit+0xf4>)
 800262e:	2200      	movs	r2, #0
 8002630:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <SystemInit+0x108>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <SystemInit+0x10c>)
 8002638:	4013      	ands	r3, r2
 800263a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800263e:	d202      	bcs.n	8002646 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002640:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <SystemInit+0x110>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <SystemInit+0x114>)
 8002648:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800264c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800264e:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <SystemInit+0xec>)
 8002650:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002654:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	52002000 	.word	0x52002000
 8002668:	58024400 	.word	0x58024400
 800266c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002670:	02020200 	.word	0x02020200
 8002674:	01ff0000 	.word	0x01ff0000
 8002678:	01010280 	.word	0x01010280
 800267c:	5c001000 	.word	0x5c001000
 8002680:	ffff0000 	.word	0xffff0000
 8002684:	51008108 	.word	0x51008108
 8002688:	52004000 	.word	0x52004000

0800268c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	@ 0x28
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800269e:	463b      	mov	r3, r7
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
 80026ac:	615a      	str	r2, [r3, #20]
 80026ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026b0:	4b22      	ldr	r3, [pc, #136]	@ (800273c <MX_TIM2_Init+0xb0>)
 80026b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80026b8:	4b20      	ldr	r3, [pc, #128]	@ (800273c <MX_TIM2_Init+0xb0>)
 80026ba:	2263      	movs	r2, #99	@ 0x63
 80026bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b1f      	ldr	r3, [pc, #124]	@ (800273c <MX_TIM2_Init+0xb0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80026c4:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <MX_TIM2_Init+0xb0>)
 80026c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <MX_TIM2_Init+0xb0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <MX_TIM2_Init+0xb0>)
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026d8:	4818      	ldr	r0, [pc, #96]	@ (800273c <MX_TIM2_Init+0xb0>)
 80026da:	f004 ff75 	bl	80075c8 <HAL_TIM_PWM_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80026e4:	f7ff fda6 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026f0:	f107 031c 	add.w	r3, r7, #28
 80026f4:	4619      	mov	r1, r3
 80026f6:	4811      	ldr	r0, [pc, #68]	@ (800273c <MX_TIM2_Init+0xb0>)
 80026f8:	f005 fd76 	bl	80081e8 <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002702:	f7ff fd97 	bl	8002234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002706:	2360      	movs	r3, #96	@ 0x60
 8002708:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800270a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800270e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002718:	463b      	mov	r3, r7
 800271a:	220c      	movs	r2, #12
 800271c:	4619      	mov	r1, r3
 800271e:	4807      	ldr	r0, [pc, #28]	@ (800273c <MX_TIM2_Init+0xb0>)
 8002720:	f005 f8b0 	bl	8007884 <HAL_TIM_PWM_ConfigChannel>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800272a:	f7ff fd83 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800272e:	4803      	ldr	r0, [pc, #12]	@ (800273c <MX_TIM2_Init+0xb0>)
 8002730:	f000 f826 	bl	8002780 <HAL_TIM_MspPostInit>

}
 8002734:	bf00      	nop
 8002736:	3728      	adds	r7, #40	@ 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	24000548 	.word	0x24000548

08002740 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002750:	d10e      	bne.n	8002770 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002752:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_TIM_PWM_MspInit+0x3c>)
 8002754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002758:	4a08      	ldr	r2, [pc, #32]	@ (800277c <HAL_TIM_PWM_MspInit+0x3c>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_TIM_PWM_MspInit+0x3c>)
 8002764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	58024400 	.word	0x58024400

08002780 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a0:	d11e      	bne.n	80027e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_TIM_MspPostInit+0x68>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a8:	4a0f      	ldr	r2, [pc, #60]	@ (80027e8 <HAL_TIM_MspPostInit+0x68>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <HAL_TIM_MspPostInit+0x68>)
 80027b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027c0:	2308      	movs	r3, #8
 80027c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	4619      	mov	r1, r3
 80027da:	4804      	ldr	r0, [pc, #16]	@ (80027ec <HAL_TIM_MspPostInit+0x6c>)
 80027dc:	f001 f87a 	bl	80038d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027e0:	bf00      	nop
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	58024400 	.word	0x58024400
 80027ec:	58020000 	.word	0x58020000

080027f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027f4:	4b22      	ldr	r3, [pc, #136]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 80027f6:	4a23      	ldr	r2, [pc, #140]	@ (8002884 <MX_USART1_UART_Init+0x94>)
 80027f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027fa:	4b21      	ldr	r3, [pc, #132]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 80027fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002802:	4b1f      	ldr	r3, [pc, #124]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002808:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800280e:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002814:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 8002816:	220c      	movs	r2, #12
 8002818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281a:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002820:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002826:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 800282e:	2200      	movs	r2, #0
 8002830:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002832:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 8002834:	2200      	movs	r2, #0
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002838:	4811      	ldr	r0, [pc, #68]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 800283a:	f005 fd81 	bl	8008340 <HAL_UART_Init>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002844:	f7ff fcf6 	bl	8002234 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002848:	2100      	movs	r1, #0
 800284a:	480d      	ldr	r0, [pc, #52]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 800284c:	f006 fd89 	bl	8009362 <HAL_UARTEx_SetTxFifoThreshold>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002856:	f7ff fced 	bl	8002234 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800285a:	2100      	movs	r1, #0
 800285c:	4808      	ldr	r0, [pc, #32]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 800285e:	f006 fdbe 	bl	80093de <HAL_UARTEx_SetRxFifoThreshold>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002868:	f7ff fce4 	bl	8002234 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800286c:	4804      	ldr	r0, [pc, #16]	@ (8002880 <MX_USART1_UART_Init+0x90>)
 800286e:	f006 fd3f 	bl	80092f0 <HAL_UARTEx_DisableFifoMode>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002878:	f7ff fcdc 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}
 8002880:	24000594 	.word	0x24000594
 8002884:	40011000 	.word	0x40011000

08002888 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b0ba      	sub	sp, #232	@ 0xe8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028a0:	f107 0310 	add.w	r3, r7, #16
 80028a4:	22c0      	movs	r2, #192	@ 0xc0
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f026 ffca 	bl	8029842 <memset>
  if(uartHandle->Instance==USART1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a27      	ldr	r2, [pc, #156]	@ (8002950 <HAL_UART_MspInit+0xc8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d146      	bne.n	8002946 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028b8:	f04f 0201 	mov.w	r2, #1
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ca:	f107 0310 	add.w	r3, r7, #16
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fedc 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80028da:	f7ff fcab 	bl	8002234 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028de:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <HAL_UART_MspInit+0xcc>)
 80028e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002954 <HAL_UART_MspInit+0xcc>)
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ee:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <HAL_UART_MspInit+0xcc>)
 80028f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fc:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <HAL_UART_MspInit+0xcc>)
 80028fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002902:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <HAL_UART_MspInit+0xcc>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <HAL_UART_MspInit+0xcc>)
 800290e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800291a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800291e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002934:	2307      	movs	r3, #7
 8002936:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800293e:	4619      	mov	r1, r3
 8002940:	4805      	ldr	r0, [pc, #20]	@ (8002958 <HAL_UART_MspInit+0xd0>)
 8002942:	f000 ffc7 	bl	80038d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002946:	bf00      	nop
 8002948:	37e8      	adds	r7, #232	@ 0xe8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40011000 	.word	0x40011000
 8002954:	58024400 	.word	0x58024400
 8002958:	58020000 	.word	0x58020000

0800295c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800295c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002994 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002960:	f7ff fe08 	bl	8002574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002964:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002966:	e003      	b.n	8002970 <LoopCopyDataInit>

08002968 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002968:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800296a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800296c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800296e:	3104      	adds	r1, #4

08002970 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002970:	480a      	ldr	r0, [pc, #40]	@ (800299c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002974:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002976:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002978:	d3f6      	bcc.n	8002968 <CopyDataInit>
  ldr  r2, =_sbss
 800297a:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800297c:	e002      	b.n	8002984 <LoopFillZerobss>

0800297e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800297e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002980:	f842 3b04 	str.w	r3, [r2], #4

08002984 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002984:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002986:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002988:	d3f9      	bcc.n	800297e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800298a:	f027 f861 	bl	8029a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298e:	f7ff fae3 	bl	8001f58 <main>
  bx  lr    
 8002992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002994:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002998:	0802cb80 	.word	0x0802cb80
  ldr  r0, =_sdata
 800299c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80029a0:	24000100 	.word	0x24000100
  ldr  r2, =_sbss
 80029a4:	24000300 	.word	0x24000300
  ldr  r3, = _ebss
 80029a8:	24007334 	.word	0x24007334

080029ac <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ac:	e7fe      	b.n	80029ac <ADC3_IRQHandler>

080029ae <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80029bc:	b672      	cpsid	i
}
 80029be:	bf00      	nop
 80029c0:	f7ff fc38 	bl	8002234 <Error_Handler>
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e007      	b.n	80029de <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	2100      	movs	r1, #0
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3301      	adds	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d9f4      	bls.n	80029ce <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	721a      	strb	r2, [r3, #8]
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a00:	b672      	cpsid	i
}
 8002a02:	bf00      	nop
 8002a04:	f7ff fc16 	bl	8002234 <Error_Handler>
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7a1b      	ldrb	r3, [r3, #8]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d905      	bls.n	8002a20 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a14:	b672      	cpsid	i
}
 8002a16:	bf00      	nop
 8002a18:	f7ff fc0c 	bl	8002234 <Error_Handler>
 8002a1c:	bf00      	nop
 8002a1e:	e7fd      	b.n	8002a1c <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7a1b      	ldrb	r3, [r3, #8]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	b2d1      	uxtb	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	7211      	strb	r1, [r2, #8]
 8002a2c:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a2e:	f3ef 8211 	mrs	r2, BASEPRI
 8002a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	60fa      	str	r2, [r7, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
}
 8002a66:	bf00      	nop
 8002a68:	f7ff fbe4 	bl	8002234 <Error_Handler>
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7a1b      	ldrb	r3, [r3, #8]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7a1b      	ldrb	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d905      	bls.n	8002a90 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a84:	b672      	cpsid	i
}
 8002a86:	bf00      	nop
 8002a88:	f7ff fbd4 	bl	8002234 <Error_Handler>
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7a1b      	ldrb	r3, [r3, #8]
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002aa4:	bf00      	nop
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002abc:	f026 ffc2 	bl	8029a44 <__errno>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2216      	movs	r2, #22
 8002ac4:	601a      	str	r2, [r3, #0]
    return;
 8002ac6:	e016      	b.n	8002af6 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002ac8:	200c      	movs	r0, #12
 8002aca:	f026 fcc5 	bl	8029458 <malloc>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff63 	bl	80029ae <stm32_lock_init>
    return;
 8002ae8:	e005      	b.n	8002af6 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002aea:	b672      	cpsid	i
}
 8002aec:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002aee:	f7ff fba1 	bl	8002234 <Error_Handler>
 8002af2:	bf00      	nop
 8002af4:	e7fd      	b.n	8002af2 <__retarget_lock_init_recursive+0x44>
}
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d105      	bne.n	8002b16 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0a:	b672      	cpsid	i
}
 8002b0c:	bf00      	nop
 8002b0e:	f7ff fb91 	bl	8002234 <Error_Handler>
 8002b12:	bf00      	nop
 8002b14:	e7fd      	b.n	8002b12 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff6a 	bl	80029f2 <stm32_lock_acquire>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b34:	b672      	cpsid	i
}
 8002b36:	bf00      	nop
 8002b38:	f7ff fb7c 	bl	8002234 <Error_Handler>
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff87 	bl	8002a56 <stm32_lock_release>
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <__cxa_guard_acquire>:
  * @brief Acquire __cxa_guard mutex
  * @param guard_object Guard object
  * @return 0 if object is initialized, else initialization of object required
  */
int __cxa_guard_acquire(CxaGuardObject_t *guard_object)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(guard_object);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <__cxa_guard_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5e:	b672      	cpsid	i
}
 8002b60:	bf00      	nop
 8002b62:	f7ff fb67 	bl	8002234 <Error_Handler>
 8002b66:	bf00      	nop
 8002b68:	e7fd      	b.n	8002b66 <__cxa_guard_acquire+0x16>

  if (atomic_load(&guard_object->initialized) == 0)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f3bf 8f5b 	dmb	ish
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	f3bf 8f5b 	dmb	ish
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	73fb      	strb	r3, [r7, #15]
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d121      	bne.n	8002bc8 <__cxa_guard_acquire+0x78>
  {
    /* Object needs initialization, lock threading context */
    stm32_lock_acquire(&__cxa_guard_mutex);
 8002b84:	4813      	ldr	r0, [pc, #76]	@ (8002bd4 <__cxa_guard_acquire+0x84>)
 8002b86:	f7ff ff34 	bl	80029f2 <stm32_lock_acquire>
    if (atomic_load(&guard_object->initialized) == 0)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f3bf 8f5b 	dmb	ish
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	f3bf 8f5b 	dmb	ish
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	73bb      	strb	r3, [r7, #14]
 8002b9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10e      	bne.n	8002bc2 <__cxa_guard_acquire+0x72>
    {
      /* Object needs initialization */
      if (guard_object->acquired)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <__cxa_guard_acquire+0x68>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
}
 8002bae:	bf00      	nop
      {
        /* Object initialization already in progress */
        STM32_LOCK_BLOCK();
 8002bb0:	f7ff fb40 	bl	8002234 <Error_Handler>
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <__cxa_guard_acquire+0x64>
      }

      /* Lock acquired */
      guard_object->acquired = 1;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	705a      	strb	r2, [r3, #1]
      return 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e003      	b.n	8002bca <__cxa_guard_acquire+0x7a>
    }
    else
    {
      /* Object initialized in another thread */
      stm32_lock_release(&__cxa_guard_mutex);
 8002bc2:	4804      	ldr	r0, [pc, #16]	@ (8002bd4 <__cxa_guard_acquire+0x84>)
 8002bc4:	f7ff ff47 	bl	8002a56 <stm32_lock_release>
    }
  }

  /* Object already initialized */
  return 0;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2400064c 	.word	0x2400064c

08002bd8 <__cxa_guard_abort>:
/**
  * @brief Abort __cxa_guard mutex
  * @param guard_object Guard object
  */
void __cxa_guard_abort(CxaGuardObject_t *guard_object)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(guard_object);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d105      	bne.n	8002bf2 <__cxa_guard_abort+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002be6:	b672      	cpsid	i
}
 8002be8:	bf00      	nop
 8002bea:	f7ff fb23 	bl	8002234 <Error_Handler>
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <__cxa_guard_abort+0x16>

  if (guard_object->acquired)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <__cxa_guard_abort+0x30>
  {
    /* Release lock */
    guard_object->acquired = 0;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	705a      	strb	r2, [r3, #1]
    stm32_lock_release(&__cxa_guard_mutex);
 8002c00:	4806      	ldr	r0, [pc, #24]	@ (8002c1c <__cxa_guard_abort+0x44>)
 8002c02:	f7ff ff28 	bl	8002a56 <stm32_lock_release>
  else
  {
    /* Trying to release non-acquired lock */
    STM32_LOCK_BLOCK();
  }
}
 8002c06:	e005      	b.n	8002c14 <__cxa_guard_abort+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c08:	b672      	cpsid	i
}
 8002c0a:	bf00      	nop
    STM32_LOCK_BLOCK();
 8002c0c:	f7ff fb12 	bl	8002234 <Error_Handler>
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <__cxa_guard_abort+0x38>
}
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2400064c 	.word	0x2400064c

08002c20 <__cxa_guard_release>:
/**
  * @brief Release __cxa_guard mutex
  * @param guard_object Guard object
  */
void __cxa_guard_release(CxaGuardObject_t *guard_object)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(guard_object);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <__cxa_guard_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c2e:	b672      	cpsid	i
}
 8002c30:	bf00      	nop
 8002c32:	f7ff faff 	bl	8002234 <Error_Handler>
 8002c36:	bf00      	nop
 8002c38:	e7fd      	b.n	8002c36 <__cxa_guard_release+0x16>

  /* Object initialized */
  atomic_store(&guard_object->initialized, 1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	2301      	movs	r3, #1
 8002c40:	72fb      	strb	r3, [r7, #11]
 8002c42:	7afa      	ldrb	r2, [r7, #11]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f3bf 8f5b 	dmb	ish
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	f3bf 8f5b 	dmb	ish

  /* Release lock */
  __cxa_guard_abort(guard_object);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ffc1 	bl	8002bd8 <__cxa_guard_abort>
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c66:	2003      	movs	r0, #3
 8002c68:	f000 f933 	bl	8002ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c6c:	f002 faf6 	bl	800525c <HAL_RCC_GetSysClockFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_Init+0x68>)
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	4913      	ldr	r1, [pc, #76]	@ (8002ccc <HAL_Init+0x6c>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
 8002c88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc8 <HAL_Init+0x68>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	4a0e      	ldr	r2, [pc, #56]	@ (8002ccc <HAL_Init+0x6c>)
 8002c94:	5cd3      	ldrb	r3, [r2, r3]
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd0 <HAL_Init+0x70>)
 8002ca2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd4 <HAL_Init+0x74>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002caa:	200f      	movs	r0, #15
 8002cac:	f7ff fafa 	bl	80022a4 <HAL_InitTick>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e002      	b.n	8002cc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002cba:	f7ff fad5 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	0802b0ec 	.word	0x0802b0ec
 8002cd0:	24000008 	.word	0x24000008
 8002cd4:	24000004 	.word	0x24000004

08002cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_IncTick+0x20>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_IncTick+0x24>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <HAL_IncTick+0x24>)
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	24000010 	.word	0x24000010
 8002cfc:	24000658 	.word	0x24000658

08002d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return uwTick;
 8002d04:	4b03      	ldr	r3, [pc, #12]	@ (8002d14 <HAL_GetTick+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	24000658 	.word	0x24000658

08002d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff ffee 	bl	8002d00 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d005      	beq.n	8002d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_Delay+0x44>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d3e:	bf00      	nop
 8002d40:	f7ff ffde 	bl	8002d00 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d8f7      	bhi.n	8002d40 <HAL_Delay+0x28>
  {
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	24000010 	.word	0x24000010

08002d60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <HAL_GetREVID+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0c1b      	lsrs	r3, r3, #16
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	5c001000 	.word	0x5c001000

08002d78 <__NVIC_SetPriorityGrouping>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d88:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <__NVIC_SetPriorityGrouping+0x40>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002da6:	4a04      	ldr	r2, [pc, #16]	@ (8002db8 <__NVIC_SetPriorityGrouping+0x40>)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	60d3      	str	r3, [r2, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00
 8002dbc:	05fa0000 	.word	0x05fa0000

08002dc0 <__NVIC_GetPriorityGrouping>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc4:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	f003 0307 	and.w	r3, r3, #7
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_EnableIRQ>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	db0b      	blt.n	8002e06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	4907      	ldr	r1, [pc, #28]	@ (8002e14 <__NVIC_EnableIRQ+0x38>)
 8002df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000e100 	.word	0xe000e100

08002e18 <__NVIC_SetPriority>:
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	6039      	str	r1, [r7, #0]
 8002e22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	db0a      	blt.n	8002e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	490c      	ldr	r1, [pc, #48]	@ (8002e64 <__NVIC_SetPriority+0x4c>)
 8002e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e40:	e00a      	b.n	8002e58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4908      	ldr	r1, [pc, #32]	@ (8002e68 <__NVIC_SetPriority+0x50>)
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	3b04      	subs	r3, #4
 8002e50:	0112      	lsls	r2, r2, #4
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	440b      	add	r3, r1
 8002e56:	761a      	strb	r2, [r3, #24]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000e100 	.word	0xe000e100
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <NVIC_EncodePriority>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	@ 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f1c3 0307 	rsb	r3, r3, #7
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	bf28      	it	cs
 8002e8a:	2304      	movcs	r3, #4
 8002e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3304      	adds	r3, #4
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d902      	bls.n	8002e9c <NVIC_EncodePriority+0x30>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3b03      	subs	r3, #3
 8002e9a:	e000      	b.n	8002e9e <NVIC_EncodePriority+0x32>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	401a      	ands	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	43d9      	mvns	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	4313      	orrs	r3, r2
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3724      	adds	r7, #36	@ 0x24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff4c 	bl	8002d78 <__NVIC_SetPriorityGrouping>
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef6:	f7ff ff63 	bl	8002dc0 <__NVIC_GetPriorityGrouping>
 8002efa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	6978      	ldr	r0, [r7, #20]
 8002f02:	f7ff ffb3 	bl	8002e6c <NVIC_EncodePriority>
 8002f06:	4602      	mov	r2, r0
 8002f08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff82 	bl	8002e18 <__NVIC_SetPriority>
}
 8002f14:	bf00      	nop
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff56 	bl	8002ddc <__NVIC_EnableIRQ>
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e054      	b.n	8002ff4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	7f5b      	ldrb	r3, [r3, #29]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe fa0a 	bl	8001374 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	791b      	ldrb	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a22      	ldr	r2, [pc, #136]	@ (8002ffc <HAL_CRC_Init+0xc4>)
 8002f74:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0218 	bic.w	r2, r2, #24
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	e00c      	b.n	8002fa2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6899      	ldr	r1, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	461a      	mov	r2, r3
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f834 	bl	8003000 <HAL_CRCEx_Polynomial_Set>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e028      	b.n	8002ff4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	795b      	ldrb	r3, [r3, #5]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb2:	611a      	str	r2, [r3, #16]
 8002fb4:	e004      	b.n	8002fc0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6912      	ldr	r2, [r2, #16]
 8002fbe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699a      	ldr	r2, [r3, #24]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	04c11db7 	.word	0x04c11db7

08003000 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003010:	231f      	movs	r3, #31
 8003012:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
 8003022:	e063      	b.n	80030ec <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003024:	bf00      	nop
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1e5a      	subs	r2, r3, #1
 800302a:	613a      	str	r2, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_CRCEx_Polynomial_Set+0x44>
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b18      	cmp	r3, #24
 8003048:	d846      	bhi.n	80030d8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800304a:	a201      	add	r2, pc, #4	@ (adr r2, 8003050 <HAL_CRCEx_Polynomial_Set+0x50>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	080030df 	.word	0x080030df
 8003054:	080030d9 	.word	0x080030d9
 8003058:	080030d9 	.word	0x080030d9
 800305c:	080030d9 	.word	0x080030d9
 8003060:	080030d9 	.word	0x080030d9
 8003064:	080030d9 	.word	0x080030d9
 8003068:	080030d9 	.word	0x080030d9
 800306c:	080030d9 	.word	0x080030d9
 8003070:	080030cd 	.word	0x080030cd
 8003074:	080030d9 	.word	0x080030d9
 8003078:	080030d9 	.word	0x080030d9
 800307c:	080030d9 	.word	0x080030d9
 8003080:	080030d9 	.word	0x080030d9
 8003084:	080030d9 	.word	0x080030d9
 8003088:	080030d9 	.word	0x080030d9
 800308c:	080030d9 	.word	0x080030d9
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030d9 	.word	0x080030d9
 8003098:	080030d9 	.word	0x080030d9
 800309c:	080030d9 	.word	0x080030d9
 80030a0:	080030d9 	.word	0x080030d9
 80030a4:	080030d9 	.word	0x080030d9
 80030a8:	080030d9 	.word	0x080030d9
 80030ac:	080030d9 	.word	0x080030d9
 80030b0:	080030b5 	.word	0x080030b5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d913      	bls.n	80030e2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80030be:	e010      	b.n	80030e2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b07      	cmp	r3, #7
 80030c4:	d90f      	bls.n	80030e6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80030ca:	e00c      	b.n	80030e6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	2b0f      	cmp	r3, #15
 80030d0:	d90b      	bls.n	80030ea <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80030d6:	e008      	b.n	80030ea <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]
        break;
 80030dc:	e006      	b.n	80030ec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80030de:	bf00      	nop
 80030e0:	e004      	b.n	80030ec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80030e2:	bf00      	nop
 80030e4:	e002      	b.n	80030ec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80030ea:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10d      	bne.n	800310e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 0118 	bic.w	r1, r3, #24
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	430a      	orrs	r2, r1
 800310c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800310e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e04f      	b.n	80031ce <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe f972 	bl	800142c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <HAL_DMA2D_Init+0xbc>)
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6851      	ldr	r1, [r2, #4]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	69d2      	ldr	r2, [r2, #28]
 8003162:	4311      	orrs	r1, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	430b      	orrs	r3, r1
 800316a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003172:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <HAL_DMA2D_Init+0xc0>)
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6891      	ldr	r1, [r2, #8]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6992      	ldr	r2, [r2, #24]
 800317e:	4311      	orrs	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800318e:	4b14      	ldr	r3, [pc, #80]	@ (80031e0 <HAL_DMA2D_Init+0xc4>)
 8003190:	4013      	ands	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68d1      	ldr	r1, [r2, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	430b      	orrs	r3, r1
 800319c:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	051a      	lsls	r2, r3, #20
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	055b      	lsls	r3, r3, #21
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	fff8ffbf 	.word	0xfff8ffbf
 80031dc:	fffffef8 	.word	0xfffffef8
 80031e0:	ffff0000 	.word	0xffff0000

080031e4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_DMA2D_Start+0x1c>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e018      	b.n	8003232 <HAL_DMA2D_Start+0x4e>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fab4 	bl	8003788 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d056      	beq.n	8003304 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003256:	f7ff fd53 	bl	8002d00 <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800325c:	e04b      	b.n	80032f6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800326c:	2b00      	cmp	r3, #0
 800326e:	d023      	beq.n	80032b8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800327e:	f043 0202 	orr.w	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2221      	movs	r2, #33	@ 0x21
 80032a2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2204      	movs	r2, #4
 80032a8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0a5      	b.n	8003404 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d01a      	beq.n	80032f6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032c0:	f7ff fd1e 	bl	8002d00 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <HAL_DMA2D_PollForTransfer+0x9c>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10f      	bne.n	80032f6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2203      	movs	r2, #3
 80032e6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e086      	b.n	8003404 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ac      	beq.n	800325e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d061      	beq.n	80033ea <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003326:	f7ff fceb 	bl	8002d00 <HAL_GetTick>
 800332a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800332c:	e056      	b.n	80033dc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800333c:	2b00      	cmp	r3, #0
 800333e:	d02e      	beq.n	800339e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800334e:	f043 0204 	orr.w	r2, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003364:	f043 0202 	orr.w	r2, r3, #2
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2229      	movs	r2, #41	@ 0x29
 8003388:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2204      	movs	r2, #4
 800338e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e032      	b.n	8003404 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d01a      	beq.n	80033dc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033a6:	f7ff fcab 	bl	8002d00 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d302      	bcc.n	80033bc <HAL_DMA2D_PollForTransfer+0x182>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10f      	bne.n	80033dc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2203      	movs	r2, #3
 80033cc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e013      	b.n	8003404 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0a1      	beq.n	800332e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2212      	movs	r2, #18
 80033f0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d026      	beq.n	800347c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d021      	beq.n	800347c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003446:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2201      	movs	r2, #1
 800345a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2204      	movs	r2, #4
 8003460:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d026      	beq.n	80034d4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d021      	beq.n	80034d4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800349e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2220      	movs	r2, #32
 80034a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034ac:	f043 0202 	orr.w	r2, r3, #2
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2204      	movs	r2, #4
 80034b8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d026      	beq.n	800352c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d021      	beq.n	800352c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034f6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2208      	movs	r2, #8
 80034fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2204      	movs	r2, #4
 8003510:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d013      	beq.n	800355e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00e      	beq.n	800355e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2204      	movs	r2, #4
 8003556:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f853 	bl	8003604 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d024      	beq.n	80035b2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01f      	beq.n	80035b2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003580:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2202      	movs	r2, #2
 8003588:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01f      	beq.n	80035fc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01a      	beq.n	80035fc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035d4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2210      	movs	r2, #16
 80035dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f80e 	bl	8003618 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_DMA2D_ConfigLayer+0x24>
 800364c:	2302      	movs	r3, #2
 800364e:	e092      	b.n	8003776 <HAL_DMA2D_ConfigLayer+0x14a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	3328      	adds	r3, #40	@ 0x28
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	041b      	lsls	r3, r3, #16
 800367c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003684:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003690:	4b3c      	ldr	r3, [pc, #240]	@ (8003784 <HAL_DMA2D_ConfigLayer+0x158>)
 8003692:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b0a      	cmp	r3, #10
 800369a:	d003      	beq.n	80036a4 <HAL_DMA2D_ConfigLayer+0x78>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b09      	cmp	r3, #9
 80036a2:	d107      	bne.n	80036b4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	e005      	b.n	80036c0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	061b      	lsls	r3, r3, #24
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d120      	bne.n	8003708 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	ea02 0103 	and.w	r1, r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	430a      	orrs	r2, r1
 80036dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b0a      	cmp	r3, #10
 80036ee:	d003      	beq.n	80036f8 <HAL_DMA2D_ConfigLayer+0xcc>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b09      	cmp	r3, #9
 80036f6:	d135      	bne.n	8003764 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003704:	629a      	str	r2, [r3, #40]	@ 0x28
 8003706:	e02d      	b.n	8003764 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d109      	bne.n	8003724 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	049b      	lsls	r3, r3, #18
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8003722:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	43db      	mvns	r3, r3
 800372e:	ea02 0103 	and.w	r1, r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	430a      	orrs	r2, r1
 800373a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b0a      	cmp	r3, #10
 800374c:	d003      	beq.n	8003756 <HAL_DMA2D_ConfigLayer+0x12a>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b09      	cmp	r3, #9
 8003754:	d106      	bne.n	8003764 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003762:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	ff33000f 	.word	0xff33000f

08003788 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003788:	b480      	push	{r7}
 800378a:	b08b      	sub	sp, #44	@ 0x2c
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	041a      	lsls	r2, r3, #16
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037c0:	d174      	bne.n	80038ac <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80037c8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80037d0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80037d8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d108      	bne.n	80037fa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f8:	e053      	b.n	80038a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d106      	bne.n	8003810 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4313      	orrs	r3, r2
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
 800380e:	e048      	b.n	80038a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d111      	bne.n	800383c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	0cdb      	lsrs	r3, r3, #19
 800381c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	0a9b      	lsrs	r3, r3, #10
 8003822:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	08db      	lsrs	r3, r3, #3
 8003828:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	02db      	lsls	r3, r3, #11
 8003832:	4313      	orrs	r3, r2
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
 800383a:	e032      	b.n	80038a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d117      	bne.n	8003874 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	0fdb      	lsrs	r3, r3, #31
 8003848:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	0cdb      	lsrs	r3, r3, #19
 800384e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	0adb      	lsrs	r3, r3, #11
 8003854:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	08db      	lsrs	r3, r3, #3
 800385a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	029b      	lsls	r3, r3, #10
 8003864:	431a      	orrs	r2, r3
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	03db      	lsls	r3, r3, #15
 800386a:	4313      	orrs	r3, r2
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
 8003872:	e016      	b.n	80038a2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	0f1b      	lsrs	r3, r3, #28
 8003878:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	0d1b      	lsrs	r3, r3, #20
 800387e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	0b1b      	lsrs	r3, r3, #12
 8003884:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	011a      	lsls	r2, r3, #4
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	431a      	orrs	r2, r3
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	031b      	lsls	r3, r3, #12
 800389a:	4313      	orrs	r3, r2
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80038aa:	e00d      	b.n	80038c8 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038b4:	d104      	bne.n	80038c0 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	615a      	str	r2, [r3, #20]
}
 80038be:	e003      	b.n	80038c8 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	60da      	str	r2, [r3, #12]
}
 80038c8:	bf00      	nop
 80038ca:	372c      	adds	r7, #44	@ 0x2c
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b089      	sub	sp, #36	@ 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038e2:	4b89      	ldr	r3, [pc, #548]	@ (8003b08 <HAL_GPIO_Init+0x234>)
 80038e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038e6:	e194      	b.n	8003c12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	2101      	movs	r1, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8186 	beq.w	8003c0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d005      	beq.n	8003918 <HAL_GPIO_Init+0x44>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d130      	bne.n	800397a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800394e:	2201      	movs	r2, #1
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 0201 	and.w	r2, r3, #1
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b03      	cmp	r3, #3
 8003984:	d017      	beq.n	80039b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	2203      	movs	r2, #3
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d123      	bne.n	8003a0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	08da      	lsrs	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3208      	adds	r2, #8
 80039ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	220f      	movs	r2, #15
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	08da      	lsrs	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3208      	adds	r2, #8
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2203      	movs	r2, #3
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0203 	and.w	r2, r3, #3
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80e0 	beq.w	8003c0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b0c <HAL_GPIO_Init+0x238>)
 8003a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a52:	4a2e      	ldr	r2, [pc, #184]	@ (8003b0c <HAL_GPIO_Init+0x238>)
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <HAL_GPIO_Init+0x238>)
 8003a5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6a:	4a29      	ldr	r2, [pc, #164]	@ (8003b10 <HAL_GPIO_Init+0x23c>)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3302      	adds	r3, #2
 8003a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	220f      	movs	r2, #15
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a20      	ldr	r2, [pc, #128]	@ (8003b14 <HAL_GPIO_Init+0x240>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d052      	beq.n	8003b3c <HAL_GPIO_Init+0x268>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a1f      	ldr	r2, [pc, #124]	@ (8003b18 <HAL_GPIO_Init+0x244>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d031      	beq.n	8003b02 <HAL_GPIO_Init+0x22e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b1c <HAL_GPIO_Init+0x248>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d02b      	beq.n	8003afe <HAL_GPIO_Init+0x22a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b20 <HAL_GPIO_Init+0x24c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d025      	beq.n	8003afa <HAL_GPIO_Init+0x226>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b24 <HAL_GPIO_Init+0x250>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d01f      	beq.n	8003af6 <HAL_GPIO_Init+0x222>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b28 <HAL_GPIO_Init+0x254>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d019      	beq.n	8003af2 <HAL_GPIO_Init+0x21e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b2c <HAL_GPIO_Init+0x258>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d013      	beq.n	8003aee <HAL_GPIO_Init+0x21a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a19      	ldr	r2, [pc, #100]	@ (8003b30 <HAL_GPIO_Init+0x25c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00d      	beq.n	8003aea <HAL_GPIO_Init+0x216>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a18      	ldr	r2, [pc, #96]	@ (8003b34 <HAL_GPIO_Init+0x260>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <HAL_GPIO_Init+0x212>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a17      	ldr	r2, [pc, #92]	@ (8003b38 <HAL_GPIO_Init+0x264>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <HAL_GPIO_Init+0x20e>
 8003ade:	2309      	movs	r3, #9
 8003ae0:	e02d      	b.n	8003b3e <HAL_GPIO_Init+0x26a>
 8003ae2:	230a      	movs	r3, #10
 8003ae4:	e02b      	b.n	8003b3e <HAL_GPIO_Init+0x26a>
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	e029      	b.n	8003b3e <HAL_GPIO_Init+0x26a>
 8003aea:	2307      	movs	r3, #7
 8003aec:	e027      	b.n	8003b3e <HAL_GPIO_Init+0x26a>
 8003aee:	2306      	movs	r3, #6
 8003af0:	e025      	b.n	8003b3e <HAL_GPIO_Init+0x26a>
 8003af2:	2305      	movs	r3, #5
 8003af4:	e023      	b.n	8003b3e <HAL_GPIO_Init+0x26a>
 8003af6:	2304      	movs	r3, #4
 8003af8:	e021      	b.n	8003b3e <HAL_GPIO_Init+0x26a>
 8003afa:	2303      	movs	r3, #3
 8003afc:	e01f      	b.n	8003b3e <HAL_GPIO_Init+0x26a>
 8003afe:	2302      	movs	r3, #2
 8003b00:	e01d      	b.n	8003b3e <HAL_GPIO_Init+0x26a>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e01b      	b.n	8003b3e <HAL_GPIO_Init+0x26a>
 8003b06:	bf00      	nop
 8003b08:	58000080 	.word	0x58000080
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	58000400 	.word	0x58000400
 8003b14:	58020000 	.word	0x58020000
 8003b18:	58020400 	.word	0x58020400
 8003b1c:	58020800 	.word	0x58020800
 8003b20:	58020c00 	.word	0x58020c00
 8003b24:	58021000 	.word	0x58021000
 8003b28:	58021400 	.word	0x58021400
 8003b2c:	58021800 	.word	0x58021800
 8003b30:	58021c00 	.word	0x58021c00
 8003b34:	58022000 	.word	0x58022000
 8003b38:	58022400 	.word	0x58022400
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	f002 0203 	and.w	r2, r2, #3
 8003b44:	0092      	lsls	r2, r2, #2
 8003b46:	4093      	lsls	r3, r2
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b4e:	4938      	ldr	r1, [pc, #224]	@ (8003c30 <HAL_GPIO_Init+0x35c>)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	3302      	adds	r3, #2
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f47f ae63 	bne.w	80038e8 <HAL_GPIO_Init+0x14>
  }
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	3724      	adds	r7, #36	@ 0x24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	58000400 	.word	0x58000400

08003c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	887b      	ldrh	r3, [r7, #2]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e001      	b.n	8003c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
 8003c70:	4613      	mov	r3, r2
 8003c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c74:	787b      	ldrb	r3, [r7, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c80:	e003      	b.n	8003c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	041a      	lsls	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	619a      	str	r2, [r3, #24]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 f804 	bl	8003cca <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e08b      	b.n	8003e0a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd fe64 	bl	80019d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	@ 0x24
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d107      	bne.n	8003d5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	e006      	b.n	8003d68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d108      	bne.n	8003d82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	e007      	b.n	8003d92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e14 <HAL_I2C_Init+0x134>)
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003db0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1a      	ldr	r2, [r3, #32]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	02008000 	.word	0x02008000

08003e18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d138      	bne.n	8003ea0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e032      	b.n	8003ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2224      	movs	r2, #36	@ 0x24
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6819      	ldr	r1, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d139      	bne.n	8003f38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e033      	b.n	8003f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2224      	movs	r2, #36	@ 0x24
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e08f      	b.n	8004078 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7fd fe1d 	bl	8001bac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699a      	ldr	r2, [r3, #24]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003f88:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6999      	ldr	r1, [r3, #24]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f9e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6999      	ldr	r1, [r3, #24]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a19      	ldr	r1, [r3, #32]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	430a      	orrs	r2, r1
 8004004:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800400c:	021b      	lsls	r3, r3, #8
 800400e:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004028:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0206 	orr.w	r2, r2, #6
 8004054:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004096:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d023      	beq.n	80040ea <HAL_LTDC_IRQHandler+0x6a>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01e      	beq.n	80040ea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0204 	bic.w	r2, r2, #4
 80040ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2204      	movs	r2, #4
 80040c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040ca:	f043 0201 	orr.w	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2204      	movs	r2, #4
 80040d8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f86f 	bl	80041c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d023      	beq.n	800413c <HAL_LTDC_IRQHandler+0xbc>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01e      	beq.n	800413c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0202 	bic.w	r2, r2, #2
 800410c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2202      	movs	r2, #2
 8004114:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800411c:	f043 0202 	orr.w	r2, r3, #2
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2204      	movs	r2, #4
 800412a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f846 	bl	80041c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01b      	beq.n	800417e <HAL_LTDC_IRQHandler+0xfe>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d016      	beq.n	800417e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f00d fe99 	bl	8011eb0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01b      	beq.n	80041c0 <HAL_LTDC_IRQHandler+0x140>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d016      	beq.n	80041c0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0208 	bic.w	r2, r2, #8
 80041a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2208      	movs	r2, #8
 80041a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f80e 	bl	80041dc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80041f0:	b5b0      	push	{r4, r5, r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_LTDC_ConfigLayer+0x1a>
 8004206:	2302      	movs	r3, #2
 8004208:	e02c      	b.n	8004264 <HAL_LTDC_ConfigLayer+0x74>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2134      	movs	r1, #52	@ 0x34
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	4413      	add	r3, r2
 8004226:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4614      	mov	r4, r2
 800422e:	461d      	mov	r5, r3
 8004230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800423a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f849 	bl	80042dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2201      	movs	r2, #1
 8004250:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bdb0      	pop	{r4, r5, r7, pc}

0800426c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_LTDC_ProgramLineEvent+0x18>
 8004280:	2302      	movs	r3, #2
 8004282:	e023      	b.n	80042cc <HAL_LTDC_ProgramLineEvent+0x60>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80042a4:	4a0c      	ldr	r2, [pc, #48]	@ (80042d8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	50001000 	.word	0x50001000

080042dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b089      	sub	sp, #36	@ 0x24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f8:	4413      	add	r3, r2
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	01db      	lsls	r3, r3, #7
 8004308:	4413      	add	r3, r2
 800430a:	3384      	adds	r3, #132	@ 0x84
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	6812      	ldr	r2, [r2, #0]
 8004312:	4611      	mov	r1, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	01d2      	lsls	r2, r2, #7
 8004318:	440a      	add	r2, r1
 800431a:	3284      	adds	r2, #132	@ 0x84
 800431c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004320:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004332:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004334:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4619      	mov	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	01db      	lsls	r3, r3, #7
 8004340:	440b      	add	r3, r1
 8004342:	3384      	adds	r3, #132	@ 0x84
 8004344:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800434a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800435a:	4413      	add	r3, r2
 800435c:	041b      	lsls	r3, r3, #16
 800435e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	01db      	lsls	r3, r3, #7
 800436a:	4413      	add	r3, r2
 800436c:	3384      	adds	r3, #132	@ 0x84
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	4611      	mov	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	01d2      	lsls	r2, r2, #7
 800437a:	440a      	add	r2, r1
 800437c:	3284      	adds	r2, #132	@ 0x84
 800437e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004382:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004392:	4413      	add	r3, r2
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4619      	mov	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	01db      	lsls	r3, r3, #7
 80043a0:	440b      	add	r3, r1
 80043a2:	3384      	adds	r3, #132	@ 0x84
 80043a4:	4619      	mov	r1, r3
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	01db      	lsls	r3, r3, #7
 80043b6:	4413      	add	r3, r2
 80043b8:	3384      	adds	r3, #132	@ 0x84
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	4611      	mov	r1, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	01d2      	lsls	r2, r2, #7
 80043c6:	440a      	add	r2, r1
 80043c8:	3284      	adds	r2, #132	@ 0x84
 80043ca:	f023 0307 	bic.w	r3, r3, #7
 80043ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	01db      	lsls	r3, r3, #7
 80043da:	4413      	add	r3, r2
 80043dc:	3384      	adds	r3, #132	@ 0x84
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004408:	461a      	mov	r2, r3
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	431a      	orrs	r2, r3
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	431a      	orrs	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	01db      	lsls	r3, r3, #7
 800441c:	440b      	add	r3, r1
 800441e:	3384      	adds	r3, #132	@ 0x84
 8004420:	4619      	mov	r1, r3
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	01db      	lsls	r3, r3, #7
 8004432:	4413      	add	r3, r2
 8004434:	3384      	adds	r3, #132	@ 0x84
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	4611      	mov	r1, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	01d2      	lsls	r2, r2, #7
 8004442:	440a      	add	r2, r1
 8004444:	3284      	adds	r2, #132	@ 0x84
 8004446:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800444a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	01db      	lsls	r3, r3, #7
 8004456:	4413      	add	r3, r2
 8004458:	3384      	adds	r3, #132	@ 0x84
 800445a:	461a      	mov	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	01db      	lsls	r3, r3, #7
 800446c:	4413      	add	r3, r2
 800446e:	3384      	adds	r3, #132	@ 0x84
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4619      	mov	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	01db      	lsls	r3, r3, #7
 800447c:	440b      	add	r3, r1
 800447e:	3384      	adds	r3, #132	@ 0x84
 8004480:	4619      	mov	r1, r3
 8004482:	4b4f      	ldr	r3, [pc, #316]	@ (80045c0 <LTDC_SetConfig+0x2e4>)
 8004484:	4013      	ands	r3, r2
 8004486:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	68f9      	ldr	r1, [r7, #12]
 8004492:	6809      	ldr	r1, [r1, #0]
 8004494:	4608      	mov	r0, r1
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	01c9      	lsls	r1, r1, #7
 800449a:	4401      	add	r1, r0
 800449c:	3184      	adds	r1, #132	@ 0x84
 800449e:	4313      	orrs	r3, r2
 80044a0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	01db      	lsls	r3, r3, #7
 80044ac:	4413      	add	r3, r2
 80044ae:	3384      	adds	r3, #132	@ 0x84
 80044b0:	461a      	mov	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 80044c0:	2304      	movs	r3, #4
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	e01b      	b.n	80044fe <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d102      	bne.n	80044d4 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 80044ce:	2303      	movs	r3, #3
 80044d0:	61fb      	str	r3, [r7, #28]
 80044d2:	e014      	b.n	80044fe <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d00b      	beq.n	80044f4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d007      	beq.n	80044f4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d003      	beq.n	80044f4 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044f0:	2b07      	cmp	r3, #7
 80044f2:	d102      	bne.n	80044fa <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 80044f4:	2302      	movs	r3, #2
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	e001      	b.n	80044fe <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 80044fa:	2301      	movs	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	01db      	lsls	r3, r3, #7
 8004508:	4413      	add	r3, r2
 800450a:	3384      	adds	r3, #132	@ 0x84
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	4611      	mov	r1, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	01d2      	lsls	r2, r2, #7
 8004518:	440a      	add	r2, r1
 800451a:	3284      	adds	r2, #132	@ 0x84
 800451c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004520:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6859      	ldr	r1, [r3, #4]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	1acb      	subs	r3, r1, r3
 8004538:	69f9      	ldr	r1, [r7, #28]
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8004540:	68f9      	ldr	r1, [r7, #12]
 8004542:	6809      	ldr	r1, [r1, #0]
 8004544:	4608      	mov	r0, r1
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	01c9      	lsls	r1, r1, #7
 800454a:	4401      	add	r1, r0
 800454c:	3184      	adds	r1, #132	@ 0x84
 800454e:	4313      	orrs	r3, r2
 8004550:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	01db      	lsls	r3, r3, #7
 800455c:	4413      	add	r3, r2
 800455e:	3384      	adds	r3, #132	@ 0x84
 8004560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4619      	mov	r1, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	01db      	lsls	r3, r3, #7
 800456c:	440b      	add	r3, r1
 800456e:	3384      	adds	r3, #132	@ 0x84
 8004570:	4619      	mov	r1, r3
 8004572:	4b14      	ldr	r3, [pc, #80]	@ (80045c4 <LTDC_SetConfig+0x2e8>)
 8004574:	4013      	ands	r3, r2
 8004576:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	01db      	lsls	r3, r3, #7
 8004582:	4413      	add	r3, r2
 8004584:	3384      	adds	r3, #132	@ 0x84
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	01db      	lsls	r3, r3, #7
 8004598:	4413      	add	r3, r2
 800459a:	3384      	adds	r3, #132	@ 0x84
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	4611      	mov	r1, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	01d2      	lsls	r2, r2, #7
 80045a8:	440a      	add	r2, r1
 80045aa:	3284      	adds	r2, #132	@ 0x84
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6013      	str	r3, [r2, #0]
}
 80045b2:	bf00      	nop
 80045b4:	3724      	adds	r7, #36	@ 0x24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	fffff8f8 	.word	0xfffff8f8
 80045c4:	fffff800 	.word	0xfffff800

080045c8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_PWREx_ConfigSupply+0x70>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d00a      	beq.n	80045f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045dc:	4b16      	ldr	r3, [pc, #88]	@ (8004638 <HAL_PWREx_ConfigSupply+0x70>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d001      	beq.n	80045ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e01f      	b.n	800462e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e01d      	b.n	800462e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045f2:	4b11      	ldr	r3, [pc, #68]	@ (8004638 <HAL_PWREx_ConfigSupply+0x70>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f023 0207 	bic.w	r2, r3, #7
 80045fa:	490f      	ldr	r1, [pc, #60]	@ (8004638 <HAL_PWREx_ConfigSupply+0x70>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004602:	f7fe fb7d 	bl	8002d00 <HAL_GetTick>
 8004606:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004608:	e009      	b.n	800461e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800460a:	f7fe fb79 	bl	8002d00 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004618:	d901      	bls.n	800461e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e007      	b.n	800462e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800461e:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <HAL_PWREx_ConfigSupply+0x70>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800462a:	d1ee      	bne.n	800460a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	58024800 	.word	0x58024800

0800463c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08c      	sub	sp, #48	@ 0x30
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f000 bc48 	b.w	8004ee0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8088 	beq.w	800476e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465e:	4b99      	ldr	r3, [pc, #612]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004668:	4b96      	ldr	r3, [pc, #600]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 800466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800466e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004670:	2b10      	cmp	r3, #16
 8004672:	d007      	beq.n	8004684 <HAL_RCC_OscConfig+0x48>
 8004674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004676:	2b18      	cmp	r3, #24
 8004678:	d111      	bne.n	800469e <HAL_RCC_OscConfig+0x62>
 800467a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d10c      	bne.n	800469e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004684:	4b8f      	ldr	r3, [pc, #572]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d06d      	beq.n	800476c <HAL_RCC_OscConfig+0x130>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d169      	bne.n	800476c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f000 bc21 	b.w	8004ee0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a6:	d106      	bne.n	80046b6 <HAL_RCC_OscConfig+0x7a>
 80046a8:	4b86      	ldr	r3, [pc, #536]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a85      	ldr	r2, [pc, #532]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	e02e      	b.n	8004714 <HAL_RCC_OscConfig+0xd8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x9c>
 80046be:	4b81      	ldr	r3, [pc, #516]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a80      	ldr	r2, [pc, #512]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b7e      	ldr	r3, [pc, #504]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a7d      	ldr	r2, [pc, #500]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e01d      	b.n	8004714 <HAL_RCC_OscConfig+0xd8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0xc0>
 80046e2:	4b78      	ldr	r3, [pc, #480]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a77      	ldr	r2, [pc, #476]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	4b75      	ldr	r3, [pc, #468]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a74      	ldr	r2, [pc, #464]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0xd8>
 80046fc:	4b71      	ldr	r3, [pc, #452]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a70      	ldr	r2, [pc, #448]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 8004702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b6e      	ldr	r3, [pc, #440]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a6d      	ldr	r2, [pc, #436]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 800470e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d013      	beq.n	8004744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe faf0 	bl	8002d00 <HAL_GetTick>
 8004720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004724:	f7fe faec 	bl	8002d00 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	@ 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e3d4      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004736:	4b63      	ldr	r3, [pc, #396]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0xe8>
 8004742:	e014      	b.n	800476e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fe fadc 	bl	8002d00 <HAL_GetTick>
 8004748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7fe fad8 	bl	8002d00 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	@ 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e3c0      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800475e:	4b59      	ldr	r3, [pc, #356]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x110>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80ca 	beq.w	8004910 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477c:	4b51      	ldr	r3, [pc, #324]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004784:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004786:	4b4f      	ldr	r3, [pc, #316]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <HAL_RCC_OscConfig+0x166>
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	2b18      	cmp	r3, #24
 8004796:	d156      	bne.n	8004846 <HAL_RCC_OscConfig+0x20a>
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d151      	bne.n	8004846 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a2:	4b48      	ldr	r3, [pc, #288]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_RCC_OscConfig+0x17e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e392      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047ba:	4b42      	ldr	r3, [pc, #264]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 0219 	bic.w	r2, r3, #25
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	493f      	ldr	r1, [pc, #252]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fe fa98 	bl	8002d00 <HAL_GetTick>
 80047d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d4:	f7fe fa94 	bl	8002d00 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e37c      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047e6:	4b37      	ldr	r3, [pc, #220]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f2:	f7fe fab5 	bl	8002d60 <HAL_GetREVID>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d817      	bhi.n	8004830 <HAL_RCC_OscConfig+0x1f4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b40      	cmp	r3, #64	@ 0x40
 8004806:	d108      	bne.n	800481a <HAL_RCC_OscConfig+0x1de>
 8004808:	4b2e      	ldr	r3, [pc, #184]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004810:	4a2c      	ldr	r2, [pc, #176]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 8004812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004816:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004818:	e07a      	b.n	8004910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481a:	4b2a      	ldr	r3, [pc, #168]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	031b      	lsls	r3, r3, #12
 8004828:	4926      	ldr	r1, [pc, #152]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800482e:	e06f      	b.n	8004910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004830:	4b24      	ldr	r3, [pc, #144]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	4921      	ldr	r1, [pc, #132]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004844:	e064      	b.n	8004910 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d047      	beq.n	80048de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800484e:	4b1d      	ldr	r3, [pc, #116]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 0219 	bic.w	r2, r3, #25
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	491a      	ldr	r1, [pc, #104]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fe fa4e 	bl	8002d00 <HAL_GetTick>
 8004864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004868:	f7fe fa4a 	bl	8002d00 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e332      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800487a:	4b12      	ldr	r3, [pc, #72]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004886:	f7fe fa6b 	bl	8002d60 <HAL_GetREVID>
 800488a:	4603      	mov	r3, r0
 800488c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004890:	4293      	cmp	r3, r2
 8004892:	d819      	bhi.n	80048c8 <HAL_RCC_OscConfig+0x28c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b40      	cmp	r3, #64	@ 0x40
 800489a:	d108      	bne.n	80048ae <HAL_RCC_OscConfig+0x272>
 800489c:	4b09      	ldr	r3, [pc, #36]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048a4:	4a07      	ldr	r2, [pc, #28]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048aa:	6053      	str	r3, [r2, #4]
 80048ac:	e030      	b.n	8004910 <HAL_RCC_OscConfig+0x2d4>
 80048ae:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	031b      	lsls	r3, r3, #12
 80048bc:	4901      	ldr	r1, [pc, #4]	@ (80048c4 <HAL_RCC_OscConfig+0x288>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	604b      	str	r3, [r1, #4]
 80048c2:	e025      	b.n	8004910 <HAL_RCC_OscConfig+0x2d4>
 80048c4:	58024400 	.word	0x58024400
 80048c8:	4b9a      	ldr	r3, [pc, #616]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	4997      	ldr	r1, [pc, #604]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
 80048dc:	e018      	b.n	8004910 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048de:	4b95      	ldr	r3, [pc, #596]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a94      	ldr	r2, [pc, #592]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fe fa09 	bl	8002d00 <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f2:	f7fe fa05 	bl	8002d00 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e2ed      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004904:	4b8b      	ldr	r3, [pc, #556]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f0      	bne.n	80048f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80a9 	beq.w	8004a70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800491e:	4b85      	ldr	r3, [pc, #532]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004928:	4b82      	ldr	r3, [pc, #520]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b08      	cmp	r3, #8
 8004932:	d007      	beq.n	8004944 <HAL_RCC_OscConfig+0x308>
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b18      	cmp	r3, #24
 8004938:	d13a      	bne.n	80049b0 <HAL_RCC_OscConfig+0x374>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d135      	bne.n	80049b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004944:	4b7b      	ldr	r3, [pc, #492]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_OscConfig+0x320>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	2b80      	cmp	r3, #128	@ 0x80
 8004956:	d001      	beq.n	800495c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e2c1      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800495c:	f7fe fa00 	bl	8002d60 <HAL_GetREVID>
 8004960:	4603      	mov	r3, r0
 8004962:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004966:	4293      	cmp	r3, r2
 8004968:	d817      	bhi.n	800499a <HAL_RCC_OscConfig+0x35e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	2b20      	cmp	r3, #32
 8004970:	d108      	bne.n	8004984 <HAL_RCC_OscConfig+0x348>
 8004972:	4b70      	ldr	r3, [pc, #448]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800497a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 800497c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004980:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004982:	e075      	b.n	8004a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004984:	4b6b      	ldr	r3, [pc, #428]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	069b      	lsls	r3, r3, #26
 8004992:	4968      	ldr	r1, [pc, #416]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004998:	e06a      	b.n	8004a70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800499a:	4b66      	ldr	r3, [pc, #408]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	4962      	ldr	r1, [pc, #392]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049ae:	e05f      	b.n	8004a70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d042      	beq.n	8004a3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 80049be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fe f99c 	bl	8002d00 <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049cc:	f7fe f998 	bl	8002d00 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e280      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049de:	4b55      	ldr	r3, [pc, #340]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049ea:	f7fe f9b9 	bl	8002d60 <HAL_GetREVID>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d817      	bhi.n	8004a28 <HAL_RCC_OscConfig+0x3ec>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d108      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3d6>
 8004a00:	4b4c      	ldr	r3, [pc, #304]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a08:	4a4a      	ldr	r2, [pc, #296]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a0e:	6053      	str	r3, [r2, #4]
 8004a10:	e02e      	b.n	8004a70 <HAL_RCC_OscConfig+0x434>
 8004a12:	4b48      	ldr	r3, [pc, #288]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	069b      	lsls	r3, r3, #26
 8004a20:	4944      	ldr	r1, [pc, #272]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]
 8004a26:	e023      	b.n	8004a70 <HAL_RCC_OscConfig+0x434>
 8004a28:	4b42      	ldr	r3, [pc, #264]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	493f      	ldr	r1, [pc, #252]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60cb      	str	r3, [r1, #12]
 8004a3c:	e018      	b.n	8004a70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a3c      	ldr	r2, [pc, #240]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7fe f959 	bl	8002d00 <HAL_GetTick>
 8004a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a52:	f7fe f955 	bl	8002d00 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e23d      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a64:	4b33      	ldr	r3, [pc, #204]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f0      	bne.n	8004a52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d036      	beq.n	8004aea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d019      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a84:	4b2b      	ldr	r3, [pc, #172]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a88:	4a2a      	ldr	r2, [pc, #168]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fe f936 	bl	8002d00 <HAL_GetTick>
 8004a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a98:	f7fe f932 	bl	8002d00 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e21a      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004aaa:	4b22      	ldr	r3, [pc, #136]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x45c>
 8004ab6:	e018      	b.n	8004aea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fe f91c 	bl	8002d00 <HAL_GetTick>
 8004ac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004acc:	f7fe f918 	bl	8002d00 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e200      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ade:	4b15      	ldr	r3, [pc, #84]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d039      	beq.n	8004b6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01c      	beq.n	8004b38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a0c      	ldr	r2, [pc, #48]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004b04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b0a:	f7fe f8f9 	bl	8002d00 <HAL_GetTick>
 8004b0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b12:	f7fe f8f5 	bl	8002d00 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e1dd      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b24:	4b03      	ldr	r3, [pc, #12]	@ (8004b34 <HAL_RCC_OscConfig+0x4f8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x4d6>
 8004b30:	e01b      	b.n	8004b6a <HAL_RCC_OscConfig+0x52e>
 8004b32:	bf00      	nop
 8004b34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b38:	4b9b      	ldr	r3, [pc, #620]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a9a      	ldr	r2, [pc, #616]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b44:	f7fe f8dc 	bl	8002d00 <HAL_GetTick>
 8004b48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b4c:	f7fe f8d8 	bl	8002d00 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e1c0      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b5e:	4b92      	ldr	r3, [pc, #584]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8081 	beq.w	8004c7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b78:	4b8c      	ldr	r3, [pc, #560]	@ (8004dac <HAL_RCC_OscConfig+0x770>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a8b      	ldr	r2, [pc, #556]	@ (8004dac <HAL_RCC_OscConfig+0x770>)
 8004b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b84:	f7fe f8bc 	bl	8002d00 <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8c:	f7fe f8b8 	bl	8002d00 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	@ 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e1a0      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b9e:	4b83      	ldr	r3, [pc, #524]	@ (8004dac <HAL_RCC_OscConfig+0x770>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d106      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x584>
 8004bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bbe:	e02d      	b.n	8004c1c <HAL_RCC_OscConfig+0x5e0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10c      	bne.n	8004be2 <HAL_RCC_OscConfig+0x5a6>
 8004bc8:	4b77      	ldr	r3, [pc, #476]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bcc:	4a76      	ldr	r2, [pc, #472]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd4:	4b74      	ldr	r3, [pc, #464]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd8:	4a73      	ldr	r2, [pc, #460]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004bda:	f023 0304 	bic.w	r3, r3, #4
 8004bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be0:	e01c      	b.n	8004c1c <HAL_RCC_OscConfig+0x5e0>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b05      	cmp	r3, #5
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x5c8>
 8004bea:	4b6f      	ldr	r3, [pc, #444]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bee:	4a6e      	ldr	r2, [pc, #440]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004bf0:	f043 0304 	orr.w	r3, r3, #4
 8004bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfa:	4a6b      	ldr	r2, [pc, #428]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c02:	e00b      	b.n	8004c1c <HAL_RCC_OscConfig+0x5e0>
 8004c04:	4b68      	ldr	r3, [pc, #416]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c08:	4a67      	ldr	r2, [pc, #412]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c10:	4b65      	ldr	r3, [pc, #404]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c14:	4a64      	ldr	r2, [pc, #400]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004c16:	f023 0304 	bic.w	r3, r3, #4
 8004c1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d015      	beq.n	8004c50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c24:	f7fe f86c 	bl	8002d00 <HAL_GetTick>
 8004c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2c:	f7fe f868 	bl	8002d00 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e14e      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c42:	4b59      	ldr	r3, [pc, #356]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0ee      	beq.n	8004c2c <HAL_RCC_OscConfig+0x5f0>
 8004c4e:	e014      	b.n	8004c7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c50:	f7fe f856 	bl	8002d00 <HAL_GetTick>
 8004c54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c56:	e00a      	b.n	8004c6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c58:	f7fe f852 	bl	8002d00 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e138      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1ee      	bne.n	8004c58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 812d 	beq.w	8004ede <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c84:	4b48      	ldr	r3, [pc, #288]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c8c:	2b18      	cmp	r3, #24
 8004c8e:	f000 80bd 	beq.w	8004e0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	f040 809e 	bne.w	8004dd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9c:	4b42      	ldr	r3, [pc, #264]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a41      	ldr	r2, [pc, #260]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fe f82a 	bl	8002d00 <HAL_GetTick>
 8004cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fe f826 	bl	8002d00 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e10e      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cc2:	4b39      	ldr	r3, [pc, #228]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cce:	4b36      	ldr	r3, [pc, #216]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cd2:	4b37      	ldr	r3, [pc, #220]	@ (8004db0 <HAL_RCC_OscConfig+0x774>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cde:	0112      	lsls	r2, r2, #4
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	4931      	ldr	r1, [pc, #196]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cec:	3b01      	subs	r3, #1
 8004cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	025b      	lsls	r3, r3, #9
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d02:	3b01      	subs	r3, #1
 8004d04:	041b      	lsls	r3, r3, #16
 8004d06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d10:	3b01      	subs	r3, #1
 8004d12:	061b      	lsls	r3, r3, #24
 8004d14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d18:	4923      	ldr	r1, [pc, #140]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d1e:	4b22      	ldr	r3, [pc, #136]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d22:	4a21      	ldr	r2, [pc, #132]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d2e:	4b21      	ldr	r3, [pc, #132]	@ (8004db4 <HAL_RCC_OscConfig+0x778>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d36:	00d2      	lsls	r2, r2, #3
 8004d38:	491b      	ldr	r1, [pc, #108]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	f023 020c 	bic.w	r2, r3, #12
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	4917      	ldr	r1, [pc, #92]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d50:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d54:	f023 0202 	bic.w	r2, r3, #2
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5c:	4912      	ldr	r1, [pc, #72]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d62:	4b11      	ldr	r3, [pc, #68]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	4a10      	ldr	r2, [pc, #64]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	4a0d      	ldr	r2, [pc, #52]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d86:	4b08      	ldr	r3, [pc, #32]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	4a07      	ldr	r2, [pc, #28]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d92:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a04      	ldr	r2, [pc, #16]	@ (8004da8 <HAL_RCC_OscConfig+0x76c>)
 8004d98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fd ffaf 	bl	8002d00 <HAL_GetTick>
 8004da2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004da4:	e011      	b.n	8004dca <HAL_RCC_OscConfig+0x78e>
 8004da6:	bf00      	nop
 8004da8:	58024400 	.word	0x58024400
 8004dac:	58024800 	.word	0x58024800
 8004db0:	fffffc0c 	.word	0xfffffc0c
 8004db4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fd ffa2 	bl	8002d00 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e08a      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dca:	4b47      	ldr	r3, [pc, #284]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x77c>
 8004dd6:	e082      	b.n	8004ede <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd8:	4b43      	ldr	r3, [pc, #268]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a42      	ldr	r2, [pc, #264]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004dde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fd ff8c 	bl	8002d00 <HAL_GetTick>
 8004de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7fd ff88 	bl	8002d00 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e070      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x7b0>
 8004e0a:	e068      	b.n	8004ede <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e0c:	4b36      	ldr	r3, [pc, #216]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e12:	4b35      	ldr	r3, [pc, #212]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d031      	beq.n	8004e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f003 0203 	and.w	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d12a      	bne.n	8004e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d122      	bne.n	8004e84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d11a      	bne.n	8004e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	0a5b      	lsrs	r3, r3, #9
 8004e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d111      	bne.n	8004e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	0c1b      	lsrs	r3, r3, #16
 8004e64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d108      	bne.n	8004e84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	0e1b      	lsrs	r3, r3, #24
 8004e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e02b      	b.n	8004ee0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e88:	4b17      	ldr	r3, [pc, #92]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8c:	08db      	lsrs	r3, r3, #3
 8004e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d01f      	beq.n	8004ede <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	4a11      	ldr	r2, [pc, #68]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eaa:	f7fd ff29 	bl	8002d00 <HAL_GetTick>
 8004eae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004eb0:	bf00      	nop
 8004eb2:	f7fd ff25 	bl	8002d00 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d0f9      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <HAL_RCC_OscConfig+0x8b0>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004eca:	00d2      	lsls	r2, r2, #3
 8004ecc:	4906      	ldr	r1, [pc, #24]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ed2:	4b05      	ldr	r3, [pc, #20]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	4a04      	ldr	r2, [pc, #16]	@ (8004ee8 <HAL_RCC_OscConfig+0x8ac>)
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3730      	adds	r7, #48	@ 0x30
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	ffff0007 	.word	0xffff0007

08004ef0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e19c      	b.n	800523e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f04:	4b8a      	ldr	r3, [pc, #552]	@ (8005130 <HAL_RCC_ClockConfig+0x240>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d910      	bls.n	8004f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b87      	ldr	r3, [pc, #540]	@ (8005130 <HAL_RCC_ClockConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 020f 	bic.w	r2, r3, #15
 8004f1a:	4985      	ldr	r1, [pc, #532]	@ (8005130 <HAL_RCC_ClockConfig+0x240>)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b83      	ldr	r3, [pc, #524]	@ (8005130 <HAL_RCC_ClockConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e184      	b.n	800523e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d010      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	4b7b      	ldr	r3, [pc, #492]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d908      	bls.n	8004f62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f50:	4b78      	ldr	r3, [pc, #480]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	4975      	ldr	r1, [pc, #468]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d010      	beq.n	8004f90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	4b70      	ldr	r3, [pc, #448]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d908      	bls.n	8004f90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	496a      	ldr	r1, [pc, #424]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d010      	beq.n	8004fbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	4b64      	ldr	r3, [pc, #400]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d908      	bls.n	8004fbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fac:	4b61      	ldr	r3, [pc, #388]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	495e      	ldr	r1, [pc, #376]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	4b59      	ldr	r3, [pc, #356]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d908      	bls.n	8004fec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fda:	4b56      	ldr	r3, [pc, #344]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	4953      	ldr	r1, [pc, #332]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d010      	beq.n	800501a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	429a      	cmp	r2, r3
 8005006:	d908      	bls.n	800501a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005008:	4b4a      	ldr	r3, [pc, #296]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f023 020f 	bic.w	r2, r3, #15
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	4947      	ldr	r1, [pc, #284]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8005016:	4313      	orrs	r3, r2
 8005018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d055      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005026:	4b43      	ldr	r3, [pc, #268]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	4940      	ldr	r1, [pc, #256]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8005034:	4313      	orrs	r3, r2
 8005036:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d107      	bne.n	8005050 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005040:	4b3c      	ldr	r3, [pc, #240]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d121      	bne.n	8005090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0f6      	b.n	800523e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d107      	bne.n	8005068 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005058:	4b36      	ldr	r3, [pc, #216]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d115      	bne.n	8005090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0ea      	b.n	800523e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d107      	bne.n	8005080 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005070:	4b30      	ldr	r3, [pc, #192]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0de      	b.n	800523e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005080:	4b2c      	ldr	r3, [pc, #176]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0d6      	b.n	800523e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005090:	4b28      	ldr	r3, [pc, #160]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f023 0207 	bic.w	r2, r3, #7
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4925      	ldr	r1, [pc, #148]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a2:	f7fd fe2d 	bl	8002d00 <HAL_GetTick>
 80050a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a8:	e00a      	b.n	80050c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050aa:	f7fd fe29 	bl	8002d00 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0be      	b.n	800523e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d1eb      	bne.n	80050aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d010      	beq.n	8005100 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	4b14      	ldr	r3, [pc, #80]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d208      	bcs.n	8005100 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ee:	4b11      	ldr	r3, [pc, #68]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f023 020f 	bic.w	r2, r3, #15
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	490e      	ldr	r1, [pc, #56]	@ (8005134 <HAL_RCC_ClockConfig+0x244>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_RCC_ClockConfig+0x240>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d214      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510e:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <HAL_RCC_ClockConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 020f 	bic.w	r2, r3, #15
 8005116:	4906      	ldr	r1, [pc, #24]	@ (8005130 <HAL_RCC_ClockConfig+0x240>)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b04      	ldr	r3, [pc, #16]	@ (8005130 <HAL_RCC_ClockConfig+0x240>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d005      	beq.n	8005138 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e086      	b.n	800523e <HAL_RCC_ClockConfig+0x34e>
 8005130:	52002000 	.word	0x52002000
 8005134:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	4b3f      	ldr	r3, [pc, #252]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005150:	429a      	cmp	r2, r3
 8005152:	d208      	bcs.n	8005166 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005154:	4b3c      	ldr	r3, [pc, #240]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	4939      	ldr	r1, [pc, #228]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 8005162:	4313      	orrs	r3, r2
 8005164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d010      	beq.n	8005194 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	4b34      	ldr	r3, [pc, #208]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800517e:	429a      	cmp	r2, r3
 8005180:	d208      	bcs.n	8005194 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005182:	4b31      	ldr	r3, [pc, #196]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	492e      	ldr	r1, [pc, #184]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 8005190:	4313      	orrs	r3, r2
 8005192:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b00      	cmp	r3, #0
 800519e:	d010      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	4b28      	ldr	r3, [pc, #160]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d208      	bcs.n	80051c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051b0:	4b25      	ldr	r3, [pc, #148]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	4922      	ldr	r1, [pc, #136]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d010      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051da:	429a      	cmp	r2, r3
 80051dc:	d208      	bcs.n	80051f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051de:	4b1a      	ldr	r3, [pc, #104]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	4917      	ldr	r1, [pc, #92]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051f0:	f000 f834 	bl	800525c <HAL_RCC_GetSysClockFreq>
 80051f4:	4602      	mov	r2, r0
 80051f6:	4b14      	ldr	r3, [pc, #80]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	0a1b      	lsrs	r3, r3, #8
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	4912      	ldr	r1, [pc, #72]	@ (800524c <HAL_RCC_ClockConfig+0x35c>)
 8005202:	5ccb      	ldrb	r3, [r1, r3]
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800520e:	4b0e      	ldr	r3, [pc, #56]	@ (8005248 <HAL_RCC_ClockConfig+0x358>)
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	4a0d      	ldr	r2, [pc, #52]	@ (800524c <HAL_RCC_ClockConfig+0x35c>)
 8005218:	5cd3      	ldrb	r3, [r2, r3]
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
 8005224:	4a0a      	ldr	r2, [pc, #40]	@ (8005250 <HAL_RCC_ClockConfig+0x360>)
 8005226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005228:	4a0a      	ldr	r2, [pc, #40]	@ (8005254 <HAL_RCC_ClockConfig+0x364>)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800522e:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <HAL_RCC_ClockConfig+0x368>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd f836 	bl	80022a4 <HAL_InitTick>
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800523c:	7bfb      	ldrb	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	58024400 	.word	0x58024400
 800524c:	0802b0ec 	.word	0x0802b0ec
 8005250:	24000008 	.word	0x24000008
 8005254:	24000004 	.word	0x24000004
 8005258:	2400000c 	.word	0x2400000c

0800525c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	b089      	sub	sp, #36	@ 0x24
 8005260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005262:	4bb3      	ldr	r3, [pc, #716]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800526a:	2b18      	cmp	r3, #24
 800526c:	f200 8155 	bhi.w	800551a <HAL_RCC_GetSysClockFreq+0x2be>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	080052dd 	.word	0x080052dd
 800527c:	0800551b 	.word	0x0800551b
 8005280:	0800551b 	.word	0x0800551b
 8005284:	0800551b 	.word	0x0800551b
 8005288:	0800551b 	.word	0x0800551b
 800528c:	0800551b 	.word	0x0800551b
 8005290:	0800551b 	.word	0x0800551b
 8005294:	0800551b 	.word	0x0800551b
 8005298:	08005303 	.word	0x08005303
 800529c:	0800551b 	.word	0x0800551b
 80052a0:	0800551b 	.word	0x0800551b
 80052a4:	0800551b 	.word	0x0800551b
 80052a8:	0800551b 	.word	0x0800551b
 80052ac:	0800551b 	.word	0x0800551b
 80052b0:	0800551b 	.word	0x0800551b
 80052b4:	0800551b 	.word	0x0800551b
 80052b8:	08005309 	.word	0x08005309
 80052bc:	0800551b 	.word	0x0800551b
 80052c0:	0800551b 	.word	0x0800551b
 80052c4:	0800551b 	.word	0x0800551b
 80052c8:	0800551b 	.word	0x0800551b
 80052cc:	0800551b 	.word	0x0800551b
 80052d0:	0800551b 	.word	0x0800551b
 80052d4:	0800551b 	.word	0x0800551b
 80052d8:	0800530f 	.word	0x0800530f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052dc:	4b94      	ldr	r3, [pc, #592]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d009      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052e8:	4b91      	ldr	r3, [pc, #580]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	08db      	lsrs	r3, r3, #3
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	4a90      	ldr	r2, [pc, #576]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052f4:	fa22 f303 	lsr.w	r3, r2, r3
 80052f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052fa:	e111      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052fc:	4b8d      	ldr	r3, [pc, #564]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052fe:	61bb      	str	r3, [r7, #24]
      break;
 8005300:	e10e      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005302:	4b8d      	ldr	r3, [pc, #564]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005304:	61bb      	str	r3, [r7, #24]
      break;
 8005306:	e10b      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005308:	4b8c      	ldr	r3, [pc, #560]	@ (800553c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800530a:	61bb      	str	r3, [r7, #24]
      break;
 800530c:	e108      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800530e:	4b88      	ldr	r3, [pc, #544]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005318:	4b85      	ldr	r3, [pc, #532]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005322:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005324:	4b82      	ldr	r3, [pc, #520]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800532e:	4b80      	ldr	r3, [pc, #512]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005332:	08db      	lsrs	r3, r3, #3
 8005334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80e1 	beq.w	8005514 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b02      	cmp	r3, #2
 8005356:	f000 8083 	beq.w	8005460 <HAL_RCC_GetSysClockFreq+0x204>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b02      	cmp	r3, #2
 800535e:	f200 80a1 	bhi.w	80054a4 <HAL_RCC_GetSysClockFreq+0x248>
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x114>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d056      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0x1c0>
 800536e:	e099      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005370:	4b6f      	ldr	r3, [pc, #444]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d02d      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800537c:	4b6c      	ldr	r3, [pc, #432]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	08db      	lsrs	r3, r3, #3
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	4a6b      	ldr	r2, [pc, #428]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
 800538c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a6:	4b62      	ldr	r3, [pc, #392]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053d6:	e087      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005544 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ea:	4b51      	ldr	r3, [pc, #324]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80053fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800540a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800540e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800541a:	e065      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005548 <HAL_RCC_GetSysClockFreq+0x2ec>
 800542a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542e:	4b40      	ldr	r3, [pc, #256]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005442:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005540 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800544a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800544e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800545e:	e043      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800554c <HAL_RCC_GetSysClockFreq+0x2f0>
 800546e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005472:	4b2f      	ldr	r3, [pc, #188]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005482:	ed97 6a02 	vldr	s12, [r7, #8]
 8005486:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800548a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054a2:	e021      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005548 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005540 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054e8:	4b11      	ldr	r3, [pc, #68]	@ (8005530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ec:	0a5b      	lsrs	r3, r3, #9
 80054ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054f2:	3301      	adds	r3, #1
 80054f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005500:	edd7 6a07 	vldr	s13, [r7, #28]
 8005504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800550c:	ee17 3a90 	vmov	r3, s15
 8005510:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005512:	e005      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
      break;
 8005518:	e002      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800551a:	4b07      	ldr	r3, [pc, #28]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800551c:	61bb      	str	r3, [r7, #24]
      break;
 800551e:	bf00      	nop
  }

  return sysclockfreq;
 8005520:	69bb      	ldr	r3, [r7, #24]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3724      	adds	r7, #36	@ 0x24
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	58024400 	.word	0x58024400
 8005534:	03d09000 	.word	0x03d09000
 8005538:	003d0900 	.word	0x003d0900
 800553c:	007a1200 	.word	0x007a1200
 8005540:	46000000 	.word	0x46000000
 8005544:	4c742400 	.word	0x4c742400
 8005548:	4a742400 	.word	0x4a742400
 800554c:	4af42400 	.word	0x4af42400

08005550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005556:	f7ff fe81 	bl	800525c <HAL_RCC_GetSysClockFreq>
 800555a:	4602      	mov	r2, r0
 800555c:	4b10      	ldr	r3, [pc, #64]	@ (80055a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	490f      	ldr	r1, [pc, #60]	@ (80055a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005568:	5ccb      	ldrb	r3, [r1, r3]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	fa22 f303 	lsr.w	r3, r2, r3
 8005572:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005574:	4b0a      	ldr	r3, [pc, #40]	@ (80055a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	4a09      	ldr	r2, [pc, #36]	@ (80055a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800557e:	5cd3      	ldrb	r3, [r2, r3]
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	fa22 f303 	lsr.w	r3, r2, r3
 800558a:	4a07      	ldr	r2, [pc, #28]	@ (80055a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800558c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800558e:	4a07      	ldr	r2, [pc, #28]	@ (80055ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005594:	4b04      	ldr	r3, [pc, #16]	@ (80055a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005596:	681b      	ldr	r3, [r3, #0]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	58024400 	.word	0x58024400
 80055a4:	0802b0ec 	.word	0x0802b0ec
 80055a8:	24000008 	.word	0x24000008
 80055ac:	24000004 	.word	0x24000004

080055b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055b4:	f7ff ffcc 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	4904      	ldr	r1, [pc, #16]	@ (80055d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	58024400 	.word	0x58024400
 80055d8:	0802b0ec 	.word	0x0802b0ec

080055dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055e0:	f7ff ffb6 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 80055e4:	4602      	mov	r2, r0
 80055e6:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	4904      	ldr	r1, [pc, #16]	@ (8005604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055f2:	5ccb      	ldrb	r3, [r1, r3]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	58024400 	.word	0x58024400
 8005604:	0802b0ec 	.word	0x0802b0ec

08005608 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	223f      	movs	r2, #63	@ 0x3f
 8005616:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005618:	4b1a      	ldr	r3, [pc, #104]	@ (8005684 <HAL_RCC_GetClockConfig+0x7c>)
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f003 0207 	and.w	r2, r3, #7
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005624:	4b17      	ldr	r3, [pc, #92]	@ (8005684 <HAL_RCC_GetClockConfig+0x7c>)
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005630:	4b14      	ldr	r3, [pc, #80]	@ (8005684 <HAL_RCC_GetClockConfig+0x7c>)
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f003 020f 	and.w	r2, r3, #15
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800563c:	4b11      	ldr	r3, [pc, #68]	@ (8005684 <HAL_RCC_GetClockConfig+0x7c>)
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005648:	4b0e      	ldr	r3, [pc, #56]	@ (8005684 <HAL_RCC_GetClockConfig+0x7c>)
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005654:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <HAL_RCC_GetClockConfig+0x7c>)
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005660:	4b08      	ldr	r3, [pc, #32]	@ (8005684 <HAL_RCC_GetClockConfig+0x7c>)
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800566c:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <HAL_RCC_GetClockConfig+0x80>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	601a      	str	r2, [r3, #0]
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	58024400 	.word	0x58024400
 8005688:	52002000 	.word	0x52002000

0800568c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800568c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005690:	b0ca      	sub	sp, #296	@ 0x128
 8005692:	af00      	add	r7, sp, #0
 8005694:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005698:	2300      	movs	r3, #0
 800569a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80056b0:	2500      	movs	r5, #0
 80056b2:	ea54 0305 	orrs.w	r3, r4, r5
 80056b6:	d049      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80056b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056c2:	d02f      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80056c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056c8:	d828      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80056ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056ce:	d01a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80056d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d4:	d822      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80056da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056de:	d007      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056e0:	e01c      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e2:	4bb8      	ldr	r3, [pc, #736]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	4ab7      	ldr	r2, [pc, #732]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056ee:	e01a      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f4:	3308      	adds	r3, #8
 80056f6:	2102      	movs	r1, #2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 fc8f 	bl	800701c <RCCEx_PLL2_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005704:	e00f      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570a:	3328      	adds	r3, #40	@ 0x28
 800570c:	2102      	movs	r1, #2
 800570e:	4618      	mov	r0, r3
 8005710:	f001 fd36 	bl	8007180 <RCCEx_PLL3_Config>
 8005714:	4603      	mov	r3, r0
 8005716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800571a:	e004      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005722:	e000      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800572e:	4ba5      	ldr	r3, [pc, #660]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005732:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800573c:	4aa1      	ldr	r2, [pc, #644]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800573e:	430b      	orrs	r3, r1
 8005740:	6513      	str	r3, [r2, #80]	@ 0x50
 8005742:	e003      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005758:	f04f 0900 	mov.w	r9, #0
 800575c:	ea58 0309 	orrs.w	r3, r8, r9
 8005760:	d047      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005768:	2b04      	cmp	r3, #4
 800576a:	d82a      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800576c:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	08005789 	.word	0x08005789
 8005778:	08005797 	.word	0x08005797
 800577c:	080057ad 	.word	0x080057ad
 8005780:	080057cb 	.word	0x080057cb
 8005784:	080057cb 	.word	0x080057cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005788:	4b8e      	ldr	r3, [pc, #568]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	4a8d      	ldr	r2, [pc, #564]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800578e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005794:	e01a      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	3308      	adds	r3, #8
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fc3c 	bl	800701c <RCCEx_PLL2_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057aa:	e00f      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b0:	3328      	adds	r3, #40	@ 0x28
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 fce3 	bl	8007180 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057c0:	e004      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057c8:	e000      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80057ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057d4:	4b7b      	ldr	r3, [pc, #492]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d8:	f023 0107 	bic.w	r1, r3, #7
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e2:	4a78      	ldr	r2, [pc, #480]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e4:	430b      	orrs	r3, r1
 80057e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057e8:	e003      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80057f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80057fe:	f04f 0b00 	mov.w	fp, #0
 8005802:	ea5a 030b 	orrs.w	r3, sl, fp
 8005806:	d04c      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005812:	d030      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005818:	d829      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800581a:	2bc0      	cmp	r3, #192	@ 0xc0
 800581c:	d02d      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800581e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005820:	d825      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005822:	2b80      	cmp	r3, #128	@ 0x80
 8005824:	d018      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005826:	2b80      	cmp	r3, #128	@ 0x80
 8005828:	d821      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800582e:	2b40      	cmp	r3, #64	@ 0x40
 8005830:	d007      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005832:	e01c      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005834:	4b63      	ldr	r3, [pc, #396]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	4a62      	ldr	r2, [pc, #392]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800583a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005840:	e01c      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005846:	3308      	adds	r3, #8
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f001 fbe6 	bl	800701c <RCCEx_PLL2_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005856:	e011      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585c:	3328      	adds	r3, #40	@ 0x28
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f001 fc8d 	bl	8007180 <RCCEx_PLL3_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800586c:	e006      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005874:	e002      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005876:	bf00      	nop
 8005878:	e000      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800587a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800587c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005884:	4b4f      	ldr	r3, [pc, #316]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005888:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005892:	4a4c      	ldr	r2, [pc, #304]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005894:	430b      	orrs	r3, r1
 8005896:	6513      	str	r3, [r2, #80]	@ 0x50
 8005898:	e003      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800589e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80058a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80058ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80058b2:	2300      	movs	r3, #0
 80058b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80058b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80058bc:	460b      	mov	r3, r1
 80058be:	4313      	orrs	r3, r2
 80058c0:	d053      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058ce:	d035      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80058d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058d4:	d82e      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80058d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80058da:	d031      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80058dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80058e0:	d828      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80058e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058e6:	d01a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80058e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058ec:	d822      	bhi.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80058f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058f6:	d007      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80058f8:	e01c      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058fa:	4b32      	ldr	r3, [pc, #200]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fe:	4a31      	ldr	r2, [pc, #196]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005906:	e01c      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590c:	3308      	adds	r3, #8
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f001 fb83 	bl	800701c <RCCEx_PLL2_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800591c:	e011      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800591e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005922:	3328      	adds	r3, #40	@ 0x28
 8005924:	2100      	movs	r1, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f001 fc2a 	bl	8007180 <RCCEx_PLL3_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005932:	e006      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800593a:	e002      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800593c:	bf00      	nop
 800593e:	e000      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800594a:	4b1e      	ldr	r3, [pc, #120]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800595a:	4a1a      	ldr	r2, [pc, #104]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800595c:	430b      	orrs	r3, r1
 800595e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005960:	e003      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005976:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800597a:	2300      	movs	r3, #0
 800597c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005980:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005984:	460b      	mov	r3, r1
 8005986:	4313      	orrs	r3, r2
 8005988:	d056      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005992:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005996:	d038      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005998:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800599c:	d831      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800599e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059a2:	d034      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80059a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059a8:	d82b      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80059aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059ae:	d01d      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 80059b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059b4:	d825      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80059ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80059c0:	e01f      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c8:	4ba2      	ldr	r3, [pc, #648]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059cc:	4aa1      	ldr	r2, [pc, #644]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059d4:	e01c      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059da:	3308      	adds	r3, #8
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 fb1c 	bl	800701c <RCCEx_PLL2_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059ea:	e011      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f0:	3328      	adds	r3, #40	@ 0x28
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 fbc3 	bl	8007180 <RCCEx_PLL3_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a00:	e006      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a08:	e002      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a0a:	bf00      	nop
 8005a0c:	e000      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10b      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a18:	4b8e      	ldr	r3, [pc, #568]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a28:	4a8a      	ldr	r2, [pc, #552]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a2e:	e003      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005a44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005a52:	460b      	mov	r3, r1
 8005a54:	4313      	orrs	r3, r2
 8005a56:	d03a      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a5e:	2b30      	cmp	r3, #48	@ 0x30
 8005a60:	d01f      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005a62:	2b30      	cmp	r3, #48	@ 0x30
 8005a64:	d819      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d00c      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d815      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d019      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d111      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a76:	4b77      	ldr	r3, [pc, #476]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7a:	4a76      	ldr	r2, [pc, #472]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a82:	e011      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a88:	3308      	adds	r3, #8
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 fac5 	bl	800701c <RCCEx_PLL2_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a98:	e006      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aa0:	e002      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005aa2:	bf00      	nop
 8005aa4:	e000      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ab0:	4b68      	ldr	r3, [pc, #416]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005abe:	4a65      	ldr	r2, [pc, #404]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ac4:	e003      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ada:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d051      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005af8:	d035      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005afa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005afe:	d82e      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b04:	d031      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005b06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b0a:	d828      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b10:	d01a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b16:	d822      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b20:	d007      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005b22:	e01c      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b24:	4b4b      	ldr	r3, [pc, #300]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b28:	4a4a      	ldr	r2, [pc, #296]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b30:	e01c      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	3308      	adds	r3, #8
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 fa6e 	bl	800701c <RCCEx_PLL2_Config>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b46:	e011      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4c:	3328      	adds	r3, #40	@ 0x28
 8005b4e:	2100      	movs	r1, #0
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 fb15 	bl	8007180 <RCCEx_PLL3_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b5c:	e006      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b64:	e002      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b66:	bf00      	nop
 8005b68:	e000      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b74:	4b37      	ldr	r3, [pc, #220]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b78:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b82:	4a34      	ldr	r2, [pc, #208]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b88:	e003      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ba8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005bac:	460b      	mov	r3, r1
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	d056      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bbc:	d033      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005bbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bc2:	d82c      	bhi.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005bc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bc8:	d02f      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005bca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bce:	d826      	bhi.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005bd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bd4:	d02b      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005bd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bda:	d820      	bhi.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005be0:	d012      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005be6:	d81a      	bhi.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d022      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf0:	d115      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 fa0e 	bl	800701c <RCCEx_PLL2_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c06:	e015      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0c:	3328      	adds	r3, #40	@ 0x28
 8005c0e:	2101      	movs	r1, #1
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 fab5 	bl	8007180 <RCCEx_PLL3_Config>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c1c:	e00a      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c24:	e006      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c26:	bf00      	nop
 8005c28:	e004      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c2a:	bf00      	nop
 8005c2c:	e002      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e000      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10d      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c3c:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c40:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c4a:	4a02      	ldr	r2, [pc, #8]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c50:	e006      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c52:	bf00      	nop
 8005c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c70:	2300      	movs	r3, #0
 8005c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	d055      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c8c:	d033      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c92:	d82c      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c98:	d02f      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c9e:	d826      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ca0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ca4:	d02b      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005ca6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005caa:	d820      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cb0:	d012      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cb6:	d81a      	bhi.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d022      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cc0:	d115      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	2101      	movs	r1, #1
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f001 f9a6 	bl	800701c <RCCEx_PLL2_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005cd6:	e015      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cdc:	3328      	adds	r3, #40	@ 0x28
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 fa4d 	bl	8007180 <RCCEx_PLL3_Config>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005cec:	e00a      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cf4:	e006      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cf6:	bf00      	nop
 8005cf8:	e004      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cfa:	bf00      	nop
 8005cfc:	e002      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cfe:	bf00      	nop
 8005d00:	e000      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d0c:	4ba3      	ldr	r3, [pc, #652]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d10:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d1c:	4a9f      	ldr	r2, [pc, #636]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d22:	e003      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005d38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005d42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d46:	460b      	mov	r3, r1
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	d037      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d56:	d00e      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d5c:	d816      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d018      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d66:	d111      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d68:	4b8c      	ldr	r3, [pc, #560]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6c:	4a8b      	ldr	r2, [pc, #556]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d74:	e00f      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f94c 	bl	800701c <RCCEx_PLL2_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d8a:	e004      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d92:	e000      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dac:	4a7b      	ldr	r2, [pc, #492]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dae:	430b      	orrs	r3, r1
 8005db0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005db2:	e003      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005dd2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	d039      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d81c      	bhi.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005de6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005e29 	.word	0x08005e29
 8005df0:	08005dfd 	.word	0x08005dfd
 8005df4:	08005e0b 	.word	0x08005e0b
 8005df8:	08005e29 	.word	0x08005e29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dfc:	4b67      	ldr	r3, [pc, #412]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	4a66      	ldr	r2, [pc, #408]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e08:	e00f      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	3308      	adds	r3, #8
 8005e10:	2102      	movs	r1, #2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 f902 	bl	800701c <RCCEx_PLL2_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e1e:	e004      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e26:	e000      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10a      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e32:	4b5a      	ldr	r3, [pc, #360]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e36:	f023 0103 	bic.w	r1, r3, #3
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e40:	4a56      	ldr	r2, [pc, #344]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e42:	430b      	orrs	r3, r1
 8005e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e46:	e003      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e60:	2300      	movs	r3, #0
 8005e62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f000 809f 	beq.w	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e72:	4b4b      	ldr	r3, [pc, #300]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e7e:	f7fc ff3f 	bl	8002d00 <HAL_GetTick>
 8005e82:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e86:	e00b      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e88:	f7fc ff3a 	bl	8002d00 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b64      	cmp	r3, #100	@ 0x64
 8005e96:	d903      	bls.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e9e:	e005      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0ed      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d179      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005eb4:	4b39      	ldr	r3, [pc, #228]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ebc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ec0:	4053      	eors	r3, r2
 8005ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d015      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eca:	4b34      	ldr	r3, [pc, #208]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ed2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ed6:	4b31      	ldr	r3, [pc, #196]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eda:	4a30      	ldr	r2, [pc, #192]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005eee:	4a2b      	ldr	r2, [pc, #172]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ef4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f02:	d118      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fc fefc 	bl	8002d00 <HAL_GetTick>
 8005f08:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f0c:	e00d      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0e:	f7fc fef7 	bl	8002d00 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f18:	1ad2      	subs	r2, r2, r3
 8005f1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d903      	bls.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005f28:	e005      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0eb      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d129      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f4e:	d10e      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005f50:	4b12      	ldr	r3, [pc, #72]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f60:	091a      	lsrs	r2, r3, #4
 8005f62:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	4a0d      	ldr	r2, [pc, #52]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	6113      	str	r3, [r2, #16]
 8005f6c:	e005      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	4a0a      	ldr	r2, [pc, #40]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f74:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f78:	6113      	str	r3, [r2, #16]
 8005f7a:	4b08      	ldr	r3, [pc, #32]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f7c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f8a:	4a04      	ldr	r2, [pc, #16]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f90:	e00e      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005f9a:	e009      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005f9c:	58024400 	.word	0x58024400
 8005fa0:	58024800 	.word	0x58024800
 8005fa4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f002 0301 	and.w	r3, r2, #1
 8005fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fc6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f000 8089 	beq.w	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fd8:	2b28      	cmp	r3, #40	@ 0x28
 8005fda:	d86b      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe2:	bf00      	nop
 8005fe4:	080060bd 	.word	0x080060bd
 8005fe8:	080060b5 	.word	0x080060b5
 8005fec:	080060b5 	.word	0x080060b5
 8005ff0:	080060b5 	.word	0x080060b5
 8005ff4:	080060b5 	.word	0x080060b5
 8005ff8:	080060b5 	.word	0x080060b5
 8005ffc:	080060b5 	.word	0x080060b5
 8006000:	080060b5 	.word	0x080060b5
 8006004:	08006089 	.word	0x08006089
 8006008:	080060b5 	.word	0x080060b5
 800600c:	080060b5 	.word	0x080060b5
 8006010:	080060b5 	.word	0x080060b5
 8006014:	080060b5 	.word	0x080060b5
 8006018:	080060b5 	.word	0x080060b5
 800601c:	080060b5 	.word	0x080060b5
 8006020:	080060b5 	.word	0x080060b5
 8006024:	0800609f 	.word	0x0800609f
 8006028:	080060b5 	.word	0x080060b5
 800602c:	080060b5 	.word	0x080060b5
 8006030:	080060b5 	.word	0x080060b5
 8006034:	080060b5 	.word	0x080060b5
 8006038:	080060b5 	.word	0x080060b5
 800603c:	080060b5 	.word	0x080060b5
 8006040:	080060b5 	.word	0x080060b5
 8006044:	080060bd 	.word	0x080060bd
 8006048:	080060b5 	.word	0x080060b5
 800604c:	080060b5 	.word	0x080060b5
 8006050:	080060b5 	.word	0x080060b5
 8006054:	080060b5 	.word	0x080060b5
 8006058:	080060b5 	.word	0x080060b5
 800605c:	080060b5 	.word	0x080060b5
 8006060:	080060b5 	.word	0x080060b5
 8006064:	080060bd 	.word	0x080060bd
 8006068:	080060b5 	.word	0x080060b5
 800606c:	080060b5 	.word	0x080060b5
 8006070:	080060b5 	.word	0x080060b5
 8006074:	080060b5 	.word	0x080060b5
 8006078:	080060b5 	.word	0x080060b5
 800607c:	080060b5 	.word	0x080060b5
 8006080:	080060b5 	.word	0x080060b5
 8006084:	080060bd 	.word	0x080060bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608c:	3308      	adds	r3, #8
 800608e:	2101      	movs	r1, #1
 8006090:	4618      	mov	r0, r3
 8006092:	f000 ffc3 	bl	800701c <RCCEx_PLL2_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800609c:	e00f      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a2:	3328      	adds	r3, #40	@ 0x28
 80060a4:	2101      	movs	r1, #1
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 f86a 	bl	8007180 <RCCEx_PLL3_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80060b2:	e004      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060ba:	e000      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80060bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80060c6:	4bbf      	ldr	r3, [pc, #764]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060d4:	4abb      	ldr	r2, [pc, #748]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060d6:	430b      	orrs	r3, r1
 80060d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80060da:	e003      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f002 0302 	and.w	r3, r2, #2
 80060f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060f4:	2300      	movs	r3, #0
 80060f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80060fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80060fe:	460b      	mov	r3, r1
 8006100:	4313      	orrs	r3, r2
 8006102:	d041      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800610a:	2b05      	cmp	r3, #5
 800610c:	d824      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800610e:	a201      	add	r2, pc, #4	@ (adr r2, 8006114 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006114:	08006161 	.word	0x08006161
 8006118:	0800612d 	.word	0x0800612d
 800611c:	08006143 	.word	0x08006143
 8006120:	08006161 	.word	0x08006161
 8006124:	08006161 	.word	0x08006161
 8006128:	08006161 	.word	0x08006161
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006130:	3308      	adds	r3, #8
 8006132:	2101      	movs	r1, #1
 8006134:	4618      	mov	r0, r3
 8006136:	f000 ff71 	bl	800701c <RCCEx_PLL2_Config>
 800613a:	4603      	mov	r3, r0
 800613c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006140:	e00f      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006146:	3328      	adds	r3, #40	@ 0x28
 8006148:	2101      	movs	r1, #1
 800614a:	4618      	mov	r0, r3
 800614c:	f001 f818 	bl	8007180 <RCCEx_PLL3_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006156:	e004      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800615e:	e000      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800616a:	4b96      	ldr	r3, [pc, #600]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800616c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616e:	f023 0107 	bic.w	r1, r3, #7
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006176:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006178:	4a92      	ldr	r2, [pc, #584]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800617a:	430b      	orrs	r3, r1
 800617c:	6553      	str	r3, [r2, #84]	@ 0x54
 800617e:	e003      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006184:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f002 0304 	and.w	r3, r2, #4
 8006194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006198:	2300      	movs	r3, #0
 800619a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800619e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4313      	orrs	r3, r2
 80061a6:	d044      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80061a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	d825      	bhi.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80061b4:	a201      	add	r2, pc, #4	@ (adr r2, 80061bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	08006209 	.word	0x08006209
 80061c0:	080061d5 	.word	0x080061d5
 80061c4:	080061eb 	.word	0x080061eb
 80061c8:	08006209 	.word	0x08006209
 80061cc:	08006209 	.word	0x08006209
 80061d0:	08006209 	.word	0x08006209
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d8:	3308      	adds	r3, #8
 80061da:	2101      	movs	r1, #1
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 ff1d 	bl	800701c <RCCEx_PLL2_Config>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061e8:	e00f      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	3328      	adds	r3, #40	@ 0x28
 80061f0:	2101      	movs	r1, #1
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 ffc4 	bl	8007180 <RCCEx_PLL3_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061fe:	e004      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006206:	e000      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10b      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006212:	4b6c      	ldr	r3, [pc, #432]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006216:	f023 0107 	bic.w	r1, r3, #7
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006222:	4a68      	ldr	r2, [pc, #416]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006224:	430b      	orrs	r3, r1
 8006226:	6593      	str	r3, [r2, #88]	@ 0x58
 8006228:	e003      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800622e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f002 0320 	and.w	r3, r2, #32
 800623e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006242:	2300      	movs	r3, #0
 8006244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800624c:	460b      	mov	r3, r1
 800624e:	4313      	orrs	r3, r2
 8006250:	d055      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800625e:	d033      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006264:	d82c      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626a:	d02f      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800626c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006270:	d826      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006272:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006276:	d02b      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006278:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800627c:	d820      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800627e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006282:	d012      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006288:	d81a      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d022      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800628e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006292:	d115      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006298:	3308      	adds	r3, #8
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f000 febd 	bl	800701c <RCCEx_PLL2_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80062a8:	e015      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	3328      	adds	r3, #40	@ 0x28
 80062b0:	2102      	movs	r1, #2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 ff64 	bl	8007180 <RCCEx_PLL3_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80062be:	e00a      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062c6:	e006      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80062c8:	bf00      	nop
 80062ca:	e004      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80062cc:	bf00      	nop
 80062ce:	e002      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80062d0:	bf00      	nop
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80062d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10b      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062de:	4b39      	ldr	r3, [pc, #228]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ee:	4a35      	ldr	r2, [pc, #212]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80062f4:	e003      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800630a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800630e:	2300      	movs	r3, #0
 8006310:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006314:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006318:	460b      	mov	r3, r1
 800631a:	4313      	orrs	r3, r2
 800631c:	d058      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006326:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800632a:	d033      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800632c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006330:	d82c      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006336:	d02f      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800633c:	d826      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800633e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006342:	d02b      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006344:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006348:	d820      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800634a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800634e:	d012      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006354:	d81a      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d022      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800635a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800635e:	d115      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006364:	3308      	adds	r3, #8
 8006366:	2100      	movs	r1, #0
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fe57 	bl	800701c <RCCEx_PLL2_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006374:	e015      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637a:	3328      	adds	r3, #40	@ 0x28
 800637c:	2102      	movs	r1, #2
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fefe 	bl	8007180 <RCCEx_PLL3_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800638a:	e00a      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006392:	e006      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006394:	bf00      	nop
 8006396:	e004      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006398:	bf00      	nop
 800639a:	e002      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800639c:	bf00      	nop
 800639e:	e000      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10e      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063aa:	4b06      	ldr	r3, [pc, #24]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80063b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063ba:	4a02      	ldr	r2, [pc, #8]	@ (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063bc:	430b      	orrs	r3, r1
 80063be:	6593      	str	r3, [r2, #88]	@ 0x58
 80063c0:	e006      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80063c2:	bf00      	nop
 80063c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80063dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063e0:	2300      	movs	r3, #0
 80063e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80063ea:	460b      	mov	r3, r1
 80063ec:	4313      	orrs	r3, r2
 80063ee:	d055      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80063f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063fc:	d033      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80063fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006402:	d82c      	bhi.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006408:	d02f      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800640a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800640e:	d826      	bhi.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006410:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006414:	d02b      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006416:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800641a:	d820      	bhi.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800641c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006420:	d012      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006422:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006426:	d81a      	bhi.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d022      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800642c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006430:	d115      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006436:	3308      	adds	r3, #8
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fdee 	bl	800701c <RCCEx_PLL2_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006446:	e015      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644c:	3328      	adds	r3, #40	@ 0x28
 800644e:	2102      	movs	r1, #2
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fe95 	bl	8007180 <RCCEx_PLL3_Config>
 8006456:	4603      	mov	r3, r0
 8006458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800645c:	e00a      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006464:	e006      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006466:	bf00      	nop
 8006468:	e004      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800646a:	bf00      	nop
 800646c:	e002      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800646e:	bf00      	nop
 8006470:	e000      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800647c:	4ba1      	ldr	r3, [pc, #644]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800647e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006480:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800648c:	4a9d      	ldr	r2, [pc, #628]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800648e:	430b      	orrs	r3, r1
 8006490:	6593      	str	r3, [r2, #88]	@ 0x58
 8006492:	e003      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f002 0308 	and.w	r3, r2, #8
 80064a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064ac:	2300      	movs	r3, #0
 80064ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80064b6:	460b      	mov	r3, r1
 80064b8:	4313      	orrs	r3, r2
 80064ba:	d01e      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80064bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064c8:	d10c      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ce:	3328      	adds	r3, #40	@ 0x28
 80064d0:	2102      	movs	r1, #2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fe54 	bl	8007180 <RCCEx_PLL3_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064e4:	4b87      	ldr	r3, [pc, #540]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064f4:	4a83      	ldr	r2, [pc, #524]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064f6:	430b      	orrs	r3, r1
 80064f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f002 0310 	and.w	r3, r2, #16
 8006506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800650a:	2300      	movs	r3, #0
 800650c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006510:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006514:	460b      	mov	r3, r1
 8006516:	4313      	orrs	r3, r2
 8006518:	d01e      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800651a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006526:	d10c      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652c:	3328      	adds	r3, #40	@ 0x28
 800652e:	2102      	movs	r1, #2
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fe25 	bl	8007180 <RCCEx_PLL3_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006542:	4b70      	ldr	r3, [pc, #448]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006546:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006552:	4a6c      	ldr	r2, [pc, #432]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006554:	430b      	orrs	r3, r1
 8006556:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006564:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800656e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006572:	460b      	mov	r3, r1
 8006574:	4313      	orrs	r3, r2
 8006576:	d03e      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006584:	d022      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800658a:	d81b      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006594:	d00b      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006596:	e015      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659c:	3308      	adds	r3, #8
 800659e:	2100      	movs	r1, #0
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fd3b 	bl	800701c <RCCEx_PLL2_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80065ac:	e00f      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b2:	3328      	adds	r3, #40	@ 0x28
 80065b4:	2102      	movs	r1, #2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fde2 	bl	8007180 <RCCEx_PLL3_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80065c2:	e004      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065ca:	e000      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80065cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80065de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065e6:	4a47      	ldr	r2, [pc, #284]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065e8:	430b      	orrs	r3, r1
 80065ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80065ec:	e003      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006602:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006604:	2300      	movs	r3, #0
 8006606:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006608:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800660c:	460b      	mov	r3, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d03b      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800661e:	d01f      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006620:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006624:	d818      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800662a:	d003      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800662c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006630:	d007      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006632:	e011      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006634:	4b33      	ldr	r3, [pc, #204]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	4a32      	ldr	r2, [pc, #200]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800663a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800663e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006640:	e00f      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006646:	3328      	adds	r3, #40	@ 0x28
 8006648:	2101      	movs	r1, #1
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fd98 	bl	8007180 <RCCEx_PLL3_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006656:	e004      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800665e:	e000      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800666a:	4b26      	ldr	r3, [pc, #152]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800666c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667a:	4a22      	ldr	r2, [pc, #136]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800667c:	430b      	orrs	r3, r1
 800667e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800668a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006696:	673b      	str	r3, [r7, #112]	@ 0x70
 8006698:	2300      	movs	r3, #0
 800669a:	677b      	str	r3, [r7, #116]	@ 0x74
 800669c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80066a0:	460b      	mov	r3, r1
 80066a2:	4313      	orrs	r3, r2
 80066a4:	d034      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80066a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80066b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b4:	d007      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80066b6:	e011      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b8:	4b12      	ldr	r3, [pc, #72]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066bc:	4a11      	ldr	r2, [pc, #68]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80066c4:	e00e      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ca:	3308      	adds	r3, #8
 80066cc:	2102      	movs	r1, #2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fca4 	bl	800701c <RCCEx_PLL2_Config>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80066da:	e003      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10d      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066ec:	4b05      	ldr	r3, [pc, #20]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066fa:	4a02      	ldr	r2, [pc, #8]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066fc:	430b      	orrs	r3, r1
 80066fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006700:	e006      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006702:	bf00      	nop
 8006704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800670c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800671c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800671e:	2300      	movs	r3, #0
 8006720:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006722:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006726:	460b      	mov	r3, r1
 8006728:	4313      	orrs	r3, r2
 800672a:	d00c      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	3328      	adds	r3, #40	@ 0x28
 8006732:	2102      	movs	r1, #2
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fd23 	bl	8007180 <RCCEx_PLL3_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006752:	663b      	str	r3, [r7, #96]	@ 0x60
 8006754:	2300      	movs	r3, #0
 8006756:	667b      	str	r3, [r7, #100]	@ 0x64
 8006758:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800675c:	460b      	mov	r3, r1
 800675e:	4313      	orrs	r3, r2
 8006760:	d038      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800676a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800676e:	d018      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006774:	d811      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800677a:	d014      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800677c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006780:	d80b      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d011      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800678a:	d106      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800678c:	4bc3      	ldr	r3, [pc, #780]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	4ac2      	ldr	r2, [pc, #776]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006796:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006798:	e008      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067a0:	e004      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80067a2:	bf00      	nop
 80067a4:	e002      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80067a6:	bf00      	nop
 80067a8:	e000      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80067aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10b      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067b4:	4bb9      	ldr	r3, [pc, #740]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c4:	4ab5      	ldr	r2, [pc, #724]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067c6:	430b      	orrs	r3, r1
 80067c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80067ca:	e003      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80067e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067e2:	2300      	movs	r3, #0
 80067e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80067ea:	460b      	mov	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067f0:	4baa      	ldr	r3, [pc, #680]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fe:	4aa7      	ldr	r2, [pc, #668]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006800:	430b      	orrs	r3, r1
 8006802:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006810:	653b      	str	r3, [r7, #80]	@ 0x50
 8006812:	2300      	movs	r3, #0
 8006814:	657b      	str	r3, [r7, #84]	@ 0x54
 8006816:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006820:	4b9e      	ldr	r3, [pc, #632]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006830:	4a9a      	ldr	r2, [pc, #616]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006832:	430b      	orrs	r3, r1
 8006834:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006844:	2300      	movs	r3, #0
 8006846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006848:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800684c:	460b      	mov	r3, r1
 800684e:	4313      	orrs	r3, r2
 8006850:	d009      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006852:	4b92      	ldr	r3, [pc, #584]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006856:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006860:	4a8e      	ldr	r2, [pc, #568]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006862:	430b      	orrs	r3, r1
 8006864:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006872:	643b      	str	r3, [r7, #64]	@ 0x40
 8006874:	2300      	movs	r3, #0
 8006876:	647b      	str	r3, [r7, #68]	@ 0x44
 8006878:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d00e      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006882:	4b86      	ldr	r3, [pc, #536]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	4a85      	ldr	r2, [pc, #532]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006888:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800688c:	6113      	str	r3, [r2, #16]
 800688e:	4b83      	ldr	r3, [pc, #524]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006890:	6919      	ldr	r1, [r3, #16]
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800689a:	4a80      	ldr	r2, [pc, #512]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800689c:	430b      	orrs	r3, r1
 800689e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80068ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068ae:	2300      	movs	r3, #0
 80068b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80068b6:	460b      	mov	r3, r1
 80068b8:	4313      	orrs	r3, r2
 80068ba:	d009      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80068bc:	4b77      	ldr	r3, [pc, #476]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068c0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80068c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ca:	4a74      	ldr	r2, [pc, #464]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068cc:	430b      	orrs	r3, r1
 80068ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80068dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80068de:	2300      	movs	r3, #0
 80068e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80068e6:	460b      	mov	r3, r1
 80068e8:	4313      	orrs	r3, r2
 80068ea:	d00a      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068ec:	4b6b      	ldr	r3, [pc, #428]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068fc:	4a67      	ldr	r2, [pc, #412]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068fe:	430b      	orrs	r3, r1
 8006900:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	2100      	movs	r1, #0
 800690c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006914:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006918:	460b      	mov	r3, r1
 800691a:	4313      	orrs	r3, r2
 800691c:	d011      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006922:	3308      	adds	r3, #8
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fb78 	bl	800701c <RCCEx_PLL2_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800693e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	2100      	movs	r1, #0
 800694c:	6239      	str	r1, [r7, #32]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	627b      	str	r3, [r7, #36]	@ 0x24
 8006954:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006958:	460b      	mov	r3, r1
 800695a:	4313      	orrs	r3, r2
 800695c:	d011      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006962:	3308      	adds	r3, #8
 8006964:	2101      	movs	r1, #1
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fb58 	bl	800701c <RCCEx_PLL2_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	2100      	movs	r1, #0
 800698c:	61b9      	str	r1, [r7, #24]
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006998:	460b      	mov	r3, r1
 800699a:	4313      	orrs	r3, r2
 800699c:	d011      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a2:	3308      	adds	r3, #8
 80069a4:	2102      	movs	r1, #2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fb38 	bl	800701c <RCCEx_PLL2_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80069c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	2100      	movs	r1, #0
 80069cc:	6139      	str	r1, [r7, #16]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80069d8:	460b      	mov	r3, r1
 80069da:	4313      	orrs	r3, r2
 80069dc:	d011      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e2:	3328      	adds	r3, #40	@ 0x28
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fbca 	bl	8007180 <RCCEx_PLL3_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80069f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	d011      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a22:	3328      	adds	r3, #40	@ 0x28
 8006a24:	2101      	movs	r1, #1
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fbaa 	bl	8007180 <RCCEx_PLL3_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6039      	str	r1, [r7, #0]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	607b      	str	r3, [r7, #4]
 8006a54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	d011      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a62:	3328      	adds	r3, #40	@ 0x28
 8006a64:	2102      	movs	r1, #2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 fb8a 	bl	8007180 <RCCEx_PLL3_Config>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006a82:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e000      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006a96:	46bd      	mov	sp, r7
 8006a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a9c:	58024400 	.word	0x58024400

08006aa0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006aa4:	f7fe fd54 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	091b      	lsrs	r3, r3, #4
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	4904      	ldr	r1, [pc, #16]	@ (8006ac8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ab6:	5ccb      	ldrb	r3, [r1, r3]
 8006ab8:	f003 031f 	and.w	r3, r3, #31
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	0802b0ec 	.word	0x0802b0ec

08006acc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b089      	sub	sp, #36	@ 0x24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ad4:	4ba1      	ldr	r3, [pc, #644]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006ade:	4b9f      	ldr	r3, [pc, #636]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae2:	0b1b      	lsrs	r3, r3, #12
 8006ae4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ae8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006aea:	4b9c      	ldr	r3, [pc, #624]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aee:	091b      	lsrs	r3, r3, #4
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006af6:	4b99      	ldr	r3, [pc, #612]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afa:	08db      	lsrs	r3, r3, #3
 8006afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	fb02 f303 	mul.w	r3, r2, r3
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8111 	beq.w	8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	f000 8083 	beq.w	8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	f200 80a1 	bhi.w	8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d056      	beq.n	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b36:	e099      	b.n	8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b38:	4b88      	ldr	r3, [pc, #544]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d02d      	beq.n	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b44:	4b85      	ldr	r3, [pc, #532]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	08db      	lsrs	r3, r3, #3
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	4a84      	ldr	r2, [pc, #528]	@ (8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b50:	fa22 f303 	lsr.w	r3, r2, r3
 8006b54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	ee07 3a90 	vmov	s15, r3
 8006b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b9e:	e087      	b.n	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be2:	e065      	b.n	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf6:	4b59      	ldr	r3, [pc, #356]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c26:	e043      	b.n	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3a:	4b48      	ldr	r3, [pc, #288]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c6a:	e021      	b.n	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c7e:	4b37      	ldr	r3, [pc, #220]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb4:	0a5b      	lsrs	r3, r3, #9
 8006cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd6:	ee17 2a90 	vmov	r2, s15
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006cde:	4b1f      	ldr	r3, [pc, #124]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce2:	0c1b      	lsrs	r3, r3, #16
 8006ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ce8:	ee07 3a90 	vmov	s15, r3
 8006cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d04:	ee17 2a90 	vmov	r2, s15
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d0c:	4b13      	ldr	r3, [pc, #76]	@ (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d10:	0e1b      	lsrs	r3, r3, #24
 8006d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d32:	ee17 2a90 	vmov	r2, s15
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d3a:	e008      	b.n	8006d4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	609a      	str	r2, [r3, #8]
}
 8006d4e:	bf00      	nop
 8006d50:	3724      	adds	r7, #36	@ 0x24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	58024400 	.word	0x58024400
 8006d60:	03d09000 	.word	0x03d09000
 8006d64:	46000000 	.word	0x46000000
 8006d68:	4c742400 	.word	0x4c742400
 8006d6c:	4a742400 	.word	0x4a742400
 8006d70:	4af42400 	.word	0x4af42400

08006d74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b089      	sub	sp, #36	@ 0x24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d7c:	4ba1      	ldr	r3, [pc, #644]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d86:	4b9f      	ldr	r3, [pc, #636]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8a:	0d1b      	lsrs	r3, r3, #20
 8006d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d92:	4b9c      	ldr	r3, [pc, #624]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	0a1b      	lsrs	r3, r3, #8
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d9e:	4b99      	ldr	r3, [pc, #612]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da2:	08db      	lsrs	r3, r3, #3
 8006da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	fb02 f303 	mul.w	r3, r2, r3
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8111 	beq.w	8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	f000 8083 	beq.w	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	f200 80a1 	bhi.w	8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d056      	beq.n	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006dde:	e099      	b.n	8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006de0:	4b88      	ldr	r3, [pc, #544]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d02d      	beq.n	8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dec:	4b85      	ldr	r3, [pc, #532]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	08db      	lsrs	r3, r3, #3
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	4a84      	ldr	r2, [pc, #528]	@ (8007008 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006df8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e16:	4b7b      	ldr	r3, [pc, #492]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800700c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e46:	e087      	b.n	8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007010 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800700c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e8a:	e065      	b.n	8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9e:	4b59      	ldr	r3, [pc, #356]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eb2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800700c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ece:	e043      	b.n	8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eda:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007018 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee2:	4b48      	ldr	r3, [pc, #288]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ef6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800700c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f12:	e021      	b.n	8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f26:	4b37      	ldr	r3, [pc, #220]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800700c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006f58:	4b2a      	ldr	r3, [pc, #168]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5c:	0a5b      	lsrs	r3, r3, #9
 8006f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f7e:	ee17 2a90 	vmov	r2, s15
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006f86:	4b1f      	ldr	r3, [pc, #124]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8a:	0c1b      	lsrs	r3, r3, #16
 8006f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f90:	ee07 3a90 	vmov	s15, r3
 8006f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fac:	ee17 2a90 	vmov	r2, s15
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006fb4:	4b13      	ldr	r3, [pc, #76]	@ (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb8:	0e1b      	lsrs	r3, r3, #24
 8006fba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fce:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fda:	ee17 2a90 	vmov	r2, s15
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	609a      	str	r2, [r3, #8]
}
 8006ff6:	bf00      	nop
 8006ff8:	3724      	adds	r7, #36	@ 0x24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	58024400 	.word	0x58024400
 8007008:	03d09000 	.word	0x03d09000
 800700c:	46000000 	.word	0x46000000
 8007010:	4c742400 	.word	0x4c742400
 8007014:	4a742400 	.word	0x4a742400
 8007018:	4af42400 	.word	0x4af42400

0800701c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800702a:	4b53      	ldr	r3, [pc, #332]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 800702c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	2b03      	cmp	r3, #3
 8007034:	d101      	bne.n	800703a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e099      	b.n	800716e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800703a:	4b4f      	ldr	r3, [pc, #316]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a4e      	ldr	r2, [pc, #312]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 8007040:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007046:	f7fb fe5b 	bl	8002d00 <HAL_GetTick>
 800704a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800704c:	e008      	b.n	8007060 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800704e:	f7fb fe57 	bl	8002d00 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e086      	b.n	800716e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007060:	4b45      	ldr	r3, [pc, #276]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1f0      	bne.n	800704e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800706c:	4b42      	ldr	r3, [pc, #264]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	031b      	lsls	r3, r3, #12
 800707a:	493f      	ldr	r1, [pc, #252]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 800707c:	4313      	orrs	r3, r2
 800707e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	3b01      	subs	r3, #1
 8007086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	3b01      	subs	r3, #1
 8007090:	025b      	lsls	r3, r3, #9
 8007092:	b29b      	uxth	r3, r3
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	3b01      	subs	r3, #1
 800709c:	041b      	lsls	r3, r3, #16
 800709e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	061b      	lsls	r3, r3, #24
 80070ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80070b0:	4931      	ldr	r1, [pc, #196]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80070b6:	4b30      	ldr	r3, [pc, #192]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 80070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	492d      	ldr	r1, [pc, #180]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80070c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070cc:	f023 0220 	bic.w	r2, r3, #32
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	4928      	ldr	r1, [pc, #160]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80070da:	4b27      	ldr	r3, [pc, #156]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070de:	4a26      	ldr	r2, [pc, #152]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 80070e0:	f023 0310 	bic.w	r3, r3, #16
 80070e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80070e6:	4b24      	ldr	r3, [pc, #144]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 80070e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070ea:	4b24      	ldr	r3, [pc, #144]	@ (800717c <RCCEx_PLL2_Config+0x160>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	69d2      	ldr	r2, [r2, #28]
 80070f2:	00d2      	lsls	r2, r2, #3
 80070f4:	4920      	ldr	r1, [pc, #128]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80070fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 8007100:	f043 0310 	orr.w	r3, r3, #16
 8007104:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d106      	bne.n	800711a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800710c:	4b1a      	ldr	r3, [pc, #104]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 800710e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007110:	4a19      	ldr	r2, [pc, #100]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 8007112:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007116:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007118:	e00f      	b.n	800713a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d106      	bne.n	800712e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007120:	4b15      	ldr	r3, [pc, #84]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 8007122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007124:	4a14      	ldr	r2, [pc, #80]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 8007126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800712a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800712c:	e005      	b.n	800713a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800712e:	4b12      	ldr	r3, [pc, #72]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	4a11      	ldr	r2, [pc, #68]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 8007134:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007138:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800713a:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a0e      	ldr	r2, [pc, #56]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 8007140:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007146:	f7fb fddb 	bl	8002d00 <HAL_GetTick>
 800714a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800714c:	e008      	b.n	8007160 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800714e:	f7fb fdd7 	bl	8002d00 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e006      	b.n	800716e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007160:	4b05      	ldr	r3, [pc, #20]	@ (8007178 <RCCEx_PLL2_Config+0x15c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0f0      	beq.n	800714e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	58024400 	.word	0x58024400
 800717c:	ffff0007 	.word	0xffff0007

08007180 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800718e:	4b53      	ldr	r3, [pc, #332]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	2b03      	cmp	r3, #3
 8007198:	d101      	bne.n	800719e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e099      	b.n	80072d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800719e:	4b4f      	ldr	r3, [pc, #316]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a4e      	ldr	r2, [pc, #312]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 80071a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071aa:	f7fb fda9 	bl	8002d00 <HAL_GetTick>
 80071ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071b0:	e008      	b.n	80071c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071b2:	f7fb fda5 	bl	8002d00 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d901      	bls.n	80071c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e086      	b.n	80072d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071c4:	4b45      	ldr	r3, [pc, #276]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1f0      	bne.n	80071b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80071d0:	4b42      	ldr	r3, [pc, #264]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 80071d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	051b      	lsls	r3, r3, #20
 80071de:	493f      	ldr	r1, [pc, #252]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	025b      	lsls	r3, r3, #9
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	3b01      	subs	r3, #1
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	3b01      	subs	r3, #1
 800720e:	061b      	lsls	r3, r3, #24
 8007210:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007214:	4931      	ldr	r1, [pc, #196]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007216:	4313      	orrs	r3, r2
 8007218:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800721a:	4b30      	ldr	r3, [pc, #192]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	492d      	ldr	r1, [pc, #180]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007228:	4313      	orrs	r3, r2
 800722a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800722c:	4b2b      	ldr	r3, [pc, #172]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	4928      	ldr	r1, [pc, #160]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 800723a:	4313      	orrs	r3, r2
 800723c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800723e:	4b27      	ldr	r3, [pc, #156]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007242:	4a26      	ldr	r2, [pc, #152]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007248:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800724a:	4b24      	ldr	r3, [pc, #144]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 800724c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800724e:	4b24      	ldr	r3, [pc, #144]	@ (80072e0 <RCCEx_PLL3_Config+0x160>)
 8007250:	4013      	ands	r3, r2
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	69d2      	ldr	r2, [r2, #28]
 8007256:	00d2      	lsls	r2, r2, #3
 8007258:	4920      	ldr	r1, [pc, #128]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 800725a:	4313      	orrs	r3, r2
 800725c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800725e:	4b1f      	ldr	r3, [pc, #124]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007262:	4a1e      	ldr	r2, [pc, #120]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007268:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d106      	bne.n	800727e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007270:	4b1a      	ldr	r3, [pc, #104]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007274:	4a19      	ldr	r2, [pc, #100]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007276:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800727a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800727c:	e00f      	b.n	800729e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d106      	bne.n	8007292 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007284:	4b15      	ldr	r3, [pc, #84]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007288:	4a14      	ldr	r2, [pc, #80]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 800728a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800728e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007290:	e005      	b.n	800729e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007292:	4b12      	ldr	r3, [pc, #72]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007296:	4a11      	ldr	r2, [pc, #68]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 8007298:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800729c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800729e:	4b0f      	ldr	r3, [pc, #60]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a0e      	ldr	r2, [pc, #56]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 80072a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072aa:	f7fb fd29 	bl	8002d00 <HAL_GetTick>
 80072ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072b0:	e008      	b.n	80072c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072b2:	f7fb fd25 	bl	8002d00 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e006      	b.n	80072d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <RCCEx_PLL3_Config+0x15c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	58024400 	.word	0x58024400
 80072e0:	ffff0007 	.word	0xffff0007

080072e4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e02b      	b.n	8007350 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7fa f9c1 	bl	8001694 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2202      	movs	r2, #2
 8007316:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3304      	adds	r3, #4
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f002 f8e7 	bl	80094f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6818      	ldr	r0, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	461a      	mov	r2, r3
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	f002 f93b 	bl	80095b0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800733a:	4b07      	ldr	r3, [pc, #28]	@ (8007358 <HAL_SDRAM_Init+0x74>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a06      	ldr	r2, [pc, #24]	@ (8007358 <HAL_SDRAM_Init+0x74>)
 8007340:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007344:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	52004000 	.word	0x52004000

0800735c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800736e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d101      	bne.n	800737a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007376:	2302      	movs	r3, #2
 8007378:	e021      	b.n	80073be <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d002      	beq.n	8007386 <HAL_SDRAM_SendCommand+0x2a>
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	2b05      	cmp	r3, #5
 8007384:	d118      	bne.n	80073b8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2202      	movs	r2, #2
 800738a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f002 f974 	bl	8009684 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d104      	bne.n	80073ae <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2205      	movs	r2, #5
 80073a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80073ac:	e006      	b.n	80073bc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80073b6:	e001      	b.n	80073bc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e000      	b.n	80073be <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d101      	bne.n	80073e0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80073dc:	2302      	movs	r3, #2
 80073de:	e016      	b.n	800740e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d10f      	bne.n	800740c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f002 f966 	bl	80096cc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	e000      	b.n	800740e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e049      	b.n	80074bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f841 	bl	80074c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3304      	adds	r3, #4
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f000 fb51 	bl	8007afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d001      	beq.n	80074f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e054      	b.n	800759a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0201 	orr.w	r2, r2, #1
 8007506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a26      	ldr	r2, [pc, #152]	@ (80075a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d022      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800751a:	d01d      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a22      	ldr	r2, [pc, #136]	@ (80075ac <HAL_TIM_Base_Start_IT+0xd4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d018      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a21      	ldr	r2, [pc, #132]	@ (80075b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d013      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1f      	ldr	r2, [pc, #124]	@ (80075b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00e      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1e      	ldr	r2, [pc, #120]	@ (80075b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d009      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1c      	ldr	r2, [pc, #112]	@ (80075bc <HAL_TIM_Base_Start_IT+0xe4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d004      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a1b      	ldr	r2, [pc, #108]	@ (80075c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d115      	bne.n	8007584 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	4b19      	ldr	r3, [pc, #100]	@ (80075c4 <HAL_TIM_Base_Start_IT+0xec>)
 8007560:	4013      	ands	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b06      	cmp	r3, #6
 8007568:	d015      	beq.n	8007596 <HAL_TIM_Base_Start_IT+0xbe>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007570:	d011      	beq.n	8007596 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 0201 	orr.w	r2, r2, #1
 8007580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007582:	e008      	b.n	8007596 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0201 	orr.w	r2, r2, #1
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	e000      	b.n	8007598 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007596:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40010000 	.word	0x40010000
 80075ac:	40000400 	.word	0x40000400
 80075b0:	40000800 	.word	0x40000800
 80075b4:	40000c00 	.word	0x40000c00
 80075b8:	40010400 	.word	0x40010400
 80075bc:	40001800 	.word	0x40001800
 80075c0:	40014000 	.word	0x40014000
 80075c4:	00010007 	.word	0x00010007

080075c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e049      	b.n	800766e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7fb f8a6 	bl	8002740 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f000 fa78 	bl	8007afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d020      	beq.n	80076da <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01b      	beq.n	80076da <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f06f 0202 	mvn.w	r2, #2
 80076aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	f003 0303 	and.w	r3, r3, #3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f9fd 	bl	8007ac0 <HAL_TIM_IC_CaptureCallback>
 80076c6:	e005      	b.n	80076d4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f9ef 	bl	8007aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa00 	bl	8007ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d020      	beq.n	8007726 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f003 0304 	and.w	r3, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01b      	beq.n	8007726 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f06f 0204 	mvn.w	r2, #4
 80076f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f9d7 	bl	8007ac0 <HAL_TIM_IC_CaptureCallback>
 8007712:	e005      	b.n	8007720 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f9c9 	bl	8007aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f9da 	bl	8007ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b00      	cmp	r3, #0
 800772e:	d020      	beq.n	8007772 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d01b      	beq.n	8007772 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f06f 0208 	mvn.w	r2, #8
 8007742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2204      	movs	r2, #4
 8007748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	f003 0303 	and.w	r3, r3, #3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f9b1 	bl	8007ac0 <HAL_TIM_IC_CaptureCallback>
 800775e:	e005      	b.n	800776c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f9a3 	bl	8007aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9b4 	bl	8007ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f003 0310 	and.w	r3, r3, #16
 8007778:	2b00      	cmp	r3, #0
 800777a:	d020      	beq.n	80077be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01b      	beq.n	80077be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f06f 0210 	mvn.w	r2, #16
 800778e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2208      	movs	r2, #8
 8007794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f98b 	bl	8007ac0 <HAL_TIM_IC_CaptureCallback>
 80077aa:	e005      	b.n	80077b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f97d 	bl	8007aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f98e 	bl	8007ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00c      	beq.n	80077e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d007      	beq.n	80077e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f06f 0201 	mvn.w	r2, #1
 80077da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7fa fd17 	bl	8002210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00c      	beq.n	8007810 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d007      	beq.n	8007810 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fd84 	bl	8008318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00c      	beq.n	8007834 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800782c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fd7c 	bl	800832c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00c      	beq.n	8007858 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007844:	2b00      	cmp	r3, #0
 8007846:	d007      	beq.n	8007858 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f948 	bl	8007ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00c      	beq.n	800787c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f003 0320 	and.w	r3, r3, #32
 8007868:	2b00      	cmp	r3, #0
 800786a:	d007      	beq.n	800787c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0220 	mvn.w	r2, #32
 8007874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fd44 	bl	8008304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800789e:	2302      	movs	r3, #2
 80078a0:	e0ff      	b.n	8007aa2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b14      	cmp	r3, #20
 80078ae:	f200 80f0 	bhi.w	8007a92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078b2:	a201      	add	r2, pc, #4	@ (adr r2, 80078b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	0800790d 	.word	0x0800790d
 80078bc:	08007a93 	.word	0x08007a93
 80078c0:	08007a93 	.word	0x08007a93
 80078c4:	08007a93 	.word	0x08007a93
 80078c8:	0800794d 	.word	0x0800794d
 80078cc:	08007a93 	.word	0x08007a93
 80078d0:	08007a93 	.word	0x08007a93
 80078d4:	08007a93 	.word	0x08007a93
 80078d8:	0800798f 	.word	0x0800798f
 80078dc:	08007a93 	.word	0x08007a93
 80078e0:	08007a93 	.word	0x08007a93
 80078e4:	08007a93 	.word	0x08007a93
 80078e8:	080079cf 	.word	0x080079cf
 80078ec:	08007a93 	.word	0x08007a93
 80078f0:	08007a93 	.word	0x08007a93
 80078f4:	08007a93 	.word	0x08007a93
 80078f8:	08007a11 	.word	0x08007a11
 80078fc:	08007a93 	.word	0x08007a93
 8007900:	08007a93 	.word	0x08007a93
 8007904:	08007a93 	.word	0x08007a93
 8007908:	08007a51 	.word	0x08007a51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68b9      	ldr	r1, [r7, #8]
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f992 	bl	8007c3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0208 	orr.w	r2, r2, #8
 8007926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0204 	bic.w	r2, r2, #4
 8007936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6999      	ldr	r1, [r3, #24]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	691a      	ldr	r2, [r3, #16]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	619a      	str	r2, [r3, #24]
      break;
 800794a:	e0a5      	b.n	8007a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fa02 	bl	8007d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	699a      	ldr	r2, [r3, #24]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699a      	ldr	r2, [r3, #24]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6999      	ldr	r1, [r3, #24]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	021a      	lsls	r2, r3, #8
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	619a      	str	r2, [r3, #24]
      break;
 800798c:	e084      	b.n	8007a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	4618      	mov	r0, r3
 8007996:	f000 fa6b 	bl	8007e70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69da      	ldr	r2, [r3, #28]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f042 0208 	orr.w	r2, r2, #8
 80079a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	69da      	ldr	r2, [r3, #28]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0204 	bic.w	r2, r2, #4
 80079b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	69d9      	ldr	r1, [r3, #28]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	691a      	ldr	r2, [r3, #16]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	61da      	str	r2, [r3, #28]
      break;
 80079cc:	e064      	b.n	8007a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fad3 	bl	8007f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69da      	ldr	r2, [r3, #28]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69da      	ldr	r2, [r3, #28]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69d9      	ldr	r1, [r3, #28]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	021a      	lsls	r2, r3, #8
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	61da      	str	r2, [r3, #28]
      break;
 8007a0e:	e043      	b.n	8007a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68b9      	ldr	r1, [r7, #8]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 fb1c 	bl	8008054 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0208 	orr.w	r2, r2, #8
 8007a2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0204 	bic.w	r2, r2, #4
 8007a3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	691a      	ldr	r2, [r3, #16]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a4e:	e023      	b.n	8007a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68b9      	ldr	r1, [r7, #8]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fb60 	bl	800811c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	021a      	lsls	r2, r3, #8
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a90:	e002      	b.n	8007a98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	75fb      	strb	r3, [r7, #23]
      break;
 8007a96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop

08007aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a43      	ldr	r2, [pc, #268]	@ (8007c1c <TIM_Base_SetConfig+0x120>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d013      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b1a:	d00f      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a40      	ldr	r2, [pc, #256]	@ (8007c20 <TIM_Base_SetConfig+0x124>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00b      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a3f      	ldr	r2, [pc, #252]	@ (8007c24 <TIM_Base_SetConfig+0x128>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d007      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8007c28 <TIM_Base_SetConfig+0x12c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a3d      	ldr	r2, [pc, #244]	@ (8007c2c <TIM_Base_SetConfig+0x130>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d108      	bne.n	8007b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a32      	ldr	r2, [pc, #200]	@ (8007c1c <TIM_Base_SetConfig+0x120>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d01f      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b5c:	d01b      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a2f      	ldr	r2, [pc, #188]	@ (8007c20 <TIM_Base_SetConfig+0x124>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d017      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a2e      	ldr	r2, [pc, #184]	@ (8007c24 <TIM_Base_SetConfig+0x128>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a2d      	ldr	r2, [pc, #180]	@ (8007c28 <TIM_Base_SetConfig+0x12c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00f      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a2c      	ldr	r2, [pc, #176]	@ (8007c2c <TIM_Base_SetConfig+0x130>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00b      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a2b      	ldr	r2, [pc, #172]	@ (8007c30 <TIM_Base_SetConfig+0x134>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d007      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a2a      	ldr	r2, [pc, #168]	@ (8007c34 <TIM_Base_SetConfig+0x138>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d003      	beq.n	8007b96 <TIM_Base_SetConfig+0x9a>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a29      	ldr	r2, [pc, #164]	@ (8007c38 <TIM_Base_SetConfig+0x13c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d108      	bne.n	8007ba8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a14      	ldr	r2, [pc, #80]	@ (8007c1c <TIM_Base_SetConfig+0x120>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00f      	beq.n	8007bee <TIM_Base_SetConfig+0xf2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a16      	ldr	r2, [pc, #88]	@ (8007c2c <TIM_Base_SetConfig+0x130>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00b      	beq.n	8007bee <TIM_Base_SetConfig+0xf2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a15      	ldr	r2, [pc, #84]	@ (8007c30 <TIM_Base_SetConfig+0x134>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d007      	beq.n	8007bee <TIM_Base_SetConfig+0xf2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a14      	ldr	r2, [pc, #80]	@ (8007c34 <TIM_Base_SetConfig+0x138>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d003      	beq.n	8007bee <TIM_Base_SetConfig+0xf2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a13      	ldr	r2, [pc, #76]	@ (8007c38 <TIM_Base_SetConfig+0x13c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d103      	bne.n	8007bf6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f043 0204 	orr.w	r2, r3, #4
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	601a      	str	r2, [r3, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	40010000 	.word	0x40010000
 8007c20:	40000400 	.word	0x40000400
 8007c24:	40000800 	.word	0x40000800
 8007c28:	40000c00 	.word	0x40000c00
 8007c2c:	40010400 	.word	0x40010400
 8007c30:	40014000 	.word	0x40014000
 8007c34:	40014400 	.word	0x40014400
 8007c38:	40014800 	.word	0x40014800

08007c3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f023 0201 	bic.w	r2, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4b37      	ldr	r3, [pc, #220]	@ (8007d44 <TIM_OC1_SetConfig+0x108>)
 8007c68:	4013      	ands	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f023 0302 	bic.w	r3, r3, #2
 8007c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a2d      	ldr	r2, [pc, #180]	@ (8007d48 <TIM_OC1_SetConfig+0x10c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00f      	beq.n	8007cb8 <TIM_OC1_SetConfig+0x7c>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8007d4c <TIM_OC1_SetConfig+0x110>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00b      	beq.n	8007cb8 <TIM_OC1_SetConfig+0x7c>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8007d50 <TIM_OC1_SetConfig+0x114>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d007      	beq.n	8007cb8 <TIM_OC1_SetConfig+0x7c>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a2a      	ldr	r2, [pc, #168]	@ (8007d54 <TIM_OC1_SetConfig+0x118>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_OC1_SetConfig+0x7c>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a29      	ldr	r2, [pc, #164]	@ (8007d58 <TIM_OC1_SetConfig+0x11c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d10c      	bne.n	8007cd2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f023 0308 	bic.w	r3, r3, #8
 8007cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f023 0304 	bic.w	r3, r3, #4
 8007cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d48 <TIM_OC1_SetConfig+0x10c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00f      	beq.n	8007cfa <TIM_OC1_SetConfig+0xbe>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8007d4c <TIM_OC1_SetConfig+0x110>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00b      	beq.n	8007cfa <TIM_OC1_SetConfig+0xbe>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8007d50 <TIM_OC1_SetConfig+0x114>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d007      	beq.n	8007cfa <TIM_OC1_SetConfig+0xbe>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a19      	ldr	r2, [pc, #100]	@ (8007d54 <TIM_OC1_SetConfig+0x118>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d003      	beq.n	8007cfa <TIM_OC1_SetConfig+0xbe>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a18      	ldr	r2, [pc, #96]	@ (8007d58 <TIM_OC1_SetConfig+0x11c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d111      	bne.n	8007d1e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	621a      	str	r2, [r3, #32]
}
 8007d38:	bf00      	nop
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	fffeff8f 	.word	0xfffeff8f
 8007d48:	40010000 	.word	0x40010000
 8007d4c:	40010400 	.word	0x40010400
 8007d50:	40014000 	.word	0x40014000
 8007d54:	40014400 	.word	0x40014400
 8007d58:	40014800 	.word	0x40014800

08007d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	f023 0210 	bic.w	r2, r3, #16
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	4b34      	ldr	r3, [pc, #208]	@ (8007e58 <TIM_OC2_SetConfig+0xfc>)
 8007d88:	4013      	ands	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f023 0320 	bic.w	r3, r3, #32
 8007da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a29      	ldr	r2, [pc, #164]	@ (8007e5c <TIM_OC2_SetConfig+0x100>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_OC2_SetConfig+0x68>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a28      	ldr	r2, [pc, #160]	@ (8007e60 <TIM_OC2_SetConfig+0x104>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d10d      	bne.n	8007de0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a1e      	ldr	r2, [pc, #120]	@ (8007e5c <TIM_OC2_SetConfig+0x100>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d00f      	beq.n	8007e08 <TIM_OC2_SetConfig+0xac>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a1d      	ldr	r2, [pc, #116]	@ (8007e60 <TIM_OC2_SetConfig+0x104>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00b      	beq.n	8007e08 <TIM_OC2_SetConfig+0xac>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a1c      	ldr	r2, [pc, #112]	@ (8007e64 <TIM_OC2_SetConfig+0x108>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d007      	beq.n	8007e08 <TIM_OC2_SetConfig+0xac>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8007e68 <TIM_OC2_SetConfig+0x10c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d003      	beq.n	8007e08 <TIM_OC2_SetConfig+0xac>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a1a      	ldr	r2, [pc, #104]	@ (8007e6c <TIM_OC2_SetConfig+0x110>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d113      	bne.n	8007e30 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	621a      	str	r2, [r3, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	feff8fff 	.word	0xfeff8fff
 8007e5c:	40010000 	.word	0x40010000
 8007e60:	40010400 	.word	0x40010400
 8007e64:	40014000 	.word	0x40014000
 8007e68:	40014400 	.word	0x40014400
 8007e6c:	40014800 	.word	0x40014800

08007e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4b33      	ldr	r3, [pc, #204]	@ (8007f68 <TIM_OC3_SetConfig+0xf8>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	021b      	lsls	r3, r3, #8
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a28      	ldr	r2, [pc, #160]	@ (8007f6c <TIM_OC3_SetConfig+0xfc>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d003      	beq.n	8007ed6 <TIM_OC3_SetConfig+0x66>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a27      	ldr	r2, [pc, #156]	@ (8007f70 <TIM_OC3_SetConfig+0x100>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d10d      	bne.n	8007ef2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	021b      	lsls	r3, r3, #8
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f6c <TIM_OC3_SetConfig+0xfc>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d00f      	beq.n	8007f1a <TIM_OC3_SetConfig+0xaa>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a1c      	ldr	r2, [pc, #112]	@ (8007f70 <TIM_OC3_SetConfig+0x100>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00b      	beq.n	8007f1a <TIM_OC3_SetConfig+0xaa>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a1b      	ldr	r2, [pc, #108]	@ (8007f74 <TIM_OC3_SetConfig+0x104>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d007      	beq.n	8007f1a <TIM_OC3_SetConfig+0xaa>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8007f78 <TIM_OC3_SetConfig+0x108>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d003      	beq.n	8007f1a <TIM_OC3_SetConfig+0xaa>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a19      	ldr	r2, [pc, #100]	@ (8007f7c <TIM_OC3_SetConfig+0x10c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d113      	bne.n	8007f42 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	621a      	str	r2, [r3, #32]
}
 8007f5c:	bf00      	nop
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	fffeff8f 	.word	0xfffeff8f
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40010400 	.word	0x40010400
 8007f74:	40014000 	.word	0x40014000
 8007f78:	40014400 	.word	0x40014400
 8007f7c:	40014800 	.word	0x40014800

08007f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4b24      	ldr	r3, [pc, #144]	@ (800803c <TIM_OC4_SetConfig+0xbc>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	031b      	lsls	r3, r3, #12
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a19      	ldr	r2, [pc, #100]	@ (8008040 <TIM_OC4_SetConfig+0xc0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00f      	beq.n	8008000 <TIM_OC4_SetConfig+0x80>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a18      	ldr	r2, [pc, #96]	@ (8008044 <TIM_OC4_SetConfig+0xc4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00b      	beq.n	8008000 <TIM_OC4_SetConfig+0x80>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a17      	ldr	r2, [pc, #92]	@ (8008048 <TIM_OC4_SetConfig+0xc8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d007      	beq.n	8008000 <TIM_OC4_SetConfig+0x80>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a16      	ldr	r2, [pc, #88]	@ (800804c <TIM_OC4_SetConfig+0xcc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d003      	beq.n	8008000 <TIM_OC4_SetConfig+0x80>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a15      	ldr	r2, [pc, #84]	@ (8008050 <TIM_OC4_SetConfig+0xd0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d109      	bne.n	8008014 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	019b      	lsls	r3, r3, #6
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	621a      	str	r2, [r3, #32]
}
 800802e:	bf00      	nop
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	feff8fff 	.word	0xfeff8fff
 8008040:	40010000 	.word	0x40010000
 8008044:	40010400 	.word	0x40010400
 8008048:	40014000 	.word	0x40014000
 800804c:	40014400 	.word	0x40014400
 8008050:	40014800 	.word	0x40014800

08008054 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	4b21      	ldr	r3, [pc, #132]	@ (8008104 <TIM_OC5_SetConfig+0xb0>)
 8008080:	4013      	ands	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008094:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a18      	ldr	r2, [pc, #96]	@ (8008108 <TIM_OC5_SetConfig+0xb4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00f      	beq.n	80080ca <TIM_OC5_SetConfig+0x76>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a17      	ldr	r2, [pc, #92]	@ (800810c <TIM_OC5_SetConfig+0xb8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00b      	beq.n	80080ca <TIM_OC5_SetConfig+0x76>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a16      	ldr	r2, [pc, #88]	@ (8008110 <TIM_OC5_SetConfig+0xbc>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d007      	beq.n	80080ca <TIM_OC5_SetConfig+0x76>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a15      	ldr	r2, [pc, #84]	@ (8008114 <TIM_OC5_SetConfig+0xc0>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d003      	beq.n	80080ca <TIM_OC5_SetConfig+0x76>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a14      	ldr	r2, [pc, #80]	@ (8008118 <TIM_OC5_SetConfig+0xc4>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d109      	bne.n	80080de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	621a      	str	r2, [r3, #32]
}
 80080f8:	bf00      	nop
 80080fa:	371c      	adds	r7, #28
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	fffeff8f 	.word	0xfffeff8f
 8008108:	40010000 	.word	0x40010000
 800810c:	40010400 	.word	0x40010400
 8008110:	40014000 	.word	0x40014000
 8008114:	40014400 	.word	0x40014400
 8008118:	40014800 	.word	0x40014800

0800811c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	4b22      	ldr	r3, [pc, #136]	@ (80081d0 <TIM_OC6_SetConfig+0xb4>)
 8008148:	4013      	ands	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800815e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	051b      	lsls	r3, r3, #20
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a19      	ldr	r2, [pc, #100]	@ (80081d4 <TIM_OC6_SetConfig+0xb8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d00f      	beq.n	8008194 <TIM_OC6_SetConfig+0x78>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a18      	ldr	r2, [pc, #96]	@ (80081d8 <TIM_OC6_SetConfig+0xbc>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00b      	beq.n	8008194 <TIM_OC6_SetConfig+0x78>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a17      	ldr	r2, [pc, #92]	@ (80081dc <TIM_OC6_SetConfig+0xc0>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d007      	beq.n	8008194 <TIM_OC6_SetConfig+0x78>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a16      	ldr	r2, [pc, #88]	@ (80081e0 <TIM_OC6_SetConfig+0xc4>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d003      	beq.n	8008194 <TIM_OC6_SetConfig+0x78>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a15      	ldr	r2, [pc, #84]	@ (80081e4 <TIM_OC6_SetConfig+0xc8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d109      	bne.n	80081a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800819a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	029b      	lsls	r3, r3, #10
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	621a      	str	r2, [r3, #32]
}
 80081c2:	bf00      	nop
 80081c4:	371c      	adds	r7, #28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	feff8fff 	.word	0xfeff8fff
 80081d4:	40010000 	.word	0x40010000
 80081d8:	40010400 	.word	0x40010400
 80081dc:	40014000 	.word	0x40014000
 80081e0:	40014400 	.word	0x40014400
 80081e4:	40014800 	.word	0x40014800

080081e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d101      	bne.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e06d      	b.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a30      	ldr	r2, [pc, #192]	@ (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d004      	beq.n	8008234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a2f      	ldr	r2, [pc, #188]	@ (80082ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d108      	bne.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800823a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800824c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a20      	ldr	r2, [pc, #128]	@ (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d022      	beq.n	80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008272:	d01d      	beq.n	80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1d      	ldr	r2, [pc, #116]	@ (80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d018      	beq.n	80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1c      	ldr	r2, [pc, #112]	@ (80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d013      	beq.n	80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a1a      	ldr	r2, [pc, #104]	@ (80082f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00e      	beq.n	80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a15      	ldr	r2, [pc, #84]	@ (80082ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d009      	beq.n	80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a16      	ldr	r2, [pc, #88]	@ (80082fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d004      	beq.n	80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a15      	ldr	r2, [pc, #84]	@ (8008300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d10c      	bne.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	40010000 	.word	0x40010000
 80082ec:	40010400 	.word	0x40010400
 80082f0:	40000400 	.word	0x40000400
 80082f4:	40000800 	.word	0x40000800
 80082f8:	40000c00 	.word	0x40000c00
 80082fc:	40001800 	.word	0x40001800
 8008300:	40014000 	.word	0x40014000

08008304 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e042      	b.n	80083d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008358:	2b00      	cmp	r3, #0
 800835a:	d106      	bne.n	800836a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7fa fa8f 	bl	8002888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2224      	movs	r2, #36	@ 0x24
 800836e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0201 	bic.w	r2, r2, #1
 8008380:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fd90 	bl	8008eb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f825 	bl	80083e0 <UART_SetConfig>
 8008396:	4603      	mov	r3, r0
 8008398:	2b01      	cmp	r3, #1
 800839a:	d101      	bne.n	80083a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e01b      	b.n	80083d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689a      	ldr	r2, [r3, #8]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0201 	orr.w	r2, r2, #1
 80083ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fe0f 	bl	8008ff4 <UART_CheckIdleState>
 80083d6:	4603      	mov	r3, r0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083e4:	b092      	sub	sp, #72	@ 0x48
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	431a      	orrs	r2, r3
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	431a      	orrs	r2, r3
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	4313      	orrs	r3, r2
 8008406:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	4bbe      	ldr	r3, [pc, #760]	@ (8008708 <UART_SetConfig+0x328>)
 8008410:	4013      	ands	r3, r2
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008418:	430b      	orrs	r3, r1
 800841a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	430a      	orrs	r2, r1
 8008430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4ab3      	ldr	r2, [pc, #716]	@ (800870c <UART_SetConfig+0x32c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d004      	beq.n	800844c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008448:	4313      	orrs	r3, r2
 800844a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	4baf      	ldr	r3, [pc, #700]	@ (8008710 <UART_SetConfig+0x330>)
 8008454:	4013      	ands	r3, r2
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	6812      	ldr	r2, [r2, #0]
 800845a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800845c:	430b      	orrs	r3, r1
 800845e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008466:	f023 010f 	bic.w	r1, r3, #15
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4aa6      	ldr	r2, [pc, #664]	@ (8008714 <UART_SetConfig+0x334>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d177      	bne.n	8008570 <UART_SetConfig+0x190>
 8008480:	4ba5      	ldr	r3, [pc, #660]	@ (8008718 <UART_SetConfig+0x338>)
 8008482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008488:	2b28      	cmp	r3, #40	@ 0x28
 800848a:	d86d      	bhi.n	8008568 <UART_SetConfig+0x188>
 800848c:	a201      	add	r2, pc, #4	@ (adr r2, 8008494 <UART_SetConfig+0xb4>)
 800848e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008492:	bf00      	nop
 8008494:	08008539 	.word	0x08008539
 8008498:	08008569 	.word	0x08008569
 800849c:	08008569 	.word	0x08008569
 80084a0:	08008569 	.word	0x08008569
 80084a4:	08008569 	.word	0x08008569
 80084a8:	08008569 	.word	0x08008569
 80084ac:	08008569 	.word	0x08008569
 80084b0:	08008569 	.word	0x08008569
 80084b4:	08008541 	.word	0x08008541
 80084b8:	08008569 	.word	0x08008569
 80084bc:	08008569 	.word	0x08008569
 80084c0:	08008569 	.word	0x08008569
 80084c4:	08008569 	.word	0x08008569
 80084c8:	08008569 	.word	0x08008569
 80084cc:	08008569 	.word	0x08008569
 80084d0:	08008569 	.word	0x08008569
 80084d4:	08008549 	.word	0x08008549
 80084d8:	08008569 	.word	0x08008569
 80084dc:	08008569 	.word	0x08008569
 80084e0:	08008569 	.word	0x08008569
 80084e4:	08008569 	.word	0x08008569
 80084e8:	08008569 	.word	0x08008569
 80084ec:	08008569 	.word	0x08008569
 80084f0:	08008569 	.word	0x08008569
 80084f4:	08008551 	.word	0x08008551
 80084f8:	08008569 	.word	0x08008569
 80084fc:	08008569 	.word	0x08008569
 8008500:	08008569 	.word	0x08008569
 8008504:	08008569 	.word	0x08008569
 8008508:	08008569 	.word	0x08008569
 800850c:	08008569 	.word	0x08008569
 8008510:	08008569 	.word	0x08008569
 8008514:	08008559 	.word	0x08008559
 8008518:	08008569 	.word	0x08008569
 800851c:	08008569 	.word	0x08008569
 8008520:	08008569 	.word	0x08008569
 8008524:	08008569 	.word	0x08008569
 8008528:	08008569 	.word	0x08008569
 800852c:	08008569 	.word	0x08008569
 8008530:	08008569 	.word	0x08008569
 8008534:	08008561 	.word	0x08008561
 8008538:	2301      	movs	r3, #1
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853e:	e222      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008540:	2304      	movs	r3, #4
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008546:	e21e      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008548:	2308      	movs	r3, #8
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854e:	e21a      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008550:	2310      	movs	r3, #16
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008556:	e216      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008558:	2320      	movs	r3, #32
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855e:	e212      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008560:	2340      	movs	r3, #64	@ 0x40
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008566:	e20e      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008568:	2380      	movs	r3, #128	@ 0x80
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856e:	e20a      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a69      	ldr	r2, [pc, #420]	@ (800871c <UART_SetConfig+0x33c>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d130      	bne.n	80085dc <UART_SetConfig+0x1fc>
 800857a:	4b67      	ldr	r3, [pc, #412]	@ (8008718 <UART_SetConfig+0x338>)
 800857c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	2b05      	cmp	r3, #5
 8008584:	d826      	bhi.n	80085d4 <UART_SetConfig+0x1f4>
 8008586:	a201      	add	r2, pc, #4	@ (adr r2, 800858c <UART_SetConfig+0x1ac>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	080085a5 	.word	0x080085a5
 8008590:	080085ad 	.word	0x080085ad
 8008594:	080085b5 	.word	0x080085b5
 8008598:	080085bd 	.word	0x080085bd
 800859c:	080085c5 	.word	0x080085c5
 80085a0:	080085cd 	.word	0x080085cd
 80085a4:	2300      	movs	r3, #0
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e1ec      	b.n	8008986 <UART_SetConfig+0x5a6>
 80085ac:	2304      	movs	r3, #4
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e1e8      	b.n	8008986 <UART_SetConfig+0x5a6>
 80085b4:	2308      	movs	r3, #8
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ba:	e1e4      	b.n	8008986 <UART_SetConfig+0x5a6>
 80085bc:	2310      	movs	r3, #16
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c2:	e1e0      	b.n	8008986 <UART_SetConfig+0x5a6>
 80085c4:	2320      	movs	r3, #32
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ca:	e1dc      	b.n	8008986 <UART_SetConfig+0x5a6>
 80085cc:	2340      	movs	r3, #64	@ 0x40
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085d2:	e1d8      	b.n	8008986 <UART_SetConfig+0x5a6>
 80085d4:	2380      	movs	r3, #128	@ 0x80
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085da:	e1d4      	b.n	8008986 <UART_SetConfig+0x5a6>
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a4f      	ldr	r2, [pc, #316]	@ (8008720 <UART_SetConfig+0x340>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d130      	bne.n	8008648 <UART_SetConfig+0x268>
 80085e6:	4b4c      	ldr	r3, [pc, #304]	@ (8008718 <UART_SetConfig+0x338>)
 80085e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	2b05      	cmp	r3, #5
 80085f0:	d826      	bhi.n	8008640 <UART_SetConfig+0x260>
 80085f2:	a201      	add	r2, pc, #4	@ (adr r2, 80085f8 <UART_SetConfig+0x218>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008611 	.word	0x08008611
 80085fc:	08008619 	.word	0x08008619
 8008600:	08008621 	.word	0x08008621
 8008604:	08008629 	.word	0x08008629
 8008608:	08008631 	.word	0x08008631
 800860c:	08008639 	.word	0x08008639
 8008610:	2300      	movs	r3, #0
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008616:	e1b6      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008618:	2304      	movs	r3, #4
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861e:	e1b2      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008620:	2308      	movs	r3, #8
 8008622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008626:	e1ae      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008628:	2310      	movs	r3, #16
 800862a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862e:	e1aa      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008630:	2320      	movs	r3, #32
 8008632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008636:	e1a6      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008638:	2340      	movs	r3, #64	@ 0x40
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863e:	e1a2      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008640:	2380      	movs	r3, #128	@ 0x80
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008646:	e19e      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a35      	ldr	r2, [pc, #212]	@ (8008724 <UART_SetConfig+0x344>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d130      	bne.n	80086b4 <UART_SetConfig+0x2d4>
 8008652:	4b31      	ldr	r3, [pc, #196]	@ (8008718 <UART_SetConfig+0x338>)
 8008654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	2b05      	cmp	r3, #5
 800865c:	d826      	bhi.n	80086ac <UART_SetConfig+0x2cc>
 800865e:	a201      	add	r2, pc, #4	@ (adr r2, 8008664 <UART_SetConfig+0x284>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	0800867d 	.word	0x0800867d
 8008668:	08008685 	.word	0x08008685
 800866c:	0800868d 	.word	0x0800868d
 8008670:	08008695 	.word	0x08008695
 8008674:	0800869d 	.word	0x0800869d
 8008678:	080086a5 	.word	0x080086a5
 800867c:	2300      	movs	r3, #0
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008682:	e180      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008684:	2304      	movs	r3, #4
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868a:	e17c      	b.n	8008986 <UART_SetConfig+0x5a6>
 800868c:	2308      	movs	r3, #8
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008692:	e178      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008694:	2310      	movs	r3, #16
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869a:	e174      	b.n	8008986 <UART_SetConfig+0x5a6>
 800869c:	2320      	movs	r3, #32
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a2:	e170      	b.n	8008986 <UART_SetConfig+0x5a6>
 80086a4:	2340      	movs	r3, #64	@ 0x40
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086aa:	e16c      	b.n	8008986 <UART_SetConfig+0x5a6>
 80086ac:	2380      	movs	r3, #128	@ 0x80
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b2:	e168      	b.n	8008986 <UART_SetConfig+0x5a6>
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008728 <UART_SetConfig+0x348>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d142      	bne.n	8008744 <UART_SetConfig+0x364>
 80086be:	4b16      	ldr	r3, [pc, #88]	@ (8008718 <UART_SetConfig+0x338>)
 80086c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	d838      	bhi.n	800873c <UART_SetConfig+0x35c>
 80086ca:	a201      	add	r2, pc, #4	@ (adr r2, 80086d0 <UART_SetConfig+0x2f0>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	080086e9 	.word	0x080086e9
 80086d4:	080086f1 	.word	0x080086f1
 80086d8:	080086f9 	.word	0x080086f9
 80086dc:	08008701 	.word	0x08008701
 80086e0:	0800872d 	.word	0x0800872d
 80086e4:	08008735 	.word	0x08008735
 80086e8:	2300      	movs	r3, #0
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ee:	e14a      	b.n	8008986 <UART_SetConfig+0x5a6>
 80086f0:	2304      	movs	r3, #4
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f6:	e146      	b.n	8008986 <UART_SetConfig+0x5a6>
 80086f8:	2308      	movs	r3, #8
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fe:	e142      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008700:	2310      	movs	r3, #16
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e13e      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008708:	cfff69f3 	.word	0xcfff69f3
 800870c:	58000c00 	.word	0x58000c00
 8008710:	11fff4ff 	.word	0x11fff4ff
 8008714:	40011000 	.word	0x40011000
 8008718:	58024400 	.word	0x58024400
 800871c:	40004400 	.word	0x40004400
 8008720:	40004800 	.word	0x40004800
 8008724:	40004c00 	.word	0x40004c00
 8008728:	40005000 	.word	0x40005000
 800872c:	2320      	movs	r3, #32
 800872e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008732:	e128      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008734:	2340      	movs	r3, #64	@ 0x40
 8008736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873a:	e124      	b.n	8008986 <UART_SetConfig+0x5a6>
 800873c:	2380      	movs	r3, #128	@ 0x80
 800873e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008742:	e120      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4acb      	ldr	r2, [pc, #812]	@ (8008a78 <UART_SetConfig+0x698>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d176      	bne.n	800883c <UART_SetConfig+0x45c>
 800874e:	4bcb      	ldr	r3, [pc, #812]	@ (8008a7c <UART_SetConfig+0x69c>)
 8008750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008756:	2b28      	cmp	r3, #40	@ 0x28
 8008758:	d86c      	bhi.n	8008834 <UART_SetConfig+0x454>
 800875a:	a201      	add	r2, pc, #4	@ (adr r2, 8008760 <UART_SetConfig+0x380>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008805 	.word	0x08008805
 8008764:	08008835 	.word	0x08008835
 8008768:	08008835 	.word	0x08008835
 800876c:	08008835 	.word	0x08008835
 8008770:	08008835 	.word	0x08008835
 8008774:	08008835 	.word	0x08008835
 8008778:	08008835 	.word	0x08008835
 800877c:	08008835 	.word	0x08008835
 8008780:	0800880d 	.word	0x0800880d
 8008784:	08008835 	.word	0x08008835
 8008788:	08008835 	.word	0x08008835
 800878c:	08008835 	.word	0x08008835
 8008790:	08008835 	.word	0x08008835
 8008794:	08008835 	.word	0x08008835
 8008798:	08008835 	.word	0x08008835
 800879c:	08008835 	.word	0x08008835
 80087a0:	08008815 	.word	0x08008815
 80087a4:	08008835 	.word	0x08008835
 80087a8:	08008835 	.word	0x08008835
 80087ac:	08008835 	.word	0x08008835
 80087b0:	08008835 	.word	0x08008835
 80087b4:	08008835 	.word	0x08008835
 80087b8:	08008835 	.word	0x08008835
 80087bc:	08008835 	.word	0x08008835
 80087c0:	0800881d 	.word	0x0800881d
 80087c4:	08008835 	.word	0x08008835
 80087c8:	08008835 	.word	0x08008835
 80087cc:	08008835 	.word	0x08008835
 80087d0:	08008835 	.word	0x08008835
 80087d4:	08008835 	.word	0x08008835
 80087d8:	08008835 	.word	0x08008835
 80087dc:	08008835 	.word	0x08008835
 80087e0:	08008825 	.word	0x08008825
 80087e4:	08008835 	.word	0x08008835
 80087e8:	08008835 	.word	0x08008835
 80087ec:	08008835 	.word	0x08008835
 80087f0:	08008835 	.word	0x08008835
 80087f4:	08008835 	.word	0x08008835
 80087f8:	08008835 	.word	0x08008835
 80087fc:	08008835 	.word	0x08008835
 8008800:	0800882d 	.word	0x0800882d
 8008804:	2301      	movs	r3, #1
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880a:	e0bc      	b.n	8008986 <UART_SetConfig+0x5a6>
 800880c:	2304      	movs	r3, #4
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008812:	e0b8      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008814:	2308      	movs	r3, #8
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881a:	e0b4      	b.n	8008986 <UART_SetConfig+0x5a6>
 800881c:	2310      	movs	r3, #16
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008822:	e0b0      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008824:	2320      	movs	r3, #32
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800882a:	e0ac      	b.n	8008986 <UART_SetConfig+0x5a6>
 800882c:	2340      	movs	r3, #64	@ 0x40
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008832:	e0a8      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008834:	2380      	movs	r3, #128	@ 0x80
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883a:	e0a4      	b.n	8008986 <UART_SetConfig+0x5a6>
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a8f      	ldr	r2, [pc, #572]	@ (8008a80 <UART_SetConfig+0x6a0>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d130      	bne.n	80088a8 <UART_SetConfig+0x4c8>
 8008846:	4b8d      	ldr	r3, [pc, #564]	@ (8008a7c <UART_SetConfig+0x69c>)
 8008848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	2b05      	cmp	r3, #5
 8008850:	d826      	bhi.n	80088a0 <UART_SetConfig+0x4c0>
 8008852:	a201      	add	r2, pc, #4	@ (adr r2, 8008858 <UART_SetConfig+0x478>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	08008871 	.word	0x08008871
 800885c:	08008879 	.word	0x08008879
 8008860:	08008881 	.word	0x08008881
 8008864:	08008889 	.word	0x08008889
 8008868:	08008891 	.word	0x08008891
 800886c:	08008899 	.word	0x08008899
 8008870:	2300      	movs	r3, #0
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008876:	e086      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008878:	2304      	movs	r3, #4
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887e:	e082      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008880:	2308      	movs	r3, #8
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008886:	e07e      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008888:	2310      	movs	r3, #16
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888e:	e07a      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008890:	2320      	movs	r3, #32
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008896:	e076      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008898:	2340      	movs	r3, #64	@ 0x40
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889e:	e072      	b.n	8008986 <UART_SetConfig+0x5a6>
 80088a0:	2380      	movs	r3, #128	@ 0x80
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a6:	e06e      	b.n	8008986 <UART_SetConfig+0x5a6>
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a75      	ldr	r2, [pc, #468]	@ (8008a84 <UART_SetConfig+0x6a4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d130      	bne.n	8008914 <UART_SetConfig+0x534>
 80088b2:	4b72      	ldr	r3, [pc, #456]	@ (8008a7c <UART_SetConfig+0x69c>)
 80088b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	d826      	bhi.n	800890c <UART_SetConfig+0x52c>
 80088be:	a201      	add	r2, pc, #4	@ (adr r2, 80088c4 <UART_SetConfig+0x4e4>)
 80088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c4:	080088dd 	.word	0x080088dd
 80088c8:	080088e5 	.word	0x080088e5
 80088cc:	080088ed 	.word	0x080088ed
 80088d0:	080088f5 	.word	0x080088f5
 80088d4:	080088fd 	.word	0x080088fd
 80088d8:	08008905 	.word	0x08008905
 80088dc:	2300      	movs	r3, #0
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e050      	b.n	8008986 <UART_SetConfig+0x5a6>
 80088e4:	2304      	movs	r3, #4
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e04c      	b.n	8008986 <UART_SetConfig+0x5a6>
 80088ec:	2308      	movs	r3, #8
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e048      	b.n	8008986 <UART_SetConfig+0x5a6>
 80088f4:	2310      	movs	r3, #16
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e044      	b.n	8008986 <UART_SetConfig+0x5a6>
 80088fc:	2320      	movs	r3, #32
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e040      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008904:	2340      	movs	r3, #64	@ 0x40
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e03c      	b.n	8008986 <UART_SetConfig+0x5a6>
 800890c:	2380      	movs	r3, #128	@ 0x80
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e038      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a5b      	ldr	r2, [pc, #364]	@ (8008a88 <UART_SetConfig+0x6a8>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d130      	bne.n	8008980 <UART_SetConfig+0x5a0>
 800891e:	4b57      	ldr	r3, [pc, #348]	@ (8008a7c <UART_SetConfig+0x69c>)
 8008920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	2b05      	cmp	r3, #5
 8008928:	d826      	bhi.n	8008978 <UART_SetConfig+0x598>
 800892a:	a201      	add	r2, pc, #4	@ (adr r2, 8008930 <UART_SetConfig+0x550>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	08008949 	.word	0x08008949
 8008934:	08008951 	.word	0x08008951
 8008938:	08008959 	.word	0x08008959
 800893c:	08008961 	.word	0x08008961
 8008940:	08008969 	.word	0x08008969
 8008944:	08008971 	.word	0x08008971
 8008948:	2302      	movs	r3, #2
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894e:	e01a      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008950:	2304      	movs	r3, #4
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e016      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008958:	2308      	movs	r3, #8
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895e:	e012      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008960:	2310      	movs	r3, #16
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e00e      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008968:	2320      	movs	r3, #32
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e00a      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008970:	2340      	movs	r3, #64	@ 0x40
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e006      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008978:	2380      	movs	r3, #128	@ 0x80
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e002      	b.n	8008986 <UART_SetConfig+0x5a6>
 8008980:	2380      	movs	r3, #128	@ 0x80
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a3f      	ldr	r2, [pc, #252]	@ (8008a88 <UART_SetConfig+0x6a8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	f040 80f8 	bne.w	8008b82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008992:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008996:	2b20      	cmp	r3, #32
 8008998:	dc46      	bgt.n	8008a28 <UART_SetConfig+0x648>
 800899a:	2b02      	cmp	r3, #2
 800899c:	f2c0 8082 	blt.w	8008aa4 <UART_SetConfig+0x6c4>
 80089a0:	3b02      	subs	r3, #2
 80089a2:	2b1e      	cmp	r3, #30
 80089a4:	d87e      	bhi.n	8008aa4 <UART_SetConfig+0x6c4>
 80089a6:	a201      	add	r2, pc, #4	@ (adr r2, 80089ac <UART_SetConfig+0x5cc>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	08008a2f 	.word	0x08008a2f
 80089b0:	08008aa5 	.word	0x08008aa5
 80089b4:	08008a37 	.word	0x08008a37
 80089b8:	08008aa5 	.word	0x08008aa5
 80089bc:	08008aa5 	.word	0x08008aa5
 80089c0:	08008aa5 	.word	0x08008aa5
 80089c4:	08008a47 	.word	0x08008a47
 80089c8:	08008aa5 	.word	0x08008aa5
 80089cc:	08008aa5 	.word	0x08008aa5
 80089d0:	08008aa5 	.word	0x08008aa5
 80089d4:	08008aa5 	.word	0x08008aa5
 80089d8:	08008aa5 	.word	0x08008aa5
 80089dc:	08008aa5 	.word	0x08008aa5
 80089e0:	08008aa5 	.word	0x08008aa5
 80089e4:	08008a57 	.word	0x08008a57
 80089e8:	08008aa5 	.word	0x08008aa5
 80089ec:	08008aa5 	.word	0x08008aa5
 80089f0:	08008aa5 	.word	0x08008aa5
 80089f4:	08008aa5 	.word	0x08008aa5
 80089f8:	08008aa5 	.word	0x08008aa5
 80089fc:	08008aa5 	.word	0x08008aa5
 8008a00:	08008aa5 	.word	0x08008aa5
 8008a04:	08008aa5 	.word	0x08008aa5
 8008a08:	08008aa5 	.word	0x08008aa5
 8008a0c:	08008aa5 	.word	0x08008aa5
 8008a10:	08008aa5 	.word	0x08008aa5
 8008a14:	08008aa5 	.word	0x08008aa5
 8008a18:	08008aa5 	.word	0x08008aa5
 8008a1c:	08008aa5 	.word	0x08008aa5
 8008a20:	08008aa5 	.word	0x08008aa5
 8008a24:	08008a97 	.word	0x08008a97
 8008a28:	2b40      	cmp	r3, #64	@ 0x40
 8008a2a:	d037      	beq.n	8008a9c <UART_SetConfig+0x6bc>
 8008a2c:	e03a      	b.n	8008aa4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a2e:	f7fe f837 	bl	8006aa0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a34:	e03c      	b.n	8008ab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fe f846 	bl	8006acc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a44:	e034      	b.n	8008ab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a46:	f107 0318 	add.w	r3, r7, #24
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe f992 	bl	8006d74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a54:	e02c      	b.n	8008ab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a56:	4b09      	ldr	r3, [pc, #36]	@ (8008a7c <UART_SetConfig+0x69c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0320 	and.w	r3, r3, #32
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d016      	beq.n	8008a90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a62:	4b06      	ldr	r3, [pc, #24]	@ (8008a7c <UART_SetConfig+0x69c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	08db      	lsrs	r3, r3, #3
 8008a68:	f003 0303 	and.w	r3, r3, #3
 8008a6c:	4a07      	ldr	r2, [pc, #28]	@ (8008a8c <UART_SetConfig+0x6ac>)
 8008a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a74:	e01c      	b.n	8008ab0 <UART_SetConfig+0x6d0>
 8008a76:	bf00      	nop
 8008a78:	40011400 	.word	0x40011400
 8008a7c:	58024400 	.word	0x58024400
 8008a80:	40007800 	.word	0x40007800
 8008a84:	40007c00 	.word	0x40007c00
 8008a88:	58000c00 	.word	0x58000c00
 8008a8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008a90:	4b9d      	ldr	r3, [pc, #628]	@ (8008d08 <UART_SetConfig+0x928>)
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a94:	e00c      	b.n	8008ab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a96:	4b9d      	ldr	r3, [pc, #628]	@ (8008d0c <UART_SetConfig+0x92c>)
 8008a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a9a:	e009      	b.n	8008ab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa2:	e005      	b.n	8008ab0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008aae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 81de 	beq.w	8008e74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008abc:	4a94      	ldr	r2, [pc, #592]	@ (8008d10 <UART_SetConfig+0x930>)
 8008abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ac6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	4413      	add	r3, r2
 8008ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d305      	bcc.n	8008ae8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d903      	bls.n	8008af0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008aee:	e1c1      	b.n	8008e74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af2:	2200      	movs	r2, #0
 8008af4:	60bb      	str	r3, [r7, #8]
 8008af6:	60fa      	str	r2, [r7, #12]
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afc:	4a84      	ldr	r2, [pc, #528]	@ (8008d10 <UART_SetConfig+0x930>)
 8008afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	2200      	movs	r2, #0
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b12:	f7f7 fdf1 	bl	80006f8 <__aeabi_uldivmod>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	f04f 0200 	mov.w	r2, #0
 8008b22:	f04f 0300 	mov.w	r3, #0
 8008b26:	020b      	lsls	r3, r1, #8
 8008b28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b2c:	0202      	lsls	r2, r0, #8
 8008b2e:	6979      	ldr	r1, [r7, #20]
 8008b30:	6849      	ldr	r1, [r1, #4]
 8008b32:	0849      	lsrs	r1, r1, #1
 8008b34:	2000      	movs	r0, #0
 8008b36:	460c      	mov	r4, r1
 8008b38:	4605      	mov	r5, r0
 8008b3a:	eb12 0804 	adds.w	r8, r2, r4
 8008b3e:	eb43 0905 	adc.w	r9, r3, r5
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	469a      	mov	sl, r3
 8008b4a:	4693      	mov	fp, r2
 8008b4c:	4652      	mov	r2, sl
 8008b4e:	465b      	mov	r3, fp
 8008b50:	4640      	mov	r0, r8
 8008b52:	4649      	mov	r1, r9
 8008b54:	f7f7 fdd0 	bl	80006f8 <__aeabi_uldivmod>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b66:	d308      	bcc.n	8008b7a <UART_SetConfig+0x79a>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b6e:	d204      	bcs.n	8008b7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b76:	60da      	str	r2, [r3, #12]
 8008b78:	e17c      	b.n	8008e74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b80:	e178      	b.n	8008e74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b8a:	f040 80c5 	bne.w	8008d18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008b8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	dc48      	bgt.n	8008c28 <UART_SetConfig+0x848>
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	db7b      	blt.n	8008c92 <UART_SetConfig+0x8b2>
 8008b9a:	2b20      	cmp	r3, #32
 8008b9c:	d879      	bhi.n	8008c92 <UART_SetConfig+0x8b2>
 8008b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <UART_SetConfig+0x7c4>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008c2f 	.word	0x08008c2f
 8008ba8:	08008c37 	.word	0x08008c37
 8008bac:	08008c93 	.word	0x08008c93
 8008bb0:	08008c93 	.word	0x08008c93
 8008bb4:	08008c3f 	.word	0x08008c3f
 8008bb8:	08008c93 	.word	0x08008c93
 8008bbc:	08008c93 	.word	0x08008c93
 8008bc0:	08008c93 	.word	0x08008c93
 8008bc4:	08008c4f 	.word	0x08008c4f
 8008bc8:	08008c93 	.word	0x08008c93
 8008bcc:	08008c93 	.word	0x08008c93
 8008bd0:	08008c93 	.word	0x08008c93
 8008bd4:	08008c93 	.word	0x08008c93
 8008bd8:	08008c93 	.word	0x08008c93
 8008bdc:	08008c93 	.word	0x08008c93
 8008be0:	08008c93 	.word	0x08008c93
 8008be4:	08008c5f 	.word	0x08008c5f
 8008be8:	08008c93 	.word	0x08008c93
 8008bec:	08008c93 	.word	0x08008c93
 8008bf0:	08008c93 	.word	0x08008c93
 8008bf4:	08008c93 	.word	0x08008c93
 8008bf8:	08008c93 	.word	0x08008c93
 8008bfc:	08008c93 	.word	0x08008c93
 8008c00:	08008c93 	.word	0x08008c93
 8008c04:	08008c93 	.word	0x08008c93
 8008c08:	08008c93 	.word	0x08008c93
 8008c0c:	08008c93 	.word	0x08008c93
 8008c10:	08008c93 	.word	0x08008c93
 8008c14:	08008c93 	.word	0x08008c93
 8008c18:	08008c93 	.word	0x08008c93
 8008c1c:	08008c93 	.word	0x08008c93
 8008c20:	08008c93 	.word	0x08008c93
 8008c24:	08008c85 	.word	0x08008c85
 8008c28:	2b40      	cmp	r3, #64	@ 0x40
 8008c2a:	d02e      	beq.n	8008c8a <UART_SetConfig+0x8aa>
 8008c2c:	e031      	b.n	8008c92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c2e:	f7fc fcbf 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 8008c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c34:	e033      	b.n	8008c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c36:	f7fc fcd1 	bl	80055dc <HAL_RCC_GetPCLK2Freq>
 8008c3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c3c:	e02f      	b.n	8008c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fd ff42 	bl	8006acc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c4c:	e027      	b.n	8008c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c4e:	f107 0318 	add.w	r3, r7, #24
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fe f88e 	bl	8006d74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c5c:	e01f      	b.n	8008c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8008d14 <UART_SetConfig+0x934>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0320 	and.w	r3, r3, #32
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d009      	beq.n	8008c7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8008d14 <UART_SetConfig+0x934>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	08db      	lsrs	r3, r3, #3
 8008c70:	f003 0303 	and.w	r3, r3, #3
 8008c74:	4a24      	ldr	r2, [pc, #144]	@ (8008d08 <UART_SetConfig+0x928>)
 8008c76:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c7c:	e00f      	b.n	8008c9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008c7e:	4b22      	ldr	r3, [pc, #136]	@ (8008d08 <UART_SetConfig+0x928>)
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c82:	e00c      	b.n	8008c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c84:	4b21      	ldr	r3, [pc, #132]	@ (8008d0c <UART_SetConfig+0x92c>)
 8008c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c88:	e009      	b.n	8008c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c90:	e005      	b.n	8008c9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 80e7 	beq.w	8008e74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008caa:	4a19      	ldr	r2, [pc, #100]	@ (8008d10 <UART_SetConfig+0x930>)
 8008cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cb8:	005a      	lsls	r2, r3, #1
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	085b      	lsrs	r3, r3, #1
 8008cc0:	441a      	add	r2, r3
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	2b0f      	cmp	r3, #15
 8008cd0:	d916      	bls.n	8008d00 <UART_SetConfig+0x920>
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cd8:	d212      	bcs.n	8008d00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f023 030f 	bic.w	r3, r3, #15
 8008ce2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	085b      	lsrs	r3, r3, #1
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008cfc:	60da      	str	r2, [r3, #12]
 8008cfe:	e0b9      	b.n	8008e74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008d06:	e0b5      	b.n	8008e74 <UART_SetConfig+0xa94>
 8008d08:	03d09000 	.word	0x03d09000
 8008d0c:	003d0900 	.word	0x003d0900
 8008d10:	0802b0fc 	.word	0x0802b0fc
 8008d14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	dc49      	bgt.n	8008db4 <UART_SetConfig+0x9d4>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	db7c      	blt.n	8008e1e <UART_SetConfig+0xa3e>
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	d87a      	bhi.n	8008e1e <UART_SetConfig+0xa3e>
 8008d28:	a201      	add	r2, pc, #4	@ (adr r2, 8008d30 <UART_SetConfig+0x950>)
 8008d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2e:	bf00      	nop
 8008d30:	08008dbb 	.word	0x08008dbb
 8008d34:	08008dc3 	.word	0x08008dc3
 8008d38:	08008e1f 	.word	0x08008e1f
 8008d3c:	08008e1f 	.word	0x08008e1f
 8008d40:	08008dcb 	.word	0x08008dcb
 8008d44:	08008e1f 	.word	0x08008e1f
 8008d48:	08008e1f 	.word	0x08008e1f
 8008d4c:	08008e1f 	.word	0x08008e1f
 8008d50:	08008ddb 	.word	0x08008ddb
 8008d54:	08008e1f 	.word	0x08008e1f
 8008d58:	08008e1f 	.word	0x08008e1f
 8008d5c:	08008e1f 	.word	0x08008e1f
 8008d60:	08008e1f 	.word	0x08008e1f
 8008d64:	08008e1f 	.word	0x08008e1f
 8008d68:	08008e1f 	.word	0x08008e1f
 8008d6c:	08008e1f 	.word	0x08008e1f
 8008d70:	08008deb 	.word	0x08008deb
 8008d74:	08008e1f 	.word	0x08008e1f
 8008d78:	08008e1f 	.word	0x08008e1f
 8008d7c:	08008e1f 	.word	0x08008e1f
 8008d80:	08008e1f 	.word	0x08008e1f
 8008d84:	08008e1f 	.word	0x08008e1f
 8008d88:	08008e1f 	.word	0x08008e1f
 8008d8c:	08008e1f 	.word	0x08008e1f
 8008d90:	08008e1f 	.word	0x08008e1f
 8008d94:	08008e1f 	.word	0x08008e1f
 8008d98:	08008e1f 	.word	0x08008e1f
 8008d9c:	08008e1f 	.word	0x08008e1f
 8008da0:	08008e1f 	.word	0x08008e1f
 8008da4:	08008e1f 	.word	0x08008e1f
 8008da8:	08008e1f 	.word	0x08008e1f
 8008dac:	08008e1f 	.word	0x08008e1f
 8008db0:	08008e11 	.word	0x08008e11
 8008db4:	2b40      	cmp	r3, #64	@ 0x40
 8008db6:	d02e      	beq.n	8008e16 <UART_SetConfig+0xa36>
 8008db8:	e031      	b.n	8008e1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dba:	f7fc fbf9 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 8008dbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008dc0:	e033      	b.n	8008e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dc2:	f7fc fc0b 	bl	80055dc <HAL_RCC_GetPCLK2Freq>
 8008dc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008dc8:	e02f      	b.n	8008e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fd fe7c 	bl	8006acc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd8:	e027      	b.n	8008e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dda:	f107 0318 	add.w	r3, r7, #24
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fd ffc8 	bl	8006d74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de8:	e01f      	b.n	8008e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dea:	4b2d      	ldr	r3, [pc, #180]	@ (8008ea0 <UART_SetConfig+0xac0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d009      	beq.n	8008e0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008df6:	4b2a      	ldr	r3, [pc, #168]	@ (8008ea0 <UART_SetConfig+0xac0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	08db      	lsrs	r3, r3, #3
 8008dfc:	f003 0303 	and.w	r3, r3, #3
 8008e00:	4a28      	ldr	r2, [pc, #160]	@ (8008ea4 <UART_SetConfig+0xac4>)
 8008e02:	fa22 f303 	lsr.w	r3, r2, r3
 8008e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e08:	e00f      	b.n	8008e2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008e0a:	4b26      	ldr	r3, [pc, #152]	@ (8008ea4 <UART_SetConfig+0xac4>)
 8008e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e0e:	e00c      	b.n	8008e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e10:	4b25      	ldr	r3, [pc, #148]	@ (8008ea8 <UART_SetConfig+0xac8>)
 8008e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e14:	e009      	b.n	8008e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e1c:	e005      	b.n	8008e2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e28:	bf00      	nop
    }

    if (pclk != 0U)
 8008e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d021      	beq.n	8008e74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e34:	4a1d      	ldr	r2, [pc, #116]	@ (8008eac <UART_SetConfig+0xacc>)
 8008e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	085b      	lsrs	r3, r3, #1
 8008e48:	441a      	add	r2, r3
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e56:	2b0f      	cmp	r3, #15
 8008e58:	d909      	bls.n	8008e6e <UART_SetConfig+0xa8e>
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e60:	d205      	bcs.n	8008e6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60da      	str	r2, [r3, #12]
 8008e6c:	e002      	b.n	8008e74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2200      	movs	r2, #0
 8008e88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e90:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3748      	adds	r7, #72	@ 0x48
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e9e:	bf00      	nop
 8008ea0:	58024400 	.word	0x58024400
 8008ea4:	03d09000 	.word	0x03d09000
 8008ea8:	003d0900 	.word	0x003d0900
 8008eac:	0802b0fc 	.word	0x0802b0fc

08008eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebc:	f003 0308 	and.w	r3, r3, #8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00a      	beq.n	8008f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f22:	f003 0304 	and.w	r3, r3, #4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f44:	f003 0310 	and.w	r3, r3, #16
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f66:	f003 0320 	and.w	r3, r3, #32
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d01a      	beq.n	8008fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fae:	d10a      	bne.n	8008fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	605a      	str	r2, [r3, #4]
  }
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b098      	sub	sp, #96	@ 0x60
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009004:	f7f9 fe7c 	bl	8002d00 <HAL_GetTick>
 8009008:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b08      	cmp	r3, #8
 8009016:	d12f      	bne.n	8009078 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009020:	2200      	movs	r2, #0
 8009022:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f88e 	bl	8009148 <UART_WaitOnFlagUntilTimeout>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d022      	beq.n	8009078 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009046:	653b      	str	r3, [r7, #80]	@ 0x50
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009050:	647b      	str	r3, [r7, #68]	@ 0x44
 8009052:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800905e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e6      	bne.n	8009032 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e063      	b.n	8009140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0304 	and.w	r3, r3, #4
 8009082:	2b04      	cmp	r3, #4
 8009084:	d149      	bne.n	800911a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009086:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800908e:	2200      	movs	r2, #0
 8009090:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f857 	bl	8009148 <UART_WaitOnFlagUntilTimeout>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d03c      	beq.n	800911a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	623b      	str	r3, [r7, #32]
   return(result);
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090be:	633b      	str	r3, [r7, #48]	@ 0x30
 80090c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e6      	bne.n	80090a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3308      	adds	r3, #8
 80090d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f023 0301 	bic.w	r3, r3, #1
 80090e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3308      	adds	r3, #8
 80090f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090f2:	61fa      	str	r2, [r7, #28]
 80090f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	69b9      	ldr	r1, [r7, #24]
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e5      	bne.n	80090d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e012      	b.n	8009140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3758      	adds	r7, #88	@ 0x58
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	4613      	mov	r3, r2
 8009156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009158:	e04f      	b.n	80091fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d04b      	beq.n	80091fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009162:	f7f9 fdcd 	bl	8002d00 <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	429a      	cmp	r2, r3
 8009170:	d302      	bcc.n	8009178 <UART_WaitOnFlagUntilTimeout+0x30>
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e04e      	b.n	800921a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0304 	and.w	r3, r3, #4
 8009186:	2b00      	cmp	r3, #0
 8009188:	d037      	beq.n	80091fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b80      	cmp	r3, #128	@ 0x80
 800918e:	d034      	beq.n	80091fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2b40      	cmp	r3, #64	@ 0x40
 8009194:	d031      	beq.n	80091fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	f003 0308 	and.w	r3, r3, #8
 80091a0:	2b08      	cmp	r3, #8
 80091a2:	d110      	bne.n	80091c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2208      	movs	r2, #8
 80091aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 f839 	bl	8009224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2208      	movs	r2, #8
 80091b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e029      	b.n	800921a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091d4:	d111      	bne.n	80091fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 f81f 	bl	8009224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2220      	movs	r2, #32
 80091ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e00f      	b.n	800921a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	69da      	ldr	r2, [r3, #28]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4013      	ands	r3, r2
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	429a      	cmp	r2, r3
 8009208:	bf0c      	ite	eq
 800920a:	2301      	moveq	r3, #1
 800920c:	2300      	movne	r3, #0
 800920e:	b2db      	uxtb	r3, r3
 8009210:	461a      	mov	r2, r3
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	429a      	cmp	r2, r3
 8009216:	d0a0      	beq.n	800915a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009224:	b480      	push	{r7}
 8009226:	b095      	sub	sp, #84	@ 0x54
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800924a:	643b      	str	r3, [r7, #64]	@ 0x40
 800924c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009250:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009252:	e841 2300 	strex	r3, r2, [r1]
 8009256:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e6      	bne.n	800922c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3308      	adds	r3, #8
 8009264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	61fb      	str	r3, [r7, #28]
   return(result);
 800926e:	69fa      	ldr	r2, [r7, #28]
 8009270:	4b1e      	ldr	r3, [pc, #120]	@ (80092ec <UART_EndRxTransfer+0xc8>)
 8009272:	4013      	ands	r3, r2
 8009274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3308      	adds	r3, #8
 800927c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800927e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009280:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009286:	e841 2300 	strex	r3, r2, [r1]
 800928a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800928c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1e5      	bne.n	800925e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009296:	2b01      	cmp	r3, #1
 8009298:	d118      	bne.n	80092cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f023 0310 	bic.w	r3, r3, #16
 80092ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092b8:	61bb      	str	r3, [r7, #24]
 80092ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092bc:	6979      	ldr	r1, [r7, #20]
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	613b      	str	r3, [r7, #16]
   return(result);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e6      	bne.n	800929a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2220      	movs	r2, #32
 80092d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80092e0:	bf00      	nop
 80092e2:	3754      	adds	r7, #84	@ 0x54
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	effffffe 	.word	0xeffffffe

080092f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_UARTEx_DisableFifoMode+0x16>
 8009302:	2302      	movs	r3, #2
 8009304:	e027      	b.n	8009356 <HAL_UARTEx_DisableFifoMode+0x66>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2224      	movs	r2, #36	@ 0x24
 8009312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0201 	bic.w	r2, r2, #1
 800932c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009334:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2220      	movs	r2, #32
 8009348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009372:	2b01      	cmp	r3, #1
 8009374:	d101      	bne.n	800937a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009376:	2302      	movs	r3, #2
 8009378:	e02d      	b.n	80093d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2224      	movs	r2, #36	@ 0x24
 8009386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 0201 	bic.w	r2, r2, #1
 80093a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f850 	bl	800945c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d101      	bne.n	80093f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093f2:	2302      	movs	r3, #2
 80093f4:	e02d      	b.n	8009452 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2224      	movs	r2, #36	@ 0x24
 8009402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f022 0201 	bic.w	r2, r2, #1
 800941c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f812 	bl	800945c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2220      	movs	r2, #32
 8009444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009468:	2b00      	cmp	r3, #0
 800946a:	d108      	bne.n	800947e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800947c:	e031      	b.n	80094e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800947e:	2310      	movs	r3, #16
 8009480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009482:	2310      	movs	r3, #16
 8009484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	0e5b      	lsrs	r3, r3, #25
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	0f5b      	lsrs	r3, r3, #29
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	f003 0307 	and.w	r3, r3, #7
 80094a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	7b3a      	ldrb	r2, [r7, #12]
 80094aa:	4911      	ldr	r1, [pc, #68]	@ (80094f0 <UARTEx_SetNbDataToProcess+0x94>)
 80094ac:	5c8a      	ldrb	r2, [r1, r2]
 80094ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094b2:	7b3a      	ldrb	r2, [r7, #12]
 80094b4:	490f      	ldr	r1, [pc, #60]	@ (80094f4 <UARTEx_SetNbDataToProcess+0x98>)
 80094b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	7b7a      	ldrb	r2, [r7, #13]
 80094c8:	4909      	ldr	r1, [pc, #36]	@ (80094f0 <UARTEx_SetNbDataToProcess+0x94>)
 80094ca:	5c8a      	ldrb	r2, [r1, r2]
 80094cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094d0:	7b7a      	ldrb	r2, [r7, #13]
 80094d2:	4908      	ldr	r1, [pc, #32]	@ (80094f4 <UARTEx_SetNbDataToProcess+0x98>)
 80094d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80094da:	b29a      	uxth	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094e2:	bf00      	nop
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	0802b114 	.word	0x0802b114
 80094f4:	0802b11c 	.word	0x0802b11c

080094f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d121      	bne.n	800954e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	4b27      	ldr	r3, [pc, #156]	@ (80095ac <FMC_SDRAM_Init+0xb4>)
 8009510:	4013      	ands	r3, r2
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	6851      	ldr	r1, [r2, #4]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	6892      	ldr	r2, [r2, #8]
 800951a:	4311      	orrs	r1, r2
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	68d2      	ldr	r2, [r2, #12]
 8009520:	4311      	orrs	r1, r2
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	6912      	ldr	r2, [r2, #16]
 8009526:	4311      	orrs	r1, r2
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	6952      	ldr	r2, [r2, #20]
 800952c:	4311      	orrs	r1, r2
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	6992      	ldr	r2, [r2, #24]
 8009532:	4311      	orrs	r1, r2
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	69d2      	ldr	r2, [r2, #28]
 8009538:	4311      	orrs	r1, r2
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	6a12      	ldr	r2, [r2, #32]
 800953e:	4311      	orrs	r1, r2
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009544:	430a      	orrs	r2, r1
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	e026      	b.n	800959c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	69d9      	ldr	r1, [r3, #28]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	4319      	orrs	r1, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009564:	430b      	orrs	r3, r1
 8009566:	431a      	orrs	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	4b0e      	ldr	r3, [pc, #56]	@ (80095ac <FMC_SDRAM_Init+0xb4>)
 8009572:	4013      	ands	r3, r2
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	6851      	ldr	r1, [r2, #4]
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	6892      	ldr	r2, [r2, #8]
 800957c:	4311      	orrs	r1, r2
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	68d2      	ldr	r2, [r2, #12]
 8009582:	4311      	orrs	r1, r2
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	6912      	ldr	r2, [r2, #16]
 8009588:	4311      	orrs	r1, r2
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	6952      	ldr	r2, [r2, #20]
 800958e:	4311      	orrs	r1, r2
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	6992      	ldr	r2, [r2, #24]
 8009594:	430a      	orrs	r2, r1
 8009596:	431a      	orrs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	ffff8000 	.word	0xffff8000

080095b0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d128      	bne.n	8009614 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	1e59      	subs	r1, r3, #1
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	011b      	lsls	r3, r3, #4
 80095d8:	4319      	orrs	r1, r3
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	3b01      	subs	r3, #1
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	4319      	orrs	r1, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	031b      	lsls	r3, r3, #12
 80095ec:	4319      	orrs	r1, r3
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	041b      	lsls	r3, r3, #16
 80095f6:	4319      	orrs	r1, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	051b      	lsls	r3, r3, #20
 8009600:	4319      	orrs	r1, r3
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	3b01      	subs	r3, #1
 8009608:	061b      	lsls	r3, r3, #24
 800960a:	430b      	orrs	r3, r1
 800960c:	431a      	orrs	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	609a      	str	r2, [r3, #8]
 8009612:	e02d      	b.n	8009670 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	689a      	ldr	r2, [r3, #8]
 8009618:	4b19      	ldr	r3, [pc, #100]	@ (8009680 <FMC_SDRAM_Timing_Init+0xd0>)
 800961a:	4013      	ands	r3, r2
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	68d2      	ldr	r2, [r2, #12]
 8009620:	3a01      	subs	r2, #1
 8009622:	0311      	lsls	r1, r2, #12
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	6952      	ldr	r2, [r2, #20]
 8009628:	3a01      	subs	r2, #1
 800962a:	0512      	lsls	r2, r2, #20
 800962c:	430a      	orrs	r2, r1
 800962e:	431a      	orrs	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	1e59      	subs	r1, r3, #1
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	3b01      	subs	r3, #1
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	4319      	orrs	r1, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	3b01      	subs	r3, #1
 8009652:	021b      	lsls	r3, r3, #8
 8009654:	4319      	orrs	r1, r3
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	3b01      	subs	r3, #1
 800965c:	041b      	lsls	r3, r3, #16
 800965e:	4319      	orrs	r1, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	3b01      	subs	r3, #1
 8009666:	061b      	lsls	r3, r3, #24
 8009668:	430b      	orrs	r3, r1
 800966a:	431a      	orrs	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	ff0f0fff 	.word	0xff0f0fff

08009684 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	4b0c      	ldr	r3, [pc, #48]	@ (80096c8 <FMC_SDRAM_SendCommand+0x44>)
 8009696:	4013      	ands	r3, r2
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	6811      	ldr	r1, [r2, #0]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	6852      	ldr	r2, [r2, #4]
 80096a0:	4311      	orrs	r1, r2
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	6892      	ldr	r2, [r2, #8]
 80096a6:	3a01      	subs	r2, #1
 80096a8:	0152      	lsls	r2, r2, #5
 80096aa:	4311      	orrs	r1, r2
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	68d2      	ldr	r2, [r2, #12]
 80096b0:	0252      	lsls	r2, r2, #9
 80096b2:	430a      	orrs	r2, r1
 80096b4:	431a      	orrs	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	ffc00000 	.word	0xffc00000

080096cc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	695a      	ldr	r2, [r3, #20]
 80096da:	4b07      	ldr	r3, [pc, #28]	@ (80096f8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80096dc:	4013      	ands	r3, r2
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	0052      	lsls	r2, r2, #1
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	ffffc001 	.word	0xffffc001

080096fc <__NVIC_SetPriority>:
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	6039      	str	r1, [r7, #0]
 8009706:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800970c:	2b00      	cmp	r3, #0
 800970e:	db0a      	blt.n	8009726 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	b2da      	uxtb	r2, r3
 8009714:	490c      	ldr	r1, [pc, #48]	@ (8009748 <__NVIC_SetPriority+0x4c>)
 8009716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800971a:	0112      	lsls	r2, r2, #4
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	440b      	add	r3, r1
 8009720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009724:	e00a      	b.n	800973c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	b2da      	uxtb	r2, r3
 800972a:	4908      	ldr	r1, [pc, #32]	@ (800974c <__NVIC_SetPriority+0x50>)
 800972c:	88fb      	ldrh	r3, [r7, #6]
 800972e:	f003 030f 	and.w	r3, r3, #15
 8009732:	3b04      	subs	r3, #4
 8009734:	0112      	lsls	r2, r2, #4
 8009736:	b2d2      	uxtb	r2, r2
 8009738:	440b      	add	r3, r1
 800973a:	761a      	strb	r2, [r3, #24]
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	e000e100 	.word	0xe000e100
 800974c:	e000ed00 	.word	0xe000ed00

08009750 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009750:	b580      	push	{r7, lr}
 8009752:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009754:	4b05      	ldr	r3, [pc, #20]	@ (800976c <SysTick_Handler+0x1c>)
 8009756:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009758:	f002 fac8 	bl	800bcec <xTaskGetSchedulerState>
 800975c:	4603      	mov	r3, r0
 800975e:	2b01      	cmp	r3, #1
 8009760:	d001      	beq.n	8009766 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009762:	f003 f9c1 	bl	800cae8 <xPortSysTickHandler>
  }
}
 8009766:	bf00      	nop
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	e000e010 	.word	0xe000e010

08009770 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009770:	b580      	push	{r7, lr}
 8009772:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009774:	2100      	movs	r1, #0
 8009776:	f06f 0004 	mvn.w	r0, #4
 800977a:	f7ff ffbf 	bl	80096fc <__NVIC_SetPriority>
#endif
}
 800977e:	bf00      	nop
 8009780:	bd80      	pop	{r7, pc}
	...

08009784 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800978a:	f3ef 8305 	mrs	r3, IPSR
 800978e:	603b      	str	r3, [r7, #0]
  return(result);
 8009790:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009796:	f06f 0305 	mvn.w	r3, #5
 800979a:	607b      	str	r3, [r7, #4]
 800979c:	e00c      	b.n	80097b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800979e:	4b0a      	ldr	r3, [pc, #40]	@ (80097c8 <osKernelInitialize+0x44>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d105      	bne.n	80097b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097a6:	4b08      	ldr	r3, [pc, #32]	@ (80097c8 <osKernelInitialize+0x44>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	607b      	str	r3, [r7, #4]
 80097b0:	e002      	b.n	80097b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80097b2:	f04f 33ff 	mov.w	r3, #4294967295
 80097b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097b8:	687b      	ldr	r3, [r7, #4]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	2400065c 	.word	0x2400065c

080097cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097d2:	f3ef 8305 	mrs	r3, IPSR
 80097d6:	603b      	str	r3, [r7, #0]
  return(result);
 80097d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80097de:	f06f 0305 	mvn.w	r3, #5
 80097e2:	607b      	str	r3, [r7, #4]
 80097e4:	e010      	b.n	8009808 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <osKernelStart+0x48>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d109      	bne.n	8009802 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80097ee:	f7ff ffbf 	bl	8009770 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80097f2:	4b08      	ldr	r3, [pc, #32]	@ (8009814 <osKernelStart+0x48>)
 80097f4:	2202      	movs	r2, #2
 80097f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80097f8:	f001 fe14 	bl	800b424 <vTaskStartScheduler>
      stat = osOK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	607b      	str	r3, [r7, #4]
 8009800:	e002      	b.n	8009808 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009802:	f04f 33ff 	mov.w	r3, #4294967295
 8009806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009808:	687b      	ldr	r3, [r7, #4]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	2400065c 	.word	0x2400065c

08009818 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009818:	b580      	push	{r7, lr}
 800981a:	b08e      	sub	sp, #56	@ 0x38
 800981c:	af04      	add	r7, sp, #16
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009824:	2300      	movs	r3, #0
 8009826:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009828:	f3ef 8305 	mrs	r3, IPSR
 800982c:	617b      	str	r3, [r7, #20]
  return(result);
 800982e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009830:	2b00      	cmp	r3, #0
 8009832:	d17e      	bne.n	8009932 <osThreadNew+0x11a>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d07b      	beq.n	8009932 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800983a:	2380      	movs	r3, #128	@ 0x80
 800983c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800983e:	2318      	movs	r3, #24
 8009840:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009846:	f04f 33ff 	mov.w	r3, #4294967295
 800984a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d045      	beq.n	80098de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <osThreadNew+0x48>
        name = attr->name;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d008      	beq.n	8009886 <osThreadNew+0x6e>
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	2b38      	cmp	r3, #56	@ 0x38
 8009878:	d805      	bhi.n	8009886 <osThreadNew+0x6e>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <osThreadNew+0x72>
        return (NULL);
 8009886:	2300      	movs	r3, #0
 8009888:	e054      	b.n	8009934 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d003      	beq.n	800989a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	089b      	lsrs	r3, r3, #2
 8009898:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00e      	beq.n	80098c0 <osThreadNew+0xa8>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	2ba7      	cmp	r3, #167	@ 0xa7
 80098a8:	d90a      	bls.n	80098c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d006      	beq.n	80098c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <osThreadNew+0xa8>
        mem = 1;
 80098ba:	2301      	movs	r3, #1
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	e010      	b.n	80098e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10c      	bne.n	80098e2 <osThreadNew+0xca>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d108      	bne.n	80098e2 <osThreadNew+0xca>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d104      	bne.n	80098e2 <osThreadNew+0xca>
          mem = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	61bb      	str	r3, [r7, #24]
 80098dc:	e001      	b.n	80098e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d110      	bne.n	800990a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098f0:	9202      	str	r2, [sp, #8]
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	6a3a      	ldr	r2, [r7, #32]
 80098fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f001 fb9c 	bl	800b03c <xTaskCreateStatic>
 8009904:	4603      	mov	r3, r0
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	e013      	b.n	8009932 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d110      	bne.n	8009932 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	b29a      	uxth	r2, r3
 8009914:	f107 0310 	add.w	r3, r7, #16
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f001 fbea 	bl	800b0fc <xTaskCreate>
 8009928:	4603      	mov	r3, r0
 800992a:	2b01      	cmp	r3, #1
 800992c:	d001      	beq.n	8009932 <osThreadNew+0x11a>
            hTask = NULL;
 800992e:	2300      	movs	r3, #0
 8009930:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009932:	693b      	ldr	r3, [r7, #16]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3728      	adds	r7, #40	@ 0x28
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009944:	f3ef 8305 	mrs	r3, IPSR
 8009948:	60bb      	str	r3, [r7, #8]
  return(result);
 800994a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800994c:	2b00      	cmp	r3, #0
 800994e:	d003      	beq.n	8009958 <osDelay+0x1c>
    stat = osErrorISR;
 8009950:	f06f 0305 	mvn.w	r3, #5
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	e007      	b.n	8009968 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009958:	2300      	movs	r3, #0
 800995a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d002      	beq.n	8009968 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f001 fd28 	bl	800b3b8 <vTaskDelay>
    }
  }

  return (stat);
 8009968:	68fb      	ldr	r3, [r7, #12]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009972:	b580      	push	{r7, lr}
 8009974:	b08a      	sub	sp, #40	@ 0x28
 8009976:	af02      	add	r7, sp, #8
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800997e:	2300      	movs	r3, #0
 8009980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009982:	f3ef 8305 	mrs	r3, IPSR
 8009986:	613b      	str	r3, [r7, #16]
  return(result);
 8009988:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800998a:	2b00      	cmp	r3, #0
 800998c:	d175      	bne.n	8009a7a <osSemaphoreNew+0x108>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d072      	beq.n	8009a7a <osSemaphoreNew+0x108>
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	429a      	cmp	r2, r3
 800999a:	d86e      	bhi.n	8009a7a <osSemaphoreNew+0x108>
    mem = -1;
 800999c:	f04f 33ff 	mov.w	r3, #4294967295
 80099a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d015      	beq.n	80099d4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d006      	beq.n	80099be <osSemaphoreNew+0x4c>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	2b4f      	cmp	r3, #79	@ 0x4f
 80099b6:	d902      	bls.n	80099be <osSemaphoreNew+0x4c>
        mem = 1;
 80099b8:	2301      	movs	r3, #1
 80099ba:	61bb      	str	r3, [r7, #24]
 80099bc:	e00c      	b.n	80099d8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d108      	bne.n	80099d8 <osSemaphoreNew+0x66>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d104      	bne.n	80099d8 <osSemaphoreNew+0x66>
          mem = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	61bb      	str	r3, [r7, #24]
 80099d2:	e001      	b.n	80099d8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099de:	d04c      	beq.n	8009a7a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d128      	bne.n	8009a38 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d10a      	bne.n	8009a02 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	2203      	movs	r2, #3
 80099f2:	9200      	str	r2, [sp, #0]
 80099f4:	2200      	movs	r2, #0
 80099f6:	2100      	movs	r1, #0
 80099f8:	2001      	movs	r0, #1
 80099fa:	f000 fb5d 	bl	800a0b8 <xQueueGenericCreateStatic>
 80099fe:	61f8      	str	r0, [r7, #28]
 8009a00:	e005      	b.n	8009a0e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009a02:	2203      	movs	r2, #3
 8009a04:	2100      	movs	r1, #0
 8009a06:	2001      	movs	r0, #1
 8009a08:	f000 fbd3 	bl	800a1b2 <xQueueGenericCreate>
 8009a0c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d022      	beq.n	8009a5a <osSemaphoreNew+0xe8>
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d01f      	beq.n	8009a5a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2100      	movs	r1, #0
 8009a20:	69f8      	ldr	r0, [r7, #28]
 8009a22:	f000 fc93 	bl	800a34c <xQueueGenericSend>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d016      	beq.n	8009a5a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009a2c:	69f8      	ldr	r0, [r7, #28]
 8009a2e:	f001 f931 	bl	800ac94 <vQueueDelete>
            hSemaphore = NULL;
 8009a32:	2300      	movs	r3, #0
 8009a34:	61fb      	str	r3, [r7, #28]
 8009a36:	e010      	b.n	8009a5a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d108      	bne.n	8009a50 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	461a      	mov	r2, r3
 8009a44:	68b9      	ldr	r1, [r7, #8]
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 fc11 	bl	800a26e <xQueueCreateCountingSemaphoreStatic>
 8009a4c:	61f8      	str	r0, [r7, #28]
 8009a4e:	e004      	b.n	8009a5a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 fc44 	bl	800a2e0 <xQueueCreateCountingSemaphore>
 8009a58:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00c      	beq.n	8009a7a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d003      	beq.n	8009a6e <osSemaphoreNew+0xfc>
          name = attr->name;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	617b      	str	r3, [r7, #20]
 8009a6c:	e001      	b.n	8009a72 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009a72:	6979      	ldr	r1, [r7, #20]
 8009a74:	69f8      	ldr	r0, [r7, #28]
 8009a76:	f001 fa59 	bl	800af2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009a7a:	69fb      	ldr	r3, [r7, #28]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3720      	adds	r7, #32
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d103      	bne.n	8009aa4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009a9c:	f06f 0303 	mvn.w	r3, #3
 8009aa0:	617b      	str	r3, [r7, #20]
 8009aa2:	e039      	b.n	8009b18 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aa4:	f3ef 8305 	mrs	r3, IPSR
 8009aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d022      	beq.n	8009af6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009ab6:	f06f 0303 	mvn.w	r3, #3
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	e02c      	b.n	8009b18 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009ac2:	f107 0308 	add.w	r3, r7, #8
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	2100      	movs	r1, #0
 8009aca:	6938      	ldr	r0, [r7, #16]
 8009acc:	f001 f860 	bl	800ab90 <xQueueReceiveFromISR>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d003      	beq.n	8009ade <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009ad6:	f06f 0302 	mvn.w	r3, #2
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	e01c      	b.n	8009b18 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d019      	beq.n	8009b18 <osSemaphoreAcquire+0x94>
 8009ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8009b24 <osSemaphoreAcquire+0xa0>)
 8009ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	e010      	b.n	8009b18 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009af6:	6839      	ldr	r1, [r7, #0]
 8009af8:	6938      	ldr	r0, [r7, #16]
 8009afa:	f000 ff39 	bl	800a970 <xQueueSemaphoreTake>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d009      	beq.n	8009b18 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009b0a:	f06f 0301 	mvn.w	r3, #1
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	e002      	b.n	8009b18 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009b12:	f06f 0302 	mvn.w	r3, #2
 8009b16:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009b18:	697b      	ldr	r3, [r7, #20]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	e000ed04 	.word	0xe000ed04

08009b28 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d103      	bne.n	8009b46 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009b3e:	f06f 0303 	mvn.w	r3, #3
 8009b42:	617b      	str	r3, [r7, #20]
 8009b44:	e02c      	b.n	8009ba0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b46:	f3ef 8305 	mrs	r3, IPSR
 8009b4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d01a      	beq.n	8009b88 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009b56:	f107 0308 	add.w	r3, r7, #8
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6938      	ldr	r0, [r7, #16]
 8009b5e:	f000 fd95 	bl	800a68c <xQueueGiveFromISR>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d003      	beq.n	8009b70 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009b68:	f06f 0302 	mvn.w	r3, #2
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	e017      	b.n	8009ba0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d014      	beq.n	8009ba0 <osSemaphoreRelease+0x78>
 8009b76:	4b0d      	ldr	r3, [pc, #52]	@ (8009bac <osSemaphoreRelease+0x84>)
 8009b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	e00b      	b.n	8009ba0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009b88:	2300      	movs	r3, #0
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	6938      	ldr	r0, [r7, #16]
 8009b90:	f000 fbdc 	bl	800a34c <xQueueGenericSend>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d002      	beq.n	8009ba0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009b9a:	f06f 0302 	mvn.w	r3, #2
 8009b9e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009ba0:	697b      	ldr	r3, [r7, #20]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08a      	sub	sp, #40	@ 0x28
 8009bb4:	af02      	add	r7, sp, #8
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bc0:	f3ef 8305 	mrs	r3, IPSR
 8009bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8009bc6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d15f      	bne.n	8009c8c <osMessageQueueNew+0xdc>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d05c      	beq.n	8009c8c <osMessageQueueNew+0xdc>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d059      	beq.n	8009c8c <osMessageQueueNew+0xdc>
    mem = -1;
 8009bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bdc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d029      	beq.n	8009c38 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d012      	beq.n	8009c12 <osMessageQueueNew+0x62>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	2b4f      	cmp	r3, #79	@ 0x4f
 8009bf2:	d90e      	bls.n	8009c12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00a      	beq.n	8009c12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	695a      	ldr	r2, [r3, #20]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	68b9      	ldr	r1, [r7, #8]
 8009c04:	fb01 f303 	mul.w	r3, r1, r3
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d302      	bcc.n	8009c12 <osMessageQueueNew+0x62>
        mem = 1;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	61bb      	str	r3, [r7, #24]
 8009c10:	e014      	b.n	8009c3c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d110      	bne.n	8009c3c <osMessageQueueNew+0x8c>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10c      	bne.n	8009c3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d108      	bne.n	8009c3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d104      	bne.n	8009c3c <osMessageQueueNew+0x8c>
          mem = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	61bb      	str	r3, [r7, #24]
 8009c36:	e001      	b.n	8009c3c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d10b      	bne.n	8009c5a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	691a      	ldr	r2, [r3, #16]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	9100      	str	r1, [sp, #0]
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 fa31 	bl	800a0b8 <xQueueGenericCreateStatic>
 8009c56:	61f8      	str	r0, [r7, #28]
 8009c58:	e008      	b.n	8009c6c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d105      	bne.n	8009c6c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009c60:	2200      	movs	r2, #0
 8009c62:	68b9      	ldr	r1, [r7, #8]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 faa4 	bl	800a1b2 <xQueueGenericCreate>
 8009c6a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00c      	beq.n	8009c8c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	e001      	b.n	8009c84 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009c84:	6979      	ldr	r1, [r7, #20]
 8009c86:	69f8      	ldr	r0, [r7, #28]
 8009c88:	f001 f950 	bl	800af2c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009c8c:	69fb      	ldr	r3, [r7, #28]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3720      	adds	r7, #32
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	603b      	str	r3, [r7, #0]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cb0:	f3ef 8305 	mrs	r3, IPSR
 8009cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8009cb6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d028      	beq.n	8009d0e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d005      	beq.n	8009cce <osMessageQueuePut+0x36>
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <osMessageQueuePut+0x36>
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009cce:	f06f 0303 	mvn.w	r3, #3
 8009cd2:	61fb      	str	r3, [r7, #28]
 8009cd4:	e038      	b.n	8009d48 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009cda:	f107 0210 	add.w	r2, r7, #16
 8009cde:	2300      	movs	r3, #0
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	69b8      	ldr	r0, [r7, #24]
 8009ce4:	f000 fc34 	bl	800a550 <xQueueGenericSendFromISR>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d003      	beq.n	8009cf6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009cee:	f06f 0302 	mvn.w	r3, #2
 8009cf2:	61fb      	str	r3, [r7, #28]
 8009cf4:	e028      	b.n	8009d48 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d025      	beq.n	8009d48 <osMessageQueuePut+0xb0>
 8009cfc:	4b15      	ldr	r3, [pc, #84]	@ (8009d54 <osMessageQueuePut+0xbc>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	e01c      	b.n	8009d48 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <osMessageQueuePut+0x82>
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d103      	bne.n	8009d22 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009d1a:	f06f 0303 	mvn.w	r3, #3
 8009d1e:	61fb      	str	r3, [r7, #28]
 8009d20:	e012      	b.n	8009d48 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d22:	2300      	movs	r3, #0
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	68b9      	ldr	r1, [r7, #8]
 8009d28:	69b8      	ldr	r0, [r7, #24]
 8009d2a:	f000 fb0f 	bl	800a34c <xQueueGenericSend>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d009      	beq.n	8009d48 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009d3a:	f06f 0301 	mvn.w	r3, #1
 8009d3e:	61fb      	str	r3, [r7, #28]
 8009d40:	e002      	b.n	8009d48 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009d42:	f06f 0302 	mvn.w	r3, #2
 8009d46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009d48:	69fb      	ldr	r3, [r7, #28]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3720      	adds	r7, #32
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	e000ed04 	.word	0xe000ed04

08009d58 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b088      	sub	sp, #32
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d6e:	f3ef 8305 	mrs	r3, IPSR
 8009d72:	617b      	str	r3, [r7, #20]
  return(result);
 8009d74:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d028      	beq.n	8009dcc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <osMessageQueueGet+0x34>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <osMessageQueueGet+0x34>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d003      	beq.n	8009d94 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009d8c:	f06f 0303 	mvn.w	r3, #3
 8009d90:	61fb      	str	r3, [r7, #28]
 8009d92:	e037      	b.n	8009e04 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009d94:	2300      	movs	r3, #0
 8009d96:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009d98:	f107 0310 	add.w	r3, r7, #16
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	69b8      	ldr	r0, [r7, #24]
 8009da2:	f000 fef5 	bl	800ab90 <xQueueReceiveFromISR>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d003      	beq.n	8009db4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009dac:	f06f 0302 	mvn.w	r3, #2
 8009db0:	61fb      	str	r3, [r7, #28]
 8009db2:	e027      	b.n	8009e04 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d024      	beq.n	8009e04 <osMessageQueueGet+0xac>
 8009dba:	4b15      	ldr	r3, [pc, #84]	@ (8009e10 <osMessageQueueGet+0xb8>)
 8009dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	e01b      	b.n	8009e04 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <osMessageQueueGet+0x80>
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d103      	bne.n	8009de0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009dd8:	f06f 0303 	mvn.w	r3, #3
 8009ddc:	61fb      	str	r3, [r7, #28]
 8009dde:	e011      	b.n	8009e04 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	68b9      	ldr	r1, [r7, #8]
 8009de4:	69b8      	ldr	r0, [r7, #24]
 8009de6:	f000 fce1 	bl	800a7ac <xQueueReceive>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d009      	beq.n	8009e04 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009df6:	f06f 0301 	mvn.w	r3, #1
 8009dfa:	61fb      	str	r3, [r7, #28]
 8009dfc:	e002      	b.n	8009e04 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009dfe:	f06f 0302 	mvn.w	r3, #2
 8009e02:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009e04:	69fb      	ldr	r3, [r7, #28]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3720      	adds	r7, #32
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	e000ed04 	.word	0xe000ed04

08009e14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	4a07      	ldr	r2, [pc, #28]	@ (8009e40 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	4a06      	ldr	r2, [pc, #24]	@ (8009e44 <vApplicationGetIdleTaskMemory+0x30>)
 8009e2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2280      	movs	r2, #128	@ 0x80
 8009e30:	601a      	str	r2, [r3, #0]
}
 8009e32:	bf00      	nop
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	24000660 	.word	0x24000660
 8009e44:	24000708 	.word	0x24000708

08009e48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4a07      	ldr	r2, [pc, #28]	@ (8009e74 <vApplicationGetTimerTaskMemory+0x2c>)
 8009e58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	4a06      	ldr	r2, [pc, #24]	@ (8009e78 <vApplicationGetTimerTaskMemory+0x30>)
 8009e5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e66:	601a      	str	r2, [r3, #0]
}
 8009e68:	bf00      	nop
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	24000908 	.word	0x24000908
 8009e78:	240009b0 	.word	0x240009b0

08009e7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f103 0208 	add.w	r2, r3, #8
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f04f 32ff 	mov.w	r2, #4294967295
 8009e94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f103 0208 	add.w	r2, r3, #8
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f103 0208 	add.w	r2, r3, #8
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009eca:	bf00      	nop
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b085      	sub	sp, #20
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	601a      	str	r2, [r3, #0]
}
 8009f12:	bf00      	nop
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b085      	sub	sp, #20
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f34:	d103      	bne.n	8009f3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e00c      	b.n	8009f58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3308      	adds	r3, #8
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	e002      	b.n	8009f4c <vListInsert+0x2e>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d2f6      	bcs.n	8009f46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	bf00      	nop
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	6892      	ldr	r2, [r2, #8]
 8009fa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	6852      	ldr	r2, [r2, #4]
 8009fb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d103      	bne.n	8009fc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689a      	ldr	r2, [r3, #8]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	1e5a      	subs	r2, r3, #1
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10b      	bne.n	800a010 <xQueueGenericReset+0x2c>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	60bb      	str	r3, [r7, #8]
}
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	e7fd      	b.n	800a00c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a010:	f002 fcda 	bl	800c9c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a01c:	68f9      	ldr	r1, [r7, #12]
 800a01e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a020:	fb01 f303 	mul.w	r3, r1, r3
 800a024:	441a      	add	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a040:	3b01      	subs	r3, #1
 800a042:	68f9      	ldr	r1, [r7, #12]
 800a044:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a046:	fb01 f303 	mul.w	r3, r1, r3
 800a04a:	441a      	add	r2, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	22ff      	movs	r2, #255	@ 0xff
 800a054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	22ff      	movs	r2, #255	@ 0xff
 800a05c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d114      	bne.n	800a090 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d01a      	beq.n	800a0a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3310      	adds	r3, #16
 800a072:	4618      	mov	r0, r3
 800a074:	f001 fc74 	bl	800b960 <xTaskRemoveFromEventList>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d012      	beq.n	800a0a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a07e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b4 <xQueueGenericReset+0xd0>)
 800a080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	e009      	b.n	800a0a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3310      	adds	r3, #16
 800a094:	4618      	mov	r0, r3
 800a096:	f7ff fef1 	bl	8009e7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3324      	adds	r3, #36	@ 0x24
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff feec 	bl	8009e7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0a4:	f002 fcc2 	bl	800ca2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0a8:	2301      	movs	r3, #1
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	e000ed04 	.word	0xe000ed04

0800a0b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08e      	sub	sp, #56	@ 0x38
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10b      	bne.n	800a0e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
 800a0e2:	e7fd      	b.n	800a0e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10b      	bne.n	800a102 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a0fc:	bf00      	nop
 800a0fe:	bf00      	nop
 800a100:	e7fd      	b.n	800a0fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <xQueueGenericCreateStatic+0x56>
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <xQueueGenericCreateStatic+0x5a>
 800a10e:	2301      	movs	r3, #1
 800a110:	e000      	b.n	800a114 <xQueueGenericCreateStatic+0x5c>
 800a112:	2300      	movs	r3, #0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10b      	bne.n	800a130 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	623b      	str	r3, [r7, #32]
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	e7fd      	b.n	800a12c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d102      	bne.n	800a13c <xQueueGenericCreateStatic+0x84>
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d101      	bne.n	800a140 <xQueueGenericCreateStatic+0x88>
 800a13c:	2301      	movs	r3, #1
 800a13e:	e000      	b.n	800a142 <xQueueGenericCreateStatic+0x8a>
 800a140:	2300      	movs	r3, #0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10b      	bne.n	800a15e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	61fb      	str	r3, [r7, #28]
}
 800a158:	bf00      	nop
 800a15a:	bf00      	nop
 800a15c:	e7fd      	b.n	800a15a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a15e:	2350      	movs	r3, #80	@ 0x50
 800a160:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b50      	cmp	r3, #80	@ 0x50
 800a166:	d00b      	beq.n	800a180 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	61bb      	str	r3, [r7, #24]
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	e7fd      	b.n	800a17c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a180:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00d      	beq.n	800a1a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a194:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	4613      	mov	r3, r2
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	68b9      	ldr	r1, [r7, #8]
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 f840 	bl	800a228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3730      	adds	r7, #48	@ 0x30
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b08a      	sub	sp, #40	@ 0x28
 800a1b6:	af02      	add	r7, sp, #8
 800a1b8:	60f8      	str	r0, [r7, #12]
 800a1ba:	60b9      	str	r1, [r7, #8]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10b      	bne.n	800a1de <xQueueGenericCreate+0x2c>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	613b      	str	r3, [r7, #16]
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	e7fd      	b.n	800a1da <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	fb02 f303 	mul.w	r3, r2, r3
 800a1e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	3350      	adds	r3, #80	@ 0x50
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f002 fd0d 	bl	800cc0c <pvPortMalloc>
 800a1f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d011      	beq.n	800a21e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	3350      	adds	r3, #80	@ 0x50
 800a202:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a20c:	79fa      	ldrb	r2, [r7, #7]
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	4613      	mov	r3, r2
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	68b9      	ldr	r1, [r7, #8]
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f805 	bl	800a228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a21e:	69bb      	ldr	r3, [r7, #24]
	}
 800a220:	4618      	mov	r0, r3
 800a222:	3720      	adds	r7, #32
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d103      	bne.n	800a244 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	69ba      	ldr	r2, [r7, #24]
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	e002      	b.n	800a24a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a256:	2101      	movs	r1, #1
 800a258:	69b8      	ldr	r0, [r7, #24]
 800a25a:	f7ff fec3 	bl	8009fe4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	78fa      	ldrb	r2, [r7, #3]
 800a262:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a266:	bf00      	nop
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b08a      	sub	sp, #40	@ 0x28
 800a272:	af02      	add	r7, sp, #8
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10b      	bne.n	800a298 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	61bb      	str	r3, [r7, #24]
}
 800a292:	bf00      	nop
 800a294:	bf00      	nop
 800a296:	e7fd      	b.n	800a294 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d90b      	bls.n	800a2b8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	617b      	str	r3, [r7, #20]
}
 800a2b2:	bf00      	nop
 800a2b4:	bf00      	nop
 800a2b6:	e7fd      	b.n	800a2b4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f7ff fef8 	bl	800a0b8 <xQueueGenericCreateStatic>
 800a2c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a2d6:	69fb      	ldr	r3, [r7, #28]
	}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3720      	adds	r7, #32
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10b      	bne.n	800a308 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	613b      	str	r3, [r7, #16]
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	e7fd      	b.n	800a304 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d90b      	bls.n	800a328 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	60fb      	str	r3, [r7, #12]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a328:	2202      	movs	r2, #2
 800a32a:	2100      	movs	r1, #0
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7ff ff40 	bl	800a1b2 <xQueueGenericCreate>
 800a332:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a340:	697b      	ldr	r3, [r7, #20]
	}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
	...

0800a34c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08e      	sub	sp, #56	@ 0x38
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a35a:	2300      	movs	r3, #0
 800a35c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10b      	bne.n	800a380 <xQueueGenericSend+0x34>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a37a:	bf00      	nop
 800a37c:	bf00      	nop
 800a37e:	e7fd      	b.n	800a37c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d103      	bne.n	800a38e <xQueueGenericSend+0x42>
 800a386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <xQueueGenericSend+0x46>
 800a38e:	2301      	movs	r3, #1
 800a390:	e000      	b.n	800a394 <xQueueGenericSend+0x48>
 800a392:	2300      	movs	r3, #0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10b      	bne.n	800a3b0 <xQueueGenericSend+0x64>
	__asm volatile
 800a398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39c:	f383 8811 	msr	BASEPRI, r3
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3aa:	bf00      	nop
 800a3ac:	bf00      	nop
 800a3ae:	e7fd      	b.n	800a3ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d103      	bne.n	800a3be <xQueueGenericSend+0x72>
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d101      	bne.n	800a3c2 <xQueueGenericSend+0x76>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <xQueueGenericSend+0x78>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <xQueueGenericSend+0x94>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	623b      	str	r3, [r7, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	e7fd      	b.n	800a3dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3e0:	f001 fc84 	bl	800bcec <xTaskGetSchedulerState>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d102      	bne.n	800a3f0 <xQueueGenericSend+0xa4>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d101      	bne.n	800a3f4 <xQueueGenericSend+0xa8>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e000      	b.n	800a3f6 <xQueueGenericSend+0xaa>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10b      	bne.n	800a412 <xQueueGenericSend+0xc6>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	61fb      	str	r3, [r7, #28]
}
 800a40c:	bf00      	nop
 800a40e:	bf00      	nop
 800a410:	e7fd      	b.n	800a40e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a412:	f002 fad9 	bl	800c9c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a41e:	429a      	cmp	r2, r3
 800a420:	d302      	bcc.n	800a428 <xQueueGenericSend+0xdc>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d129      	bne.n	800a47c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a42e:	f000 fc6d 	bl	800ad0c <prvCopyDataToQueue>
 800a432:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d010      	beq.n	800a45e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43e:	3324      	adds	r3, #36	@ 0x24
 800a440:	4618      	mov	r0, r3
 800a442:	f001 fa8d 	bl	800b960 <xTaskRemoveFromEventList>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d013      	beq.n	800a474 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a44c:	4b3f      	ldr	r3, [pc, #252]	@ (800a54c <xQueueGenericSend+0x200>)
 800a44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	e00a      	b.n	800a474 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a460:	2b00      	cmp	r3, #0
 800a462:	d007      	beq.n	800a474 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a464:	4b39      	ldr	r3, [pc, #228]	@ (800a54c <xQueueGenericSend+0x200>)
 800a466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a474:	f002 fada 	bl	800ca2c <vPortExitCritical>
				return pdPASS;
 800a478:	2301      	movs	r3, #1
 800a47a:	e063      	b.n	800a544 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d103      	bne.n	800a48a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a482:	f002 fad3 	bl	800ca2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a486:	2300      	movs	r3, #0
 800a488:	e05c      	b.n	800a544 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d106      	bne.n	800a49e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a490:	f107 0314 	add.w	r3, r7, #20
 800a494:	4618      	mov	r0, r3
 800a496:	f001 fac7 	bl	800ba28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a49a:	2301      	movs	r3, #1
 800a49c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a49e:	f002 fac5 	bl	800ca2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4a2:	f001 f82f 	bl	800b504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4a6:	f002 fa8f 	bl	800c9c8 <vPortEnterCritical>
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4b0:	b25b      	sxtb	r3, r3
 800a4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b6:	d103      	bne.n	800a4c0 <xQueueGenericSend+0x174>
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4c6:	b25b      	sxtb	r3, r3
 800a4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4cc:	d103      	bne.n	800a4d6 <xQueueGenericSend+0x18a>
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4d6:	f002 faa9 	bl	800ca2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4da:	1d3a      	adds	r2, r7, #4
 800a4dc:	f107 0314 	add.w	r3, r7, #20
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f001 fab6 	bl	800ba54 <xTaskCheckForTimeOut>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d124      	bne.n	800a538 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4f0:	f000 fd04 	bl	800aefc <prvIsQueueFull>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d018      	beq.n	800a52c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fc:	3310      	adds	r3, #16
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	4611      	mov	r1, r2
 800a502:	4618      	mov	r0, r3
 800a504:	f001 f9da 	bl	800b8bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a50a:	f000 fc8f 	bl	800ae2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a50e:	f001 f807 	bl	800b520 <xTaskResumeAll>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	f47f af7c 	bne.w	800a412 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a51a:	4b0c      	ldr	r3, [pc, #48]	@ (800a54c <xQueueGenericSend+0x200>)
 800a51c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	e772      	b.n	800a412 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a52c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a52e:	f000 fc7d 	bl	800ae2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a532:	f000 fff5 	bl	800b520 <xTaskResumeAll>
 800a536:	e76c      	b.n	800a412 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a53a:	f000 fc77 	bl	800ae2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a53e:	f000 ffef 	bl	800b520 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a542:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a544:	4618      	mov	r0, r3
 800a546:	3738      	adds	r7, #56	@ 0x38
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	e000ed04 	.word	0xe000ed04

0800a550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b090      	sub	sp, #64	@ 0x40
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10b      	bne.n	800a580 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	e7fd      	b.n	800a57c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <xQueueGenericSendFromISR+0x3e>
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <xQueueGenericSendFromISR+0x42>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <xQueueGenericSendFromISR+0x44>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10b      	bne.n	800a5b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59c:	f383 8811 	msr	BASEPRI, r3
 800a5a0:	f3bf 8f6f 	isb	sy
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5aa:	bf00      	nop
 800a5ac:	bf00      	nop
 800a5ae:	e7fd      	b.n	800a5ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d103      	bne.n	800a5be <xQueueGenericSendFromISR+0x6e>
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d101      	bne.n	800a5c2 <xQueueGenericSendFromISR+0x72>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e000      	b.n	800a5c4 <xQueueGenericSendFromISR+0x74>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10b      	bne.n	800a5e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	623b      	str	r3, [r7, #32]
}
 800a5da:	bf00      	nop
 800a5dc:	bf00      	nop
 800a5de:	e7fd      	b.n	800a5dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5e0:	f002 fad2 	bl	800cb88 <vPortValidateInterruptPriority>
	__asm volatile
 800a5e4:	f3ef 8211 	mrs	r2, BASEPRI
 800a5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	61fa      	str	r2, [r7, #28]
 800a5fa:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a602:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a608:	429a      	cmp	r2, r3
 800a60a:	d302      	bcc.n	800a612 <xQueueGenericSendFromISR+0xc2>
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d12f      	bne.n	800a672 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a614:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a618:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a620:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a628:	f000 fb70 	bl	800ad0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a62c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a634:	d112      	bne.n	800a65c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d016      	beq.n	800a66c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a640:	3324      	adds	r3, #36	@ 0x24
 800a642:	4618      	mov	r0, r3
 800a644:	f001 f98c 	bl	800b960 <xTaskRemoveFromEventList>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00e      	beq.n	800a66c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00b      	beq.n	800a66c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	e007      	b.n	800a66c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a65c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a660:	3301      	adds	r3, #1
 800a662:	b2db      	uxtb	r3, r3
 800a664:	b25a      	sxtb	r2, r3
 800a666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a66c:	2301      	movs	r3, #1
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a670:	e001      	b.n	800a676 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a672:	2300      	movs	r3, #0
 800a674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a678:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f383 8811 	msr	BASEPRI, r3
}
 800a680:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a684:	4618      	mov	r0, r3
 800a686:	3740      	adds	r7, #64	@ 0x40
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08e      	sub	sp, #56	@ 0x38
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10b      	bne.n	800a6b8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	623b      	str	r3, [r7, #32]
}
 800a6b2:	bf00      	nop
 800a6b4:	bf00      	nop
 800a6b6:	e7fd      	b.n	800a6b4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00b      	beq.n	800a6d8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	61fb      	str	r3, [r7, #28]
}
 800a6d2:	bf00      	nop
 800a6d4:	bf00      	nop
 800a6d6:	e7fd      	b.n	800a6d4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d103      	bne.n	800a6e8 <xQueueGiveFromISR+0x5c>
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d101      	bne.n	800a6ec <xQueueGiveFromISR+0x60>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e000      	b.n	800a6ee <xQueueGiveFromISR+0x62>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10b      	bne.n	800a70a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	61bb      	str	r3, [r7, #24]
}
 800a704:	bf00      	nop
 800a706:	bf00      	nop
 800a708:	e7fd      	b.n	800a706 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a70a:	f002 fa3d 	bl	800cb88 <vPortValidateInterruptPriority>
	__asm volatile
 800a70e:	f3ef 8211 	mrs	r2, BASEPRI
 800a712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	617a      	str	r2, [r7, #20]
 800a724:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a726:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a728:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a72e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a736:	429a      	cmp	r2, r3
 800a738:	d22b      	bcs.n	800a792 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a74c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a754:	d112      	bne.n	800a77c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d016      	beq.n	800a78c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a760:	3324      	adds	r3, #36	@ 0x24
 800a762:	4618      	mov	r0, r3
 800a764:	f001 f8fc 	bl	800b960 <xTaskRemoveFromEventList>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00e      	beq.n	800a78c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00b      	beq.n	800a78c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	2201      	movs	r2, #1
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	e007      	b.n	800a78c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a77c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a780:	3301      	adds	r3, #1
 800a782:	b2db      	uxtb	r3, r3
 800a784:	b25a      	sxtb	r2, r3
 800a786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a78c:	2301      	movs	r3, #1
 800a78e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a790:	e001      	b.n	800a796 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a792:	2300      	movs	r3, #0
 800a794:	637b      	str	r3, [r7, #52]	@ 0x34
 800a796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a798:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f383 8811 	msr	BASEPRI, r3
}
 800a7a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3738      	adds	r7, #56	@ 0x38
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b08c      	sub	sp, #48	@ 0x30
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10b      	bne.n	800a7de <xQueueReceive+0x32>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	623b      	str	r3, [r7, #32]
}
 800a7d8:	bf00      	nop
 800a7da:	bf00      	nop
 800a7dc:	e7fd      	b.n	800a7da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d103      	bne.n	800a7ec <xQueueReceive+0x40>
 800a7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d101      	bne.n	800a7f0 <xQueueReceive+0x44>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e000      	b.n	800a7f2 <xQueueReceive+0x46>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10b      	bne.n	800a80e <xQueueReceive+0x62>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	61fb      	str	r3, [r7, #28]
}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	e7fd      	b.n	800a80a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a80e:	f001 fa6d 	bl	800bcec <xTaskGetSchedulerState>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d102      	bne.n	800a81e <xQueueReceive+0x72>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <xQueueReceive+0x76>
 800a81e:	2301      	movs	r3, #1
 800a820:	e000      	b.n	800a824 <xQueueReceive+0x78>
 800a822:	2300      	movs	r3, #0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10b      	bne.n	800a840 <xQueueReceive+0x94>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	61bb      	str	r3, [r7, #24]
}
 800a83a:	bf00      	nop
 800a83c:	bf00      	nop
 800a83e:	e7fd      	b.n	800a83c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a840:	f002 f8c2 	bl	800c9c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a848:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d01f      	beq.n	800a890 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a850:	68b9      	ldr	r1, [r7, #8]
 800a852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a854:	f000 fac4 	bl	800ade0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85a:	1e5a      	subs	r2, r3, #1
 800a85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00f      	beq.n	800a888 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86a:	3310      	adds	r3, #16
 800a86c:	4618      	mov	r0, r3
 800a86e:	f001 f877 	bl	800b960 <xTaskRemoveFromEventList>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d007      	beq.n	800a888 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a878:	4b3c      	ldr	r3, [pc, #240]	@ (800a96c <xQueueReceive+0x1c0>)
 800a87a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a888:	f002 f8d0 	bl	800ca2c <vPortExitCritical>
				return pdPASS;
 800a88c:	2301      	movs	r3, #1
 800a88e:	e069      	b.n	800a964 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d103      	bne.n	800a89e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a896:	f002 f8c9 	bl	800ca2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a89a:	2300      	movs	r3, #0
 800a89c:	e062      	b.n	800a964 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d106      	bne.n	800a8b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8a4:	f107 0310 	add.w	r3, r7, #16
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f001 f8bd 	bl	800ba28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8b2:	f002 f8bb 	bl	800ca2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8b6:	f000 fe25 	bl	800b504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8ba:	f002 f885 	bl	800c9c8 <vPortEnterCritical>
 800a8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8c4:	b25b      	sxtb	r3, r3
 800a8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ca:	d103      	bne.n	800a8d4 <xQueueReceive+0x128>
 800a8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8da:	b25b      	sxtb	r3, r3
 800a8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e0:	d103      	bne.n	800a8ea <xQueueReceive+0x13e>
 800a8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8ea:	f002 f89f 	bl	800ca2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8ee:	1d3a      	adds	r2, r7, #4
 800a8f0:	f107 0310 	add.w	r3, r7, #16
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f001 f8ac 	bl	800ba54 <xTaskCheckForTimeOut>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d123      	bne.n	800a94a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a904:	f000 fae4 	bl	800aed0 <prvIsQueueEmpty>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d017      	beq.n	800a93e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a910:	3324      	adds	r3, #36	@ 0x24
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	4611      	mov	r1, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f000 ffd0 	bl	800b8bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a91c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a91e:	f000 fa85 	bl	800ae2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a922:	f000 fdfd 	bl	800b520 <xTaskResumeAll>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d189      	bne.n	800a840 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a92c:	4b0f      	ldr	r3, [pc, #60]	@ (800a96c <xQueueReceive+0x1c0>)
 800a92e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	e780      	b.n	800a840 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a93e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a940:	f000 fa74 	bl	800ae2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a944:	f000 fdec 	bl	800b520 <xTaskResumeAll>
 800a948:	e77a      	b.n	800a840 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a94a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a94c:	f000 fa6e 	bl	800ae2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a950:	f000 fde6 	bl	800b520 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a954:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a956:	f000 fabb 	bl	800aed0 <prvIsQueueEmpty>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f43f af6f 	beq.w	800a840 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a962:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a964:	4618      	mov	r0, r3
 800a966:	3730      	adds	r7, #48	@ 0x30
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	e000ed04 	.word	0xe000ed04

0800a970 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08e      	sub	sp, #56	@ 0x38
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a97a:	2300      	movs	r3, #0
 800a97c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a982:	2300      	movs	r3, #0
 800a984:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10b      	bne.n	800a9a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	623b      	str	r3, [r7, #32]
}
 800a99e:	bf00      	nop
 800a9a0:	bf00      	nop
 800a9a2:	e7fd      	b.n	800a9a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00b      	beq.n	800a9c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	61fb      	str	r3, [r7, #28]
}
 800a9be:	bf00      	nop
 800a9c0:	bf00      	nop
 800a9c2:	e7fd      	b.n	800a9c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9c4:	f001 f992 	bl	800bcec <xTaskGetSchedulerState>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d102      	bne.n	800a9d4 <xQueueSemaphoreTake+0x64>
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <xQueueSemaphoreTake+0x68>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e000      	b.n	800a9da <xQueueSemaphoreTake+0x6a>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10b      	bne.n	800a9f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	61bb      	str	r3, [r7, #24]
}
 800a9f0:	bf00      	nop
 800a9f2:	bf00      	nop
 800a9f4:	e7fd      	b.n	800a9f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9f6:	f001 ffe7 	bl	800c9c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aa00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d024      	beq.n	800aa50 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aa06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa08:	1e5a      	subs	r2, r3, #1
 800aa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d104      	bne.n	800aa20 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aa16:	f001 fae3 	bl	800bfe0 <pvTaskIncrementMutexHeldCount>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00f      	beq.n	800aa48 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2a:	3310      	adds	r3, #16
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 ff97 	bl	800b960 <xTaskRemoveFromEventList>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa38:	4b54      	ldr	r3, [pc, #336]	@ (800ab8c <xQueueSemaphoreTake+0x21c>)
 800aa3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa48:	f001 fff0 	bl	800ca2c <vPortExitCritical>
				return pdPASS;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e098      	b.n	800ab82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d112      	bne.n	800aa7c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aa56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00b      	beq.n	800aa74 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	617b      	str	r3, [r7, #20]
}
 800aa6e:	bf00      	nop
 800aa70:	bf00      	nop
 800aa72:	e7fd      	b.n	800aa70 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aa74:	f001 ffda 	bl	800ca2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	e082      	b.n	800ab82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d106      	bne.n	800aa90 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa82:	f107 030c 	add.w	r3, r7, #12
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 ffce 	bl	800ba28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa90:	f001 ffcc 	bl	800ca2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa94:	f000 fd36 	bl	800b504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa98:	f001 ff96 	bl	800c9c8 <vPortEnterCritical>
 800aa9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aaa2:	b25b      	sxtb	r3, r3
 800aaa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa8:	d103      	bne.n	800aab2 <xQueueSemaphoreTake+0x142>
 800aaaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aab8:	b25b      	sxtb	r3, r3
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aabe:	d103      	bne.n	800aac8 <xQueueSemaphoreTake+0x158>
 800aac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aac8:	f001 ffb0 	bl	800ca2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aacc:	463a      	mov	r2, r7
 800aace:	f107 030c 	add.w	r3, r7, #12
 800aad2:	4611      	mov	r1, r2
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 ffbd 	bl	800ba54 <xTaskCheckForTimeOut>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d132      	bne.n	800ab46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aae0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aae2:	f000 f9f5 	bl	800aed0 <prvIsQueueEmpty>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d026      	beq.n	800ab3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aaec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d109      	bne.n	800ab08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aaf4:	f001 ff68 	bl	800c9c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aaf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f001 f913 	bl	800bd28 <xTaskPriorityInherit>
 800ab02:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ab04:	f001 ff92 	bl	800ca2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab0a:	3324      	adds	r3, #36	@ 0x24
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	4611      	mov	r1, r2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 fed3 	bl	800b8bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab18:	f000 f988 	bl	800ae2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab1c:	f000 fd00 	bl	800b520 <xTaskResumeAll>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f47f af67 	bne.w	800a9f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ab28:	4b18      	ldr	r3, [pc, #96]	@ (800ab8c <xQueueSemaphoreTake+0x21c>)
 800ab2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	e75d      	b.n	800a9f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab3c:	f000 f976 	bl	800ae2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab40:	f000 fcee 	bl	800b520 <xTaskResumeAll>
 800ab44:	e757      	b.n	800a9f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab48:	f000 f970 	bl	800ae2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab4c:	f000 fce8 	bl	800b520 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab52:	f000 f9bd 	bl	800aed0 <prvIsQueueEmpty>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f43f af4c 	beq.w	800a9f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00d      	beq.n	800ab80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ab64:	f001 ff30 	bl	800c9c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ab68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab6a:	f000 f8b7 	bl	800acdc <prvGetDisinheritPriorityAfterTimeout>
 800ab6e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ab70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 f9ae 	bl	800bed8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ab7c:	f001 ff56 	bl	800ca2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3738      	adds	r7, #56	@ 0x38
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	e000ed04 	.word	0xe000ed04

0800ab90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08e      	sub	sp, #56	@ 0x38
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10b      	bne.n	800abbe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	623b      	str	r3, [r7, #32]
}
 800abb8:	bf00      	nop
 800abba:	bf00      	nop
 800abbc:	e7fd      	b.n	800abba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d103      	bne.n	800abcc <xQueueReceiveFromISR+0x3c>
 800abc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <xQueueReceiveFromISR+0x40>
 800abcc:	2301      	movs	r3, #1
 800abce:	e000      	b.n	800abd2 <xQueueReceiveFromISR+0x42>
 800abd0:	2300      	movs	r3, #0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10b      	bne.n	800abee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	61fb      	str	r3, [r7, #28]
}
 800abe8:	bf00      	nop
 800abea:	bf00      	nop
 800abec:	e7fd      	b.n	800abea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abee:	f001 ffcb 	bl	800cb88 <vPortValidateInterruptPriority>
	__asm volatile
 800abf2:	f3ef 8211 	mrs	r2, BASEPRI
 800abf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	61ba      	str	r2, [r7, #24]
 800ac08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ac0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d02f      	beq.n	800ac7a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac24:	68b9      	ldr	r1, [r7, #8]
 800ac26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac28:	f000 f8da 	bl	800ade0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2e:	1e5a      	subs	r2, r3, #1
 800ac30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3c:	d112      	bne.n	800ac64 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d016      	beq.n	800ac74 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac48:	3310      	adds	r3, #16
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 fe88 	bl	800b960 <xTaskRemoveFromEventList>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00e      	beq.n	800ac74 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00b      	beq.n	800ac74 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	e007      	b.n	800ac74 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac68:	3301      	adds	r3, #1
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	b25a      	sxtb	r2, r3
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ac74:	2301      	movs	r3, #1
 800ac76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac78:	e001      	b.n	800ac7e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac80:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	f383 8811 	msr	BASEPRI, r3
}
 800ac88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3738      	adds	r7, #56	@ 0x38
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10b      	bne.n	800acbe <vQueueDelete+0x2a>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	60bb      	str	r3, [r7, #8]
}
 800acb8:	bf00      	nop
 800acba:	bf00      	nop
 800acbc:	e7fd      	b.n	800acba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f000 f95e 	bl	800af80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800acca:	2b00      	cmp	r3, #0
 800accc:	d102      	bne.n	800acd4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f002 f86a 	bl	800cda8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800acd4:	bf00      	nop
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d006      	beq.n	800acfa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800acf6:	60fb      	str	r3, [r7, #12]
 800acf8:	e001      	b.n	800acfe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800acfe:	68fb      	ldr	r3, [r7, #12]
	}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10d      	bne.n	800ad46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d14d      	bne.n	800adce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f001 f85e 	bl	800bdf8 <xTaskPriorityDisinherit>
 800ad3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	609a      	str	r2, [r3, #8]
 800ad44:	e043      	b.n	800adce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d119      	bne.n	800ad80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6858      	ldr	r0, [r3, #4]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad54:	461a      	mov	r2, r3
 800ad56:	68b9      	ldr	r1, [r7, #8]
 800ad58:	f01e fe9e 	bl	8029a98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad64:	441a      	add	r2, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d32b      	bcc.n	800adce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	605a      	str	r2, [r3, #4]
 800ad7e:	e026      	b.n	800adce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	68d8      	ldr	r0, [r3, #12]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad88:	461a      	mov	r2, r3
 800ad8a:	68b9      	ldr	r1, [r7, #8]
 800ad8c:	f01e fe84 	bl	8029a98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	68da      	ldr	r2, [r3, #12]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad98:	425b      	negs	r3, r3
 800ad9a:	441a      	add	r2, r3
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	68da      	ldr	r2, [r3, #12]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d207      	bcs.n	800adbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	689a      	ldr	r2, [r3, #8]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb4:	425b      	negs	r3, r3
 800adb6:	441a      	add	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d105      	bne.n	800adce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	3b01      	subs	r3, #1
 800adcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800add6:	697b      	ldr	r3, [r7, #20]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3718      	adds	r7, #24
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d018      	beq.n	800ae24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68da      	ldr	r2, [r3, #12]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adfa:	441a      	add	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	68da      	ldr	r2, [r3, #12]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d303      	bcc.n	800ae14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68d9      	ldr	r1, [r3, #12]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	6838      	ldr	r0, [r7, #0]
 800ae20:	f01e fe3a 	bl	8029a98 <memcpy>
	}
}
 800ae24:	bf00      	nop
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae34:	f001 fdc8 	bl	800c9c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae40:	e011      	b.n	800ae66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d012      	beq.n	800ae70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	3324      	adds	r3, #36	@ 0x24
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 fd86 	bl	800b960 <xTaskRemoveFromEventList>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae5a:	f000 fe5f 	bl	800bb1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	3b01      	subs	r3, #1
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	dce9      	bgt.n	800ae42 <prvUnlockQueue+0x16>
 800ae6e:	e000      	b.n	800ae72 <prvUnlockQueue+0x46>
					break;
 800ae70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	22ff      	movs	r2, #255	@ 0xff
 800ae76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ae7a:	f001 fdd7 	bl	800ca2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae7e:	f001 fda3 	bl	800c9c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae8a:	e011      	b.n	800aeb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d012      	beq.n	800aeba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	3310      	adds	r3, #16
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 fd61 	bl	800b960 <xTaskRemoveFromEventList>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aea4:	f000 fe3a 	bl	800bb1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	dce9      	bgt.n	800ae8c <prvUnlockQueue+0x60>
 800aeb8:	e000      	b.n	800aebc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aeba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	22ff      	movs	r2, #255	@ 0xff
 800aec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aec4:	f001 fdb2 	bl	800ca2c <vPortExitCritical>
}
 800aec8:	bf00      	nop
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aed8:	f001 fd76 	bl	800c9c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d102      	bne.n	800aeea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	60fb      	str	r3, [r7, #12]
 800aee8:	e001      	b.n	800aeee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aeee:	f001 fd9d 	bl	800ca2c <vPortExitCritical>

	return xReturn;
 800aef2:	68fb      	ldr	r3, [r7, #12]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af04:	f001 fd60 	bl	800c9c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af10:	429a      	cmp	r2, r3
 800af12:	d102      	bne.n	800af1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af14:	2301      	movs	r3, #1
 800af16:	60fb      	str	r3, [r7, #12]
 800af18:	e001      	b.n	800af1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af1e:	f001 fd85 	bl	800ca2c <vPortExitCritical>

	return xReturn;
 800af22:	68fb      	ldr	r3, [r7, #12]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af36:	2300      	movs	r3, #0
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	e014      	b.n	800af66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af3c:	4a0f      	ldr	r2, [pc, #60]	@ (800af7c <vQueueAddToRegistry+0x50>)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10b      	bne.n	800af60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af48:	490c      	ldr	r1, [pc, #48]	@ (800af7c <vQueueAddToRegistry+0x50>)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af52:	4a0a      	ldr	r2, [pc, #40]	@ (800af7c <vQueueAddToRegistry+0x50>)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	00db      	lsls	r3, r3, #3
 800af58:	4413      	add	r3, r2
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af5e:	e006      	b.n	800af6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	3301      	adds	r3, #1
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b07      	cmp	r3, #7
 800af6a:	d9e7      	bls.n	800af3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af6c:	bf00      	nop
 800af6e:	bf00      	nop
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	24000db0 	.word	0x24000db0

0800af80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af88:	2300      	movs	r3, #0
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	e016      	b.n	800afbc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800af8e:	4a10      	ldr	r2, [pc, #64]	@ (800afd0 <vQueueUnregisterQueue+0x50>)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	4413      	add	r3, r2
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d10b      	bne.n	800afb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800af9e:	4a0c      	ldr	r2, [pc, #48]	@ (800afd0 <vQueueUnregisterQueue+0x50>)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2100      	movs	r1, #0
 800afa4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800afa8:	4a09      	ldr	r2, [pc, #36]	@ (800afd0 <vQueueUnregisterQueue+0x50>)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	00db      	lsls	r3, r3, #3
 800afae:	4413      	add	r3, r2
 800afb0:	2200      	movs	r2, #0
 800afb2:	605a      	str	r2, [r3, #4]
				break;
 800afb4:	e006      	b.n	800afc4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3301      	adds	r3, #1
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2b07      	cmp	r3, #7
 800afc0:	d9e5      	bls.n	800af8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800afc2:	bf00      	nop
 800afc4:	bf00      	nop
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	24000db0 	.word	0x24000db0

0800afd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b086      	sub	sp, #24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800afe4:	f001 fcf0 	bl	800c9c8 <vPortEnterCritical>
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afee:	b25b      	sxtb	r3, r3
 800aff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff4:	d103      	bne.n	800affe <vQueueWaitForMessageRestricted+0x2a>
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b004:	b25b      	sxtb	r3, r3
 800b006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00a:	d103      	bne.n	800b014 <vQueueWaitForMessageRestricted+0x40>
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b014:	f001 fd0a 	bl	800ca2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d106      	bne.n	800b02e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	3324      	adds	r3, #36	@ 0x24
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fc6d 	bl	800b908 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b02e:	6978      	ldr	r0, [r7, #20]
 800b030:	f7ff fefc 	bl	800ae2c <prvUnlockQueue>
	}
 800b034:	bf00      	nop
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08e      	sub	sp, #56	@ 0x38
 800b040:	af04      	add	r7, sp, #16
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
 800b048:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b04a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10b      	bne.n	800b068 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	623b      	str	r3, [r7, #32]
}
 800b062:	bf00      	nop
 800b064:	bf00      	nop
 800b066:	e7fd      	b.n	800b064 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10b      	bne.n	800b086 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	61fb      	str	r3, [r7, #28]
}
 800b080:	bf00      	nop
 800b082:	bf00      	nop
 800b084:	e7fd      	b.n	800b082 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b086:	23a8      	movs	r3, #168	@ 0xa8
 800b088:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	2ba8      	cmp	r3, #168	@ 0xa8
 800b08e:	d00b      	beq.n	800b0a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	61bb      	str	r3, [r7, #24]
}
 800b0a2:	bf00      	nop
 800b0a4:	bf00      	nop
 800b0a6:	e7fd      	b.n	800b0a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d01e      	beq.n	800b0ee <xTaskCreateStatic+0xb2>
 800b0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d01b      	beq.n	800b0ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	9303      	str	r3, [sp, #12]
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ce:	9302      	str	r3, [sp, #8]
 800b0d0:	f107 0314 	add.w	r3, r7, #20
 800b0d4:	9301      	str	r3, [sp, #4]
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	68b9      	ldr	r1, [r7, #8]
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 f851 	bl	800b188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0e8:	f000 f8f6 	bl	800b2d8 <prvAddNewTaskToReadyList>
 800b0ec:	e001      	b.n	800b0f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0f2:	697b      	ldr	r3, [r7, #20]
	}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3728      	adds	r7, #40	@ 0x28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b08c      	sub	sp, #48	@ 0x30
 800b100:	af04      	add	r7, sp, #16
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	603b      	str	r3, [r7, #0]
 800b108:	4613      	mov	r3, r2
 800b10a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b10c:	88fb      	ldrh	r3, [r7, #6]
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4618      	mov	r0, r3
 800b112:	f001 fd7b 	bl	800cc0c <pvPortMalloc>
 800b116:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00e      	beq.n	800b13c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b11e:	20a8      	movs	r0, #168	@ 0xa8
 800b120:	f001 fd74 	bl	800cc0c <pvPortMalloc>
 800b124:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	631a      	str	r2, [r3, #48]	@ 0x30
 800b132:	e005      	b.n	800b140 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b134:	6978      	ldr	r0, [r7, #20]
 800b136:	f001 fe37 	bl	800cda8 <vPortFree>
 800b13a:	e001      	b.n	800b140 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b13c:	2300      	movs	r3, #0
 800b13e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d017      	beq.n	800b176 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b14e:	88fa      	ldrh	r2, [r7, #6]
 800b150:	2300      	movs	r3, #0
 800b152:	9303      	str	r3, [sp, #12]
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	9302      	str	r3, [sp, #8]
 800b158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	68b9      	ldr	r1, [r7, #8]
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 f80f 	bl	800b188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b16a:	69f8      	ldr	r0, [r7, #28]
 800b16c:	f000 f8b4 	bl	800b2d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b170:	2301      	movs	r3, #1
 800b172:	61bb      	str	r3, [r7, #24]
 800b174:	e002      	b.n	800b17c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b176:	f04f 33ff 	mov.w	r3, #4294967295
 800b17a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b17c:	69bb      	ldr	r3, [r7, #24]
	}
 800b17e:	4618      	mov	r0, r3
 800b180:	3720      	adds	r7, #32
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
	...

0800b188 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b198:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	461a      	mov	r2, r3
 800b1a0:	21a5      	movs	r1, #165	@ 0xa5
 800b1a2:	f01e fb4e 	bl	8029842 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1aa:	6879      	ldr	r1, [r7, #4]
 800b1ac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b1b0:	440b      	add	r3, r1
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	f023 0307 	bic.w	r3, r3, #7
 800b1be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00b      	beq.n	800b1e2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	617b      	str	r3, [r7, #20]
}
 800b1dc:	bf00      	nop
 800b1de:	bf00      	nop
 800b1e0:	e7fd      	b.n	800b1de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d01f      	beq.n	800b228 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	61fb      	str	r3, [r7, #28]
 800b1ec:	e012      	b.n	800b214 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	7819      	ldrb	r1, [r3, #0]
 800b1f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	3334      	adds	r3, #52	@ 0x34
 800b1fe:	460a      	mov	r2, r1
 800b200:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	4413      	add	r3, r2
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d006      	beq.n	800b21c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	3301      	adds	r3, #1
 800b212:	61fb      	str	r3, [r7, #28]
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	2b0f      	cmp	r3, #15
 800b218:	d9e9      	bls.n	800b1ee <prvInitialiseNewTask+0x66>
 800b21a:	e000      	b.n	800b21e <prvInitialiseNewTask+0x96>
			{
				break;
 800b21c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b226:	e003      	b.n	800b230 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b232:	2b37      	cmp	r3, #55	@ 0x37
 800b234:	d901      	bls.n	800b23a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b236:	2337      	movs	r3, #55	@ 0x37
 800b238:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b23e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b244:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	2200      	movs	r2, #0
 800b24a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24e:	3304      	adds	r3, #4
 800b250:	4618      	mov	r0, r3
 800b252:	f7fe fe33 	bl	8009ebc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b258:	3318      	adds	r3, #24
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe fe2e 	bl	8009ebc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b264:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b268:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b274:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	2200      	movs	r2, #0
 800b27a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b280:	2200      	movs	r2, #0
 800b282:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	3354      	adds	r3, #84	@ 0x54
 800b28a:	224c      	movs	r2, #76	@ 0x4c
 800b28c:	2100      	movs	r1, #0
 800b28e:	4618      	mov	r0, r3
 800b290:	f01e fad7 	bl	8029842 <memset>
 800b294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b296:	4a0d      	ldr	r2, [pc, #52]	@ (800b2cc <prvInitialiseNewTask+0x144>)
 800b298:	659a      	str	r2, [r3, #88]	@ 0x58
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	4a0c      	ldr	r2, [pc, #48]	@ (800b2d0 <prvInitialiseNewTask+0x148>)
 800b29e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a2:	4a0c      	ldr	r2, [pc, #48]	@ (800b2d4 <prvInitialiseNewTask+0x14c>)
 800b2a4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	68f9      	ldr	r1, [r7, #12]
 800b2aa:	69b8      	ldr	r0, [r7, #24]
 800b2ac:	f001 fa5a 	bl	800c764 <pxPortInitialiseStack>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2c2:	bf00      	nop
 800b2c4:	3720      	adds	r7, #32
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	2400705c 	.word	0x2400705c
 800b2d0:	240070c4 	.word	0x240070c4
 800b2d4:	2400712c 	.word	0x2400712c

0800b2d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2e0:	f001 fb72 	bl	800c9c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2e4:	4b2d      	ldr	r3, [pc, #180]	@ (800b39c <prvAddNewTaskToReadyList+0xc4>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	4a2c      	ldr	r2, [pc, #176]	@ (800b39c <prvAddNewTaskToReadyList+0xc4>)
 800b2ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2ee:	4b2c      	ldr	r3, [pc, #176]	@ (800b3a0 <prvAddNewTaskToReadyList+0xc8>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d109      	bne.n	800b30a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2f6:	4a2a      	ldr	r2, [pc, #168]	@ (800b3a0 <prvAddNewTaskToReadyList+0xc8>)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2fc:	4b27      	ldr	r3, [pc, #156]	@ (800b39c <prvAddNewTaskToReadyList+0xc4>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d110      	bne.n	800b326 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b304:	f000 fc2e 	bl	800bb64 <prvInitialiseTaskLists>
 800b308:	e00d      	b.n	800b326 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b30a:	4b26      	ldr	r3, [pc, #152]	@ (800b3a4 <prvAddNewTaskToReadyList+0xcc>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d109      	bne.n	800b326 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b312:	4b23      	ldr	r3, [pc, #140]	@ (800b3a0 <prvAddNewTaskToReadyList+0xc8>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d802      	bhi.n	800b326 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b320:	4a1f      	ldr	r2, [pc, #124]	@ (800b3a0 <prvAddNewTaskToReadyList+0xc8>)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b326:	4b20      	ldr	r3, [pc, #128]	@ (800b3a8 <prvAddNewTaskToReadyList+0xd0>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3301      	adds	r3, #1
 800b32c:	4a1e      	ldr	r2, [pc, #120]	@ (800b3a8 <prvAddNewTaskToReadyList+0xd0>)
 800b32e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b330:	4b1d      	ldr	r3, [pc, #116]	@ (800b3a8 <prvAddNewTaskToReadyList+0xd0>)
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b33c:	4b1b      	ldr	r3, [pc, #108]	@ (800b3ac <prvAddNewTaskToReadyList+0xd4>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	429a      	cmp	r2, r3
 800b342:	d903      	bls.n	800b34c <prvAddNewTaskToReadyList+0x74>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b348:	4a18      	ldr	r2, [pc, #96]	@ (800b3ac <prvAddNewTaskToReadyList+0xd4>)
 800b34a:	6013      	str	r3, [r2, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4a15      	ldr	r2, [pc, #84]	@ (800b3b0 <prvAddNewTaskToReadyList+0xd8>)
 800b35a:	441a      	add	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3304      	adds	r3, #4
 800b360:	4619      	mov	r1, r3
 800b362:	4610      	mov	r0, r2
 800b364:	f7fe fdb7 	bl	8009ed6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b368:	f001 fb60 	bl	800ca2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b36c:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a4 <prvAddNewTaskToReadyList+0xcc>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00e      	beq.n	800b392 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b374:	4b0a      	ldr	r3, [pc, #40]	@ (800b3a0 <prvAddNewTaskToReadyList+0xc8>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37e:	429a      	cmp	r2, r3
 800b380:	d207      	bcs.n	800b392 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b382:	4b0c      	ldr	r3, [pc, #48]	@ (800b3b4 <prvAddNewTaskToReadyList+0xdc>)
 800b384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b392:	bf00      	nop
 800b394:	3708      	adds	r7, #8
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	240012c4 	.word	0x240012c4
 800b3a0:	24000df0 	.word	0x24000df0
 800b3a4:	240012d0 	.word	0x240012d0
 800b3a8:	240012e0 	.word	0x240012e0
 800b3ac:	240012cc 	.word	0x240012cc
 800b3b0:	24000df4 	.word	0x24000df4
 800b3b4:	e000ed04 	.word	0xe000ed04

0800b3b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d018      	beq.n	800b3fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3ca:	4b14      	ldr	r3, [pc, #80]	@ (800b41c <vTaskDelay+0x64>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00b      	beq.n	800b3ea <vTaskDelay+0x32>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	60bb      	str	r3, [r7, #8]
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop
 800b3e8:	e7fd      	b.n	800b3e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3ea:	f000 f88b 	bl	800b504 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fe09 	bl	800c008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3f6:	f000 f893 	bl	800b520 <xTaskResumeAll>
 800b3fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d107      	bne.n	800b412 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b402:	4b07      	ldr	r3, [pc, #28]	@ (800b420 <vTaskDelay+0x68>)
 800b404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b412:	bf00      	nop
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	240012ec 	.word	0x240012ec
 800b420:	e000ed04 	.word	0xe000ed04

0800b424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b08a      	sub	sp, #40	@ 0x28
 800b428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b42e:	2300      	movs	r3, #0
 800b430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b432:	463a      	mov	r2, r7
 800b434:	1d39      	adds	r1, r7, #4
 800b436:	f107 0308 	add.w	r3, r7, #8
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe fcea 	bl	8009e14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b440:	6839      	ldr	r1, [r7, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	9202      	str	r2, [sp, #8]
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	2300      	movs	r3, #0
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	2300      	movs	r3, #0
 800b450:	460a      	mov	r2, r1
 800b452:	4924      	ldr	r1, [pc, #144]	@ (800b4e4 <vTaskStartScheduler+0xc0>)
 800b454:	4824      	ldr	r0, [pc, #144]	@ (800b4e8 <vTaskStartScheduler+0xc4>)
 800b456:	f7ff fdf1 	bl	800b03c <xTaskCreateStatic>
 800b45a:	4603      	mov	r3, r0
 800b45c:	4a23      	ldr	r2, [pc, #140]	@ (800b4ec <vTaskStartScheduler+0xc8>)
 800b45e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b460:	4b22      	ldr	r3, [pc, #136]	@ (800b4ec <vTaskStartScheduler+0xc8>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b468:	2301      	movs	r3, #1
 800b46a:	617b      	str	r3, [r7, #20]
 800b46c:	e001      	b.n	800b472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d102      	bne.n	800b47e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b478:	f000 fe1a 	bl	800c0b0 <xTimerCreateTimerTask>
 800b47c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d11b      	bne.n	800b4bc <vTaskStartScheduler+0x98>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	613b      	str	r3, [r7, #16]
}
 800b496:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b498:	4b15      	ldr	r3, [pc, #84]	@ (800b4f0 <vTaskStartScheduler+0xcc>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3354      	adds	r3, #84	@ 0x54
 800b49e:	4a15      	ldr	r2, [pc, #84]	@ (800b4f4 <vTaskStartScheduler+0xd0>)
 800b4a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4a2:	4b15      	ldr	r3, [pc, #84]	@ (800b4f8 <vTaskStartScheduler+0xd4>)
 800b4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4aa:	4b14      	ldr	r3, [pc, #80]	@ (800b4fc <vTaskStartScheduler+0xd8>)
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4b0:	4b13      	ldr	r3, [pc, #76]	@ (800b500 <vTaskStartScheduler+0xdc>)
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4b6:	f001 f9e3 	bl	800c880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4ba:	e00f      	b.n	800b4dc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c2:	d10b      	bne.n	800b4dc <vTaskStartScheduler+0xb8>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	60fb      	str	r3, [r7, #12]
}
 800b4d6:	bf00      	nop
 800b4d8:	bf00      	nop
 800b4da:	e7fd      	b.n	800b4d8 <vTaskStartScheduler+0xb4>
}
 800b4dc:	bf00      	nop
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	0802a5d4 	.word	0x0802a5d4
 800b4e8:	0800bb35 	.word	0x0800bb35
 800b4ec:	240012e8 	.word	0x240012e8
 800b4f0:	24000df0 	.word	0x24000df0
 800b4f4:	240000ac 	.word	0x240000ac
 800b4f8:	240012e4 	.word	0x240012e4
 800b4fc:	240012d0 	.word	0x240012d0
 800b500:	240012c8 	.word	0x240012c8

0800b504 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b508:	4b04      	ldr	r3, [pc, #16]	@ (800b51c <vTaskSuspendAll+0x18>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3301      	adds	r3, #1
 800b50e:	4a03      	ldr	r2, [pc, #12]	@ (800b51c <vTaskSuspendAll+0x18>)
 800b510:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b512:	bf00      	nop
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	240012ec 	.word	0x240012ec

0800b520 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b52a:	2300      	movs	r3, #0
 800b52c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b52e:	4b42      	ldr	r3, [pc, #264]	@ (800b638 <xTaskResumeAll+0x118>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10b      	bne.n	800b54e <xTaskResumeAll+0x2e>
	__asm volatile
 800b536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53a:	f383 8811 	msr	BASEPRI, r3
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f3bf 8f4f 	dsb	sy
 800b546:	603b      	str	r3, [r7, #0]
}
 800b548:	bf00      	nop
 800b54a:	bf00      	nop
 800b54c:	e7fd      	b.n	800b54a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b54e:	f001 fa3b 	bl	800c9c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b552:	4b39      	ldr	r3, [pc, #228]	@ (800b638 <xTaskResumeAll+0x118>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3b01      	subs	r3, #1
 800b558:	4a37      	ldr	r2, [pc, #220]	@ (800b638 <xTaskResumeAll+0x118>)
 800b55a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b55c:	4b36      	ldr	r3, [pc, #216]	@ (800b638 <xTaskResumeAll+0x118>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d162      	bne.n	800b62a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b564:	4b35      	ldr	r3, [pc, #212]	@ (800b63c <xTaskResumeAll+0x11c>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d05e      	beq.n	800b62a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b56c:	e02f      	b.n	800b5ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b56e:	4b34      	ldr	r3, [pc, #208]	@ (800b640 <xTaskResumeAll+0x120>)
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3318      	adds	r3, #24
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fd08 	bl	8009f90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	3304      	adds	r3, #4
 800b584:	4618      	mov	r0, r3
 800b586:	f7fe fd03 	bl	8009f90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b58e:	4b2d      	ldr	r3, [pc, #180]	@ (800b644 <xTaskResumeAll+0x124>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	429a      	cmp	r2, r3
 800b594:	d903      	bls.n	800b59e <xTaskResumeAll+0x7e>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b59a:	4a2a      	ldr	r2, [pc, #168]	@ (800b644 <xTaskResumeAll+0x124>)
 800b59c:	6013      	str	r3, [r2, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4a27      	ldr	r2, [pc, #156]	@ (800b648 <xTaskResumeAll+0x128>)
 800b5ac:	441a      	add	r2, r3
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f7fe fc8e 	bl	8009ed6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5be:	4b23      	ldr	r3, [pc, #140]	@ (800b64c <xTaskResumeAll+0x12c>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d302      	bcc.n	800b5ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b5c8:	4b21      	ldr	r3, [pc, #132]	@ (800b650 <xTaskResumeAll+0x130>)
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5ce:	4b1c      	ldr	r3, [pc, #112]	@ (800b640 <xTaskResumeAll+0x120>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1cb      	bne.n	800b56e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d001      	beq.n	800b5e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5dc:	f000 fb66 	bl	800bcac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5e0:	4b1c      	ldr	r3, [pc, #112]	@ (800b654 <xTaskResumeAll+0x134>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d010      	beq.n	800b60e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5ec:	f000 f846 	bl	800b67c <xTaskIncrementTick>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b5f6:	4b16      	ldr	r3, [pc, #88]	@ (800b650 <xTaskResumeAll+0x130>)
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3b01      	subs	r3, #1
 800b600:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1f1      	bne.n	800b5ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b608:	4b12      	ldr	r3, [pc, #72]	@ (800b654 <xTaskResumeAll+0x134>)
 800b60a:	2200      	movs	r2, #0
 800b60c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b60e:	4b10      	ldr	r3, [pc, #64]	@ (800b650 <xTaskResumeAll+0x130>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d009      	beq.n	800b62a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b616:	2301      	movs	r3, #1
 800b618:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b61a:	4b0f      	ldr	r3, [pc, #60]	@ (800b658 <xTaskResumeAll+0x138>)
 800b61c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b620:	601a      	str	r2, [r3, #0]
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b62a:	f001 f9ff 	bl	800ca2c <vPortExitCritical>

	return xAlreadyYielded;
 800b62e:	68bb      	ldr	r3, [r7, #8]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	240012ec 	.word	0x240012ec
 800b63c:	240012c4 	.word	0x240012c4
 800b640:	24001284 	.word	0x24001284
 800b644:	240012cc 	.word	0x240012cc
 800b648:	24000df4 	.word	0x24000df4
 800b64c:	24000df0 	.word	0x24000df0
 800b650:	240012d8 	.word	0x240012d8
 800b654:	240012d4 	.word	0x240012d4
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b662:	4b05      	ldr	r3, [pc, #20]	@ (800b678 <xTaskGetTickCount+0x1c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b668:	687b      	ldr	r3, [r7, #4]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	240012c8 	.word	0x240012c8

0800b67c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b682:	2300      	movs	r3, #0
 800b684:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b686:	4b4f      	ldr	r3, [pc, #316]	@ (800b7c4 <xTaskIncrementTick+0x148>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f040 8090 	bne.w	800b7b0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b690:	4b4d      	ldr	r3, [pc, #308]	@ (800b7c8 <xTaskIncrementTick+0x14c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3301      	adds	r3, #1
 800b696:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b698:	4a4b      	ldr	r2, [pc, #300]	@ (800b7c8 <xTaskIncrementTick+0x14c>)
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d121      	bne.n	800b6e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b6a4:	4b49      	ldr	r3, [pc, #292]	@ (800b7cc <xTaskIncrementTick+0x150>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00b      	beq.n	800b6c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	603b      	str	r3, [r7, #0]
}
 800b6c0:	bf00      	nop
 800b6c2:	bf00      	nop
 800b6c4:	e7fd      	b.n	800b6c2 <xTaskIncrementTick+0x46>
 800b6c6:	4b41      	ldr	r3, [pc, #260]	@ (800b7cc <xTaskIncrementTick+0x150>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	4b40      	ldr	r3, [pc, #256]	@ (800b7d0 <xTaskIncrementTick+0x154>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a3e      	ldr	r2, [pc, #248]	@ (800b7cc <xTaskIncrementTick+0x150>)
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	4a3e      	ldr	r2, [pc, #248]	@ (800b7d0 <xTaskIncrementTick+0x154>)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	4b3e      	ldr	r3, [pc, #248]	@ (800b7d4 <xTaskIncrementTick+0x158>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	4a3c      	ldr	r2, [pc, #240]	@ (800b7d4 <xTaskIncrementTick+0x158>)
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	f000 fae2 	bl	800bcac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6e8:	4b3b      	ldr	r3, [pc, #236]	@ (800b7d8 <xTaskIncrementTick+0x15c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d349      	bcc.n	800b786 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6f2:	4b36      	ldr	r3, [pc, #216]	@ (800b7cc <xTaskIncrementTick+0x150>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d104      	bne.n	800b706 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6fc:	4b36      	ldr	r3, [pc, #216]	@ (800b7d8 <xTaskIncrementTick+0x15c>)
 800b6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b702:	601a      	str	r2, [r3, #0]
					break;
 800b704:	e03f      	b.n	800b786 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b706:	4b31      	ldr	r3, [pc, #196]	@ (800b7cc <xTaskIncrementTick+0x150>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d203      	bcs.n	800b726 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b71e:	4a2e      	ldr	r2, [pc, #184]	@ (800b7d8 <xTaskIncrementTick+0x15c>)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b724:	e02f      	b.n	800b786 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	3304      	adds	r3, #4
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fe fc30 	bl	8009f90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b734:	2b00      	cmp	r3, #0
 800b736:	d004      	beq.n	800b742 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	3318      	adds	r3, #24
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fe fc27 	bl	8009f90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b746:	4b25      	ldr	r3, [pc, #148]	@ (800b7dc <xTaskIncrementTick+0x160>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d903      	bls.n	800b756 <xTaskIncrementTick+0xda>
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b752:	4a22      	ldr	r2, [pc, #136]	@ (800b7dc <xTaskIncrementTick+0x160>)
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b75a:	4613      	mov	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4a1f      	ldr	r2, [pc, #124]	@ (800b7e0 <xTaskIncrementTick+0x164>)
 800b764:	441a      	add	r2, r3
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	3304      	adds	r3, #4
 800b76a:	4619      	mov	r1, r3
 800b76c:	4610      	mov	r0, r2
 800b76e:	f7fe fbb2 	bl	8009ed6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b776:	4b1b      	ldr	r3, [pc, #108]	@ (800b7e4 <xTaskIncrementTick+0x168>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d3b8      	bcc.n	800b6f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b780:	2301      	movs	r3, #1
 800b782:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b784:	e7b5      	b.n	800b6f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b786:	4b17      	ldr	r3, [pc, #92]	@ (800b7e4 <xTaskIncrementTick+0x168>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b78c:	4914      	ldr	r1, [pc, #80]	@ (800b7e0 <xTaskIncrementTick+0x164>)
 800b78e:	4613      	mov	r3, r2
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	4413      	add	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	440b      	add	r3, r1
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d901      	bls.n	800b7a2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b7a2:	4b11      	ldr	r3, [pc, #68]	@ (800b7e8 <xTaskIncrementTick+0x16c>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d007      	beq.n	800b7ba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	e004      	b.n	800b7ba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b7b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b7ec <xTaskIncrementTick+0x170>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	4a0d      	ldr	r2, [pc, #52]	@ (800b7ec <xTaskIncrementTick+0x170>)
 800b7b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b7ba:	697b      	ldr	r3, [r7, #20]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	240012ec 	.word	0x240012ec
 800b7c8:	240012c8 	.word	0x240012c8
 800b7cc:	2400127c 	.word	0x2400127c
 800b7d0:	24001280 	.word	0x24001280
 800b7d4:	240012dc 	.word	0x240012dc
 800b7d8:	240012e4 	.word	0x240012e4
 800b7dc:	240012cc 	.word	0x240012cc
 800b7e0:	24000df4 	.word	0x24000df4
 800b7e4:	24000df0 	.word	0x24000df0
 800b7e8:	240012d8 	.word	0x240012d8
 800b7ec:	240012d4 	.word	0x240012d4

0800b7f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7f6:	4b2b      	ldr	r3, [pc, #172]	@ (800b8a4 <vTaskSwitchContext+0xb4>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7fe:	4b2a      	ldr	r3, [pc, #168]	@ (800b8a8 <vTaskSwitchContext+0xb8>)
 800b800:	2201      	movs	r2, #1
 800b802:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b804:	e047      	b.n	800b896 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b806:	4b28      	ldr	r3, [pc, #160]	@ (800b8a8 <vTaskSwitchContext+0xb8>)
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b80c:	4b27      	ldr	r3, [pc, #156]	@ (800b8ac <vTaskSwitchContext+0xbc>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	60fb      	str	r3, [r7, #12]
 800b812:	e011      	b.n	800b838 <vTaskSwitchContext+0x48>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10b      	bne.n	800b832 <vTaskSwitchContext+0x42>
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	607b      	str	r3, [r7, #4]
}
 800b82c:	bf00      	nop
 800b82e:	bf00      	nop
 800b830:	e7fd      	b.n	800b82e <vTaskSwitchContext+0x3e>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3b01      	subs	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	491d      	ldr	r1, [pc, #116]	@ (800b8b0 <vTaskSwitchContext+0xc0>)
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	4613      	mov	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	440b      	add	r3, r1
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d0e3      	beq.n	800b814 <vTaskSwitchContext+0x24>
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	4613      	mov	r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	4413      	add	r3, r2
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4a16      	ldr	r2, [pc, #88]	@ (800b8b0 <vTaskSwitchContext+0xc0>)
 800b858:	4413      	add	r3, r2
 800b85a:	60bb      	str	r3, [r7, #8]
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	605a      	str	r2, [r3, #4]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	685a      	ldr	r2, [r3, #4]
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	3308      	adds	r3, #8
 800b86e:	429a      	cmp	r2, r3
 800b870:	d104      	bne.n	800b87c <vTaskSwitchContext+0x8c>
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	685a      	ldr	r2, [r3, #4]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	605a      	str	r2, [r3, #4]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	4a0c      	ldr	r2, [pc, #48]	@ (800b8b4 <vTaskSwitchContext+0xc4>)
 800b884:	6013      	str	r3, [r2, #0]
 800b886:	4a09      	ldr	r2, [pc, #36]	@ (800b8ac <vTaskSwitchContext+0xbc>)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b88c:	4b09      	ldr	r3, [pc, #36]	@ (800b8b4 <vTaskSwitchContext+0xc4>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3354      	adds	r3, #84	@ 0x54
 800b892:	4a09      	ldr	r2, [pc, #36]	@ (800b8b8 <vTaskSwitchContext+0xc8>)
 800b894:	6013      	str	r3, [r2, #0]
}
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	240012ec 	.word	0x240012ec
 800b8a8:	240012d8 	.word	0x240012d8
 800b8ac:	240012cc 	.word	0x240012cc
 800b8b0:	24000df4 	.word	0x24000df4
 800b8b4:	24000df0 	.word	0x24000df0
 800b8b8:	240000ac 	.word	0x240000ac

0800b8bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10b      	bne.n	800b8e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	60fb      	str	r3, [r7, #12]
}
 800b8de:	bf00      	nop
 800b8e0:	bf00      	nop
 800b8e2:	e7fd      	b.n	800b8e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8e4:	4b07      	ldr	r3, [pc, #28]	@ (800b904 <vTaskPlaceOnEventList+0x48>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3318      	adds	r3, #24
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7fe fb16 	bl	8009f1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8f2:	2101      	movs	r1, #1
 800b8f4:	6838      	ldr	r0, [r7, #0]
 800b8f6:	f000 fb87 	bl	800c008 <prvAddCurrentTaskToDelayedList>
}
 800b8fa:	bf00      	nop
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	24000df0 	.word	0x24000df0

0800b908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10b      	bne.n	800b932 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	617b      	str	r3, [r7, #20]
}
 800b92c:	bf00      	nop
 800b92e:	bf00      	nop
 800b930:	e7fd      	b.n	800b92e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b932:	4b0a      	ldr	r3, [pc, #40]	@ (800b95c <vTaskPlaceOnEventListRestricted+0x54>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3318      	adds	r3, #24
 800b938:	4619      	mov	r1, r3
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f7fe facb 	bl	8009ed6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d002      	beq.n	800b94c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b946:	f04f 33ff 	mov.w	r3, #4294967295
 800b94a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b94c:	6879      	ldr	r1, [r7, #4]
 800b94e:	68b8      	ldr	r0, [r7, #8]
 800b950:	f000 fb5a 	bl	800c008 <prvAddCurrentTaskToDelayedList>
	}
 800b954:	bf00      	nop
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	24000df0 	.word	0x24000df0

0800b960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10b      	bne.n	800b98e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	60fb      	str	r3, [r7, #12]
}
 800b988:	bf00      	nop
 800b98a:	bf00      	nop
 800b98c:	e7fd      	b.n	800b98a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	3318      	adds	r3, #24
 800b992:	4618      	mov	r0, r3
 800b994:	f7fe fafc 	bl	8009f90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b998:	4b1d      	ldr	r3, [pc, #116]	@ (800ba10 <xTaskRemoveFromEventList+0xb0>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d11d      	bne.n	800b9dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fe faf3 	bl	8009f90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ae:	4b19      	ldr	r3, [pc, #100]	@ (800ba14 <xTaskRemoveFromEventList+0xb4>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d903      	bls.n	800b9be <xTaskRemoveFromEventList+0x5e>
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ba:	4a16      	ldr	r2, [pc, #88]	@ (800ba14 <xTaskRemoveFromEventList+0xb4>)
 800b9bc:	6013      	str	r3, [r2, #0]
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4a13      	ldr	r2, [pc, #76]	@ (800ba18 <xTaskRemoveFromEventList+0xb8>)
 800b9cc:	441a      	add	r2, r3
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	f7fe fa7e 	bl	8009ed6 <vListInsertEnd>
 800b9da:	e005      	b.n	800b9e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	3318      	adds	r3, #24
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	480e      	ldr	r0, [pc, #56]	@ (800ba1c <xTaskRemoveFromEventList+0xbc>)
 800b9e4:	f7fe fa77 	bl	8009ed6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ec:	4b0c      	ldr	r3, [pc, #48]	@ (800ba20 <xTaskRemoveFromEventList+0xc0>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d905      	bls.n	800ba02 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9fa:	4b0a      	ldr	r3, [pc, #40]	@ (800ba24 <xTaskRemoveFromEventList+0xc4>)
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	e001      	b.n	800ba06 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ba02:	2300      	movs	r3, #0
 800ba04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba06:	697b      	ldr	r3, [r7, #20]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	240012ec 	.word	0x240012ec
 800ba14:	240012cc 	.word	0x240012cc
 800ba18:	24000df4 	.word	0x24000df4
 800ba1c:	24001284 	.word	0x24001284
 800ba20:	24000df0 	.word	0x24000df0
 800ba24:	240012d8 	.word	0x240012d8

0800ba28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba30:	4b06      	ldr	r3, [pc, #24]	@ (800ba4c <vTaskInternalSetTimeOutState+0x24>)
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba38:	4b05      	ldr	r3, [pc, #20]	@ (800ba50 <vTaskInternalSetTimeOutState+0x28>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	605a      	str	r2, [r3, #4]
}
 800ba40:	bf00      	nop
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	240012dc 	.word	0x240012dc
 800ba50:	240012c8 	.word	0x240012c8

0800ba54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10b      	bne.n	800ba7c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ba64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba68:	f383 8811 	msr	BASEPRI, r3
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	f3bf 8f4f 	dsb	sy
 800ba74:	613b      	str	r3, [r7, #16]
}
 800ba76:	bf00      	nop
 800ba78:	bf00      	nop
 800ba7a:	e7fd      	b.n	800ba78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10b      	bne.n	800ba9a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ba82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba86:	f383 8811 	msr	BASEPRI, r3
 800ba8a:	f3bf 8f6f 	isb	sy
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	60fb      	str	r3, [r7, #12]
}
 800ba94:	bf00      	nop
 800ba96:	bf00      	nop
 800ba98:	e7fd      	b.n	800ba96 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba9a:	f000 ff95 	bl	800c9c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba9e:	4b1d      	ldr	r3, [pc, #116]	@ (800bb14 <xTaskCheckForTimeOut+0xc0>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	69ba      	ldr	r2, [r7, #24]
 800baaa:	1ad3      	subs	r3, r2, r3
 800baac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab6:	d102      	bne.n	800babe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bab8:	2300      	movs	r3, #0
 800baba:	61fb      	str	r3, [r7, #28]
 800babc:	e023      	b.n	800bb06 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	4b15      	ldr	r3, [pc, #84]	@ (800bb18 <xTaskCheckForTimeOut+0xc4>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d007      	beq.n	800bada <xTaskCheckForTimeOut+0x86>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	69ba      	ldr	r2, [r7, #24]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d302      	bcc.n	800bada <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bad4:	2301      	movs	r3, #1
 800bad6:	61fb      	str	r3, [r7, #28]
 800bad8:	e015      	b.n	800bb06 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d20b      	bcs.n	800bafc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	1ad2      	subs	r2, r2, r3
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff ff99 	bl	800ba28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800baf6:	2300      	movs	r3, #0
 800baf8:	61fb      	str	r3, [r7, #28]
 800bafa:	e004      	b.n	800bb06 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	2200      	movs	r2, #0
 800bb00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb02:	2301      	movs	r3, #1
 800bb04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb06:	f000 ff91 	bl	800ca2c <vPortExitCritical>

	return xReturn;
 800bb0a:	69fb      	ldr	r3, [r7, #28]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3720      	adds	r7, #32
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	240012c8 	.word	0x240012c8
 800bb18:	240012dc 	.word	0x240012dc

0800bb1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb20:	4b03      	ldr	r3, [pc, #12]	@ (800bb30 <vTaskMissedYield+0x14>)
 800bb22:	2201      	movs	r2, #1
 800bb24:	601a      	str	r2, [r3, #0]
}
 800bb26:	bf00      	nop
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	240012d8 	.word	0x240012d8

0800bb34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb3c:	f000 f852 	bl	800bbe4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb40:	4b06      	ldr	r3, [pc, #24]	@ (800bb5c <prvIdleTask+0x28>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d9f9      	bls.n	800bb3c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb48:	4b05      	ldr	r3, [pc, #20]	@ (800bb60 <prvIdleTask+0x2c>)
 800bb4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb4e:	601a      	str	r2, [r3, #0]
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb58:	e7f0      	b.n	800bb3c <prvIdleTask+0x8>
 800bb5a:	bf00      	nop
 800bb5c:	24000df4 	.word	0x24000df4
 800bb60:	e000ed04 	.word	0xe000ed04

0800bb64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	607b      	str	r3, [r7, #4]
 800bb6e:	e00c      	b.n	800bb8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	4613      	mov	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4413      	add	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4a12      	ldr	r2, [pc, #72]	@ (800bbc4 <prvInitialiseTaskLists+0x60>)
 800bb7c:	4413      	add	r3, r2
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe f97c 	bl	8009e7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	3301      	adds	r3, #1
 800bb88:	607b      	str	r3, [r7, #4]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b37      	cmp	r3, #55	@ 0x37
 800bb8e:	d9ef      	bls.n	800bb70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb90:	480d      	ldr	r0, [pc, #52]	@ (800bbc8 <prvInitialiseTaskLists+0x64>)
 800bb92:	f7fe f973 	bl	8009e7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb96:	480d      	ldr	r0, [pc, #52]	@ (800bbcc <prvInitialiseTaskLists+0x68>)
 800bb98:	f7fe f970 	bl	8009e7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb9c:	480c      	ldr	r0, [pc, #48]	@ (800bbd0 <prvInitialiseTaskLists+0x6c>)
 800bb9e:	f7fe f96d 	bl	8009e7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bba2:	480c      	ldr	r0, [pc, #48]	@ (800bbd4 <prvInitialiseTaskLists+0x70>)
 800bba4:	f7fe f96a 	bl	8009e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bba8:	480b      	ldr	r0, [pc, #44]	@ (800bbd8 <prvInitialiseTaskLists+0x74>)
 800bbaa:	f7fe f967 	bl	8009e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbae:	4b0b      	ldr	r3, [pc, #44]	@ (800bbdc <prvInitialiseTaskLists+0x78>)
 800bbb0:	4a05      	ldr	r2, [pc, #20]	@ (800bbc8 <prvInitialiseTaskLists+0x64>)
 800bbb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe0 <prvInitialiseTaskLists+0x7c>)
 800bbb6:	4a05      	ldr	r2, [pc, #20]	@ (800bbcc <prvInitialiseTaskLists+0x68>)
 800bbb8:	601a      	str	r2, [r3, #0]
}
 800bbba:	bf00      	nop
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	24000df4 	.word	0x24000df4
 800bbc8:	24001254 	.word	0x24001254
 800bbcc:	24001268 	.word	0x24001268
 800bbd0:	24001284 	.word	0x24001284
 800bbd4:	24001298 	.word	0x24001298
 800bbd8:	240012b0 	.word	0x240012b0
 800bbdc:	2400127c 	.word	0x2400127c
 800bbe0:	24001280 	.word	0x24001280

0800bbe4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbea:	e019      	b.n	800bc20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbec:	f000 feec 	bl	800c9c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbf0:	4b10      	ldr	r3, [pc, #64]	@ (800bc34 <prvCheckTasksWaitingTermination+0x50>)
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fe f9c7 	bl	8009f90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc02:	4b0d      	ldr	r3, [pc, #52]	@ (800bc38 <prvCheckTasksWaitingTermination+0x54>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	4a0b      	ldr	r2, [pc, #44]	@ (800bc38 <prvCheckTasksWaitingTermination+0x54>)
 800bc0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc0c:	4b0b      	ldr	r3, [pc, #44]	@ (800bc3c <prvCheckTasksWaitingTermination+0x58>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3b01      	subs	r3, #1
 800bc12:	4a0a      	ldr	r2, [pc, #40]	@ (800bc3c <prvCheckTasksWaitingTermination+0x58>)
 800bc14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc16:	f000 ff09 	bl	800ca2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f810 	bl	800bc40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc20:	4b06      	ldr	r3, [pc, #24]	@ (800bc3c <prvCheckTasksWaitingTermination+0x58>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1e1      	bne.n	800bbec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc28:	bf00      	nop
 800bc2a:	bf00      	nop
 800bc2c:	3708      	adds	r7, #8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	24001298 	.word	0x24001298
 800bc38:	240012c4 	.word	0x240012c4
 800bc3c:	240012ac 	.word	0x240012ac

0800bc40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	3354      	adds	r3, #84	@ 0x54
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f01d fe41 	bl	80298d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d108      	bne.n	800bc6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc60:	4618      	mov	r0, r3
 800bc62:	f001 f8a1 	bl	800cda8 <vPortFree>
				vPortFree( pxTCB );
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 f89e 	bl	800cda8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc6c:	e019      	b.n	800bca2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d103      	bne.n	800bc80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f001 f895 	bl	800cda8 <vPortFree>
	}
 800bc7e:	e010      	b.n	800bca2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	d00b      	beq.n	800bca2 <prvDeleteTCB+0x62>
	__asm volatile
 800bc8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	60fb      	str	r3, [r7, #12]
}
 800bc9c:	bf00      	nop
 800bc9e:	bf00      	nop
 800bca0:	e7fd      	b.n	800bc9e <prvDeleteTCB+0x5e>
	}
 800bca2:	bf00      	nop
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcb2:	4b0c      	ldr	r3, [pc, #48]	@ (800bce4 <prvResetNextTaskUnblockTime+0x38>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d104      	bne.n	800bcc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	@ (800bce8 <prvResetNextTaskUnblockTime+0x3c>)
 800bcbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcc4:	e008      	b.n	800bcd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcc6:	4b07      	ldr	r3, [pc, #28]	@ (800bce4 <prvResetNextTaskUnblockTime+0x38>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	4a04      	ldr	r2, [pc, #16]	@ (800bce8 <prvResetNextTaskUnblockTime+0x3c>)
 800bcd6:	6013      	str	r3, [r2, #0]
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr
 800bce4:	2400127c 	.word	0x2400127c
 800bce8:	240012e4 	.word	0x240012e4

0800bcec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bcf2:	4b0b      	ldr	r3, [pc, #44]	@ (800bd20 <xTaskGetSchedulerState+0x34>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d102      	bne.n	800bd00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	607b      	str	r3, [r7, #4]
 800bcfe:	e008      	b.n	800bd12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd00:	4b08      	ldr	r3, [pc, #32]	@ (800bd24 <xTaskGetSchedulerState+0x38>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d102      	bne.n	800bd0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd08:	2302      	movs	r3, #2
 800bd0a:	607b      	str	r3, [r7, #4]
 800bd0c:	e001      	b.n	800bd12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd12:	687b      	ldr	r3, [r7, #4]
	}
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	240012d0 	.word	0x240012d0
 800bd24:	240012ec 	.word	0x240012ec

0800bd28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd34:	2300      	movs	r3, #0
 800bd36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d051      	beq.n	800bde2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd42:	4b2a      	ldr	r3, [pc, #168]	@ (800bdec <xTaskPriorityInherit+0xc4>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d241      	bcs.n	800bdd0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	699b      	ldr	r3, [r3, #24]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	db06      	blt.n	800bd62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd54:	4b25      	ldr	r3, [pc, #148]	@ (800bdec <xTaskPriorityInherit+0xc4>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	6959      	ldr	r1, [r3, #20]
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4a1f      	ldr	r2, [pc, #124]	@ (800bdf0 <xTaskPriorityInherit+0xc8>)
 800bd74:	4413      	add	r3, r2
 800bd76:	4299      	cmp	r1, r3
 800bd78:	d122      	bne.n	800bdc0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe f906 	bl	8009f90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd84:	4b19      	ldr	r3, [pc, #100]	@ (800bdec <xTaskPriorityInherit+0xc4>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd92:	4b18      	ldr	r3, [pc, #96]	@ (800bdf4 <xTaskPriorityInherit+0xcc>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d903      	bls.n	800bda2 <xTaskPriorityInherit+0x7a>
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd9e:	4a15      	ldr	r2, [pc, #84]	@ (800bdf4 <xTaskPriorityInherit+0xcc>)
 800bda0:	6013      	str	r3, [r2, #0]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bda6:	4613      	mov	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4413      	add	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4a10      	ldr	r2, [pc, #64]	@ (800bdf0 <xTaskPriorityInherit+0xc8>)
 800bdb0:	441a      	add	r2, r3
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	4610      	mov	r0, r2
 800bdba:	f7fe f88c 	bl	8009ed6 <vListInsertEnd>
 800bdbe:	e004      	b.n	800bdca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bdec <xTaskPriorityInherit+0xc4>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	60fb      	str	r3, [r7, #12]
 800bdce:	e008      	b.n	800bde2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdd4:	4b05      	ldr	r3, [pc, #20]	@ (800bdec <xTaskPriorityInherit+0xc4>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d201      	bcs.n	800bde2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bdde:	2301      	movs	r3, #1
 800bde0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bde2:	68fb      	ldr	r3, [r7, #12]
	}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	24000df0 	.word	0x24000df0
 800bdf0:	24000df4 	.word	0x24000df4
 800bdf4:	240012cc 	.word	0x240012cc

0800bdf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be04:	2300      	movs	r3, #0
 800be06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d058      	beq.n	800bec0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be0e:	4b2f      	ldr	r3, [pc, #188]	@ (800becc <xTaskPriorityDisinherit+0xd4>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	429a      	cmp	r2, r3
 800be16:	d00b      	beq.n	800be30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	60fb      	str	r3, [r7, #12]
}
 800be2a:	bf00      	nop
 800be2c:	bf00      	nop
 800be2e:	e7fd      	b.n	800be2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10b      	bne.n	800be50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	60bb      	str	r3, [r7, #8]
}
 800be4a:	bf00      	nop
 800be4c:	bf00      	nop
 800be4e:	e7fd      	b.n	800be4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be54:	1e5a      	subs	r2, r3, #1
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be62:	429a      	cmp	r2, r3
 800be64:	d02c      	beq.n	800bec0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d128      	bne.n	800bec0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	3304      	adds	r3, #4
 800be72:	4618      	mov	r0, r3
 800be74:	f7fe f88c 	bl	8009f90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be90:	4b0f      	ldr	r3, [pc, #60]	@ (800bed0 <xTaskPriorityDisinherit+0xd8>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	429a      	cmp	r2, r3
 800be96:	d903      	bls.n	800bea0 <xTaskPriorityDisinherit+0xa8>
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be9c:	4a0c      	ldr	r2, [pc, #48]	@ (800bed0 <xTaskPriorityDisinherit+0xd8>)
 800be9e:	6013      	str	r3, [r2, #0]
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bea4:	4613      	mov	r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4a09      	ldr	r2, [pc, #36]	@ (800bed4 <xTaskPriorityDisinherit+0xdc>)
 800beae:	441a      	add	r2, r3
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	3304      	adds	r3, #4
 800beb4:	4619      	mov	r1, r3
 800beb6:	4610      	mov	r0, r2
 800beb8:	f7fe f80d 	bl	8009ed6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bebc:	2301      	movs	r3, #1
 800bebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bec0:	697b      	ldr	r3, [r7, #20]
	}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	24000df0 	.word	0x24000df0
 800bed0:	240012cc 	.word	0x240012cc
 800bed4:	24000df4 	.word	0x24000df4

0800bed8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bee6:	2301      	movs	r3, #1
 800bee8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d06c      	beq.n	800bfca <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10b      	bne.n	800bf10 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	60fb      	str	r3, [r7, #12]
}
 800bf0a:	bf00      	nop
 800bf0c:	bf00      	nop
 800bf0e:	e7fd      	b.n	800bf0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d902      	bls.n	800bf20 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	61fb      	str	r3, [r7, #28]
 800bf1e:	e002      	b.n	800bf26 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf24:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf2a:	69fa      	ldr	r2, [r7, #28]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d04c      	beq.n	800bfca <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d147      	bne.n	800bfca <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf3a:	4b26      	ldr	r3, [pc, #152]	@ (800bfd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	69ba      	ldr	r2, [r7, #24]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d10b      	bne.n	800bf5c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	60bb      	str	r3, [r7, #8]
}
 800bf56:	bf00      	nop
 800bf58:	bf00      	nop
 800bf5a:	e7fd      	b.n	800bf58 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	69fa      	ldr	r2, [r7, #28]
 800bf66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	db04      	blt.n	800bf7a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	6959      	ldr	r1, [r3, #20]
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	4613      	mov	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4a13      	ldr	r2, [pc, #76]	@ (800bfd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bf8a:	4413      	add	r3, r2
 800bf8c:	4299      	cmp	r1, r3
 800bf8e:	d11c      	bne.n	800bfca <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	3304      	adds	r3, #4
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fd fffb 	bl	8009f90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf9e:	4b0f      	ldr	r3, [pc, #60]	@ (800bfdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d903      	bls.n	800bfae <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfaa:	4a0c      	ldr	r2, [pc, #48]	@ (800bfdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4a07      	ldr	r2, [pc, #28]	@ (800bfd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bfbc:	441a      	add	r2, r3
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	f7fd ff86 	bl	8009ed6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfca:	bf00      	nop
 800bfcc:	3720      	adds	r7, #32
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	24000df0 	.word	0x24000df0
 800bfd8:	24000df4 	.word	0x24000df4
 800bfdc:	240012cc 	.word	0x240012cc

0800bfe0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bfe0:	b480      	push	{r7}
 800bfe2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bfe4:	4b07      	ldr	r3, [pc, #28]	@ (800c004 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d004      	beq.n	800bff6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bfec:	4b05      	ldr	r3, [pc, #20]	@ (800c004 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bff2:	3201      	adds	r2, #1
 800bff4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bff6:	4b03      	ldr	r3, [pc, #12]	@ (800c004 <pvTaskIncrementMutexHeldCount+0x24>)
 800bff8:	681b      	ldr	r3, [r3, #0]
	}
 800bffa:	4618      	mov	r0, r3
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	24000df0 	.word	0x24000df0

0800c008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c012:	4b21      	ldr	r3, [pc, #132]	@ (800c098 <prvAddCurrentTaskToDelayedList+0x90>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c018:	4b20      	ldr	r3, [pc, #128]	@ (800c09c <prvAddCurrentTaskToDelayedList+0x94>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3304      	adds	r3, #4
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fd ffb6 	bl	8009f90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02a:	d10a      	bne.n	800c042 <prvAddCurrentTaskToDelayedList+0x3a>
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d007      	beq.n	800c042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c032:	4b1a      	ldr	r3, [pc, #104]	@ (800c09c <prvAddCurrentTaskToDelayedList+0x94>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	3304      	adds	r3, #4
 800c038:	4619      	mov	r1, r3
 800c03a:	4819      	ldr	r0, [pc, #100]	@ (800c0a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c03c:	f7fd ff4b 	bl	8009ed6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c040:	e026      	b.n	800c090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4413      	add	r3, r2
 800c048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c04a:	4b14      	ldr	r3, [pc, #80]	@ (800c09c <prvAddCurrentTaskToDelayedList+0x94>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68ba      	ldr	r2, [r7, #8]
 800c050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	429a      	cmp	r2, r3
 800c058:	d209      	bcs.n	800c06e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c05a:	4b12      	ldr	r3, [pc, #72]	@ (800c0a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	4b0f      	ldr	r3, [pc, #60]	@ (800c09c <prvAddCurrentTaskToDelayedList+0x94>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3304      	adds	r3, #4
 800c064:	4619      	mov	r1, r3
 800c066:	4610      	mov	r0, r2
 800c068:	f7fd ff59 	bl	8009f1e <vListInsert>
}
 800c06c:	e010      	b.n	800c090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c06e:	4b0e      	ldr	r3, [pc, #56]	@ (800c0a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	4b0a      	ldr	r3, [pc, #40]	@ (800c09c <prvAddCurrentTaskToDelayedList+0x94>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3304      	adds	r3, #4
 800c078:	4619      	mov	r1, r3
 800c07a:	4610      	mov	r0, r2
 800c07c:	f7fd ff4f 	bl	8009f1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c080:	4b0a      	ldr	r3, [pc, #40]	@ (800c0ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	429a      	cmp	r2, r3
 800c088:	d202      	bcs.n	800c090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c08a:	4a08      	ldr	r2, [pc, #32]	@ (800c0ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	6013      	str	r3, [r2, #0]
}
 800c090:	bf00      	nop
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	240012c8 	.word	0x240012c8
 800c09c:	24000df0 	.word	0x24000df0
 800c0a0:	240012b0 	.word	0x240012b0
 800c0a4:	24001280 	.word	0x24001280
 800c0a8:	2400127c 	.word	0x2400127c
 800c0ac:	240012e4 	.word	0x240012e4

0800c0b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b08a      	sub	sp, #40	@ 0x28
 800c0b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0ba:	f000 fb13 	bl	800c6e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0be:	4b1d      	ldr	r3, [pc, #116]	@ (800c134 <xTimerCreateTimerTask+0x84>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d021      	beq.n	800c10a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c0ce:	1d3a      	adds	r2, r7, #4
 800c0d0:	f107 0108 	add.w	r1, r7, #8
 800c0d4:	f107 030c 	add.w	r3, r7, #12
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fd feb5 	bl	8009e48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c0de:	6879      	ldr	r1, [r7, #4]
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	9202      	str	r2, [sp, #8]
 800c0e6:	9301      	str	r3, [sp, #4]
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	460a      	mov	r2, r1
 800c0f0:	4911      	ldr	r1, [pc, #68]	@ (800c138 <xTimerCreateTimerTask+0x88>)
 800c0f2:	4812      	ldr	r0, [pc, #72]	@ (800c13c <xTimerCreateTimerTask+0x8c>)
 800c0f4:	f7fe ffa2 	bl	800b03c <xTaskCreateStatic>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	4a11      	ldr	r2, [pc, #68]	@ (800c140 <xTimerCreateTimerTask+0x90>)
 800c0fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c0fe:	4b10      	ldr	r3, [pc, #64]	@ (800c140 <xTimerCreateTimerTask+0x90>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c106:	2301      	movs	r3, #1
 800c108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10b      	bne.n	800c128 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	613b      	str	r3, [r7, #16]
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	e7fd      	b.n	800c124 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c128:	697b      	ldr	r3, [r7, #20]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	24001320 	.word	0x24001320
 800c138:	0802a5dc 	.word	0x0802a5dc
 800c13c:	0800c27d 	.word	0x0800c27d
 800c140:	24001324 	.word	0x24001324

0800c144 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b08a      	sub	sp, #40	@ 0x28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c152:	2300      	movs	r3, #0
 800c154:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10b      	bne.n	800c174 <xTimerGenericCommand+0x30>
	__asm volatile
 800c15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c160:	f383 8811 	msr	BASEPRI, r3
 800c164:	f3bf 8f6f 	isb	sy
 800c168:	f3bf 8f4f 	dsb	sy
 800c16c:	623b      	str	r3, [r7, #32]
}
 800c16e:	bf00      	nop
 800c170:	bf00      	nop
 800c172:	e7fd      	b.n	800c170 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c174:	4b19      	ldr	r3, [pc, #100]	@ (800c1dc <xTimerGenericCommand+0x98>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d02a      	beq.n	800c1d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b05      	cmp	r3, #5
 800c18c:	dc18      	bgt.n	800c1c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c18e:	f7ff fdad 	bl	800bcec <xTaskGetSchedulerState>
 800c192:	4603      	mov	r3, r0
 800c194:	2b02      	cmp	r3, #2
 800c196:	d109      	bne.n	800c1ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c198:	4b10      	ldr	r3, [pc, #64]	@ (800c1dc <xTimerGenericCommand+0x98>)
 800c19a:	6818      	ldr	r0, [r3, #0]
 800c19c:	f107 0110 	add.w	r1, r7, #16
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1a4:	f7fe f8d2 	bl	800a34c <xQueueGenericSend>
 800c1a8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c1aa:	e012      	b.n	800c1d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1ac:	4b0b      	ldr	r3, [pc, #44]	@ (800c1dc <xTimerGenericCommand+0x98>)
 800c1ae:	6818      	ldr	r0, [r3, #0]
 800c1b0:	f107 0110 	add.w	r1, r7, #16
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f7fe f8c8 	bl	800a34c <xQueueGenericSend>
 800c1bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800c1be:	e008      	b.n	800c1d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1c0:	4b06      	ldr	r3, [pc, #24]	@ (800c1dc <xTimerGenericCommand+0x98>)
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	f107 0110 	add.w	r1, r7, #16
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	f7fe f9c0 	bl	800a550 <xQueueGenericSendFromISR>
 800c1d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3728      	adds	r7, #40	@ 0x28
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	24001320 	.word	0x24001320

0800c1e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b088      	sub	sp, #32
 800c1e4:	af02      	add	r7, sp, #8
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ea:	4b23      	ldr	r3, [pc, #140]	@ (800c278 <prvProcessExpiredTimer+0x98>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fd fec9 	bl	8009f90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c204:	f003 0304 	and.w	r3, r3, #4
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d023      	beq.n	800c254 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	699a      	ldr	r2, [r3, #24]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	18d1      	adds	r1, r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	6978      	ldr	r0, [r7, #20]
 800c21a:	f000 f8d5 	bl	800c3c8 <prvInsertTimerInActiveList>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d020      	beq.n	800c266 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c224:	2300      	movs	r3, #0
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	2300      	movs	r3, #0
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	2100      	movs	r1, #0
 800c22e:	6978      	ldr	r0, [r7, #20]
 800c230:	f7ff ff88 	bl	800c144 <xTimerGenericCommand>
 800c234:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d114      	bne.n	800c266 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	60fb      	str	r3, [r7, #12]
}
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
 800c252:	e7fd      	b.n	800c250 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c25a:	f023 0301 	bic.w	r3, r3, #1
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	6a1b      	ldr	r3, [r3, #32]
 800c26a:	6978      	ldr	r0, [r7, #20]
 800c26c:	4798      	blx	r3
}
 800c26e:	bf00      	nop
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	24001318 	.word	0x24001318

0800c27c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c284:	f107 0308 	add.w	r3, r7, #8
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 f859 	bl	800c340 <prvGetNextExpireTime>
 800c28e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	4619      	mov	r1, r3
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 f805 	bl	800c2a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c29a:	f000 f8d7 	bl	800c44c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c29e:	bf00      	nop
 800c2a0:	e7f0      	b.n	800c284 <prvTimerTask+0x8>
	...

0800c2a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c2ae:	f7ff f929 	bl	800b504 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2b2:	f107 0308 	add.w	r3, r7, #8
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f000 f866 	bl	800c388 <prvSampleTimeNow>
 800c2bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d130      	bne.n	800c326 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d10a      	bne.n	800c2e0 <prvProcessTimerOrBlockTask+0x3c>
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d806      	bhi.n	800c2e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2d2:	f7ff f925 	bl	800b520 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2d6:	68f9      	ldr	r1, [r7, #12]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff ff81 	bl	800c1e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2de:	e024      	b.n	800c32a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d008      	beq.n	800c2f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c2e6:	4b13      	ldr	r3, [pc, #76]	@ (800c334 <prvProcessTimerOrBlockTask+0x90>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <prvProcessTimerOrBlockTask+0x50>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e000      	b.n	800c2f6 <prvProcessTimerOrBlockTask+0x52>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c338 <prvProcessTimerOrBlockTask+0x94>)
 800c2fa:	6818      	ldr	r0, [r3, #0]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	4619      	mov	r1, r3
 800c306:	f7fe fe65 	bl	800afd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c30a:	f7ff f909 	bl	800b520 <xTaskResumeAll>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10a      	bne.n	800c32a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c314:	4b09      	ldr	r3, [pc, #36]	@ (800c33c <prvProcessTimerOrBlockTask+0x98>)
 800c316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	f3bf 8f6f 	isb	sy
}
 800c324:	e001      	b.n	800c32a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c326:	f7ff f8fb 	bl	800b520 <xTaskResumeAll>
}
 800c32a:	bf00      	nop
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	2400131c 	.word	0x2400131c
 800c338:	24001320 	.word	0x24001320
 800c33c:	e000ed04 	.word	0xe000ed04

0800c340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c348:	4b0e      	ldr	r3, [pc, #56]	@ (800c384 <prvGetNextExpireTime+0x44>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <prvGetNextExpireTime+0x16>
 800c352:	2201      	movs	r2, #1
 800c354:	e000      	b.n	800c358 <prvGetNextExpireTime+0x18>
 800c356:	2200      	movs	r2, #0
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d105      	bne.n	800c370 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c364:	4b07      	ldr	r3, [pc, #28]	@ (800c384 <prvGetNextExpireTime+0x44>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	60fb      	str	r3, [r7, #12]
 800c36e:	e001      	b.n	800c374 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c370:	2300      	movs	r3, #0
 800c372:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c374:	68fb      	ldr	r3, [r7, #12]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	24001318 	.word	0x24001318

0800c388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c390:	f7ff f964 	bl	800b65c <xTaskGetTickCount>
 800c394:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c396:	4b0b      	ldr	r3, [pc, #44]	@ (800c3c4 <prvSampleTimeNow+0x3c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d205      	bcs.n	800c3ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c3a0:	f000 f93a 	bl	800c618 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	e002      	b.n	800c3b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c3b2:	4a04      	ldr	r2, [pc, #16]	@ (800c3c4 <prvSampleTimeNow+0x3c>)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	24001328 	.word	0x24001328

0800c3c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d812      	bhi.n	800c414 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	1ad2      	subs	r2, r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d302      	bcc.n	800c402 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	617b      	str	r3, [r7, #20]
 800c400:	e01b      	b.n	800c43a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c402:	4b10      	ldr	r3, [pc, #64]	@ (800c444 <prvInsertTimerInActiveList+0x7c>)
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	3304      	adds	r3, #4
 800c40a:	4619      	mov	r1, r3
 800c40c:	4610      	mov	r0, r2
 800c40e:	f7fd fd86 	bl	8009f1e <vListInsert>
 800c412:	e012      	b.n	800c43a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d206      	bcs.n	800c42a <prvInsertTimerInActiveList+0x62>
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	429a      	cmp	r2, r3
 800c422:	d302      	bcc.n	800c42a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c424:	2301      	movs	r3, #1
 800c426:	617b      	str	r3, [r7, #20]
 800c428:	e007      	b.n	800c43a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c42a:	4b07      	ldr	r3, [pc, #28]	@ (800c448 <prvInsertTimerInActiveList+0x80>)
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	3304      	adds	r3, #4
 800c432:	4619      	mov	r1, r3
 800c434:	4610      	mov	r0, r2
 800c436:	f7fd fd72 	bl	8009f1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c43a:	697b      	ldr	r3, [r7, #20]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	2400131c 	.word	0x2400131c
 800c448:	24001318 	.word	0x24001318

0800c44c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b08e      	sub	sp, #56	@ 0x38
 800c450:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c452:	e0ce      	b.n	800c5f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	da19      	bge.n	800c48e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c45a:	1d3b      	adds	r3, r7, #4
 800c45c:	3304      	adds	r3, #4
 800c45e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10b      	bne.n	800c47e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	61fb      	str	r3, [r7, #28]
}
 800c478:	bf00      	nop
 800c47a:	bf00      	nop
 800c47c:	e7fd      	b.n	800c47a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c484:	6850      	ldr	r0, [r2, #4]
 800c486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c488:	6892      	ldr	r2, [r2, #8]
 800c48a:	4611      	mov	r1, r2
 800c48c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	f2c0 80ae 	blt.w	800c5f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d004      	beq.n	800c4ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fd fd72 	bl	8009f90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4ac:	463b      	mov	r3, r7
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7ff ff6a 	bl	800c388 <prvSampleTimeNow>
 800c4b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b09      	cmp	r3, #9
 800c4ba:	f200 8097 	bhi.w	800c5ec <prvProcessReceivedCommands+0x1a0>
 800c4be:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c4 <prvProcessReceivedCommands+0x78>)
 800c4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c4:	0800c4ed 	.word	0x0800c4ed
 800c4c8:	0800c4ed 	.word	0x0800c4ed
 800c4cc:	0800c4ed 	.word	0x0800c4ed
 800c4d0:	0800c563 	.word	0x0800c563
 800c4d4:	0800c577 	.word	0x0800c577
 800c4d8:	0800c5c3 	.word	0x0800c5c3
 800c4dc:	0800c4ed 	.word	0x0800c4ed
 800c4e0:	0800c4ed 	.word	0x0800c4ed
 800c4e4:	0800c563 	.word	0x0800c563
 800c4e8:	0800c577 	.word	0x0800c577
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4f2:	f043 0301 	orr.w	r3, r3, #1
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	18d1      	adds	r1, r2, r3
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c50a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c50c:	f7ff ff5c 	bl	800c3c8 <prvInsertTimerInActiveList>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d06c      	beq.n	800c5f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c51c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c524:	f003 0304 	and.w	r3, r3, #4
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d061      	beq.n	800c5f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	441a      	add	r2, r3
 800c534:	2300      	movs	r3, #0
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	2300      	movs	r3, #0
 800c53a:	2100      	movs	r1, #0
 800c53c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c53e:	f7ff fe01 	bl	800c144 <xTimerGenericCommand>
 800c542:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c544:	6a3b      	ldr	r3, [r7, #32]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d152      	bne.n	800c5f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	61bb      	str	r3, [r7, #24]
}
 800c55c:	bf00      	nop
 800c55e:	bf00      	nop
 800c560:	e7fd      	b.n	800c55e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c568:	f023 0301 	bic.w	r3, r3, #1
 800c56c:	b2da      	uxtb	r2, r3
 800c56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c570:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c574:	e03d      	b.n	800c5f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c57c:	f043 0301 	orr.w	r3, r3, #1
 800c580:	b2da      	uxtb	r2, r3
 800c582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c584:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c590:	699b      	ldr	r3, [r3, #24]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10b      	bne.n	800c5ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59a:	f383 8811 	msr	BASEPRI, r3
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	f3bf 8f4f 	dsb	sy
 800c5a6:	617b      	str	r3, [r7, #20]
}
 800c5a8:	bf00      	nop
 800c5aa:	bf00      	nop
 800c5ac:	e7fd      	b.n	800c5aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b0:	699a      	ldr	r2, [r3, #24]
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b4:	18d1      	adds	r1, r2, r3
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5bc:	f7ff ff04 	bl	800c3c8 <prvInsertTimerInActiveList>
					break;
 800c5c0:	e017      	b.n	800c5f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5c8:	f003 0302 	and.w	r3, r3, #2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d103      	bne.n	800c5d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c5d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5d2:	f000 fbe9 	bl	800cda8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5d6:	e00c      	b.n	800c5f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5de:	f023 0301 	bic.w	r3, r3, #1
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c5ea:	e002      	b.n	800c5f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c5ec:	bf00      	nop
 800c5ee:	e000      	b.n	800c5f2 <prvProcessReceivedCommands+0x1a6>
					break;
 800c5f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5f2:	4b08      	ldr	r3, [pc, #32]	@ (800c614 <prvProcessReceivedCommands+0x1c8>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	1d39      	adds	r1, r7, #4
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fe f8d6 	bl	800a7ac <xQueueReceive>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	f47f af26 	bne.w	800c454 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c608:	bf00      	nop
 800c60a:	bf00      	nop
 800c60c:	3730      	adds	r7, #48	@ 0x30
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	24001320 	.word	0x24001320

0800c618 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b088      	sub	sp, #32
 800c61c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c61e:	e049      	b.n	800c6b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c620:	4b2e      	ldr	r3, [pc, #184]	@ (800c6dc <prvSwitchTimerLists+0xc4>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c62a:	4b2c      	ldr	r3, [pc, #176]	@ (800c6dc <prvSwitchTimerLists+0xc4>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3304      	adds	r3, #4
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fd fca9 	bl	8009f90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c64c:	f003 0304 	and.w	r3, r3, #4
 800c650:	2b00      	cmp	r3, #0
 800c652:	d02f      	beq.n	800c6b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	699b      	ldr	r3, [r3, #24]
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	4413      	add	r3, r2
 800c65c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	429a      	cmp	r2, r3
 800c664:	d90e      	bls.n	800c684 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c672:	4b1a      	ldr	r3, [pc, #104]	@ (800c6dc <prvSwitchTimerLists+0xc4>)
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	3304      	adds	r3, #4
 800c67a:	4619      	mov	r1, r3
 800c67c:	4610      	mov	r0, r2
 800c67e:	f7fd fc4e 	bl	8009f1e <vListInsert>
 800c682:	e017      	b.n	800c6b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c684:	2300      	movs	r3, #0
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	2300      	movs	r3, #0
 800c68a:	693a      	ldr	r2, [r7, #16]
 800c68c:	2100      	movs	r1, #0
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f7ff fd58 	bl	800c144 <xTimerGenericCommand>
 800c694:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d10b      	bne.n	800c6b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a0:	f383 8811 	msr	BASEPRI, r3
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	603b      	str	r3, [r7, #0]
}
 800c6ae:	bf00      	nop
 800c6b0:	bf00      	nop
 800c6b2:	e7fd      	b.n	800c6b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6b4:	4b09      	ldr	r3, [pc, #36]	@ (800c6dc <prvSwitchTimerLists+0xc4>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1b0      	bne.n	800c620 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c6be:	4b07      	ldr	r3, [pc, #28]	@ (800c6dc <prvSwitchTimerLists+0xc4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c6c4:	4b06      	ldr	r3, [pc, #24]	@ (800c6e0 <prvSwitchTimerLists+0xc8>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a04      	ldr	r2, [pc, #16]	@ (800c6dc <prvSwitchTimerLists+0xc4>)
 800c6ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6cc:	4a04      	ldr	r2, [pc, #16]	@ (800c6e0 <prvSwitchTimerLists+0xc8>)
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	6013      	str	r3, [r2, #0]
}
 800c6d2:	bf00      	nop
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	24001318 	.word	0x24001318
 800c6e0:	2400131c 	.word	0x2400131c

0800c6e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6ea:	f000 f96d 	bl	800c9c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6ee:	4b15      	ldr	r3, [pc, #84]	@ (800c744 <prvCheckForValidListAndQueue+0x60>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d120      	bne.n	800c738 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6f6:	4814      	ldr	r0, [pc, #80]	@ (800c748 <prvCheckForValidListAndQueue+0x64>)
 800c6f8:	f7fd fbc0 	bl	8009e7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6fc:	4813      	ldr	r0, [pc, #76]	@ (800c74c <prvCheckForValidListAndQueue+0x68>)
 800c6fe:	f7fd fbbd 	bl	8009e7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c702:	4b13      	ldr	r3, [pc, #76]	@ (800c750 <prvCheckForValidListAndQueue+0x6c>)
 800c704:	4a10      	ldr	r2, [pc, #64]	@ (800c748 <prvCheckForValidListAndQueue+0x64>)
 800c706:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c708:	4b12      	ldr	r3, [pc, #72]	@ (800c754 <prvCheckForValidListAndQueue+0x70>)
 800c70a:	4a10      	ldr	r2, [pc, #64]	@ (800c74c <prvCheckForValidListAndQueue+0x68>)
 800c70c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c70e:	2300      	movs	r3, #0
 800c710:	9300      	str	r3, [sp, #0]
 800c712:	4b11      	ldr	r3, [pc, #68]	@ (800c758 <prvCheckForValidListAndQueue+0x74>)
 800c714:	4a11      	ldr	r2, [pc, #68]	@ (800c75c <prvCheckForValidListAndQueue+0x78>)
 800c716:	2110      	movs	r1, #16
 800c718:	200a      	movs	r0, #10
 800c71a:	f7fd fccd 	bl	800a0b8 <xQueueGenericCreateStatic>
 800c71e:	4603      	mov	r3, r0
 800c720:	4a08      	ldr	r2, [pc, #32]	@ (800c744 <prvCheckForValidListAndQueue+0x60>)
 800c722:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c724:	4b07      	ldr	r3, [pc, #28]	@ (800c744 <prvCheckForValidListAndQueue+0x60>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d005      	beq.n	800c738 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c72c:	4b05      	ldr	r3, [pc, #20]	@ (800c744 <prvCheckForValidListAndQueue+0x60>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	490b      	ldr	r1, [pc, #44]	@ (800c760 <prvCheckForValidListAndQueue+0x7c>)
 800c732:	4618      	mov	r0, r3
 800c734:	f7fe fbfa 	bl	800af2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c738:	f000 f978 	bl	800ca2c <vPortExitCritical>
}
 800c73c:	bf00      	nop
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	24001320 	.word	0x24001320
 800c748:	240012f0 	.word	0x240012f0
 800c74c:	24001304 	.word	0x24001304
 800c750:	24001318 	.word	0x24001318
 800c754:	2400131c 	.word	0x2400131c
 800c758:	240013cc 	.word	0x240013cc
 800c75c:	2400132c 	.word	0x2400132c
 800c760:	0802a5e4 	.word	0x0802a5e4

0800c764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	3b04      	subs	r3, #4
 800c774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c77c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3b04      	subs	r3, #4
 800c782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	f023 0201 	bic.w	r2, r3, #1
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3b04      	subs	r3, #4
 800c792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c794:	4a0c      	ldr	r2, [pc, #48]	@ (800c7c8 <pxPortInitialiseStack+0x64>)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	3b14      	subs	r3, #20
 800c79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	3b04      	subs	r3, #4
 800c7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f06f 0202 	mvn.w	r2, #2
 800c7b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	3b20      	subs	r3, #32
 800c7b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3714      	adds	r7, #20
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr
 800c7c8:	0800c7cd 	.word	0x0800c7cd

0800c7cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7d6:	4b13      	ldr	r3, [pc, #76]	@ (800c824 <prvTaskExitError+0x58>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7de:	d00b      	beq.n	800c7f8 <prvTaskExitError+0x2c>
	__asm volatile
 800c7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e4:	f383 8811 	msr	BASEPRI, r3
 800c7e8:	f3bf 8f6f 	isb	sy
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	60fb      	str	r3, [r7, #12]
}
 800c7f2:	bf00      	nop
 800c7f4:	bf00      	nop
 800c7f6:	e7fd      	b.n	800c7f4 <prvTaskExitError+0x28>
	__asm volatile
 800c7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	60bb      	str	r3, [r7, #8]
}
 800c80a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c80c:	bf00      	nop
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d0fc      	beq.n	800c80e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop
 800c818:	3714      	adds	r7, #20
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	24000014 	.word	0x24000014
	...

0800c830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c830:	4b07      	ldr	r3, [pc, #28]	@ (800c850 <pxCurrentTCBConst2>)
 800c832:	6819      	ldr	r1, [r3, #0]
 800c834:	6808      	ldr	r0, [r1, #0]
 800c836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83a:	f380 8809 	msr	PSP, r0
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f04f 0000 	mov.w	r0, #0
 800c846:	f380 8811 	msr	BASEPRI, r0
 800c84a:	4770      	bx	lr
 800c84c:	f3af 8000 	nop.w

0800c850 <pxCurrentTCBConst2>:
 800c850:	24000df0 	.word	0x24000df0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c854:	bf00      	nop
 800c856:	bf00      	nop

0800c858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c858:	4808      	ldr	r0, [pc, #32]	@ (800c87c <prvPortStartFirstTask+0x24>)
 800c85a:	6800      	ldr	r0, [r0, #0]
 800c85c:	6800      	ldr	r0, [r0, #0]
 800c85e:	f380 8808 	msr	MSP, r0
 800c862:	f04f 0000 	mov.w	r0, #0
 800c866:	f380 8814 	msr	CONTROL, r0
 800c86a:	b662      	cpsie	i
 800c86c:	b661      	cpsie	f
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	df00      	svc	0
 800c878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c87a:	bf00      	nop
 800c87c:	e000ed08 	.word	0xe000ed08

0800c880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c886:	4b47      	ldr	r3, [pc, #284]	@ (800c9a4 <xPortStartScheduler+0x124>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a47      	ldr	r2, [pc, #284]	@ (800c9a8 <xPortStartScheduler+0x128>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d10b      	bne.n	800c8a8 <xPortStartScheduler+0x28>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	60fb      	str	r3, [r7, #12]
}
 800c8a2:	bf00      	nop
 800c8a4:	bf00      	nop
 800c8a6:	e7fd      	b.n	800c8a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c8a8:	4b3e      	ldr	r3, [pc, #248]	@ (800c9a4 <xPortStartScheduler+0x124>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a3f      	ldr	r2, [pc, #252]	@ (800c9ac <xPortStartScheduler+0x12c>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d10b      	bne.n	800c8ca <xPortStartScheduler+0x4a>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	613b      	str	r3, [r7, #16]
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop
 800c8c8:	e7fd      	b.n	800c8c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8ca:	4b39      	ldr	r3, [pc, #228]	@ (800c9b0 <xPortStartScheduler+0x130>)
 800c8cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	22ff      	movs	r2, #255	@ 0xff
 800c8da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8e4:	78fb      	ldrb	r3, [r7, #3]
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	4b31      	ldr	r3, [pc, #196]	@ (800c9b4 <xPortStartScheduler+0x134>)
 800c8f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8f2:	4b31      	ldr	r3, [pc, #196]	@ (800c9b8 <xPortStartScheduler+0x138>)
 800c8f4:	2207      	movs	r2, #7
 800c8f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8f8:	e009      	b.n	800c90e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c8fa:	4b2f      	ldr	r3, [pc, #188]	@ (800c9b8 <xPortStartScheduler+0x138>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	4a2d      	ldr	r2, [pc, #180]	@ (800c9b8 <xPortStartScheduler+0x138>)
 800c902:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c904:	78fb      	ldrb	r3, [r7, #3]
 800c906:	b2db      	uxtb	r3, r3
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c90e:	78fb      	ldrb	r3, [r7, #3]
 800c910:	b2db      	uxtb	r3, r3
 800c912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c916:	2b80      	cmp	r3, #128	@ 0x80
 800c918:	d0ef      	beq.n	800c8fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c91a:	4b27      	ldr	r3, [pc, #156]	@ (800c9b8 <xPortStartScheduler+0x138>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f1c3 0307 	rsb	r3, r3, #7
 800c922:	2b04      	cmp	r3, #4
 800c924:	d00b      	beq.n	800c93e <xPortStartScheduler+0xbe>
	__asm volatile
 800c926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92a:	f383 8811 	msr	BASEPRI, r3
 800c92e:	f3bf 8f6f 	isb	sy
 800c932:	f3bf 8f4f 	dsb	sy
 800c936:	60bb      	str	r3, [r7, #8]
}
 800c938:	bf00      	nop
 800c93a:	bf00      	nop
 800c93c:	e7fd      	b.n	800c93a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c93e:	4b1e      	ldr	r3, [pc, #120]	@ (800c9b8 <xPortStartScheduler+0x138>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	4a1c      	ldr	r2, [pc, #112]	@ (800c9b8 <xPortStartScheduler+0x138>)
 800c946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c948:	4b1b      	ldr	r3, [pc, #108]	@ (800c9b8 <xPortStartScheduler+0x138>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c950:	4a19      	ldr	r2, [pc, #100]	@ (800c9b8 <xPortStartScheduler+0x138>)
 800c952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	b2da      	uxtb	r2, r3
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c95c:	4b17      	ldr	r3, [pc, #92]	@ (800c9bc <xPortStartScheduler+0x13c>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a16      	ldr	r2, [pc, #88]	@ (800c9bc <xPortStartScheduler+0x13c>)
 800c962:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c968:	4b14      	ldr	r3, [pc, #80]	@ (800c9bc <xPortStartScheduler+0x13c>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a13      	ldr	r2, [pc, #76]	@ (800c9bc <xPortStartScheduler+0x13c>)
 800c96e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c974:	f000 f8da 	bl	800cb2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c978:	4b11      	ldr	r3, [pc, #68]	@ (800c9c0 <xPortStartScheduler+0x140>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c97e:	f000 f8f9 	bl	800cb74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c982:	4b10      	ldr	r3, [pc, #64]	@ (800c9c4 <xPortStartScheduler+0x144>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a0f      	ldr	r2, [pc, #60]	@ (800c9c4 <xPortStartScheduler+0x144>)
 800c988:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c98c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c98e:	f7ff ff63 	bl	800c858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c992:	f7fe ff2d 	bl	800b7f0 <vTaskSwitchContext>
	prvTaskExitError();
 800c996:	f7ff ff19 	bl	800c7cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3718      	adds	r7, #24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	e000ed00 	.word	0xe000ed00
 800c9a8:	410fc271 	.word	0x410fc271
 800c9ac:	410fc270 	.word	0x410fc270
 800c9b0:	e000e400 	.word	0xe000e400
 800c9b4:	2400141c 	.word	0x2400141c
 800c9b8:	24001420 	.word	0x24001420
 800c9bc:	e000ed20 	.word	0xe000ed20
 800c9c0:	24000014 	.word	0x24000014
 800c9c4:	e000ef34 	.word	0xe000ef34

0800c9c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	607b      	str	r3, [r7, #4]
}
 800c9e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9e2:	4b10      	ldr	r3, [pc, #64]	@ (800ca24 <vPortEnterCritical+0x5c>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	4a0e      	ldr	r2, [pc, #56]	@ (800ca24 <vPortEnterCritical+0x5c>)
 800c9ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9ec:	4b0d      	ldr	r3, [pc, #52]	@ (800ca24 <vPortEnterCritical+0x5c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d110      	bne.n	800ca16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9f4:	4b0c      	ldr	r3, [pc, #48]	@ (800ca28 <vPortEnterCritical+0x60>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00b      	beq.n	800ca16 <vPortEnterCritical+0x4e>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	603b      	str	r3, [r7, #0]
}
 800ca10:	bf00      	nop
 800ca12:	bf00      	nop
 800ca14:	e7fd      	b.n	800ca12 <vPortEnterCritical+0x4a>
	}
}
 800ca16:	bf00      	nop
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	24000014 	.word	0x24000014
 800ca28:	e000ed04 	.word	0xe000ed04

0800ca2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca32:	4b12      	ldr	r3, [pc, #72]	@ (800ca7c <vPortExitCritical+0x50>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10b      	bne.n	800ca52 <vPortExitCritical+0x26>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	607b      	str	r3, [r7, #4]
}
 800ca4c:	bf00      	nop
 800ca4e:	bf00      	nop
 800ca50:	e7fd      	b.n	800ca4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca52:	4b0a      	ldr	r3, [pc, #40]	@ (800ca7c <vPortExitCritical+0x50>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	4a08      	ldr	r2, [pc, #32]	@ (800ca7c <vPortExitCritical+0x50>)
 800ca5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca5c:	4b07      	ldr	r3, [pc, #28]	@ (800ca7c <vPortExitCritical+0x50>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d105      	bne.n	800ca70 <vPortExitCritical+0x44>
 800ca64:	2300      	movs	r3, #0
 800ca66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	f383 8811 	msr	BASEPRI, r3
}
 800ca6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca70:	bf00      	nop
 800ca72:	370c      	adds	r7, #12
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	24000014 	.word	0x24000014

0800ca80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca80:	f3ef 8009 	mrs	r0, PSP
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	4b15      	ldr	r3, [pc, #84]	@ (800cae0 <pxCurrentTCBConst>)
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	f01e 0f10 	tst.w	lr, #16
 800ca90:	bf08      	it	eq
 800ca92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9a:	6010      	str	r0, [r2, #0]
 800ca9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800caa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800caa4:	f380 8811 	msr	BASEPRI, r0
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f7fe fe9e 	bl	800b7f0 <vTaskSwitchContext>
 800cab4:	f04f 0000 	mov.w	r0, #0
 800cab8:	f380 8811 	msr	BASEPRI, r0
 800cabc:	bc09      	pop	{r0, r3}
 800cabe:	6819      	ldr	r1, [r3, #0]
 800cac0:	6808      	ldr	r0, [r1, #0]
 800cac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac6:	f01e 0f10 	tst.w	lr, #16
 800caca:	bf08      	it	eq
 800cacc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cad0:	f380 8809 	msr	PSP, r0
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	f3af 8000 	nop.w

0800cae0 <pxCurrentTCBConst>:
 800cae0:	24000df0 	.word	0x24000df0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop

0800cae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	607b      	str	r3, [r7, #4]
}
 800cb00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb02:	f7fe fdbb 	bl	800b67c <xTaskIncrementTick>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d003      	beq.n	800cb14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb0c:	4b06      	ldr	r3, [pc, #24]	@ (800cb28 <xPortSysTickHandler+0x40>)
 800cb0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	2300      	movs	r3, #0
 800cb16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	f383 8811 	msr	BASEPRI, r3
}
 800cb1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb20:	bf00      	nop
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	e000ed04 	.word	0xe000ed04

0800cb2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb30:	4b0b      	ldr	r3, [pc, #44]	@ (800cb60 <vPortSetupTimerInterrupt+0x34>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb36:	4b0b      	ldr	r3, [pc, #44]	@ (800cb64 <vPortSetupTimerInterrupt+0x38>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb3c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb68 <vPortSetupTimerInterrupt+0x3c>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a0a      	ldr	r2, [pc, #40]	@ (800cb6c <vPortSetupTimerInterrupt+0x40>)
 800cb42:	fba2 2303 	umull	r2, r3, r2, r3
 800cb46:	099b      	lsrs	r3, r3, #6
 800cb48:	4a09      	ldr	r2, [pc, #36]	@ (800cb70 <vPortSetupTimerInterrupt+0x44>)
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb4e:	4b04      	ldr	r3, [pc, #16]	@ (800cb60 <vPortSetupTimerInterrupt+0x34>)
 800cb50:	2207      	movs	r2, #7
 800cb52:	601a      	str	r2, [r3, #0]
}
 800cb54:	bf00      	nop
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	e000e010 	.word	0xe000e010
 800cb64:	e000e018 	.word	0xe000e018
 800cb68:	24000004 	.word	0x24000004
 800cb6c:	10624dd3 	.word	0x10624dd3
 800cb70:	e000e014 	.word	0xe000e014

0800cb74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cb84 <vPortEnableVFP+0x10>
 800cb78:	6801      	ldr	r1, [r0, #0]
 800cb7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cb7e:	6001      	str	r1, [r0, #0]
 800cb80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb82:	bf00      	nop
 800cb84:	e000ed88 	.word	0xe000ed88

0800cb88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb8e:	f3ef 8305 	mrs	r3, IPSR
 800cb92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2b0f      	cmp	r3, #15
 800cb98:	d915      	bls.n	800cbc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb9a:	4a18      	ldr	r2, [pc, #96]	@ (800cbfc <vPortValidateInterruptPriority+0x74>)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	4413      	add	r3, r2
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cba4:	4b16      	ldr	r3, [pc, #88]	@ (800cc00 <vPortValidateInterruptPriority+0x78>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	7afa      	ldrb	r2, [r7, #11]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d20b      	bcs.n	800cbc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	607b      	str	r3, [r7, #4]
}
 800cbc0:	bf00      	nop
 800cbc2:	bf00      	nop
 800cbc4:	e7fd      	b.n	800cbc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cbc6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc04 <vPortValidateInterruptPriority+0x7c>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cbce:	4b0e      	ldr	r3, [pc, #56]	@ (800cc08 <vPortValidateInterruptPriority+0x80>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d90b      	bls.n	800cbee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	603b      	str	r3, [r7, #0]
}
 800cbe8:	bf00      	nop
 800cbea:	bf00      	nop
 800cbec:	e7fd      	b.n	800cbea <vPortValidateInterruptPriority+0x62>
	}
 800cbee:	bf00      	nop
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	e000e3f0 	.word	0xe000e3f0
 800cc00:	2400141c 	.word	0x2400141c
 800cc04:	e000ed0c 	.word	0xe000ed0c
 800cc08:	24001420 	.word	0x24001420

0800cc0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08a      	sub	sp, #40	@ 0x28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc14:	2300      	movs	r3, #0
 800cc16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc18:	f7fe fc74 	bl	800b504 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc1c:	4b5c      	ldr	r3, [pc, #368]	@ (800cd90 <pvPortMalloc+0x184>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d101      	bne.n	800cc28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc24:	f000 f924 	bl	800ce70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc28:	4b5a      	ldr	r3, [pc, #360]	@ (800cd94 <pvPortMalloc+0x188>)
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4013      	ands	r3, r2
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f040 8095 	bne.w	800cd60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d01e      	beq.n	800cc7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cc3c:	2208      	movs	r2, #8
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4413      	add	r3, r2
 800cc42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f003 0307 	and.w	r3, r3, #7
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d015      	beq.n	800cc7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f023 0307 	bic.w	r3, r3, #7
 800cc54:	3308      	adds	r3, #8
 800cc56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f003 0307 	and.w	r3, r3, #7
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00b      	beq.n	800cc7a <pvPortMalloc+0x6e>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	617b      	str	r3, [r7, #20]
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop
 800cc78:	e7fd      	b.n	800cc76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d06f      	beq.n	800cd60 <pvPortMalloc+0x154>
 800cc80:	4b45      	ldr	r3, [pc, #276]	@ (800cd98 <pvPortMalloc+0x18c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d86a      	bhi.n	800cd60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc8a:	4b44      	ldr	r3, [pc, #272]	@ (800cd9c <pvPortMalloc+0x190>)
 800cc8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc8e:	4b43      	ldr	r3, [pc, #268]	@ (800cd9c <pvPortMalloc+0x190>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc94:	e004      	b.n	800cca0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d903      	bls.n	800ccb2 <pvPortMalloc+0xa6>
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1f1      	bne.n	800cc96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ccb2:	4b37      	ldr	r3, [pc, #220]	@ (800cd90 <pvPortMalloc+0x184>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d051      	beq.n	800cd60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ccbc:	6a3b      	ldr	r3, [r7, #32]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2208      	movs	r2, #8
 800ccc2:	4413      	add	r3, r2
 800ccc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	1ad2      	subs	r2, r2, r3
 800ccd6:	2308      	movs	r3, #8
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d920      	bls.n	800cd20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4413      	add	r3, r2
 800cce4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	f003 0307 	and.w	r3, r3, #7
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00b      	beq.n	800cd08 <pvPortMalloc+0xfc>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	613b      	str	r3, [r7, #16]
}
 800cd02:	bf00      	nop
 800cd04:	bf00      	nop
 800cd06:	e7fd      	b.n	800cd04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0a:	685a      	ldr	r2, [r3, #4]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	1ad2      	subs	r2, r2, r3
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd1a:	69b8      	ldr	r0, [r7, #24]
 800cd1c:	f000 f90a 	bl	800cf34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd20:	4b1d      	ldr	r3, [pc, #116]	@ (800cd98 <pvPortMalloc+0x18c>)
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	4a1b      	ldr	r2, [pc, #108]	@ (800cd98 <pvPortMalloc+0x18c>)
 800cd2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd2e:	4b1a      	ldr	r3, [pc, #104]	@ (800cd98 <pvPortMalloc+0x18c>)
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	4b1b      	ldr	r3, [pc, #108]	@ (800cda0 <pvPortMalloc+0x194>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d203      	bcs.n	800cd42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd3a:	4b17      	ldr	r3, [pc, #92]	@ (800cd98 <pvPortMalloc+0x18c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a18      	ldr	r2, [pc, #96]	@ (800cda0 <pvPortMalloc+0x194>)
 800cd40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd44:	685a      	ldr	r2, [r3, #4]
 800cd46:	4b13      	ldr	r3, [pc, #76]	@ (800cd94 <pvPortMalloc+0x188>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	431a      	orrs	r2, r3
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd52:	2200      	movs	r2, #0
 800cd54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd56:	4b13      	ldr	r3, [pc, #76]	@ (800cda4 <pvPortMalloc+0x198>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	4a11      	ldr	r2, [pc, #68]	@ (800cda4 <pvPortMalloc+0x198>)
 800cd5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd60:	f7fe fbde 	bl	800b520 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	f003 0307 	and.w	r3, r3, #7
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00b      	beq.n	800cd86 <pvPortMalloc+0x17a>
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	60fb      	str	r3, [r7, #12]
}
 800cd80:	bf00      	nop
 800cd82:	bf00      	nop
 800cd84:	e7fd      	b.n	800cd82 <pvPortMalloc+0x176>
	return pvReturn;
 800cd86:	69fb      	ldr	r3, [r7, #28]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3728      	adds	r7, #40	@ 0x28
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	2400502c 	.word	0x2400502c
 800cd94:	24005040 	.word	0x24005040
 800cd98:	24005030 	.word	0x24005030
 800cd9c:	24005024 	.word	0x24005024
 800cda0:	24005034 	.word	0x24005034
 800cda4:	24005038 	.word	0x24005038

0800cda8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d04f      	beq.n	800ce5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cdba:	2308      	movs	r3, #8
 800cdbc:	425b      	negs	r3, r3
 800cdbe:	697a      	ldr	r2, [r7, #20]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	4b25      	ldr	r3, [pc, #148]	@ (800ce64 <vPortFree+0xbc>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10b      	bne.n	800cdee <vPortFree+0x46>
	__asm volatile
 800cdd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	60fb      	str	r3, [r7, #12]
}
 800cde8:	bf00      	nop
 800cdea:	bf00      	nop
 800cdec:	e7fd      	b.n	800cdea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00b      	beq.n	800ce0e <vPortFree+0x66>
	__asm volatile
 800cdf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdfa:	f383 8811 	msr	BASEPRI, r3
 800cdfe:	f3bf 8f6f 	isb	sy
 800ce02:	f3bf 8f4f 	dsb	sy
 800ce06:	60bb      	str	r3, [r7, #8]
}
 800ce08:	bf00      	nop
 800ce0a:	bf00      	nop
 800ce0c:	e7fd      	b.n	800ce0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	685a      	ldr	r2, [r3, #4]
 800ce12:	4b14      	ldr	r3, [pc, #80]	@ (800ce64 <vPortFree+0xbc>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4013      	ands	r3, r2
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d01e      	beq.n	800ce5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d11a      	bne.n	800ce5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	4b0e      	ldr	r3, [pc, #56]	@ (800ce64 <vPortFree+0xbc>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	43db      	mvns	r3, r3
 800ce2e:	401a      	ands	r2, r3
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce34:	f7fe fb66 	bl	800b504 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ce68 <vPortFree+0xc0>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4413      	add	r3, r2
 800ce42:	4a09      	ldr	r2, [pc, #36]	@ (800ce68 <vPortFree+0xc0>)
 800ce44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce46:	6938      	ldr	r0, [r7, #16]
 800ce48:	f000 f874 	bl	800cf34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce4c:	4b07      	ldr	r3, [pc, #28]	@ (800ce6c <vPortFree+0xc4>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3301      	adds	r3, #1
 800ce52:	4a06      	ldr	r2, [pc, #24]	@ (800ce6c <vPortFree+0xc4>)
 800ce54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce56:	f7fe fb63 	bl	800b520 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce5a:	bf00      	nop
 800ce5c:	3718      	adds	r7, #24
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	24005040 	.word	0x24005040
 800ce68:	24005030 	.word	0x24005030
 800ce6c:	2400503c 	.word	0x2400503c

0800ce70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ce7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce7c:	4b27      	ldr	r3, [pc, #156]	@ (800cf1c <prvHeapInit+0xac>)
 800ce7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f003 0307 	and.w	r3, r3, #7
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00c      	beq.n	800cea4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	3307      	adds	r3, #7
 800ce8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f023 0307 	bic.w	r3, r3, #7
 800ce96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	4a1f      	ldr	r2, [pc, #124]	@ (800cf1c <prvHeapInit+0xac>)
 800cea0:	4413      	add	r3, r2
 800cea2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cea8:	4a1d      	ldr	r2, [pc, #116]	@ (800cf20 <prvHeapInit+0xb0>)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ceae:	4b1c      	ldr	r3, [pc, #112]	@ (800cf20 <prvHeapInit+0xb0>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	4413      	add	r3, r2
 800ceba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cebc:	2208      	movs	r2, #8
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	1a9b      	subs	r3, r3, r2
 800cec2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f023 0307 	bic.w	r3, r3, #7
 800ceca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	4a15      	ldr	r2, [pc, #84]	@ (800cf24 <prvHeapInit+0xb4>)
 800ced0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ced2:	4b14      	ldr	r3, [pc, #80]	@ (800cf24 <prvHeapInit+0xb4>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2200      	movs	r2, #0
 800ced8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ceda:	4b12      	ldr	r3, [pc, #72]	@ (800cf24 <prvHeapInit+0xb4>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2200      	movs	r2, #0
 800cee0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	1ad2      	subs	r2, r2, r3
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cef0:	4b0c      	ldr	r3, [pc, #48]	@ (800cf24 <prvHeapInit+0xb4>)
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	4a0a      	ldr	r2, [pc, #40]	@ (800cf28 <prvHeapInit+0xb8>)
 800cefe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	4a09      	ldr	r2, [pc, #36]	@ (800cf2c <prvHeapInit+0xbc>)
 800cf06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf08:	4b09      	ldr	r3, [pc, #36]	@ (800cf30 <prvHeapInit+0xc0>)
 800cf0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cf0e:	601a      	str	r2, [r3, #0]
}
 800cf10:	bf00      	nop
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	24001424 	.word	0x24001424
 800cf20:	24005024 	.word	0x24005024
 800cf24:	2400502c 	.word	0x2400502c
 800cf28:	24005034 	.word	0x24005034
 800cf2c:	24005030 	.word	0x24005030
 800cf30:	24005040 	.word	0x24005040

0800cf34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf3c:	4b28      	ldr	r3, [pc, #160]	@ (800cfe0 <prvInsertBlockIntoFreeList+0xac>)
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	e002      	b.n	800cf48 <prvInsertBlockIntoFreeList+0x14>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d8f7      	bhi.n	800cf42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d108      	bne.n	800cf76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	685a      	ldr	r2, [r3, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	441a      	add	r2, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	441a      	add	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d118      	bne.n	800cfbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	4b15      	ldr	r3, [pc, #84]	@ (800cfe4 <prvInsertBlockIntoFreeList+0xb0>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d00d      	beq.n	800cfb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685a      	ldr	r2, [r3, #4]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	441a      	add	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	601a      	str	r2, [r3, #0]
 800cfb0:	e008      	b.n	800cfc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cfb2:	4b0c      	ldr	r3, [pc, #48]	@ (800cfe4 <prvInsertBlockIntoFreeList+0xb0>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	e003      	b.n	800cfc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d002      	beq.n	800cfd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfd2:	bf00      	nop
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	24005024 	.word	0x24005024
 800cfe4:	2400502c 	.word	0x2400502c

0800cfe8 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	af00      	add	r7, sp, #0
}
 800cfec:	bf00      	nop
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr

0800cff6 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800cff6:	b580      	push	{r7, lr}
 800cff8:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800cffa:	f004 fb69 	bl	80116d0 <touchgfx_components_init>
    touchgfx_init();
 800cffe:	f004 fb3d 	bl	801167c <touchgfx_init>
}
 800d002:	bf00      	nop
 800d004:	bd80      	pop	{r7, pc}

0800d006 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b082      	sub	sp, #8
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800d00e:	f004 fb67 	bl	80116e0 <touchgfx_taskEntry>
}
 800d012:	bf00      	nop
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
	...

0800d01c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
    {
 800d024:	4a04      	ldr	r2, [pc, #16]	@ (800d038 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	601a      	str	r2, [r3, #0]
    }
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4618      	mov	r0, r3
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	0802b140 	.word	0x0802b140

0800d03c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
    }
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff ffe9 	bl	800d01c <_ZN8touchgfx12FontProviderD1Ev>
 800d04a:	2104      	movs	r1, #4
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f01c f814 	bl	802907a <_ZdlPvj>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4618      	mov	r0, r3
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	460b      	mov	r3, r1
 800d066:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d068:	887b      	ldrh	r3, [r7, #2]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d104      	bne.n	800d078 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
    {
    case Typography::DIGITALCLOCK:
        // Asap_Regular_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d06e:	f002 fbc3 	bl	800f7f8 <_ZN17TypedTextDatabase8getFontsEv>
 800d072:	4603      	mov	r3, r0
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	e000      	b.n	800d07a <_ZN23ApplicationFontProvider7getFontEt+0x1e>
    default:
        return 0;
 800d078:	2300      	movs	r3, #0
    }
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
	...

0800d084 <_ZN23ApplicationFontProviderD1Ev>:
{
    static const touchgfx::FontId DIGITALCLOCK = 0; // Asap_Regular_24_4bpp
    static const uint16_t NUMBER_OF_FONTS = 1;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	4a05      	ldr	r2, [pc, #20]	@ (800d0a4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	601a      	str	r2, [r3, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff ffc1 	bl	800d01c <_ZN8touchgfx12FontProviderD1Ev>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4618      	mov	r0, r3
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	0802b12c 	.word	0x0802b12c

0800d0a8 <_ZN23ApplicationFontProviderD0Ev>:
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7ff ffe7 	bl	800d084 <_ZN23ApplicationFontProviderD1Ev>
 800d0b6:	2104      	movs	r1, #4
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f01b ffde 	bl	802907a <_ZdlPvj>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3708      	adds	r7, #8
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d0c8:	b480      	push	{r7}
 800d0ca:	b083      	sub	sp, #12
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
    {
 800d0d0:	4a04      	ldr	r2, [pc, #16]	@ (800d0e4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	601a      	str	r2, [r3, #0]
    }
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr
 800d0e4:	0802b578 	.word	0x0802b578

0800d0e8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
    }
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7ff ffe9 	bl	800d0c8 <_ZN8touchgfx4FontD1Ev>
 800d0f6:	2114      	movs	r1, #20
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f01b ffbe 	bl	802907a <_ZdlPvj>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d108:	b590      	push	{r4, r7, lr}
 800d10a:	b087      	sub	sp, #28
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d114:	887b      	ldrh	r3, [r7, #2]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	e010      	b.n	800d140 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d11e:	2300      	movs	r3, #0
 800d120:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d122:	2300      	movs	r3, #0
 800d124:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	3308      	adds	r3, #8
 800d12c:	681c      	ldr	r4, [r3, #0]
 800d12e:	f107 030f 	add.w	r3, r7, #15
 800d132:	f107 0210 	add.w	r2, r7, #16
 800d136:	8879      	ldrh	r1, [r7, #2]
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	47a0      	blx	r4
 800d13c:	6178      	str	r0, [r7, #20]
        return glyph;
 800d13e:	697b      	ldr	r3, [r7, #20]
    }
 800d140:	4618      	mov	r0, r3
 800d142:	371c      	adds	r7, #28
 800d144:	46bd      	mov	sp, r7
 800d146:	bd90      	pop	{r4, r7, pc}

0800d148 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	89db      	ldrh	r3, [r3, #14]
    }
 800d154:	4618      	mov	r0, r3
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800d16c:	4618      	mov	r0, r3
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	88db      	ldrh	r3, [r3, #6]
    }
 800d184:	4618      	mov	r0, r3
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	889b      	ldrh	r3, [r3, #4]
    }
 800d19c:	4618      	mov	r0, r3
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	7a9b      	ldrb	r3, [r3, #10]
 800d1b4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d1b8:	b2db      	uxtb	r3, r3
    }
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	370c      	adds	r7, #12
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800d1c6:	b480      	push	{r7}
 800d1c8:	b083      	sub	sp, #12
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	7a9b      	ldrb	r3, [r3, #10]
 800d1d2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d1d6:	b2db      	uxtb	r3, r3
    }
 800d1d8:	4618      	mov	r0, r3
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
    {
        return false;
 800d1ec:	2300      	movs	r3, #0
    }
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	370c      	adds	r7, #12
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800d1fa:	b480      	push	{r7}
 800d1fc:	b083      	sub	sp, #12
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d202:	f04f 0300 	mov.w	r3, #0
 800d206:	ee07 3a90 	vmov	s15, r3
    }
 800d20a:	eeb0 0a67 	vmov.f32	s0, s15
 800d20e:	370c      	adds	r7, #12
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	4a05      	ldr	r2, [pc, #20]	@ (800d238 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	601a      	str	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4618      	mov	r0, r3
 800d22a:	f7ff ff4d 	bl	800d0c8 <_ZN8touchgfx4FontD1Ev>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	0802c64c 	.word	0x0802c64c

0800d23c <_ZN8touchgfx9ConstFontD0Ev>:
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff ffe7 	bl	800d218 <_ZN8touchgfx9ConstFontD1Ev>
 800d24a:	211c      	movs	r1, #28
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f01b ff14 	bl	802907a <_ZdlPvj>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4618      	mov	r0, r3
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	4a05      	ldr	r2, [pc, #20]	@ (800d27c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	601a      	str	r2, [r3, #0]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7ff ffd3 	bl	800d218 <_ZN8touchgfx9ConstFontD1Ev>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4618      	mov	r0, r3
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	0802b164 	.word	0x0802b164

0800d280 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7ff ffe7 	bl	800d25c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d28e:	212c      	movs	r1, #44	@ 0x2c
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f01b fef2 	bl	802907a <_ZdlPvj>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4618      	mov	r0, r3
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d2a0:	b480      	push	{r7}
 800d2a2:	af00      	add	r7, sp, #0
    {
        return instance;
 800d2a4:	4b03      	ldr	r3, [pc, #12]	@ (800d2b4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
    }
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	24006600 	.word	0x24006600

0800d2b8 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
    {
 800d2c0:	4a04      	ldr	r2, [pc, #16]	@ (800d2d4 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	601a      	str	r2, [r3, #0]
    }
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	0802b154 	.word	0x0802b154

0800d2d8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
    }
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7ff ffe9 	bl	800d2b8 <_ZN8touchgfx9TypedTextD1Ev>
 800d2e6:	2108      	movs	r1, #8
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f01b fec6 	bl	802907a <_ZdlPvj>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800d31c:	4618      	mov	r0, r3
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800d328:	b580      	push	{r7, lr}
 800d32a:	b08e      	sub	sp, #56	@ 0x38
 800d32c:	af0a      	add	r7, sp, #40	@ 0x28
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	4611      	mov	r1, r2
 800d334:	461a      	mov	r2, r3
 800d336:	460b      	mov	r3, r1
 800d338:	80fb      	strh	r3, [r7, #6]
 800d33a:	4613      	mov	r3, r2
 800d33c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	88b9      	ldrh	r1, [r7, #4]
 800d342:	88fa      	ldrh	r2, [r7, #6]
 800d344:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d348:	9308      	str	r3, [sp, #32]
 800d34a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d34c:	9307      	str	r3, [sp, #28]
 800d34e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d352:	9306      	str	r3, [sp, #24]
 800d354:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d358:	9305      	str	r3, [sp, #20]
 800d35a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d35e:	9304      	str	r3, [sp, #16]
 800d360:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d364:	9303      	str	r3, [sp, #12]
 800d366:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d36a:	9302      	str	r3, [sp, #8]
 800d36c:	7f3b      	ldrb	r3, [r7, #28]
 800d36e:	9301      	str	r3, [sp, #4]
 800d370:	8b3b      	ldrh	r3, [r7, #24]
 800d372:	9300      	str	r3, [sp, #0]
 800d374:	460b      	mov	r3, r1
 800d376:	68b9      	ldr	r1, [r7, #8]
 800d378:	f00b f9fc 	bl	8018774 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800d37c:	4a09      	ldr	r2, [pc, #36]	@ (800d3a4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d386:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d38c:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d392:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d398:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	0802b164 	.word	0x0802b164

0800d3a8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	881b      	ldrh	r3, [r3, #0]
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	3302      	adds	r3, #2
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	041b      	lsls	r3, r3, #16
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	69db      	ldr	r3, [r3, #28]
 800d3d4:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	889b      	ldrh	r3, [r3, #4]
 800d3da:	0adb      	lsrs	r3, r3, #11
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800d3e8:	68ba      	ldr	r2, [r7, #8]
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	4413      	add	r3, r2
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	371c      	adds	r7, #28
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr

0800d3fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800d3fa:	b480      	push	{r7}
 800d3fc:	b089      	sub	sp, #36	@ 0x24
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	60f8      	str	r0, [r7, #12]
 800d402:	460b      	mov	r3, r1
 800d404:	607a      	str	r2, [r7, #4]
 800d406:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d003      	beq.n	800d416 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	7b1b      	ldrb	r3, [r3, #12]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d101      	bne.n	800d41a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800d416:	2300      	movs	r3, #0
 800d418:	e032      	b.n	800d480 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6a1a      	ldr	r2, [r3, #32]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	7b5b      	ldrb	r3, [r3, #13]
 800d426:	b21b      	sxth	r3, r3
 800d428:	021b      	lsls	r3, r3, #8
 800d42a:	b21b      	sxth	r3, r3
 800d42c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d430:	b219      	sxth	r1, r3
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	7adb      	ldrb	r3, [r3, #11]
 800d436:	b21b      	sxth	r3, r3
 800d438:	430b      	orrs	r3, r1
 800d43a:	b21b      	sxth	r3, r3
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4413      	add	r3, r2
 800d442:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	7b1b      	ldrb	r3, [r3, #12]
 800d448:	837b      	strh	r3, [r7, #26]
 800d44a:	e013      	b.n	800d474 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	881b      	ldrh	r3, [r3, #0]
 800d450:	897a      	ldrh	r2, [r7, #10]
 800d452:	429a      	cmp	r2, r3
 800d454:	d103      	bne.n	800d45e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d45c:	e010      	b.n	800d480 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	881b      	ldrh	r3, [r3, #0]
 800d462:	897a      	ldrh	r2, [r7, #10]
 800d464:	429a      	cmp	r2, r3
 800d466:	d309      	bcc.n	800d47c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d468:	8b7b      	ldrh	r3, [r7, #26]
 800d46a:	3b01      	subs	r3, #1
 800d46c:	837b      	strh	r3, [r7, #26]
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	3304      	adds	r3, #4
 800d472:	61fb      	str	r3, [r7, #28]
 800d474:	8b7b      	ldrh	r3, [r7, #26]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1e8      	bne.n	800d44c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800d47a:	e000      	b.n	800d47e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800d47c:	bf00      	nop
        }
    }
    return 0;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3724      	adds	r7, #36	@ 0x24
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Asap_Regular_24_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Asap_Regular_24_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_24_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_24_4bpp(glyphs_Asap_Regular_24_4bpp, 21, 24, 24, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_24_4bpp, kerning_Asap_Regular_24_4bpp, 0, 0, 0, 0);
 800d48c:	b580      	push	{r7, lr}
 800d48e:	af00      	add	r7, sp, #0
 800d490:	4801      	ldr	r0, [pc, #4]	@ (800d498 <__tcf_0+0xc>)
 800d492:	f7ff fee3 	bl	800d25c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d496:	bd80      	pop	{r7, pc}
 800d498:	24005044 	.word	0x24005044

0800d49c <_Z28getFont_Asap_Regular_24_4bppv>:
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b08e      	sub	sp, #56	@ 0x38
 800d4a0:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont Asap_Regular_24_4bpp(glyphs_Asap_Regular_24_4bpp, 21, 24, 24, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_24_4bpp, kerning_Asap_Regular_24_4bpp, 0, 0, 0, 0);
 800d4a2:	4b21      	ldr	r3, [pc, #132]	@ (800d528 <_Z28getFont_Asap_Regular_24_4bppv+0x8c>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f3bf 8f5b 	dmb	ish
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	bf0c      	ite	eq
 800d4b2:	2301      	moveq	r3, #1
 800d4b4:	2300      	movne	r3, #0
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d030      	beq.n	800d51e <_Z28getFont_Asap_Regular_24_4bppv+0x82>
 800d4bc:	481a      	ldr	r0, [pc, #104]	@ (800d528 <_Z28getFont_Asap_Regular_24_4bppv+0x8c>)
 800d4be:	f7f5 fb47 	bl	8002b50 <__cxa_guard_acquire>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	bf14      	ite	ne
 800d4c8:	2301      	movne	r3, #1
 800d4ca:	2300      	moveq	r3, #0
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d025      	beq.n	800d51e <_Z28getFont_Asap_Regular_24_4bppv+0x82>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4da:	2300      	movs	r3, #0
 800d4dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4de:	2300      	movs	r3, #0
 800d4e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4e2:	4b12      	ldr	r3, [pc, #72]	@ (800d52c <_Z28getFont_Asap_Regular_24_4bppv+0x90>)
 800d4e4:	9308      	str	r3, [sp, #32]
 800d4e6:	4b12      	ldr	r3, [pc, #72]	@ (800d530 <_Z28getFont_Asap_Regular_24_4bppv+0x94>)
 800d4e8:	9307      	str	r3, [sp, #28]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	9306      	str	r3, [sp, #24]
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	9305      	str	r3, [sp, #20]
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	9304      	str	r3, [sp, #16]
 800d4f6:	2304      	movs	r3, #4
 800d4f8:	9303      	str	r3, [sp, #12]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9302      	str	r3, [sp, #8]
 800d4fe:	2300      	movs	r3, #0
 800d500:	9301      	str	r3, [sp, #4]
 800d502:	2318      	movs	r3, #24
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	2318      	movs	r3, #24
 800d508:	2215      	movs	r2, #21
 800d50a:	490a      	ldr	r1, [pc, #40]	@ (800d534 <_Z28getFont_Asap_Regular_24_4bppv+0x98>)
 800d50c:	480a      	ldr	r0, [pc, #40]	@ (800d538 <_Z28getFont_Asap_Regular_24_4bppv+0x9c>)
 800d50e:	f7ff ff0b 	bl	800d328 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d512:	480a      	ldr	r0, [pc, #40]	@ (800d53c <_Z28getFont_Asap_Regular_24_4bppv+0xa0>)
 800d514:	f01b ff9a 	bl	802944c <atexit>
 800d518:	4803      	ldr	r0, [pc, #12]	@ (800d528 <_Z28getFont_Asap_Regular_24_4bppv+0x8c>)
 800d51a:	f7f5 fb81 	bl	8002c20 <__cxa_guard_release>
    return Asap_Regular_24_4bpp;
 800d51e:	4b06      	ldr	r3, [pc, #24]	@ (800d538 <_Z28getFont_Asap_Regular_24_4bppv+0x9c>)
}
 800d520:	4618      	mov	r0, r3
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	24005070 	.word	0x24005070
 800d52c:	0802cb54 	.word	0x0802cb54
 800d530:	0802cb58 	.word	0x0802cb58
 800d534:	0802d670 	.word	0x0802d670
 800d538:	24005044 	.word	0x24005044
 800d53c:	0800d48d 	.word	0x0800d48d

0800d540 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	4618      	mov	r0, r3
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d562:	bf00      	nop
 800d564:	370c      	adds	r7, #12
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d56e:	b480      	push	{r7}
 800d570:	b083      	sub	sp, #12
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
 800d576:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d58e:	bf00      	nop
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr

0800d59a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800d59a:	b480      	push	{r7}
 800d59c:	b083      	sub	sp, #12
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800d5a6:	bf00      	nop
 800d5a8:	370c      	adds	r7, #12
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800d5b2:	b480      	push	{r7}
 800d5b4:	b083      	sub	sp, #12
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
    {
    }
 800d5ba:	bf00      	nop
 800d5bc:	370c      	adds	r7, #12
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr

0800d5c6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800d5c6:	b480      	push	{r7}
 800d5c8:	b083      	sub	sp, #12
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
    {
    }
 800d5ce:	bf00      	nop
 800d5d0:	370c      	adds	r7, #12
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
	...

0800d5dc <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
    {
 800d5e4:	4a04      	ldr	r2, [pc, #16]	@ (800d5f8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	601a      	str	r2, [r3, #0]
    }
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	0802b2ec 	.word	0x0802b2ec

0800d5fc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
    }
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff ffe9 	bl	800d5dc <_ZN8touchgfx15UIEventListenerD1Ev>
 800d60a:	2104      	movs	r1, #4
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f01b fd34 	bl	802907a <_ZdlPvj>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	4618      	mov	r0, r3
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
    {
    }
 800d624:	bf00      	nop
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	460b      	mov	r3, r1
 800d63a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800d63c:	bf00      	nop
 800d63e:	370c      	adds	r7, #12
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800d65a:	6810      	ldr	r0, [r2, #0]
 800d65c:	6851      	ldr	r1, [r2, #4]
 800d65e:	c303      	stmia	r3!, {r0, r1}
    }
 800d660:	bf00      	nop
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	3304      	adds	r3, #4
 800d678:	4618      	mov	r0, r3
 800d67a:	f009 fe09 	bl	8017290 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800d67e:	bf00      	nop
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
	...

0800d688 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
    {
 800d690:	4a04      	ldr	r2, [pc, #16]	@ (800d6a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	601a      	str	r2, [r3, #0]
    }
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	4618      	mov	r0, r3
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr
 800d6a4:	0802b2d4 	.word	0x0802b2d4

0800d6a8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
    }
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff ffe9 	bl	800d688 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d6b6:	2104      	movs	r1, #4
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f01b fcde 	bl	802907a <_ZdlPvj>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d6c8:	b480      	push	{r7}
 800d6ca:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d6cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d6fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d008      	beq.n	800d6ea <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d6d8:	4b08      	ldr	r3, [pc, #32]	@ (800d6fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d003      	beq.n	800d6ea <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d6e2:	4b06      	ldr	r3, [pc, #24]	@ (800d6fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6e8:	e002      	b.n	800d6f0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800d6ea:	4b04      	ldr	r3, [pc, #16]	@ (800d6fc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	689b      	ldr	r3, [r3, #8]
    }
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop
 800d6fc:	24006600 	.word	0x24006600

0800d700 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800d708:	4a07      	ldr	r2, [pc, #28]	@ (800d728 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	605a      	str	r2, [r3, #4]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	721a      	strb	r2, [r3, #8]
    {
    }
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4618      	mov	r0, r3
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr
 800d728:	0802b2b0 	.word	0x0802b2b0

0800d72c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
    {
 800d734:	4a04      	ldr	r2, [pc, #16]	@ (800d748 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	601a      	str	r2, [r3, #0]
    }
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4618      	mov	r0, r3
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	0802b2b0 	.word	0x0802b2b0

0800d74c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
    }
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7ff ffe9 	bl	800d72c <_ZN8touchgfx10TransitionD1Ev>
 800d75a:	210c      	movs	r1, #12
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f01b fc8c 	bl	802907a <_ZdlPvj>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4618      	mov	r0, r3
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
    {
    }
 800d774:	bf00      	nop
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
    {
    }
 800d788:	bf00      	nop
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
    {
    }
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800d7b0:	f009 fd30 	bl	8017214 <_ZN8touchgfx11Application11getInstanceEv>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	323c      	adds	r2, #60	@ 0x3c
 800d7ba:	6812      	ldr	r2, [r2, #0]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	4790      	blx	r2
    }
 800d7c0:	bf00      	nop
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	683a      	ldr	r2, [r7, #0]
 800d7d6:	605a      	str	r2, [r3, #4]
    }
 800d7d8:	bf00      	nop
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	4a05      	ldr	r2, [pc, #20]	@ (800d804 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	601a      	str	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7ff fef1 	bl	800d5dc <_ZN8touchgfx15UIEventListenerD1Ev>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	0802c590 	.word	0x0802c590

0800d808 <_ZN8touchgfx11ApplicationD0Ev>:
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f7ff ffe7 	bl	800d7e4 <_ZN8touchgfx11ApplicationD1Ev>
 800d816:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f01b fc2d 	bl	802907a <_ZdlPvj>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4618      	mov	r0, r3
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
	...

0800d82c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	4618      	mov	r0, r3
 800d838:	f009 fdfc 	bl	8017434 <_ZN8touchgfx11ApplicationC1Ev>
 800d83c:	4a09      	ldr	r2, [pc, #36]	@ (800d864 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4a04      	ldr	r2, [pc, #16]	@ (800d868 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800d856:	6013      	str	r3, [r2, #0]
    }
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4618      	mov	r0, r3
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	0802b25c 	.word	0x0802b25c
 800d868:	2400664c 	.word	0x2400664c

0800d86c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f804 	bl	800d882 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800d882:	b580      	push	{r7, lr}
 800d884:	b082      	sub	sp, #8
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00f      	beq.n	800d8b4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	330c      	adds	r3, #12
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4610      	mov	r0, r2
 800d8a8:	4798      	blx	r3
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d001      	beq.n	800d8b4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e000      	b.n	800d8b6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00e      	beq.n	800d8d8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800d8d8:	bf00      	nop
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	601a      	str	r2, [r3, #0]
    }
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	4a05      	ldr	r2, [pc, #20]	@ (800d91c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7ff ff69 	bl	800d7e4 <_ZN8touchgfx11ApplicationD1Ev>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4618      	mov	r0, r3
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	0802b25c 	.word	0x0802b25c

0800d920 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7ff ffe7 	bl	800d8fc <_ZN8touchgfx14MVPApplicationD1Ev>
 800d92e:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f01b fba1 	bl	802907a <_ZdlPvj>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4618      	mov	r0, r3
 800d93c:	3708      	adds	r7, #8
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
	...

0800d944 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	4a05      	ldr	r2, [pc, #20]	@ (800d964 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	601a      	str	r2, [r3, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff fe97 	bl	800d688 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	0802b244 	.word	0x0802b244

0800d968 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f7ff ffe7 	bl	800d944 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d976:	2110      	movs	r1, #16
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f01b fb7e 	bl	802907a <_ZdlPvj>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4618      	mov	r0, r3
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	4a08      	ldr	r2, [pc, #32]	@ (800d9b4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	601a      	str	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7ff ffd1 	bl	800d944 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff ffa9 	bl	800d8fc <_ZN8touchgfx14MVPApplicationD1Ev>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	0802b1f0 	.word	0x0802b1f0

0800d9b8 <_ZN23FrontendApplicationBaseD0Ev>:
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7ff ffe1 	bl	800d988 <_ZN23FrontendApplicationBaseD1Ev>
 800d9c6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f01b fb55 	bl	802907a <_ZdlPvj>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3708      	adds	r7, #8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b082      	sub	sp, #8
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
    {
        gotomainScreenNoTransition();
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 f888 	bl	800daf8 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv>
    }
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	721a      	strb	r2, [r3, #8]
    }
 800d9fe:	bf00      	nop
 800da00:	370c      	adds	r7, #12
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr

0800da0a <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800da0a:	b480      	push	{r7}
 800da0c:	b083      	sub	sp, #12
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
 800da12:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	683a      	ldr	r2, [r7, #0]
 800da18:	605a      	str	r2, [r3, #4]
    }
 800da1a:	bf00      	nop
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
	...

0800da28 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/mainView.hpp>
#include <gui/main_screen/mainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	4618      	mov	r0, r3
 800da38:	f7ff fef8 	bl	800d82c <_ZN8touchgfx14MVPApplicationC1Ev>
 800da3c:	4a19      	ldr	r2, [pc, #100]	@ (800daa4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800da48:	4618      	mov	r0, r3
 800da4a:	f000 f8ab 	bl	800dba4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800da5e:	f7ff fc1f 	bl	800d2a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800da62:	4603      	mov	r3, r0
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	3208      	adds	r2, #8
 800da68:	6812      	ldr	r2, [r2, #0]
 800da6a:	2100      	movs	r1, #0
 800da6c:	4618      	mov	r0, r3
 800da6e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800da70:	2000      	movs	r0, #0
 800da72:	f001 fe49 	bl	800f708 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800da76:	f7ff fe27 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 800da7a:	4603      	mov	r3, r0
 800da7c:	4618      	mov	r0, r3
 800da7e:	f013 ff5c 	bl	802193a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800da82:	f7ff fe21 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 800da86:	4603      	mov	r3, r0
 800da88:	4618      	mov	r0, r3
 800da8a:	f013 ffd1 	bl	8021a30 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800da8e:	f7ff fe1b 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 800da92:	4603      	mov	r3, r0
 800da94:	4618      	mov	r0, r3
 800da96:	f013 ffd7 	bl	8021a48 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	0802b1f0 	.word	0x0802b1f0

0800daa8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4618      	mov	r0, r3
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	683a      	ldr	r2, [r7, #0]
 800dace:	4611      	mov	r1, r2
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7ff ffe9 	bl	800daa8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	605a      	str	r2, [r3, #4]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	683a      	ldr	r2, [r7, #0]
 800dae2:	3308      	adds	r3, #8
 800dae4:	3208      	adds	r2, #8
 800dae6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800daea:	e883 0003 	stmia.w	r3, {r0, r1}
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4618      	mov	r0, r3
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv>:
 */

// main

void FrontendApplicationBase::gotomainScreenNoTransition()
{
 800daf8:	b590      	push	{r4, r7, lr}
 800dafa:	b089      	sub	sp, #36	@ 0x24
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomainScreenNoTransitionImpl);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800db06:	4b10      	ldr	r3, [pc, #64]	@ (800db48 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv+0x50>)
 800db08:	61bb      	str	r3, [r7, #24]
 800db0a:	2300      	movs	r3, #0
 800db0c:	61fb      	str	r3, [r7, #28]
 800db0e:	f107 0008 	add.w	r0, r7, #8
 800db12:	f107 0318 	add.w	r3, r7, #24
 800db16:	cb0c      	ldmia	r3, {r2, r3}
 800db18:	6879      	ldr	r1, [r7, #4]
 800db1a:	f000 f85f 	bl	800dbdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800db1e:	f107 0308 	add.w	r3, r7, #8
 800db22:	4619      	mov	r1, r3
 800db24:	4620      	mov	r0, r4
 800db26:	f7ff ffcb 	bl	800dac0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800db2a:	f107 0308 	add.w	r3, r7, #8
 800db2e:	4618      	mov	r0, r3
 800db30:	f7ff ff08 	bl	800d944 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800db40:	bf00      	nop
 800db42:	3724      	adds	r7, #36	@ 0x24
 800db44:	46bd      	mov	sp, r7
 800db46:	bd90      	pop	{r4, r7, pc}
 800db48:	0800db4d 	.word	0x0800db4d

0800db4c <_ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenNoTransitionImpl()
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af02      	add	r7, sp, #8
 800db52:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<mainView, mainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800db60:	461a      	mov	r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	4b04      	ldr	r3, [pc, #16]	@ (800db7c <_ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv+0x30>)
 800db6c:	4804      	ldr	r0, [pc, #16]	@ (800db80 <_ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv+0x34>)
 800db6e:	f000 f867 	bl	800dc40 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800db72:	bf00      	nop
 800db74:	3708      	adds	r7, #8
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	24006640 	.word	0x24006640
 800db80:	2400663c 	.word	0x2400663c

0800db84 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	4a04      	ldr	r2, [pc, #16]	@ (800dba0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	601a      	str	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	4618      	mov	r0, r3
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	0802b2d4 	.word	0x0802b2d4

0800dba4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7ff ffe8 	bl	800db84 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800dbb4:	4a08      	ldr	r2, [pc, #32]	@ (800dbd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	601a      	str	r2, [r3, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	605a      	str	r2, [r3, #4]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	609a      	str	r2, [r3, #8]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	60da      	str	r2, [r3, #12]
    {
    }
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	0802b244 	.word	0x0802b244

0800dbdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7ff ffc8 	bl	800db84 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800dbf4:	4a08      	ldr	r2, [pc, #32]	@ (800dc18 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	601a      	str	r2, [r3, #0]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	68ba      	ldr	r2, [r7, #8]
 800dbfe:	605a      	str	r2, [r3, #4]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	3308      	adds	r3, #8
 800dc04:	463a      	mov	r2, r7
 800dc06:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc0a:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	4618      	mov	r0, r3
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	0802b244 	.word	0x0802b244

0800dc1c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7ff fd6a 	bl	800d700 <_ZN8touchgfx10TransitionC1Ev>
 800dc2c:	4a03      	ldr	r2, [pc, #12]	@ (800dc3c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	601a      	str	r2, [r3, #0]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	4618      	mov	r0, r3
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	0802b1cc 	.word	0x0802b1cc

0800dc40 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800dc40:	b590      	push	{r4, r7, lr}
 800dc42:	b08f      	sub	sp, #60	@ 0x3c
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	689a      	ldr	r2, [r3, #8]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	3320      	adds	r3, #32
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	4798      	blx	r3
 800dc60:	4603      	mov	r3, r0
 800dc62:	f240 42fb 	movw	r2, #1275	@ 0x4fb
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d805      	bhi.n	800dc76 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800dc6a:	4b7d      	ldr	r3, [pc, #500]	@ (800de60 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800dc6c:	4a7d      	ldr	r2, [pc, #500]	@ (800de64 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800dc6e:	21a3      	movs	r1, #163	@ 0xa3
 800dc70:	487d      	ldr	r0, [pc, #500]	@ (800de68 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800dc72:	f01b fbcd 	bl	8029410 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	685a      	ldr	r2, [r3, #4]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	3320      	adds	r3, #32
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4610      	mov	r0, r2
 800dc86:	4798      	blx	r3
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b0f      	cmp	r3, #15
 800dc8c:	d805      	bhi.n	800dc9a <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800dc8e:	4b77      	ldr	r3, [pc, #476]	@ (800de6c <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800dc90:	4a74      	ldr	r2, [pc, #464]	@ (800de64 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800dc92:	21a4      	movs	r1, #164	@ 0xa4
 800dc94:	4874      	ldr	r0, [pc, #464]	@ (800de68 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800dc96:	f01b fbbb 	bl	8029410 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	68da      	ldr	r2, [r3, #12]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	3320      	adds	r3, #32
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4610      	mov	r0, r2
 800dcaa:	4798      	blx	r3
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b0b      	cmp	r3, #11
 800dcb0:	d805      	bhi.n	800dcbe <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800dcb2:	4b6f      	ldr	r3, [pc, #444]	@ (800de70 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800dcb4:	4a6b      	ldr	r2, [pc, #428]	@ (800de64 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800dcb6:	21a5      	movs	r1, #165	@ 0xa5
 800dcb8:	486b      	ldr	r0, [pc, #428]	@ (800de68 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800dcba:	f01b fba9 	bl	8029410 <__assert_func>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800dcca:	f009 faa3 	bl	8017214 <_ZN8touchgfx11Application11getInstanceEv>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff fccb 	bl	800d66c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800dcd6:	6a3b      	ldr	r3, [r7, #32]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d008      	beq.n	800dcf0 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 800dcde:	6a3b      	ldr	r3, [r7, #32]
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	6a3b      	ldr	r3, [r7, #32]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	330c      	adds	r3, #12
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4610      	mov	r0, r2
 800dcee:	4798      	blx	r3
    if (*currentTrans)
 800dcf0:	6a3b      	ldr	r3, [r7, #32]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d007      	beq.n	800dd08 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 800dcf8:	6a3b      	ldr	r3, [r7, #32]
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	6a3b      	ldr	r3, [r7, #32]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4610      	mov	r0, r2
 800dd06:	4798      	blx	r3
    if (*currentScreen)
 800dd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d008      	beq.n	800dd22 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 800dd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd12:	681a      	ldr	r2, [r3, #0]
 800dd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	3314      	adds	r3, #20
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4610      	mov	r0, r2
 800dd20:	4798      	blx	r3
    if (*currentPresenter)
 800dd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d008      	beq.n	800dd3c <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	3304      	adds	r3, #4
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4610      	mov	r0, r2
 800dd3a:	4798      	blx	r3
    if (*currentScreen)
 800dd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d007      	beq.n	800dd54 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 800dd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4610      	mov	r0, r2
 800dd52:	4798      	blx	r3
    if (*currentPresenter)
 800dd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d008      	beq.n	800dd6e <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 800dd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	3308      	adds	r3, #8
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4610      	mov	r0, r2
 800dd6c:	4798      	blx	r3
}
 800dd6e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	2100      	movs	r1, #0
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 f87c 	bl	800de74 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	4619      	mov	r1, r3
 800dd80:	200c      	movs	r0, #12
 800dd82:	f7ff fbdd 	bl	800d540 <_ZnwjPv>
 800dd86:	4604      	mov	r4, r0
 800dd88:	4620      	mov	r0, r4
 800dd8a:	f7ff ff47 	bl	800dc1c <_ZN8touchgfx12NoTransitionC1Ev>
 800dd8e:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	2100      	movs	r1, #0
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 f87f 	bl	800de9a <_ZN8touchgfx17AbstractPartition2atI8mainViewEERT_t>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	4619      	mov	r1, r3
 800dda0:	f240 40fc 	movw	r0, #1276	@ 0x4fc
 800dda4:	f7ff fbcc 	bl	800d540 <_ZnwjPv>
 800dda8:	4604      	mov	r4, r0
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f001 fe90 	bl	800fad0 <_ZN8mainViewC1Ev>
 800ddb0:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f000 f881 	bl	800dec0 <_ZN8touchgfx17AbstractPartition2atI13mainPresenterEERT_t>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	2010      	movs	r0, #16
 800ddc4:	f7ff fbbc 	bl	800d540 <_ZnwjPv>
 800ddc8:	4604      	mov	r4, r0
 800ddca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f001 fe27 	bl	800fa20 <_ZN13mainPresenterC1ER8mainView>
 800ddd2:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddd8:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddde:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dde4:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800ddec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddee:	3304      	adds	r3, #4
 800ddf0:	e000      	b.n	800ddf4 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800ddf8:	f7ff fd72 	bl	800d8e0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ddfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddfe:	3304      	adds	r3, #4
 800de00:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800de02:	4618      	mov	r0, r3
 800de04:	f7ff fe01 	bl	800da0a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800de08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de0c:	4618      	mov	r0, r3
 800de0e:	f000 f86a 	bl	800dee6 <_ZN8touchgfx4ViewI13mainPresenterE4bindERS1_>
 800de12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de14:	61fb      	str	r3, [r7, #28]
 800de16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de18:	61bb      	str	r3, [r7, #24]
 800de1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de1c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	330c      	adds	r3, #12
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	69f8      	ldr	r0, [r7, #28]
 800de28:	4798      	blx	r3
    newPresenter->activate();
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	69b8      	ldr	r0, [r7, #24]
 800de32:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800de34:	6979      	ldr	r1, [r7, #20]
 800de36:	69f8      	ldr	r0, [r7, #28]
 800de38:	f00b f85c 	bl	8018ef4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3310      	adds	r3, #16
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	6978      	ldr	r0, [r7, #20]
 800de46:	4798      	blx	r3
    newTransition->invalidate();
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	3314      	adds	r3, #20
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	6978      	ldr	r0, [r7, #20]
 800de52:	4798      	blx	r3
}
 800de54:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800de56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800de58:	4618      	mov	r0, r3
 800de5a:	373c      	adds	r7, #60	@ 0x3c
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd90      	pop	{r4, r7, pc}
 800de60:	0802a5ec 	.word	0x0802a5ec
 800de64:	0802a67c 	.word	0x0802a67c
 800de68:	0802a748 	.word	0x0802a748
 800de6c:	0802a78c 	.word	0x0802a78c
 800de70:	0802a830 	.word	0x0802a830

0800de74 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	460b      	mov	r3, r1
 800de7e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	3324      	adds	r3, #36	@ 0x24
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	887a      	ldrh	r2, [r7, #2]
 800de8a:	4611      	mov	r1, r2
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	4798      	blx	r3
 800de90:	4603      	mov	r3, r0
    }
 800de92:	4618      	mov	r0, r3
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <_ZN8touchgfx17AbstractPartition2atI8mainViewEERT_t>:
    T& at(const uint16_t index)
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b082      	sub	sp, #8
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
 800dea2:	460b      	mov	r3, r1
 800dea4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	3324      	adds	r3, #36	@ 0x24
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	887a      	ldrh	r2, [r7, #2]
 800deb0:	4611      	mov	r1, r2
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	4798      	blx	r3
 800deb6:	4603      	mov	r3, r0
    }
 800deb8:	4618      	mov	r0, r3
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <_ZN8touchgfx17AbstractPartition2atI13mainPresenterEERT_t>:
    T& at(const uint16_t index)
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	460b      	mov	r3, r1
 800deca:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3324      	adds	r3, #36	@ 0x24
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	887a      	ldrh	r2, [r7, #2]
 800ded6:	4611      	mov	r1, r2
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	4798      	blx	r3
 800dedc:	4603      	mov	r3, r0
    }
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <_ZN8touchgfx4ViewI13mainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800dee6:	b480      	push	{r7}
 800dee8:	b083      	sub	sp, #12
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800def6:	bf00      	nop
 800def8:	370c      	adds	r7, #12
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
	...

0800df04 <_ZN8touchgfx12NoTransitionD1Ev>:
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	4a05      	ldr	r2, [pc, #20]	@ (800df24 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	601a      	str	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4618      	mov	r0, r3
 800df16:	f7ff fc09 	bl	800d72c <_ZN8touchgfx10TransitionD1Ev>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4618      	mov	r0, r3
 800df1e:	3708      	adds	r7, #8
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	0802b1cc 	.word	0x0802b1cc

0800df28 <_ZN8touchgfx12NoTransitionD0Ev>:
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7ff ffe7 	bl	800df04 <_ZN8touchgfx12NoTransitionD1Ev>
 800df36:	210c      	movs	r1, #12
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f01b f89e 	bl	802907a <_ZdlPvj>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4618      	mov	r0, r3
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	68d2      	ldr	r2, [r2, #12]
 800df58:	1052      	asrs	r2, r2, #1
 800df5a:	1899      	adds	r1, r3, r2
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	f003 0301 	and.w	r3, r3, #1
 800df64:	2b00      	cmp	r3, #0
 800df66:	d102      	bne.n	800df6e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	e00a      	b.n	800df84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	68d2      	ldr	r2, [r2, #12]
 800df76:	1052      	asrs	r2, r2, #1
 800df78:	4413      	add	r3, r2
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	6892      	ldr	r2, [r2, #8]
 800df80:	4413      	add	r3, r2
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4608      	mov	r0, r1
 800df86:	4798      	blx	r3
    }
 800df88:	bf00      	nop
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d010      	beq.n	800dfc2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	689b      	ldr	r3, [r3, #8]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d107      	bne.n	800dfb8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	f003 0301 	and.w	r3, r3, #1
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e000      	b.n	800dfba <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d001      	beq.n	800dfc2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e000      	b.n	800dfc4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800dfc2:	2300      	movs	r3, #0
    }
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
        : color(col)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	601a      	str	r2, [r3, #0]
    {
    }
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	370c      	adds	r7, #12
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr

0800dfee <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800dfee:	b480      	push	{r7}
 800dff0:	b083      	sub	sp, #12
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	801a      	strh	r2, [r3, #0]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	805a      	strh	r2, [r3, #2]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	809a      	strh	r2, [r3, #4]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	80da      	strh	r2, [r3, #6]
    {
    }
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4618      	mov	r0, r3
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800e01c:	b480      	push	{r7}
 800e01e:	b085      	sub	sp, #20
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	4608      	mov	r0, r1
 800e026:	4611      	mov	r1, r2
 800e028:	461a      	mov	r2, r3
 800e02a:	4603      	mov	r3, r0
 800e02c:	817b      	strh	r3, [r7, #10]
 800e02e:	460b      	mov	r3, r1
 800e030:	813b      	strh	r3, [r7, #8]
 800e032:	4613      	mov	r3, r2
 800e034:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	897a      	ldrh	r2, [r7, #10]
 800e03a:	801a      	strh	r2, [r3, #0]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	893a      	ldrh	r2, [r7, #8]
 800e040:	805a      	strh	r2, [r3, #2]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	88fa      	ldrh	r2, [r7, #6]
 800e046:	809a      	strh	r2, [r3, #4]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	8b3a      	ldrh	r2, [r7, #24]
 800e04c:	80da      	strh	r2, [r3, #6]
    {
    }
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	4618      	mov	r0, r3
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	887a      	ldrh	r2, [r7, #2]
 800e06c:	801a      	strh	r2, [r3, #0]
    {
    }
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4618      	mov	r0, r3
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800e084:	4a14      	ldr	r2, [pc, #80]	@ (800e0d8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	601a      	str	r2, [r3, #0]
        : rect(),
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	3304      	adds	r3, #4
 800e08e:	4618      	mov	r0, r3
 800e090:	f7ff ffad 	bl	800dfee <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	330c      	adds	r3, #12
 800e098:	4618      	mov	r0, r3
 800e09a:	f7ff ffa8 	bl	800dfee <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	0802c5e4 	.word	0x0802c5e4

0800e0dc <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
    {
 800e0e4:	4a04      	ldr	r2, [pc, #16]	@ (800e0f8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	601a      	str	r2, [r3, #0]
    }
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	370c      	adds	r7, #12
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr
 800e0f8:	0802c5e4 	.word	0x0802c5e4

0800e0fc <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
    }
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7ff ffe9 	bl	800e0dc <_ZN8touchgfx8DrawableD1Ev>
 800e10a:	2128      	movs	r1, #40	@ 0x28
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f01a ffb4 	bl	802907a <_ZdlPvj>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	4618      	mov	r0, r3
 800e116:	3708      	adds	r7, #8
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d005      	beq.n	800e13a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	3314      	adds	r3, #20
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	4798      	blx	r3
        }
    }
 800e13a:	bf00      	nop
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800e142:	b480      	push	{r7}
 800e144:	b083      	sub	sp, #12
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e14a:	2300      	movs	r3, #0
    }
 800e14c:	4618      	mov	r0, r3
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	4608      	mov	r0, r1
 800e162:	4611      	mov	r1, r2
 800e164:	461a      	mov	r2, r3
 800e166:	4603      	mov	r3, r0
 800e168:	817b      	strh	r3, [r7, #10]
 800e16a:	460b      	mov	r3, r1
 800e16c:	813b      	strh	r3, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e172:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e176:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e17a:	4619      	mov	r1, r3
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f000 f82a 	bl	800e1d6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800e182:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e18a:	4619      	mov	r1, r3
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f000 f87e 	bl	800e28e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800e192:	bf00      	nop
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e19a:	b480      	push	{r7}
 800e19c:	b083      	sub	sp, #12
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	887a      	ldrh	r2, [r7, #2]
 800e1aa:	809a      	strh	r2, [r3, #4]
    }
 800e1ac:	bf00      	nop
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	887a      	ldrh	r2, [r7, #2]
 800e1c8:	80da      	strh	r2, [r3, #6]
    }
 800e1ca:	bf00      	nop
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b082      	sub	sp, #8
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
 800e1de:	460b      	mov	r3, r1
 800e1e0:	807b      	strh	r3, [r7, #2]
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	3330      	adds	r3, #48	@ 0x30
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	4798      	blx	r3
        setY(y);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	3334      	adds	r3, #52	@ 0x34
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e204:	4611      	mov	r1, r2
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	4798      	blx	r3
    }
 800e20a:	bf00      	nop
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800e212:	b480      	push	{r7}
 800e214:	b083      	sub	sp, #12
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
 800e21a:	460b      	mov	r3, r1
 800e21c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	887a      	ldrh	r2, [r7, #2]
 800e222:	811a      	strh	r2, [r3, #8]
    }
 800e224:	bf00      	nop
 800e226:	370c      	adds	r7, #12
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr

0800e230 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800e230:	b480      	push	{r7}
 800e232:	b083      	sub	sp, #12
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	460b      	mov	r3, r1
 800e23a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	887a      	ldrh	r2, [r7, #2]
 800e240:	815a      	strh	r2, [r3, #10]
    }
 800e242:	bf00      	nop
 800e244:	370c      	adds	r7, #12
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr

0800e24e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800e24e:	b480      	push	{r7}
 800e250:	b083      	sub	sp, #12
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
    {
    }
 800e256:	bf00      	nop
 800e258:	370c      	adds	r7, #12
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr

0800e262 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e262:	b480      	push	{r7}
 800e264:	b083      	sub	sp, #12
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e26c:	bf00      	nop
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e282:	bf00      	nop
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800e28e:	b580      	push	{r7, lr}
 800e290:	b082      	sub	sp, #8
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
 800e296:	460b      	mov	r3, r1
 800e298:	807b      	strh	r3, [r7, #2]
 800e29a:	4613      	mov	r3, r2
 800e29c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	3338      	adds	r3, #56	@ 0x38
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	4798      	blx	r3
        setHeight(height);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	333c      	adds	r3, #60	@ 0x3c
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e2bc:	4611      	mov	r1, r2
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	4798      	blx	r3
    }
 800e2c2:	bf00      	nop
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e2ca:	b480      	push	{r7}
 800e2cc:	b083      	sub	sp, #12
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e2d4:	bf00      	nop
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
    {
    }
 800e2e8:	bf00      	nop
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	78fa      	ldrb	r2, [r7, #3]
 800e304:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 800e308:	bf00      	nop
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800e322:	4618      	mov	r0, r3
 800e324:	370c      	adds	r7, #12
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr

0800e32e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e32e:	b480      	push	{r7}
 800e330:	b083      	sub	sp, #12
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800e33c:	4618      	mov	r0, r3
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	460b      	mov	r3, r1
 800e352:	807b      	strh	r3, [r7, #2]
 800e354:	4613      	mov	r3, r2
 800e356:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	3354      	adds	r3, #84	@ 0x54
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	8879      	ldrh	r1, [r7, #2]
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e368:	b292      	uxth	r2, r2
 800e36a:	1a8a      	subs	r2, r1, r2
 800e36c:	b292      	uxth	r2, r2
 800e36e:	b210      	sxth	r0, r2
 800e370:	8839      	ldrh	r1, [r7, #0]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e378:	b292      	uxth	r2, r2
 800e37a:	1a8a      	subs	r2, r1, r2
 800e37c:	b292      	uxth	r2, r2
 800e37e:	b212      	sxth	r2, r2
 800e380:	4601      	mov	r1, r0
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	4798      	blx	r3
    }
 800e386:	bf00      	nop
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800e38e:	b480      	push	{r7}
 800e390:	b083      	sub	sp, #12
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e39c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3a4:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3ac:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800e3ae:	bf00      	nop
 800e3b0:	370c      	adds	r7, #12
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr

0800e3ba <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	60f8      	str	r0, [r7, #12]
 800e3c2:	60b9      	str	r1, [r7, #8]
 800e3c4:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f7ff ffe1 	bl	800e38e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	68fa      	ldr	r2, [r7, #12]
 800e3d8:	601a      	str	r2, [r3, #0]
    }
 800e3da:	bf00      	nop
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b084      	sub	sp, #16
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	60f8      	str	r0, [r7, #12]
 800e3ea:	607b      	str	r3, [r7, #4]
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	817b      	strh	r3, [r7, #10]
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7ff ff8c 	bl	800e314 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d008      	beq.n	800e414 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	4618      	mov	r0, r3
 800e406:	f7ff ff92 	bl	800e32e <_ZNK8touchgfx8Drawable11isTouchableEv>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e410:	2301      	movs	r3, #1
 800e412:	e000      	b.n	800e416 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800e414:	2300      	movs	r3, #0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d002      	beq.n	800e420 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	601a      	str	r2, [r3, #0]
        }
    }
 800e420:	bf00      	nop
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	4a05      	ldr	r2, [pc, #20]	@ (800e448 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	601a      	str	r2, [r3, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	f7ff fe4f 	bl	800e0dc <_ZN8touchgfx8DrawableD1Ev>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4618      	mov	r0, r3
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	0802bd40 	.word	0x0802bd40

0800e44c <_ZN8touchgfx9ContainerD0Ev>:
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7ff ffe7 	bl	800e428 <_ZN8touchgfx9ContainerD1Ev>
 800e45a:	212c      	movs	r1, #44	@ 0x2c
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f01a fe0c 	bl	802907a <_ZdlPvj>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	4618      	mov	r0, r3
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
    {
 800e474:	4a06      	ldr	r2, [pc, #24]	@ (800e490 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	601a      	str	r2, [r3, #0]
    }
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	3304      	adds	r3, #4
 800e47e:	4618      	mov	r0, r3
 800e480:	f7ff ffd2 	bl	800e428 <_ZN8touchgfx9ContainerD1Ev>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4618      	mov	r0, r3
 800e488:	3708      	adds	r7, #8
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	0802c6f0 	.word	0x0802c6f0

0800e494 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
    }
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f7ff ffe5 	bl	800e46c <_ZN8touchgfx6ScreenD1Ev>
 800e4a2:	213c      	movs	r1, #60	@ 0x3c
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f01a fde8 	bl	802907a <_ZdlPvj>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3708      	adds	r7, #8
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
    {
    }
 800e4bc:	bf00      	nop
 800e4be:	370c      	adds	r7, #12
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
    {
    }
 800e4d0:	bf00      	nop
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
    {
    }
 800e4e4:	bf00      	nop
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
    {
    }
 800e4f8:	bf00      	nop
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	460b      	mov	r3, r1
 800e50e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800e510:	bf00      	nop
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	3304      	adds	r3, #4
 800e52a:	6839      	ldr	r1, [r7, #0]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f004 fa9c 	bl	8012a6a <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800e532:	bf00      	nop
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
	...

0800e53c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4618      	mov	r0, r3
 800e548:	f7ff fd98 	bl	800e07c <_ZN8touchgfx8DrawableC1Ev>
 800e54c:	4a03      	ldr	r2, [pc, #12]	@ (800e55c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	601a      	str	r2, [r3, #0]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4618      	mov	r0, r3
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	0802b40c 	.word	0x0802b40c

0800e560 <_ZN8touchgfx6WidgetD1Ev>:
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	4a05      	ldr	r2, [pc, #20]	@ (800e580 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	601a      	str	r2, [r3, #0]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4618      	mov	r0, r3
 800e572:	f7ff fdb3 	bl	800e0dc <_ZN8touchgfx8DrawableD1Ev>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4618      	mov	r0, r3
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	0802b40c 	.word	0x0802b40c

0800e584 <_ZN8touchgfx6WidgetD0Ev>:
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7ff ffe7 	bl	800e560 <_ZN8touchgfx6WidgetD1Ev>
 800e592:	2128      	movs	r1, #40	@ 0x28
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f01a fd70 	bl	802907a <_ZdlPvj>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4618      	mov	r0, r3
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	2326      	movs	r3, #38	@ 0x26
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	f01b f944 	bl	8029842 <memset>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7ff ffbd 	bl	800e53c <_ZN8touchgfx6WidgetC1Ev>
 800e5c2:	4a09      	ldr	r2, [pc, #36]	@ (800e5e8 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	22ff      	movs	r2, #255	@ 0xff
 800e5cc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	3328      	adds	r3, #40	@ 0x28
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7ff fcfa 	bl	800dfd0 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3708      	adds	r7, #8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	0802c2ec 	.word	0x0802c2ec

0800e5ec <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	460b      	mov	r3, r1
 800e612:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800e614:	4a06      	ldr	r2, [pc, #24]	@ (800e630 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	887a      	ldrh	r2, [r7, #2]
 800e61e:	809a      	strh	r2, [r3, #4]
    }
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4618      	mov	r0, r3
 800e624:	370c      	adds	r7, #12
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	0802b154 	.word	0x0802b154

0800e634 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 800e634:	b590      	push	{r4, r7, lr}
 800e636:	b087      	sub	sp, #28
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6178      	str	r0, [r7, #20]
 800e63c:	460b      	mov	r3, r1
 800e63e:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e646:	4611      	mov	r1, r2
 800e648:	4618      	mov	r0, r3
 800e64a:	f7ff fde2 	bl	800e212 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	3384      	adds	r3, #132	@ 0x84
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	697c      	ldr	r4, [r7, #20]
 800e658:	463a      	mov	r2, r7
 800e65a:	6979      	ldr	r1, [r7, #20]
 800e65c:	4610      	mov	r0, r2
 800e65e:	4798      	blx	r3
 800e660:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800e664:	463a      	mov	r2, r7
 800e666:	ca07      	ldmia	r2, {r0, r1, r2}
 800e668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e66c:	bf00      	nop
 800e66e:	371c      	adds	r7, #28
 800e670:	46bd      	mov	sp, r7
 800e672:	bd90      	pop	{r4, r7, pc}

0800e674 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800e674:	b590      	push	{r4, r7, lr}
 800e676:	b087      	sub	sp, #28
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6178      	str	r0, [r7, #20]
 800e67c:	460b      	mov	r3, r1
 800e67e:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e686:	4611      	mov	r1, r2
 800e688:	4618      	mov	r0, r3
 800e68a:	f7ff fdd1 	bl	800e230 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3384      	adds	r3, #132	@ 0x84
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	697c      	ldr	r4, [r7, #20]
 800e698:	463a      	mov	r2, r7
 800e69a:	6979      	ldr	r1, [r7, #20]
 800e69c:	4610      	mov	r0, r2
 800e69e:	4798      	blx	r3
 800e6a0:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800e6a4:	463a      	mov	r2, r7
 800e6a6:	ca07      	ldmia	r2, {r0, r1, r2}
 800e6a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e6ac:	bf00      	nop
 800e6ae:	371c      	adds	r7, #28
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd90      	pop	{r4, r7, pc}

0800e6b4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7ff fc95 	bl	800dfee <_ZN8touchgfx4RectC1Ev>
    }
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	3708      	adds	r7, #8
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	78fa      	ldrb	r2, [r7, #3]
 800e6dc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    }
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800e6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800e6f8:	687e      	ldr	r6, [r7, #4]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	3334      	adds	r3, #52	@ 0x34
 800e700:	681c      	ldr	r4, [r3, #0]
 800e702:	887d      	ldrh	r5, [r7, #2]
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 f867 	bl	800e7d8 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800e70a:	4603      	mov	r3, r0
 800e70c:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e70e:	4b1c      	ldr	r3, [pc, #112]	@ (800e780 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d105      	bne.n	800e722 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800e716:	4b1b      	ldr	r3, [pc, #108]	@ (800e784 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800e718:	4a1b      	ldr	r2, [pc, #108]	@ (800e788 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800e71a:	216c      	movs	r1, #108	@ 0x6c
 800e71c:	481b      	ldr	r0, [pc, #108]	@ (800e78c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800e71e:	f01a fe77 	bl	8029410 <__assert_func>
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	889a      	ldrh	r2, [r3, #4]
 800e72a:	4b19      	ldr	r3, [pc, #100]	@ (800e790 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800e72c:	881b      	ldrh	r3, [r3, #0]
 800e72e:	429a      	cmp	r2, r3
 800e730:	bf34      	ite	cc
 800e732:	2301      	movcc	r3, #1
 800e734:	2300      	movcs	r3, #0
 800e736:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d105      	bne.n	800e748 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800e73c:	4b15      	ldr	r3, [pc, #84]	@ (800e794 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800e73e:	4a12      	ldr	r2, [pc, #72]	@ (800e788 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800e740:	216d      	movs	r1, #109	@ 0x6d
 800e742:	4812      	ldr	r0, [pc, #72]	@ (800e78c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800e744:	f01a fe64 	bl	8029410 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800e748:	4b13      	ldr	r3, [pc, #76]	@ (800e798 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	4b0c      	ldr	r3, [pc, #48]	@ (800e780 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800e74e:	6819      	ldr	r1, [r3, #0]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	889b      	ldrh	r3, [r3, #4]
 800e754:	005b      	lsls	r3, r3, #1
 800e756:	440b      	add	r3, r1
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	4413      	add	r3, r2
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	3230      	adds	r2, #48	@ 0x30
 800e764:	6812      	ldr	r2, [r2, #0]
 800e766:	4618      	mov	r0, r3
 800e768:	4790      	blx	r2
 800e76a:	4603      	mov	r3, r0
 800e76c:	1aeb      	subs	r3, r5, r3
 800e76e:	b29b      	uxth	r3, r3
 800e770:	b21b      	sxth	r3, r3
 800e772:	4619      	mov	r1, r3
 800e774:	4630      	mov	r0, r6
 800e776:	47a0      	blx	r4
    }
 800e778:	bf00      	nop
 800e77a:	3714      	adds	r7, #20
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e780:	24006650 	.word	0x24006650
 800e784:	0802a8d4 	.word	0x0802a8d4
 800e788:	0802a918 	.word	0x0802a918
 800e78c:	0802a954 	.word	0x0802a954
 800e790:	24006654 	.word	0x24006654
 800e794:	0802a998 	.word	0x0802a998
 800e798:	24006658 	.word	0x24006658

0800e79c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	807b      	strh	r3, [r7, #2]
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3330      	adds	r3, #48	@ 0x30
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	4798      	blx	r3
        setBaselineY(baselineY);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3364      	adds	r3, #100	@ 0x64
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e7ca:	4611      	mov	r1, r2
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	4798      	blx	r3
    }
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	3328      	adds	r3, #40	@ 0x28
    }
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e7f8:	2300      	movs	r3, #0
    }
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	370c      	adds	r7, #12
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr

0800e806 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800e806:	b580      	push	{r7, lr}
 800e808:	b084      	sub	sp, #16
 800e80a:	af02      	add	r7, sp, #8
 800e80c:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f04f 33ff 	mov.w	r3, #4294967295
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	f04f 33ff 	mov.w	r3, #4294967295
 800e81a:	2200      	movs	r2, #0
 800e81c:	2100      	movs	r1, #0
 800e81e:	f7ff fbfd 	bl	800e01c <_ZN8touchgfx4RectC1Essss>
              text(0)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2200      	movs	r2, #0
 800e826:	609a      	str	r2, [r3, #8]
        {
        }
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4618      	mov	r0, r3
 800e82c:	3708      	adds	r7, #8
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
	...

0800e834 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	4a08      	ldr	r2, [pc, #32]	@ (800e860 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	3328      	adds	r3, #40	@ 0x28
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe fd36 	bl	800d2b8 <_ZN8touchgfx9TypedTextD1Ev>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4618      	mov	r0, r3
 800e850:	f7ff fe86 	bl	800e560 <_ZN8touchgfx6WidgetD1Ev>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4618      	mov	r0, r3
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	0802c25c 	.word	0x0802c25c

0800e864 <_ZN8touchgfx8TextAreaD0Ev>:
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f7ff ffe1 	bl	800e834 <_ZN8touchgfx8TextAreaD1Ev>
 800e872:	2148      	movs	r1, #72	@ 0x48
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f01a fc00 	bl	802907a <_ZdlPvj>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4618      	mov	r0, r3
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    {
    }

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff fc44 	bl	800e11c <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800e894:	bf00      	nop
 800e896:	3708      	adds	r7, #8
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7ff ffad 	bl	800e806 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	4a05      	ldr	r2, [pc, #20]	@ (800e8d4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	601a      	str	r2, [r3, #0]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7ff ffb5 	bl	800e834 <_ZN8touchgfx8TextAreaD1Ev>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	0802c3c8 	.word	0x0802c3c8

0800e8d8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f7ff ffe7 	bl	800e8b4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800e8e6:	2148      	movs	r1, #72	@ 0x48
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f01a fbc6 	bl	802907a <_ZdlPvj>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3708      	adds	r7, #8
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 800e904:	4618      	mov	r0, r3
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
     *
     * @param  dm The new display mode.
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	460b      	mov	r3, r1
 800e91a:	70fb      	strb	r3, [r7, #3]
    {
        displayMode = dm;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	78fa      	ldrb	r2, [r7, #3]
 800e920:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    }
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4618      	mov	r0, r3
 800e93c:	2326      	movs	r3, #38	@ 0x26
 800e93e:	461a      	mov	r2, r3
 800e940:	2100      	movs	r1, #0
 800e942:	f01a ff7e 	bl	8029842 <memset>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4618      	mov	r0, r3
 800e94a:	f7ff fdf7 	bl	800e53c <_ZN8touchgfx6WidgetC1Ev>
 800e94e:	4a0a      	ldr	r2, [pc, #40]	@ (800e978 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	629a      	str	r2, [r3, #40]	@ 0x28
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2101      	movs	r1, #1
 800e966:	4618      	mov	r0, r3
 800e968:	f7ff fcc4 	bl	800e2f4 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	4618      	mov	r0, r3
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	0802bf3c 	.word	0x0802bf3c

0800e97c <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	4a05      	ldr	r2, [pc, #20]	@ (800e99c <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7ff fde7 	bl	800e560 <_ZN8touchgfx6WidgetD1Ev>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4618      	mov	r0, r3
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	0802bf3c 	.word	0x0802bf3c

0800e9a0 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f7ff ffe7 	bl	800e97c <_ZN8touchgfx14AbstractButtonD1Ev>
 800e9ae:	2130      	movs	r1, #48	@ 0x30
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f01a fb62 	bl	802907a <_ZdlPvj>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3708      	adds	r7, #8
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7ff ffb0 	bl	800e930 <_ZN8touchgfx14AbstractButtonC1Ev>
 800e9d0:	4a0c      	ldr	r2, [pc, #48]	@ (800ea04 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	332e      	adds	r3, #46	@ 0x2e
 800e9da:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7ff fb3c 	bl	800e05c <_ZN8touchgfx6BitmapC1Et>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3330      	adds	r3, #48	@ 0x30
 800e9e8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7ff fb35 	bl	800e05c <_ZN8touchgfx6BitmapC1Et>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	22ff      	movs	r2, #255	@ 0xff
 800e9f6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	0802c354 	.word	0x0802c354

0800ea08 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	889a      	ldrh	r2, [r3, #4]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	809a      	strh	r2, [r3, #4]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr

0800ea28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3334      	adds	r3, #52	@ 0x34
 800ea36:	6839      	ldr	r1, [r7, #0]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7ff ffe5 	bl	800ea08 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 f820 	bl	800ea84 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800ea44:	bf00      	nop
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	683a      	ldr	r2, [r7, #0]
 800ea5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800ea5c:	bf00      	nop
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	683a      	ldr	r2, [r7, #0]
 800ea76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
 800ea78:	bf00      	nop
 800ea7a:	370c      	adds	r7, #12
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800ea84:	b590      	push	{r4, r7, lr}
 800ea86:	b08b      	sub	sp, #44	@ 0x2c
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	3334      	adds	r3, #52	@ 0x34
 800ea90:	61fb      	str	r3, [r7, #28]
        return typedTextId < numberOfTypedTexts;
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	889a      	ldrh	r2, [r3, #4]
 800ea96:	4b46      	ldr	r3, [pc, #280]	@ (800ebb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800ea98:	881b      	ldrh	r3, [r3, #0]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	bf34      	ite	cc
 800ea9e:	2301      	movcc	r3, #1
 800eaa0:	2300      	movcs	r3, #0
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d07a      	beq.n	800eb9e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11a>
        {
            const Font* f = typedText.getFont();
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	3334      	adds	r3, #52	@ 0x34
 800eaac:	613b      	str	r3, [r7, #16]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800eaae:	4b41      	ldr	r3, [pc, #260]	@ (800ebb4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d105      	bne.n	800eac2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x3e>
 800eab6:	4b40      	ldr	r3, [pc, #256]	@ (800ebb8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 800eab8:	4a40      	ldr	r2, [pc, #256]	@ (800ebbc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 800eaba:	216c      	movs	r1, #108	@ 0x6c
 800eabc:	4840      	ldr	r0, [pc, #256]	@ (800ebc0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800eabe:	f01a fca7 	bl	8029410 <__assert_func>
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	60fb      	str	r3, [r7, #12]
        return typedTextId < numberOfTypedTexts;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	889a      	ldrh	r2, [r3, #4]
 800eaca:	4b39      	ldr	r3, [pc, #228]	@ (800ebb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800eacc:	881b      	ldrh	r3, [r3, #0]
 800eace:	429a      	cmp	r2, r3
 800ead0:	bf34      	ite	cc
 800ead2:	2301      	movcc	r3, #1
 800ead4:	2300      	movcs	r3, #0
 800ead6:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d105      	bne.n	800eae8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
 800eadc:	4b39      	ldr	r3, [pc, #228]	@ (800ebc4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 800eade:	4a37      	ldr	r2, [pc, #220]	@ (800ebbc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 800eae0:	216d      	movs	r1, #109	@ 0x6d
 800eae2:	4837      	ldr	r0, [pc, #220]	@ (800ebc0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800eae4:	f01a fc94 	bl	8029410 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800eae8:	4b37      	ldr	r3, [pc, #220]	@ (800ebc8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x144>)
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	4b31      	ldr	r3, [pc, #196]	@ (800ebb4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800eaee:	6819      	ldr	r1, [r3, #0]
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	889b      	ldrh	r3, [r3, #4]
 800eaf4:	005b      	lsls	r3, r3, #1
 800eaf6:	440b      	add	r3, r1
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	4413      	add	r3, r2
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	627b      	str	r3, [r7, #36]	@ 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	3334      	adds	r3, #52	@ 0x34
 800eb06:	61bb      	str	r3, [r7, #24]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800eb08:	4b2a      	ldr	r3, [pc, #168]	@ (800ebb4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d105      	bne.n	800eb1c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>
 800eb10:	4b29      	ldr	r3, [pc, #164]	@ (800ebb8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 800eb12:	4a2e      	ldr	r2, [pc, #184]	@ (800ebcc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x148>)
 800eb14:	2160      	movs	r1, #96	@ 0x60
 800eb16:	482a      	ldr	r0, [pc, #168]	@ (800ebc0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800eb18:	f01a fc7a 	bl	8029410 <__assert_func>
 800eb1c:	69bb      	ldr	r3, [r7, #24]
 800eb1e:	617b      	str	r3, [r7, #20]
        return typedTextId < numberOfTypedTexts;
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	889a      	ldrh	r2, [r3, #4]
 800eb24:	4b22      	ldr	r3, [pc, #136]	@ (800ebb0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800eb26:	881b      	ldrh	r3, [r3, #0]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	bf34      	ite	cc
 800eb2c:	2301      	movcc	r3, #1
 800eb2e:	2300      	movcs	r3, #0
 800eb30:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d105      	bne.n	800eb42 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xbe>
 800eb36:	4b23      	ldr	r3, [pc, #140]	@ (800ebc4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 800eb38:	4a24      	ldr	r2, [pc, #144]	@ (800ebcc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x148>)
 800eb3a:	2161      	movs	r1, #97	@ 0x61
 800eb3c:	4820      	ldr	r0, [pc, #128]	@ (800ebc0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800eb3e:	f01a fc67 	bl	8029410 <__assert_func>
        return texts->getText(typedTextId);
 800eb42:	4b23      	ldr	r3, [pc, #140]	@ (800ebd0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x14c>)
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	889b      	ldrh	r3, [r3, #4]
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	4610      	mov	r0, r2
 800eb4e:	f000 fe31 	bl	800f7b4 <_ZNK8touchgfx5Texts7getTextEt>
 800eb52:	4603      	mov	r3, r0
 800eb54:	bf00      	nop
 800eb56:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800eb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	3338      	adds	r3, #56	@ 0x38
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb62:	4798      	blx	r3
 800eb64:	4603      	mov	r3, r0
 800eb66:	461c      	mov	r4, r3
 800eb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	3348      	adds	r3, #72	@ 0x48
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	6a39      	ldr	r1, [r7, #32]
 800eb72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb74:	4798      	blx	r3
 800eb76:	4603      	mov	r3, r0
 800eb78:	fb14 f303 	smulbb	r3, r4, r3
 800eb7c:	b29c      	uxth	r4, r3
 800eb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3324      	adds	r3, #36	@ 0x24
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	6a39      	ldr	r1, [r7, #32]
 800eb88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb8a:	4798      	blx	r3
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	4423      	add	r3, r4
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	b21a      	sxth	r2, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800eb9c:	e003      	b.n	800eba6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x122>
            textHeightIncludingSpacing = 0;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    }
 800eba6:	bf00      	nop
 800eba8:	372c      	adds	r7, #44	@ 0x2c
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd90      	pop	{r4, r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	24006654 	.word	0x24006654
 800ebb4:	24006650 	.word	0x24006650
 800ebb8:	0802a8d4 	.word	0x0802a8d4
 800ebbc:	0802a918 	.word	0x0802a918
 800ebc0:	0802a954 	.word	0x0802a954
 800ebc4:	0802a998 	.word	0x0802a998
 800ebc8:	24006658 	.word	0x24006658
 800ebcc:	0802a9d8 	.word	0x0802a9d8
 800ebd0:	2400665c 	.word	0x2400665c

0800ebd4 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	8812      	ldrh	r2, [r2, #0]
 800ebe6:	869a      	strh	r2, [r3, #52]	@ 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	68b9      	ldr	r1, [r7, #8]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f006 fba4 	bl	801533c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800ebf4:	bf00      	nop
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <_ZN8touchgfx4ViewI13mainPresenterED1Ev>:
class View : public Screen
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	4a05      	ldr	r2, [pc, #20]	@ (800ec1c <_ZN8touchgfx4ViewI13mainPresenterED1Ev+0x20>)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	601a      	str	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7ff fc2d 	bl	800e46c <_ZN8touchgfx6ScreenD1Ev>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4618      	mov	r0, r3
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	0802b348 	.word	0x0802b348

0800ec20 <_ZN8touchgfx4ViewI13mainPresenterED0Ev>:
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7ff ffe7 	bl	800ebfc <_ZN8touchgfx4ViewI13mainPresenterED1Ev>
 800ec2e:	2140      	movs	r1, #64	@ 0x40
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f01a fa22 	bl	802907a <_ZdlPvj>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	4a05      	ldr	r2, [pc, #20]	@ (800ec60 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7ff fc85 	bl	800e560 <_ZN8touchgfx6WidgetD1Ev>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	0802c2ec 	.word	0x0802c2ec

0800ec64 <_ZN8touchgfx3BoxD0Ev>:
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7ff ffe7 	bl	800ec40 <_ZN8touchgfx3BoxD1Ev>
 800ec72:	212c      	movs	r1, #44	@ 0x2c
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f01a fa00 	bl	802907a <_ZdlPvj>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	4a05      	ldr	r2, [pc, #20]	@ (800eca4 <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	601a      	str	r2, [r3, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7ff fbc7 	bl	800e428 <_ZN8touchgfx9ContainerD1Ev>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3708      	adds	r7, #8
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	0802bca4 	.word	0x0802bca4

0800eca8 <_ZN8touchgfx13AbstractClockD0Ev>:
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7ff ffe7 	bl	800ec84 <_ZN8touchgfx13AbstractClockD1Ev>
 800ecb6:	2130      	movs	r1, #48	@ 0x30
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f01a f9de 	bl	802907a <_ZdlPvj>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	4a05      	ldr	r2, [pc, #20]	@ (800ece8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	601a      	str	r2, [r3, #0]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7ff fdeb 	bl	800e8b4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	3708      	adds	r7, #8
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	0802b37c 	.word	0x0802b37c

0800ecec <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7ff ffe7 	bl	800ecc8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ecfa:	214c      	movs	r1, #76	@ 0x4c
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f01a f9bc 	bl	802907a <_ZdlPvj>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	4618      	mov	r0, r3
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <_ZN8touchgfx12DigitalClockD1Ev>:
class DigitalClock : public AbstractClock
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	4a08      	ldr	r2, [pc, #32]	@ (800ed38 <_ZN8touchgfx12DigitalClockD1Ev+0x2c>)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	601a      	str	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	3334      	adds	r3, #52	@ 0x34
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7ff ffd2 	bl	800ecc8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7ff ffac 	bl	800ec84 <_ZN8touchgfx13AbstractClockD1Ev>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	0802bafc 	.word	0x0802bafc

0800ed3c <_ZN8touchgfx12DigitalClockD0Ev>:
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7ff ffe1 	bl	800ed0c <_ZN8touchgfx12DigitalClockD1Ev>
 800ed4a:	2198      	movs	r1, #152	@ 0x98
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f01a f994 	bl	802907a <_ZdlPvj>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4618      	mov	r0, r3
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	4a05      	ldr	r2, [pc, #20]	@ (800ed7c <_ZN8touchgfx5ImageD1Ev+0x20>)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	601a      	str	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7ff fbf7 	bl	800e560 <_ZN8touchgfx6WidgetD1Ev>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	4618      	mov	r0, r3
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	0802c458 	.word	0x0802c458

0800ed80 <_ZN8touchgfx5ImageD0Ev>:
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f7ff ffe7 	bl	800ed5c <_ZN8touchgfx5ImageD1Ev>
 800ed8e:	212c      	movs	r1, #44	@ 0x2c
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f01a f972 	bl	802907a <_ZdlPvj>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	4a05      	ldr	r2, [pc, #20]	@ (800edc0 <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	601a      	str	r2, [r3, #0]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7ff ffd3 	bl	800ed5c <_ZN8touchgfx5ImageD1Ev>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	4618      	mov	r0, r3
 800edba:	3708      	adds	r7, #8
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	0802c0d4 	.word	0x0802c0d4

0800edc4 <_ZN8touchgfx13TextureMapperD0Ev>:
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7ff ffe7 	bl	800eda0 <_ZN8touchgfx13TextureMapperD1Ev>
 800edd2:	2190      	movs	r1, #144	@ 0x90
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f01a f950 	bl	802907a <_ZdlPvj>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4618      	mov	r0, r3
 800edde:	3708      	adds	r7, #8
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <_ZN8touchgfx22AnimationTextureMapperD1Ev>:
 * A TextureMapper with animation capabilities. Note that the angles of the TextureMapper is
 * normalized to lie in the range [0; 2PI[ at the beginning at the animation. The end
 * angles should be relative to this and are limited to values in the range [-32.7;
 * 32.7].
 */
class AnimationTextureMapper : public TextureMapper
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	4a05      	ldr	r2, [pc, #20]	@ (800ee04 <_ZN8touchgfx22AnimationTextureMapperD1Ev+0x20>)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	601a      	str	r2, [r3, #0]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7ff ffd3 	bl	800eda0 <_ZN8touchgfx13TextureMapperD1Ev>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4618      	mov	r0, r3
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	0802bfac 	.word	0x0802bfac

0800ee08 <_ZN8touchgfx22AnimationTextureMapperD0Ev>:
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f7ff ffe7 	bl	800ede4 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800ee16:	21ec      	movs	r1, #236	@ 0xec
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f01a f92e 	bl	802907a <_ZdlPvj>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4618      	mov	r0, r3
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <_ZN8touchgfx11AnalogClockD1Ev>:
 * point of each hand as well as the global rotation point of the clock. You can
 * customize the behavior of the AnalogClock in respect to animations and relations
 * between the hands e.g. if the hour hand should move gradually towards the next hour
 * as the minute hand progresses (setHourHandMinuteCorrection())
 */
class AnalogClock : public AbstractClock
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	4a10      	ldr	r2, [pc, #64]	@ (800ee74 <_ZN8touchgfx11AnalogClockD1Ev+0x4c>)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7ff ffd1 	bl	800ede4 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7ff ffcb 	bl	800ede4 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	335c      	adds	r3, #92	@ 0x5c
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7ff ffc6 	bl	800ede4 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	3330      	adds	r3, #48	@ 0x30
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7ff ff7d 	bl	800ed5c <_ZN8touchgfx5ImageD1Ev>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7ff ff0d 	bl	800ec84 <_ZN8touchgfx13AbstractClockD1Ev>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3708      	adds	r7, #8
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	0802bbbc 	.word	0x0802bbbc

0800ee78 <_ZN8touchgfx11AnalogClockD0Ev>:
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7ff ffd1 	bl	800ee28 <_ZN8touchgfx11AnalogClockD1Ev>
 800ee86:	f44f 714c 	mov.w	r1, #816	@ 0x330
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f01a f8f5 	bl	802907a <_ZdlPvj>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4618      	mov	r0, r3
 800ee94:	3708      	adds	r7, #8
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
	...

0800ee9c <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	4a05      	ldr	r2, [pc, #20]	@ (800eebc <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	601a      	str	r2, [r3, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7ff fd65 	bl	800e97c <_ZN8touchgfx14AbstractButtonD1Ev>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3708      	adds	r7, #8
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	0802c354 	.word	0x0802c354

0800eec0 <_ZN8touchgfx6ButtonD0Ev>:
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f7ff ffe7 	bl	800ee9c <_ZN8touchgfx6ButtonD1Ev>
 800eece:	2134      	movs	r1, #52	@ 0x34
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f01a f8d2 	bl	802907a <_ZdlPvj>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4618      	mov	r0, r3
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	4a08      	ldr	r2, [pc, #32]	@ (800ef0c <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	601a      	str	r2, [r3, #0]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	3334      	adds	r3, #52	@ 0x34
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fe f9e0 	bl	800d2b8 <_ZN8touchgfx9TypedTextD1Ev>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7ff ffce 	bl	800ee9c <_ZN8touchgfx6ButtonD1Ev>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4618      	mov	r0, r3
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	0802c4c4 	.word	0x0802c4c4

0800ef10 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f7ff ffe1 	bl	800eee0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ef1e:	2148      	movs	r1, #72	@ 0x48
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f01a f8aa 	bl	802907a <_ZdlPvj>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7ff fd40 	bl	800e9c0 <_ZN8touchgfx6ButtonC1Ev>
 800ef40:	4a07      	ldr	r2, [pc, #28]	@ (800ef60 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	601a      	str	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	3334      	adds	r3, #52	@ 0x34
 800ef4a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7ff f884 	bl	800e05c <_ZN8touchgfx6BitmapC1Et>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	4618      	mov	r0, r3
 800ef58:	3708      	adds	r7, #8
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	0802c1e8 	.word	0x0802c1e8

0800ef64 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	4a05      	ldr	r2, [pc, #20]	@ (800ef84 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	601a      	str	r2, [r3, #0]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7ff ff91 	bl	800ee9c <_ZN8touchgfx6ButtonD1Ev>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	0802c1e8 	.word	0x0802c1e8

0800ef88 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7ff ffe7 	bl	800ef64 <_ZN8touchgfx12ToggleButtonD1Ev>
 800ef96:	2138      	movs	r1, #56	@ 0x38
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f01a f86e 	bl	802907a <_ZdlPvj>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <_ZN12mainViewBaseC1Ev>:
#include <gui_generated/main_screen/mainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

mainViewBase::mainViewBase()
 800efa8:	b590      	push	{r4, r7, lr}
 800efaa:	b097      	sub	sp, #92	@ 0x5c
 800efac:	af02      	add	r7, sp, #8
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4618      	mov	r0, r3
 800efb4:	f000 fa44 	bl	800f440 <_ZN8touchgfx4ViewI13mainPresenterEC1Ev>
 800efb8:	4ae2      	ldr	r2, [pc, #904]	@ (800f344 <_ZN12mainViewBaseC1Ev+0x39c>)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	601a      	str	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	3340      	adds	r3, #64	@ 0x40
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7ff faee 	bl	800e5a4 <_ZN8touchgfx3BoxC1Ev>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	336c      	adds	r3, #108	@ 0x6c
 800efcc:	4618      	mov	r0, r3
 800efce:	f7ff fae9 	bl	800e5a4 <_ZN8touchgfx3BoxC1Ev>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	3398      	adds	r3, #152	@ 0x98
 800efd6:	4618      	mov	r0, r3
 800efd8:	f003 f8ea 	bl	80121b0 <_ZN8touchgfx12DigitalClockC1Ev>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800efe2:	4618      	mov	r0, r3
 800efe4:	f003 fc58 	bl	8012898 <_ZN8touchgfx11AnalogClockC1Ev>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f503 638c 	add.w	r3, r3, #1120	@ 0x460
 800efee:	4618      	mov	r0, r3
 800eff0:	f006 fbec 	bl	80157cc <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 800effa:	4618      	mov	r0, r3
 800effc:	f7ff ff98 	bl	800ef30 <_ZN8touchgfx12ToggleButtonC1Ev>
{
    __background.setPosition(0, 0, 800, 480);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800f006:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800f010:	2200      	movs	r2, #0
 800f012:	2100      	movs	r1, #0
 800f014:	f7ff f8a0 	bl	800e158 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800f01e:	2300      	movs	r3, #0
 800f020:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f024:	2300      	movs	r3, #0
 800f026:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f02a:	2300      	movs	r3, #0
 800f02c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f030:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f034:	041a      	lsls	r2, r3, #16
 800f036:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800f03a:	021b      	lsls	r3, r3, #8
 800f03c:	431a      	orrs	r2, r3
 800f03e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800f042:	4313      	orrs	r3, r2
 800f044:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f048:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f04c:	4611      	mov	r1, r2
 800f04e:	4618      	mov	r0, r3
 800f050:	f7fe ffbe 	bl	800dfd0 <_ZN8touchgfx9colortypeC1Em>
 800f054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f056:	4619      	mov	r1, r3
 800f058:	4620      	mov	r0, r4
 800f05a:	f7ff fac7 	bl	800e5ec <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	3340      	adds	r3, #64	@ 0x40
 800f064:	4619      	mov	r1, r3
 800f066:	4610      	mov	r0, r2
 800f068:	f7ff fa58 	bl	800e51c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 800, 480);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800f072:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800f07c:	2200      	movs	r2, #0
 800f07e:	2100      	movs	r1, #0
 800f080:	f7ff f86a 	bl	800e158 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(22, 22, 22));
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800f08a:	2316      	movs	r3, #22
 800f08c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800f090:	2316      	movs	r3, #22
 800f092:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800f096:	2316      	movs	r3, #22
 800f098:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800f09c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800f0a0:	041a      	lsls	r2, r3, #16
 800f0a2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800f0a6:	021b      	lsls	r3, r3, #8
 800f0a8:	431a      	orrs	r2, r3
 800f0aa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f0b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fe ff88 	bl	800dfd0 <_ZN8touchgfx9colortypeC1Em>
 800f0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f7ff fa91 	bl	800e5ec <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800f0ca:	687a      	ldr	r2, [r7, #4]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	336c      	adds	r3, #108	@ 0x6c
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	f7ff fa22 	bl	800e51c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    digitalClock.setPosition(325, 333, 150, 30);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800f0de:	231e      	movs	r3, #30
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	2396      	movs	r3, #150	@ 0x96
 800f0e4:	f240 124d 	movw	r2, #333	@ 0x14d
 800f0e8:	f240 1145 	movw	r1, #325	@ 0x145
 800f0ec:	f7ff f834 	bl	800e158 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock.setColor(touchgfx::Color::getColorFromRGB(237, 62, 15));
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800f0f6:	23ed      	movs	r3, #237	@ 0xed
 800f0f8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800f0fc:	233e      	movs	r3, #62	@ 0x3e
 800f0fe:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 800f102:	230f      	movs	r3, #15
 800f104:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800f108:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800f10c:	041a      	lsls	r2, r3, #16
 800f10e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f112:	021b      	lsls	r3, r3, #8
 800f114:	431a      	orrs	r2, r3
 800f116:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800f11a:	4313      	orrs	r3, r2
 800f11c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f120:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f124:	4611      	mov	r1, r2
 800f126:	4618      	mov	r0, r3
 800f128:	f7fe ff52 	bl	800dfd0 <_ZN8touchgfx9colortypeC1Em>
 800f12c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f12e:	4619      	mov	r1, r3
 800f130:	4620      	mov	r0, r4
 800f132:	f002 ff83 	bl	801203c <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YS9N));
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800f13c:	f107 030c 	add.w	r3, r7, #12
 800f140:	2101      	movs	r1, #1
 800f142:	4618      	mov	r0, r3
 800f144:	f7ff fa60 	bl	800e608 <_ZN8touchgfx9TypedTextC1Et>
 800f148:	f107 030c 	add.w	r3, r7, #12
 800f14c:	4619      	mov	r1, r3
 800f14e:	4620      	mov	r0, r4
 800f150:	f002 ff7f 	bl	8012052 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 800f154:	f107 030c 	add.w	r3, r7, #12
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fe f8ad 	bl	800d2b8 <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock.displayLeadingZeroForHourIndicator(true);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	3398      	adds	r3, #152	@ 0x98
 800f162:	2101      	movs	r1, #1
 800f164:	4618      	mov	r0, r3
 800f166:	f003 f871 	bl	801224c <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock.setDisplayMode(touchgfx::DigitalClock::DISPLAY_12_HOUR);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	3398      	adds	r3, #152	@ 0x98
 800f16e:	2102      	movs	r1, #2
 800f170:	4618      	mov	r0, r3
 800f172:	f7ff fbcd 	bl	800e910 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock.setTime12Hour(10, 10, 0, true);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800f17c:	2301      	movs	r3, #1
 800f17e:	9300      	str	r3, [sp, #0]
 800f180:	2300      	movs	r3, #0
 800f182:	220a      	movs	r2, #10
 800f184:	210a      	movs	r1, #10
 800f186:	f003 fc17 	bl	80129b8 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>
    add(digitalClock);
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	3398      	adds	r3, #152	@ 0x98
 800f190:	4619      	mov	r1, r3
 800f192:	4610      	mov	r0, r2
 800f194:	f7ff f9c2 	bl	800e51c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    analogClock.setXY(284, 30);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f19e:	221e      	movs	r2, #30
 800f1a0:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7ff f816 	bl	800e1d6 <_ZN8touchgfx8Drawable5setXYEss>
    analogClock.setBackground(BITMAP_BLUE_CLOCKS_BACKGROUNDS_CLOCK_STANDARD_BACKGROUND_ID, 116, 116);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800f1b0:	2374      	movs	r3, #116	@ 0x74
 800f1b2:	2274      	movs	r2, #116	@ 0x74
 800f1b4:	2103      	movs	r1, #3
 800f1b6:	f003 f9b9 	bl	801252c <_ZN8touchgfx11AnalogClock13setBackgroundEtss>
    analogClock.setupHourHand(BITMAP_BLUE_CLOCKS_HANDS_CLOCK_STANDARD_HOUR_HAND_ID, 7, 52);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800f1c0:	2334      	movs	r3, #52	@ 0x34
 800f1c2:	2207      	movs	r2, #7
 800f1c4:	2104      	movs	r1, #4
 800f1c6:	f003 f857 	bl	8012278 <_ZN8touchgfx11AnalogClock13setupHourHandEtss>
    analogClock.setHourHandMinuteCorrection(true);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f1d0:	2101      	movs	r1, #1
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f003 f8fb 	bl	80123ce <_ZN8touchgfx11AnalogClock27setHourHandMinuteCorrectionEb>
    analogClock.setupMinuteHand(BITMAP_BLUE_CLOCKS_HANDS_CLOCK_STANDARD_MINUTE_HAND_ID, 7, 67);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800f1de:	2343      	movs	r3, #67	@ 0x43
 800f1e0:	2207      	movs	r2, #7
 800f1e2:	2105      	movs	r1, #5
 800f1e4:	f003 f854 	bl	8012290 <_ZN8touchgfx11AnalogClock15setupMinuteHandEtss>
    analogClock.setMinuteHandSecondCorrection(false);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f003 f906 	bl	8012402 <_ZN8touchgfx11AnalogClock29setMinuteHandSecondCorrectionEb>
    analogClock.setupSecondHand(BITMAP_BLUE_CLOCKS_HANDS_CLOCK_STANDARD_SECOND_HAND_ID, 3, 66);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800f1fc:	2342      	movs	r3, #66	@ 0x42
 800f1fe:	2203      	movs	r2, #3
 800f200:	2106      	movs	r1, #6
 800f202:	f003 f851 	bl	80122a8 <_ZN8touchgfx11AnalogClock15setupSecondHandEtss>
    analogClock.initializeTime24Hour(10, 10, 0);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800f20c:	2300      	movs	r3, #0
 800f20e:	220a      	movs	r2, #10
 800f210:	210a      	movs	r1, #10
 800f212:	f003 f855 	bl	80122c0 <_ZN8touchgfx11AnalogClock20initializeTime24HourEhhh>
    analogClock.setAnimation(10, touchgfx::EasingEquations::cubicEaseInOut);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f21c:	4a4a      	ldr	r2, [pc, #296]	@ (800f348 <_ZN12mainViewBaseC1Ev+0x3a0>)
 800f21e:	210a      	movs	r1, #10
 800f220:	4618      	mov	r0, r3
 800f222:	f003 f8b2 	bl	801238a <_ZN8touchgfx11AnalogClock12setAnimationEtPFstsstE>
    add(analogClock);
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f22e:	4619      	mov	r1, r3
 800f230:	4610      	mov	r0, r2
 800f232:	f7ff f973 	bl	800e51c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel1.setXY(568, 314);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f503 638c 	add.w	r3, r3, #1120	@ 0x460
 800f23c:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 800f240:	f44f 710e 	mov.w	r1, #568	@ 0x238
 800f244:	4618      	mov	r0, r3
 800f246:	f7fe ffc6 	bl	800e1d6 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f503 648c 	add.w	r4, r3, #1120	@ 0x460
 800f250:	f107 0314 	add.w	r3, r7, #20
 800f254:	2101      	movs	r1, #1
 800f256:	4618      	mov	r0, r3
 800f258:	f7fe ff00 	bl	800e05c <_ZN8touchgfx6BitmapC1Et>
 800f25c:	f107 0318 	add.w	r3, r7, #24
 800f260:	2102      	movs	r1, #2
 800f262:	4618      	mov	r0, r3
 800f264:	f7fe fefa 	bl	800e05c <_ZN8touchgfx6BitmapC1Et>
 800f268:	f107 0218 	add.w	r2, r7, #24
 800f26c:	f107 0314 	add.w	r3, r7, #20
 800f270:	4619      	mov	r1, r3
 800f272:	4620      	mov	r0, r4
 800f274:	f006 f862 	bl	801533c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_L6CL));
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f503 648c 	add.w	r4, r3, #1120	@ 0x460
 800f27e:	f107 031c 	add.w	r3, r7, #28
 800f282:	2102      	movs	r1, #2
 800f284:	4618      	mov	r0, r3
 800f286:	f7ff f9bf 	bl	800e608 <_ZN8touchgfx9TypedTextC1Et>
 800f28a:	f107 031c 	add.w	r3, r7, #28
 800f28e:	4619      	mov	r1, r3
 800f290:	4620      	mov	r0, r4
 800f292:	f7ff fbc9 	bl	800ea28 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800f296:	f107 031c 	add.w	r3, r7, #28
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fe f80c 	bl	800d2b8 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f503 648c 	add.w	r4, r3, #1120	@ 0x460
 800f2a6:	23ff      	movs	r3, #255	@ 0xff
 800f2a8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800f2ac:	23ff      	movs	r3, #255	@ 0xff
 800f2ae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800f2b2:	23ff      	movs	r3, #255	@ 0xff
 800f2b4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800f2b8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800f2bc:	041a      	lsls	r2, r3, #16
 800f2be:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800f2c2:	021b      	lsls	r3, r3, #8
 800f2c4:	431a      	orrs	r2, r3
 800f2c6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f2d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f2d4:	4611      	mov	r1, r2
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fe fe7a 	bl	800dfd0 <_ZN8touchgfx9colortypeC1Em>
 800f2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2de:	4619      	mov	r1, r3
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f7ff fbb3 	bl	800ea4c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f503 648c 	add.w	r4, r3, #1120	@ 0x460
 800f2ec:	23ff      	movs	r3, #255	@ 0xff
 800f2ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f2f2:	23ff      	movs	r3, #255	@ 0xff
 800f2f4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800f2f8:	23ff      	movs	r3, #255	@ 0xff
 800f2fa:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800f2fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f302:	041a      	lsls	r2, r3, #16
 800f304:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800f308:	021b      	lsls	r3, r3, #8
 800f30a:	431a      	orrs	r2, r3
 800f30c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800f310:	4313      	orrs	r3, r2
 800f312:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f316:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f31a:	4611      	mov	r1, r2
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fe fe57 	bl	800dfd0 <_ZN8touchgfx9colortypeC1Em>
 800f322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f324:	4619      	mov	r1, r3
 800f326:	4620      	mov	r0, r4
 800f328:	f7ff fb9e 	bl	800ea68 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel1);
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f503 638c 	add.w	r3, r3, #1120	@ 0x460
 800f334:	4619      	mov	r1, r3
 800f336:	4610      	mov	r0, r2
 800f338:	f7ff f8f0 	bl	800e51c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    toggleButton1.setXY(63, 325);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 800f342:	e003      	b.n	800f34c <_ZN12mainViewBaseC1Ev+0x3a4>
 800f344:	0802b314 	.word	0x0802b314
 800f348:	08018f01 	.word	0x08018f01
 800f34c:	f240 1245 	movw	r2, #325	@ 0x145
 800f350:	213f      	movs	r1, #63	@ 0x3f
 800f352:	4618      	mov	r0, r3
 800f354:	f7fe ff3f 	bl	800e1d6 <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f503 6495 	add.w	r4, r3, #1192	@ 0x4a8
 800f35e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f362:	2107      	movs	r1, #7
 800f364:	4618      	mov	r0, r3
 800f366:	f7fe fe79 	bl	800e05c <_ZN8touchgfx6BitmapC1Et>
 800f36a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f36e:	2108      	movs	r1, #8
 800f370:	4618      	mov	r0, r3
 800f372:	f7fe fe73 	bl	800e05c <_ZN8touchgfx6BitmapC1Et>
 800f376:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f37a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f37e:	4619      	mov	r1, r3
 800f380:	4620      	mov	r0, r4
 800f382:	f7ff fc27 	bl	800ebd4 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    add(toggleButton1);
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 800f38e:	4619      	mov	r1, r3
 800f390:	4610      	mov	r0, r2
 800f392:	f7ff f8c3 	bl	800e51c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4618      	mov	r0, r3
 800f39a:	3754      	adds	r7, #84	@ 0x54
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd90      	pop	{r4, r7, pc}

0800f3a0 <_ZN12mainViewBaseD1Ev>:

mainViewBase::~mainViewBase()
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	4a16      	ldr	r2, [pc, #88]	@ (800f404 <_ZN12mainViewBaseD1Ev+0x64>)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	601a      	str	r2, [r3, #0]
{

}
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7ff fdd5 	bl	800ef64 <_ZN8touchgfx12ToggleButtonD1Ev>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f503 638c 	add.w	r3, r3, #1120	@ 0x460
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7ff fd8d 	bl	800eee0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff fd2b 	bl	800ee28 <_ZN8touchgfx11AnalogClockD1Ev>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	3398      	adds	r3, #152	@ 0x98
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7ff fc98 	bl	800ed0c <_ZN8touchgfx12DigitalClockD1Ev>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	336c      	adds	r3, #108	@ 0x6c
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff fc2d 	bl	800ec40 <_ZN8touchgfx3BoxD1Ev>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	3340      	adds	r3, #64	@ 0x40
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7ff fc28 	bl	800ec40 <_ZN8touchgfx3BoxD1Ev>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7ff fc02 	bl	800ebfc <_ZN8touchgfx4ViewI13mainPresenterED1Ev>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3708      	adds	r7, #8
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	0802b314 	.word	0x0802b314

0800f408 <_ZN12mainViewBaseD0Ev>:
mainViewBase::~mainViewBase()
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
}
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff ffc5 	bl	800f3a0 <_ZN12mainViewBaseD1Ev>
 800f416:	f44f 619c 	mov.w	r1, #1248	@ 0x4e0
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f019 fe2d 	bl	802907a <_ZdlPvj>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4618      	mov	r0, r3
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <_ZN12mainViewBase11setupScreenEv>:

void mainViewBase::setupScreen()
{
 800f42a:	b480      	push	{r7}
 800f42c:	b083      	sub	sp, #12
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]

}
 800f432:	bf00      	nop
 800f434:	370c      	adds	r7, #12
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr
	...

0800f440 <_ZN8touchgfx4ViewI13mainPresenterEC1Ev>:
    View()
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4618      	mov	r0, r3
 800f44c:	f009 fba6 	bl	8018b9c <_ZN8touchgfx6ScreenC1Ev>
 800f450:	4a05      	ldr	r2, [pc, #20]	@ (800f468 <_ZN8touchgfx4ViewI13mainPresenterEC1Ev+0x28>)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	601a      	str	r2, [r3, #0]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	0802b348 	.word	0x0802b348

0800f46c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800f46c:	b480      	push	{r7}
 800f46e:	af00      	add	r7, sp, #0
    return bitmap_database;
 800f470:	4b02      	ldr	r3, [pc, #8]	@ (800f47c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800f472:	4618      	mov	r0, r3
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr
 800f47c:	0802b46c 	.word	0x0802b46c

0800f480 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800f480:	b480      	push	{r7}
 800f482:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800f484:	230d      	movs	r3, #13
}
 800f486:	4618      	mov	r0, r3
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800f490:	b480      	push	{r7}
 800f492:	b085      	sub	sp, #20
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	460b      	mov	r3, r1
 800f49a:	607a      	str	r2, [r7, #4]
 800f49c:	817b      	strh	r3, [r7, #10]
        return 0;
 800f49e:	2300      	movs	r3, #0
    }
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3714      	adds	r7, #20
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
        return 0;
 800f4b4:	2300      	movs	r3, #0
    }
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	370c      	adds	r7, #12
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c0:	4770      	bx	lr

0800f4c2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f4c2:	b480      	push	{r7}
 800f4c4:	b083      	sub	sp, #12
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
        return 0;
 800f4ca:	2300      	movs	r3, #0
    }
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800f4d8:	b480      	push	{r7}
 800f4da:	b085      	sub	sp, #20
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800f4e6:	4a07      	ldr	r2, [pc, #28]	@ (800f504 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	6013      	str	r3, [r2, #0]
        fonts = f;
 800f4ec:	4a06      	ldr	r2, [pc, #24]	@ (800f508 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800f4f2:	4a06      	ldr	r2, [pc, #24]	@ (800f50c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800f4f4:	88fb      	ldrh	r3, [r7, #6]
 800f4f6:	8013      	strh	r3, [r2, #0]
    }
 800f4f8:	bf00      	nop
 800f4fa:	3714      	adds	r7, #20
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr
 800f504:	24006650 	.word	0x24006650
 800f508:	24006658 	.word	0x24006658
 800f50c:	24006654 	.word	0x24006654

0800f510 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f510:	b40e      	push	{r1, r2, r3}
 800f512:	b580      	push	{r7, lr}
 800f514:	b085      	sub	sp, #20
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800f51a:	f107 0320 	add.w	r3, r7, #32
 800f51e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	69fa      	ldr	r2, [r7, #28]
 800f524:	2100      	movs	r1, #0
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f008 ff4c 	bl	80183c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f52c:	4603      	mov	r3, r0
 800f52e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f530:	89fb      	ldrh	r3, [r7, #14]
}
 800f532:	4618      	mov	r0, r3
 800f534:	3714      	adds	r7, #20
 800f536:	46bd      	mov	sp, r7
 800f538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f53c:	b003      	add	sp, #12
 800f53e:	4770      	bx	lr

0800f540 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f540:	b40c      	push	{r2, r3}
 800f542:	b580      	push	{r7, lr}
 800f544:	b084      	sub	sp, #16
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	460b      	mov	r3, r1
 800f54c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800f54e:	f107 031c 	add.w	r3, r7, #28
 800f552:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800f554:	78f9      	ldrb	r1, [r7, #3]
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	69ba      	ldr	r2, [r7, #24]
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f008 ff32 	bl	80183c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f560:	4603      	mov	r3, r0
 800f562:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f564:	89fb      	ldrh	r3, [r7, #14]
}
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f570:	b002      	add	sp, #8
 800f572:	4770      	bx	lr

0800f574 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b08a      	sub	sp, #40	@ 0x28
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	460b      	mov	r3, r1
 800f57e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f584:	2b00      	cmp	r3, #0
 800f586:	d016      	beq.n	800f5b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	3322      	adds	r3, #34	@ 0x22
 800f58c:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800f58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f590:	8adb      	ldrh	r3, [r3, #22]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d105      	bne.n	800f5a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800f596:	4b43      	ldr	r3, [pc, #268]	@ (800f6a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f598:	4a43      	ldr	r2, [pc, #268]	@ (800f6a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f59a:	21c5      	movs	r1, #197	@ 0xc5
 800f59c:	4843      	ldr	r0, [pc, #268]	@ (800f6ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f59e:	f019 ff37 	bl	8029410 <__assert_func>
            return buffer[pos];
 800f5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a4:	8a9b      	ldrh	r3, [r3, #20]
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d001      	beq.n	800f5b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e000      	b.n	800f5b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d06a      	beq.n	800f692 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f00a fa69 	bl	8019a94 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	3322      	adds	r3, #34	@ 0x22
 800f5c6:	623b      	str	r3, [r7, #32]
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800f5cc:	6a3b      	ldr	r3, [r7, #32]
 800f5ce:	8adb      	ldrh	r3, [r3, #22]
 800f5d0:	8bfa      	ldrh	r2, [r7, #30]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d305      	bcc.n	800f5e2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800f5d6:	4b36      	ldr	r3, [pc, #216]	@ (800f6b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800f5d8:	4a36      	ldr	r2, [pc, #216]	@ (800f6b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800f5da:	21cb      	movs	r1, #203	@ 0xcb
 800f5dc:	4833      	ldr	r0, [pc, #204]	@ (800f6ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f5de:	f019 ff17 	bl	8029410 <__assert_func>
            const uint16_t index = pos + offset;
 800f5e2:	6a3b      	ldr	r3, [r7, #32]
 800f5e4:	8a9a      	ldrh	r2, [r3, #20]
 800f5e6:	8bfb      	ldrh	r3, [r7, #30]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800f5ec:	8bbb      	ldrh	r3, [r7, #28]
 800f5ee:	2b09      	cmp	r3, #9
 800f5f0:	d801      	bhi.n	800f5f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800f5f2:	8bbb      	ldrh	r3, [r7, #28]
 800f5f4:	e001      	b.n	800f5fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800f5f6:	8bbb      	ldrh	r3, [r7, #28]
 800f5f8:	3b0a      	subs	r3, #10
 800f5fa:	6a3a      	ldr	r2, [r7, #32]
 800f5fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f600:	f640 123f 	movw	r2, #2367	@ 0x93f
 800f604:	4293      	cmp	r3, r2
 800f606:	bf0c      	ite	eq
 800f608:	2301      	moveq	r3, #1
 800f60a:	2300      	movne	r3, #0
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d03f      	beq.n	800f692 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	3322      	adds	r3, #34	@ 0x22
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	3222      	adds	r2, #34	@ 0x22
 800f61a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800f61c:	68ba      	ldr	r2, [r7, #8]
 800f61e:	8ad2      	ldrh	r2, [r2, #22]
 800f620:	2a00      	cmp	r2, #0
 800f622:	d105      	bne.n	800f630 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800f624:	4b1f      	ldr	r3, [pc, #124]	@ (800f6a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f626:	4a20      	ldr	r2, [pc, #128]	@ (800f6a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f628:	21c5      	movs	r1, #197	@ 0xc5
 800f62a:	4820      	ldr	r0, [pc, #128]	@ (800f6ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f62c:	f019 fef0 	bl	8029410 <__assert_func>
            return buffer[pos];
 800f630:	68ba      	ldr	r2, [r7, #8]
 800f632:	8a92      	ldrh	r2, [r2, #20]
 800f634:	4611      	mov	r1, r2
 800f636:	68ba      	ldr	r2, [r7, #8]
 800f638:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800f63c:	613b      	str	r3, [r7, #16]
 800f63e:	4613      	mov	r3, r2
 800f640:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	8adb      	ldrh	r3, [r3, #22]
 800f646:	2b01      	cmp	r3, #1
 800f648:	d806      	bhi.n	800f658 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800f64a:	4b1b      	ldr	r3, [pc, #108]	@ (800f6b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800f64c:	4a1b      	ldr	r2, [pc, #108]	@ (800f6bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800f64e:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800f652:	4816      	ldr	r0, [pc, #88]	@ (800f6ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f654:	f019 fedc 	bl	8029410 <__assert_func>
            const uint16_t index = pos + 1;
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	8a9b      	ldrh	r3, [r3, #20]
 800f65c:	3301      	adds	r3, #1
 800f65e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800f660:	89bb      	ldrh	r3, [r7, #12]
 800f662:	2b09      	cmp	r3, #9
 800f664:	d801      	bhi.n	800f66a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800f666:	89bb      	ldrh	r3, [r7, #12]
 800f668:	e000      	b.n	800f66c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800f66a:	2300      	movs	r3, #0
 800f66c:	693a      	ldr	r2, [r7, #16]
 800f66e:	89f9      	ldrh	r1, [r7, #14]
 800f670:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800f674:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	3322      	adds	r3, #34	@ 0x22
 800f67a:	61bb      	str	r3, [r7, #24]
 800f67c:	f640 133f 	movw	r3, #2367	@ 0x93f
 800f680:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	8a9b      	ldrh	r3, [r3, #20]
 800f686:	4619      	mov	r1, r3
 800f688:	69bb      	ldr	r3, [r7, #24]
 800f68a:	8afa      	ldrh	r2, [r7, #22]
 800f68c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800f690:	bf00      	nop
        }
    }
    return getNextChar();
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f00a f900 	bl	8019898 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f698:	4603      	mov	r3, r0
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3728      	adds	r7, #40	@ 0x28
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	0802aa24 	.word	0x0802aa24
 800f6a8:	0802aa30 	.word	0x0802aa30
 800f6ac:	0802aadc 	.word	0x0802aadc
 800f6b0:	0802ab24 	.word	0x0802ab24
 800f6b4:	0802ab34 	.word	0x0802ab34
 800f6b8:	0802ac08 	.word	0x0802ac08
 800f6bc:	0802ac14 	.word	0x0802ac14

0800f6c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f00a f8ae 	bl	801982a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800f6ce:	bf00      	nop
 800f6d0:	3708      	adds	r7, #8
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b088      	sub	sp, #32
 800f6da:	af02      	add	r7, sp, #8
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	1d38      	adds	r0, r7, #4
 800f6e0:	e880 0006 	stmia.w	r0, {r1, r2}
 800f6e4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800f6e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f6ea:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800f6ec:	1d39      	adds	r1, r7, #4
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	9301      	str	r3, [sp, #4]
 800f6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f4:	9300      	str	r3, [sp, #0]
 800f6f6:	6a3b      	ldr	r3, [r7, #32]
 800f6f8:	683a      	ldr	r2, [r7, #0]
 800f6fa:	68f8      	ldr	r0, [r7, #12]
 800f6fc:	f007 f916 	bl	801692c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800f700:	bf00      	nop
 800f702:	3718      	adds	r7, #24
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800f708:	b590      	push	{r4, r7, lr}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	4603      	mov	r3, r0
 800f710:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800f712:	2300      	movs	r3, #0
 800f714:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800f716:	88fb      	ldrh	r3, [r7, #6]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d127      	bne.n	800f76c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800f71c:	88fb      	ldrh	r3, [r7, #6]
 800f71e:	4a1e      	ldr	r2, [pc, #120]	@ (800f798 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d016      	beq.n	800f756 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800f728:	88fb      	ldrh	r3, [r7, #6]
 800f72a:	4a1b      	ldr	r2, [pc, #108]	@ (800f798 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f730:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	68ba      	ldr	r2, [r7, #8]
 800f738:	4413      	add	r3, r2
 800f73a:	4a18      	ldr	r2, [pc, #96]	@ (800f79c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f73c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	4413      	add	r3, r2
 800f746:	4a16      	ldr	r2, [pc, #88]	@ (800f7a0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f748:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	4413      	add	r3, r2
 800f752:	60fb      	str	r3, [r7, #12]
 800f754:	e00a      	b.n	800f76c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800f756:	4b11      	ldr	r3, [pc, #68]	@ (800f79c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f758:	4a12      	ldr	r2, [pc, #72]	@ (800f7a4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800f75a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800f75c:	4a12      	ldr	r2, [pc, #72]	@ (800f7a8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800f75e:	4b10      	ldr	r3, [pc, #64]	@ (800f7a0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f760:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800f762:	88fb      	ldrh	r3, [r7, #6]
 800f764:	4a11      	ldr	r2, [pc, #68]	@ (800f7ac <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800f766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f76a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d00d      	beq.n	800f78e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800f772:	4a0f      	ldr	r2, [pc, #60]	@ (800f7b0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800f774:	88fb      	ldrh	r3, [r7, #6]
 800f776:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800f778:	f000 f83e 	bl	800f7f8 <_ZN17TypedTextDatabase8getFontsEv>
 800f77c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800f77e:	f000 f833 	bl	800f7e8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800f782:	4603      	mov	r3, r0
 800f784:	461a      	mov	r2, r3
 800f786:	4621      	mov	r1, r4
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f7ff fea5 	bl	800f4d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800f78e:	bf00      	nop
 800f790:	3714      	adds	r7, #20
 800f792:	46bd      	mov	sp, r7
 800f794:	bd90      	pop	{r4, r7, pc}
 800f796:	bf00      	nop
 800f798:	24005074 	.word	0x24005074
 800f79c:	2400507c 	.word	0x2400507c
 800f7a0:	24005080 	.word	0x24005080
 800f7a4:	0802d7a4 	.word	0x0802d7a4
 800f7a8:	0802d798 	.word	0x0802d798
 800f7ac:	0802d7c4 	.word	0x0802d7c4
 800f7b0:	24005078 	.word	0x24005078

0800f7b4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	460b      	mov	r3, r1
 800f7be:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800f7c0:	4b07      	ldr	r3, [pc, #28]	@ (800f7e0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	4b07      	ldr	r3, [pc, #28]	@ (800f7e4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800f7c6:	6819      	ldr	r1, [r3, #0]
 800f7c8:	887b      	ldrh	r3, [r7, #2]
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	440b      	add	r3, r1
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	005b      	lsls	r3, r3, #1
 800f7d2:	4413      	add	r3, r2
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	370c      	adds	r7, #12
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	2400507c 	.word	0x2400507c
 800f7e4:	24005080 	.word	0x24005080

0800f7e8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800f7ec:	2303      	movs	r3, #3
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800f7fc:	4b02      	ldr	r3, [pc, #8]	@ (800f808 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	24005084 	.word	0x24005084

0800f80c <_Z41__static_initialization_and_destruction_0v>:
    case 0:
        touchgfx_fonts[0] = &(getFont_Asap_Regular_24_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800f80c:	b580      	push	{r7, lr}
 800f80e:	af00      	add	r7, sp, #0
    &(getFont_Asap_Regular_24_4bpp())
 800f810:	f7fd fe44 	bl	800d49c <_Z28getFont_Asap_Regular_24_4bppv>
 800f814:	4603      	mov	r3, r0
};
 800f816:	4a02      	ldr	r2, [pc, #8]	@ (800f820 <_Z41__static_initialization_and_destruction_0v+0x14>)
 800f818:	6013      	str	r3, [r2, #0]
} // namespace TypedTextDatabase
 800f81a:	bf00      	nop
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	24005084 	.word	0x24005084

0800f824 <_GLOBAL__sub_I_touchgfx_fonts>:
 800f824:	b580      	push	{r7, lr}
 800f826:	af00      	add	r7, sp, #0
 800f828:	f7ff fff0 	bl	800f80c <_Z41__static_initialization_and_destruction_0v>
 800f82c:	bd80      	pop	{r7, pc}
	...

0800f830 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	4a05      	ldr	r2, [pc, #20]	@ (800f850 <_ZN19FrontendApplicationD1Ev+0x20>)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	601a      	str	r2, [r3, #0]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4618      	mov	r0, r3
 800f842:	f7fe f8a1 	bl	800d988 <_ZN23FrontendApplicationBaseD1Ev>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	0802b5dc 	.word	0x0802b5dc

0800f854 <_ZN19FrontendApplicationD0Ev>:
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f7ff ffe7 	bl	800f830 <_ZN19FrontendApplicationD1Ev>
 800f862:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f019 fc07 	bl	802907a <_ZdlPvj>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4618      	mov	r0, r3
 800f870:	3708      	adds	r7, #8
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800f876:	b580      	push	{r7, lr}
 800f878:	b082      	sub	sp, #8
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800f884:	4618      	mov	r0, r3
 800f886:	f000 fa61 	bl	800fd4c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f007 fd5d 	bl	801734c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800f892:	bf00      	nop
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
	...

0800f89c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	68b9      	ldr	r1, [r7, #8]
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fe f8ba 	bl	800da28 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800f8b4:	4a03      	ldr	r2, [pc, #12]	@ (800f8c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	601a      	str	r2, [r3, #0]
{
}
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3710      	adds	r7, #16
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	0802b5dc 	.word	0x0802b5dc

0800f8c8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
    {
    }
 800f8d0:	bf00      	nop
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
    {
    }
 800f8e4:	bf00      	nop
 800f8e6:	370c      	adds	r7, #12
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800f8f0:	b480      	push	{r7}
 800f8f2:	b083      	sub	sp, #12
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
    {
 800f8f8:	4a04      	ldr	r2, [pc, #16]	@ (800f90c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	601a      	str	r2, [r3, #0]
    }
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4618      	mov	r0, r3
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr
 800f90c:	0802b668 	.word	0x0802b668

0800f910 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
    }
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7ff ffe9 	bl	800f8f0 <_ZN8touchgfx9PresenterD1Ev>
 800f91e:	2104      	movs	r1, #4
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f019 fbaa 	bl	802907a <_ZdlPvj>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4618      	mov	r0, r3
 800f92a:	3708      	adds	r7, #8
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
    {
 800f938:	4a04      	ldr	r2, [pc, #16]	@ (800f94c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	601a      	str	r2, [r3, #0]
    }
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4618      	mov	r0, r3
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	0802b668 	.word	0x0802b668

0800f950 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	4a06      	ldr	r2, [pc, #24]	@ (800f974 <_ZN13ModelListenerC1Ev+0x24>)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	601a      	str	r2, [r3, #0]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	605a      	str	r2, [r3, #4]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4618      	mov	r0, r3
 800f968:	370c      	adds	r7, #12
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	0802b658 	.word	0x0802b658

0800f978 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	4a04      	ldr	r2, [pc, #16]	@ (800f994 <_ZN13ModelListenerD1Ev+0x1c>)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4618      	mov	r0, r3
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr
 800f994:	0802b658 	.word	0x0802b658

0800f998 <_ZN13ModelListenerD0Ev>:
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f7ff ffe9 	bl	800f978 <_ZN13ModelListenerD1Ev>
 800f9a6:	2108      	movs	r1, #8
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f019 fb66 	bl	802907a <_ZdlPvj>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <_ZN13mainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainPresenter() {};
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	4a09      	ldr	r2, [pc, #36]	@ (800f9e8 <_ZN13mainPresenterD1Ev+0x30>)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	601a      	str	r2, [r3, #0]
 800f9c6:	4a09      	ldr	r2, [pc, #36]	@ (800f9ec <_ZN13mainPresenterD1Ev+0x34>)
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	605a      	str	r2, [r3, #4]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	3304      	adds	r3, #4
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7ff ffd1 	bl	800f978 <_ZN13ModelListenerD1Ev>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7ff ff89 	bl	800f8f0 <_ZN8touchgfx9PresenterD1Ev>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	0802b630 	.word	0x0802b630
 800f9ec:	0802b648 	.word	0x0802b648

0800f9f0 <_ZThn4_N13mainPresenterD1Ev>:
 800f9f0:	f1a0 0004 	sub.w	r0, r0, #4
 800f9f4:	e7e0      	b.n	800f9b8 <_ZN13mainPresenterD1Ev>
 800f9f6:	bf00      	nop

0800f9f8 <_ZN13mainPresenterD0Ev>:
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f7ff ffd9 	bl	800f9b8 <_ZN13mainPresenterD1Ev>
 800fa06:	2110      	movs	r1, #16
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f019 fb36 	bl	802907a <_ZdlPvj>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4618      	mov	r0, r3
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <_ZThn4_N13mainPresenterD0Ev>:
 800fa18:	f1a0 0004 	sub.w	r0, r0, #4
 800fa1c:	e7ec      	b.n	800f9f8 <_ZN13mainPresenterD0Ev>
	...

0800fa20 <_ZN13mainPresenterC1ER8mainView>:
#include <gui/main_screen/mainView.hpp>
#include <gui/main_screen/mainPresenter.hpp>

mainPresenter::mainPresenter(mainView& v)
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
    : view(v)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7ff ff7f 	bl	800f930 <_ZN8touchgfx9PresenterC1Ev>
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	3304      	adds	r3, #4
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7ff ff8a 	bl	800f950 <_ZN13ModelListenerC1Ev>
 800fa3c:	4a06      	ldr	r2, [pc, #24]	@ (800fa58 <_ZN13mainPresenterC1ER8mainView+0x38>)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	601a      	str	r2, [r3, #0]
 800fa42:	4a06      	ldr	r2, [pc, #24]	@ (800fa5c <_ZN13mainPresenterC1ER8mainView+0x3c>)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	605a      	str	r2, [r3, #4]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	683a      	ldr	r2, [r7, #0]
 800fa4c:	60da      	str	r2, [r3, #12]
{
}
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4618      	mov	r0, r3
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	0802b630 	.word	0x0802b630
 800fa5c:	0802b648 	.word	0x0802b648

0800fa60 <_ZN13mainPresenter8activateEv>:

void mainPresenter::activate()
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
}
 800fa68:	bf00      	nop
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <_ZN13mainPresenter10deactivateEv>:

void mainPresenter::deactivate()
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
}
 800fa7c:	bf00      	nop
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <_ZN8mainViewD1Ev>:

class mainView : public mainViewBase
{
public:
    mainView();
    virtual ~mainView() {}
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	4a05      	ldr	r2, [pc, #20]	@ (800faa8 <_ZN8mainViewD1Ev+0x20>)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	601a      	str	r2, [r3, #0]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff fc81 	bl	800f3a0 <_ZN12mainViewBaseD1Ev>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	0802b680 	.word	0x0802b680

0800faac <_ZN8mainViewD0Ev>:
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7ff ffe7 	bl	800fa88 <_ZN8mainViewD1Ev>
 800faba:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f019 fadb 	bl	802907a <_ZdlPvj>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4618      	mov	r0, r3
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
	...

0800fad0 <_ZN8mainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

mainView::mainView() :
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
    tickCounter(0)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4618      	mov	r0, r3
 800fadc:	f7ff fa64 	bl	800efa8 <_ZN12mainViewBaseC1Ev>
 800fae0:	4a05      	ldr	r2, [pc, #20]	@ (800faf8 <_ZN8mainViewC1Ev+0x28>)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	601a      	str	r2, [r3, #0]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
{
}
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4618      	mov	r0, r3
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	0802b680 	.word	0x0802b680

0800fafc <_ZN8mainView11setupScreenEv>:

void mainView::setupScreen()
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
    mainViewBase::setupScreen();
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7ff fc8f 	bl	800f42a <_ZN12mainViewBase11setupScreenEv>
    digitalHours = digitalClock.getCurrentHour();
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	3398      	adds	r3, #152	@ 0x98
 800fb10:	4618      	mov	r0, r3
 800fb12:	f002 ff81 	bl	8012a18 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 800fb16:	4603      	mov	r3, r0
 800fb18:	461a      	mov	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
    digitalMinutes = digitalClock.getCurrentMinute();
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	3398      	adds	r3, #152	@ 0x98
 800fb24:	4618      	mov	r0, r3
 800fb26:	f002 ff90 	bl	8012a4a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f8c3 24f4 	str.w	r2, [r3, #1268]	@ 0x4f4
    digitalSeconds = digitalClock.getCurrentSecond();
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	3398      	adds	r3, #152	@ 0x98
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f002 ff89 	bl	8012a50 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	461a      	mov	r2, r3
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

    analogHours = analogClock.getCurrentHour();
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f002 ff62 	bl	8012a18 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 800fb54:	4603      	mov	r3, r0
 800fb56:	461a      	mov	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
    analogMinutes = analogClock.getCurrentMinute();
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800fb64:	4618      	mov	r0, r3
 800fb66:	f002 ff70 	bl	8012a4a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
    analogSeconds = analogClock.getCurrentSecond();
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f002 ff68 	bl	8012a50 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800fb80:	4603      	mov	r3, r0
 800fb82:	461a      	mov	r2, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
}
 800fb8a:	bf00      	nop
 800fb8c:	3708      	adds	r7, #8
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}

0800fb92 <_ZN8mainView14tearDownScreenEv>:

void mainView::tearDownScreen()
{
 800fb92:	b580      	push	{r7, lr}
 800fb94:	b082      	sub	sp, #8
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	6078      	str	r0, [r7, #4]
    mainViewBase::tearDownScreen();
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe fc9d 	bl	800e4dc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800fba2:	bf00      	nop
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
	...

0800fbac <_ZN8mainView15handleTickEventEv>:

void mainView::handleTickEvent()
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
    tickCounter++;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fbba:	1c5a      	adds	r2, r3, #1
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0

    if (tickCounter % 40 == 0)
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 14e0 	ldr.w	r1, [r3, #1248]	@ 0x4e0
 800fbc8:	4b58      	ldr	r3, [pc, #352]	@ (800fd2c <_ZN8mainView15handleTickEventEv+0x180>)
 800fbca:	fb83 2301 	smull	r2, r3, r3, r1
 800fbce:	111a      	asrs	r2, r3, #4
 800fbd0:	17cb      	asrs	r3, r1, #31
 800fbd2:	1ad2      	subs	r2, r2, r3
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	009b      	lsls	r3, r3, #2
 800fbd8:	4413      	add	r3, r2
 800fbda:	00db      	lsls	r3, r3, #3
 800fbdc:	1aca      	subs	r2, r1, r3
 800fbde:	2a00      	cmp	r2, #0
 800fbe0:	f040 80a0 	bne.w	800fd24 <_ZN8mainView15handleTickEventEv+0x178>
    {
        if (++digitalSeconds >= 60)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800fbf8:	2b3b      	cmp	r3, #59	@ 0x3b
 800fbfa:	bfcc      	ite	gt
 800fbfc:	2301      	movgt	r3, #1
 800fbfe:	2300      	movle	r3, #0
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d02d      	beq.n	800fc62 <_ZN8mainView15handleTickEventEv+0xb6>
        {
            digitalSeconds = 0;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
            if (++digitalMinutes >= 60)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800fc14:	1c5a      	adds	r2, r3, #1
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8c3 24f4 	str.w	r2, [r3, #1268]	@ 0x4f4
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800fc22:	2b3b      	cmp	r3, #59	@ 0x3b
 800fc24:	bfcc      	ite	gt
 800fc26:	2301      	movgt	r3, #1
 800fc28:	2300      	movle	r3, #0
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d018      	beq.n	800fc62 <_ZN8mainView15handleTickEventEv+0xb6>
            {
                digitalMinutes = 0;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	f8c3 24f4 	str.w	r2, [r3, #1268]	@ 0x4f4
                if (++digitalHours >= 24)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800fc3e:	1c5a      	adds	r2, r3, #1
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800fc4c:	2b17      	cmp	r3, #23
 800fc4e:	bfcc      	ite	gt
 800fc50:	2301      	movgt	r3, #1
 800fc52:	2300      	movle	r3, #0
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d003      	beq.n	800fc62 <_ZN8mainView15handleTickEventEv+0xb6>
                {
                    digitalHours = 0;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
                }
            }
        }

        if (++analogSeconds >= 60)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800fc68:	1c5a      	adds	r2, r3, #1
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800fc76:	2b3b      	cmp	r3, #59	@ 0x3b
 800fc78:	bfcc      	ite	gt
 800fc7a:	2301      	movgt	r3, #1
 800fc7c:	2300      	movle	r3, #0
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d02d      	beq.n	800fce0 <_ZN8mainView15handleTickEventEv+0x134>
        {
            analogSeconds = 0;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
            if (++analogMinutes >= 60)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800fc92:	1c5a      	adds	r2, r3, #1
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800fca0:	2b3b      	cmp	r3, #59	@ 0x3b
 800fca2:	bfcc      	ite	gt
 800fca4:	2301      	movgt	r3, #1
 800fca6:	2300      	movle	r3, #0
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d018      	beq.n	800fce0 <_ZN8mainView15handleTickEventEv+0x134>
            {
                analogMinutes = 0;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
                if (++analogHours >= 24)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 800fcbc:	1c5a      	adds	r2, r3, #1
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 800fcca:	2b17      	cmp	r3, #23
 800fccc:	bfcc      	ite	gt
 800fcce:	2301      	movgt	r3, #1
 800fcd0:	2300      	movle	r3, #0
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d003      	beq.n	800fce0 <_ZN8mainView15handleTickEventEv+0x134>
                {
                    analogHours = 0;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
                }
            }
        }

        // Update the clocks
        digitalClock.setTime24Hour(digitalHours, digitalMinutes, digitalSeconds);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800fcec:	b2d9      	uxtb	r1, r3
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800fcf4:	b2da      	uxtb	r2, r3
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	f002 fe41 	bl	8012984 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
        analogClock.setTime24Hour(analogHours, analogMinutes, analogSeconds);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 800fd0e:	b2d9      	uxtb	r1, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800fd16:	b2da      	uxtb	r2, r3
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	f002 fe30 	bl	8012984 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
    }
}
 800fd24:	bf00      	nop
 800fd26:	3708      	adds	r7, #8
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	66666667 	.word	0x66666667

0800fd30 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800fd30:	b480      	push	{r7}
 800fd32:	b083      	sub	sp, #12
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]
{
}
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4618      	mov	r0, r3
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <_ZN5Model4tickEv>:

void Model::tick()
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
}
 800fd54:	bf00      	nop
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
    {
 800fd68:	4a04      	ldr	r2, [pc, #16]	@ (800fd7c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	601a      	str	r2, [r3, #0]
    }
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	4618      	mov	r0, r3
 800fd72:	370c      	adds	r7, #12
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr
 800fd7c:	0802b6cc 	.word	0x0802b6cc

0800fd80 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
    }
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7ff ffe9 	bl	800fd60 <_ZN8touchgfx15TouchControllerD1Ev>
 800fd8e:	2104      	movs	r1, #4
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f019 f972 	bl	802907a <_ZdlPvj>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800fda8:	bf00      	nop
 800fdaa:	370c      	adds	r7, #12
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3714      	adds	r7, #20
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
	...

0800fdd0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	4a05      	ldr	r2, [pc, #20]	@ (800fdf0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	601a      	str	r2, [r3, #0]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7ff ffbd 	bl	800fd60 <_ZN8touchgfx15TouchControllerD1Ev>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4618      	mov	r0, r3
 800fdea:	3708      	adds	r7, #8
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}
 800fdf0:	0802b6b4 	.word	0x0802b6b4

0800fdf4 <_ZN20STM32TouchControllerD0Ev>:
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f7ff ffe7 	bl	800fdd0 <_ZN20STM32TouchControllerD1Ev>
 800fe02:	2104      	movs	r1, #4
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f019 f938 	bl	802907a <_ZdlPvj>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3708      	adds	r7, #8
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800fe14:	b480      	push	{r7}
 800fe16:	af00      	add	r7, sp, #0

}
 800fe18:	bf00      	nop
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
	...

0800fe24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fe2e:	79fb      	ldrb	r3, [r7, #7]
 800fe30:	2b03      	cmp	r3, #3
 800fe32:	d80c      	bhi.n	800fe4e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800fe34:	a201      	add	r2, pc, #4	@ (adr r2, 800fe3c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800fe36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe3a:	bf00      	nop
 800fe3c:	0800fe4d 	.word	0x0800fe4d
 800fe40:	0800fe4d 	.word	0x0800fe4d
 800fe44:	0800fe4d 	.word	0x0800fe4d
 800fe48:	0800fe4d 	.word	0x0800fe4d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800fe4c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800fe4e:	bf00      	nop
 800fe50:	370c      	adds	r7, #12
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop

0800fe5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	4603      	mov	r3, r0
 800fe64:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fe66:	79fb      	ldrb	r3, [r7, #7]
 800fe68:	2b03      	cmp	r3, #3
 800fe6a:	d80c      	bhi.n	800fe86 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800fe6c:	a201      	add	r2, pc, #4	@ (adr r2, 800fe74 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800fe6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe72:	bf00      	nop
 800fe74:	0800fe85 	.word	0x0800fe85
 800fe78:	0800fe85 	.word	0x0800fe85
 800fe7c:	0800fe85 	.word	0x0800fe85
 800fe80:	0800fe85 	.word	0x0800fe85
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800fe84:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800fe86:	bf00      	nop
 800fe88:	370c      	adds	r7, #12
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop

0800fe94 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fe9e:	79fb      	ldrb	r3, [r7, #7]
 800fea0:	2b03      	cmp	r3, #3
 800fea2:	d80c      	bhi.n	800febe <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800fea4:	a201      	add	r2, pc, #4	@ (adr r2, 800feac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800fea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feaa:	bf00      	nop
 800feac:	0800febd 	.word	0x0800febd
 800feb0:	0800febd 	.word	0x0800febd
 800feb4:	0800febd 	.word	0x0800febd
 800feb8:	0800febd 	.word	0x0800febd
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800febc:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800febe:	bf00      	nop
 800fec0:	370c      	adds	r7, #12
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop

0800fecc <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
    {
 800fed4:	4a04      	ldr	r2, [pc, #16]	@ (800fee8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	601a      	str	r2, [r3, #0]
    }
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4618      	mov	r0, r3
 800fede:	370c      	adds	r7, #12
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	0802bddc 	.word	0x0802bddc

0800feec <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
    }
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f7ff ffe9 	bl	800fecc <_ZN8touchgfx3HALD1Ev>
 800fefa:	2184      	movs	r1, #132	@ 0x84
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f019 f8bc 	bl	802907a <_ZdlPvj>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4618      	mov	r0, r3
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	460b      	mov	r3, r1
 800ff16:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	78fa      	ldrb	r2, [r7, #3]
 800ff1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2201      	movs	r2, #1
 800ff24:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 800ff28:	bf00      	nop
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	807b      	strh	r3, [r7, #2]
 800ff40:	4613      	mov	r3, r2
 800ff42:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800ff44:	4b0c      	ldr	r3, [pc, #48]	@ (800ff78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800ff46:	881b      	ldrh	r3, [r3, #0]
 800ff48:	887a      	ldrh	r2, [r7, #2]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d304      	bcc.n	800ff58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800ff4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ff7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800ff50:	881b      	ldrh	r3, [r3, #0]
 800ff52:	883a      	ldrh	r2, [r7, #0]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d205      	bcs.n	800ff64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800ff58:	4b09      	ldr	r3, [pc, #36]	@ (800ff80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800ff5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ff84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800ff5c:	21a3      	movs	r1, #163	@ 0xa3
 800ff5e:	480a      	ldr	r0, [pc, #40]	@ (800ff88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800ff60:	f019 fa56 	bl	8029410 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800ff64:	4a09      	ldr	r2, [pc, #36]	@ (800ff8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800ff66:	887b      	ldrh	r3, [r7, #2]
 800ff68:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800ff6a:	4a09      	ldr	r2, [pc, #36]	@ (800ff90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800ff6c:	883b      	ldrh	r3, [r7, #0]
 800ff6e:	8013      	strh	r3, [r2, #0]
    }
 800ff70:	bf00      	nop
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	240065f4 	.word	0x240065f4
 800ff7c:	240065f6 	.word	0x240065f6
 800ff80:	0802acc8 	.word	0x0802acc8
 800ff84:	0802ad2c 	.word	0x0802ad2c
 800ff88:	0802ad70 	.word	0x0802ad70
 800ff8c:	240065fa 	.word	0x240065fa
 800ff90:	240065fc 	.word	0x240065fc

0800ff94 <_ZN8touchgfx3HAL11submitGPU2DEv>:
    virtual void submitGPU2D()
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
    }
 800ff9c:	bf00      	nop
 800ff9e:	370c      	adds	r7, #12
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr

0800ffa8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d009      	beq.n	800ffce <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	685a      	ldr	r2, [r3, #4]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4610      	mov	r0, r2
 800ffc8:	4798      	blx	r3
 800ffca:	4603      	mov	r3, r0
 800ffcc:	e000      	b.n	800ffd0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800ffce:	2300      	movs	r3, #0
    }
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    }

    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f003 fdb9 	bl	8013b58 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	33bc      	adds	r3, #188	@ 0xbc
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	4798      	blx	r3
    }
 800fff2:	bf00      	nop
 800fff4:	3708      	adds	r7, #8
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800fffa:	b480      	push	{r7}
 800fffc:	b083      	sub	sp, #12
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
 8010002:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8010004:	2300      	movs	r3, #0
    }
 8010006:	4618      	mov	r0, r3
 8010008:	370c      	adds	r7, #12
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr
	...

08010014 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
 8010020:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d106      	bne.n	8010036 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8010028:	4b0f      	ldr	r3, [pc, #60]	@ (8010068 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 801002a:	4a10      	ldr	r2, [pc, #64]	@ (801006c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 801002c:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8010030:	480f      	ldr	r0, [pc, #60]	@ (8010070 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8010032:	f019 f9ed 	bl	8029410 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	68ba      	ldr	r2, [r7, #8]
 801003a:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2b00      	cmp	r3, #0
 8010046:	bf14      	ite	ne
 8010048:	2301      	movne	r3, #1
 801004a:	2300      	moveq	r3, #0
 801004c:	b2da      	uxtb	r2, r3
 801004e:	4b09      	ldr	r3, [pc, #36]	@ (8010074 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8010050:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	3390      	adds	r3, #144	@ 0x90
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	6839      	ldr	r1, [r7, #0]
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	4798      	blx	r3
    }
 8010060:	bf00      	nop
 8010062:	3710      	adds	r7, #16
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	0802adb4 	.word	0x0802adb4
 801006c:	0802adec 	.word	0x0802adec
 8010070:	0802ad70 	.word	0x0802ad70
 8010074:	240065fe 	.word	0x240065fe

08010078 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8010078:	b480      	push	{r7}
 801007a:	b083      	sub	sp, #12
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	683a      	ldr	r2, [r7, #0]
 8010086:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	bf14      	ite	ne
 801008e:	2301      	movne	r3, #1
 8010090:	2300      	moveq	r3, #0
 8010092:	b2da      	uxtb	r2, r3
 8010094:	4b03      	ldr	r3, [pc, #12]	@ (80100a4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8010096:	701a      	strb	r2, [r3, #0]
    }
 8010098:	bf00      	nop
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr
 80100a4:	240065ff 	.word	0x240065ff

080100a8 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     * Only applicable on LTDC systems and when the partial framebuffer strategy is
     * enabled.
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	460b      	mov	r3, r1
 80100b2:	807b      	strh	r3, [r7, #2]
    {
    }
 80100b4:	bf00      	nop
 80100b6:	370c      	adds	r7, #12
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr

080100c0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80100c8:	2300      	movs	r3, #0
    }
 80100ca:	4618      	mov	r0, r3
 80100cc:	370c      	adds	r7, #12
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr

080100d6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b082      	sub	sp, #8
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
 80100de:	460b      	mov	r3, r1
 80100e0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d004      	beq.n	80100f4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100ee:	887a      	ldrh	r2, [r7, #2]
 80100f0:	4610      	mov	r0, r2
 80100f2:	4798      	blx	r3
        }
    }
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	685a      	ldr	r2, [r3, #4]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	3318      	adds	r3, #24
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4610      	mov	r0, r2
 8010114:	4798      	blx	r3
 8010116:	4603      	mov	r3, r0
    }
 8010118:	4618      	mov	r0, r3
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This occurrence will lead to tearing on the display.
     *
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
 8010120:	b480      	push	{r7}
 8010122:	b083      	sub	sp, #12
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
    {
    }
 8010128:	bf00      	nop
 801012a:	370c      	adds	r7, #12
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8010134:	b480      	push	{r7}
 8010136:	b085      	sub	sp, #20
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010148:	429a      	cmp	r2, r3
 801014a:	d011      	beq.n	8010170 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 801014c:	4b14      	ldr	r3, [pc, #80]	@ (80101a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d11e      	bne.n	8010192 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8010154:	4b13      	ldr	r3, [pc, #76]	@ (80101a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010156:	881b      	ldrh	r3, [r3, #0]
 8010158:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801015a:	4b13      	ldr	r3, [pc, #76]	@ (80101a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801015c:	881a      	ldrh	r2, [r3, #0]
 801015e:	4b11      	ldr	r3, [pc, #68]	@ (80101a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010160:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8010162:	4a11      	ldr	r2, [pc, #68]	@ (80101a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010164:	89bb      	ldrh	r3, [r7, #12]
 8010166:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8010168:	4b0d      	ldr	r3, [pc, #52]	@ (80101a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801016a:	2201      	movs	r2, #1
 801016c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801016e:	e010      	b.n	8010192 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8010170:	4b0b      	ldr	r3, [pc, #44]	@ (80101a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00c      	beq.n	8010192 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8010178:	4b0a      	ldr	r3, [pc, #40]	@ (80101a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801017e:	4b0a      	ldr	r3, [pc, #40]	@ (80101a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010180:	881a      	ldrh	r2, [r3, #0]
 8010182:	4b08      	ldr	r3, [pc, #32]	@ (80101a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010184:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8010186:	4a08      	ldr	r2, [pc, #32]	@ (80101a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010188:	89fb      	ldrh	r3, [r7, #14]
 801018a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 801018c:	4b04      	ldr	r3, [pc, #16]	@ (80101a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801018e:	2200      	movs	r2, #0
 8010190:	701a      	strb	r2, [r3, #0]
    }
 8010192:	bf00      	nop
 8010194:	3714      	adds	r7, #20
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop
 80101a0:	240065f8 	.word	0x240065f8
 80101a4:	240065f6 	.word	0x240065f6
 80101a8:	240065f4 	.word	0x240065f4

080101ac <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Invalidate texture cache(s).
     *
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
 80101ac:	b480      	push	{r7}
 80101ae:	b083      	sub	sp, #12
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
    {
    }
 80101b4:	bf00      	nop
 80101b6:	370c      	adds	r7, #12
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr

080101c0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4618      	mov	r0, r3
 80101cc:	f002 fedf 	bl	8012f8e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80101d0:	bf00      	nop
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	4a05      	ldr	r2, [pc, #20]	@ (80101f8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	601a      	str	r2, [r3, #0]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7ff fe6f 	bl	800fecc <_ZN8touchgfx3HALD1Ev>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4618      	mov	r0, r3
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	0802b918 	.word	0x0802b918

080101fc <_ZN20TouchGFXGeneratedHALD0Ev>:
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f7ff ffe7 	bl	80101d8 <_ZN20TouchGFXGeneratedHALD1Ev>
 801020a:	2184      	movs	r1, #132	@ 0x84
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f018 ff34 	bl	802907a <_ZdlPvj>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4618      	mov	r0, r3
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4618      	mov	r0, r3
 8010228:	f7ff ffca 	bl	80101c0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 801022c:	bf00      	nop
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <_ZN11TouchGFXHAL10initializeEv>:
#include "GT811.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of initialize().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.
	BSP_LCD_Init();
 801023c:	f7f0 fbf2 	bl	8000a24 <BSP_LCD_Init>
	GT811_Init();
 8010240:	f7f0 fd6a 	bl	8000d18 <GT811_Init>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8010244:	2000      	movs	r0, #0
 8010246:	f7f0 fc75 	bl	8000b34 <BSP_LCD_Clear>

    TouchGFXGeneratedHAL::initialize();
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4618      	mov	r0, r3
 801024e:	f001 fc7b 	bl	8011b48 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8010252:	bf00      	nop
 8010254:	3708      	adds	r7, #8
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 801025a:	b580      	push	{r7, lr}
 801025c:	b082      	sub	sp, #8
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4618      	mov	r0, r3
 8010266:	f001 fd19 	bl	8011c9c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 801026a:	4603      	mov	r3, r0
}
 801026c:	4618      	mov	r0, r3
 801026e:	3708      	adds	r7, #8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6839      	ldr	r1, [r7, #0]
 8010282:	4618      	mov	r0, r3
 8010284:	f001 fd18 	bl	8011cb8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8010288:	bf00      	nop
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6839      	ldr	r1, [r7, #0]
 801029e:	4618      	mov	r0, r3
 80102a0:	f001 fd20 	bl	8011ce4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80102a4:	4b1f      	ldr	r3, [pc, #124]	@ (8010324 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 80102a6:	2200      	movs	r2, #0
 80102a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80102ac:	f3bf 8f4f 	dsb	sy
}
 80102b0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80102b2:	4b1c      	ldr	r3, [pc, #112]	@ (8010324 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 80102b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102b8:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	0b5b      	lsrs	r3, r3, #13
 80102be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80102c2:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	08db      	lsrs	r3, r3, #3
 80102c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80102cc:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	015a      	lsls	r2, r3, #5
 80102d2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80102d6:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80102dc:	4911      	ldr	r1, [pc, #68]	@ (8010324 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 80102de:	4313      	orrs	r3, r2
 80102e0:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	1e5a      	subs	r2, r3, #1
 80102e8:	60fa      	str	r2, [r7, #12]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	bf14      	ite	ne
 80102ee:	2301      	movne	r3, #1
 80102f0:	2300      	moveq	r3, #0
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1ea      	bne.n	80102ce <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	1e5a      	subs	r2, r3, #1
 80102fc:	613a      	str	r2, [r7, #16]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	bf14      	ite	ne
 8010302:	2301      	movne	r3, #1
 8010304:	2300      	moveq	r3, #0
 8010306:	b2db      	uxtb	r3, r3
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1db      	bne.n	80102c4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 801030c:	f3bf 8f4f 	dsb	sy
}
 8010310:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010312:	f3bf 8f6f 	isb	sy
}
 8010316:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8010318:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 801031a:	bf00      	nop
 801031c:	3718      	adds	r7, #24
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	e000ed00 	.word	0xe000ed00

08010328 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
 8010334:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	68b9      	ldr	r1, [r7, #8]
 801033e:	f001 fcdf 	bl	8011d00 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8010342:	4603      	mov	r3, r0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3710      	adds	r7, #16
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4618      	mov	r0, r3
 8010358:	f001 fc2c 	bl	8011bb4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801035c:	bf00      	nop
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	4618      	mov	r0, r3
 8010370:	f001 fc30 	bl	8011bd4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8010374:	bf00      	nop
 8010376:	3708      	adds	r7, #8
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4618      	mov	r0, r3
 8010388:	f001 fc32 	bl	8011bf0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801038c:	bf00      	nop
 801038e:	3708      	adds	r7, #8
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4618      	mov	r0, r3
 80103a0:	f001 fc34 	bl	8011c0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80103a4:	bf00      	nop
 80103a6:	3708      	adds	r7, #8
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4618      	mov	r0, r3
 80103b8:	f001 fc56 	bl	8011c68 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80103bc:	4603      	mov	r3, r0
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b082      	sub	sp, #8
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f001 fc56 	bl	8011c82 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 80103d6:	bf00      	nop
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
	...

080103e0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	4a05      	ldr	r2, [pc, #20]	@ (8010400 <_ZN11TouchGFXHALD1Ev+0x20>)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	601a      	str	r2, [r3, #0]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7ff fef1 	bl	80101d8 <_ZN20TouchGFXGeneratedHALD1Ev>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	4618      	mov	r0, r3
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	0802b6e4 	.word	0x0802b6e4

08010404 <_ZN11TouchGFXHALD0Ev>:
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f7ff ffe7 	bl	80103e0 <_ZN11TouchGFXHALD1Ev>
 8010412:	2184      	movs	r1, #132	@ 0x84
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f018 fe30 	bl	802907a <_ZdlPvj>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4618      	mov	r0, r3
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8010424:	b580      	push	{r7, lr}
 8010426:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8010428:	2200      	movs	r2, #0
 801042a:	2101      	movs	r1, #1
 801042c:	2001      	movs	r0, #1
 801042e:	f7f9 faa0 	bl	8009972 <osSemaphoreNew>
 8010432:	4603      	mov	r3, r0
 8010434:	4a0f      	ldr	r2, [pc, #60]	@ (8010474 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010436:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8010438:	4b0e      	ldr	r3, [pc, #56]	@ (8010474 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d105      	bne.n	801044c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8010440:	4b0d      	ldr	r3, [pc, #52]	@ (8010478 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8010442:	4a0e      	ldr	r2, [pc, #56]	@ (801047c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8010444:	2128      	movs	r1, #40	@ 0x28
 8010446:	480e      	ldr	r0, [pc, #56]	@ (8010480 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8010448:	f018 ffe2 	bl	8029410 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 801044c:	2200      	movs	r2, #0
 801044e:	2104      	movs	r1, #4
 8010450:	2001      	movs	r0, #1
 8010452:	f7f9 fbad 	bl	8009bb0 <osMessageQueueNew>
 8010456:	4603      	mov	r3, r0
 8010458:	4a0a      	ldr	r2, [pc, #40]	@ (8010484 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801045a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 801045c:	4b09      	ldr	r3, [pc, #36]	@ (8010484 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d105      	bne.n	8010470 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8010464:	4b08      	ldr	r3, [pc, #32]	@ (8010488 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8010466:	4a05      	ldr	r2, [pc, #20]	@ (801047c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8010468:	212c      	movs	r1, #44	@ 0x2c
 801046a:	4805      	ldr	r0, [pc, #20]	@ (8010480 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801046c:	f018 ffd0 	bl	8029410 <__assert_func>
}
 8010470:	bf00      	nop
 8010472:	bd80      	pop	{r7, pc}
 8010474:	24005088 	.word	0x24005088
 8010478:	0802ae3c 	.word	0x0802ae3c
 801047c:	0802ae88 	.word	0x0802ae88
 8010480:	0802aeb8 	.word	0x0802aeb8
 8010484:	2400508c 	.word	0x2400508c
 8010488:	0802aee4 	.word	0x0802aee4

0801048c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 801048c:	b580      	push	{r7, lr}
 801048e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8010490:	4b04      	ldr	r3, [pc, #16]	@ (80104a4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f04f 31ff 	mov.w	r1, #4294967295
 8010498:	4618      	mov	r0, r3
 801049a:	f7f9 faf3 	bl	8009a84 <osSemaphoreAcquire>
}
 801049e:	bf00      	nop
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	24005088 	.word	0x24005088

080104a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80104ac:	4b03      	ldr	r3, [pc, #12]	@ (80104bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7f9 fb39 	bl	8009b28 <osSemaphoreRelease>
}
 80104b6:	bf00      	nop
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	24005088 	.word	0x24005088

080104c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80104c4:	4b03      	ldr	r3, [pc, #12]	@ (80104d4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2100      	movs	r1, #0
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7f9 fada 	bl	8009a84 <osSemaphoreAcquire>
}
 80104d0:	bf00      	nop
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	24005088 	.word	0x24005088

080104d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80104dc:	4b03      	ldr	r3, [pc, #12]	@ (80104ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7f9 fb21 	bl	8009b28 <osSemaphoreRelease>
}
 80104e6:	bf00      	nop
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop
 80104ec:	24005088 	.word	0x24005088

080104f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80104f4:	4b04      	ldr	r3, [pc, #16]	@ (8010508 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80104f6:	6818      	ldr	r0, [r3, #0]
 80104f8:	2300      	movs	r3, #0
 80104fa:	2200      	movs	r2, #0
 80104fc:	4903      	ldr	r1, [pc, #12]	@ (801050c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80104fe:	f7f9 fbcb 	bl	8009c98 <osMessageQueuePut>
}
 8010502:	bf00      	nop
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	2400508c 	.word	0x2400508c
 801050c:	24000018 	.word	0x24000018

08010510 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8010516:	4b09      	ldr	r3, [pc, #36]	@ (801053c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010518:	6818      	ldr	r0, [r3, #0]
 801051a:	1d39      	adds	r1, r7, #4
 801051c:	2300      	movs	r3, #0
 801051e:	2200      	movs	r2, #0
 8010520:	f7f9 fc1a 	bl	8009d58 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8010524:	4b05      	ldr	r3, [pc, #20]	@ (801053c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010526:	6818      	ldr	r0, [r3, #0]
 8010528:	1d39      	adds	r1, r7, #4
 801052a:	f04f 33ff 	mov.w	r3, #4294967295
 801052e:	2200      	movs	r2, #0
 8010530:	f7f9 fc12 	bl	8009d58 <osMessageQueueGet>
}
 8010534:	bf00      	nop
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	2400508c 	.word	0x2400508c

08010540 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	4603      	mov	r3, r0
 8010548:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 801054a:	88fb      	ldrh	r3, [r7, #6]
 801054c:	4618      	mov	r0, r3
 801054e:	f7f9 f9f5 	bl	800993c <osDelay>
}
 8010552:	bf00      	nop
 8010554:	3708      	adds	r7, #8
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
	...

0801055c <__NVIC_EnableIRQ>:
{
 801055c:	b480      	push	{r7}
 801055e:	b083      	sub	sp, #12
 8010560:	af00      	add	r7, sp, #0
 8010562:	4603      	mov	r3, r0
 8010564:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801056a:	2b00      	cmp	r3, #0
 801056c:	db0b      	blt.n	8010586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801056e:	88fb      	ldrh	r3, [r7, #6]
 8010570:	f003 021f 	and.w	r2, r3, #31
 8010574:	4907      	ldr	r1, [pc, #28]	@ (8010594 <__NVIC_EnableIRQ+0x38>)
 8010576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801057a:	095b      	lsrs	r3, r3, #5
 801057c:	2001      	movs	r0, #1
 801057e:	fa00 f202 	lsl.w	r2, r0, r2
 8010582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010586:	bf00      	nop
 8010588:	370c      	adds	r7, #12
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop
 8010594:	e000e100 	.word	0xe000e100

08010598 <__NVIC_DisableIRQ>:
{
 8010598:	b480      	push	{r7}
 801059a:	b083      	sub	sp, #12
 801059c:	af00      	add	r7, sp, #0
 801059e:	4603      	mov	r3, r0
 80105a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80105a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	db12      	blt.n	80105d0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80105aa:	88fb      	ldrh	r3, [r7, #6]
 80105ac:	f003 021f 	and.w	r2, r3, #31
 80105b0:	490a      	ldr	r1, [pc, #40]	@ (80105dc <__NVIC_DisableIRQ+0x44>)
 80105b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80105b6:	095b      	lsrs	r3, r3, #5
 80105b8:	2001      	movs	r0, #1
 80105ba:	fa00 f202 	lsl.w	r2, r0, r2
 80105be:	3320      	adds	r3, #32
 80105c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80105c4:	f3bf 8f4f 	dsb	sy
}
 80105c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80105ca:	f3bf 8f6f 	isb	sy
}
 80105ce:	bf00      	nop
}
 80105d0:	bf00      	nop
 80105d2:	370c      	adds	r7, #12
 80105d4:	46bd      	mov	sp, r7
 80105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105da:	4770      	bx	lr
 80105dc:	e000e100 	.word	0xe000e100

080105e0 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
        : color(0)
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	601a      	str	r2, [r3, #0]
    }
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	4618      	mov	r0, r3
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80105fc:	b480      	push	{r7}
 80105fe:	b083      	sub	sp, #12
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
        return color;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
    }
 8010608:	4618      	mov	r0, r3
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
    {
 801061c:	4a04      	ldr	r2, [pc, #16]	@ (8010630 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	601a      	str	r2, [r3, #0]
    }
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	4618      	mov	r0, r3
 8010626:	370c      	adds	r7, #12
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr
 8010630:	0802b820 	.word	0x0802b820

08010634 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
    }
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f7ff ffe9 	bl	8010614 <_ZN8touchgfx9DMA_QueueD1Ev>
 8010642:	2104      	movs	r1, #4
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f018 fd18 	bl	802907a <_ZdlPvj>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4618      	mov	r0, r3
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	3344      	adds	r3, #68	@ 0x44
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	4798      	blx	r3
    }
 8010668:	bf00      	nop
 801066a:	3708      	adds	r7, #8
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
    {
 8010678:	4a04      	ldr	r2, [pc, #16]	@ (801068c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	601a      	str	r2, [r3, #0]
    }
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	4618      	mov	r0, r3
 8010682:	370c      	adds	r7, #12
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr
 801068c:	0802bec8 	.word	0x0802bec8

08010690 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
    }
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f7ff ffe9 	bl	8010670 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801069e:	210c      	movs	r1, #12
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f018 fcea 	bl	802907a <_ZdlPvj>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4618      	mov	r0, r3
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80106ba:	4a09      	ldr	r2, [pc, #36]	@ (80106e0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	601a      	str	r2, [r3, #0]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	683a      	ldr	r2, [r7, #0]
 80106c4:	605a      	str	r2, [r3, #4]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2200      	movs	r2, #0
 80106ca:	721a      	strb	r2, [r3, #8]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	725a      	strb	r2, [r3, #9]
    {
    }
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4618      	mov	r0, r3
 80106d6:	370c      	adds	r7, #12
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr
 80106e0:	0802bec8 	.word	0x0802bec8

080106e4 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80106ec:	2301      	movs	r3, #1
    }
 80106ee:	4618      	mov	r0, r3
 80106f0:	370c      	adds	r7, #12
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr

080106fa <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b082      	sub	sp, #8
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	3328      	adds	r3, #40	@ 0x28
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4610      	mov	r0, r2
 801070e:	4798      	blx	r3
    }
 8010710:	bf00      	nop
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	685a      	ldr	r2, [r3, #4]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	685b      	ldr	r3, [r3, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	3314      	adds	r3, #20
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	4610      	mov	r0, r2
 8010730:	4798      	blx	r3
    }
 8010732:	bf00      	nop
 8010734:	3708      	adds	r7, #8
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 801073a:	b580      	push	{r7, lr}
 801073c:	b082      	sub	sp, #8
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8010742:	f7fc fdad 	bl	800d2a0 <_ZN8touchgfx3HAL11getInstanceEv>
 8010746:	4603      	mov	r3, r0
 8010748:	4618      	mov	r0, r3
 801074a:	f7ff ffe5 	bl	8010718 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 801074e:	bf00      	nop
 8010750:	3708      	adds	r7, #8
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 8010756:	b480      	push	{r7}
 8010758:	b083      	sub	sp, #12
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        while (1)
 801075e:	bf00      	nop
 8010760:	e7fd      	b.n	801075e <DMA2D_XferErrorCallback+0x8>
	...

08010764 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	4a05      	ldr	r2, [pc, #20]	@ (8010784 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	601a      	str	r2, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	4618      	mov	r0, r3
 8010776:	f7ff ff4d 	bl	8010614 <_ZN8touchgfx9DMA_QueueD1Ev>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4618      	mov	r0, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}
 8010784:	0802bf18 	.word	0x0802bf18

08010788 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f7ff ffe7 	bl	8010764 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010796:	2114      	movs	r1, #20
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f018 fc6e 	bl	802907a <_ZdlPvj>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	4618      	mov	r0, r3
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	330c      	adds	r3, #12
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7ff ff13 	bl	80105e0 <_ZN8touchgfx9colortypeC1Ev>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <_ZN8STM32DMAC1Ev>:

        }
    }
}

STM32DMA::STM32DMA()
 80107c4:	b5b0      	push	{r4, r5, r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	330c      	adds	r3, #12
 80107d2:	4619      	mov	r1, r3
 80107d4:	4610      	mov	r0, r2
 80107d6:	f7ff ff6b 	bl	80106b0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80107da:	4a0e      	ldr	r2, [pc, #56]	@ (8010814 <_ZN8STM32DMAC1Ev+0x50>)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	601a      	str	r2, [r3, #0]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f103 000c 	add.w	r0, r3, #12
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	3320      	adds	r3, #32
 80107ea:	2260      	movs	r2, #96	@ 0x60
 80107ec:	4619      	mov	r1, r3
 80107ee:	f003 faeb 	bl	8013dc8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	3320      	adds	r3, #32
 80107f6:	245f      	movs	r4, #95	@ 0x5f
 80107f8:	461d      	mov	r5, r3
 80107fa:	e004      	b.n	8010806 <_ZN8STM32DMAC1Ev+0x42>
 80107fc:	4628      	mov	r0, r5
 80107fe:	f7ff ffd3 	bl	80107a8 <_ZN8touchgfx6BlitOpC1Ev>
 8010802:	3c01      	subs	r4, #1
 8010804:	3524      	adds	r5, #36	@ 0x24
 8010806:	2c00      	cmp	r4, #0
 8010808:	daf8      	bge.n	80107fc <_ZN8STM32DMAC1Ev+0x38>
{
}
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4618      	mov	r0, r3
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bdb0      	pop	{r4, r5, r7, pc}
 8010814:	0802b7d0 	.word	0x0802b7d0

08010818 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	4a09      	ldr	r2, [pc, #36]	@ (8010848 <_ZN8STM32DMAD1Ev+0x30>)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8010826:	205a      	movs	r0, #90	@ 0x5a
 8010828:	f7ff feb6 	bl	8010598 <__NVIC_DisableIRQ>
}
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	330c      	adds	r3, #12
 8010830:	4618      	mov	r0, r3
 8010832:	f7ff ff97 	bl	8010764 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	4618      	mov	r0, r3
 801083a:	f7ff ff19 	bl	8010670 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	0802b7d0 	.word	0x0802b7d0

0801084c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
}
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f7ff ffdf 	bl	8010818 <_ZN8STM32DMAD1Ev>
 801085a:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f018 fc0b 	bl	802907a <_ZdlPvj>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4618      	mov	r0, r3
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
	...

08010870 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8010878:	4b13      	ldr	r3, [pc, #76]	@ (80108c8 <_ZN8STM32DMA10initializeEv+0x58>)
 801087a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801087e:	4a12      	ldr	r2, [pc, #72]	@ (80108c8 <_ZN8STM32DMA10initializeEv+0x58>)
 8010880:	f043 0310 	orr.w	r3, r3, #16
 8010884:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8010888:	4b0f      	ldr	r3, [pc, #60]	@ (80108c8 <_ZN8STM32DMA10initializeEv+0x58>)
 801088a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801088e:	f003 0310 	and.w	r3, r3, #16
 8010892:	60fb      	str	r3, [r7, #12]
 8010894:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8010896:	4b0c      	ldr	r3, [pc, #48]	@ (80108c8 <_ZN8STM32DMA10initializeEv+0x58>)
 8010898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801089a:	4a0b      	ldr	r2, [pc, #44]	@ (80108c8 <_ZN8STM32DMA10initializeEv+0x58>)
 801089c:	f043 0310 	orr.w	r3, r3, #16
 80108a0:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80108a2:	4b09      	ldr	r3, [pc, #36]	@ (80108c8 <_ZN8STM32DMA10initializeEv+0x58>)
 80108a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108a6:	4a08      	ldr	r2, [pc, #32]	@ (80108c8 <_ZN8STM32DMA10initializeEv+0x58>)
 80108a8:	f023 0310 	bic.w	r3, r3, #16
 80108ac:	67d3      	str	r3, [r2, #124]	@ 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80108ae:	4b07      	ldr	r3, [pc, #28]	@ (80108cc <_ZN8STM32DMA10initializeEv+0x5c>)
 80108b0:	4a07      	ldr	r2, [pc, #28]	@ (80108d0 <_ZN8STM32DMA10initializeEv+0x60>)
 80108b2:	621a      	str	r2, [r3, #32]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80108b4:	4b05      	ldr	r3, [pc, #20]	@ (80108cc <_ZN8STM32DMA10initializeEv+0x5c>)
 80108b6:	4a07      	ldr	r2, [pc, #28]	@ (80108d4 <_ZN8STM32DMA10initializeEv+0x64>)
 80108b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80108ba:	205a      	movs	r0, #90	@ 0x5a
 80108bc:	f7ff fe4e 	bl	801055c <__NVIC_EnableIRQ>
}
 80108c0:	bf00      	nop
 80108c2:	3710      	adds	r7, #16
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	58024400 	.word	0x58024400
 80108cc:	24000354 	.word	0x24000354
 80108d0:	0801073b 	.word	0x0801073b
 80108d4:	08010757 	.word	0x08010757

080108d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	460b      	mov	r3, r1
 80108e2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80108e4:	2300      	movs	r3, #0
 80108e6:	60fb      	str	r3, [r7, #12]

    switch (format)
 80108e8:	78fb      	ldrb	r3, [r7, #3]
 80108ea:	2b0b      	cmp	r3, #11
 80108ec:	d826      	bhi.n	801093c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80108ee:	a201      	add	r2, pc, #4	@ (adr r2, 80108f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80108f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f4:	08010931 	.word	0x08010931
 80108f8:	0801092b 	.word	0x0801092b
 80108fc:	08010925 	.word	0x08010925
 8010900:	0801093d 	.word	0x0801093d
 8010904:	0801093d 	.word	0x0801093d
 8010908:	0801093d 	.word	0x0801093d
 801090c:	0801093d 	.word	0x0801093d
 8010910:	08010937 	.word	0x08010937
 8010914:	08010937 	.word	0x08010937
 8010918:	08010937 	.word	0x08010937
 801091c:	08010937 	.word	0x08010937
 8010920:	08010937 	.word	0x08010937
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8010924:	2300      	movs	r3, #0
 8010926:	60fb      	str	r3, [r7, #12]
        break;
 8010928:	e00e      	b.n	8010948 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 801092a:	2301      	movs	r3, #1
 801092c:	60fb      	str	r3, [r7, #12]
        break;
 801092e:	e00b      	b.n	8010948 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8010930:	2302      	movs	r3, #2
 8010932:	60fb      	str	r3, [r7, #12]
        break;
 8010934:	e008      	b.n	8010948 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8010936:	2305      	movs	r3, #5
 8010938:	60fb      	str	r3, [r7, #12]
        break;
 801093a:	e005      	b.n	8010948 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 801093c:	4b05      	ldr	r3, [pc, #20]	@ (8010954 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 801093e:	4a06      	ldr	r2, [pc, #24]	@ (8010958 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8010940:	216f      	movs	r1, #111	@ 0x6f
 8010942:	4806      	ldr	r0, [pc, #24]	@ (801095c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8010944:	f018 fd64 	bl	8029410 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8010948:	68fb      	ldr	r3, [r7, #12]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	0802af28 	.word	0x0802af28
 8010958:	0802af44 	.word	0x0802af44
 801095c:	0802af90 	.word	0x0802af90

08010960 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	460b      	mov	r3, r1
 801096a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801096c:	2300      	movs	r3, #0
 801096e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8010970:	78fb      	ldrb	r3, [r7, #3]
 8010972:	2b0a      	cmp	r3, #10
 8010974:	d821      	bhi.n	80109ba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8010976:	a201      	add	r2, pc, #4	@ (adr r2, 801097c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8010978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801097c:	080109b5 	.word	0x080109b5
 8010980:	080109af 	.word	0x080109af
 8010984:	080109a9 	.word	0x080109a9
 8010988:	080109bb 	.word	0x080109bb
 801098c:	080109bb 	.word	0x080109bb
 8010990:	080109bb 	.word	0x080109bb
 8010994:	080109bb 	.word	0x080109bb
 8010998:	080109af 	.word	0x080109af
 801099c:	080109af 	.word	0x080109af
 80109a0:	080109af 	.word	0x080109af
 80109a4:	080109af 	.word	0x080109af
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80109a8:	2300      	movs	r3, #0
 80109aa:	60fb      	str	r3, [r7, #12]
        break;
 80109ac:	e00b      	b.n	80109c6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80109ae:	2301      	movs	r3, #1
 80109b0:	60fb      	str	r3, [r7, #12]
        break;
 80109b2:	e008      	b.n	80109c6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80109b4:	2302      	movs	r3, #2
 80109b6:	60fb      	str	r3, [r7, #12]
        break;
 80109b8:	e005      	b.n	80109c6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80109ba:	4b05      	ldr	r3, [pc, #20]	@ (80109d0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80109bc:	4a05      	ldr	r2, [pc, #20]	@ (80109d4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80109be:	2190      	movs	r1, #144	@ 0x90
 80109c0:	4805      	ldr	r0, [pc, #20]	@ (80109d8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80109c2:	f018 fd25 	bl	8029410 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80109c6:	68fb      	ldr	r3, [r7, #12]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3710      	adds	r7, #16
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	0802af28 	.word	0x0802af28
 80109d4:	0802afbc 	.word	0x0802afbc
 80109d8:	0802af90 	.word	0x0802af90

080109dc <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80109e4:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	370c      	adds	r7, #12
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr

080109f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80109f4:	b590      	push	{r4, r7, lr}
 80109f6:	b089      	sub	sp, #36	@ 0x24
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	7f5b      	ldrb	r3, [r3, #29]
 8010a02:	4619      	mov	r1, r3
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7ff ff67 	bl	80108d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8010a0a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	7f9b      	ldrb	r3, [r3, #30]
 8010a10:	4619      	mov	r1, r3
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7ff ff60 	bl	80108d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8010a18:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	7f9b      	ldrb	r3, [r3, #30]
 8010a1e:	4619      	mov	r1, r3
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff ff9d 	bl	8010960 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8010a26:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	8b5b      	ldrh	r3, [r3, #26]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	8a9b      	ldrh	r3, [r3, #20]
 8010a32:	1ad2      	subs	r2, r2, r3
 8010a34:	4b93      	ldr	r3, [pc, #588]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	8b5b      	ldrh	r3, [r3, #26]
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	8a9b      	ldrh	r3, [r3, #20]
 8010a42:	1ad2      	subs	r2, r2, r3
 8010a44:	4b8f      	ldr	r3, [pc, #572]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a46:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	8b1b      	ldrh	r3, [r3, #24]
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	8a9b      	ldrh	r3, [r3, #20]
 8010a52:	1ad2      	subs	r2, r2, r3
 8010a54:	4b8b      	ldr	r3, [pc, #556]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a56:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8010a58:	4a8a      	ldr	r2, [pc, #552]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	8adb      	ldrh	r3, [r3, #22]
 8010a62:	461a      	mov	r2, r3
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	8a9b      	ldrh	r3, [r3, #20]
 8010a68:	041b      	lsls	r3, r3, #16
 8010a6a:	431a      	orrs	r2, r3
 8010a6c:	4b85      	ldr	r3, [pc, #532]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	691a      	ldr	r2, [r3, #16]
 8010a74:	4b83      	ldr	r3, [pc, #524]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	685a      	ldr	r2, [r3, #4]
 8010a7c:	4b81      	ldr	r3, [pc, #516]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a7e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a88:	d035      	beq.n	8010af6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 8010a8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a8e:	f200 80dc 	bhi.w	8010c4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
 8010a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a96:	d014      	beq.n	8010ac2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8010a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a9c:	f200 80d5 	bhi.w	8010c4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
 8010aa0:	2b80      	cmp	r3, #128	@ 0x80
 8010aa2:	d056      	beq.n	8010b52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15e>
 8010aa4:	2b80      	cmp	r3, #128	@ 0x80
 8010aa6:	f200 80d0 	bhi.w	8010c4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
 8010aaa:	2b40      	cmp	r3, #64	@ 0x40
 8010aac:	f000 80b9 	beq.w	8010c22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22e>
 8010ab0:	2b40      	cmp	r3, #64	@ 0x40
 8010ab2:	f200 80ca 	bhi.w	8010c4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
 8010ab6:	2b04      	cmp	r3, #4
 8010ab8:	d037      	beq.n	8010b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8010aba:	2b20      	cmp	r3, #32
 8010abc:	f000 80b1 	beq.w	8010c22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22e>
 8010ac0:	e0c3      	b.n	8010c4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	7f1b      	ldrb	r3, [r3, #28]
 8010ac6:	061a      	lsls	r2, r3, #24
 8010ac8:	496e      	ldr	r1, [pc, #440]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010aca:	4b6f      	ldr	r3, [pc, #444]	@ (8010c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010acc:	4313      	orrs	r3, r2
 8010ace:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	330c      	adds	r3, #12
 8010ad4:	4c6b      	ldr	r4, [pc, #428]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7ff fd90 	bl	80105fc <_ZNK8touchgfx9colortypecvmEv>
 8010adc:	4603      	mov	r3, r0
 8010ade:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010ae0:	4a68      	ldr	r2, [pc, #416]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	691a      	ldr	r2, [r3, #16]
 8010aea:	4b66      	ldr	r3, [pc, #408]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010aec:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010aee:	4b65      	ldr	r3, [pc, #404]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010af0:	4a66      	ldr	r2, [pc, #408]	@ (8010c8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8010af2:	601a      	str	r2, [r3, #0]
        break;
 8010af4:	e0c1      	b.n	8010c7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	7f1b      	ldrb	r3, [r3, #28]
 8010afa:	061a      	lsls	r2, r3, #24
 8010afc:	4961      	ldr	r1, [pc, #388]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010afe:	4b64      	ldr	r3, [pc, #400]	@ (8010c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010b00:	4313      	orrs	r3, r2
 8010b02:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	330c      	adds	r3, #12
 8010b08:	4c5e      	ldr	r4, [pc, #376]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7ff fd76 	bl	80105fc <_ZNK8touchgfx9colortypecvmEv>
 8010b10:	4603      	mov	r3, r0
 8010b12:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010b14:	4a5b      	ldr	r2, [pc, #364]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	691a      	ldr	r2, [r3, #16]
 8010b1e:	4b59      	ldr	r3, [pc, #356]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b20:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010b22:	4b58      	ldr	r3, [pc, #352]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b24:	4a59      	ldr	r2, [pc, #356]	@ (8010c8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8010b26:	601a      	str	r2, [r3, #0]
        break;
 8010b28:	e0a7      	b.n	8010c7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	7f1b      	ldrb	r3, [r3, #28]
 8010b2e:	061a      	lsls	r2, r3, #24
 8010b30:	69bb      	ldr	r3, [r7, #24]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	4a53      	ldr	r2, [pc, #332]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010b3a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010b3c:	4a51      	ldr	r2, [pc, #324]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	691a      	ldr	r2, [r3, #16]
 8010b46:	4b4f      	ldr	r3, [pc, #316]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b48:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b4c:	4a4f      	ldr	r2, [pc, #316]	@ (8010c8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8010b4e:	601a      	str	r2, [r3, #0]
        break;
 8010b50:	e093      	b.n	8010c7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8010b52:	2301      	movs	r3, #1
 8010b54:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	689b      	ldr	r3, [r3, #8]
 8010b5a:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	1d1a      	adds	r2, r3, #4
 8010b60:	4b48      	ldr	r3, [pc, #288]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b62:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	7f1b      	ldrb	r3, [r3, #28]
 8010b68:	061a      	lsls	r2, r3, #24
 8010b6a:	69bb      	ldr	r3, [r7, #24]
 8010b6c:	4313      	orrs	r3, r2
 8010b6e:	4a45      	ldr	r2, [pc, #276]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010b74:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010b76:	4a43      	ldr	r2, [pc, #268]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	691a      	ldr	r2, [r3, #16]
 8010b80:	4b40      	ldr	r3, [pc, #256]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b82:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	881b      	ldrh	r3, [r3, #0]
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d002      	beq.n	8010b94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d00c      	beq.n	8010bac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>
 8010b92:	e01f      	b.n	8010bd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8010b94:	4b3b      	ldr	r3, [pc, #236]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b96:	69da      	ldr	r2, [r3, #28]
 8010b98:	4b3e      	ldr	r3, [pc, #248]	@ (8010c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8010b9a:	4013      	ands	r3, r2
 8010b9c:	68fa      	ldr	r2, [r7, #12]
 8010b9e:	8852      	ldrh	r2, [r2, #2]
 8010ba0:	3a01      	subs	r2, #1
 8010ba2:	0212      	lsls	r2, r2, #8
 8010ba4:	4937      	ldr	r1, [pc, #220]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	61cb      	str	r3, [r1, #28]
                break;
 8010baa:	e01a      	b.n	8010be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ee>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	7f1b      	ldrb	r3, [r3, #28]
 8010bb0:	2bff      	cmp	r3, #255	@ 0xff
 8010bb2:	d101      	bne.n	8010bb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>
                {
                    blend = false;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8010bb8:	4b32      	ldr	r3, [pc, #200]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010bba:	69da      	ldr	r2, [r3, #28]
 8010bbc:	4b35      	ldr	r3, [pc, #212]	@ (8010c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8010bbe:	4013      	ands	r3, r2
 8010bc0:	68fa      	ldr	r2, [r7, #12]
 8010bc2:	8852      	ldrh	r2, [r2, #2]
 8010bc4:	3a01      	subs	r2, #1
 8010bc6:	0212      	lsls	r2, r2, #8
 8010bc8:	4313      	orrs	r3, r2
 8010bca:	4a2e      	ldr	r2, [pc, #184]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010bcc:	f043 0310 	orr.w	r3, r3, #16
 8010bd0:	61d3      	str	r3, [r2, #28]
                break;
 8010bd2:	e006      	b.n	8010be2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ee>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8010bd4:	4b30      	ldr	r3, [pc, #192]	@ (8010c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8010bd6:	4a31      	ldr	r2, [pc, #196]	@ (8010c9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8010bd8:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8010bdc:	4830      	ldr	r0, [pc, #192]	@ (8010ca0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8010bde:	f018 fc17 	bl	8029410 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8010be2:	4b28      	ldr	r3, [pc, #160]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010be4:	69db      	ldr	r3, [r3, #28]
 8010be6:	4a27      	ldr	r2, [pc, #156]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010be8:	f043 0320 	orr.w	r3, r3, #32
 8010bec:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8010bee:	bf00      	nop
 8010bf0:	4b24      	ldr	r3, [pc, #144]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010bf2:	69db      	ldr	r3, [r3, #28]
 8010bf4:	f003 0320 	and.w	r3, r3, #32
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	bf14      	ite	ne
 8010bfc:	2301      	movne	r3, #1
 8010bfe:	2300      	moveq	r3, #0
 8010c00:	b2db      	uxtb	r3, r3
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d1f4      	bne.n	8010bf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8010c06:	4b1f      	ldr	r3, [pc, #124]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010c08:	2210      	movs	r2, #16
 8010c0a:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8010c0c:	7ffb      	ldrb	r3, [r7, #31]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d003      	beq.n	8010c1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010c12:	4b1c      	ldr	r3, [pc, #112]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010c14:	4a1d      	ldr	r2, [pc, #116]	@ (8010c8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8010c16:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 8010c18:	e02f      	b.n	8010c7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010c1c:	4a21      	ldr	r2, [pc, #132]	@ (8010ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8010c1e:	601a      	str	r2, [r3, #0]
        break;
 8010c20:	e02b      	b.n	8010c7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	7f1b      	ldrb	r3, [r3, #28]
 8010c26:	061a      	lsls	r2, r3, #24
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	4a15      	ldr	r2, [pc, #84]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010c32:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010c34:	4a13      	ldr	r2, [pc, #76]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	691a      	ldr	r2, [r3, #16]
 8010c3e:	4b11      	ldr	r3, [pc, #68]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010c40:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010c42:	4b10      	ldr	r3, [pc, #64]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010c44:	4a11      	ldr	r2, [pc, #68]	@ (8010c8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8010c46:	601a      	str	r2, [r3, #0]
        break;
 8010c48:	e017      	b.n	8010c7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	7f1b      	ldrb	r3, [r3, #28]
 8010c4e:	061a      	lsls	r2, r3, #24
 8010c50:	69bb      	ldr	r3, [r7, #24]
 8010c52:	4313      	orrs	r3, r2
 8010c54:	4a0b      	ldr	r2, [pc, #44]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010c5a:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	7f5a      	ldrb	r2, [r3, #29]
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	7f9b      	ldrb	r3, [r3, #30]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d003      	beq.n	8010c70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010c68:	4b06      	ldr	r3, [pc, #24]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8010ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8010c6c:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }
        break;
 8010c6e:	e003      	b.n	8010c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010c70:	4b04      	ldr	r3, [pc, #16]	@ (8010c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010c72:	f242 3201 	movw	r2, #8961	@ 0x2301
 8010c76:	601a      	str	r2, [r3, #0]
        break;
 8010c78:	bf00      	nop
    }
}
 8010c7a:	bf00      	nop
 8010c7c:	3724      	adds	r7, #36	@ 0x24
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd90      	pop	{r4, r7, pc}
 8010c82:	bf00      	nop
 8010c84:	52001000 	.word	0x52001000
 8010c88:	0002000a 	.word	0x0002000a
 8010c8c:	00022301 	.word	0x00022301
 8010c90:	00020009 	.word	0x00020009
 8010c94:	ffff00ef 	.word	0xffff00ef
 8010c98:	0802b008 	.word	0x0802b008
 8010c9c:	0802b024 	.word	0x0802b024
 8010ca0:	0802af90 	.word	0x0802af90
 8010ca4:	00012301 	.word	0x00012301

08010ca8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8010ca8:	b590      	push	{r4, r7, lr}
 8010caa:	b085      	sub	sp, #20
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	7f9b      	ldrb	r3, [r3, #30]
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7ff fe51 	bl	8010960 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8010cbe:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8010cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	8adb      	ldrh	r3, [r3, #22]
 8010cca:	461a      	mov	r2, r3
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	8a9b      	ldrh	r3, [r3, #20]
 8010cd0:	041b      	lsls	r3, r3, #16
 8010cd2:	431a      	orrs	r2, r3
 8010cd4:	4b35      	ldr	r3, [pc, #212]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010cd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	691a      	ldr	r2, [r3, #16]
 8010cdc:	4b33      	ldr	r3, [pc, #204]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010cde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	8b5b      	ldrh	r3, [r3, #26]
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	8a9b      	ldrh	r3, [r3, #20]
 8010cea:	1ad2      	subs	r2, r2, r3
 8010cec:	4b2f      	ldr	r3, [pc, #188]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010cee:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	2b08      	cmp	r3, #8
 8010cf6:	d12d      	bne.n	8010d54 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	8b5b      	ldrh	r3, [r3, #26]
 8010cfc:	461a      	mov	r2, r3
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	8a9b      	ldrh	r3, [r3, #20]
 8010d02:	1ad2      	subs	r2, r2, r3
 8010d04:	4b29      	ldr	r3, [pc, #164]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d06:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	8b5b      	ldrh	r3, [r3, #26]
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	8a9b      	ldrh	r3, [r3, #20]
 8010d12:	1ad2      	subs	r2, r2, r3
 8010d14:	4b25      	ldr	r3, [pc, #148]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d16:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010d18:	4a24      	ldr	r2, [pc, #144]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	7f1b      	ldrb	r3, [r3, #28]
 8010d22:	061a      	lsls	r2, r3, #24
 8010d24:	4921      	ldr	r1, [pc, #132]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d26:	4b22      	ldr	r3, [pc, #136]	@ (8010db0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	330c      	adds	r3, #12
 8010d30:	4c1e      	ldr	r4, [pc, #120]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7ff fc62 	bl	80105fc <_ZNK8touchgfx9colortypecvmEv>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	691a      	ldr	r2, [r3, #16]
 8010d40:	4b1a      	ldr	r3, [pc, #104]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d42:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	691a      	ldr	r2, [r3, #16]
 8010d48:	4b18      	ldr	r3, [pc, #96]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d4a:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8010d4c:	4b17      	ldr	r3, [pc, #92]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d4e:	4a19      	ldr	r2, [pc, #100]	@ (8010db4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8010d50:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 8010d52:	e027      	b.n	8010da4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8010d54:	4a15      	ldr	r2, [pc, #84]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8010d5a:	4b14      	ldr	r3, [pc, #80]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	330c      	adds	r3, #12
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7ff fc49 	bl	80105fc <_ZNK8touchgfx9colortypecvmEv>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	0a1b      	lsrs	r3, r3, #8
 8010d6e:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	330c      	adds	r3, #12
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7ff fc40 	bl	80105fc <_ZNK8touchgfx9colortypecvmEv>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	095b      	lsrs	r3, r3, #5
 8010d80:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010d84:	431c      	orrs	r4, r3
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	330c      	adds	r3, #12
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7ff fc36 	bl	80105fc <_ZNK8touchgfx9colortypecvmEv>
 8010d90:	4603      	mov	r3, r0
 8010d92:	08db      	lsrs	r3, r3, #3
 8010d94:	f003 031f 	and.w	r3, r3, #31
 8010d98:	4a04      	ldr	r2, [pc, #16]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010d9a:	4323      	orrs	r3, r4
 8010d9c:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8010d9e:	4b03      	ldr	r3, [pc, #12]	@ (8010dac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010da0:	4a05      	ldr	r2, [pc, #20]	@ (8010db8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8010da2:	601a      	str	r2, [r3, #0]
}
 8010da4:	bf00      	nop
 8010da6:	3714      	adds	r7, #20
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd90      	pop	{r4, r7, pc}
 8010dac:	52001000 	.word	0x52001000
 8010db0:	00010009 	.word	0x00010009
 8010db4:	00022301 	.word	0x00022301
 8010db8:	00032301 	.word	0x00032301

08010dbc <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8010dc0:	bf00      	nop
 8010dc2:	4b09      	ldr	r3, [pc, #36]	@ (8010de8 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f003 0301 	and.w	r3, r3, #1
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	bf14      	ite	ne
 8010dce:	2301      	movne	r3, #1
 8010dd0:	2300      	moveq	r3, #0
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d1f4      	bne.n	8010dc2 <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8010dd8:	4b03      	ldr	r3, [pc, #12]	@ (8010de8 <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8010dda:	2223      	movs	r2, #35	@ 0x23
 8010ddc:	609a      	str	r2, [r3, #8]
}
 8010dde:	bf00      	nop
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr
 8010de8:	52001000 	.word	0x52001000

08010dec <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b087      	sub	sp, #28
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
    // This function is used when decompressing data to flush
    // the currently decoded data in the cache to allow the DMA2D
    // to blend the pixels correctly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8010df6:	4b1b      	ldr	r3, [pc, #108]	@ (8010e64 <_ZN8touchgfx5paint9flushLineEPmi+0x78>)
 8010df8:	695b      	ldr	r3, [r3, #20]
 8010dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	bf14      	ite	ne
 8010e02:	2301      	movne	r3, #1
 8010e04:	2300      	moveq	r3, #0
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d025      	beq.n	8010e58 <_ZN8touchgfx5paint9flushLineEPmi+0x6c>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	617b      	str	r3, [r7, #20]
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	dd1d      	ble.n	8010e56 <_ZN8touchgfx5paint9flushLineEPmi+0x6a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	f003 021f 	and.w	r2, r3, #31
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	4413      	add	r3, r2
 8010e24:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8010e2a:	f3bf 8f4f 	dsb	sy
}
 8010e2e:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8010e30:	4a0c      	ldr	r2, [pc, #48]	@ (8010e64 <_ZN8touchgfx5paint9flushLineEPmi+0x78>)
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	3320      	adds	r3, #32
 8010e3c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	3b20      	subs	r3, #32
 8010e42:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	dcf2      	bgt.n	8010e30 <_ZN8touchgfx5paint9flushLineEPmi+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
 8010e4a:	f3bf 8f4f 	dsb	sy
}
 8010e4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010e50:	f3bf 8f6f 	isb	sy
}
 8010e54:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8010e56:	bf00      	nop
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8010e58:	bf00      	nop
 8010e5a:	371c      	adds	r7, #28
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr
 8010e64:	e000ed00 	.word	0xe000ed00

08010e68 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b085      	sub	sp, #20
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	607a      	str	r2, [r7, #4]
 8010e74:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8010e76:	bf00      	nop
 8010e78:	4b1f      	ldr	r3, [pc, #124]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f003 0301 	and.w	r3, r3, #1
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	bf14      	ite	ne
 8010e84:	2301      	movne	r3, #1
 8010e86:	2300      	moveq	r3, #0
 8010e88:	b2db      	uxtb	r3, r3
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d1f4      	bne.n	8010e78 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8010e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010e90:	2223      	movs	r2, #35	@ 0x23
 8010e92:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8010e94:	4b18      	ldr	r3, [pc, #96]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010e96:	2202      	movs	r2, #2
 8010e98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	041b      	lsls	r3, r3, #16
 8010e9e:	4a16      	ldr	r2, [pc, #88]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010ea0:	f043 0301 	orr.w	r3, r3, #1
 8010ea4:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8010ea6:	4a14      	ldr	r2, [pc, #80]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8010eac:	4a12      	ldr	r2, [pc, #72]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 8010eb2:	78fb      	ldrb	r3, [r7, #3]
 8010eb4:	2bff      	cmp	r3, #255	@ 0xff
 8010eb6:	d00f      	beq.n	8010ed8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8010eb8:	78fb      	ldrb	r3, [r7, #3]
 8010eba:	061b      	lsls	r3, r3, #24
 8010ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010ebe:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 8010ec2:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010ec6:	2202      	movs	r2, #2
 8010ec8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8010eca:	4a0b      	ldr	r2, [pc, #44]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8010ed0:	4b09      	ldr	r3, [pc, #36]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8010efc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x94>)
 8010ed4:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8010ed6:	e008      	b.n	8010eea <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8010ed8:	78fb      	ldrb	r3, [r7, #3]
 8010eda:	061b      	lsls	r3, r3, #24
 8010edc:	4a06      	ldr	r2, [pc, #24]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010ede:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 8010ee2:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8010ee4:	4b04      	ldr	r3, [pc, #16]	@ (8010ef8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	601a      	str	r2, [r3, #0]
}
 8010eea:	bf00      	nop
 8010eec:	3714      	adds	r7, #20
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef4:	4770      	bx	lr
 8010ef6:	bf00      	nop
 8010ef8:	52001000 	.word	0x52001000
 8010efc:	00020001 	.word	0x00020001

08010f00 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8010f00:	b480      	push	{r7}
 8010f02:	b085      	sub	sp, #20
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	60b9      	str	r1, [r7, #8]
 8010f0a:	607a      	str	r2, [r7, #4]
 8010f0c:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8010f0e:	bf00      	nop
 8010f10:	4b18      	ldr	r3, [pc, #96]	@ (8010f74 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f003 0301 	and.w	r3, r3, #1
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	bf14      	ite	ne
 8010f1c:	2301      	movne	r3, #1
 8010f1e:	2300      	moveq	r3, #0
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d1f4      	bne.n	8010f10 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8010f26:	4b13      	ldr	r3, [pc, #76]	@ (8010f74 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010f28:	2223      	movs	r2, #35	@ 0x23
 8010f2a:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8010f2c:	4b11      	ldr	r3, [pc, #68]	@ (8010f74 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010f2e:	2202      	movs	r2, #2
 8010f30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	041b      	lsls	r3, r3, #16
 8010f36:	4a0f      	ldr	r2, [pc, #60]	@ (8010f74 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010f38:	f043 0301 	orr.w	r3, r3, #1
 8010f3c:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8010f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8010f74 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8010f44:	4a0b      	ldr	r2, [pc, #44]	@ (8010f74 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8010f4a:	78fb      	ldrb	r3, [r7, #3]
 8010f4c:	061b      	lsls	r3, r3, #24
 8010f4e:	4a09      	ldr	r2, [pc, #36]	@ (8010f74 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010f54:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010f56:	4b07      	ldr	r3, [pc, #28]	@ (8010f74 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010f58:	2202      	movs	r2, #2
 8010f5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8010f5c:	4a05      	ldr	r2, [pc, #20]	@ (8010f74 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8010f62:	4b04      	ldr	r3, [pc, #16]	@ (8010f74 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010f64:	4a04      	ldr	r2, [pc, #16]	@ (8010f78 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x78>)
 8010f66:	601a      	str	r2, [r3, #0]
}
 8010f68:	bf00      	nop
 8010f6a:	3714      	adds	r7, #20
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr
 8010f74:	52001000 	.word	0x52001000
 8010f78:	00020001 	.word	0x00020001

08010f7c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8010f84:	4a04      	ldr	r2, [pc, #16]	@ (8010f98 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6013      	str	r3, [r2, #0]
    }
 8010f8a:	bf00      	nop
 8010f8c:	370c      	adds	r7, #12
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop
 8010f98:	2400665c 	.word	0x2400665c

08010f9c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8010f9c:	b480      	push	{r7}
 8010f9e:	b085      	sub	sp, #20
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	607a      	str	r2, [r7, #4]
 8010fa8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8010faa:	4a0b      	ldr	r2, [pc, #44]	@ (8010fd8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	68ba      	ldr	r2, [r7, #8]
 8010fb4:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	683a      	ldr	r2, [r7, #0]
 8010fc0:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	69ba      	ldr	r2, [r7, #24]
 8010fc6:	611a      	str	r2, [r3, #16]
    {
    }
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3714      	adds	r7, #20
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	0802b908 	.word	0x0802b908

08010fdc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
    {
 8010fe4:	4a04      	ldr	r2, [pc, #16]	@ (8010ff8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	601a      	str	r2, [r3, #0]
    }
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	4618      	mov	r0, r3
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr
 8010ff8:	0802b908 	.word	0x0802b908

08010ffc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b082      	sub	sp, #8
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
    }
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f7ff ffe9 	bl	8010fdc <_ZN8touchgfx7MVPHeapD1Ev>
 801100a:	2114      	movs	r1, #20
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f018 f834 	bl	802907a <_ZdlPvj>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4618      	mov	r0, r3
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
    {
 8011024:	4a04      	ldr	r2, [pc, #16]	@ (8011038 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	601a      	str	r2, [r3, #0]
    }
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4618      	mov	r0, r3
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr
 8011038:	0802c538 	.word	0x0802c538

0801103c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801103c:	b580      	push	{r7, lr}
 801103e:	b082      	sub	sp, #8
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
    }
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f7ff ffe9 	bl	801101c <_ZN8touchgfx3LCDD1Ev>
 801104a:	210c      	movs	r1, #12
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f018 f814 	bl	802907a <_ZdlPvj>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	4618      	mov	r0, r3
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801105c:	b480      	push	{r7}
 801105e:	b083      	sub	sp, #12
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
            : startX(0),
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2200      	movs	r2, #0
 8011068:	801a      	strh	r2, [r3, #0]
              startY(0),
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2200      	movs	r2, #0
 801106e:	805a      	strh	r2, [r3, #2]
              downX(0),
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2200      	movs	r2, #0
 8011074:	809a      	strh	r2, [r3, #4]
              downY(0),
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2200      	movs	r2, #0
 8011080:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2200      	movs	r2, #0
 8011086:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2200      	movs	r2, #0
 801108c:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2200      	movs	r2, #0
 8011092:	739a      	strb	r2, [r3, #14]
        {
        }
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	4618      	mov	r0, r3
 8011098:	370c      	adds	r7, #12
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr

080110a2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80110a2:	b580      	push	{r7, lr}
 80110a4:	b082      	sub	sp, #8
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7ff ffd5 	bl	801105c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2200      	movs	r2, #0
 80110b6:	611a      	str	r2, [r3, #16]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2200      	movs	r2, #0
 80110bc:	829a      	strh	r2, [r3, #20]
    {
    }
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	4618      	mov	r0, r3
 80110c2:	3708      	adds	r7, #8
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	607a      	str	r2, [r7, #4]
 80110d4:	603b      	str	r3, [r7, #0]
          maxBlockLines(20)
 80110d6:	4a65      	ldr	r2, [pc, #404]	@ (801126c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a4>)
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	68ba      	ldr	r2, [r7, #8]
 80110e0:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	683a      	ldr	r2, [r7, #0]
 80110ec:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	2200      	movs	r2, #0
 80110f2:	611a      	str	r2, [r3, #16]
          buttonController(0),
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2200      	movs	r2, #0
 80110f8:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2200      	movs	r2, #0
 80110fe:	619a      	str	r2, [r3, #24]
          gestures(),
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	331c      	adds	r3, #28
 8011104:	4618      	mov	r0, r3
 8011106:	f7ff ffcc 	bl	80110a2 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2200      	movs	r2, #0
 801110e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2200      	movs	r2, #0
 8011116:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2200      	movs	r2, #0
 801111c:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2200      	movs	r2, #0
 8011122:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2200      	movs	r2, #0
 8011128:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2200      	movs	r2, #0
 801112e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	2201      	movs	r2, #1
 8011136:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2200      	movs	r2, #0
 801113e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2200      	movs	r2, #0
 8011146:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2200      	movs	r2, #0
 801114e:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	3350      	adds	r3, #80	@ 0x50
 8011154:	4618      	mov	r0, r3
 8011156:	f7fc ff4a 	bl	800dfee <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2200      	movs	r2, #0
 801115e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2200      	movs	r2, #0
 8011166:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2200      	movs	r2, #0
 801116c:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2200      	movs	r2, #0
 8011172:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2201      	movs	r2, #1
 8011178:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	2200      	movs	r2, #0
 8011180:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	2200      	movs	r2, #0
 8011188:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2201      	movs	r2, #1
 8011190:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2200      	movs	r2, #0
 8011198:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2200      	movs	r2, #0
 80111a0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2200      	movs	r2, #0
 80111a8:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2200      	movs	r2, #0
 80111b0:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2200      	movs	r2, #0
 80111b8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2200      	movs	r2, #0
 80111c0:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2200      	movs	r2, #0
 80111c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2200      	movs	r2, #0
 80111ce:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2201      	movs	r2, #1
 80111d6:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE),
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2201      	movs	r2, #1
 80111de:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
          isFrontPorchEntered(false),
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2200      	movs	r2, #0
 80111e6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          numberOfBlocks(4),
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2204      	movs	r2, #4
 80111ee:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 80111f2:	8bbb      	ldrh	r3, [r7, #28]
 80111f4:	68fa      	ldr	r2, [r7, #12]
 80111f6:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 80111fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80111fe:	b29a      	uxth	r2, r3
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801120c:	4a18      	ldr	r2, [pc, #96]	@ (8011270 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a8>)
 801120e:	fba2 2303 	umull	r2, r3, r2, r3
 8011212:	085b      	lsrs	r3, r3, #1
 8011214:	b29a      	uxth	r2, r3
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
          maxBlockLines(20)
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2214      	movs	r2, #20
 8011220:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
        instance = this;
 8011224:	4a13      	ldr	r2, [pc, #76]	@ (8011274 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1ac>)
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 801122a:	4a13      	ldr	r2, [pc, #76]	@ (8011278 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 801122c:	8b3b      	ldrh	r3, [r7, #24]
 801122e:	8013      	strh	r3, [r2, #0]
 8011230:	4b11      	ldr	r3, [pc, #68]	@ (8011278 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 8011232:	881a      	ldrh	r2, [r3, #0]
 8011234:	4b11      	ldr	r3, [pc, #68]	@ (801127c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b4>)
 8011236:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8011238:	4a11      	ldr	r2, [pc, #68]	@ (8011280 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 801123a:	8bbb      	ldrh	r3, [r7, #28]
 801123c:	8013      	strh	r3, [r2, #0]
 801123e:	4b10      	ldr	r3, [pc, #64]	@ (8011280 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 8011240:	881a      	ldrh	r2, [r3, #0]
 8011242:	4b10      	ldr	r3, [pc, #64]	@ (8011284 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1bc>)
 8011244:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8011246:	4b10      	ldr	r3, [pc, #64]	@ (8011288 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1c0>)
 8011248:	2200      	movs	r2, #0
 801124a:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801124c:	8b3a      	ldrh	r2, [r7, #24]
 801124e:	8bbb      	ldrh	r3, [r7, #28]
 8011250:	429a      	cmp	r2, r3
 8011252:	bf34      	ite	cc
 8011254:	2301      	movcc	r3, #1
 8011256:	2300      	movcs	r3, #0
 8011258:	b2db      	uxtb	r3, r3
 801125a:	461a      	mov	r2, r3
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	4618      	mov	r0, r3
 8011266:	3710      	adds	r7, #16
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	0802bddc 	.word	0x0802bddc
 8011270:	aaaaaaab 	.word	0xaaaaaaab
 8011274:	24006600 	.word	0x24006600
 8011278:	240065f4 	.word	0x240065f4
 801127c:	240065fa 	.word	0x240065fa
 8011280:	240065f6 	.word	0x240065f6
 8011284:	240065fc 	.word	0x240065fc
 8011288:	240065f8 	.word	0x240065f8

0801128c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	6039      	str	r1, [r7, #0]
    {
        app.gotomainScreenNoTransition();
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	4618      	mov	r0, r3
 801129a:	f7fc fc2d 	bl	800daf8 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv>
    }
 801129e:	bf00      	nop
 80112a0:	3708      	adds	r7, #8
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
	...

080112a8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b086      	sub	sp, #24
 80112ac:	af02      	add	r7, sp, #8
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	607a      	str	r2, [r7, #4]
 80112b4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	69bb      	ldr	r3, [r7, #24]
 80112ba:	9300      	str	r3, [sp, #0]
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	68b9      	ldr	r1, [r7, #8]
 80112c2:	f7ff fe6b 	bl	8010f9c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80112c6:	4a04      	ldr	r2, [pc, #16]	@ (80112d8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	601a      	str	r2, [r3, #0]
    {

    }
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	4618      	mov	r0, r3
 80112d0:	3710      	adds	r7, #16
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	0802b8f4 	.word	0x0802b8f4

080112dc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	4a05      	ldr	r2, [pc, #20]	@ (80112fc <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	601a      	str	r2, [r3, #0]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7ff fe75 	bl	8010fdc <_ZN8touchgfx7MVPHeapD1Ev>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	4618      	mov	r0, r3
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	0802b8f4 	.word	0x0802b8f4

08011300 <_ZN16FrontendHeapBaseD0Ev>:
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7ff ffe7 	bl	80112dc <_ZN16FrontendHeapBaseD1Ev>
 801130e:	2114      	movs	r1, #20
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f017 feb2 	bl	802907a <_ZdlPvj>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4618      	mov	r0, r3
 801131a:	3708      	adds	r7, #8
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}

08011320 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	4a05      	ldr	r2, [pc, #20]	@ (8011340 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	601a      	str	r2, [r3, #0]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4618      	mov	r0, r3
 8011332:	f000 fe2c 	bl	8011f8e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4618      	mov	r0, r3
 801133a:	3708      	adds	r7, #8
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	0802b8c0 	.word	0x0802b8c0

08011344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7ff ffe7 	bl	8011320 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011352:	2118      	movs	r1, #24
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f017 fe90 	bl	802907a <_ZdlPvj>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4618      	mov	r0, r3
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	4a05      	ldr	r2, [pc, #20]	@ (8011384 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	601a      	str	r2, [r3, #0]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	4618      	mov	r0, r3
 8011376:	f000 fe0a 	bl	8011f8e <_ZN8touchgfx17AbstractPartitionD1Ev>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4618      	mov	r0, r3
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	0802b88c 	.word	0x0802b88c

08011388 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f7ff ffe7 	bl	8011364 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011396:	f240 5104 	movw	r1, #1284	@ 0x504
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f017 fe6d 	bl	802907a <_ZdlPvj>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4618      	mov	r0, r3
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
	...

080113ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	4a05      	ldr	r2, [pc, #20]	@ (80113cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	601a      	str	r2, [r3, #0]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	4618      	mov	r0, r3
 80113be:	f000 fde6 	bl	8011f8e <_ZN8touchgfx17AbstractPartitionD1Ev>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4618      	mov	r0, r3
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	0802b858 	.word	0x0802b858

080113d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7ff ffe7 	bl	80113ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80113de:	2114      	movs	r1, #20
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f017 fe4a 	bl	802907a <_ZdlPvj>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4618      	mov	r0, r3
 80113ea:	3708      	adds	r7, #8
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	4a10      	ldr	r2, [pc, #64]	@ (801143c <_ZN12FrontendHeapD1Ev+0x4c>)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 8011404:	4618      	mov	r0, r3
 8011406:	f7fe fa13 	bl	800f830 <_ZN19FrontendApplicationD1Ev>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 8011410:	4618      	mov	r0, r3
 8011412:	f7ff ffcb 	bl	80113ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	332c      	adds	r3, #44	@ 0x2c
 801141a:	4618      	mov	r0, r3
 801141c:	f7ff ffa2 	bl	8011364 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	3314      	adds	r3, #20
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff ff7b 	bl	8011320 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	4618      	mov	r0, r3
 801142e:	f7ff ff55 	bl	80112dc <_ZN16FrontendHeapBaseD1Ev>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	4618      	mov	r0, r3
 8011436:	3708      	adds	r7, #8
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	0802b844 	.word	0x0802b844

08011440 <_ZN12FrontendHeapD0Ev>:
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f7ff ffd1 	bl	80113f0 <_ZN12FrontendHeapD1Ev>
 801144e:	f240 61a4 	movw	r1, #1700	@ 0x6a4
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f017 fe11 	bl	802907a <_ZdlPvj>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	4618      	mov	r0, r3
 801145c:	3708      	adds	r7, #8
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
	...

08011464 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8011464:	b580      	push	{r7, lr}
 8011466:	af00      	add	r7, sp, #0
 8011468:	4801      	ldr	r0, [pc, #4]	@ (8011470 <__tcf_0+0xc>)
 801146a:	f7ff ffc1 	bl	80113f0 <_ZN12FrontendHeapD1Ev>
 801146e:	bd80      	pop	{r7, pc}
 8011470:	24005090 	.word	0x24005090

08011474 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8011474:	b580      	push	{r7, lr}
 8011476:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8011478:	4b11      	ldr	r3, [pc, #68]	@ (80114c0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	f3bf 8f5b 	dmb	ish
 8011480:	f003 0301 	and.w	r3, r3, #1
 8011484:	2b00      	cmp	r3, #0
 8011486:	bf0c      	ite	eq
 8011488:	2301      	moveq	r3, #1
 801148a:	2300      	movne	r3, #0
 801148c:	b2db      	uxtb	r3, r3
 801148e:	2b00      	cmp	r3, #0
 8011490:	d013      	beq.n	80114ba <_ZN12FrontendHeap11getInstanceEv+0x46>
 8011492:	480b      	ldr	r0, [pc, #44]	@ (80114c0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8011494:	f7f1 fb5c 	bl	8002b50 <__cxa_guard_acquire>
 8011498:	4603      	mov	r3, r0
 801149a:	2b00      	cmp	r3, #0
 801149c:	bf14      	ite	ne
 801149e:	2301      	movne	r3, #1
 80114a0:	2300      	moveq	r3, #0
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d008      	beq.n	80114ba <_ZN12FrontendHeap11getInstanceEv+0x46>
 80114a8:	4806      	ldr	r0, [pc, #24]	@ (80114c4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80114aa:	f000 f845 	bl	8011538 <_ZN12FrontendHeapC1Ev>
 80114ae:	4806      	ldr	r0, [pc, #24]	@ (80114c8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80114b0:	f017 ffcc 	bl	802944c <atexit>
 80114b4:	4802      	ldr	r0, [pc, #8]	@ (80114c0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80114b6:	f7f1 fbb3 	bl	8002c20 <__cxa_guard_release>
        return instance;
 80114ba:	4b02      	ldr	r3, [pc, #8]	@ (80114c4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 80114bc:	4618      	mov	r0, r3
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	24005734 	.word	0x24005734
 80114c4:	24005090 	.word	0x24005090
 80114c8:	08011465 	.word	0x08011465

080114cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b082      	sub	sp, #8
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	4618      	mov	r0, r3
 80114d8:	f000 fd5a 	bl	8011f90 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80114dc:	4a03      	ldr	r2, [pc, #12]	@ (80114ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	601a      	str	r2, [r3, #0]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4618      	mov	r0, r3
 80114e6:	3708      	adds	r7, #8
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	0802b8c0 	.word	0x0802b8c0

080114f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	4618      	mov	r0, r3
 80114fc:	f000 fd48 	bl	8011f90 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011500:	4a03      	ldr	r2, [pc, #12]	@ (8011510 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	601a      	str	r2, [r3, #0]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	4618      	mov	r0, r3
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	0802b88c 	.word	0x0802b88c

08011514 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	4618      	mov	r0, r3
 8011520:	f000 fd36 	bl	8011f90 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011524:	4a03      	ldr	r2, [pc, #12]	@ (8011534 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	601a      	str	r2, [r3, #0]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4618      	mov	r0, r3
 801152e:	3708      	adds	r7, #8
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	0802b858 	.word	0x0802b858

08011538 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011538:	b590      	push	{r4, r7, lr}
 801153a:	b085      	sub	sp, #20
 801153c:	af02      	add	r7, sp, #8
 801153e:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f103 0114 	add.w	r1, r3, #20
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f503 64a6 	add.w	r4, r3, #1328	@ 0x530
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f203 5344 	addw	r3, r3, #1348	@ 0x544
        app(model, *this)
 801155a:	9300      	str	r3, [sp, #0]
 801155c:	4623      	mov	r3, r4
 801155e:	f7ff fea3 	bl	80112a8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8011562:	4a18      	ldr	r2, [pc, #96]	@ (80115c4 <_ZN12FrontendHeapC1Ev+0x8c>)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	601a      	str	r2, [r3, #0]
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	3314      	adds	r3, #20
 801156c:	4618      	mov	r0, r3
 801156e:	f7ff ffad 	bl	80114cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	332c      	adds	r3, #44	@ 0x2c
 8011576:	4618      	mov	r0, r3
 8011578:	f7ff ffba 	bl	80114f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 8011582:	4618      	mov	r0, r3
 8011584:	f7ff ffc6 	bl	8011514 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f203 5044 	addw	r0, r3, #1348	@ 0x544
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	4619      	mov	r1, r3
 8011598:	f7fe f980 	bl	800f89c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fe fbc4 	bl	800fd30 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 80115b0:	4619      	mov	r1, r3
 80115b2:	4610      	mov	r0, r2
 80115b4:	f7ff fe6a 	bl	801128c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	4618      	mov	r0, r3
 80115bc:	370c      	adds	r7, #12
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd90      	pop	{r4, r7, pc}
 80115c2:	bf00      	nop
 80115c4:	0802b844 	.word	0x0802b844

080115c8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b086      	sub	sp, #24
 80115cc:	af02      	add	r7, sp, #8
 80115ce:	60f8      	str	r0, [r7, #12]
 80115d0:	60b9      	str	r1, [r7, #8]
 80115d2:	607a      	str	r2, [r7, #4]
 80115d4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80115d6:	68f8      	ldr	r0, [r7, #12]
 80115d8:	8bbb      	ldrh	r3, [r7, #28]
 80115da:	9301      	str	r3, [sp, #4]
 80115dc:	8b3b      	ldrh	r3, [r7, #24]
 80115de:	9300      	str	r3, [sp, #0]
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	68b9      	ldr	r1, [r7, #8]
 80115e6:	f7ff fd6f 	bl	80110c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80115ea:	4a04      	ldr	r2, [pc, #16]	@ (80115fc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	601a      	str	r2, [r3, #0]
    }
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	4618      	mov	r0, r3
 80115f4:	3710      	adds	r7, #16
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	0802b918 	.word	0x0802b918

08011600 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8011600:	b580      	push	{r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af02      	add	r7, sp, #8
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	607a      	str	r2, [r7, #4]
 801160c:	603b      	str	r3, [r7, #0]
 801160e:	68f8      	ldr	r0, [r7, #12]
 8011610:	8bbb      	ldrh	r3, [r7, #28]
 8011612:	9301      	str	r3, [sp, #4]
 8011614:	8b3b      	ldrh	r3, [r7, #24]
 8011616:	9300      	str	r3, [sp, #0]
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	68b9      	ldr	r1, [r7, #8]
 801161e:	f7ff ffd3 	bl	80115c8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8011622:	4a04      	ldr	r2, [pc, #16]	@ (8011634 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	601a      	str	r2, [r3, #0]
    }
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	4618      	mov	r0, r3
 801162c:	3710      	adds	r7, #16
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	0802b6e4 	.word	0x0802b6e4

08011638 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8011638:	b480      	push	{r7}
 801163a:	b083      	sub	sp, #12
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
 8011640:	4a04      	ldr	r2, [pc, #16]	@ (8011654 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	601a      	str	r2, [r3, #0]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	4618      	mov	r0, r3
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr
 8011654:	0802b6cc 	.word	0x0802b6cc

08011658 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	4618      	mov	r0, r3
 8011664:	f7ff ffe8 	bl	8011638 <_ZN8touchgfx15TouchControllerC1Ev>
 8011668:	4a03      	ldr	r2, [pc, #12]	@ (8011678 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	601a      	str	r2, [r3, #0]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4618      	mov	r0, r3
 8011672:	3708      	adds	r7, #8
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	0802b6b4 	.word	0x0802b6b4

0801167c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 801167c:	b590      	push	{r4, r7, lr}
 801167e:	b085      	sub	sp, #20
 8011680:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8011682:	f7fd fef3 	bl	800f46c <_ZN14BitmapDatabase11getInstanceEv>
 8011686:	4604      	mov	r4, r0
 8011688:	f7fd fefa 	bl	800f480 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801168c:	4603      	mov	r3, r0
 801168e:	4619      	mov	r1, r3
 8011690:	2300      	movs	r3, #0
 8011692:	9300      	str	r3, [sp, #0]
 8011694:	2300      	movs	r3, #0
 8011696:	2200      	movs	r2, #0
 8011698:	4620      	mov	r0, r4
 801169a:	f009 f99b 	bl	801a9d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801169e:	4809      	ldr	r0, [pc, #36]	@ (80116c4 <touchgfx_init+0x48>)
 80116a0:	f7ff fc6c 	bl	8010f7c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80116a4:	2000      	movs	r0, #0
 80116a6:	f7fe f82f 	bl	800f708 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80116aa:	4807      	ldr	r0, [pc, #28]	@ (80116c8 <touchgfx_init+0x4c>)
 80116ac:	f009 f8fa 	bl	801a8a4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80116b0:	f7ff fee0 	bl	8011474 <_ZN12FrontendHeap11getInstanceEv>
 80116b4:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80116b6:	4805      	ldr	r0, [pc, #20]	@ (80116cc <touchgfx_init+0x50>)
 80116b8:	f7fe fdbc 	bl	8010234 <_ZN11TouchGFXHAL10initializeEv>
}
 80116bc:	bf00      	nop
 80116be:	370c      	adds	r7, #12
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd90      	pop	{r4, r7, pc}
 80116c4:	24006568 	.word	0x24006568
 80116c8:	2400001c 	.word	0x2400001c
 80116cc:	2400656c 	.word	0x2400656c

080116d0 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80116d0:	b480      	push	{r7}
 80116d2:	af00      	add	r7, sp, #0
}
 80116d4:	bf00      	nop
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr
	...

080116e0 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80116e4:	4802      	ldr	r0, [pc, #8]	@ (80116f0 <touchgfx_taskEntry+0x10>)
 80116e6:	f001 fcbc 	bl	8013062 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80116ea:	bf00      	nop
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	2400656c 	.word	0x2400656c

080116f4 <_Z41__static_initialization_and_destruction_0v>:
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af02      	add	r7, sp, #8
static STM32TouchController tc;
 80116fa:	480c      	ldr	r0, [pc, #48]	@ (801172c <_Z41__static_initialization_and_destruction_0v+0x38>)
 80116fc:	f7ff ffac 	bl	8011658 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8011700:	480b      	ldr	r0, [pc, #44]	@ (8011730 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8011702:	f7ff f85f 	bl	80107c4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8011706:	480b      	ldr	r0, [pc, #44]	@ (8011734 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8011708:	f00e fa6c 	bl	801fbe4 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 801170c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8011710:	9301      	str	r3, [sp, #4]
 8011712:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8011716:	9300      	str	r3, [sp, #0]
 8011718:	4b04      	ldr	r3, [pc, #16]	@ (801172c <_Z41__static_initialization_and_destruction_0v+0x38>)
 801171a:	4a06      	ldr	r2, [pc, #24]	@ (8011734 <_Z41__static_initialization_and_destruction_0v+0x40>)
 801171c:	4904      	ldr	r1, [pc, #16]	@ (8011730 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 801171e:	4806      	ldr	r0, [pc, #24]	@ (8011738 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8011720:	f7ff ff6e 	bl	8011600 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8011724:	bf00      	nop
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	24005738 	.word	0x24005738
 8011730:	2400573c 	.word	0x2400573c
 8011734:	240064dc 	.word	0x240064dc
 8011738:	2400656c 	.word	0x2400656c

0801173c <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	4a05      	ldr	r2, [pc, #20]	@ (801175c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	601a      	str	r2, [r3, #0]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	4618      	mov	r0, r3
 801174e:	f7ff fc65 	bl	801101c <_ZN8touchgfx3LCDD1Ev>
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4618      	mov	r0, r3
 8011756:	3708      	adds	r7, #8
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	0802c9c0 	.word	0x0802c9c0

08011760 <_ZN8touchgfx8LCD16bppD0Ev>:
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f7ff ffe7 	bl	801173c <_ZN8touchgfx8LCD16bppD1Ev>
 801176e:	218c      	movs	r1, #140	@ 0x8c
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f017 fc82 	bl	802907a <_ZdlPvj>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	4618      	mov	r0, r3
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <_Z41__static_initialization_and_destruction_1v>:
 8011780:	b580      	push	{r7, lr}
 8011782:	af00      	add	r7, sp, #0
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8011784:	4808      	ldr	r0, [pc, #32]	@ (80117a8 <_Z41__static_initialization_and_destruction_1v+0x28>)
 8011786:	f7fe fe2b 	bl	80103e0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801178a:	4808      	ldr	r0, [pc, #32]	@ (80117ac <_Z41__static_initialization_and_destruction_1v+0x2c>)
 801178c:	f7fb fc7a 	bl	800d084 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8011790:	4807      	ldr	r0, [pc, #28]	@ (80117b0 <_Z41__static_initialization_and_destruction_1v+0x30>)
 8011792:	f7ff ffd3 	bl	801173c <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8011796:	4807      	ldr	r0, [pc, #28]	@ (80117b4 <_Z41__static_initialization_and_destruction_1v+0x34>)
 8011798:	f7ff f83e 	bl	8010818 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801179c:	4806      	ldr	r0, [pc, #24]	@ (80117b8 <_Z41__static_initialization_and_destruction_1v+0x38>)
 801179e:	f7fe fb17 	bl	800fdd0 <_ZN20STM32TouchControllerD1Ev>
}
 80117a2:	bf00      	nop
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	2400656c 	.word	0x2400656c
 80117ac:	2400001c 	.word	0x2400001c
 80117b0:	240064dc 	.word	0x240064dc
 80117b4:	2400573c 	.word	0x2400573c
 80117b8:	24005738 	.word	0x24005738

080117bc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80117bc:	b480      	push	{r7}
 80117be:	b083      	sub	sp, #12
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80117c4:	2301      	movs	r3, #1
    }
 80117c6:	4618      	mov	r0, r3
 80117c8:	370c      	adds	r7, #12
 80117ca:	46bd      	mov	sp, r7
 80117cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d0:	4770      	bx	lr

080117d2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80117d2:	b480      	push	{r7}
 80117d4:	b083      	sub	sp, #12
 80117d6:	af00      	add	r7, sp, #0
 80117d8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80117da:	230c      	movs	r3, #12
    }
 80117dc:	4618      	mov	r0, r3
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	460b      	mov	r3, r1
 80117f2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80117f4:	887a      	ldrh	r2, [r7, #2]
 80117f6:	4613      	mov	r3, r2
 80117f8:	005b      	lsls	r3, r3, #1
 80117fa:	4413      	add	r3, r2
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	3308      	adds	r3, #8
 8011800:	687a      	ldr	r2, [r7, #4]
 8011802:	4413      	add	r3, r2
    }
 8011804:	4618      	mov	r0, r3
 8011806:	370c      	adds	r7, #12
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr

08011810 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	460b      	mov	r3, r1
 801181a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801181c:	887a      	ldrh	r2, [r7, #2]
 801181e:	4613      	mov	r3, r2
 8011820:	005b      	lsls	r3, r3, #1
 8011822:	4413      	add	r3, r2
 8011824:	009b      	lsls	r3, r3, #2
 8011826:	3308      	adds	r3, #8
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	4413      	add	r3, r2
    }
 801182c:	4618      	mov	r0, r3
 801182e:	370c      	adds	r7, #12
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8011838:	b480      	push	{r7}
 801183a:	b083      	sub	sp, #12
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8011840:	2301      	movs	r3, #1
    }
 8011842:	4618      	mov	r0, r3
 8011844:	370c      	adds	r7, #12
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr

0801184e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801184e:	b480      	push	{r7}
 8011850:	b083      	sub	sp, #12
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8011856:	f240 43fc 	movw	r3, #1276	@ 0x4fc
    }
 801185a:	4618      	mov	r0, r3
 801185c:	370c      	adds	r7, #12
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr

08011866 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8011866:	b480      	push	{r7}
 8011868:	b083      	sub	sp, #12
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
 801186e:	460b      	mov	r3, r1
 8011870:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011872:	887b      	ldrh	r3, [r7, #2]
 8011874:	f240 42fc 	movw	r2, #1276	@ 0x4fc
 8011878:	fb02 f303 	mul.w	r3, r2, r3
 801187c:	3308      	adds	r3, #8
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	4413      	add	r3, r2
    }
 8011882:	4618      	mov	r0, r3
 8011884:	370c      	adds	r7, #12
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr

0801188e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801188e:	b480      	push	{r7}
 8011890:	b083      	sub	sp, #12
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
 8011896:	460b      	mov	r3, r1
 8011898:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801189a:	887b      	ldrh	r3, [r7, #2]
 801189c:	f240 42fc 	movw	r2, #1276	@ 0x4fc
 80118a0:	fb02 f303 	mul.w	r3, r2, r3
 80118a4:	3308      	adds	r3, #8
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	4413      	add	r3, r2
    }
 80118aa:	4618      	mov	r0, r3
 80118ac:	370c      	adds	r7, #12
 80118ae:	46bd      	mov	sp, r7
 80118b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b4:	4770      	bx	lr

080118b6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80118b6:	b480      	push	{r7}
 80118b8:	b083      	sub	sp, #12
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80118be:	2301      	movs	r3, #1
    }
 80118c0:	4618      	mov	r0, r3
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80118d4:	2310      	movs	r3, #16
    }
 80118d6:	4618      	mov	r0, r3
 80118d8:	370c      	adds	r7, #12
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr

080118e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80118e2:	b480      	push	{r7}
 80118e4:	b083      	sub	sp, #12
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
 80118ea:	460b      	mov	r3, r1
 80118ec:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80118ee:	887b      	ldrh	r3, [r7, #2]
 80118f0:	011b      	lsls	r3, r3, #4
 80118f2:	3308      	adds	r3, #8
 80118f4:	687a      	ldr	r2, [r7, #4]
 80118f6:	4413      	add	r3, r2
    }
 80118f8:	4618      	mov	r0, r3
 80118fa:	370c      	adds	r7, #12
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr

08011904 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8011904:	b480      	push	{r7}
 8011906:	b083      	sub	sp, #12
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	460b      	mov	r3, r1
 801190e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011910:	887b      	ldrh	r3, [r7, #2]
 8011912:	011b      	lsls	r3, r3, #4
 8011914:	3308      	adds	r3, #8
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	4413      	add	r3, r2
    }
 801191a:	4618      	mov	r0, r3
 801191c:	370c      	adds	r7, #12
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr

08011926 <_GLOBAL__sub_I_touchgfx_init>:
 8011926:	b580      	push	{r7, lr}
 8011928:	af00      	add	r7, sp, #0
 801192a:	f7ff fee3 	bl	80116f4 <_Z41__static_initialization_and_destruction_0v>
 801192e:	bd80      	pop	{r7, pc}

08011930 <_GLOBAL__sub_D_touchgfx_init>:
 8011930:	b580      	push	{r7, lr}
 8011932:	af00      	add	r7, sp, #0
 8011934:	f7ff ff24 	bl	8011780 <_Z41__static_initialization_and_destruction_1v>
 8011938:	bd80      	pop	{r7, pc}

0801193a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801193a:	b580      	push	{r7, lr}
 801193c:	b082      	sub	sp, #8
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	3320      	adds	r3, #32
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	4798      	blx	r3
        isFrontPorchEntered = true;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2201      	movs	r2, #1
 8011952:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    }
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801195e:	b480      	push	{r7}
 8011960:	b083      	sub	sp, #12
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 801196c:	3301      	adds	r3, #1
 801196e:	b2da      	uxtb	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2200      	movs	r2, #0
 801197a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    }
 801197e:	bf00      	nop
 8011980:	370c      	adds	r7, #12
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr
	...

0801198c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	460b      	mov	r3, r1
 8011996:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8011998:	78fb      	ldrb	r3, [r7, #3]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d002      	beq.n	80119a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801199e:	78fb      	ldrb	r3, [r7, #3]
 80119a0:	2b03      	cmp	r3, #3
 80119a2:	d105      	bne.n	80119b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	78fa      	ldrb	r2, [r7, #3]
 80119a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 80119ac:	2301      	movs	r3, #1
 80119ae:	e04a      	b.n	8011a46 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xba>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80119b0:	78fb      	ldrb	r3, [r7, #3]
 80119b2:	2b01      	cmp	r3, #1
 80119b4:	d123      	bne.n	80119fe <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d014      	beq.n	80119e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	33a8      	adds	r3, #168	@ 0xa8
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	4798      	blx	r3
 80119ca:	4603      	mov	r3, r0
 80119cc:	461a      	mov	r2, r3
 80119ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d008      	beq.n	80119e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80119d6:	4b1e      	ldr	r3, [pc, #120]	@ (8011a50 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xc4>)
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	f083 0301 	eor.w	r3, r3, #1
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d001      	beq.n	80119e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80119e4:	2301      	movs	r3, #1
 80119e6:	e000      	b.n	80119ea <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80119e8:	2300      	movs	r3, #0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d005      	beq.n	80119fa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	78fa      	ldrb	r2, [r7, #3]
 80119f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 80119f6:	2301      	movs	r3, #1
 80119f8:	e025      	b.n	8011a46 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xba>
            return false;
 80119fa:	2300      	movs	r3, #0
 80119fc:	e023      	b.n	8011a46 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xba>
        if (s == REFRESH_STRATEGY_PARTIAL_BUFFER_TFT_CTRL)
 80119fe:	78fb      	ldrb	r3, [r7, #3]
 8011a00:	2b02      	cmp	r3, #2
 8011a02:	d11f      	bne.n	8011a44 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xb8>
            if (getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	33a8      	adds	r3, #168	@ 0xa8
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	4798      	blx	r3
 8011a10:	4603      	mov	r3, r0
 8011a12:	461a      	mov	r2, r3
 8011a14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d008      	beq.n	8011a2e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xa2>
 8011a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8011a50 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xc4>)
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	f083 0301 	eor.w	r3, r3, #1
 8011a24:	b2db      	uxtb	r3, r3
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d001      	beq.n	8011a2e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xa2>
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	e000      	b.n	8011a30 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xa4>
 8011a2e:	2300      	movs	r3, #0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d005      	beq.n	8011a40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xb4>
                refreshStrategy = s;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	78fa      	ldrb	r2, [r7, #3]
 8011a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	e002      	b.n	8011a46 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xba>
            return false;
 8011a40:	2300      	movs	r3, #0
 8011a42:	e000      	b.n	8011a46 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xba>
        return false;
 8011a44:	2300      	movs	r3, #0
    }
 8011a46:	4618      	mov	r0, r3
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	240065fe 	.word	0x240065fe

08011a54 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8011a54:	b480      	push	{r7}
 8011a56:	b083      	sub	sp, #12
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	683a      	ldr	r2, [r7, #0]
 8011a62:	639a      	str	r2, [r3, #56]	@ 0x38
    }
 8011a64:	bf00      	nop
 8011a66:	370c      	adds	r7, #12
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr

08011a70 <__NVIC_EnableIRQ>:
{
 8011a70:	b480      	push	{r7}
 8011a72:	b083      	sub	sp, #12
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	4603      	mov	r3, r0
 8011a78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	db0b      	blt.n	8011a9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011a82:	88fb      	ldrh	r3, [r7, #6]
 8011a84:	f003 021f 	and.w	r2, r3, #31
 8011a88:	4907      	ldr	r1, [pc, #28]	@ (8011aa8 <__NVIC_EnableIRQ+0x38>)
 8011a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a8e:	095b      	lsrs	r3, r3, #5
 8011a90:	2001      	movs	r0, #1
 8011a92:	fa00 f202 	lsl.w	r2, r0, r2
 8011a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011a9a:	bf00      	nop
 8011a9c:	370c      	adds	r7, #12
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr
 8011aa6:	bf00      	nop
 8011aa8:	e000e100 	.word	0xe000e100

08011aac <__NVIC_DisableIRQ>:
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	db12      	blt.n	8011ae4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011abe:	88fb      	ldrh	r3, [r7, #6]
 8011ac0:	f003 021f 	and.w	r2, r3, #31
 8011ac4:	490a      	ldr	r1, [pc, #40]	@ (8011af0 <__NVIC_DisableIRQ+0x44>)
 8011ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aca:	095b      	lsrs	r3, r3, #5
 8011acc:	2001      	movs	r0, #1
 8011ace:	fa00 f202 	lsl.w	r2, r0, r2
 8011ad2:	3320      	adds	r3, #32
 8011ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011ad8:	f3bf 8f4f 	dsb	sy
}
 8011adc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011ade:	f3bf 8f6f 	isb	sy
}
 8011ae2:	bf00      	nop
}
 8011ae4:	bf00      	nop
 8011ae6:	370c      	adds	r7, #12
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr
 8011af0:	e000e100 	.word	0xe000e100

08011af4 <__NVIC_SetPriority>:
{
 8011af4:	b480      	push	{r7}
 8011af6:	b083      	sub	sp, #12
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	4603      	mov	r3, r0
 8011afc:	6039      	str	r1, [r7, #0]
 8011afe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	db0a      	blt.n	8011b1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	b2da      	uxtb	r2, r3
 8011b0c:	490c      	ldr	r1, [pc, #48]	@ (8011b40 <__NVIC_SetPriority+0x4c>)
 8011b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b12:	0112      	lsls	r2, r2, #4
 8011b14:	b2d2      	uxtb	r2, r2
 8011b16:	440b      	add	r3, r1
 8011b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8011b1c:	e00a      	b.n	8011b34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	4908      	ldr	r1, [pc, #32]	@ (8011b44 <__NVIC_SetPriority+0x50>)
 8011b24:	88fb      	ldrh	r3, [r7, #6]
 8011b26:	f003 030f 	and.w	r3, r3, #15
 8011b2a:	3b04      	subs	r3, #4
 8011b2c:	0112      	lsls	r2, r2, #4
 8011b2e:	b2d2      	uxtb	r2, r2
 8011b30:	440b      	add	r3, r1
 8011b32:	761a      	strb	r2, [r3, #24]
}
 8011b34:	bf00      	nop
 8011b36:	370c      	adds	r7, #12
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3e:	4770      	bx	lr
 8011b40:	e000e100 	.word	0xe000e100
 8011b44:	e000ed00 	.word	0xe000ed00

08011b48 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8011b48:	b5b0      	push	{r4, r5, r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	4618      	mov	r0, r3
 8011b54:	f001 fa71 	bl	801303a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8011b58:	687d      	ldr	r5, [r7, #4]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	3368      	adds	r3, #104	@ 0x68
 8011b60:	681c      	ldr	r4, [r3, #0]
 8011b62:	f005 fb57 	bl	8017214 <_ZN8touchgfx11Application11getInstanceEv>
 8011b66:	4603      	mov	r3, r0
 8011b68:	4619      	mov	r1, r3
 8011b6a:	4628      	mov	r0, r5
 8011b6c:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	490e      	ldr	r1, [pc, #56]	@ (8011bac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7ff ff6e 	bl	8011a54 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    if (!setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL))
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2101      	movs	r1, #1
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7ff ff05 	bl	801198c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
 8011b82:	4603      	mov	r3, r0
 8011b84:	f083 0301 	eor.w	r3, r3, #1
 8011b88:	b2db      	uxtb	r3, r3
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d001      	beq.n	8011b92 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4a>
    {
        while (1);
 8011b8e:	bf00      	nop
 8011b90:	e7fd      	b.n	8011b8e <_ZN20TouchGFXGeneratedHAL10initializeEv+0x46>
    }
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	338c      	adds	r3, #140	@ 0x8c
 8011b9a:	681c      	ldr	r4, [r3, #0]
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	4903      	ldr	r1, [pc, #12]	@ (8011bb0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 8011ba2:	47a0      	blx	r4
}
 8011ba4:	bf00      	nop
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bdb0      	pop	{r4, r5, r7, pc}
 8011bac:	08010541 	.word	0x08010541
 8011bb0:	d0000000 	.word	0xd0000000

08011bb4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8011bbc:	2109      	movs	r1, #9
 8011bbe:	205a      	movs	r0, #90	@ 0x5a
 8011bc0:	f7ff ff98 	bl	8011af4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8011bc4:	2109      	movs	r1, #9
 8011bc6:	2058      	movs	r0, #88	@ 0x58
 8011bc8:	f7ff ff94 	bl	8011af4 <__NVIC_SetPriority>
}
 8011bcc:	bf00      	nop
 8011bce:	3708      	adds	r7, #8
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8011bdc:	205a      	movs	r0, #90	@ 0x5a
 8011bde:	f7ff ff47 	bl	8011a70 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8011be2:	2058      	movs	r0, #88	@ 0x58
 8011be4:	f7ff ff44 	bl	8011a70 <__NVIC_EnableIRQ>
}
 8011be8:	bf00      	nop
 8011bea:	3708      	adds	r7, #8
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8011bf8:	205a      	movs	r0, #90	@ 0x5a
 8011bfa:	f7ff ff57 	bl	8011aac <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8011bfe:	2058      	movs	r0, #88	@ 0x58
 8011c00:	f7ff ff54 	bl	8011aac <__NVIC_DisableIRQ>
}
 8011c04:	bf00      	nop
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	b083      	sub	sp, #12
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & LTDC_BPCR_AVBP_Msk) - 1;
 8011c14:	4b11      	ldr	r3, [pc, #68]	@ (8011c5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	3b01      	subs	r3, #1
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	4b0e      	ldr	r3, [pc, #56]	@ (8011c60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8011c26:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & LTDC_AWCR_AAH_Msk) - 1;
 8011c28:	4b0c      	ldr	r3, [pc, #48]	@ (8011c5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011c2a:	691b      	ldr	r3, [r3, #16]
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	3b01      	subs	r3, #1
 8011c36:	b29a      	uxth	r2, r3
 8011c38:	4b0a      	ldr	r3, [pc, #40]	@ (8011c64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8011c3a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8011c3c:	4b08      	ldr	r3, [pc, #32]	@ (8011c60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8011c3e:	881a      	ldrh	r2, [r3, #0]
 8011c40:	4b06      	ldr	r3, [pc, #24]	@ (8011c5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011c42:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8011c44:	4b05      	ldr	r3, [pc, #20]	@ (8011c5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011c48:	4a04      	ldr	r2, [pc, #16]	@ (8011c5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011c4a:	f043 0301 	orr.w	r3, r3, #1
 8011c4e:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8011c50:	bf00      	nop
 8011c52:	370c      	adds	r7, #12
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr
 8011c5c:	50001000 	.word	0x50001000
 8011c60:	240065f0 	.word	0x240065f0
 8011c64:	240065f2 	.word	0x240065f2

08011c68 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	4618      	mov	r0, r3
 8011c74:	f001 f9c8 	bl	8013008 <_ZN8touchgfx3HAL10beginFrameEv>
 8011c78:	4603      	mov	r3, r0
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3708      	adds	r7, #8
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}

08011c82 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8011c82:	b580      	push	{r7, lr}
 8011c84:	b082      	sub	sp, #8
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f001 f9c7 	bl	8013020 <_ZN8touchgfx3HAL8endFrameEv>
}
 8011c92:	bf00      	nop
 8011c94:	3708      	adds	r7, #8
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}
	...

08011c9c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8011ca4:	4b03      	ldr	r3, [pc, #12]	@ (8011cb4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8011ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	370c      	adds	r7, #12
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr
 8011cb4:	50001084 	.word	0x50001084

08011cb8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8011cc2:	4a06      	ldr	r2, [pc, #24]	@ (8011cdc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8011cc8:	4b05      	ldr	r3, [pc, #20]	@ (8011ce0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8011cca:	2201      	movs	r2, #1
 8011ccc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8011cce:	bf00      	nop
 8011cd0:	370c      	adds	r7, #12
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd8:	4770      	bx	lr
 8011cda:	bf00      	nop
 8011cdc:	50001084 	.word	0x50001084
 8011ce0:	50001000 	.word	0x50001000

08011ce4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6839      	ldr	r1, [r7, #0]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f001 f951 	bl	8012f9a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8011cf8:	bf00      	nop
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	60f8      	str	r0, [r7, #12]
 8011d08:	60b9      	str	r1, [r7, #8]
 8011d0a:	607a      	str	r2, [r7, #4]
 8011d0c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8011d0e:	68f8      	ldr	r0, [r7, #12]
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	68b9      	ldr	r1, [r7, #8]
 8011d16:	f001 fac4 	bl	80132a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8011d1a:	4603      	mov	r3, r0
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3710      	adds	r7, #16
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}

08011d24 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8011d24:	b480      	push	{r7}
 8011d26:	b085      	sub	sp, #20
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & LTDC_CPSR_CYPOS_Msk);
 8011d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8011d64 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8011d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d30:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & LTDC_BPCR_AVBP_Msk) + 1;
 8011d32:	4b0c      	ldr	r3, [pc, #48]	@ (8011d64 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	3301      	adds	r3, #1
 8011d40:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8011d42:	89fa      	ldrh	r2, [r7, #14]
 8011d44:	89bb      	ldrh	r3, [r7, #12]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d304      	bcc.n	8011d54 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8011d4a:	89fa      	ldrh	r2, [r7, #14]
 8011d4c:	89bb      	ldrh	r3, [r7, #12]
 8011d4e:	1ad3      	subs	r3, r2, r3
 8011d50:	b29b      	uxth	r3, r3
 8011d52:	e000      	b.n	8011d56 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8011d54:	2300      	movs	r3, #0
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3714      	adds	r7, #20
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d60:	4770      	bx	lr
 8011d62:	bf00      	nop
 8011d64:	50001000 	.word	0x50001000

08011d68 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b087      	sub	sp, #28
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8011d70:	4b25      	ldr	r3, [pc, #148]	@ (8011e08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011d72:	695b      	ldr	r3, [r3, #20]
 8011d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	bf14      	ite	ne
 8011d7c:	2301      	movne	r3, #1
 8011d7e:	2300      	moveq	r3, #0
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d03a      	beq.n	8011dfc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8011d86:	4b20      	ldr	r3, [pc, #128]	@ (8011e08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011d88:	2200      	movs	r2, #0
 8011d8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011d8e:	f3bf 8f4f 	dsb	sy
}
 8011d92:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8011d94:	4b1c      	ldr	r3, [pc, #112]	@ (8011e08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d9a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	0b5b      	lsrs	r3, r3, #13
 8011da0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011da4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	08db      	lsrs	r3, r3, #3
 8011daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011dae:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	015a      	lsls	r2, r3, #5
 8011db4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8011db8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8011dba:	68fa      	ldr	r2, [r7, #12]
 8011dbc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011dbe:	4912      	ldr	r1, [pc, #72]	@ (8011e08 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011dc0:	4313      	orrs	r3, r2
 8011dc2:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	1e5a      	subs	r2, r3, #1
 8011dca:	60fa      	str	r2, [r7, #12]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	bf14      	ite	ne
 8011dd0:	2301      	movne	r3, #1
 8011dd2:	2300      	moveq	r3, #0
 8011dd4:	b2db      	uxtb	r3, r3
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d1ea      	bne.n	8011db0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	1e5a      	subs	r2, r3, #1
 8011dde:	613a      	str	r2, [r7, #16]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	bf14      	ite	ne
 8011de4:	2301      	movne	r3, #1
 8011de6:	2300      	moveq	r3, #0
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1db      	bne.n	8011da6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011dee:	f3bf 8f4f 	dsb	sy
}
 8011df2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011df4:	f3bf 8f6f 	isb	sy
}
 8011df8:	bf00      	nop
}
 8011dfa:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8011dfc:	bf00      	nop
 8011dfe:	371c      	adds	r7, #28
 8011e00:	46bd      	mov	sp, r7
 8011e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e06:	4770      	bx	lr
 8011e08:	e000ed00 	.word	0xe000ed00

08011e0c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	b087      	sub	sp, #28
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write-Back cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX in
    // order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8011e14:	4b25      	ldr	r3, [pc, #148]	@ (8011eac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8011e16:	695b      	ldr	r3, [r3, #20]
 8011e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	bf14      	ite	ne
 8011e20:	2301      	movne	r3, #1
 8011e22:	2300      	moveq	r3, #0
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d03a      	beq.n	8011ea0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8011e2a:	4b20      	ldr	r3, [pc, #128]	@ (8011eac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011e32:	f3bf 8f4f 	dsb	sy
}
 8011e36:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8011e38:	4b1c      	ldr	r3, [pc, #112]	@ (8011eac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8011e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e3e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	0b5b      	lsrs	r3, r3, #13
 8011e44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011e48:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	08db      	lsrs	r3, r3, #3
 8011e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011e52:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	015a      	lsls	r2, r3, #5
 8011e58:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8011e5c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8011e5e:	68fa      	ldr	r2, [r7, #12]
 8011e60:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011e62:	4912      	ldr	r1, [pc, #72]	@ (8011eac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8011e64:	4313      	orrs	r3, r2
 8011e66:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	1e5a      	subs	r2, r3, #1
 8011e6e:	60fa      	str	r2, [r7, #12]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	bf14      	ite	ne
 8011e74:	2301      	movne	r3, #1
 8011e76:	2300      	moveq	r3, #0
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d1ea      	bne.n	8011e54 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	1e5a      	subs	r2, r3, #1
 8011e82:	613a      	str	r2, [r7, #16]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	bf14      	ite	ne
 8011e88:	2301      	movne	r3, #1
 8011e8a:	2300      	moveq	r3, #0
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1db      	bne.n	8011e4a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011e92:	f3bf 8f4f 	dsb	sy
}
 8011e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011e98:	f3bf 8f6f 	isb	sy
}
 8011e9c:	bf00      	nop
}
 8011e9e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8011ea0:	bf00      	nop
 8011ea2:	371c      	adds	r7, #28
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr
 8011eac:	e000ed00 	.word	0xe000ed00

08011eb0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8011eb8:	f7fb f9f2 	bl	800d2a0 <_ZN8touchgfx3HAL11getInstanceEv>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	bf0c      	ite	eq
 8011ec2:	2301      	moveq	r3, #1
 8011ec4:	2300      	movne	r3, #0
 8011ec6:	b2db      	uxtb	r3, r3
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d132      	bne.n	8011f32 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8011ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8011f3c <HAL_LTDC_LineEventCallback+0x8c>)
 8011ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8011f40 <HAL_LTDC_LineEventCallback+0x90>)
 8011ed2:	8812      	ldrh	r2, [r2, #0]
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	bf0c      	ite	eq
 8011ed8:	2301      	moveq	r3, #1
 8011eda:	2300      	movne	r3, #0
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d017      	beq.n	8011f12 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8011ee2:	4b18      	ldr	r3, [pc, #96]	@ (8011f44 <HAL_LTDC_LineEventCallback+0x94>)
 8011ee4:	881b      	ldrh	r3, [r3, #0]
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f7f2 f9bf 	bl	800426c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8011eee:	f7fb f9d7 	bl	800d2a0 <_ZN8touchgfx3HAL11getInstanceEv>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7ff fd32 	bl	801195e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8011efa:	f7fe faf9 	bl	80104f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8011efe:	f7fb f9cf 	bl	800d2a0 <_ZN8touchgfx3HAL11getInstanceEv>
 8011f02:	4603      	mov	r3, r0
 8011f04:	4618      	mov	r0, r3
 8011f06:	f001 fe27 	bl	8013b58 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	f7fd ff8a 	bl	800fe24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011f10:	e010      	b.n	8011f34 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8011f12:	4b0b      	ldr	r3, [pc, #44]	@ (8011f40 <HAL_LTDC_LineEventCallback+0x90>)
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	4619      	mov	r1, r3
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7f2 f9a7 	bl	800426c <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8011f1e:	f7fb f9bf 	bl	800d2a0 <_ZN8touchgfx3HAL11getInstanceEv>
 8011f22:	4603      	mov	r3, r0
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7ff fd08 	bl	801193a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8011f2a:	2000      	movs	r0, #0
 8011f2c:	f7fd ff96 	bl	800fe5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011f30:	e000      	b.n	8011f34 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8011f32:	bf00      	nop
        }
    }
 8011f34:	3708      	adds	r7, #8
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	50001000 	.word	0x50001000
 8011f40:	240065f0 	.word	0x240065f0
 8011f44:	240065f2 	.word	0x240065f2

08011f48 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011f48:	8880      	ldrh	r0, [r0, #4]
 8011f4a:	4770      	bx	lr

08011f4c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011f4c:	b570      	push	{r4, r5, r6, lr}
 8011f4e:	6803      	ldr	r3, [r0, #0]
 8011f50:	460c      	mov	r4, r1
 8011f52:	2100      	movs	r1, #0
 8011f54:	4605      	mov	r5, r0
 8011f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f58:	4798      	blx	r3
 8011f5a:	4606      	mov	r6, r0
 8011f5c:	682b      	ldr	r3, [r5, #0]
 8011f5e:	4628      	mov	r0, r5
 8011f60:	1ba4      	subs	r4, r4, r6
 8011f62:	6a1b      	ldr	r3, [r3, #32]
 8011f64:	b2a4      	uxth	r4, r4
 8011f66:	4798      	blx	r3
 8011f68:	fbb4 f0f0 	udiv	r0, r4, r0
 8011f6c:	bd70      	pop	{r4, r5, r6, pc}

08011f6e <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011f6e:	2300      	movs	r3, #0
 8011f70:	8083      	strh	r3, [r0, #4]
 8011f72:	4770      	bx	lr

08011f74 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011f74:	b510      	push	{r4, lr}
 8011f76:	6803      	ldr	r3, [r0, #0]
 8011f78:	4604      	mov	r4, r0
 8011f7a:	8881      	ldrh	r1, [r0, #4]
 8011f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f7e:	4798      	blx	r3
 8011f80:	88a3      	ldrh	r3, [r4, #4]
 8011f82:	3301      	adds	r3, #1
 8011f84:	80a3      	strh	r3, [r4, #4]
 8011f86:	bd10      	pop	{r4, pc}

08011f88 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011f88:	6803      	ldr	r3, [r0, #0]
 8011f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f8c:	4718      	bx	r3

08011f8e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011f8e:	4770      	bx	lr

08011f90 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011f90:	4a02      	ldr	r2, [pc, #8]	@ (8011f9c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8011f92:	6002      	str	r2, [r0, #0]
 8011f94:	2200      	movs	r2, #0
 8011f96:	8082      	strh	r2, [r0, #4]
 8011f98:	4770      	bx	lr
 8011f9a:	bf00      	nop
 8011f9c:	0802ba04 	.word	0x0802ba04

08011fa0 <_ZN8touchgfx9Container13getFirstChildEv>:
 8011fa0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8011fa2:	4770      	bx	lr

08011fa4 <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 8011fa4:	f890 002f 	ldrb.w	r0, [r0, #47]	@ 0x2f
 8011fa8:	4770      	bx	lr

08011faa <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 8011faa:	b510      	push	{r4, lr}
 8011fac:	6803      	ldr	r3, [r0, #0]
 8011fae:	4604      	mov	r4, r0
 8011fb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011fb4:	4798      	blx	r3
 8011fb6:	b110      	cbz	r0, 8011fbe <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x14>
 8011fb8:	4620      	mov	r0, r4
 8011fba:	f7fc f8af 	bl	800e11c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011fbe:	bd10      	pop	{r4, pc}

08011fc0 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8011fc0:	b508      	push	{r3, lr}
 8011fc2:	3034      	adds	r0, #52	@ 0x34
 8011fc4:	f820 1c2c 	strh.w	r1, [r0, #-44]
 8011fc8:	f7fc fb34 	bl	800e634 <_ZN8touchgfx8TextArea8setWidthEs>
 8011fcc:	bd08      	pop	{r3, pc}

08011fce <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8011fce:	b508      	push	{r3, lr}
 8011fd0:	3034      	adds	r0, #52	@ 0x34
 8011fd2:	f820 1c2a 	strh.w	r1, [r0, #-42]
 8011fd6:	f7fc fb4d 	bl	800e674 <_ZN8touchgfx8TextArea9setHeightEs>
 8011fda:	bd08      	pop	{r3, pc}

08011fdc <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8011fdc:	4a11      	ldr	r2, [pc, #68]	@ (8012024 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 8011fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	8812      	ldrh	r2, [r2, #0]
 8011fea:	460d      	mov	r5, r1
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d916      	bls.n	801201e <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 8011ff0:	6802      	ldr	r2, [r0, #0]
 8011ff2:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8011ff6:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 8011ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8012028 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 8011ffa:	6812      	ldr	r2, [r2, #0]
 8011ffc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012000:	4b0a      	ldr	r3, [pc, #40]	@ (801202c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012008:	6803      	ldr	r3, [r0, #0]
 801200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801200c:	4798      	blx	r3
 801200e:	1a2a      	subs	r2, r5, r0
 8012010:	4639      	mov	r1, r7
 8012012:	4620      	mov	r0, r4
 8012014:	4633      	mov	r3, r6
 8012016:	b212      	sxth	r2, r2
 8012018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801201c:	4718      	bx	r3
 801201e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012022:	bf00      	nop
 8012024:	24006654 	.word	0x24006654
 8012028:	24006650 	.word	0x24006650
 801202c:	24006658 	.word	0x24006658

08012030 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8012030:	f880 106a 	strb.w	r1, [r0, #106]	@ 0x6a
 8012034:	4770      	bx	lr

08012036 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8012036:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 801203a:	4770      	bx	lr

0801203c <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 801203c:	b508      	push	{r3, lr}
 801203e:	3034      	adds	r0, #52	@ 0x34
 8012040:	6301      	str	r1, [r0, #48]	@ 0x30
 8012042:	f7fc f86b 	bl	800e11c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8012046:	bd08      	pop	{r3, pc}

08012048 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8012048:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801204a:	4770      	bx	lr

0801204c <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 801204c:	3034      	adds	r0, #52	@ 0x34
 801204e:	f002 bdef 	b.w	8014c30 <_ZNK8touchgfx8TextArea12getTextWidthEv>

08012052 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8012052:	b538      	push	{r3, r4, r5, lr}
 8012054:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8012058:	460d      	mov	r5, r1
 801205a:	4620      	mov	r0, r4
 801205c:	f7fc f85e 	bl	800e11c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8012060:	4620      	mov	r0, r4
 8012062:	4629      	mov	r1, r5
 8012064:	f003 f918 	bl	8015298 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012068:	4620      	mov	r0, r4
 801206a:	f7fc f857 	bl	800e11c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801206e:	bd38      	pop	{r3, r4, r5, pc}

08012070 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8012070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012074:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 8012078:	4604      	mov	r4, r0
 801207a:	4630      	mov	r0, r6
 801207c:	f7fc f84e 	bl	800e11c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8012080:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8012084:	bb0b      	cbnz	r3, 80120ca <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 8012086:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 801208a:	4620      	mov	r0, r4
 801208c:	4a40      	ldr	r2, [pc, #256]	@ (8012190 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 801208e:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 8012092:	4d40      	ldr	r5, [pc, #256]	@ (8012194 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 8012094:	2b00      	cmp	r3, #0
 8012096:	bf08      	it	eq
 8012098:	4615      	moveq	r5, r2
 801209a:	f000 fcc3 	bl	8012a24 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 801209e:	4680      	mov	r8, r0
 80120a0:	4620      	mov	r0, r4
 80120a2:	f000 fcd2 	bl	8012a4a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80120a6:	4681      	mov	r9, r0
 80120a8:	4620      	mov	r0, r4
 80120aa:	f000 fcc7 	bl	8012a3c <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 80120ae:	2800      	cmp	r0, #0
 80120b0:	462a      	mov	r2, r5
 80120b2:	f04f 010c 	mov.w	r1, #12
 80120b6:	bf14      	ite	ne
 80120b8:	2341      	movne	r3, #65	@ 0x41
 80120ba:	2350      	moveq	r3, #80	@ 0x50
 80120bc:	4638      	mov	r0, r7
 80120be:	e9cd 9300 	strd	r9, r3, [sp]
 80120c2:	4643      	mov	r3, r8
 80120c4:	f008 fbe0 	bl	801a888 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80120c8:	e017      	b.n	80120fa <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d11b      	bne.n	8012106 <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 80120ce:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80120d2:	4620      	mov	r0, r4
 80120d4:	4a30      	ldr	r2, [pc, #192]	@ (8012198 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 80120d6:	4d31      	ldr	r5, [pc, #196]	@ (801219c <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 80120d8:	2b00      	cmp	r3, #0
 80120da:	bf08      	it	eq
 80120dc:	4615      	moveq	r5, r2
 80120de:	f000 fc9e 	bl	8012a1e <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 80120e2:	4607      	mov	r7, r0
 80120e4:	4620      	mov	r0, r4
 80120e6:	f000 fcb0 	bl	8012a4a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80120ea:	462a      	mov	r2, r5
 80120ec:	9000      	str	r0, [sp, #0]
 80120ee:	463b      	mov	r3, r7
 80120f0:	210c      	movs	r1, #12
 80120f2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80120f6:	f008 fbc7 	bl	801a888 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80120fa:	4630      	mov	r0, r6
 80120fc:	f7fc f80e 	bl	800e11c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8012100:	b004      	add	sp, #16
 8012102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012106:	2b02      	cmp	r3, #2
 8012108:	d126      	bne.n	8012158 <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 801210a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 801210e:	4620      	mov	r0, r4
 8012110:	4a23      	ldr	r2, [pc, #140]	@ (80121a0 <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 8012112:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 8012116:	4d23      	ldr	r5, [pc, #140]	@ (80121a4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 8012118:	2b00      	cmp	r3, #0
 801211a:	bf08      	it	eq
 801211c:	4615      	moveq	r5, r2
 801211e:	f000 fc81 	bl	8012a24 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8012122:	4680      	mov	r8, r0
 8012124:	4620      	mov	r0, r4
 8012126:	f000 fc90 	bl	8012a4a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 801212a:	4681      	mov	r9, r0
 801212c:	4620      	mov	r0, r4
 801212e:	f000 fc8f 	bl	8012a50 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8012132:	4682      	mov	sl, r0
 8012134:	4620      	mov	r0, r4
 8012136:	f000 fc81 	bl	8012a3c <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 801213a:	2800      	cmp	r0, #0
 801213c:	f8cd 9000 	str.w	r9, [sp]
 8012140:	462a      	mov	r2, r5
 8012142:	bf14      	ite	ne
 8012144:	2341      	movne	r3, #65	@ 0x41
 8012146:	2350      	moveq	r3, #80	@ 0x50
 8012148:	210c      	movs	r1, #12
 801214a:	4638      	mov	r0, r7
 801214c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012150:	4643      	mov	r3, r8
 8012152:	f008 fb99 	bl	801a888 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012156:	e7d0      	b.n	80120fa <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8012158:	2b03      	cmp	r3, #3
 801215a:	d1ce      	bne.n	80120fa <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 801215c:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8012160:	4620      	mov	r0, r4
 8012162:	4a11      	ldr	r2, [pc, #68]	@ (80121a8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 8012164:	4d11      	ldr	r5, [pc, #68]	@ (80121ac <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 8012166:	2b00      	cmp	r3, #0
 8012168:	bf08      	it	eq
 801216a:	4615      	moveq	r5, r2
 801216c:	f000 fc57 	bl	8012a1e <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8012170:	4607      	mov	r7, r0
 8012172:	4620      	mov	r0, r4
 8012174:	f000 fc69 	bl	8012a4a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8012178:	4680      	mov	r8, r0
 801217a:	4620      	mov	r0, r4
 801217c:	f000 fc68 	bl	8012a50 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8012180:	463b      	mov	r3, r7
 8012182:	462a      	mov	r2, r5
 8012184:	210c      	movs	r1, #12
 8012186:	e9cd 8000 	strd	r8, r0, [sp]
 801218a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801218e:	e799      	b.n	80120c4 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 8012190:	0802ba30 	.word	0x0802ba30
 8012194:	0802ba5a 	.word	0x0802ba5a
 8012198:	0802ba3c 	.word	0x0802ba3c
 801219c:	0802ba7a 	.word	0x0802ba7a
 80121a0:	0802ba57 	.word	0x0802ba57
 80121a4:	0802ba44 	.word	0x0802ba44
 80121a8:	0802ba77 	.word	0x0802ba77
 80121ac:	0802ba68 	.word	0x0802ba68

080121b0 <_ZN8touchgfx12DigitalClockC1Ev>:
 80121b0:	b510      	push	{r4, lr}
 80121b2:	4604      	mov	r4, r0
 80121b4:	f000 fc14 	bl	80129e0 <_ZN8touchgfx13AbstractClockC1Ev>
 80121b8:	2201      	movs	r2, #1
 80121ba:	4b21      	ldr	r3, [pc, #132]	@ (8012240 <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 80121bc:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 80121c0:	4620      	mov	r0, r4
 80121c2:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 80121c6:	4a1f      	ldr	r2, [pc, #124]	@ (8012244 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 80121c8:	6023      	str	r3, [r4, #0]
 80121ca:	2303      	movs	r3, #3
 80121cc:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80121ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80121d2:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
 80121d6:	2300      	movs	r3, #0
 80121d8:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 80121dc:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 80121e0:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 80121e4:	4a18      	ldr	r2, [pc, #96]	@ (8012248 <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 80121e6:	66a1      	str	r1, [r4, #104]	@ 0x68
 80121e8:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 80121ec:	6362      	str	r2, [r4, #52]	@ 0x34
 80121ee:	4622      	mov	r2, r4
 80121f0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80121f4:	8723      	strh	r3, [r4, #56]	@ 0x38
 80121f6:	8763      	strh	r3, [r4, #58]	@ 0x3a
 80121f8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 80121fa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80121fc:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8012200:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 8012204:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8012208:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 801220c:	6523      	str	r3, [r4, #80]	@ 0x50
 801220e:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8012212:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 8012216:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 801221a:	6663      	str	r3, [r4, #100]	@ 0x64
 801221c:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8012220:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8012224:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 8012228:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 801222c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801222e:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012232:	f822 3f80 	strh.w	r3, [r2, #128]!
 8012236:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8012238:	f000 fc17 	bl	8012a6a <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801223c:	4620      	mov	r0, r4
 801223e:	bd10      	pop	{r4, pc}
 8012240:	0802bafc 	.word	0x0802bafc
 8012244:	0802b154 	.word	0x0802b154
 8012248:	0802b37c 	.word	0x0802b37c

0801224c <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 801224c:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 8012250:	4770      	bx	lr

08012252 <_ZN8touchgfx11AnalogClock20getAnimationDurationEv>:
 8012252:	f8b0 0324 	ldrh.w	r0, [r0, #804]	@ 0x324
 8012256:	4770      	bx	lr

08012258 <_ZNK8touchgfx11AnalogClock17invalidateContentEv>:
 8012258:	b510      	push	{r4, lr}
 801225a:	6803      	ldr	r3, [r0, #0]
 801225c:	4604      	mov	r4, r0
 801225e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8012262:	4798      	blx	r3
 8012264:	b110      	cbz	r0, 801226c <_ZNK8touchgfx11AnalogClock17invalidateContentEv+0x14>
 8012266:	4620      	mov	r0, r4
 8012268:	f7fb ff58 	bl	800e11c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801226c:	bd10      	pop	{r4, pc}

0801226e <_ZN8touchgfx11AnalogClock17setRotationCenterEss>:
 801226e:	f8a0 1326 	strh.w	r1, [r0, #806]	@ 0x326
 8012272:	f8a0 2328 	strh.w	r2, [r0, #808]	@ 0x328
 8012276:	4770      	bx	lr

08012278 <_ZN8touchgfx11AnalogClock13setupHourHandEtss>:
 8012278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801227a:	6805      	ldr	r5, [r0, #0]
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	4613      	mov	r3, r2
 8012280:	f8d5 50d4 	ldr.w	r5, [r5, #212]	@ 0xd4
 8012284:	460a      	mov	r2, r1
 8012286:	f100 015c 	add.w	r1, r0, #92	@ 0x5c
 801228a:	47a8      	blx	r5
 801228c:	b003      	add	sp, #12
 801228e:	bd30      	pop	{r4, r5, pc}

08012290 <_ZN8touchgfx11AnalogClock15setupMinuteHandEtss>:
 8012290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012292:	6805      	ldr	r5, [r0, #0]
 8012294:	9300      	str	r3, [sp, #0]
 8012296:	4613      	mov	r3, r2
 8012298:	f8d5 50d4 	ldr.w	r5, [r5, #212]	@ 0xd4
 801229c:	460a      	mov	r2, r1
 801229e:	f500 71a4 	add.w	r1, r0, #328	@ 0x148
 80122a2:	47a8      	blx	r5
 80122a4:	b003      	add	sp, #12
 80122a6:	bd30      	pop	{r4, r5, pc}

080122a8 <_ZN8touchgfx11AnalogClock15setupSecondHandEtss>:
 80122a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122aa:	6805      	ldr	r5, [r0, #0]
 80122ac:	9300      	str	r3, [sp, #0]
 80122ae:	4613      	mov	r3, r2
 80122b0:	f8d5 50d4 	ldr.w	r5, [r5, #212]	@ 0xd4
 80122b4:	460a      	mov	r2, r1
 80122b6:	f500 710d 	add.w	r1, r0, #564	@ 0x234
 80122ba:	47a8      	blx	r5
 80122bc:	b003      	add	sp, #12
 80122be:	bd30      	pop	{r4, r5, pc}

080122c0 <_ZN8touchgfx11AnalogClock20initializeTime24HourEhhh>:
 80122c0:	b570      	push	{r4, r5, r6, lr}
 80122c2:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80122c6:	2601      	movs	r6, #1
 80122c8:	4604      	mov	r4, r0
 80122ca:	f8a0 532a 	strh.w	r5, [r0, #810]	@ 0x32a
 80122ce:	f880 532c 	strb.w	r5, [r0, #812]	@ 0x32c
 80122d2:	f8b0 5324 	ldrh.w	r5, [r0, #804]	@ 0x324
 80122d6:	f8a0 6324 	strh.w	r6, [r0, #804]	@ 0x324
 80122da:	6806      	ldr	r6, [r0, #0]
 80122dc:	f8d6 6088 	ldr.w	r6, [r6, #136]	@ 0x88
 80122e0:	47b0      	blx	r6
 80122e2:	f8a4 5324 	strh.w	r5, [r4, #804]	@ 0x324
 80122e6:	bd70      	pop	{r4, r5, r6, pc}

080122e8 <_ZN8touchgfx11AnalogClock20initializeTime12HourEhhhb>:
 80122e8:	b4f0      	push	{r4, r5, r6, r7}
 80122ea:	6804      	ldr	r4, [r0, #0]
 80122ec:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80122f0:	f8d4 50c4 	ldr.w	r5, [r4, #196]	@ 0xc4
 80122f4:	240c      	movs	r4, #12
 80122f6:	2e00      	cmp	r6, #0
 80122f8:	46ac      	mov	ip, r5
 80122fa:	fbb1 f7f4 	udiv	r7, r1, r4
 80122fe:	fb07 1114 	mls	r1, r7, r4, r1
 8012302:	bf18      	it	ne
 8012304:	2400      	movne	r4, #0
 8012306:	fa54 f181 	uxtab	r1, r4, r1
 801230a:	bcf0      	pop	{r4, r5, r6, r7}
 801230c:	b2c9      	uxtb	r1, r1
 801230e:	4760      	bx	ip

08012310 <_ZN8touchgfx11AnalogClock8setAlphaEh>:
 8012310:	f880 1058 	strb.w	r1, [r0, #88]	@ 0x58
 8012314:	f880 1084 	strb.w	r1, [r0, #132]	@ 0x84
 8012318:	f880 1170 	strb.w	r1, [r0, #368]	@ 0x170
 801231c:	f880 125c 	strb.w	r1, [r0, #604]	@ 0x25c
 8012320:	4770      	bx	lr

08012322 <_ZNK8touchgfx11AnalogClock8getAlphaEv>:
 8012322:	f890 0058 	ldrb.w	r0, [r0, #88]	@ 0x58
 8012326:	4770      	bx	lr

08012328 <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh>:
 8012328:	ee07 1a90 	vmov	s15, r1
 801232c:	ee07 3a10 	vmov	s14, r3
 8012330:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8012368 <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh+0x40>
 8012334:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8012338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801233c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012340:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012344:	ee86 0a87 	vdiv.f32	s0, s13, s14
 8012348:	ee07 2a10 	vmov	s14, r2
 801234c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8012350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012354:	eddf 7a05 	vldr	s15, [pc, #20]	@ 801236c <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh+0x44>
 8012358:	ee30 0a07 	vadd.f32	s0, s0, s14
 801235c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012360:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	42700000 	.word	0x42700000
 801236c:	40490fdb 	.word	0x40490fdb

08012370 <_ZNK8touchgfx11AnalogClock27getHourHandMinuteCorrectionEv>:
 8012370:	f890 032d 	ldrb.w	r0, [r0, #813]	@ 0x32d
 8012374:	4770      	bx	lr

08012376 <_ZNK8touchgfx11AnalogClock29getMinuteHandSecondCorrectionEv>:
 8012376:	f890 032e 	ldrb.w	r0, [r0, #814]	@ 0x32e
 801237a:	4770      	bx	lr

0801237c <_ZNK8touchgfx11AnalogClock16animationEnabledEv>:
 801237c:	f8b0 0324 	ldrh.w	r0, [r0, #804]	@ 0x324
 8012380:	2801      	cmp	r0, #1
 8012382:	bf94      	ite	ls
 8012384:	2000      	movls	r0, #0
 8012386:	2001      	movhi	r0, #1
 8012388:	4770      	bx	lr

0801238a <_ZN8touchgfx11AnalogClock12setAnimationEtPFstsstE>:
 801238a:	f8a0 1324 	strh.w	r1, [r0, #804]	@ 0x324
 801238e:	f8c0 2320 	str.w	r2, [r0, #800]	@ 0x320
 8012392:	4770      	bx	lr

08012394 <_ZN8touchgfx11AnalogClock13setBackgroundEt>:
 8012394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012396:	4606      	mov	r6, r0
 8012398:	6803      	ldr	r3, [r0, #0]
 801239a:	a802      	add	r0, sp, #8
 801239c:	460c      	mov	r4, r1
 801239e:	f8d3 7098 	ldr.w	r7, [r3, #152]	@ 0x98
 80123a2:	f820 1d08 	strh.w	r1, [r0, #-8]!
 80123a6:	f008 fb29 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80123aa:	4605      	mov	r5, r0
 80123ac:	a802      	add	r0, sp, #8
 80123ae:	f820 4d04 	strh.w	r4, [r0, #-4]!
 80123b2:	f008 fb57 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80123b6:	2202      	movs	r2, #2
 80123b8:	4621      	mov	r1, r4
 80123ba:	fb90 f3f2 	sdiv	r3, r0, r2
 80123be:	fb95 f2f2 	sdiv	r2, r5, r2
 80123c2:	b21b      	sxth	r3, r3
 80123c4:	4630      	mov	r0, r6
 80123c6:	b212      	sxth	r2, r2
 80123c8:	47b8      	blx	r7
 80123ca:	b003      	add	sp, #12
 80123cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080123ce <_ZN8touchgfx11AnalogClock27setHourHandMinuteCorrectionEb>:
 80123ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d2:	4604      	mov	r4, r0
 80123d4:	6803      	ldr	r3, [r0, #0]
 80123d6:	f880 132d 	strb.w	r1, [r0, #813]	@ 0x32d
 80123da:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80123de:	f000 fb1b 	bl	8012a18 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 80123e2:	4606      	mov	r6, r0
 80123e4:	4620      	mov	r0, r4
 80123e6:	f000 fb30 	bl	8012a4a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80123ea:	4607      	mov	r7, r0
 80123ec:	4620      	mov	r0, r4
 80123ee:	f000 fb2f 	bl	8012a50 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 80123f2:	463a      	mov	r2, r7
 80123f4:	4603      	mov	r3, r0
 80123f6:	4631      	mov	r1, r6
 80123f8:	4620      	mov	r0, r4
 80123fa:	46ac      	mov	ip, r5
 80123fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012400:	4760      	bx	ip

08012402 <_ZN8touchgfx11AnalogClock29setMinuteHandSecondCorrectionEb>:
 8012402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012406:	4604      	mov	r4, r0
 8012408:	6803      	ldr	r3, [r0, #0]
 801240a:	f880 132e 	strb.w	r1, [r0, #814]	@ 0x32e
 801240e:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8012412:	f000 fb01 	bl	8012a18 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 8012416:	4606      	mov	r6, r0
 8012418:	4620      	mov	r0, r4
 801241a:	f000 fb16 	bl	8012a4a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 801241e:	4607      	mov	r7, r0
 8012420:	4620      	mov	r0, r4
 8012422:	f000 fb15 	bl	8012a50 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8012426:	463a      	mov	r2, r7
 8012428:	4603      	mov	r3, r0
 801242a:	4631      	mov	r1, r6
 801242c:	4620      	mov	r0, r4
 801242e:	46ac      	mov	ip, r5
 8012430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012434:	4760      	bx	ip
	...

08012438 <_ZN8touchgfx11AnalogClock9setupHandERNS_13TextureMapperEtss>:
 8012438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801243a:	461f      	mov	r7, r3
 801243c:	460c      	mov	r4, r1
 801243e:	4605      	mov	r5, r0
 8012440:	4616      	mov	r6, r2
 8012442:	ed2d 8b02 	vpush	{d8}
 8012446:	6803      	ldr	r3, [r0, #0]
 8012448:	b083      	sub	sp, #12
 801244a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801244c:	4798      	blx	r3
 801244e:	a902      	add	r1, sp, #8
 8012450:	6823      	ldr	r3, [r4, #0]
 8012452:	4620      	mov	r0, r4
 8012454:	f821 6d04 	strh.w	r6, [r1, #-4]!
 8012458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801245a:	4798      	blx	r3
 801245c:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 8012460:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012464:	4620      	mov	r0, r4
 8012466:	f7fb ff12 	bl	800e28e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801246a:	6823      	ldr	r3, [r4, #0]
 801246c:	4620      	mov	r0, r4
 801246e:	2100      	movs	r1, #0
 8012470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012472:	4798      	blx	r3
 8012474:	6823      	ldr	r3, [r4, #0]
 8012476:	4620      	mov	r0, r4
 8012478:	2100      	movs	r1, #0
 801247a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801247c:	4798      	blx	r3
 801247e:	6823      	ldr	r3, [r4, #0]
 8012480:	f9b5 2328 	ldrsh.w	r2, [r5, #808]	@ 0x328
 8012484:	4620      	mov	r0, r4
 8012486:	f9b5 1326 	ldrsh.w	r1, [r5, #806]	@ 0x326
 801248a:	f8d3 60d0 	ldr.w	r6, [r3, #208]	@ 0xd0
 801248e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8012492:	1bc9      	subs	r1, r1, r7
 8012494:	1ad2      	subs	r2, r2, r3
 8012496:	47b0      	blx	r6
 8012498:	6823      	ldr	r3, [r4, #0]
 801249a:	4620      	mov	r0, r4
 801249c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8012528 <_ZN8touchgfx11AnalogClock9setupHandERNS_13TextureMapperEtss+0xf0>
 80124a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80124a4:	4798      	blx	r3
 80124a6:	f9b5 2326 	ldrsh.w	r2, [r5, #806]	@ 0x326
 80124aa:	6823      	ldr	r3, [r4, #0]
 80124ac:	4620      	mov	r0, r4
 80124ae:	ee08 2a10 	vmov	s16, r2
 80124b2:	f9b5 2328 	ldrsh.w	r2, [r5, #808]	@ 0x328
 80124b6:	f8d3 60a4 	ldr.w	r6, [r3, #164]	@ 0xa4
 80124ba:	ee08 2a90 	vmov	s17, r2
 80124be:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80124c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80124c6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80124ca:	4798      	blx	r3
 80124cc:	4620      	mov	r0, r4
 80124ce:	eeb0 1a40 	vmov.f32	s2, s0
 80124d2:	eeb0 0a48 	vmov.f32	s0, s16
 80124d6:	eef0 0a68 	vmov.f32	s1, s17
 80124da:	47b0      	blx	r6
 80124dc:	6823      	ldr	r3, [r4, #0]
 80124de:	4620      	mov	r0, r4
 80124e0:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 80124e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80124e8:	4798      	blx	r3
 80124ea:	6823      	ldr	r3, [r4, #0]
 80124ec:	eeb0 8a40 	vmov.f32	s16, s0
 80124f0:	4620      	mov	r0, r4
 80124f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80124f6:	4798      	blx	r3
 80124f8:	4620      	mov	r0, r4
 80124fa:	eef0 0a40 	vmov.f32	s1, s0
 80124fe:	eeb0 0a48 	vmov.f32	s0, s16
 8012502:	47b0      	blx	r6
 8012504:	6823      	ldr	r3, [r4, #0]
 8012506:	4620      	mov	r0, r4
 8012508:	2101      	movs	r1, #1
 801250a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801250c:	4798      	blx	r3
 801250e:	682b      	ldr	r3, [r5, #0]
 8012510:	4621      	mov	r1, r4
 8012512:	4628      	mov	r0, r5
 8012514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012516:	4798      	blx	r3
 8012518:	2301      	movs	r3, #1
 801251a:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 801251e:	b003      	add	sp, #12
 8012520:	ecbd 8b02 	vpop	{d8}
 8012524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012526:	bf00      	nop
 8012528:	43960000 	.word	0x43960000

0801252c <_ZN8touchgfx11AnalogClock13setBackgroundEtss>:
 801252c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801252e:	4616      	mov	r6, r2
 8012530:	aa02      	add	r2, sp, #8
 8012532:	4604      	mov	r4, r0
 8012534:	3030      	adds	r0, #48	@ 0x30
 8012536:	f822 1d04 	strh.w	r1, [r2, #-4]!
 801253a:	4611      	mov	r1, r2
 801253c:	461f      	mov	r7, r3
 801253e:	f003 f813 	bl	8015568 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012542:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	@ 0x3a
 8012546:	4620      	mov	r0, r4
 8012548:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 801254c:	f7fb fe9f 	bl	800e28e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012550:	6823      	ldr	r3, [r4, #0]
 8012552:	463a      	mov	r2, r7
 8012554:	4631      	mov	r1, r6
 8012556:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 801255a:	4620      	mov	r0, r4
 801255c:	47a8      	blx	r5
 801255e:	b003      	add	sp, #12
 8012560:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012562 <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 8012562:	6802      	ldr	r2, [r0, #0]
 8012564:	eeb0 1a40 	vmov.f32	s2, s0
 8012568:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 801256c:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 801256e:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8012572:	4710      	bx	r2

08012574 <_ZN8touchgfx11AnalogClock11updateClockEv>:
 8012574:	b530      	push	{r4, r5, lr}
 8012576:	ed2d 8b02 	vpush	{d8}
 801257a:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 801257e:	b083      	sub	sp, #12
 8012580:	4604      	mov	r4, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	f000 8085 	beq.w	8012692 <_ZN8touchgfx11AnalogClock11updateClockEv+0x11e>
 8012588:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801258c:	200c      	movs	r0, #12
 801258e:	f894 532a 	ldrb.w	r5, [r4, #810]	@ 0x32a
 8012592:	fbb3 f2f0 	udiv	r2, r3, r0
 8012596:	fbb5 f1f0 	udiv	r1, r5, r0
 801259a:	fb00 3212 	mls	r2, r0, r2, r3
 801259e:	f894 332d 	ldrb.w	r3, [r4, #813]	@ 0x32d
 80125a2:	fb00 5111 	mls	r1, r0, r1, r5
 80125a6:	b2d2      	uxtb	r2, r2
 80125a8:	b2c9      	uxtb	r1, r1
 80125aa:	428a      	cmp	r2, r1
 80125ac:	d107      	bne.n	80125be <_ZN8touchgfx11AnalogClock11updateClockEv+0x4a>
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d06f      	beq.n	8012692 <_ZN8touchgfx11AnalogClock11updateClockEv+0x11e>
 80125b2:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80125b6:	f894 132b 	ldrb.w	r1, [r4, #811]	@ 0x32b
 80125ba:	4288      	cmp	r0, r1
 80125bc:	d069      	beq.n	8012692 <_ZN8touchgfx11AnalogClock11updateClockEv+0x11e>
 80125be:	6821      	ldr	r1, [r4, #0]
 80125c0:	f8d1 50d8 	ldr.w	r5, [r1, #216]	@ 0xd8
 80125c4:	b10b      	cbz	r3, 80125ca <_ZN8touchgfx11AnalogClock11updateClockEv+0x56>
 80125c6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80125ca:	210c      	movs	r1, #12
 80125cc:	4620      	mov	r0, r4
 80125ce:	47a8      	blx	r5
 80125d0:	f894 232a 	ldrb.w	r2, [r4, #810]	@ 0x32a
 80125d4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80125d8:	210c      	movs	r1, #12
 80125da:	eeb0 8a40 	vmov.f32	s16, s0
 80125de:	ed94 0a26 	vldr	s0, [r4, #152]	@ 0x98
 80125e2:	1a9b      	subs	r3, r3, r2
 80125e4:	f103 021e 	add.w	r2, r3, #30
 80125e8:	fb92 f3f1 	sdiv	r3, r2, r1
 80125ec:	fb01 2313 	mls	r3, r1, r3, r2
 80125f0:	3b06      	subs	r3, #6
 80125f2:	b21b      	sxth	r3, r3
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	dd28      	ble.n	801264a <_ZN8touchgfx11AnalogClock11updateClockEv+0xd6>
 80125f8:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80125fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012600:	d50c      	bpl.n	801261c <_ZN8touchgfx11AnalogClock11updateClockEv+0xa8>
 8012602:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8012894 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 8012606:	ee30 0a67 	vsub.f32	s0, s0, s15
 801260a:	eeb4 8ac0 	vcmpe.f32	s16, s0
 801260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012612:	d4f8      	bmi.n	8012606 <_ZN8touchgfx11AnalogClock11updateClockEv+0x92>
 8012614:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8012618:	f7ff ffa3 	bl	8012562 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 801261c:	6823      	ldr	r3, [r4, #0]
 801261e:	4620      	mov	r0, r4
 8012620:	f104 055c 	add.w	r5, r4, #92	@ 0x5c
 8012624:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012628:	4798      	blx	r3
 801262a:	b9f0      	cbnz	r0, 801266a <_ZN8touchgfx11AnalogClock11updateClockEv+0xf6>
 801262c:	6823      	ldr	r3, [r4, #0]
 801262e:	4620      	mov	r0, r4
 8012630:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012634:	4798      	blx	r3
 8012636:	b110      	cbz	r0, 801263e <_ZN8touchgfx11AnalogClock11updateClockEv+0xca>
 8012638:	4628      	mov	r0, r5
 801263a:	f001 fcd4 	bl	8013fe6 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 801263e:	eeb0 0a48 	vmov.f32	s0, s16
 8012642:	4628      	mov	r0, r5
 8012644:	f7ff ff8d 	bl	8012562 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8012648:	e023      	b.n	8012692 <_ZN8touchgfx11AnalogClock11updateClockEv+0x11e>
 801264a:	d0e7      	beq.n	801261c <_ZN8touchgfx11AnalogClock11updateClockEv+0xa8>
 801264c:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8012650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012654:	dde2      	ble.n	801261c <_ZN8touchgfx11AnalogClock11updateClockEv+0xa8>
 8012656:	eddf 7a8f 	vldr	s15, [pc, #572]	@ 8012894 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 801265a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801265e:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8012662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012666:	dcf8      	bgt.n	801265a <_ZN8touchgfx11AnalogClock11updateClockEv+0xe6>
 8012668:	e7d4      	b.n	8012614 <_ZN8touchgfx11AnalogClock11updateClockEv+0xa0>
 801266a:	4628      	mov	r0, r5
 801266c:	f001 fc71 	bl	8013f52 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 8012670:	4603      	mov	r3, r0
 8012672:	2800      	cmp	r0, #0
 8012674:	d1da      	bne.n	801262c <_ZN8touchgfx11AnalogClock11updateClockEv+0xb8>
 8012676:	f8d4 1320 	ldr.w	r1, [r4, #800]	@ 0x320
 801267a:	4628      	mov	r0, r5
 801267c:	f8b4 2324 	ldrh.w	r2, [r4, #804]	@ 0x324
 8012680:	eeb0 0a48 	vmov.f32	s0, s16
 8012684:	9100      	str	r1, [sp, #0]
 8012686:	2102      	movs	r1, #2
 8012688:	f001 fc66 	bl	8013f58 <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 801268c:	4628      	mov	r0, r5
 801268e:	f001 fc77 	bl	8013f80 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 8012692:	f894 316d 	ldrb.w	r3, [r4, #365]	@ 0x16d
 8012696:	2b00      	cmp	r3, #0
 8012698:	d079      	beq.n	801278e <_ZN8touchgfx11AnalogClock11updateClockEv+0x21a>
 801269a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801269e:	f894 132b 	ldrb.w	r1, [r4, #811]	@ 0x32b
 80126a2:	f894 332e 	ldrb.w	r3, [r4, #814]	@ 0x32e
 80126a6:	4291      	cmp	r1, r2
 80126a8:	d107      	bne.n	80126ba <_ZN8touchgfx11AnalogClock11updateClockEv+0x146>
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d06f      	beq.n	801278e <_ZN8touchgfx11AnalogClock11updateClockEv+0x21a>
 80126ae:	f894 032c 	ldrb.w	r0, [r4, #812]	@ 0x32c
 80126b2:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 80126b6:	4288      	cmp	r0, r1
 80126b8:	d069      	beq.n	801278e <_ZN8touchgfx11AnalogClock11updateClockEv+0x21a>
 80126ba:	6821      	ldr	r1, [r4, #0]
 80126bc:	f8d1 50d8 	ldr.w	r5, [r1, #216]	@ 0xd8
 80126c0:	b10b      	cbz	r3, 80126c6 <_ZN8touchgfx11AnalogClock11updateClockEv+0x152>
 80126c2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80126c6:	213c      	movs	r1, #60	@ 0x3c
 80126c8:	4620      	mov	r0, r4
 80126ca:	47a8      	blx	r5
 80126cc:	f894 232b 	ldrb.w	r2, [r4, #811]	@ 0x32b
 80126d0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80126d4:	213c      	movs	r1, #60	@ 0x3c
 80126d6:	eeb0 8a40 	vmov.f32	s16, s0
 80126da:	ed94 0a61 	vldr	s0, [r4, #388]	@ 0x184
 80126de:	1a9b      	subs	r3, r3, r2
 80126e0:	f103 025a 	add.w	r2, r3, #90	@ 0x5a
 80126e4:	fb92 f3f1 	sdiv	r3, r2, r1
 80126e8:	fb01 2313 	mls	r3, r1, r3, r2
 80126ec:	3b1e      	subs	r3, #30
 80126ee:	b21b      	sxth	r3, r3
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	dd28      	ble.n	8012746 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1d2>
 80126f4:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80126f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126fc:	dd0c      	ble.n	8012718 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1a4>
 80126fe:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8012894 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 8012702:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012706:	eeb4 8ac0 	vcmpe.f32	s16, s0
 801270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801270e:	d4f8      	bmi.n	8012702 <_ZN8touchgfx11AnalogClock11updateClockEv+0x18e>
 8012710:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 8012714:	f7ff ff25 	bl	8012562 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8012718:	6823      	ldr	r3, [r4, #0]
 801271a:	4620      	mov	r0, r4
 801271c:	f504 75a4 	add.w	r5, r4, #328	@ 0x148
 8012720:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012724:	4798      	blx	r3
 8012726:	b9f0      	cbnz	r0, 8012766 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1f2>
 8012728:	6823      	ldr	r3, [r4, #0]
 801272a:	4620      	mov	r0, r4
 801272c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012730:	4798      	blx	r3
 8012732:	b110      	cbz	r0, 801273a <_ZN8touchgfx11AnalogClock11updateClockEv+0x1c6>
 8012734:	4628      	mov	r0, r5
 8012736:	f001 fc56 	bl	8013fe6 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 801273a:	eeb0 0a48 	vmov.f32	s0, s16
 801273e:	4628      	mov	r0, r5
 8012740:	f7ff ff0f 	bl	8012562 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8012744:	e023      	b.n	801278e <_ZN8touchgfx11AnalogClock11updateClockEv+0x21a>
 8012746:	d0e7      	beq.n	8012718 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1a4>
 8012748:	eeb4 0ac8 	vcmpe.f32	s0, s16
 801274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012750:	d5e2      	bpl.n	8012718 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1a4>
 8012752:	eddf 7a50 	vldr	s15, [pc, #320]	@ 8012894 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 8012756:	ee30 0a27 	vadd.f32	s0, s0, s15
 801275a:	eeb4 8ac0 	vcmpe.f32	s16, s0
 801275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012762:	dcf8      	bgt.n	8012756 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1e2>
 8012764:	e7d4      	b.n	8012710 <_ZN8touchgfx11AnalogClock11updateClockEv+0x19c>
 8012766:	4628      	mov	r0, r5
 8012768:	f001 fbf3 	bl	8013f52 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 801276c:	4603      	mov	r3, r0
 801276e:	2800      	cmp	r0, #0
 8012770:	d1da      	bne.n	8012728 <_ZN8touchgfx11AnalogClock11updateClockEv+0x1b4>
 8012772:	f8d4 1320 	ldr.w	r1, [r4, #800]	@ 0x320
 8012776:	4628      	mov	r0, r5
 8012778:	f8b4 2324 	ldrh.w	r2, [r4, #804]	@ 0x324
 801277c:	eeb0 0a48 	vmov.f32	s0, s16
 8012780:	9100      	str	r1, [sp, #0]
 8012782:	2102      	movs	r1, #2
 8012784:	f001 fbe8 	bl	8013f58 <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 8012788:	4628      	mov	r0, r5
 801278a:	f001 fbf9 	bl	8013f80 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 801278e:	f894 3259 	ldrb.w	r3, [r4, #601]	@ 0x259
 8012792:	2b00      	cmp	r3, #0
 8012794:	d06d      	beq.n	8012872 <_ZN8touchgfx11AnalogClock11updateClockEv+0x2fe>
 8012796:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 801279a:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 801279e:	4293      	cmp	r3, r2
 80127a0:	d067      	beq.n	8012872 <_ZN8touchgfx11AnalogClock11updateClockEv+0x2fe>
 80127a2:	6823      	ldr	r3, [r4, #0]
 80127a4:	213c      	movs	r1, #60	@ 0x3c
 80127a6:	4620      	mov	r0, r4
 80127a8:	f8d3 50d8 	ldr.w	r5, [r3, #216]	@ 0xd8
 80127ac:	2300      	movs	r3, #0
 80127ae:	47a8      	blx	r5
 80127b0:	f894 232c 	ldrb.w	r2, [r4, #812]	@ 0x32c
 80127b4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80127b8:	213c      	movs	r1, #60	@ 0x3c
 80127ba:	eeb0 8a40 	vmov.f32	s16, s0
 80127be:	ed94 0a9c 	vldr	s0, [r4, #624]	@ 0x270
 80127c2:	1a9b      	subs	r3, r3, r2
 80127c4:	f103 025a 	add.w	r2, r3, #90	@ 0x5a
 80127c8:	fb92 f3f1 	sdiv	r3, r2, r1
 80127cc:	fb01 2313 	mls	r3, r1, r3, r2
 80127d0:	3b1e      	subs	r3, #30
 80127d2:	b21b      	sxth	r3, r3
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	dd28      	ble.n	801282a <_ZN8touchgfx11AnalogClock11updateClockEv+0x2b6>
 80127d8:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80127dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e0:	dd0c      	ble.n	80127fc <_ZN8touchgfx11AnalogClock11updateClockEv+0x288>
 80127e2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8012894 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 80127e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80127ea:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80127ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f2:	d4f8      	bmi.n	80127e6 <_ZN8touchgfx11AnalogClock11updateClockEv+0x272>
 80127f4:	f504 700d 	add.w	r0, r4, #564	@ 0x234
 80127f8:	f7ff feb3 	bl	8012562 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80127fc:	6823      	ldr	r3, [r4, #0]
 80127fe:	4620      	mov	r0, r4
 8012800:	f504 750d 	add.w	r5, r4, #564	@ 0x234
 8012804:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012808:	4798      	blx	r3
 801280a:	b9f0      	cbnz	r0, 801284a <_ZN8touchgfx11AnalogClock11updateClockEv+0x2d6>
 801280c:	6823      	ldr	r3, [r4, #0]
 801280e:	4620      	mov	r0, r4
 8012810:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8012814:	4798      	blx	r3
 8012816:	b110      	cbz	r0, 801281e <_ZN8touchgfx11AnalogClock11updateClockEv+0x2aa>
 8012818:	4628      	mov	r0, r5
 801281a:	f001 fbe4 	bl	8013fe6 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 801281e:	eeb0 0a48 	vmov.f32	s0, s16
 8012822:	4628      	mov	r0, r5
 8012824:	f7ff fe9d 	bl	8012562 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8012828:	e023      	b.n	8012872 <_ZN8touchgfx11AnalogClock11updateClockEv+0x2fe>
 801282a:	d0e7      	beq.n	80127fc <_ZN8touchgfx11AnalogClock11updateClockEv+0x288>
 801282c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8012830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012834:	d5e2      	bpl.n	80127fc <_ZN8touchgfx11AnalogClock11updateClockEv+0x288>
 8012836:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8012894 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 801283a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801283e:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8012842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012846:	dcf8      	bgt.n	801283a <_ZN8touchgfx11AnalogClock11updateClockEv+0x2c6>
 8012848:	e7d4      	b.n	80127f4 <_ZN8touchgfx11AnalogClock11updateClockEv+0x280>
 801284a:	4628      	mov	r0, r5
 801284c:	f001 fb81 	bl	8013f52 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 8012850:	4603      	mov	r3, r0
 8012852:	2800      	cmp	r0, #0
 8012854:	d1da      	bne.n	801280c <_ZN8touchgfx11AnalogClock11updateClockEv+0x298>
 8012856:	f8d4 1320 	ldr.w	r1, [r4, #800]	@ 0x320
 801285a:	4628      	mov	r0, r5
 801285c:	f8b4 2324 	ldrh.w	r2, [r4, #804]	@ 0x324
 8012860:	eeb0 0a48 	vmov.f32	s0, s16
 8012864:	9100      	str	r1, [sp, #0]
 8012866:	2102      	movs	r1, #2
 8012868:	f001 fb76 	bl	8013f58 <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 801286c:	4628      	mov	r0, r5
 801286e:	f001 fb87 	bl	8013f80 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 8012872:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012876:	f884 332a 	strb.w	r3, [r4, #810]	@ 0x32a
 801287a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801287e:	f884 332b 	strb.w	r3, [r4, #811]	@ 0x32b
 8012882:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012886:	f884 332c 	strb.w	r3, [r4, #812]	@ 0x32c
 801288a:	b003      	add	sp, #12
 801288c:	ecbd 8b02 	vpop	{d8}
 8012890:	bd30      	pop	{r4, r5, pc}
 8012892:	bf00      	nop
 8012894:	40c90fdb 	.word	0x40c90fdb

08012898 <_ZN8touchgfx11AnalogClockC1Ev>:
 8012898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801289c:	4604      	mov	r4, r0
 801289e:	2500      	movs	r5, #0
 80128a0:	ed2d 8b02 	vpush	{d8}
 80128a4:	b083      	sub	sp, #12
 80128a6:	4626      	mov	r6, r4
 80128a8:	f000 f89a 	bl	80129e0 <_ZN8touchgfx13AbstractClockC1Ev>
 80128ac:	4b31      	ldr	r3, [pc, #196]	@ (8012974 <_ZN8touchgfx11AnalogClockC1Ev+0xdc>)
 80128ae:	2201      	movs	r2, #1
 80128b0:	a902      	add	r1, sp, #8
 80128b2:	f846 3b30 	str.w	r3, [r6], #48
 80128b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80128ba:	f884 2055 	strb.w	r2, [r4, #85]	@ 0x55
 80128be:	f104 095c 	add.w	r9, r4, #92	@ 0x5c
 80128c2:	4a2d      	ldr	r2, [pc, #180]	@ (8012978 <_ZN8touchgfx11AnalogClockC1Ev+0xe0>)
 80128c4:	4630      	mov	r0, r6
 80128c6:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80128ca:	f504 78a4 	add.w	r8, r4, #328	@ 0x148
 80128ce:	6322      	str	r2, [r4, #48]	@ 0x30
 80128d0:	f504 770d 	add.w	r7, r4, #564	@ 0x234
 80128d4:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 80128d8:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 80128dc:	86a5      	strh	r5, [r4, #52]	@ 0x34
 80128de:	86e5      	strh	r5, [r4, #54]	@ 0x36
 80128e0:	8725      	strh	r5, [r4, #56]	@ 0x38
 80128e2:	8765      	strh	r5, [r4, #58]	@ 0x3a
 80128e4:	87a5      	strh	r5, [r4, #60]	@ 0x3c
 80128e6:	87e5      	strh	r5, [r4, #62]	@ 0x3e
 80128e8:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 80128ec:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 80128f0:	64e5      	str	r5, [r4, #76]	@ 0x4c
 80128f2:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 80128f6:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
 80128fa:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 80128fe:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 801297c <_ZN8touchgfx11AnalogClockC1Ev+0xe4>
 8012902:	e9c4 5511 	strd	r5, r5, [r4, #68]	@ 0x44
 8012906:	f002 fe2f 	bl	8015568 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801290a:	4648      	mov	r0, r9
 801290c:	f001 fc90 	bl	8014230 <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 8012910:	4640      	mov	r0, r8
 8012912:	f001 fc8d 	bl	8014230 <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 8012916:	4638      	mov	r0, r7
 8012918:	f001 fc8a 	bl	8014230 <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 801291c:	4b18      	ldr	r3, [pc, #96]	@ (8012980 <_ZN8touchgfx11AnalogClockC1Ev+0xe8>)
 801291e:	4631      	mov	r1, r6
 8012920:	4620      	mov	r0, r4
 8012922:	f8c4 3320 	str.w	r3, [r4, #800]	@ 0x320
 8012926:	f8c4 5324 	str.w	r5, [r4, #804]	@ 0x324
 801292a:	f8c4 5328 	str.w	r5, [r4, #808]	@ 0x328
 801292e:	f884 532c 	strb.w	r5, [r4, #812]	@ 0x32c
 8012932:	f884 532d 	strb.w	r5, [r4, #813]	@ 0x32d
 8012936:	f884 532e 	strb.w	r5, [r4, #814]	@ 0x32e
 801293a:	f000 f896 	bl	8012a6a <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801293e:	eeb0 0a48 	vmov.f32	s0, s16
 8012942:	4648      	mov	r0, r9
 8012944:	f7ff fe0d 	bl	8012562 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8012948:	eeb0 0a48 	vmov.f32	s0, s16
 801294c:	4640      	mov	r0, r8
 801294e:	f7ff fe08 	bl	8012562 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8012952:	4638      	mov	r0, r7
 8012954:	eeb0 0a48 	vmov.f32	s0, s16
 8012958:	f7ff fe03 	bl	8012562 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 801295c:	4620      	mov	r0, r4
 801295e:	f884 5081 	strb.w	r5, [r4, #129]	@ 0x81
 8012962:	f884 516d 	strb.w	r5, [r4, #365]	@ 0x16d
 8012966:	f884 5259 	strb.w	r5, [r4, #601]	@ 0x259
 801296a:	b003      	add	sp, #12
 801296c:	ecbd 8b02 	vpop	{d8}
 8012970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012974:	0802bbbc 	.word	0x0802bbbc
 8012978:	0802c458 	.word	0x0802c458
 801297c:	00000000 	.word	0x00000000
 8012980:	08018f8b 	.word	0x08018f8b

08012984 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 8012984:	b470      	push	{r4, r5, r6}
 8012986:	2518      	movs	r5, #24
 8012988:	fbb1 f6f5 	udiv	r6, r1, r5
 801298c:	fb06 1115 	mls	r1, r6, r5, r1
 8012990:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8012994:	213c      	movs	r1, #60	@ 0x3c
 8012996:	fbb2 f5f1 	udiv	r5, r2, r1
 801299a:	fb05 2211 	mls	r2, r5, r1, r2
 801299e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 80129a2:	fbb3 f2f1 	udiv	r2, r3, r1
 80129a6:	fb02 3311 	mls	r3, r2, r1, r3
 80129aa:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 80129ae:	6803      	ldr	r3, [r0, #0]
 80129b0:	bc70      	pop	{r4, r5, r6}
 80129b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80129b6:	4718      	bx	r3

080129b8 <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 80129b8:	b4f0      	push	{r4, r5, r6, r7}
 80129ba:	6804      	ldr	r4, [r0, #0]
 80129bc:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80129c0:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 80129c4:	240c      	movs	r4, #12
 80129c6:	2e00      	cmp	r6, #0
 80129c8:	46ac      	mov	ip, r5
 80129ca:	fbb1 f7f4 	udiv	r7, r1, r4
 80129ce:	fb07 1114 	mls	r1, r7, r4, r1
 80129d2:	bf18      	it	ne
 80129d4:	2400      	movne	r4, #0
 80129d6:	fa54 f181 	uxtab	r1, r4, r1
 80129da:	bcf0      	pop	{r4, r5, r6, r7}
 80129dc:	b2c9      	uxtb	r1, r1
 80129de:	4760      	bx	ip

080129e0 <_ZN8touchgfx13AbstractClockC1Ev>:
 80129e0:	2101      	movs	r1, #1
 80129e2:	2200      	movs	r2, #0
 80129e4:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80129e8:	490a      	ldr	r1, [pc, #40]	@ (8012a14 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 80129ea:	8082      	strh	r2, [r0, #4]
 80129ec:	80c2      	strh	r2, [r0, #6]
 80129ee:	8102      	strh	r2, [r0, #8]
 80129f0:	8142      	strh	r2, [r0, #10]
 80129f2:	8182      	strh	r2, [r0, #12]
 80129f4:	81c2      	strh	r2, [r0, #14]
 80129f6:	8202      	strh	r2, [r0, #16]
 80129f8:	8242      	strh	r2, [r0, #18]
 80129fa:	61c2      	str	r2, [r0, #28]
 80129fc:	8402      	strh	r2, [r0, #32]
 80129fe:	8442      	strh	r2, [r0, #34]	@ 0x22
 8012a00:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8012a04:	6001      	str	r1, [r0, #0]
 8012a06:	6282      	str	r2, [r0, #40]	@ 0x28
 8012a08:	8582      	strh	r2, [r0, #44]	@ 0x2c
 8012a0a:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 8012a0e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012a12:	4770      	bx	lr
 8012a14:	0802bca4 	.word	0x0802bca4

08012a18 <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>:
 8012a18:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8012a1c:	4770      	bx	lr

08012a1e <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 8012a1e:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8012a22:	4770      	bx	lr

08012a24 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8012a24:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8012a28:	220c      	movs	r2, #12
 8012a2a:	f100 030b 	add.w	r3, r0, #11
 8012a2e:	fb93 f0f2 	sdiv	r0, r3, r2
 8012a32:	fb02 3010 	mls	r0, r2, r0, r3
 8012a36:	3001      	adds	r0, #1
 8012a38:	b2c0      	uxtb	r0, r0
 8012a3a:	4770      	bx	lr

08012a3c <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 8012a3c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8012a40:	280b      	cmp	r0, #11
 8012a42:	bf8c      	ite	hi
 8012a44:	2000      	movhi	r0, #0
 8012a46:	2001      	movls	r0, #1
 8012a48:	4770      	bx	lr

08012a4a <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8012a4a:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8012a4e:	4770      	bx	lr

08012a50 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8012a50:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 8012a54:	4770      	bx	lr

08012a56 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012a56:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012a58:	2000      	movs	r0, #0
 8012a5a:	b12b      	cbz	r3, 8012a68 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012a5c:	b920      	cbnz	r0, 8012a68 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012a5e:	1a5a      	subs	r2, r3, r1
 8012a60:	699b      	ldr	r3, [r3, #24]
 8012a62:	4250      	negs	r0, r2
 8012a64:	4150      	adcs	r0, r2
 8012a66:	e7f8      	b.n	8012a5a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012a68:	4770      	bx	lr

08012a6a <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	6148      	str	r0, [r1, #20]
 8012a6e:	618b      	str	r3, [r1, #24]
 8012a70:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012a72:	b913      	cbnz	r3, 8012a7a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012a74:	6281      	str	r1, [r0, #40]	@ 0x28
 8012a76:	4770      	bx	lr
 8012a78:	4613      	mov	r3, r2
 8012a7a:	699a      	ldr	r2, [r3, #24]
 8012a7c:	2a00      	cmp	r2, #0
 8012a7e:	d1fb      	bne.n	8012a78 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012a80:	6199      	str	r1, [r3, #24]
 8012a82:	4770      	bx	lr

08012a84 <_ZN8touchgfx9Container9removeAllEv>:
 8012a84:	2200      	movs	r2, #0
 8012a86:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012a88:	b123      	cbz	r3, 8012a94 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012a8a:	6999      	ldr	r1, [r3, #24]
 8012a8c:	6281      	str	r1, [r0, #40]	@ 0x28
 8012a8e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012a92:	e7f8      	b.n	8012a86 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012a94:	4770      	bx	lr

08012a96 <_ZN8touchgfx9Container6unlinkEv>:
 8012a96:	2300      	movs	r3, #0
 8012a98:	6283      	str	r3, [r0, #40]	@ 0x28
 8012a9a:	4770      	bx	lr

08012a9c <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	8002      	strh	r2, [r0, #0]
 8012aa0:	8042      	strh	r2, [r0, #2]
 8012aa2:	8082      	strh	r2, [r0, #4]
 8012aa4:	80c2      	strh	r2, [r0, #6]
 8012aa6:	4770      	bx	lr

08012aa8 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012aa8:	b570      	push	{r4, r5, r6, lr}
 8012aaa:	460d      	mov	r5, r1
 8012aac:	4616      	mov	r6, r2
 8012aae:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012ab0:	b13c      	cbz	r4, 8012ac2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012ab2:	6823      	ldr	r3, [r4, #0]
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	4632      	mov	r2, r6
 8012ab8:	4629      	mov	r1, r5
 8012aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012abc:	4798      	blx	r3
 8012abe:	69a4      	ldr	r4, [r4, #24]
 8012ac0:	e7f6      	b.n	8012ab0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012ac2:	bd70      	pop	{r4, r5, r6, pc}

08012ac4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012ac4:	b538      	push	{r3, r4, r5, lr}
 8012ac6:	460d      	mov	r5, r1
 8012ac8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012aca:	b134      	cbz	r4, 8012ada <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012acc:	682b      	ldr	r3, [r5, #0]
 8012ace:	4621      	mov	r1, r4
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	689b      	ldr	r3, [r3, #8]
 8012ad4:	4798      	blx	r3
 8012ad6:	69a4      	ldr	r4, [r4, #24]
 8012ad8:	e7f7      	b.n	8012aca <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012ada:	bd38      	pop	{r3, r4, r5, pc}

08012adc <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012adc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012ade:	b19b      	cbz	r3, 8012b08 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012ae0:	428b      	cmp	r3, r1
 8012ae2:	d109      	bne.n	8012af8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012ae4:	699a      	ldr	r2, [r3, #24]
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	6159      	str	r1, [r3, #20]
 8012aea:	6282      	str	r2, [r0, #40]	@ 0x28
 8012aec:	b902      	cbnz	r2, 8012af0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012aee:	4770      	bx	lr
 8012af0:	6199      	str	r1, [r3, #24]
 8012af2:	4770      	bx	lr
 8012af4:	4613      	mov	r3, r2
 8012af6:	b13a      	cbz	r2, 8012b08 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012af8:	699a      	ldr	r2, [r3, #24]
 8012afa:	428a      	cmp	r2, r1
 8012afc:	d1fa      	bne.n	8012af4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012afe:	698a      	ldr	r2, [r1, #24]
 8012b00:	619a      	str	r2, [r3, #24]
 8012b02:	2300      	movs	r3, #0
 8012b04:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012b08:	4770      	bx	lr

08012b0a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012b0a:	b410      	push	{r4}
 8012b0c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012b0e:	4604      	mov	r4, r0
 8012b10:	b92b      	cbnz	r3, 8012b1e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012b12:	6803      	ldr	r3, [r0, #0]
 8012b14:	4611      	mov	r1, r2
 8012b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012b1c:	4718      	bx	r3
 8012b1e:	b941      	cbnz	r1, 8012b32 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012b20:	6193      	str	r3, [r2, #24]
 8012b22:	6282      	str	r2, [r0, #40]	@ 0x28
 8012b24:	6154      	str	r4, [r2, #20]
 8012b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b2a:	4770      	bx	lr
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2800      	cmp	r0, #0
 8012b30:	d0f9      	beq.n	8012b26 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012b32:	4299      	cmp	r1, r3
 8012b34:	6998      	ldr	r0, [r3, #24]
 8012b36:	d1f9      	bne.n	8012b2c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012b38:	6190      	str	r0, [r2, #24]
 8012b3a:	618a      	str	r2, [r1, #24]
 8012b3c:	e7f2      	b.n	8012b24 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012b3e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b42:	461f      	mov	r7, r3
 8012b44:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8012b48:	460d      	mov	r5, r1
 8012b4a:	4616      	mov	r6, r2
 8012b4c:	b103      	cbz	r3, 8012b50 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012b4e:	6038      	str	r0, [r7, #0]
 8012b50:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012b52:	b314      	cbz	r4, 8012b9a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012b54:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012b58:	b1eb      	cbz	r3, 8012b96 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012b5a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012b5e:	428d      	cmp	r5, r1
 8012b60:	db19      	blt.n	8012b96 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012b62:	b289      	uxth	r1, r1
 8012b64:	8923      	ldrh	r3, [r4, #8]
 8012b66:	440b      	add	r3, r1
 8012b68:	b21b      	sxth	r3, r3
 8012b6a:	429d      	cmp	r5, r3
 8012b6c:	da13      	bge.n	8012b96 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012b6e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012b72:	4296      	cmp	r6, r2
 8012b74:	db0f      	blt.n	8012b96 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012b76:	b292      	uxth	r2, r2
 8012b78:	8963      	ldrh	r3, [r4, #10]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	b21b      	sxth	r3, r3
 8012b7e:	429e      	cmp	r6, r3
 8012b80:	da09      	bge.n	8012b96 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012b82:	6823      	ldr	r3, [r4, #0]
 8012b84:	1ab2      	subs	r2, r6, r2
 8012b86:	1a69      	subs	r1, r5, r1
 8012b88:	4620      	mov	r0, r4
 8012b8a:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8012b8e:	b212      	sxth	r2, r2
 8012b90:	463b      	mov	r3, r7
 8012b92:	b209      	sxth	r1, r1
 8012b94:	47c0      	blx	r8
 8012b96:	69a4      	ldr	r4, [r4, #24]
 8012b98:	e7db      	b.n	8012b52 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012ba0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba4:	4c6d      	ldr	r4, [pc, #436]	@ (8012d5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012ba6:	b0a1      	sub	sp, #132	@ 0x84
 8012ba8:	4606      	mov	r6, r0
 8012baa:	6824      	ldr	r4, [r4, #0]
 8012bac:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8012bae:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8012bb2:	2400      	movs	r4, #0
 8012bb4:	9303      	str	r3, [sp, #12]
 8012bb6:	802c      	strh	r4, [r5, #0]
 8012bb8:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8012bba:	802c      	strh	r4, [r5, #0]
 8012bbc:	601c      	str	r4, [r3, #0]
 8012bbe:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012bc2:	f7ff ffbc 	bl	8012b3e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012bc6:	f1b9 0f03 	cmp.w	r9, #3
 8012bca:	f340 80c1 	ble.w	8012d50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8012bce:	4631      	mov	r1, r6
 8012bd0:	a80c      	add	r0, sp, #48	@ 0x30
 8012bd2:	f005 fdbd 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012bd6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8012bda:	9306      	str	r3, [sp, #24]
 8012bdc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012be0:	9307      	str	r3, [sp, #28]
 8012be2:	9b03      	ldr	r3, [sp, #12]
 8012be4:	f8d3 a000 	ldr.w	sl, [r3]
 8012be8:	f1ba 0f00 	cmp.w	sl, #0
 8012bec:	f000 80b3 	beq.w	8012d56 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8012bf0:	4651      	mov	r1, sl
 8012bf2:	a810      	add	r0, sp, #64	@ 0x40
 8012bf4:	f005 fdac 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012bf8:	2002      	movs	r0, #2
 8012bfa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8012bfe:	9b01      	ldr	r3, [sp, #4]
 8012c00:	9a06      	ldr	r2, [sp, #24]
 8012c02:	fb91 f1f0 	sdiv	r1, r1, r0
 8012c06:	189d      	adds	r5, r3, r2
 8012c08:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8012c0c:	9a07      	ldr	r2, [sp, #28]
 8012c0e:	4419      	add	r1, r3
 8012c10:	9b02      	ldr	r3, [sp, #8]
 8012c12:	4413      	add	r3, r2
 8012c14:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8012c18:	1a6d      	subs	r5, r5, r1
 8012c1a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8012c1e:	fb92 f2f0 	sdiv	r2, r2, r0
 8012c22:	440a      	add	r2, r1
 8012c24:	1a9b      	subs	r3, r3, r2
 8012c26:	435b      	muls	r3, r3
 8012c28:	fb05 3505 	mla	r5, r5, r5, r3
 8012c2c:	4f4c      	ldr	r7, [pc, #304]	@ (8012d60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012c2e:	ac10      	add	r4, sp, #64	@ 0x40
 8012c30:	f1b9 0f0c 	cmp.w	r9, #12
 8012c34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c38:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c40:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012c48:	f04f 0303 	mov.w	r3, #3
 8012c4c:	bfd8      	it	le
 8012c4e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012c52:	f04f 0400 	mov.w	r4, #0
 8012c56:	f8cd 9000 	str.w	r9, [sp]
 8012c5a:	bfcc      	ite	gt
 8012c5c:	4698      	movgt	r8, r3
 8012c5e:	fb92 f8f3 	sdivle	r8, r2, r3
 8012c62:	1c63      	adds	r3, r4, #1
 8012c64:	aa10      	add	r2, sp, #64	@ 0x40
 8012c66:	f004 0401 	and.w	r4, r4, #1
 8012c6a:	f04f 0b00 	mov.w	fp, #0
 8012c6e:	9308      	str	r3, [sp, #32]
 8012c70:	9b00      	ldr	r3, [sp, #0]
 8012c72:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012c76:	fb93 f3f8 	sdiv	r3, r3, r8
 8012c7a:	3404      	adds	r4, #4
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	9304      	str	r3, [sp, #16]
 8012c80:	9a04      	ldr	r2, [sp, #16]
 8012c82:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012c86:	fb13 f302 	smulbb	r3, r3, r2
 8012c8a:	9a01      	ldr	r2, [sp, #4]
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	1899      	adds	r1, r3, r2
 8012c90:	9305      	str	r3, [sp, #20]
 8012c92:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012c96:	b209      	sxth	r1, r1
 8012c98:	4299      	cmp	r1, r3
 8012c9a:	db4d      	blt.n	8012d38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012c9c:	8932      	ldrh	r2, [r6, #8]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	b21b      	sxth	r3, r3
 8012ca2:	4299      	cmp	r1, r3
 8012ca4:	da48      	bge.n	8012d38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012ca6:	9b04      	ldr	r3, [sp, #16]
 8012ca8:	6827      	ldr	r7, [r4, #0]
 8012caa:	fb17 f703 	smulbb	r7, r7, r3
 8012cae:	9b02      	ldr	r3, [sp, #8]
 8012cb0:	b2bf      	uxth	r7, r7
 8012cb2:	18fa      	adds	r2, r7, r3
 8012cb4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012cb8:	b212      	sxth	r2, r2
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	db3c      	blt.n	8012d38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012cbe:	8970      	ldrh	r0, [r6, #10]
 8012cc0:	4403      	add	r3, r0
 8012cc2:	b21b      	sxth	r3, r3
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	da37      	bge.n	8012d38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012cc8:	2300      	movs	r3, #0
 8012cca:	4630      	mov	r0, r6
 8012ccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012cce:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012cd0:	f7ff ff35 	bl	8012b3e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012cd4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012cd6:	b37a      	cbz	r2, 8012d38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012cd8:	4552      	cmp	r2, sl
 8012cda:	d02d      	beq.n	8012d38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012cdc:	4611      	mov	r1, r2
 8012cde:	a80e      	add	r0, sp, #56	@ 0x38
 8012ce0:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ce2:	f005 fd35 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ce6:	f04f 0e02 	mov.w	lr, #2
 8012cea:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8012cee:	9a06      	ldr	r2, [sp, #24]
 8012cf0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8012cf4:	9b01      	ldr	r3, [sp, #4]
 8012cf6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8012cfa:	4413      	add	r3, r2
 8012cfc:	9a07      	ldr	r2, [sp, #28]
 8012cfe:	fb91 f1fe 	sdiv	r1, r1, lr
 8012d02:	fb9c fcfe 	sdiv	ip, ip, lr
 8012d06:	4401      	add	r1, r0
 8012d08:	1a58      	subs	r0, r3, r1
 8012d0a:	9b02      	ldr	r3, [sp, #8]
 8012d0c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8012d10:	4413      	add	r3, r2
 8012d12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d14:	448c      	add	ip, r1
 8012d16:	eba3 030c 	sub.w	r3, r3, ip
 8012d1a:	435b      	muls	r3, r3
 8012d1c:	fb00 3300 	mla	r3, r0, r0, r3
 8012d20:	42ab      	cmp	r3, r5
 8012d22:	d208      	bcs.n	8012d36 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012d24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012d26:	461d      	mov	r5, r3
 8012d28:	9803      	ldr	r0, [sp, #12]
 8012d2a:	6001      	str	r1, [r0, #0]
 8012d2c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8012d2e:	9805      	ldr	r0, [sp, #20]
 8012d30:	8008      	strh	r0, [r1, #0]
 8012d32:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8012d34:	800f      	strh	r7, [r1, #0]
 8012d36:	4692      	mov	sl, r2
 8012d38:	f10b 0b01 	add.w	fp, fp, #1
 8012d3c:	3408      	adds	r4, #8
 8012d3e:	f1bb 0f04 	cmp.w	fp, #4
 8012d42:	d19d      	bne.n	8012c80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012d44:	9b00      	ldr	r3, [sp, #0]
 8012d46:	9c08      	ldr	r4, [sp, #32]
 8012d48:	444b      	add	r3, r9
 8012d4a:	4544      	cmp	r4, r8
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	d188      	bne.n	8012c62 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012d50:	b021      	add	sp, #132	@ 0x84
 8012d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d56:	f04f 35ff 	mov.w	r5, #4294967295
 8012d5a:	e767      	b.n	8012c2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012d5c:	24006600 	.word	0x24006600
 8012d60:	0802b064 	.word	0x0802b064

08012d64 <_ZN8touchgfx4RectaNERKS0_>:
 8012d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d68:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012d6c:	888c      	ldrh	r4, [r1, #4]
 8012d6e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012d72:	443c      	add	r4, r7
 8012d74:	b2a4      	uxth	r4, r4
 8012d76:	fa0f f884 	sxth.w	r8, r4
 8012d7a:	45c1      	cmp	r9, r8
 8012d7c:	da2f      	bge.n	8012dde <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012d7e:	8882      	ldrh	r2, [r0, #4]
 8012d80:	444a      	add	r2, r9
 8012d82:	b292      	uxth	r2, r2
 8012d84:	fa0f fe82 	sxth.w	lr, r2
 8012d88:	4577      	cmp	r7, lr
 8012d8a:	da28      	bge.n	8012dde <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012d8c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012d90:	88cb      	ldrh	r3, [r1, #6]
 8012d92:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012d96:	442b      	add	r3, r5
 8012d98:	b21b      	sxth	r3, r3
 8012d9a:	429e      	cmp	r6, r3
 8012d9c:	da1f      	bge.n	8012dde <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012d9e:	88c3      	ldrh	r3, [r0, #6]
 8012da0:	4433      	add	r3, r6
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	fa0f fc83 	sxth.w	ip, r3
 8012da8:	4565      	cmp	r5, ip
 8012daa:	da18      	bge.n	8012dde <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012dac:	454f      	cmp	r7, r9
 8012dae:	bfb8      	it	lt
 8012db0:	464f      	movlt	r7, r9
 8012db2:	42b5      	cmp	r5, r6
 8012db4:	bfb8      	it	lt
 8012db6:	4635      	movlt	r5, r6
 8012db8:	45f0      	cmp	r8, lr
 8012dba:	bfd8      	it	le
 8012dbc:	4622      	movle	r2, r4
 8012dbe:	1bd2      	subs	r2, r2, r7
 8012dc0:	8082      	strh	r2, [r0, #4]
 8012dc2:	884a      	ldrh	r2, [r1, #2]
 8012dc4:	88c9      	ldrh	r1, [r1, #6]
 8012dc6:	8007      	strh	r7, [r0, #0]
 8012dc8:	440a      	add	r2, r1
 8012dca:	8045      	strh	r5, [r0, #2]
 8012dcc:	b292      	uxth	r2, r2
 8012dce:	b211      	sxth	r1, r2
 8012dd0:	458c      	cmp	ip, r1
 8012dd2:	bfa8      	it	ge
 8012dd4:	4613      	movge	r3, r2
 8012dd6:	1b5b      	subs	r3, r3, r5
 8012dd8:	80c3      	strh	r3, [r0, #6]
 8012dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dde:	2300      	movs	r3, #0
 8012de0:	8003      	strh	r3, [r0, #0]
 8012de2:	8043      	strh	r3, [r0, #2]
 8012de4:	8083      	strh	r3, [r0, #4]
 8012de6:	80c3      	strh	r3, [r0, #6]
 8012de8:	e7f7      	b.n	8012dda <_ZN8touchgfx4RectaNERKS0_+0x76>

08012dea <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012dea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	dd06      	ble.n	8012e00 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012df2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012df6:	2800      	cmp	r0, #0
 8012df8:	bfcc      	ite	gt
 8012dfa:	2000      	movgt	r0, #0
 8012dfc:	2001      	movle	r0, #1
 8012dfe:	4770      	bx	lr
 8012e00:	2001      	movs	r0, #1
 8012e02:	4770      	bx	lr

08012e04 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e08:	2300      	movs	r3, #0
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8012e0e:	8003      	strh	r3, [r0, #0]
 8012e10:	8043      	strh	r3, [r0, #2]
 8012e12:	8083      	strh	r3, [r0, #4]
 8012e14:	80c3      	strh	r3, [r0, #6]
 8012e16:	2d00      	cmp	r5, #0
 8012e18:	d040      	beq.n	8012e9c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012e1a:	1d28      	adds	r0, r5, #4
 8012e1c:	f7ff ffe5 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e20:	b988      	cbnz	r0, 8012e46 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012e22:	4620      	mov	r0, r4
 8012e24:	f7ff ffe1 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e28:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012e2c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012e30:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012e34:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012e38:	b138      	cbz	r0, 8012e4a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012e3a:	8022      	strh	r2, [r4, #0]
 8012e3c:	8063      	strh	r3, [r4, #2]
 8012e3e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012e42:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012e46:	69ad      	ldr	r5, [r5, #24]
 8012e48:	e7e5      	b.n	8012e16 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012e4a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012e4e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012e52:	4290      	cmp	r0, r2
 8012e54:	4607      	mov	r7, r0
 8012e56:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8012e5a:	460e      	mov	r6, r1
 8012e5c:	bfa8      	it	ge
 8012e5e:	4617      	movge	r7, r2
 8012e60:	4299      	cmp	r1, r3
 8012e62:	4472      	add	r2, lr
 8012e64:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012e68:	bfa8      	it	ge
 8012e6a:	461e      	movge	r6, r3
 8012e6c:	4440      	add	r0, r8
 8012e6e:	4471      	add	r1, lr
 8012e70:	4463      	add	r3, ip
 8012e72:	b200      	sxth	r0, r0
 8012e74:	8027      	strh	r7, [r4, #0]
 8012e76:	b212      	sxth	r2, r2
 8012e78:	8066      	strh	r6, [r4, #2]
 8012e7a:	b209      	sxth	r1, r1
 8012e7c:	b21b      	sxth	r3, r3
 8012e7e:	4290      	cmp	r0, r2
 8012e80:	bfac      	ite	ge
 8012e82:	ebc7 0200 	rsbge	r2, r7, r0
 8012e86:	ebc7 0202 	rsblt	r2, r7, r2
 8012e8a:	4299      	cmp	r1, r3
 8012e8c:	bfac      	ite	ge
 8012e8e:	ebc6 0301 	rsbge	r3, r6, r1
 8012e92:	ebc6 0303 	rsblt	r3, r6, r3
 8012e96:	80a2      	strh	r2, [r4, #4]
 8012e98:	80e3      	strh	r3, [r4, #6]
 8012e9a:	e7d4      	b.n	8012e46 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ea2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012ea2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012ea6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8012eaa:	b383      	cbz	r3, 8012f0e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012eac:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012eae:	b374      	cbz	r4, 8012f0e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012eb0:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012eb4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012eb8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012ebc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012ec0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012ec4:	b303      	cbz	r3, 8012f08 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012ec6:	4668      	mov	r0, sp
 8012ec8:	1d21      	adds	r1, r4, #4
 8012eca:	f8ad 5000 	strh.w	r5, [sp]
 8012ece:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012ed2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012ed6:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012eda:	f7ff ff43 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8012ede:	4668      	mov	r0, sp
 8012ee0:	f7ff ff83 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8012ee4:	b980      	cbnz	r0, 8012f08 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012ee6:	f8bd 3000 	ldrh.w	r3, [sp]
 8012eea:	4669      	mov	r1, sp
 8012eec:	88a2      	ldrh	r2, [r4, #4]
 8012eee:	4620      	mov	r0, r4
 8012ef0:	1a9b      	subs	r3, r3, r2
 8012ef2:	88e2      	ldrh	r2, [r4, #6]
 8012ef4:	f8ad 3000 	strh.w	r3, [sp]
 8012ef8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012efc:	1a9b      	subs	r3, r3, r2
 8012efe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012f02:	6823      	ldr	r3, [r4, #0]
 8012f04:	689b      	ldr	r3, [r3, #8]
 8012f06:	4798      	blx	r3
 8012f08:	69a4      	ldr	r4, [r4, #24]
 8012f0a:	2c00      	cmp	r4, #0
 8012f0c:	d1d8      	bne.n	8012ec0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012f0e:	b002      	add	sp, #8
 8012f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012f14 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f16:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8012f1a:	460d      	mov	r5, r1
 8012f1c:	4616      	mov	r6, r2
 8012f1e:	b323      	cbz	r3, 8012f6a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012f20:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012f22:	b314      	cbz	r4, 8012f6a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012f24:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012f28:	b1eb      	cbz	r3, 8012f66 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012f2a:	6828      	ldr	r0, [r5, #0]
 8012f2c:	466b      	mov	r3, sp
 8012f2e:	6869      	ldr	r1, [r5, #4]
 8012f30:	c303      	stmia	r3!, {r0, r1}
 8012f32:	4668      	mov	r0, sp
 8012f34:	1d21      	adds	r1, r4, #4
 8012f36:	f7ff ff15 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8012f3a:	4668      	mov	r0, sp
 8012f3c:	f7ff ff55 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f40:	b988      	cbnz	r0, 8012f66 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012f42:	f8bd 3000 	ldrh.w	r3, [sp]
 8012f46:	4669      	mov	r1, sp
 8012f48:	88a2      	ldrh	r2, [r4, #4]
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	1a9b      	subs	r3, r3, r2
 8012f4e:	88e2      	ldrh	r2, [r4, #6]
 8012f50:	f8ad 3000 	strh.w	r3, [sp]
 8012f54:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012f58:	1a9b      	subs	r3, r3, r2
 8012f5a:	4632      	mov	r2, r6
 8012f5c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012f60:	6823      	ldr	r3, [r4, #0]
 8012f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012f64:	4798      	blx	r3
 8012f66:	69a4      	ldr	r4, [r4, #24]
 8012f68:	e7db      	b.n	8012f22 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012f6a:	b002      	add	sp, #8
 8012f6c:	bd70      	pop	{r4, r5, r6, pc}

08012f6e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8012f6e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8012f72:	4770      	bx	lr

08012f74 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8012f74:	4770      	bx	lr

08012f76 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8012f76:	4770      	bx	lr

08012f78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8012f78:	6803      	ldr	r3, [r0, #0]
 8012f7a:	b513      	push	{r0, r1, r4, lr}
 8012f7c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8012f80:	2300      	movs	r3, #0
 8012f82:	e9cd 3300 	strd	r3, r3, [sp]
 8012f86:	466b      	mov	r3, sp
 8012f88:	47a0      	blx	r4
 8012f8a:	b002      	add	sp, #8
 8012f8c:	bd10      	pop	{r4, pc}

08012f8e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8012f8e:	2301      	movs	r3, #1
 8012f90:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8012f94:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8012f98:	4770      	bx	lr

08012f9a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8012fa0:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8012fa4:	4770      	bx	lr

08012fa6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012fa6:	6843      	ldr	r3, [r0, #4]
 8012fa8:	2201      	movs	r2, #1
 8012faa:	725a      	strb	r2, [r3, #9]
 8012fac:	6840      	ldr	r0, [r0, #4]
 8012fae:	6803      	ldr	r3, [r0, #0]
 8012fb0:	691b      	ldr	r3, [r3, #16]
 8012fb2:	4718      	bx	r3

08012fb4 <_ZN8touchgfx3HAL8flushDMAEv>:
 8012fb4:	6840      	ldr	r0, [r0, #4]
 8012fb6:	6803      	ldr	r3, [r0, #0]
 8012fb8:	689b      	ldr	r3, [r3, #8]
 8012fba:	4718      	bx	r3

08012fbc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012fbc:	b530      	push	{r4, r5, lr}
 8012fbe:	b08b      	sub	sp, #44	@ 0x2c
 8012fc0:	6804      	ldr	r4, [r0, #0]
 8012fc2:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8012fc6:	9509      	str	r5, [sp, #36]	@ 0x24
 8012fc8:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8012fcc:	9508      	str	r5, [sp, #32]
 8012fce:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8012fd2:	9507      	str	r5, [sp, #28]
 8012fd4:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8012fd8:	9506      	str	r5, [sp, #24]
 8012fda:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8012fde:	9505      	str	r5, [sp, #20]
 8012fe0:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8012fe4:	9504      	str	r5, [sp, #16]
 8012fe6:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8012fea:	9503      	str	r5, [sp, #12]
 8012fec:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8012ff0:	9502      	str	r5, [sp, #8]
 8012ff2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8012ff6:	e9cd 3500 	strd	r3, r5, [sp]
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8012ffe:	2200      	movs	r2, #0
 8013000:	47a0      	blx	r4
 8013002:	b00b      	add	sp, #44	@ 0x2c
 8013004:	bd30      	pop	{r4, r5, pc}
	...

08013008 <_ZN8touchgfx3HAL10beginFrameEv>:
 8013008:	4b04      	ldr	r3, [pc, #16]	@ (801301c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801300a:	781b      	ldrb	r3, [r3, #0]
 801300c:	b123      	cbz	r3, 8013018 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801300e:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8013012:	f080 0001 	eor.w	r0, r0, #1
 8013016:	4770      	bx	lr
 8013018:	2001      	movs	r0, #1
 801301a:	4770      	bx	lr
 801301c:	240065fe 	.word	0x240065fe

08013020 <_ZN8touchgfx3HAL8endFrameEv>:
 8013020:	b510      	push	{r4, lr}
 8013022:	4604      	mov	r4, r0
 8013024:	6840      	ldr	r0, [r0, #4]
 8013026:	6803      	ldr	r3, [r0, #0]
 8013028:	689b      	ldr	r3, [r3, #8]
 801302a:	4798      	blx	r3
 801302c:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8013030:	b113      	cbz	r3, 8013038 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013032:	2301      	movs	r3, #1
 8013034:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013038:	bd10      	pop	{r4, pc}

0801303a <_ZN8touchgfx3HAL10initializeEv>:
 801303a:	b510      	push	{r4, lr}
 801303c:	4604      	mov	r4, r0
 801303e:	f7fd f9f1 	bl	8010424 <_ZN8touchgfx10OSWrappers10initializeEv>
 8013042:	f7fc fee7 	bl	800fe14 <_ZN8touchgfx4GPIO4initEv>
 8013046:	6860      	ldr	r0, [r4, #4]
 8013048:	6803      	ldr	r3, [r0, #0]
 801304a:	68db      	ldr	r3, [r3, #12]
 801304c:	4798      	blx	r3
 801304e:	68e0      	ldr	r0, [r4, #12]
 8013050:	6803      	ldr	r3, [r0, #0]
 8013052:	689b      	ldr	r3, [r3, #8]
 8013054:	4798      	blx	r3
 8013056:	6823      	ldr	r3, [r4, #0]
 8013058:	4620      	mov	r0, r4
 801305a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801305c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013060:	4718      	bx	r3

08013062 <_ZN8touchgfx3HAL9taskEntryEv>:
 8013062:	b508      	push	{r3, lr}
 8013064:	6803      	ldr	r3, [r0, #0]
 8013066:	4604      	mov	r4, r0
 8013068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801306c:	4798      	blx	r3
 801306e:	6823      	ldr	r3, [r4, #0]
 8013070:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013072:	4620      	mov	r0, r4
 8013074:	4798      	blx	r3
 8013076:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801307a:	2b02      	cmp	r3, #2
 801307c:	d001      	beq.n	8013082 <_ZN8touchgfx3HAL9taskEntryEv+0x20>
 801307e:	f7fd fa47 	bl	8010510 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013082:	6823      	ldr	r3, [r4, #0]
 8013084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013086:	e7f4      	b.n	8013072 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08013088 <_ZN8touchgfx3HAL4tickEv>:
 8013088:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801308a:	6803      	ldr	r3, [r0, #0]
 801308c:	4604      	mov	r4, r0
 801308e:	4d62      	ldr	r5, [pc, #392]	@ (8013218 <_ZN8touchgfx3HAL4tickEv+0x190>)
 8013090:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8013094:	4798      	blx	r3
 8013096:	2800      	cmp	r0, #0
 8013098:	f000 809e 	beq.w	80131d8 <_ZN8touchgfx3HAL4tickEv+0x150>
 801309c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80130a0:	2b02      	cmp	r3, #2
 80130a2:	d002      	beq.n	80130aa <_ZN8touchgfx3HAL4tickEv+0x22>
 80130a4:	2001      	movs	r0, #1
 80130a6:	f7fc febd 	bl	800fe24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80130aa:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80130ae:	2600      	movs	r6, #0
 80130b0:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80130b4:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 80130b8:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 80130bc:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80130c0:	b133      	cbz	r3, 80130d0 <_ZN8touchgfx3HAL4tickEv+0x48>
 80130c2:	6823      	ldr	r3, [r4, #0]
 80130c4:	4620      	mov	r0, r4
 80130c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80130ca:	4798      	blx	r3
 80130cc:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80130d0:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80130d4:	2601      	movs	r6, #1
 80130d6:	6862      	ldr	r2, [r4, #4]
 80130d8:	f083 0301 	eor.w	r3, r3, #1
 80130dc:	702e      	strb	r6, [r5, #0]
 80130de:	7253      	strb	r3, [r2, #9]
 80130e0:	f004 f898 	bl	8017214 <_ZN8touchgfx11Application11getInstanceEv>
 80130e4:	6803      	ldr	r3, [r0, #0]
 80130e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80130e8:	4798      	blx	r3
 80130ea:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80130ee:	b90b      	cbnz	r3, 80130f4 <_ZN8touchgfx3HAL4tickEv+0x6c>
 80130f0:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 80130f4:	f004 f88e 	bl	8017214 <_ZN8touchgfx11Application11getInstanceEv>
 80130f8:	6803      	ldr	r3, [r0, #0]
 80130fa:	695b      	ldr	r3, [r3, #20]
 80130fc:	4798      	blx	r3
 80130fe:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8013100:	6803      	ldr	r3, [r0, #0]
 8013102:	691b      	ldr	r3, [r3, #16]
 8013104:	4798      	blx	r3
 8013106:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801310a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 801310e:	3b01      	subs	r3, #1
 8013110:	b2db      	uxtb	r3, r3
 8013112:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8013116:	b10a      	cbz	r2, 801311c <_ZN8touchgfx3HAL4tickEv+0x94>
 8013118:	2b00      	cmp	r3, #0
 801311a:	d1eb      	bne.n	80130f4 <_ZN8touchgfx3HAL4tickEv+0x6c>
 801311c:	4a3f      	ldr	r2, [pc, #252]	@ (801321c <_ZN8touchgfx3HAL4tickEv+0x194>)
 801311e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8013122:	7813      	ldrb	r3, [r2, #0]
 8013124:	3301      	adds	r3, #1
 8013126:	b25b      	sxtb	r3, r3
 8013128:	4299      	cmp	r1, r3
 801312a:	7013      	strb	r3, [r2, #0]
 801312c:	dc10      	bgt.n	8013150 <_ZN8touchgfx3HAL4tickEv+0xc8>
 801312e:	2300      	movs	r3, #0
 8013130:	68e0      	ldr	r0, [r4, #12]
 8013132:	a902      	add	r1, sp, #8
 8013134:	7013      	strb	r3, [r2, #0]
 8013136:	aa03      	add	r2, sp, #12
 8013138:	6803      	ldr	r3, [r0, #0]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	4798      	blx	r3
 801313e:	6823      	ldr	r3, [r4, #0]
 8013140:	2800      	cmp	r0, #0
 8013142:	d059      	beq.n	80131f8 <_ZN8touchgfx3HAL4tickEv+0x170>
 8013144:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013148:	4620      	mov	r0, r4
 801314a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801314e:	4798      	blx	r3
 8013150:	2300      	movs	r3, #0
 8013152:	6960      	ldr	r0, [r4, #20]
 8013154:	f88d 3007 	strb.w	r3, [sp, #7]
 8013158:	b158      	cbz	r0, 8013172 <_ZN8touchgfx3HAL4tickEv+0xea>
 801315a:	6803      	ldr	r3, [r0, #0]
 801315c:	f10d 0107 	add.w	r1, sp, #7
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	4798      	blx	r3
 8013164:	b128      	cbz	r0, 8013172 <_ZN8touchgfx3HAL4tickEv+0xea>
 8013166:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8013168:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801316c:	6803      	ldr	r3, [r0, #0]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	4798      	blx	r3
 8013172:	f104 001c 	add.w	r0, r4, #28
 8013176:	f015 fecb 	bl	8028f10 <_ZN8touchgfx8Gestures4tickEv>
 801317a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 801317e:	b30b      	cbz	r3, 80131c4 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8013180:	6920      	ldr	r0, [r4, #16]
 8013182:	6803      	ldr	r3, [r0, #0]
 8013184:	691b      	ldr	r3, [r3, #16]
 8013186:	4798      	blx	r3
 8013188:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801318a:	4606      	mov	r6, r0
 801318c:	b903      	cbnz	r3, 8013190 <_ZN8touchgfx3HAL4tickEv+0x108>
 801318e:	6760      	str	r0, [r4, #116]	@ 0x74
 8013190:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8013192:	4a23      	ldr	r2, [pc, #140]	@ (8013220 <_ZN8touchgfx3HAL4tickEv+0x198>)
 8013194:	1af3      	subs	r3, r6, r3
 8013196:	4293      	cmp	r3, r2
 8013198:	d914      	bls.n	80131c4 <_ZN8touchgfx3HAL4tickEv+0x13c>
 801319a:	6920      	ldr	r0, [r4, #16]
 801319c:	6803      	ldr	r3, [r0, #0]
 801319e:	699b      	ldr	r3, [r3, #24]
 80131a0:	4798      	blx	r3
 80131a2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80131a4:	2264      	movs	r2, #100	@ 0x64
 80131a6:	1af3      	subs	r3, r6, r3
 80131a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80131ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80131b0:	2800      	cmp	r0, #0
 80131b2:	dc26      	bgt.n	8013202 <_ZN8touchgfx3HAL4tickEv+0x17a>
 80131b4:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 80131b8:	6920      	ldr	r0, [r4, #16]
 80131ba:	2100      	movs	r1, #0
 80131bc:	6803      	ldr	r3, [r0, #0]
 80131be:	69db      	ldr	r3, [r3, #28]
 80131c0:	4798      	blx	r3
 80131c2:	6766      	str	r6, [r4, #116]	@ 0x74
 80131c4:	6823      	ldr	r3, [r4, #0]
 80131c6:	4620      	mov	r0, r4
 80131c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80131cc:	4798      	blx	r3
 80131ce:	f004 f821 	bl	8017214 <_ZN8touchgfx11Application11getInstanceEv>
 80131d2:	6803      	ldr	r3, [r0, #0]
 80131d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131d6:	4798      	blx	r3
 80131d8:	6823      	ldr	r3, [r4, #0]
 80131da:	4620      	mov	r0, r4
 80131dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80131e0:	4798      	blx	r3
 80131e2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80131e6:	2b02      	cmp	r3, #2
 80131e8:	d002      	beq.n	80131f0 <_ZN8touchgfx3HAL4tickEv+0x168>
 80131ea:	2001      	movs	r0, #1
 80131ec:	f7fc fe36 	bl	800fe5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80131f0:	2300      	movs	r3, #0
 80131f2:	702b      	strb	r3, [r5, #0]
 80131f4:	b004      	add	sp, #16
 80131f6:	bd70      	pop	{r4, r5, r6, pc}
 80131f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80131fc:	4620      	mov	r0, r4
 80131fe:	4798      	blx	r3
 8013200:	e7a6      	b.n	8013150 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8013202:	2863      	cmp	r0, #99	@ 0x63
 8013204:	bfcb      	itete	gt
 8013206:	2300      	movgt	r3, #0
 8013208:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801320c:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8013210:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8013214:	e7d0      	b.n	80131b8 <_ZN8touchgfx3HAL4tickEv+0x130>
 8013216:	bf00      	nop
 8013218:	24006604 	.word	0x24006604
 801321c:	24006605 	.word	0x24006605
 8013220:	05f5e100 	.word	0x05f5e100

08013224 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013224:	b510      	push	{r4, lr}
 8013226:	4604      	mov	r4, r0
 8013228:	f7fd f93e 	bl	80104a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 801322c:	2200      	movs	r2, #0
 801322e:	6863      	ldr	r3, [r4, #4]
 8013230:	729a      	strb	r2, [r3, #10]
 8013232:	bd10      	pop	{r4, pc}

08013234 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013234:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8013236:	301c      	adds	r0, #28
 8013238:	f015 be68 	b.w	8028f0c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801323c <_ZN8touchgfx3HAL5touchEll>:
 801323c:	b530      	push	{r4, r5, lr}
 801323e:	b087      	sub	sp, #28
 8013240:	4604      	mov	r4, r0
 8013242:	a804      	add	r0, sp, #16
 8013244:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013248:	f003 fdba 	bl	8016dc0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801324c:	9b04      	ldr	r3, [sp, #16]
 801324e:	a906      	add	r1, sp, #24
 8013250:	a803      	add	r0, sp, #12
 8013252:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013256:	9b05      	ldr	r3, [sp, #20]
 8013258:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801325c:	f003 fe02 	bl	8016e64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013260:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8013264:	f104 001c 	add.w	r0, r4, #28
 8013268:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801326c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013270:	b189      	cbz	r1, 8013296 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013272:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8013276:	9300      	str	r3, [sp, #0]
 8013278:	4613      	mov	r3, r2
 801327a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 801327e:	462a      	mov	r2, r5
 8013280:	f015 fe54 	bl	8028f2c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013284:	b128      	cbz	r0, 8013292 <_ZN8touchgfx3HAL5touchEll+0x56>
 8013286:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801328a:	6623      	str	r3, [r4, #96]	@ 0x60
 801328c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013290:	6663      	str	r3, [r4, #100]	@ 0x64
 8013292:	b007      	add	sp, #28
 8013294:	bd30      	pop	{r4, r5, pc}
 8013296:	f015 fe89 	bl	8028fac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801329a:	2301      	movs	r3, #1
 801329c:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80132a0:	e7f1      	b.n	8013286 <_ZN8touchgfx3HAL5touchEll+0x4a>

080132a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80132a2:	b510      	push	{r4, lr}
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d046      	beq.n	8013336 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80132a8:	ea81 0002 	eor.w	r0, r1, r2
 80132ac:	07c4      	lsls	r4, r0, #31
 80132ae:	d508      	bpl.n	80132c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80132b0:	440b      	add	r3, r1
 80132b2:	3a01      	subs	r2, #1
 80132b4:	428b      	cmp	r3, r1
 80132b6:	d93e      	bls.n	8013336 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80132b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80132bc:	f801 0b01 	strb.w	r0, [r1], #1
 80132c0:	e7f8      	b.n	80132b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80132c2:	07d0      	lsls	r0, r2, #31
 80132c4:	bf42      	ittt	mi
 80132c6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80132ca:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80132ce:	f801 0b01 	strbmi.w	r0, [r1], #1
 80132d2:	2b01      	cmp	r3, #1
 80132d4:	d911      	bls.n	80132fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80132d6:	ea81 0402 	eor.w	r4, r1, r2
 80132da:	4610      	mov	r0, r2
 80132dc:	07a4      	lsls	r4, r4, #30
 80132de:	d022      	beq.n	8013326 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80132e0:	f023 0401 	bic.w	r4, r3, #1
 80132e4:	440c      	add	r4, r1
 80132e6:	428c      	cmp	r4, r1
 80132e8:	4602      	mov	r2, r0
 80132ea:	d904      	bls.n	80132f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80132ec:	8812      	ldrh	r2, [r2, #0]
 80132ee:	3002      	adds	r0, #2
 80132f0:	f821 2b02 	strh.w	r2, [r1], #2
 80132f4:	e7f7      	b.n	80132e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80132f6:	f003 0301 	and.w	r3, r3, #1
 80132fa:	f023 0003 	bic.w	r0, r3, #3
 80132fe:	4408      	add	r0, r1
 8013300:	4288      	cmp	r0, r1
 8013302:	4614      	mov	r4, r2
 8013304:	d904      	bls.n	8013310 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8013306:	6824      	ldr	r4, [r4, #0]
 8013308:	3204      	adds	r2, #4
 801330a:	f841 4b04 	str.w	r4, [r1], #4
 801330e:	e7f7      	b.n	8013300 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8013310:	f003 0303 	and.w	r3, r3, #3
 8013314:	3a01      	subs	r2, #1
 8013316:	440b      	add	r3, r1
 8013318:	428b      	cmp	r3, r1
 801331a:	d90c      	bls.n	8013336 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801331c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013320:	f801 0b01 	strb.w	r0, [r1], #1
 8013324:	e7f8      	b.n	8013318 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8013326:	0790      	lsls	r0, r2, #30
 8013328:	d0e7      	beq.n	80132fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801332a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801332e:	3b02      	subs	r3, #2
 8013330:	f821 0b02 	strh.w	r0, [r1], #2
 8013334:	e7e1      	b.n	80132fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013336:	2001      	movs	r0, #1
 8013338:	bd10      	pop	{r4, pc}

0801333a <_ZN8touchgfx3HAL7noTouchEv>:
 801333a:	b510      	push	{r4, lr}
 801333c:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8013340:	4604      	mov	r4, r0
 8013342:	b153      	cbz	r3, 801335a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8013344:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8013348:	2101      	movs	r1, #1
 801334a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 801334e:	301c      	adds	r0, #28
 8013350:	f015 fe2c 	bl	8028fac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013354:	2300      	movs	r3, #0
 8013356:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 801335a:	bd10      	pop	{r4, pc}

0801335c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801335c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013360:	b085      	sub	sp, #20
 8013362:	4604      	mov	r4, r0
 8013364:	2000      	movs	r0, #0
 8013366:	4699      	mov	r9, r3
 8013368:	ad04      	add	r5, sp, #16
 801336a:	460f      	mov	r7, r1
 801336c:	4690      	mov	r8, r2
 801336e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013372:	69a0      	ldr	r0, [r4, #24]
 8013374:	6806      	ldr	r6, [r0, #0]
 8013376:	9501      	str	r5, [sp, #4]
 8013378:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801337c:	9500      	str	r5, [sp, #0]
 801337e:	6835      	ldr	r5, [r6, #0]
 8013380:	47a8      	blx	r5
 8013382:	4d10      	ldr	r5, [pc, #64]	@ (80133c4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013384:	4606      	mov	r6, r0
 8013386:	f8a5 9000 	strh.w	r9, [r5]
 801338a:	f7fa f99d 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 801338e:	6803      	ldr	r3, [r0, #0]
 8013390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013392:	4798      	blx	r3
 8013394:	b128      	cbz	r0, 80133a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013396:	2801      	cmp	r0, #1
 8013398:	d00b      	beq.n	80133b2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801339a:	4630      	mov	r0, r6
 801339c:	b005      	add	sp, #20
 801339e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133a2:	882b      	ldrh	r3, [r5, #0]
 80133a4:	fb08 7203 	mla	r2, r8, r3, r7
 80133a8:	9b03      	ldr	r3, [sp, #12]
 80133aa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80133ae:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80133b0:	e7f3      	b.n	801339a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80133b2:	882a      	ldrh	r2, [r5, #0]
 80133b4:	9b03      	ldr	r3, [sp, #12]
 80133b6:	fb08 7202 	mla	r2, r8, r2, r7
 80133ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80133be:	1a9a      	subs	r2, r3, r2
 80133c0:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80133c2:	e7ea      	b.n	801339a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80133c4:	240065fa 	.word	0x240065fa

080133c8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 80133c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ca:	4b15      	ldr	r3, [pc, #84]	@ (8013420 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 80133cc:	460f      	mov	r7, r1
 80133ce:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 80133d2:	4606      	mov	r6, r0
 80133d4:	881b      	ldrh	r3, [r3, #0]
 80133d6:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80133d8:	fb93 f4f4 	sdiv	r4, r3, r4
 80133dc:	f7fa f974 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 80133e0:	6803      	ldr	r3, [r0, #0]
 80133e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133e4:	4798      	blx	r3
 80133e6:	2801      	cmp	r0, #1
 80133e8:	d00b      	beq.n	8013402 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 80133ea:	d303      	bcc.n	80133f4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 80133ec:	2802      	cmp	r0, #2
 80133ee:	d010      	beq.n	8013412 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 80133f0:	63f5      	str	r5, [r6, #60]	@ 0x3c
 80133f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133f4:	4b0b      	ldr	r3, [pc, #44]	@ (8013424 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 80133f6:	437c      	muls	r4, r7
 80133f8:	8819      	ldrh	r1, [r3, #0]
 80133fa:	434c      	muls	r4, r1
 80133fc:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8013400:	e7f6      	b.n	80133f0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 8013402:	4b08      	ldr	r3, [pc, #32]	@ (8013424 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8013404:	437c      	muls	r4, r7
 8013406:	8819      	ldrh	r1, [r3, #0]
 8013408:	434c      	muls	r4, r1
 801340a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801340e:	1b2d      	subs	r5, r5, r4
 8013410:	e7ee      	b.n	80133f0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 8013412:	4b04      	ldr	r3, [pc, #16]	@ (8013424 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8013414:	437c      	muls	r4, r7
 8013416:	8819      	ldrh	r1, [r3, #0]
 8013418:	434c      	muls	r4, r1
 801341a:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 801341e:	e7e7      	b.n	80133f0 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 8013420:	240065fc 	.word	0x240065fc
 8013424:	240065fa 	.word	0x240065fa

08013428 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8013428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801342a:	b08b      	sub	sp, #44	@ 0x2c
 801342c:	4617      	mov	r7, r2
 801342e:	4604      	mov	r4, r0
 8013430:	460e      	mov	r6, r1
 8013432:	461d      	mov	r5, r3
 8013434:	f7fa f948 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 8013438:	6803      	ldr	r3, [r0, #0]
 801343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801343c:	4798      	blx	r3
 801343e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8013442:	9007      	str	r0, [sp, #28]
 8013444:	4631      	mov	r1, r6
 8013446:	6822      	ldr	r2, [r4, #0]
 8013448:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801344c:	4b0c      	ldr	r3, [pc, #48]	@ (8013480 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801344e:	4620      	mov	r0, r4
 8013450:	881b      	ldrh	r3, [r3, #0]
 8013452:	9306      	str	r3, [sp, #24]
 8013454:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8013458:	9305      	str	r3, [sp, #20]
 801345a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801345e:	9304      	str	r3, [sp, #16]
 8013460:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013464:	9303      	str	r3, [sp, #12]
 8013466:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801346a:	9302      	str	r3, [sp, #8]
 801346c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8013470:	e9cd 5300 	strd	r5, r3, [sp]
 8013474:	463b      	mov	r3, r7
 8013476:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013478:	2200      	movs	r2, #0
 801347a:	47a8      	blx	r5
 801347c:	b00b      	add	sp, #44	@ 0x2c
 801347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013480:	240065fa 	.word	0x240065fa

08013484 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8013484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013488:	4698      	mov	r8, r3
 801348a:	6803      	ldr	r3, [r0, #0]
 801348c:	b08b      	sub	sp, #44	@ 0x2c
 801348e:	4617      	mov	r7, r2
 8013490:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8013492:	460e      	mov	r6, r1
 8013494:	4b13      	ldr	r3, [pc, #76]	@ (80134e4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8013496:	4604      	mov	r4, r0
 8013498:	f8b3 9000 	ldrh.w	r9, [r3]
 801349c:	f7fa f914 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 80134a0:	6803      	ldr	r3, [r0, #0]
 80134a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134a4:	4798      	blx	r3
 80134a6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80134aa:	2200      	movs	r2, #0
 80134ac:	4631      	mov	r1, r6
 80134ae:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80134b2:	2302      	movs	r3, #2
 80134b4:	4620      	mov	r0, r4
 80134b6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80134ba:	2301      	movs	r3, #1
 80134bc:	9305      	str	r3, [sp, #20]
 80134be:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80134c2:	9304      	str	r3, [sp, #16]
 80134c4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80134c8:	9303      	str	r3, [sp, #12]
 80134ca:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80134ce:	9302      	str	r3, [sp, #8]
 80134d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80134d4:	e9cd 8300 	strd	r8, r3, [sp]
 80134d8:	463b      	mov	r3, r7
 80134da:	47a8      	blx	r5
 80134dc:	b00b      	add	sp, #44	@ 0x2c
 80134de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134e2:	bf00      	nop
 80134e4:	240065fa 	.word	0x240065fa

080134e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80134e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134ec:	4698      	mov	r8, r3
 80134ee:	6803      	ldr	r3, [r0, #0]
 80134f0:	b087      	sub	sp, #28
 80134f2:	460e      	mov	r6, r1
 80134f4:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 80134f6:	4617      	mov	r7, r2
 80134f8:	4b0f      	ldr	r3, [pc, #60]	@ (8013538 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80134fa:	4604      	mov	r4, r0
 80134fc:	f8b3 9000 	ldrh.w	r9, [r3]
 8013500:	f7fa f8e2 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 8013504:	6803      	ldr	r3, [r0, #0]
 8013506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013508:	4798      	blx	r3
 801350a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 801350e:	463a      	mov	r2, r7
 8013510:	4631      	mov	r1, r6
 8013512:	f8cd 900c 	str.w	r9, [sp, #12]
 8013516:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801351a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801351e:	4620      	mov	r0, r4
 8013520:	9302      	str	r3, [sp, #8]
 8013522:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8013526:	9301      	str	r3, [sp, #4]
 8013528:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801352c:	9300      	str	r3, [sp, #0]
 801352e:	4643      	mov	r3, r8
 8013530:	47a8      	blx	r5
 8013532:	b007      	add	sp, #28
 8013534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013538:	240065fa 	.word	0x240065fa

0801353c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013540:	4604      	mov	r4, r0
 8013542:	b08f      	sub	sp, #60	@ 0x3c
 8013544:	4610      	mov	r0, r2
 8013546:	460d      	mov	r5, r1
 8013548:	4691      	mov	r9, r2
 801354a:	461e      	mov	r6, r3
 801354c:	f007 f9c2 	bl	801a8d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013550:	2800      	cmp	r0, #0
 8013552:	f000 809d 	beq.w	8013690 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8013556:	6823      	ldr	r3, [r4, #0]
 8013558:	4620      	mov	r0, r4
 801355a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80136f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801355e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8013562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013564:	4798      	blx	r3
 8013566:	6823      	ldr	r3, [r4, #0]
 8013568:	4620      	mov	r0, r4
 801356a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80136f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801356e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013570:	4798      	blx	r3
 8013572:	f8bb 3000 	ldrh.w	r3, [fp]
 8013576:	4f5c      	ldr	r7, [pc, #368]	@ (80136e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013578:	9301      	str	r3, [sp, #4]
 801357a:	f8ba 3000 	ldrh.w	r3, [sl]
 801357e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8013582:	4640      	mov	r0, r8
 8013584:	9302      	str	r3, [sp, #8]
 8013586:	883b      	ldrh	r3, [r7, #0]
 8013588:	9303      	str	r3, [sp, #12]
 801358a:	4b58      	ldr	r3, [pc, #352]	@ (80136ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801358c:	881a      	ldrh	r2, [r3, #0]
 801358e:	9305      	str	r3, [sp, #20]
 8013590:	9204      	str	r2, [sp, #16]
 8013592:	f007 fa33 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013596:	8038      	strh	r0, [r7, #0]
 8013598:	4640      	mov	r0, r8
 801359a:	f007 fa63 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801359e:	9b05      	ldr	r3, [sp, #20]
 80135a0:	b280      	uxth	r0, r0
 80135a2:	8018      	strh	r0, [r3, #0]
 80135a4:	4b52      	ldr	r3, [pc, #328]	@ (80136f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d174      	bne.n	8013696 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80135ac:	883b      	ldrh	r3, [r7, #0]
 80135ae:	f8aa 0000 	strh.w	r0, [sl]
 80135b2:	f8ab 3000 	strh.w	r3, [fp]
 80135b6:	4648      	mov	r0, r9
 80135b8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80135bc:	f007 f98a 	bl	801a8d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80135c0:	2200      	movs	r2, #0
 80135c2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80135c6:	4611      	mov	r1, r2
 80135c8:	4628      	mov	r0, r5
 80135ca:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80135ce:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80135d2:	f7fa fe00 	bl	800e1d6 <_ZN8touchgfx8Drawable5setXYEss>
 80135d6:	2301      	movs	r3, #1
 80135d8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80135dc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80135e0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	dd5c      	ble.n	80136a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80135e8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	dd58      	ble.n	80136a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80135f0:	462a      	mov	r2, r5
 80135f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80135f4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80135f8:	6851      	ldr	r1, [r2, #4]
 80135fa:	c303      	stmia	r3!, {r0, r1}
 80135fc:	4631      	mov	r1, r6
 80135fe:	a80a      	add	r0, sp, #40	@ 0x28
 8013600:	f7ff fbb0 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8013604:	4b38      	ldr	r3, [pc, #224]	@ (80136e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013606:	2100      	movs	r1, #0
 8013608:	f9b3 2000 	ldrsh.w	r2, [r3]
 801360c:	4b37      	ldr	r3, [pc, #220]	@ (80136ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801360e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8013612:	aa0a      	add	r2, sp, #40	@ 0x28
 8013614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013618:	910c      	str	r1, [sp, #48]	@ 0x30
 801361a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801361e:	ab08      	add	r3, sp, #32
 8013620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013624:	e883 0003 	stmia.w	r3, {r0, r1}
 8013628:	4618      	mov	r0, r3
 801362a:	a90c      	add	r1, sp, #48	@ 0x30
 801362c:	f7ff fb9a 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8013630:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8013632:	2b00      	cmp	r3, #0
 8013634:	d13c      	bne.n	80136b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8013636:	2000      	movs	r0, #0
 8013638:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 801363c:	2600      	movs	r6, #0
 801363e:	696b      	ldr	r3, [r5, #20]
 8013640:	a908      	add	r1, sp, #32
 8013642:	682a      	ldr	r2, [r5, #0]
 8013644:	4628      	mov	r0, r5
 8013646:	9305      	str	r3, [sp, #20]
 8013648:	616e      	str	r6, [r5, #20]
 801364a:	6892      	ldr	r2, [r2, #8]
 801364c:	4790      	blx	r2
 801364e:	9b05      	ldr	r3, [sp, #20]
 8013650:	4652      	mov	r2, sl
 8013652:	4649      	mov	r1, r9
 8013654:	616b      	str	r3, [r5, #20]
 8013656:	4628      	mov	r0, r5
 8013658:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 801365c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8013660:	f7fa fdb9 	bl	800e1d6 <_ZN8touchgfx8Drawable5setXYEss>
 8013664:	9a01      	ldr	r2, [sp, #4]
 8013666:	4b23      	ldr	r3, [pc, #140]	@ (80136f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8013668:	4620      	mov	r0, r4
 801366a:	801a      	strh	r2, [r3, #0]
 801366c:	9a02      	ldr	r2, [sp, #8]
 801366e:	4b22      	ldr	r3, [pc, #136]	@ (80136f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8013670:	801a      	strh	r2, [r3, #0]
 8013672:	9a03      	ldr	r2, [sp, #12]
 8013674:	4b1c      	ldr	r3, [pc, #112]	@ (80136e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013676:	801a      	strh	r2, [r3, #0]
 8013678:	4b1c      	ldr	r3, [pc, #112]	@ (80136ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801367a:	9a04      	ldr	r2, [sp, #16]
 801367c:	801a      	strh	r2, [r3, #0]
 801367e:	6823      	ldr	r3, [r4, #0]
 8013680:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8013684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013686:	4798      	blx	r3
 8013688:	6823      	ldr	r3, [r4, #0]
 801368a:	4620      	mov	r0, r4
 801368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801368e:	4798      	blx	r3
 8013690:	b00f      	add	sp, #60	@ 0x3c
 8013692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013696:	883b      	ldrh	r3, [r7, #0]
 8013698:	f8ab 0000 	strh.w	r0, [fp]
 801369c:	f8aa 3000 	strh.w	r3, [sl]
 80136a0:	e789      	b.n	80135b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80136a2:	462a      	mov	r2, r5
 80136a4:	ab0a      	add	r3, sp, #40	@ 0x28
 80136a6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80136aa:	6851      	ldr	r1, [r2, #4]
 80136ac:	c303      	stmia	r3!, {r0, r1}
 80136ae:	e7a9      	b.n	8013604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80136b0:	a807      	add	r0, sp, #28
 80136b2:	f007 fb19 	bl	801ace8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80136b6:	4606      	mov	r6, r0
 80136b8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80136ba:	6803      	ldr	r3, [r0, #0]
 80136bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136be:	4798      	blx	r3
 80136c0:	4286      	cmp	r6, r0
 80136c2:	d1b8      	bne.n	8013636 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80136c4:	f7fa f800 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 80136c8:	6803      	ldr	r3, [r0, #0]
 80136ca:	4606      	mov	r6, r0
 80136cc:	a807      	add	r0, sp, #28
 80136ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80136d0:	9305      	str	r3, [sp, #20]
 80136d2:	f007 fb09 	bl	801ace8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80136d6:	9b05      	ldr	r3, [sp, #20]
 80136d8:	4601      	mov	r1, r0
 80136da:	4630      	mov	r0, r6
 80136dc:	4798      	blx	r3
 80136de:	f080 0001 	eor.w	r0, r0, #1
 80136e2:	b2c0      	uxtb	r0, r0
 80136e4:	e7a8      	b.n	8013638 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80136e6:	bf00      	nop
 80136e8:	240065f4 	.word	0x240065f4
 80136ec:	240065f6 	.word	0x240065f6
 80136f0:	240065f8 	.word	0x240065f8
 80136f4:	240065fa 	.word	0x240065fa
 80136f8:	240065fc 	.word	0x240065fc

080136fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80136fc:	4b07      	ldr	r3, [pc, #28]	@ (801371c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80136fe:	b510      	push	{r4, lr}
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	4604      	mov	r4, r0
 8013704:	b13b      	cbz	r3, 8013716 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013706:	6803      	ldr	r3, [r0, #0]
 8013708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801370a:	4798      	blx	r3
 801370c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801370e:	4283      	cmp	r3, r0
 8013710:	d101      	bne.n	8013716 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013712:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8013714:	bd10      	pop	{r4, pc}
 8013716:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013718:	e7fc      	b.n	8013714 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801371a:	bf00      	nop
 801371c:	240065fe 	.word	0x240065fe

08013720 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8013720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013724:	461d      	mov	r5, r3
 8013726:	b08a      	sub	sp, #40	@ 0x28
 8013728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801372c:	4690      	mov	r8, r2
 801372e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8013732:	2400      	movs	r4, #0
 8013734:	4607      	mov	r7, r0
 8013736:	fb06 8505 	mla	r5, r6, r5, r8
 801373a:	9404      	str	r4, [sp, #16]
 801373c:	f88d 4020 	strb.w	r4, [sp, #32]
 8013740:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013744:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8013748:	f8ad 3018 	strh.w	r3, [sp, #24]
 801374c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013750:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013754:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013758:	f8ad 301c 	strh.w	r3, [sp, #28]
 801375c:	f7ff ffce 	bl	80136fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013760:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f8ad 601e 	strh.w	r6, [sp, #30]
 801376a:	a901      	add	r1, sp, #4
 801376c:	9505      	str	r5, [sp, #20]
 801376e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013772:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8013776:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801377a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801377e:	6803      	ldr	r3, [r0, #0]
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	4798      	blx	r3
 8013784:	b00a      	add	sp, #40	@ 0x28
 8013786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801378a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801378a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801378e:	b08b      	sub	sp, #44	@ 0x2c
 8013790:	2400      	movs	r4, #0
 8013792:	4691      	mov	r9, r2
 8013794:	461d      	mov	r5, r3
 8013796:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801379a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801379e:	4688      	mov	r8, r1
 80137a0:	4607      	mov	r7, r0
 80137a2:	9404      	str	r4, [sp, #16]
 80137a4:	fb06 9505 	mla	r5, r6, r5, r9
 80137a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80137ac:	f7ff ffa6 	bl	80136fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80137b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80137b4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f8ad 3018 	strh.w	r3, [sp, #24]
 80137be:	a901      	add	r1, sp, #4
 80137c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80137c4:	9505      	str	r5, [sp, #20]
 80137c6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80137ca:	f8ad 401c 	strh.w	r4, [sp, #28]
 80137ce:	f8ad 601e 	strh.w	r6, [sp, #30]
 80137d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80137d6:	f8ad 4020 	strh.w	r4, [sp, #32]
 80137da:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80137de:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80137e2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80137e6:	6803      	ldr	r3, [r0, #0]
 80137e8:	685b      	ldr	r3, [r3, #4]
 80137ea:	4798      	blx	r3
 80137ec:	b00b      	add	sp, #44	@ 0x2c
 80137ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080137f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80137f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f8:	b08a      	sub	sp, #40	@ 0x28
 80137fa:	4698      	mov	r8, r3
 80137fc:	2300      	movs	r3, #0
 80137fe:	4606      	mov	r6, r0
 8013800:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8013804:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8013808:	2d0b      	cmp	r5, #11
 801380a:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801380e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8013812:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8013816:	9304      	str	r3, [sp, #16]
 8013818:	d137      	bne.n	801388a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801381a:	2380      	movs	r3, #128	@ 0x80
 801381c:	f88d 0020 	strb.w	r0, [sp, #32]
 8013820:	4630      	mov	r0, r6
 8013822:	9203      	str	r2, [sp, #12]
 8013824:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013828:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801382c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013830:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013834:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013838:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801383c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013840:	f7ff ff5c 	bl	80136fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013844:	2c0b      	cmp	r4, #11
 8013846:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801384a:	f8ad 701e 	strh.w	r7, [sp, #30]
 801384e:	bf94      	ite	ls
 8013850:	4b19      	ldrls	r3, [pc, #100]	@ (80138b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8013852:	2100      	movhi	r1, #0
 8013854:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8013858:	bf98      	it	ls
 801385a:	5d19      	ldrbls	r1, [r3, r4]
 801385c:	fb02 8307 	mla	r3, r2, r7, r8
 8013860:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013864:	10c9      	asrs	r1, r1, #3
 8013866:	fb01 0003 	mla	r0, r1, r3, r0
 801386a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801386e:	a901      	add	r1, sp, #4
 8013870:	9005      	str	r0, [sp, #20]
 8013872:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8013876:	2300      	movs	r3, #0
 8013878:	6870      	ldr	r0, [r6, #4]
 801387a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801387e:	6803      	ldr	r3, [r0, #0]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	4798      	blx	r3
 8013884:	b00a      	add	sp, #40	@ 0x28
 8013886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801388a:	2d02      	cmp	r5, #2
 801388c:	d109      	bne.n	80138a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801388e:	28ff      	cmp	r0, #255	@ 0xff
 8013890:	d105      	bne.n	801389e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8013892:	f1bc 0f00 	cmp.w	ip, #0
 8013896:	bf14      	ite	ne
 8013898:	2340      	movne	r3, #64	@ 0x40
 801389a:	2320      	moveq	r3, #32
 801389c:	e7be      	b.n	801381c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801389e:	2340      	movs	r3, #64	@ 0x40
 80138a0:	e7bc      	b.n	801381c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80138a2:	28ff      	cmp	r0, #255	@ 0xff
 80138a4:	d105      	bne.n	80138b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80138a6:	f1bc 0f00 	cmp.w	ip, #0
 80138aa:	bf14      	ite	ne
 80138ac:	2304      	movne	r3, #4
 80138ae:	2301      	moveq	r3, #1
 80138b0:	e7b4      	b.n	801381c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80138b2:	2304      	movs	r3, #4
 80138b4:	e7b2      	b.n	801381c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80138b6:	bf00      	nop
 80138b8:	0802bdc8 	.word	0x0802bdc8

080138bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80138bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c0:	b08b      	sub	sp, #44	@ 0x2c
 80138c2:	461d      	mov	r5, r3
 80138c4:	2400      	movs	r4, #0
 80138c6:	4688      	mov	r8, r1
 80138c8:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80138cc:	4693      	mov	fp, r2
 80138ce:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80138d2:	4607      	mov	r7, r0
 80138d4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80138d8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80138dc:	9404      	str	r4, [sp, #16]
 80138de:	bf14      	ite	ne
 80138e0:	2308      	movne	r3, #8
 80138e2:	2302      	moveq	r3, #2
 80138e4:	fb05 b50a 	mla	r5, r5, sl, fp
 80138e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80138ec:	f7ff ff06 	bl	80136fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80138f0:	2e0b      	cmp	r6, #11
 80138f2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80138f6:	a901      	add	r1, sp, #4
 80138f8:	bf98      	it	ls
 80138fa:	4b13      	ldrls	r3, [pc, #76]	@ (8013948 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80138fc:	f8ad a01e 	strh.w	sl, [sp, #30]
 8013900:	bf98      	it	ls
 8013902:	5d9c      	ldrbls	r4, [r3, r6]
 8013904:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8013908:	10e4      	asrs	r4, r4, #3
 801390a:	f8cd 8010 	str.w	r8, [sp, #16]
 801390e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013912:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8013916:	fb04 0405 	mla	r4, r4, r5, r0
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013920:	2300      	movs	r3, #0
 8013922:	9405      	str	r4, [sp, #20]
 8013924:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013928:	f88d 9020 	strb.w	r9, [sp, #32]
 801392c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8013930:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8013934:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8013938:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 801393c:	6803      	ldr	r3, [r0, #0]
 801393e:	685b      	ldr	r3, [r3, #4]
 8013940:	4798      	blx	r3
 8013942:	b00b      	add	sp, #44	@ 0x2c
 8013944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013948:	0802bdc8 	.word	0x0802bdc8

0801394c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801394c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013950:	461e      	mov	r6, r3
 8013952:	4b0a      	ldr	r3, [pc, #40]	@ (801397c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013954:	460f      	mov	r7, r1
 8013956:	4690      	mov	r8, r2
 8013958:	881d      	ldrh	r5, [r3, #0]
 801395a:	f7f9 feb5 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 801395e:	6803      	ldr	r3, [r0, #0]
 8013960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013962:	4798      	blx	r3
 8013964:	280b      	cmp	r0, #11
 8013966:	bf96      	itet	ls
 8013968:	4b05      	ldrls	r3, [pc, #20]	@ (8013980 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801396a:	2400      	movhi	r4, #0
 801396c:	5c1c      	ldrbls	r4, [r3, r0]
 801396e:	fb08 7005 	mla	r0, r8, r5, r7
 8013972:	10e4      	asrs	r4, r4, #3
 8013974:	fb04 6000 	mla	r0, r4, r0, r6
 8013978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801397c:	240065fa 	.word	0x240065fa
 8013980:	0802bdc8 	.word	0x0802bdc8

08013984 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8013984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013986:	b08b      	sub	sp, #44	@ 0x2c
 8013988:	461f      	mov	r7, r3
 801398a:	4604      	mov	r4, r0
 801398c:	4616      	mov	r6, r2
 801398e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8013992:	2500      	movs	r5, #0
 8013994:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013998:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801399c:	9504      	str	r5, [sp, #16]
 801399e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80139a2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80139a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80139aa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80139ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80139b2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80139b6:	f88d 3020 	strb.w	r3, [sp, #32]
 80139ba:	f7ff fe9f 	bl	80136fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80139be:	463a      	mov	r2, r7
 80139c0:	4631      	mov	r1, r6
 80139c2:	4603      	mov	r3, r0
 80139c4:	4620      	mov	r0, r4
 80139c6:	f7ff ffc1 	bl	801394c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80139ca:	4b0e      	ldr	r3, [pc, #56]	@ (8013a04 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80139cc:	9005      	str	r0, [sp, #20]
 80139ce:	881b      	ldrh	r3, [r3, #0]
 80139d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80139d4:	f7f9 fe78 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 80139d8:	6803      	ldr	r3, [r0, #0]
 80139da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139dc:	4798      	blx	r3
 80139de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80139e0:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80139e4:	a901      	add	r1, sp, #4
 80139e6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80139ea:	9304      	str	r3, [sp, #16]
 80139ec:	6860      	ldr	r0, [r4, #4]
 80139ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80139f2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80139f6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80139fa:	6803      	ldr	r3, [r0, #0]
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	4798      	blx	r3
 8013a00:	b00b      	add	sp, #44	@ 0x2c
 8013a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a04:	240065fa 	.word	0x240065fa

08013a08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a0a:	b08d      	sub	sp, #52	@ 0x34
 8013a0c:	2501      	movs	r5, #1
 8013a0e:	4604      	mov	r4, r0
 8013a10:	466b      	mov	r3, sp
 8013a12:	9503      	str	r5, [sp, #12]
 8013a14:	e883 0006 	stmia.w	r3, {r1, r2}
 8013a18:	2300      	movs	r3, #0
 8013a1a:	f8bd 6000 	ldrh.w	r6, [sp]
 8013a1e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013a22:	9306      	str	r3, [sp, #24]
 8013a24:	6803      	ldr	r3, [r0, #0]
 8013a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013a28:	4798      	blx	r3
 8013a2a:	463a      	mov	r2, r7
 8013a2c:	4631      	mov	r1, r6
 8013a2e:	4603      	mov	r3, r0
 8013a30:	4620      	mov	r0, r4
 8013a32:	f7ff ff8b 	bl	801394c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013a36:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013a38:	9004      	str	r0, [sp, #16]
 8013a3a:	9307      	str	r3, [sp, #28]
 8013a3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013a40:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013a44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013a48:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8013a88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013a4e:	881b      	ldrh	r3, [r3, #0]
 8013a50:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013a54:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013a58:	f7f9 fe36 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 8013a5c:	6803      	ldr	r3, [r0, #0]
 8013a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a60:	4798      	blx	r3
 8013a62:	23ff      	movs	r3, #255	@ 0xff
 8013a64:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8013a68:	a903      	add	r1, sp, #12
 8013a6a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8013a6e:	6860      	ldr	r0, [r4, #4]
 8013a70:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8013a74:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8013a78:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8013a7c:	6803      	ldr	r3, [r0, #0]
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	4798      	blx	r3
 8013a82:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8013a84:	b00d      	add	sp, #52	@ 0x34
 8013a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a88:	240065fa 	.word	0x240065fa

08013a8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a90:	b08c      	sub	sp, #48	@ 0x30
 8013a92:	461e      	mov	r6, r3
 8013a94:	2300      	movs	r3, #0
 8013a96:	4604      	mov	r4, r0
 8013a98:	466d      	mov	r5, sp
 8013a9a:	9306      	str	r3, [sp, #24]
 8013a9c:	6803      	ldr	r3, [r0, #0]
 8013a9e:	e885 0006 	stmia.w	r5, {r1, r2}
 8013aa2:	2501      	movs	r5, #1
 8013aa4:	f8bd 7000 	ldrh.w	r7, [sp]
 8013aa8:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013aac:	9503      	str	r5, [sp, #12]
 8013aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ab0:	4798      	blx	r3
 8013ab2:	4642      	mov	r2, r8
 8013ab4:	4639      	mov	r1, r7
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f7ff ff47 	bl	801394c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013abe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013ac2:	9004      	str	r0, [sp, #16]
 8013ac4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013ac8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013acc:	9607      	str	r6, [sp, #28]
 8013ace:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013ad2:	4b10      	ldr	r3, [pc, #64]	@ (8013b14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013ad4:	881b      	ldrh	r3, [r3, #0]
 8013ad6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013ada:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013adc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013ae0:	f7f9 fdf2 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 8013ae4:	6803      	ldr	r3, [r0, #0]
 8013ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ae8:	4798      	blx	r3
 8013aea:	23ff      	movs	r3, #255	@ 0xff
 8013aec:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8013af0:	a903      	add	r1, sp, #12
 8013af2:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8013af6:	6860      	ldr	r0, [r4, #4]
 8013af8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8013afc:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8013b00:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8013b04:	6803      	ldr	r3, [r0, #0]
 8013b06:	685b      	ldr	r3, [r3, #4]
 8013b08:	4798      	blx	r3
 8013b0a:	4630      	mov	r0, r6
 8013b0c:	b00c      	add	sp, #48	@ 0x30
 8013b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b12:	bf00      	nop
 8013b14:	240065fa 	.word	0x240065fa

08013b18 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b1a:	b085      	sub	sp, #20
 8013b1c:	4605      	mov	r5, r0
 8013b1e:	ac02      	add	r4, sp, #8
 8013b20:	e884 0006 	stmia.w	r4, {r1, r2}
 8013b24:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013b28:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013b2c:	f7ff fde6 	bl	80136fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013b30:	4631      	mov	r1, r6
 8013b32:	4603      	mov	r3, r0
 8013b34:	463a      	mov	r2, r7
 8013b36:	4628      	mov	r0, r5
 8013b38:	f7ff ff08 	bl	801394c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013b3c:	4a05      	ldr	r2, [pc, #20]	@ (8013b54 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013b3e:	682b      	ldr	r3, [r5, #0]
 8013b40:	8812      	ldrh	r2, [r2, #0]
 8013b42:	9200      	str	r2, [sp, #0]
 8013b44:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 8013b46:	4603      	mov	r3, r0
 8013b48:	4628      	mov	r0, r5
 8013b4a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013b4e:	47b0      	blx	r6
 8013b50:	b005      	add	sp, #20
 8013b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b54:	240065fa 	.word	0x240065fa

08013b58 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013b58:	b570      	push	{r4, r5, r6, lr}
 8013b5a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8013b5e:	4604      	mov	r4, r0
 8013b60:	b19b      	cbz	r3, 8013b8a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013b62:	2002      	movs	r0, #2
 8013b64:	f7fc f996 	bl	800fe94 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013b68:	2300      	movs	r3, #0
 8013b6a:	4620      	mov	r0, r4
 8013b6c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013b70:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8013b74:	6823      	ldr	r3, [r4, #0]
 8013b76:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 8013b7a:	f7ff fdbf 	bl	80136fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013b7e:	4601      	mov	r1, r0
 8013b80:	4620      	mov	r0, r4
 8013b82:	462b      	mov	r3, r5
 8013b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b88:	4718      	bx	r3
 8013b8a:	bd70      	pop	{r4, r5, r6, pc}

08013b8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013b8c:	b538      	push	{r3, r4, r5, lr}
 8013b8e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8013b92:	4604      	mov	r4, r0
 8013b94:	460d      	mov	r5, r1
 8013b96:	428b      	cmp	r3, r1
 8013b98:	d006      	beq.n	8013ba8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013b9a:	6803      	ldr	r3, [r0, #0]
 8013b9c:	b929      	cbnz	r1, 8013baa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013ba2:	4798      	blx	r3
 8013ba4:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8013ba8:	bd38      	pop	{r3, r4, r5, pc}
 8013baa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013bae:	e7f8      	b.n	8013ba2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013bb0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8013be4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 8013bb2:	b510      	push	{r4, lr}
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	b953      	cbnz	r3, 8013bd0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8013bba:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8013bbe:	b93b      	cbnz	r3, 8013bd0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8013bc0:	6840      	ldr	r0, [r0, #4]
 8013bc2:	f000 f90d 	bl	8013de0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013bc6:	b118      	cbz	r0, 8013bd0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8013bc8:	6862      	ldr	r2, [r4, #4]
 8013bca:	7a53      	ldrb	r3, [r2, #9]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d0fc      	beq.n	8013bca <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 8013bd0:	f7fc fc5c 	bl	801048c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	2100      	movs	r1, #0
 8013bd8:	f7ff ffd8 	bl	8013b8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013bdc:	4620      	mov	r0, r4
 8013bde:	f7ff fd8d 	bl	80136fc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013be2:	bd10      	pop	{r4, pc}
 8013be4:	240065fe 	.word	0x240065fe

08013be8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013be8:	4770      	bx	lr

08013bea <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8013bea:	2000      	movs	r0, #0
 8013bec:	4770      	bx	lr

08013bee <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013bee:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013bf2:	1a13      	subs	r3, r2, r0
 8013bf4:	4258      	negs	r0, r3
 8013bf6:	4158      	adcs	r0, r3
 8013bf8:	4770      	bx	lr

08013bfa <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013bfa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013bfe:	1a9b      	subs	r3, r3, r2
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	bfdc      	itt	le
 8013c04:	6882      	ldrle	r2, [r0, #8]
 8013c06:	189b      	addle	r3, r3, r2
 8013c08:	2b01      	cmp	r3, #1
 8013c0a:	bfcc      	ite	gt
 8013c0c:	2000      	movgt	r0, #0
 8013c0e:	2001      	movle	r0, #1
 8013c10:	4770      	bx	lr

08013c12 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013c12:	6902      	ldr	r2, [r0, #16]
 8013c14:	6843      	ldr	r3, [r0, #4]
 8013c16:	2024      	movs	r0, #36	@ 0x24
 8013c18:	fb00 3002 	mla	r0, r0, r2, r3
 8013c1c:	4770      	bx	lr

08013c1e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013c1e:	6803      	ldr	r3, [r0, #0]
 8013c20:	691b      	ldr	r3, [r3, #16]
 8013c22:	4718      	bx	r3

08013c24 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013c24:	2301      	movs	r3, #1
 8013c26:	b570      	push	{r4, r5, r6, lr}
 8013c28:	7203      	strb	r3, [r0, #8]
 8013c2a:	4604      	mov	r4, r0
 8013c2c:	6840      	ldr	r0, [r0, #4]
 8013c2e:	6803      	ldr	r3, [r0, #0]
 8013c30:	699b      	ldr	r3, [r3, #24]
 8013c32:	4798      	blx	r3
 8013c34:	6803      	ldr	r3, [r0, #0]
 8013c36:	4605      	mov	r5, r0
 8013c38:	2b40      	cmp	r3, #64	@ 0x40
 8013c3a:	d00c      	beq.n	8013c56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013c3c:	d810      	bhi.n	8013c60 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013c3e:	2b04      	cmp	r3, #4
 8013c40:	d01d      	beq.n	8013c7e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013c42:	d804      	bhi.n	8013c4e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013c44:	2b01      	cmp	r3, #1
 8013c46:	d006      	beq.n	8013c56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013c48:	2b02      	cmp	r3, #2
 8013c4a:	d02c      	beq.n	8013ca6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013c4c:	bd70      	pop	{r4, r5, r6, pc}
 8013c4e:	2b08      	cmp	r3, #8
 8013c50:	d01d      	beq.n	8013c8e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013c52:	2b20      	cmp	r3, #32
 8013c54:	d1fa      	bne.n	8013c4c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013c56:	6823      	ldr	r3, [r4, #0]
 8013c58:	4620      	mov	r0, r4
 8013c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c5c:	4798      	blx	r3
 8013c5e:	e013      	b.n	8013c88 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013c64:	d0f7      	beq.n	8013c56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013c66:	d804      	bhi.n	8013c72 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013c68:	2b80      	cmp	r3, #128	@ 0x80
 8013c6a:	d0f4      	beq.n	8013c56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c70:	e7f0      	b.n	8013c54 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013c76:	d0ee      	beq.n	8013c56 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013c7c:	e7e5      	b.n	8013c4a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013c7e:	6823      	ldr	r3, [r4, #0]
 8013c80:	7f01      	ldrb	r1, [r0, #28]
 8013c82:	4620      	mov	r0, r4
 8013c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c86:	4798      	blx	r3
 8013c88:	6823      	ldr	r3, [r4, #0]
 8013c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c8c:	e006      	b.n	8013c9c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013c8e:	6823      	ldr	r3, [r4, #0]
 8013c90:	7f01      	ldrb	r1, [r0, #28]
 8013c92:	4620      	mov	r0, r4
 8013c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c96:	4798      	blx	r3
 8013c98:	6823      	ldr	r3, [r4, #0]
 8013c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013c9c:	4629      	mov	r1, r5
 8013c9e:	4620      	mov	r0, r4
 8013ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ca4:	4718      	bx	r3
 8013ca6:	6823      	ldr	r3, [r4, #0]
 8013ca8:	4620      	mov	r0, r4
 8013caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013cac:	4798      	blx	r3
 8013cae:	e7f3      	b.n	8013c98 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013cb0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013cb0:	4770      	bx	lr

08013cb2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013cb2:	4770      	bx	lr

08013cb4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013cb4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013cb8:	b510      	push	{r4, lr}
 8013cba:	1ad2      	subs	r2, r2, r3
 8013cbc:	2a00      	cmp	r2, #0
 8013cbe:	bfdc      	itt	le
 8013cc0:	6884      	ldrle	r4, [r0, #8]
 8013cc2:	1912      	addle	r2, r2, r4
 8013cc4:	2a01      	cmp	r2, #1
 8013cc6:	dd16      	ble.n	8013cf6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013cc8:	6842      	ldr	r2, [r0, #4]
 8013cca:	2424      	movs	r4, #36	@ 0x24
 8013ccc:	fb04 2303 	mla	r3, r4, r3, r2
 8013cd0:	f101 0220 	add.w	r2, r1, #32
 8013cd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8013cd8:	4291      	cmp	r1, r2
 8013cda:	f843 4b04 	str.w	r4, [r3], #4
 8013cde:	d1f9      	bne.n	8013cd4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013ce0:	780a      	ldrb	r2, [r1, #0]
 8013ce2:	701a      	strb	r2, [r3, #0]
 8013ce4:	68c3      	ldr	r3, [r0, #12]
 8013ce6:	6882      	ldr	r2, [r0, #8]
 8013ce8:	f3bf 8f5b 	dmb	ish
 8013cec:	3301      	adds	r3, #1
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	bfd8      	it	le
 8013cf2:	1a9b      	suble	r3, r3, r2
 8013cf4:	60c3      	str	r3, [r0, #12]
 8013cf6:	bd10      	pop	{r4, pc}

08013cf8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013cf8:	6903      	ldr	r3, [r0, #16]
 8013cfa:	6882      	ldr	r2, [r0, #8]
 8013cfc:	f3bf 8f5b 	dmb	ish
 8013d00:	3301      	adds	r3, #1
 8013d02:	429a      	cmp	r2, r3
 8013d04:	bfd8      	it	le
 8013d06:	1a9b      	suble	r3, r3, r2
 8013d08:	6103      	str	r3, [r0, #16]
 8013d0a:	4770      	bx	lr

08013d0c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013d0c:	b570      	push	{r4, r5, r6, lr}
 8013d0e:	4604      	mov	r4, r0
 8013d10:	460e      	mov	r6, r1
 8013d12:	6860      	ldr	r0, [r4, #4]
 8013d14:	6803      	ldr	r3, [r0, #0]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	4798      	blx	r3
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	d1f9      	bne.n	8013d12 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8013d54 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013d20:	6828      	ldr	r0, [r5, #0]
 8013d22:	6803      	ldr	r3, [r0, #0]
 8013d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d28:	4798      	blx	r3
 8013d2a:	f7fc fbc9 	bl	80104c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013d2e:	6828      	ldr	r0, [r5, #0]
 8013d30:	2101      	movs	r1, #1
 8013d32:	f7ff ff2b 	bl	8013b8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013d36:	6860      	ldr	r0, [r4, #4]
 8013d38:	4631      	mov	r1, r6
 8013d3a:	6803      	ldr	r3, [r0, #0]
 8013d3c:	689b      	ldr	r3, [r3, #8]
 8013d3e:	4798      	blx	r3
 8013d40:	6823      	ldr	r3, [r4, #0]
 8013d42:	4620      	mov	r0, r4
 8013d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d46:	4798      	blx	r3
 8013d48:	6828      	ldr	r0, [r5, #0]
 8013d4a:	6803      	ldr	r3, [r0, #0]
 8013d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013d52:	4718      	bx	r3
 8013d54:	24006600 	.word	0x24006600

08013d58 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013d58:	b508      	push	{r3, lr}
 8013d5a:	f7fc fb97 	bl	801048c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013d5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013d62:	f7fc bba1 	b.w	80104a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013d66 <_ZN8touchgfx13DMA_Interface5startEv>:
 8013d66:	b510      	push	{r4, lr}
 8013d68:	4604      	mov	r4, r0
 8013d6a:	6840      	ldr	r0, [r0, #4]
 8013d6c:	6803      	ldr	r3, [r0, #0]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	4798      	blx	r3
 8013d72:	b948      	cbnz	r0, 8013d88 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013d74:	7a63      	ldrb	r3, [r4, #9]
 8013d76:	b13b      	cbz	r3, 8013d88 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013d78:	7a23      	ldrb	r3, [r4, #8]
 8013d7a:	b92b      	cbnz	r3, 8013d88 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013d7c:	6823      	ldr	r3, [r4, #0]
 8013d7e:	4620      	mov	r0, r4
 8013d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d86:	4718      	bx	r3
 8013d88:	bd10      	pop	{r4, pc}

08013d8a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013d8a:	b570      	push	{r4, r5, r6, lr}
 8013d8c:	4604      	mov	r4, r0
 8013d8e:	6840      	ldr	r0, [r0, #4]
 8013d90:	6803      	ldr	r3, [r0, #0]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4798      	blx	r3
 8013d96:	4605      	mov	r5, r0
 8013d98:	b930      	cbnz	r0, 8013da8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013d9a:	7a23      	ldrb	r3, [r4, #8]
 8013d9c:	b123      	cbz	r3, 8013da8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013d9e:	6860      	ldr	r0, [r4, #4]
 8013da0:	6803      	ldr	r3, [r0, #0]
 8013da2:	695b      	ldr	r3, [r3, #20]
 8013da4:	4798      	blx	r3
 8013da6:	7225      	strb	r5, [r4, #8]
 8013da8:	6860      	ldr	r0, [r4, #4]
 8013daa:	6803      	ldr	r3, [r0, #0]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	4798      	blx	r3
 8013db0:	b928      	cbnz	r0, 8013dbe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013db2:	6823      	ldr	r3, [r4, #0]
 8013db4:	4620      	mov	r0, r4
 8013db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dbc:	4718      	bx	r3
 8013dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dc2:	f7fc bb89 	b.w	80104d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08013dc8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013dc8:	b510      	push	{r4, lr}
 8013dca:	6082      	str	r2, [r0, #8]
 8013dcc:	2200      	movs	r2, #0
 8013dce:	4c03      	ldr	r4, [pc, #12]	@ (8013ddc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013dd0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013dd4:	e9c0 4100 	strd	r4, r1, [r0]
 8013dd8:	bd10      	pop	{r4, pc}
 8013dda:	bf00      	nop
 8013ddc:	0802bf18 	.word	0x0802bf18

08013de0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013de0:	6840      	ldr	r0, [r0, #4]
 8013de2:	6803      	ldr	r3, [r0, #0]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	4718      	bx	r3

08013de8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8013de8:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8013dec:	4770      	bx	lr

08013dee <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8013dee:	b510      	push	{r4, lr}
 8013df0:	4604      	mov	r4, r0
 8013df2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013df4:	b150      	cbz	r0, 8013e0c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013df6:	6803      	ldr	r3, [r0, #0]
 8013df8:	68db      	ldr	r3, [r3, #12]
 8013dfa:	4798      	blx	r3
 8013dfc:	b130      	cbz	r0, 8013e0c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013dfe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013e00:	4621      	mov	r1, r4
 8013e02:	6803      	ldr	r3, [r0, #0]
 8013e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e08:	689b      	ldr	r3, [r3, #8]
 8013e0a:	4718      	bx	r3
 8013e0c:	bd10      	pop	{r4, pc}

08013e0e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8013e0e:	790b      	ldrb	r3, [r1, #4]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	bf0c      	ite	eq
 8013e14:	2301      	moveq	r3, #1
 8013e16:	2300      	movne	r3, #0
 8013e18:	b570      	push	{r4, r5, r6, lr}
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8013e20:	460e      	mov	r6, r1
 8013e22:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8013e26:	d109      	bne.n	8013e3c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8013e28:	b14d      	cbz	r5, 8013e3e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8013e2a:	7933      	ldrb	r3, [r6, #4]
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d10c      	bne.n	8013e4a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013e30:	6823      	ldr	r3, [r4, #0]
 8013e32:	4620      	mov	r0, r4
 8013e34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e3a:	4718      	bx	r3
 8013e3c:	b12d      	cbz	r5, 8013e4a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013e3e:	6823      	ldr	r3, [r4, #0]
 8013e40:	4620      	mov	r0, r4
 8013e42:	695b      	ldr	r3, [r3, #20]
 8013e44:	4798      	blx	r3
 8013e46:	2d00      	cmp	r5, #0
 8013e48:	d1ef      	bne.n	8013e2a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8013e4a:	bd70      	pop	{r4, r5, r6, pc}

08013e4c <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8013e4c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8013e50:	4770      	bx	lr

08013e52 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8013e52:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8013e56:	4770      	bx	lr

08013e58 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8013e58:	6802      	ldr	r2, [r0, #0]
 8013e5a:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8013e5e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8013e60:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8013e64:	4710      	bx	r2

08013e66 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8013e66:	6802      	ldr	r2, [r0, #0]
 8013e68:	eef0 0a40 	vmov.f32	s1, s0
 8013e6c:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8013e70:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8013e72:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8013e76:	4710      	bx	r2

08013e78 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8013e78:	6802      	ldr	r2, [r0, #0]
 8013e7a:	eeb0 1a40 	vmov.f32	s2, s0
 8013e7e:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8013e82:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8013e84:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8013e88:	4710      	bx	r2

08013e8a <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8013e8a:	6802      	ldr	r2, [r0, #0]
 8013e8c:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8013e90:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8013e92:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8013e96:	4710      	bx	r2

08013e98 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8013e98:	6802      	ldr	r2, [r0, #0]
 8013e9a:	eef0 0a40 	vmov.f32	s1, s0
 8013e9e:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8013ea2:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8013ea4:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8013ea8:	4710      	bx	r2

08013eaa <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8013eaa:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8013eae:	4770      	bx	lr

08013eb0 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8013eb0:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8013eb4:	4770      	bx	lr

08013eb6 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 8013eb6:	ed90 0a0f 	vldr	s0, [r0, #60]	@ 0x3c
 8013eba:	4770      	bx	lr

08013ebc <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8013ebc:	ed90 0a10 	vldr	s0, [r0, #64]	@ 0x40
 8013ec0:	4770      	bx	lr

08013ec2 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8013ec2:	ed90 0a11 	vldr	s0, [r0, #68]	@ 0x44
 8013ec6:	4770      	bx	lr

08013ec8 <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 8013ec8:	ed90 0a12 	vldr	s0, [r0, #72]	@ 0x48
 8013ecc:	4770      	bx	lr

08013ece <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8013ece:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8013ed2:	4770      	bx	lr

08013ed4 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8013ed4:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 8013ed8:	4770      	bx	lr

08013eda <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8013eda:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 8013ede:	4770      	bx	lr

08013ee0 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8013ee0:	ed90 0a16 	vldr	s0, [r0, #88]	@ 0x58
 8013ee4:	4770      	bx	lr

08013ee6 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8013ee6:	ee07 2a90 	vmov	s15, r2
 8013eea:	6803      	ldr	r3, [r0, #0]
 8013eec:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013ef0:	ee07 1a90 	vmov	s15, r1
 8013ef4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013ef8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013efc:	4718      	bx	r3

08013efe <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8013efe:	ed90 0a0b 	vldr	s0, [r0, #44]	@ 0x2c
 8013f02:	4770      	bx	lr

08013f04 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8013f04:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8013f08:	4770      	bx	lr

08013f0a <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8013f0a:	ed90 0a17 	vldr	s0, [r0, #92]	@ 0x5c
 8013f0e:	4770      	bx	lr

08013f10 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8013f10:	ed90 0a1a 	vldr	s0, [r0, #104]	@ 0x68
 8013f14:	4770      	bx	lr

08013f16 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8013f16:	ed90 0a1d 	vldr	s0, [r0, #116]	@ 0x74
 8013f1a:	4770      	bx	lr

08013f1c <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8013f1c:	ed90 0a20 	vldr	s0, [r0, #128]	@ 0x80
 8013f20:	4770      	bx	lr

08013f22 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8013f22:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 8013f26:	4770      	bx	lr

08013f28 <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8013f28:	ed90 0a1b 	vldr	s0, [r0, #108]	@ 0x6c
 8013f2c:	4770      	bx	lr

08013f2e <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8013f2e:	ed90 0a1e 	vldr	s0, [r0, #120]	@ 0x78
 8013f32:	4770      	bx	lr

08013f34 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8013f34:	ed90 0a21 	vldr	s0, [r0, #132]	@ 0x84
 8013f38:	4770      	bx	lr

08013f3a <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8013f3a:	ed90 0a19 	vldr	s0, [r0, #100]	@ 0x64
 8013f3e:	4770      	bx	lr

08013f40 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8013f40:	ed90 0a1c 	vldr	s0, [r0, #112]	@ 0x70
 8013f44:	4770      	bx	lr

08013f46 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8013f46:	ed90 0a1f 	vldr	s0, [r0, #124]	@ 0x7c
 8013f4a:	4770      	bx	lr

08013f4c <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8013f4c:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8013f50:	4770      	bx	lr

08013f52 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>:
 8013f52:	f890 00ea 	ldrb.w	r0, [r0, #234]	@ 0xea
 8013f56:	4770      	bx	lr

08013f58 <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>:
 8013f58:	b510      	push	{r4, lr}
 8013f5a:	2414      	movs	r4, #20
 8013f5c:	fb04 0101 	mla	r1, r4, r1, r0
 8013f60:	2001      	movs	r0, #1
 8013f62:	f8a1 309c 	strh.w	r3, [r1, #156]	@ 0x9c
 8013f66:	9b02      	ldr	r3, [sp, #8]
 8013f68:	f881 0090 	strb.w	r0, [r1, #144]	@ 0x90
 8013f6c:	ed81 0a26 	vstr	s0, [r1, #152]	@ 0x98
 8013f70:	f8a1 209e 	strh.w	r2, [r1, #158]	@ 0x9e
 8013f74:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
 8013f78:	bd10      	pop	{r4, pc}

08013f7a <_ZN8touchgfx22AnimationTextureMapper16getAnimationStepEv>:
 8013f7a:	f8b0 00e8 	ldrh.w	r0, [r0, #232]	@ 0xe8
 8013f7e:	4770      	bx	lr

08013f80 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>:
 8013f80:	b510      	push	{r4, lr}
 8013f82:	f890 30ea 	ldrb.w	r3, [r0, #234]	@ 0xea
 8013f86:	4604      	mov	r4, r0
 8013f88:	b92b      	cbnz	r3, 8013f96 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x16>
 8013f8a:	f003 f943 	bl	8017214 <_ZN8touchgfx11Application11getInstanceEv>
 8013f8e:	4621      	mov	r1, r4
 8013f90:	3004      	adds	r0, #4
 8013f92:	f003 fa0d 	bl	80173b0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8013f96:	2300      	movs	r3, #0
 8013f98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013f9c:	f8a4 30e8 	strh.w	r3, [r4, #232]	@ 0xe8
 8013fa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013fa2:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8013fa6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8013fa8:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8013fac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013fae:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
 8013fb2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013fb4:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 8013fb8:	2301      	movs	r3, #1
 8013fba:	f884 30ea 	strb.w	r3, [r4, #234]	@ 0xea
 8013fbe:	4623      	mov	r3, r4
 8013fc0:	f893 1090 	ldrb.w	r1, [r3, #144]	@ 0x90
 8013fc4:	b129      	cbz	r1, 8013fd2 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x52>
 8013fc6:	f8b3 109c 	ldrh.w	r1, [r3, #156]	@ 0x9c
 8013fca:	f8b3 009e 	ldrh.w	r0, [r3, #158]	@ 0x9e
 8013fce:	42c1      	cmn	r1, r0
 8013fd0:	d108      	bne.n	8013fe4 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x64>
 8013fd2:	3314      	adds	r3, #20
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d1f3      	bne.n	8013fc0 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x40>
 8013fd8:	6823      	ldr	r3, [r4, #0]
 8013fda:	4620      	mov	r0, r4
 8013fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fe2:	4718      	bx	r3
 8013fe4:	bd10      	pop	{r4, pc}

08013fe6 <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>:
 8013fe6:	b510      	push	{r4, lr}
 8013fe8:	4604      	mov	r4, r0
 8013fea:	f003 f913 	bl	8017214 <_ZN8touchgfx11Application11getInstanceEv>
 8013fee:	3004      	adds	r0, #4
 8013ff0:	4621      	mov	r1, r4
 8013ff2:	f003 f934 	bl	801725e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	f884 30ea 	strb.w	r3, [r4, #234]	@ 0xea
 8013ffc:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 8014000:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 8014004:	f884 30b8 	strb.w	r3, [r4, #184]	@ 0xb8
 8014008:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
 801400c:	bd10      	pop	{r4, pc}

0801400e <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 801400e:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
 8014012:	edc0 0a0c 	vstr	s1, [r0, #48]	@ 0x30
 8014016:	f000 b9b5 	b.w	8014384 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801401a <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 801401a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801401e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014026:	fe30 0a27 	vselgt.f32	s0, s0, s15
 801402a:	ed80 0a16 	vstr	s0, [r0, #88]	@ 0x58
 801402e:	f000 b9a9 	b.w	8014384 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08014032 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8014032:	ed80 0a14 	vstr	s0, [r0, #80]	@ 0x50
 8014036:	edc0 0a15 	vstr	s1, [r0, #84]	@ 0x54
 801403a:	f000 b9a3 	b.w	8014384 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801403e <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 801403e:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 8014042:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8014046:	f000 b99d 	b.w	8014384 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801404a <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 801404a:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 801404e:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8014052:	ed80 1a13 	vstr	s2, [r0, #76]	@ 0x4c
 8014056:	f000 b995 	b.w	8014384 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
	...

0801405c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv>:
 801405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014060:	ed2d 8b06 	vpush	{d8-d10}
 8014064:	f890 30ea 	ldrb.w	r3, [r0, #234]	@ 0xea
 8014068:	b083      	sub	sp, #12
 801406a:	4604      	mov	r4, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	f000 80c3 	beq.w	80141f8 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 8014072:	2600      	movs	r6, #0
 8014074:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	@ 0xe8
 8014078:	ed90 8a0d 	vldr	s16, [r0, #52]	@ 0x34
 801407c:	4605      	mov	r5, r0
 801407e:	3301      	adds	r3, #1
 8014080:	edd0 8a0e 	vldr	s17, [r0, #56]	@ 0x38
 8014084:	ed90 9a0f 	vldr	s18, [r0, #60]	@ 0x3c
 8014088:	46b2      	mov	sl, r6
 801408a:	edd0 9a10 	vldr	s19, [r0, #64]	@ 0x40
 801408e:	46b0      	mov	r8, r6
 8014090:	46b3      	mov	fp, r6
 8014092:	eddf aa5c 	vldr	s21, [pc, #368]	@ 8014204 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1a8>
 8014096:	f8a0 30e8 	strh.w	r3, [r0, #232]	@ 0xe8
 801409a:	9601      	str	r6, [sp, #4]
 801409c:	f895 9090 	ldrb.w	r9, [r5, #144]	@ 0x90
 80140a0:	f1b9 0f00 	cmp.w	r9, #0
 80140a4:	d049      	beq.n	801413a <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xde>
 80140a6:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	@ 0xe8
 80140aa:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
 80140ae:	4298      	cmp	r0, r3
 80140b0:	d337      	bcc.n	8014122 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc6>
 80140b2:	ed95 7a26 	vldr	s14, [r5, #152]	@ 0x98
 80140b6:	edd5 7a25 	vldr	s15, [r5, #148]	@ 0x94
 80140ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140c2:	dd73      	ble.n	80141ac <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x150>
 80140c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140c8:	ed9f aa4f 	vldr	s20, [pc, #316]	@ 8014208 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1ac>
 80140cc:	ee67 7aaa 	vmul.f32	s15, s15, s21
 80140d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140d4:	ee17 2a90 	vmov	r2, s15
 80140d8:	b212      	sxth	r2, r2
 80140da:	1ac0      	subs	r0, r0, r3
 80140dc:	2100      	movs	r1, #0
 80140de:	f8b5 309e 	ldrh.w	r3, [r5, #158]	@ 0x9e
 80140e2:	b280      	uxth	r0, r0
 80140e4:	f8d5 70a0 	ldr.w	r7, [r5, #160]	@ 0xa0
 80140e8:	47b8      	blx	r7
 80140ea:	ee07 0a90 	vmov	s15, r0
 80140ee:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80140f2:	f1b8 0f02 	cmp.w	r8, #2
 80140f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80140fa:	eec7 7a2a 	vdiv.f32	s15, s14, s21
 80140fe:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8014102:	d05f      	beq.n	80141c4 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x168>
 8014104:	f1b8 0f03 	cmp.w	r8, #3
 8014108:	d061      	beq.n	80141ce <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x172>
 801410a:	f1b8 0f01 	cmp.w	r8, #1
 801410e:	bf15      	itete	ne
 8014110:	ed94 8a25 	vldrne	s16, [r4, #148]	@ 0x94
 8014114:	edd4 8a2a 	vldreq	s17, [r4, #168]	@ 0xa8
 8014118:	ee37 8a88 	vaddne.f32	s16, s15, s16
 801411c:	ee77 8aa8 	vaddeq.f32	s17, s15, s17
 8014120:	46ca      	mov	sl, r9
 8014122:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
 8014126:	f8b5 109e 	ldrh.w	r1, [r5, #158]	@ 0x9e
 801412a:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	@ 0xe8
 801412e:	440b      	add	r3, r1
 8014130:	429a      	cmp	r2, r3
 8014132:	bf34      	ite	cc
 8014134:	464e      	movcc	r6, r9
 8014136:	f885 b090 	strbcs.w	fp, [r5, #144]	@ 0x90
 801413a:	f108 0801 	add.w	r8, r8, #1
 801413e:	3514      	adds	r5, #20
 8014140:	f1b8 0f04 	cmp.w	r8, #4
 8014144:	d1aa      	bne.n	801409c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x40>
 8014146:	f1ba 0f00 	cmp.w	sl, #0
 801414a:	d147      	bne.n	80141dc <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x180>
 801414c:	9b01      	ldr	r3, [sp, #4]
 801414e:	b19b      	cbz	r3, 8014178 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11c>
 8014150:	6823      	ldr	r3, [r4, #0]
 8014152:	eeb0 0a69 	vmov.f32	s0, s19
 8014156:	4620      	mov	r0, r4
 8014158:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801415c:	4798      	blx	r3
 801415e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8014162:	b148      	cbz	r0, 8014178 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11c>
 8014164:	6803      	ldr	r3, [r0, #0]
 8014166:	68db      	ldr	r3, [r3, #12]
 8014168:	4798      	blx	r3
 801416a:	b128      	cbz	r0, 8014178 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11c>
 801416c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8014170:	4621      	mov	r1, r4
 8014172:	6803      	ldr	r3, [r0, #0]
 8014174:	689b      	ldr	r3, [r3, #8]
 8014176:	4798      	blx	r3
 8014178:	2e00      	cmp	r6, #0
 801417a:	d13d      	bne.n	80141f8 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 801417c:	6823      	ldr	r3, [r4, #0]
 801417e:	4620      	mov	r0, r4
 8014180:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8014184:	4798      	blx	r3
 8014186:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 801418a:	2800      	cmp	r0, #0
 801418c:	d034      	beq.n	80141f8 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 801418e:	6803      	ldr	r3, [r0, #0]
 8014190:	68db      	ldr	r3, [r3, #12]
 8014192:	4798      	blx	r3
 8014194:	b380      	cbz	r0, 80141f8 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 8014196:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 801419a:	4621      	mov	r1, r4
 801419c:	6803      	ldr	r3, [r0, #0]
 801419e:	689b      	ldr	r3, [r3, #8]
 80141a0:	b003      	add	sp, #12
 80141a2:	ecbd 8b06 	vpop	{d8-d10}
 80141a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141aa:	4718      	bx	r3
 80141ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141b0:	ed9f aa16 	vldr	s20, [pc, #88]	@ 801420c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1b0>
 80141b4:	ee67 7aaa 	vmul.f32	s15, s15, s21
 80141b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141bc:	ee17 2a90 	vmov	r2, s15
 80141c0:	b212      	sxth	r2, r2
 80141c2:	e78a      	b.n	80140da <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x7e>
 80141c4:	ed94 9a2f 	vldr	s18, [r4, #188]	@ 0xbc
 80141c8:	ee37 9a89 	vadd.f32	s18, s15, s18
 80141cc:	e7a8      	b.n	8014120 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc4>
 80141ce:	edd4 9a34 	vldr	s19, [r4, #208]	@ 0xd0
 80141d2:	f8cd 9004 	str.w	r9, [sp, #4]
 80141d6:	ee77 9aa9 	vadd.f32	s19, s15, s19
 80141da:	e7a2      	b.n	8014122 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc6>
 80141dc:	6823      	ldr	r3, [r4, #0]
 80141de:	eeb0 1a49 	vmov.f32	s2, s18
 80141e2:	eef0 0a68 	vmov.f32	s1, s17
 80141e6:	4620      	mov	r0, r4
 80141e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80141ea:	eeb0 0a48 	vmov.f32	s0, s16
 80141ee:	4798      	blx	r3
 80141f0:	9b01      	ldr	r3, [sp, #4]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d0b3      	beq.n	801415e <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x102>
 80141f6:	e7ab      	b.n	8014150 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xf4>
 80141f8:	b003      	add	sp, #12
 80141fa:	ecbd 8b06 	vpop	{d8-d10}
 80141fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014202:	bf00      	nop
 8014204:	447a0000 	.word	0x447a0000
 8014208:	00000001 	.word	0x00000001
 801420c:	ffffffff 	.word	0xffffffff

08014210 <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 8014210:	b513      	push	{r0, r1, r4, lr}
 8014212:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8014216:	4604      	mov	r4, r0
 8014218:	b143      	cbz	r3, 801422c <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 801421a:	4601      	mov	r1, r0
 801421c:	4668      	mov	r0, sp
 801421e:	f000 fa1c 	bl	801465a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8014222:	6823      	ldr	r3, [r4, #0]
 8014224:	4669      	mov	r1, sp
 8014226:	4620      	mov	r0, r4
 8014228:	691b      	ldr	r3, [r3, #16]
 801422a:	4798      	blx	r3
 801422c:	b002      	add	sp, #8
 801422e:	bd10      	pop	{r4, pc}

08014230 <_ZN8touchgfx22AnimationTextureMapperC1Ev>:
 8014230:	b513      	push	{r0, r1, r4, lr}
 8014232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014236:	a902      	add	r1, sp, #8
 8014238:	4604      	mov	r4, r0
 801423a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801423e:	f000 f855 	bl	80142ec <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 8014242:	4b0a      	ldr	r3, [pc, #40]	@ (801426c <_ZN8touchgfx22AnimationTextureMapperC1Ev+0x3c>)
 8014244:	4620      	mov	r0, r4
 8014246:	6023      	str	r3, [r4, #0]
 8014248:	2300      	movs	r3, #0
 801424a:	e9c4 3338 	strd	r3, r3, [r4, #224]	@ 0xe0
 801424e:	f8a4 30e8 	strh.w	r3, [r4, #232]	@ 0xe8
 8014252:	f884 30ea 	strb.w	r3, [r4, #234]	@ 0xea
 8014256:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 801425a:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 801425e:	f884 30b8 	strb.w	r3, [r4, #184]	@ 0xb8
 8014262:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
 8014266:	b002      	add	sp, #8
 8014268:	bd10      	pop	{r4, pc}
 801426a:	bf00      	nop
 801426c:	0802bfac 	.word	0x0802bfac

08014270 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8014270:	b510      	push	{r4, lr}
 8014272:	ed2d 8b04 	vpush	{d8-d9}
 8014276:	6803      	ldr	r3, [r0, #0]
 8014278:	4604      	mov	r4, r0
 801427a:	eeb0 8a40 	vmov.f32	s16, s0
 801427e:	eef0 8a60 	vmov.f32	s17, s1
 8014282:	699b      	ldr	r3, [r3, #24]
 8014284:	eeb0 9a41 	vmov.f32	s18, s2
 8014288:	4798      	blx	r3
 801428a:	6823      	ldr	r3, [r4, #0]
 801428c:	4620      	mov	r0, r4
 801428e:	eef0 0a68 	vmov.f32	s1, s17
 8014292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014294:	eeb0 1a49 	vmov.f32	s2, s18
 8014298:	eeb0 0a48 	vmov.f32	s0, s16
 801429c:	4798      	blx	r3
 801429e:	6823      	ldr	r3, [r4, #0]
 80142a0:	4620      	mov	r0, r4
 80142a2:	699b      	ldr	r3, [r3, #24]
 80142a4:	ecbd 8b04 	vpop	{d8-d9}
 80142a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142ac:	4718      	bx	r3

080142ae <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 80142ae:	b510      	push	{r4, lr}
 80142b0:	ed2d 8b02 	vpush	{d8}
 80142b4:	6803      	ldr	r3, [r0, #0]
 80142b6:	4604      	mov	r4, r0
 80142b8:	eeb0 8a40 	vmov.f32	s16, s0
 80142bc:	699b      	ldr	r3, [r3, #24]
 80142be:	4798      	blx	r3
 80142c0:	6823      	ldr	r3, [r4, #0]
 80142c2:	4620      	mov	r0, r4
 80142c4:	eeb0 0a48 	vmov.f32	s0, s16
 80142c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80142cc:	4798      	blx	r3
 80142ce:	6823      	ldr	r3, [r4, #0]
 80142d0:	4620      	mov	r0, r4
 80142d2:	699b      	ldr	r3, [r3, #24]
 80142d4:	ecbd 8b02 	vpop	{d8}
 80142d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142dc:	4718      	bx	r3

080142de <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 80142de:	2200      	movs	r2, #0
 80142e0:	8002      	strh	r2, [r0, #0]
 80142e2:	8042      	strh	r2, [r0, #2]
 80142e4:	8082      	strh	r2, [r0, #4]
 80142e6:	80c2      	strh	r2, [r0, #6]
 80142e8:	4770      	bx	lr
	...

080142ec <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 80142ec:	b538      	push	{r3, r4, r5, lr}
 80142ee:	2301      	movs	r3, #1
 80142f0:	2500      	movs	r5, #0
 80142f2:	4604      	mov	r4, r0
 80142f4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 80142f8:	4b1f      	ldr	r3, [pc, #124]	@ (8014378 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 80142fa:	8085      	strh	r5, [r0, #4]
 80142fc:	80c5      	strh	r5, [r0, #6]
 80142fe:	8105      	strh	r5, [r0, #8]
 8014300:	8145      	strh	r5, [r0, #10]
 8014302:	8185      	strh	r5, [r0, #12]
 8014304:	81c5      	strh	r5, [r0, #14]
 8014306:	8205      	strh	r5, [r0, #16]
 8014308:	8245      	strh	r5, [r0, #18]
 801430a:	61c5      	str	r5, [r0, #28]
 801430c:	8405      	strh	r5, [r0, #32]
 801430e:	8445      	strh	r5, [r0, #34]	@ 0x22
 8014310:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8014314:	6003      	str	r3, [r0, #0]
 8014316:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801431a:	880b      	ldrh	r3, [r1, #0]
 801431c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801431e:	23ff      	movs	r3, #255	@ 0xff
 8014320:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8014324:	f001 f920 	bl	8015568 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014328:	4b14      	ldr	r3, [pc, #80]	@ (801437c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 801432a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801432e:	4914      	ldr	r1, [pc, #80]	@ (8014380 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 8014330:	6023      	str	r3, [r4, #0]
 8014332:	2300      	movs	r3, #0
 8014334:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8014338:	4620      	mov	r0, r4
 801433a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801433c:	6323      	str	r3, [r4, #48]	@ 0x30
 801433e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014340:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014342:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014344:	6463      	str	r3, [r4, #68]	@ 0x44
 8014346:	64a3      	str	r3, [r4, #72]	@ 0x48
 8014348:	6523      	str	r3, [r4, #80]	@ 0x50
 801434a:	6563      	str	r3, [r4, #84]	@ 0x54
 801434c:	65e3      	str	r3, [r4, #92]	@ 0x5c
 801434e:	6623      	str	r3, [r4, #96]	@ 0x60
 8014350:	66a3      	str	r3, [r4, #104]	@ 0x68
 8014352:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8014354:	6763      	str	r3, [r4, #116]	@ 0x74
 8014356:	67a3      	str	r3, [r4, #120]	@ 0x78
 8014358:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 801435c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8014360:	230c      	movs	r3, #12
 8014362:	6422      	str	r2, [r4, #64]	@ 0x40
 8014364:	64e1      	str	r1, [r4, #76]	@ 0x4c
 8014366:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014368:	6662      	str	r2, [r4, #100]	@ 0x64
 801436a:	6722      	str	r2, [r4, #112]	@ 0x70
 801436c:	67e2      	str	r2, [r4, #124]	@ 0x7c
 801436e:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 8014372:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
 8014376:	bd38      	pop	{r3, r4, r5, pc}
 8014378:	0802c458 	.word	0x0802c458
 801437c:	0802c0d4 	.word	0x0802c0d4
 8014380:	447a0000 	.word	0x447a0000

08014384 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8014384:	b570      	push	{r4, r5, r6, lr}
 8014386:	ed2d 8b04 	vpush	{d8-d9}
 801438a:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 801438e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8014390:	4604      	mov	r4, r0
 8014392:	add0      	add	r5, sp, #832	@ 0x340
 8014394:	f825 3d40 	strh.w	r3, [r5, #-64]!
 8014398:	4628      	mov	r0, r5
 801439a:	f006 fb2f 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801439e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80143a0:	4606      	mov	r6, r0
 80143a2:	4628      	mov	r0, r5
 80143a4:	f8ad 3300 	strh.w	r3, [sp, #768]	@ 0x300
 80143a8:	f006 fb5c 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80143ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80143b0:	1c72      	adds	r2, r6, #1
 80143b2:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80143b6:	3001      	adds	r0, #1
 80143b8:	ee07 2a90 	vmov	s15, r2
 80143bc:	ed94 6a0b 	vldr	s12, [r4, #44]	@ 0x2c
 80143c0:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80143c4:	ee06 0a90 	vmov	s13, r0
 80143c8:	ee36 6a47 	vsub.f32	s12, s12, s14
 80143cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80143ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143d2:	ed94 9a11 	vldr	s18, [r4, #68]	@ 0x44
 80143d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80143da:	9312      	str	r3, [sp, #72]	@ 0x48
 80143dc:	9316      	str	r3, [sp, #88]	@ 0x58
 80143de:	a830      	add	r0, sp, #192	@ 0xc0
 80143e0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80143e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80143e6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80143ea:	931e      	str	r3, [sp, #120]	@ 0x78
 80143ec:	2300      	movs	r3, #0
 80143ee:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80143f2:	edcd 5a11 	vstr	s11, [sp, #68]	@ 0x44
 80143f6:	ae70      	add	r6, sp, #448	@ 0x1c0
 80143f8:	9320      	str	r3, [sp, #128]	@ 0x80
 80143fa:	9321      	str	r3, [sp, #132]	@ 0x84
 80143fc:	9322      	str	r3, [sp, #136]	@ 0x88
 80143fe:	9324      	str	r3, [sp, #144]	@ 0x90
 8014400:	9325      	str	r3, [sp, #148]	@ 0x94
 8014402:	9326      	str	r3, [sp, #152]	@ 0x98
 8014404:	9328      	str	r3, [sp, #160]	@ 0xa0
 8014406:	9329      	str	r3, [sp, #164]	@ 0xa4
 8014408:	932a      	str	r3, [sp, #168]	@ 0xa8
 801440a:	932c      	str	r3, [sp, #176]	@ 0xb0
 801440c:	932d      	str	r3, [sp, #180]	@ 0xb4
 801440e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8014410:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 8014414:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 8014418:	edcd 5a15 	vstr	s11, [sp, #84]	@ 0x54
 801441c:	ed8d 7a17 	vstr	s14, [sp, #92]	@ 0x5c
 8014420:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
 8014424:	edcd 6a19 	vstr	s13, [sp, #100]	@ 0x64
 8014428:	ed8d 7a1b 	vstr	s14, [sp, #108]	@ 0x6c
 801442c:	ed8d 6a1c 	vstr	s12, [sp, #112]	@ 0x70
 8014430:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8014434:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
 8014438:	edd4 8a12 	vldr	s17, [r4, #72]	@ 0x48
 801443c:	ed94 8a13 	vldr	s16, [r4, #76]	@ 0x4c
 8014440:	f005 fb78 	bl	8019b34 <_ZN8touchgfx9Matrix4x4C1Ev>
 8014444:	eeb1 0a49 	vneg.f32	s0, s18
 8014448:	a830      	add	r0, sp, #192	@ 0xc0
 801444a:	f005 fc43 	bl	8019cd4 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801444e:	eeb1 0a68 	vneg.f32	s0, s17
 8014452:	f005 fc4d 	bl	8019cf0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8014456:	eeb1 0a48 	vneg.f32	s0, s16
 801445a:	f005 fc58 	bl	8019d0e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 801445e:	a840      	add	r0, sp, #256	@ 0x100
 8014460:	f005 fb68 	bl	8019b34 <_ZN8touchgfx9Matrix4x4C1Ev>
 8014464:	ed94 0a0d 	vldr	s0, [r4, #52]	@ 0x34
 8014468:	a840      	add	r0, sp, #256	@ 0x100
 801446a:	f005 fbb7 	bl	8019bdc <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 801446e:	ed94 0a0e 	vldr	s0, [r4, #56]	@ 0x38
 8014472:	f005 fbdd 	bl	8019c30 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 8014476:	ed94 0a0f 	vldr	s0, [r4, #60]	@ 0x3c
 801447a:	f005 fc02 	bl	8019c82 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 801447e:	a850      	add	r0, sp, #320	@ 0x140
 8014480:	f005 fb58 	bl	8019b34 <_ZN8touchgfx9Matrix4x4C1Ev>
 8014484:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8014488:	a850      	add	r0, sp, #320	@ 0x140
 801448a:	f005 fc4f 	bl	8019d2c <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 801448e:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8014492:	f005 fc57 	bl	8019d44 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8014496:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 801449a:	f005 fc60 	bl	8019d5e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 801449e:	a860      	add	r0, sp, #384	@ 0x180
 80144a0:	f005 fb48 	bl	8019b34 <_ZN8touchgfx9Matrix4x4C1Ev>
 80144a4:	eeb0 0a49 	vmov.f32	s0, s18
 80144a8:	a860      	add	r0, sp, #384	@ 0x180
 80144aa:	f005 fc13 	bl	8019cd4 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80144ae:	eeb0 0a68 	vmov.f32	s0, s17
 80144b2:	f005 fc1d 	bl	8019cf0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80144b6:	eeb0 0a48 	vmov.f32	s0, s16
 80144ba:	f005 fc28 	bl	8019d0e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 80144be:	aa50      	add	r2, sp, #320	@ 0x140
 80144c0:	a960      	add	r1, sp, #384	@ 0x180
 80144c2:	a8b0      	add	r0, sp, #704	@ 0x2c0
 80144c4:	f005 fb4e 	bl	8019b64 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80144c8:	4628      	mov	r0, r5
 80144ca:	aa40      	add	r2, sp, #256	@ 0x100
 80144cc:	a9b0      	add	r1, sp, #704	@ 0x2c0
 80144ce:	f005 fb49 	bl	8019b64 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80144d2:	4629      	mov	r1, r5
 80144d4:	aa30      	add	r2, sp, #192	@ 0xc0
 80144d6:	a870      	add	r0, sp, #448	@ 0x1c0
 80144d8:	f005 fb44 	bl	8019b64 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80144dc:	a880      	add	r0, sp, #512	@ 0x200
 80144de:	f005 fb29 	bl	8019b34 <_ZN8touchgfx9Matrix4x4C1Ev>
 80144e2:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 80144e6:	a880      	add	r0, sp, #512	@ 0x200
 80144e8:	eeb1 0a40 	vneg.f32	s0, s0
 80144ec:	f005 fbf2 	bl	8019cd4 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80144f0:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 80144f4:	a880      	add	r0, sp, #512	@ 0x200
 80144f6:	eeb1 0a40 	vneg.f32	s0, s0
 80144fa:	f005 fbf9 	bl	8019cf0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80144fe:	a890      	add	r0, sp, #576	@ 0x240
 8014500:	f005 fb18 	bl	8019b34 <_ZN8touchgfx9Matrix4x4C1Ev>
 8014504:	ed94 0a16 	vldr	s0, [r4, #88]	@ 0x58
 8014508:	a890      	add	r0, sp, #576	@ 0x240
 801450a:	f005 fb57 	bl	8019bbc <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 801450e:	a8a0      	add	r0, sp, #640	@ 0x280
 8014510:	f005 fb10 	bl	8019b34 <_ZN8touchgfx9Matrix4x4C1Ev>
 8014514:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 8014518:	a8a0      	add	r0, sp, #640	@ 0x280
 801451a:	f005 fbdb 	bl	8019cd4 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801451e:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 8014522:	f005 fbe5 	bl	8019cf0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8014526:	aa90      	add	r2, sp, #576	@ 0x240
 8014528:	a9a0      	add	r1, sp, #640	@ 0x280
 801452a:	a8b0      	add	r0, sp, #704	@ 0x2c0
 801452c:	f005 fb1a 	bl	8019b64 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8014530:	4628      	mov	r0, r5
 8014532:	aa80      	add	r2, sp, #512	@ 0x200
 8014534:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8014536:	f005 fb15 	bl	8019b64 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801453a:	4629      	mov	r1, r5
 801453c:	466d      	mov	r5, sp
 801453e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8014540:	4668      	mov	r0, sp
 8014542:	f005 fb0f 	bl	8019b64 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8014546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014548:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801454a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801454c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801454e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014550:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014552:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014556:	2500      	movs	r5, #0
 8014558:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801455c:	0129      	lsls	r1, r5, #4
 801455e:	ab20      	add	r3, sp, #128	@ 0x80
 8014560:	3501      	adds	r5, #1
 8014562:	a870      	add	r0, sp, #448	@ 0x1c0
 8014564:	185e      	adds	r6, r3, r1
 8014566:	ab10      	add	r3, sp, #64	@ 0x40
 8014568:	4419      	add	r1, r3
 801456a:	f005 fab3 	bl	8019ad4 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 801456e:	2d04      	cmp	r5, #4
 8014570:	ed86 0a00 	vstr	s0, [r6]
 8014574:	edc6 0a01 	vstr	s1, [r6, #4]
 8014578:	ed86 1a02 	vstr	s2, [r6, #8]
 801457c:	edc6 1a03 	vstr	s3, [r6, #12]
 8014580:	d1ec      	bne.n	801455c <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8014582:	edd4 7a16 	vldr	s15, [r4, #88]	@ 0x58
 8014586:	eddd 6a20 	vldr	s13, [sp, #128]	@ 0x80
 801458a:	ed9d 7a22 	vldr	s14, [sp, #136]	@ 0x88
 801458e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8014592:	ed84 7a19 	vstr	s14, [r4, #100]	@ 0x64
 8014596:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801459a:	eddd 6a21 	vldr	s13, [sp, #132]	@ 0x84
 801459e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80145a2:	ed84 6a17 	vstr	s12, [r4, #92]	@ 0x5c
 80145a6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80145aa:	eddd 6a24 	vldr	s13, [sp, #144]	@ 0x90
 80145ae:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80145b2:	ed84 7a1c 	vstr	s14, [r4, #112]	@ 0x70
 80145b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80145ba:	ed84 6a18 	vstr	s12, [r4, #96]	@ 0x60
 80145be:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80145c2:	eddd 6a25 	vldr	s13, [sp, #148]	@ 0x94
 80145c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80145ca:	ed84 6a1a 	vstr	s12, [r4, #104]	@ 0x68
 80145ce:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80145d2:	eddd 6a28 	vldr	s13, [sp, #160]	@ 0xa0
 80145d6:	ed9d 7a2a 	vldr	s14, [sp, #168]	@ 0xa8
 80145da:	ed84 7a1f 	vstr	s14, [r4, #124]	@ 0x7c
 80145de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80145e2:	ed84 6a1b 	vstr	s12, [r4, #108]	@ 0x6c
 80145e6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80145ea:	eddd 6a29 	vldr	s13, [sp, #164]	@ 0xa4
 80145ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80145f2:	ed84 6a1d 	vstr	s12, [r4, #116]	@ 0x74
 80145f6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80145fa:	eddd 6a2c 	vldr	s13, [sp, #176]	@ 0xb0
 80145fe:	ed9d 7a2e 	vldr	s14, [sp, #184]	@ 0xb8
 8014602:	ed84 7a22 	vstr	s14, [r4, #136]	@ 0x88
 8014606:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801460a:	ed84 6a1e 	vstr	s12, [r4, #120]	@ 0x78
 801460e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8014612:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 8014616:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801461a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801461e:	ed84 6a20 	vstr	s12, [r4, #128]	@ 0x80
 8014622:	edc4 6a21 	vstr	s13, [r4, #132]	@ 0x84
 8014626:	f50d 7d50 	add.w	sp, sp, #832	@ 0x340
 801462a:	ecbd 8b04 	vpop	{d8-d9}
 801462e:	bd70      	pop	{r4, r5, r6, pc}

08014630 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 8014630:	b510      	push	{r4, lr}
 8014632:	4604      	mov	r4, r0
 8014634:	f000 ff98 	bl	8015568 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8014638:	4620      	mov	r0, r4
 801463a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801463e:	f7ff bea1 	b.w	8014384 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08014642 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 8014642:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
 8014646:	edc0 0a0e 	vstr	s1, [r0, #56]	@ 0x38
 801464a:	ed80 1a0f 	vstr	s2, [r0, #60]	@ 0x3c
 801464e:	f7ff be99 	b.w	8014384 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08014652 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 8014652:	ed80 0a10 	vstr	s0, [r0, #64]	@ 0x40
 8014656:	f7ff be95 	b.w	8014384 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801465a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 801465a:	b510      	push	{r4, lr}
 801465c:	edd1 5a1a 	vldr	s11, [r1, #104]	@ 0x68
 8014660:	edd1 7a17 	vldr	s15, [r1, #92]	@ 0x5c
 8014664:	ed91 6a1d 	vldr	s12, [r1, #116]	@ 0x74
 8014668:	eef4 7ae5 	vcmpe.f32	s15, s11
 801466c:	edd1 6a20 	vldr	s13, [r1, #128]	@ 0x80
 8014670:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8014674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014678:	bf54      	ite	pl
 801467a:	eeb0 7a65 	vmovpl.f32	s14, s11
 801467e:	eeb0 7a67 	vmovmi.f32	s14, s15
 8014682:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8014686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801468a:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801468e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014696:	fe37 7a26 	vselgt.f32	s14, s14, s13
 801469a:	febb 7a47 	vrintm.f32	s14, s14
 801469e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80146a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80146aa:	bf56      	itet	pl
 80146ac:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 80146b0:	2200      	movmi	r2, #0
 80146b2:	ee17 3a10 	vmovpl	r3, s14
 80146b6:	ee07 4a10 	vmov	s14, r4
 80146ba:	bf58      	it	pl
 80146bc:	b21a      	sxthpl	r2, r3
 80146be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80146c6:	8002      	strh	r2, [r0, #0]
 80146c8:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 80146cc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80146d0:	edd1 5a1b 	vldr	s11, [r1, #108]	@ 0x6c
 80146d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d8:	bf58      	it	pl
 80146da:	eef0 7a46 	vmovpl.f32	s15, s12
 80146de:	ed91 6a1e 	vldr	s12, [r1, #120]	@ 0x78
 80146e2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80146e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ea:	bf58      	it	pl
 80146ec:	eef0 7a66 	vmovpl.f32	s15, s13
 80146f0:	edd1 6a21 	vldr	s13, [r1, #132]	@ 0x84
 80146f4:	fefa 7a67 	vrintp.f32	s15, s15
 80146f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80146fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014700:	bfdc      	itt	le
 8014702:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8014706:	ee17 3a90 	vmovle	r3, s15
 801470a:	edd1 7a18 	vldr	s15, [r1, #96]	@ 0x60
 801470e:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8014712:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014716:	bfd8      	it	le
 8014718:	b21c      	sxthle	r4, r3
 801471a:	1aa2      	subs	r2, r4, r2
 801471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014720:	8082      	strh	r2, [r0, #4]
 8014722:	bf54      	ite	pl
 8014724:	eeb0 7a65 	vmovpl.f32	s14, s11
 8014728:	eeb0 7a67 	vmovmi.f32	s14, s15
 801472c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8014730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014734:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8014738:	eef4 6ac7 	vcmpe.f32	s13, s14
 801473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014740:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8014744:	febb 7a47 	vrintm.f32	s14, s14
 8014748:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014750:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014754:	bf56      	itet	pl
 8014756:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 801475a:	2300      	movmi	r3, #0
 801475c:	ee17 3a10 	vmovpl	r3, s14
 8014760:	ee07 1a10 	vmov	s14, r1
 8014764:	bf58      	it	pl
 8014766:	b21b      	sxthpl	r3, r3
 8014768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801476c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014770:	8043      	strh	r3, [r0, #2]
 8014772:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8014776:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477e:	bf58      	it	pl
 8014780:	eef0 7a46 	vmovpl.f32	s15, s12
 8014784:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801478c:	bf58      	it	pl
 801478e:	eef0 7a66 	vmovpl.f32	s15, s13
 8014792:	fefa 7a67 	vrintp.f32	s15, s15
 8014796:	eef4 7ac7 	vcmpe.f32	s15, s14
 801479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801479e:	bfde      	ittt	le
 80147a0:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80147a4:	ee17 1a90 	vmovle	r1, s15
 80147a8:	b209      	sxthle	r1, r1
 80147aa:	1acb      	subs	r3, r1, r3
 80147ac:	80c3      	strh	r3, [r0, #6]
 80147ae:	bd10      	pop	{r4, pc}

080147b0 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 80147b0:	4603      	mov	r3, r0
 80147b2:	3026      	adds	r0, #38	@ 0x26
 80147b4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80147b8:	b90b      	cbnz	r3, 80147be <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 80147ba:	f004 b86d 	b.w	8018898 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80147be:	f004 b87b 	b.w	80188b8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

080147c4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 80147c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147c8:	ed2d 8b04 	vpush	{d8-d9}
 80147cc:	b0b3      	sub	sp, #204	@ 0xcc
 80147ce:	4604      	mov	r4, r0
 80147d0:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80147d4:	2500      	movs	r5, #0
 80147d6:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 80147da:	469b      	mov	fp, r3
 80147dc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80147e0:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 80147e4:	4648      	mov	r0, r9
 80147e6:	9206      	str	r2, [sp, #24]
 80147e8:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 80147ec:	9511      	str	r5, [sp, #68]	@ 0x44
 80147ee:	ad13      	add	r5, sp, #76	@ 0x4c
 80147f0:	f8dd a100 	ldr.w	sl, [sp, #256]	@ 0x100
 80147f4:	f8dd 8108 	ldr.w	r8, [sp, #264]	@ 0x108
 80147f8:	9f43      	ldr	r7, [sp, #268]	@ 0x10c
 80147fa:	f7fe fab3 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 80147fe:	4621      	mov	r1, r4
 8014800:	a81e      	add	r0, sp, #120	@ 0x78
 8014802:	f7ff ff2a 	bl	801465a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8014806:	e899 0003 	ldmia.w	r9, {r0, r1}
 801480a:	e885 0003 	stmia.w	r5, {r0, r1}
 801480e:	4628      	mov	r0, r5
 8014810:	a91e      	add	r1, sp, #120	@ 0x78
 8014812:	f7fe faa7 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8014816:	6821      	ldr	r1, [r4, #0]
 8014818:	4620      	mov	r0, r4
 801481a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801481c:	4629      	mov	r1, r5
 801481e:	47b0      	blx	r6
 8014820:	4621      	mov	r1, r4
 8014822:	a815      	add	r0, sp, #84	@ 0x54
 8014824:	1d26      	adds	r6, r4, #4
 8014826:	f003 ff93 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801482a:	a815      	add	r0, sp, #84	@ 0x54
 801482c:	f002 fb48 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014830:	4631      	mov	r1, r6
 8014832:	4648      	mov	r0, r9
 8014834:	f002 fb88 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014838:	4628      	mov	r0, r5
 801483a:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 801483e:	f002 fb3f 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014842:	4628      	mov	r0, r5
 8014844:	f006 f9cc 	bl	801abe0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014848:	9007      	str	r0, [sp, #28]
 801484a:	2800      	cmp	r0, #0
 801484c:	f000 80dc 	beq.w	8014a08 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x244>
 8014850:	f8db 200c 	ldr.w	r2, [fp, #12]
 8014854:	a809      	add	r0, sp, #36	@ 0x24
 8014856:	f8db 1000 	ldr.w	r1, [fp]
 801485a:	920c      	str	r2, [sp, #48]	@ 0x30
 801485c:	f8da 2000 	ldr.w	r2, [sl]
 8014860:	9109      	str	r1, [sp, #36]	@ 0x24
 8014862:	920d      	str	r2, [sp, #52]	@ 0x34
 8014864:	f8da 2004 	ldr.w	r2, [sl, #4]
 8014868:	f8db 1004 	ldr.w	r1, [fp, #4]
 801486c:	920e      	str	r2, [sp, #56]	@ 0x38
 801486e:	f8da 2008 	ldr.w	r2, [sl, #8]
 8014872:	910a      	str	r1, [sp, #40]	@ 0x28
 8014874:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014876:	f8db 1008 	ldr.w	r1, [fp, #8]
 801487a:	f8da 200c 	ldr.w	r2, [sl, #12]
 801487e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014880:	a90d      	add	r1, sp, #52	@ 0x34
 8014882:	9210      	str	r2, [sp, #64]	@ 0x40
 8014884:	4632      	mov	r2, r6
 8014886:	f002 fb43 	bl	8016f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801488a:	4632      	mov	r2, r6
 801488c:	a90e      	add	r1, sp, #56	@ 0x38
 801488e:	a80a      	add	r0, sp, #40	@ 0x28
 8014890:	f002 fb3e 	bl	8016f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8014894:	4632      	mov	r2, r6
 8014896:	a90f      	add	r1, sp, #60	@ 0x3c
 8014898:	a80b      	add	r0, sp, #44	@ 0x2c
 801489a:	f002 fb39 	bl	8016f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801489e:	4632      	mov	r2, r6
 80148a0:	a910      	add	r1, sp, #64	@ 0x40
 80148a2:	a80c      	add	r0, sp, #48	@ 0x30
 80148a4:	f002 fb34 	bl	8016f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80148a8:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 80148ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80148ae:	eef0 6a67 	vmov.f32	s13, s15
 80148b2:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80148b6:	ed97 4a00 	vldr	s8, [r7]
 80148ba:	eeb0 7a67 	vmov.f32	s14, s15
 80148be:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 80148c2:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80148c6:	ed97 5a01 	vldr	s10, [r7, #4]
 80148ca:	eeb0 6a67 	vmov.f32	s12, s15
 80148ce:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 80148d2:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80148d6:	edd8 3a00 	vldr	s7, [r8]
 80148da:	edd8 4a01 	vldr	s9, [r8, #4]
 80148de:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80148e2:	ed93 9a00 	vldr	s18, [r3]
 80148e6:	ed93 8a01 	vldr	s16, [r3, #4]
 80148ea:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80148ee:	ee16 6a10 	vmov	r6, s12
 80148f2:	eeb0 6a67 	vmov.f32	s12, s15
 80148f6:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80148fa:	edd8 5a02 	vldr	s11, [r8, #8]
 80148fe:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8014902:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8014906:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 801490a:	edcd 3a21 	vstr	s7, [sp, #132]	@ 0x84
 801490e:	ee16 0a10 	vmov	r0, s12
 8014912:	eeb0 6a67 	vmov.f32	s12, s15
 8014916:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 801491a:	ed8d 4a22 	vstr	s8, [sp, #136]	@ 0x88
 801491e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8014922:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 8014926:	edcd 4a26 	vstr	s9, [sp, #152]	@ 0x98
 801492a:	ed8d 5a27 	vstr	s10, [sp, #156]	@ 0x9c
 801492e:	ee16 1a10 	vmov	r1, s12
 8014932:	eeb0 6a67 	vmov.f32	s12, s15
 8014936:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 801493a:	edd3 8a02 	vldr	s17, [r3, #8]
 801493e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8014942:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014946:	9624      	str	r6, [sp, #144]	@ 0x90
 8014948:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801494c:	68ff      	ldr	r7, [r7, #12]
 801494e:	ee16 2a10 	vmov	r2, s12
 8014952:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 8014956:	ed8d 9a20 	vstr	s18, [sp, #128]	@ 0x80
 801495a:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801495e:	ed8d 8a25 	vstr	s16, [sp, #148]	@ 0x94
 8014962:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 8014966:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 801496a:	9b06      	ldr	r3, [sp, #24]
 801496c:	4628      	mov	r0, r5
 801496e:	922d      	str	r2, [sp, #180]	@ 0xb4
 8014970:	4a28      	ldr	r2, [pc, #160]	@ (8014a14 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>)
 8014972:	9317      	str	r3, [sp, #92]	@ 0x5c
 8014974:	8812      	ldrh	r2, [r2, #0]
 8014976:	9b07      	ldr	r3, [sp, #28]
 8014978:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 801497c:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8014980:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 8014984:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8014988:	9218      	str	r2, [sp, #96]	@ 0x60
 801498a:	9319      	str	r3, [sp, #100]	@ 0x64
 801498c:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8014990:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8014994:	9731      	str	r7, [sp, #196]	@ 0xc4
 8014996:	f006 f953 	bl	801ac40 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801499a:	901a      	str	r0, [sp, #104]	@ 0x68
 801499c:	4628      	mov	r0, r5
 801499e:	f006 f82d 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80149a2:	901b      	str	r0, [sp, #108]	@ 0x6c
 80149a4:	4628      	mov	r0, r5
 80149a6:	f006 f85d 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80149aa:	901c      	str	r0, [sp, #112]	@ 0x70
 80149ac:	4628      	mov	r0, r5
 80149ae:	f006 f825 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80149b2:	eeb4 9a48 	vcmp.f32	s18, s16
 80149b6:	901d      	str	r0, [sp, #116]	@ 0x74
 80149b8:	f8b4 608c 	ldrh.w	r6, [r4, #140]	@ 0x8c
 80149bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c0:	d107      	bne.n	80149d2 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x20e>
 80149c2:	eeb4 8a68 	vcmp.f32	s16, s17
 80149c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80149ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ce:	bf08      	it	eq
 80149d0:	461e      	moveq	r6, r3
 80149d2:	4b11      	ldr	r3, [pc, #68]	@ (8014a18 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x254>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80149da:	b10a      	cbz	r2, 80149e0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>
 80149dc:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 80149de:	b905      	cbnz	r5, 80149e2 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21e>
 80149e0:	689d      	ldr	r5, [r3, #8]
 80149e2:	682b      	ldr	r3, [r5, #0]
 80149e4:	4620      	mov	r0, r4
 80149e6:	6c1f      	ldr	r7, [r3, #64]	@ 0x40
 80149e8:	f7ff fee2 	bl	80147b0 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 80149ec:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80149f0:	aa1e      	add	r2, sp, #120	@ 0x78
 80149f2:	9604      	str	r6, [sp, #16]
 80149f4:	a917      	add	r1, sp, #92	@ 0x5c
 80149f6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80149fa:	ab13      	add	r3, sp, #76	@ 0x4c
 80149fc:	4628      	mov	r0, r5
 80149fe:	9301      	str	r3, [sp, #4]
 8014a00:	ab15      	add	r3, sp, #84	@ 0x54
 8014a02:	9300      	str	r3, [sp, #0]
 8014a04:	ab19      	add	r3, sp, #100	@ 0x64
 8014a06:	47b8      	blx	r7
 8014a08:	b033      	add	sp, #204	@ 0xcc
 8014a0a:	ecbd 8b04 	vpop	{d8-d9}
 8014a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a12:	bf00      	nop
 8014a14:	240065fa 	.word	0x240065fa
 8014a18:	24006600 	.word	0x24006600

08014a1c <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8014a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a20:	ed2d 8b02 	vpush	{d8}
 8014a24:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8014a28:	b098      	sub	sp, #96	@ 0x60
 8014a2a:	4604      	mov	r4, r0
 8014a2c:	4688      	mov	r8, r1
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d077      	beq.n	8014b22 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8014a32:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8014a36:	4628      	mov	r0, r5
 8014a38:	f005 ffe0 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014a3c:	ee07 0a90 	vmov	s15, r0
 8014a40:	4628      	mov	r0, r5
 8014a42:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8014a46:	f006 f80d 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8014b84 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8014a4c:	ee07 0a90 	vmov	s15, r0
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014a56:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8014a5a:	2b01      	cmp	r3, #1
 8014a5c:	d066      	beq.n	8014b2c <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8014a5e:	eeb0 6a47 	vmov.f32	s12, s14
 8014a62:	ee17 3a10 	vmov	r3, s14
 8014a66:	eeb0 4a48 	vmov.f32	s8, s16
 8014a6a:	eeb0 7a48 	vmov.f32	s14, s16
 8014a6e:	eef0 4a67 	vmov.f32	s9, s15
 8014a72:	eeb0 8a67 	vmov.f32	s16, s15
 8014a76:	ed94 5a17 	vldr	s10, [r4, #92]	@ 0x5c
 8014a7a:	edd4 5a18 	vldr	s11, [r4, #96]	@ 0x60
 8014a7e:	ed94 3a1b 	vldr	s6, [r4, #108]	@ 0x6c
 8014a82:	edd4 2a1d 	vldr	s5, [r4, #116]	@ 0x74
 8014a86:	ee73 1a65 	vsub.f32	s3, s6, s11
 8014a8a:	ed94 2a1a 	vldr	s4, [r4, #104]	@ 0x68
 8014a8e:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8014a92:	edd4 3a1e 	vldr	s7, [r4, #120]	@ 0x78
 8014a96:	ee32 1a45 	vsub.f32	s2, s4, s10
 8014a9a:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8014a9c:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8014a9e:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8014aa2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8014aa4:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8014aa8:	f8d4 c080 	ldr.w	ip, [r4, #128]	@ 0x80
 8014aac:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8014ab0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8014ab4:	eee1 6a21 	vfma.f32	s13, s2, s3
 8014ab8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac0:	dd3d      	ble.n	8014b3e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8014ac2:	ed8d 5a04 	vstr	s10, [sp, #16]
 8014ac6:	ed8d 2a05 	vstr	s4, [sp, #20]
 8014aca:	edcd 2a06 	vstr	s5, [sp, #24]
 8014ace:	f8cd c01c 	str.w	ip, [sp, #28]
 8014ad2:	edcd 5a08 	vstr	s11, [sp, #32]
 8014ad6:	ed8d 3a09 	vstr	s6, [sp, #36]	@ 0x24
 8014ada:	edcd 3a0a 	vstr	s7, [sp, #40]	@ 0x28
 8014ade:	970b      	str	r7, [sp, #44]	@ 0x2c
 8014ae0:	960c      	str	r6, [sp, #48]	@ 0x30
 8014ae2:	950d      	str	r5, [sp, #52]	@ 0x34
 8014ae4:	920e      	str	r2, [sp, #56]	@ 0x38
 8014ae6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014ae8:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8014aec:	ed8d 4a11 	vstr	s8, [sp, #68]	@ 0x44
 8014af0:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
 8014af4:	edcd 4a13 	vstr	s9, [sp, #76]	@ 0x4c
 8014af8:	ed8d 8a14 	vstr	s16, [sp, #80]	@ 0x50
 8014afc:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8014b00:	9316      	str	r3, [sp, #88]	@ 0x58
 8014b02:	ed8d 6a17 	vstr	s12, [sp, #92]	@ 0x5c
 8014b06:	ab14      	add	r3, sp, #80	@ 0x50
 8014b08:	2200      	movs	r2, #0
 8014b0a:	4641      	mov	r1, r8
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	9303      	str	r3, [sp, #12]
 8014b10:	ab10      	add	r3, sp, #64	@ 0x40
 8014b12:	9302      	str	r3, [sp, #8]
 8014b14:	ab0c      	add	r3, sp, #48	@ 0x30
 8014b16:	9301      	str	r3, [sp, #4]
 8014b18:	ab08      	add	r3, sp, #32
 8014b1a:	9300      	str	r3, [sp, #0]
 8014b1c:	ab04      	add	r3, sp, #16
 8014b1e:	f7ff fe51 	bl	80147c4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8014b22:	b018      	add	sp, #96	@ 0x60
 8014b24:	ecbd 8b02 	vpop	{d8}
 8014b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b2c:	eeb0 6a48 	vmov.f32	s12, s16
 8014b30:	ee17 3a90 	vmov	r3, s15
 8014b34:	eef0 4a47 	vmov.f32	s9, s14
 8014b38:	eeb0 4a67 	vmov.f32	s8, s15
 8014b3c:	e79b      	b.n	8014a76 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8014b3e:	ed8d 5a05 	vstr	s10, [sp, #20]
 8014b42:	ed8d 2a04 	vstr	s4, [sp, #16]
 8014b46:	f8cd c018 	str.w	ip, [sp, #24]
 8014b4a:	edcd 2a07 	vstr	s5, [sp, #28]
 8014b4e:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 8014b52:	ed8d 3a08 	vstr	s6, [sp, #32]
 8014b56:	970a      	str	r7, [sp, #40]	@ 0x28
 8014b58:	edcd 3a0b 	vstr	s7, [sp, #44]	@ 0x2c
 8014b5c:	960d      	str	r6, [sp, #52]	@ 0x34
 8014b5e:	950c      	str	r5, [sp, #48]	@ 0x30
 8014b60:	900e      	str	r0, [sp, #56]	@ 0x38
 8014b62:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014b64:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 8014b68:	ed8d 4a10 	vstr	s8, [sp, #64]	@ 0x40
 8014b6c:	edcd 4a12 	vstr	s9, [sp, #72]	@ 0x48
 8014b70:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 8014b74:	ed8d 8a15 	vstr	s16, [sp, #84]	@ 0x54
 8014b78:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 8014b7c:	ed8d 6a16 	vstr	s12, [sp, #88]	@ 0x58
 8014b80:	9317      	str	r3, [sp, #92]	@ 0x5c
 8014b82:	e7c0      	b.n	8014b06 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8014b84:	240065f8 	.word	0x240065f8

08014b88 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8014b88:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014b8c:	b133      	cbz	r3, 8014b9c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8014b8e:	790b      	ldrb	r3, [r1, #4]
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	bf01      	itttt	eq
 8014b94:	8dc3      	ldrheq	r3, [r0, #46]	@ 0x2e
 8014b96:	8e02      	ldrheq	r2, [r0, #48]	@ 0x30
 8014b98:	8603      	strheq	r3, [r0, #48]	@ 0x30
 8014b9a:	85c2      	strheq	r2, [r0, #46]	@ 0x2e
 8014b9c:	f7ff b937 	b.w	8013e0e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08014ba0 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8014ba0:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8014ba4:	b12a      	cbz	r2, 8014bb2 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8014ba6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8014baa:	b112      	cbz	r2, 8014bb2 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8014bac:	6803      	ldr	r3, [r0, #0]
 8014bae:	695b      	ldr	r3, [r3, #20]
 8014bb0:	4718      	bx	r3
 8014bb2:	4770      	bx	lr

08014bb4 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8014bb4:	2000      	movs	r0, #0
 8014bb6:	4770      	bx	lr

08014bb8 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8014bb8:	4b07      	ldr	r3, [pc, #28]	@ (8014bd8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8014bba:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8014bbc:	881b      	ldrh	r3, [r3, #0]
 8014bbe:	4293      	cmp	r3, r2
 8014bc0:	bf81      	itttt	hi
 8014bc2:	4b06      	ldrhi	r3, [pc, #24]	@ (8014bdc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8014bc4:	681b      	ldrhi	r3, [r3, #0]
 8014bc6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8014bca:	7858      	ldrbhi	r0, [r3, #1]
 8014bcc:	bf8c      	ite	hi
 8014bce:	f000 0003 	andhi.w	r0, r0, #3
 8014bd2:	2000      	movls	r0, #0
 8014bd4:	4770      	bx	lr
 8014bd6:	bf00      	nop
 8014bd8:	24006654 	.word	0x24006654
 8014bdc:	24006650 	.word	0x24006650

08014be0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8014be0:	4b11      	ldr	r3, [pc, #68]	@ (8014c28 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8014be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014be6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8014be8:	4604      	mov	r4, r0
 8014bea:	881b      	ldrh	r3, [r3, #0]
 8014bec:	428b      	cmp	r3, r1
 8014bee:	d918      	bls.n	8014c22 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8014bf0:	6803      	ldr	r3, [r0, #0]
 8014bf2:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8014bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8014c2c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8014bf6:	6818      	ldr	r0, [r3, #0]
 8014bf8:	f7fa fddc 	bl	800f7b4 <_ZNK8touchgfx5Texts7getTextEt>
 8014bfc:	6823      	ldr	r3, [r4, #0]
 8014bfe:	4606      	mov	r6, r0
 8014c00:	4620      	mov	r0, r4
 8014c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014c04:	4798      	blx	r3
 8014c06:	6823      	ldr	r3, [r4, #0]
 8014c08:	4607      	mov	r7, r0
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014c10:	4798      	blx	r3
 8014c12:	463a      	mov	r2, r7
 8014c14:	4603      	mov	r3, r0
 8014c16:	4631      	mov	r1, r6
 8014c18:	4620      	mov	r0, r4
 8014c1a:	46ac      	mov	ip, r5
 8014c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c20:	4760      	bx	ip
 8014c22:	2000      	movs	r0, #0
 8014c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c28:	24006654 	.word	0x24006654
 8014c2c:	2400665c 	.word	0x2400665c

08014c30 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8014c30:	4b18      	ldr	r3, [pc, #96]	@ (8014c94 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8014c32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c36:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8014c38:	4604      	mov	r4, r0
 8014c3a:	881b      	ldrh	r3, [r3, #0]
 8014c3c:	428b      	cmp	r3, r1
 8014c3e:	d926      	bls.n	8014c8e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8014c40:	4b15      	ldr	r3, [pc, #84]	@ (8014c98 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8014c48:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8014c4c:	4b13      	ldr	r3, [pc, #76]	@ (8014c9c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8014c4e:	7855      	ldrb	r5, [r2, #1]
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8014c56:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8014c5a:	6833      	ldr	r3, [r6, #0]
 8014c5c:	69df      	ldr	r7, [r3, #28]
 8014c5e:	4b10      	ldr	r3, [pc, #64]	@ (8014ca0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8014c60:	6818      	ldr	r0, [r3, #0]
 8014c62:	f7fa fda7 	bl	800f7b4 <_ZNK8touchgfx5Texts7getTextEt>
 8014c66:	6823      	ldr	r3, [r4, #0]
 8014c68:	4680      	mov	r8, r0
 8014c6a:	4620      	mov	r0, r4
 8014c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014c6e:	4798      	blx	r3
 8014c70:	6823      	ldr	r3, [r4, #0]
 8014c72:	4681      	mov	r9, r0
 8014c74:	4620      	mov	r0, r4
 8014c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014c7a:	4798      	blx	r3
 8014c7c:	464b      	mov	r3, r9
 8014c7e:	9000      	str	r0, [sp, #0]
 8014c80:	4642      	mov	r2, r8
 8014c82:	4629      	mov	r1, r5
 8014c84:	4630      	mov	r0, r6
 8014c86:	47b8      	blx	r7
 8014c88:	b003      	add	sp, #12
 8014c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c8e:	2000      	movs	r0, #0
 8014c90:	e7fa      	b.n	8014c88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8014c92:	bf00      	nop
 8014c94:	24006654 	.word	0x24006654
 8014c98:	24006650 	.word	0x24006650
 8014c9c:	24006658 	.word	0x24006658
 8014ca0:	2400665c 	.word	0x2400665c

08014ca4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8014ca4:	b40e      	push	{r1, r2, r3}
 8014ca6:	4b30      	ldr	r3, [pc, #192]	@ (8014d68 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8014ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cac:	881a      	ldrh	r2, [r3, #0]
 8014cae:	b09d      	sub	sp, #116	@ 0x74
 8014cb0:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8014cb2:	4604      	mov	r4, r0
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d954      	bls.n	8014d62 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8014cb8:	aa26      	add	r2, sp, #152	@ 0x98
 8014cba:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8014d6c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8014cbe:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8014d70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8014cc2:	9202      	str	r2, [sp, #8]
 8014cc4:	f8d9 2000 	ldr.w	r2, [r9]
 8014cc8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8014ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8014cd0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014cd4:	682b      	ldr	r3, [r5, #0]
 8014cd6:	4628      	mov	r0, r5
 8014cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014cda:	4798      	blx	r3
 8014cdc:	4606      	mov	r6, r0
 8014cde:	b207      	sxth	r7, r0
 8014ce0:	a803      	add	r0, sp, #12
 8014ce2:	f004 f97f 	bl	8018fe4 <_ZN8touchgfx12TextProviderC1Ev>
 8014ce6:	682b      	ldr	r3, [r5, #0]
 8014ce8:	4628      	mov	r0, r5
 8014cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014cec:	4798      	blx	r3
 8014cee:	682b      	ldr	r3, [r5, #0]
 8014cf0:	4682      	mov	sl, r0
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014cf6:	4798      	blx	r3
 8014cf8:	4653      	mov	r3, sl
 8014cfa:	9000      	str	r0, [sp, #0]
 8014cfc:	a803      	add	r0, sp, #12
 8014cfe:	9a02      	ldr	r2, [sp, #8]
 8014d00:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8014d02:	f004 f9ca 	bl	801909a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014d06:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8014d08:	f8d9 3000 	ldr.w	r3, [r9]
 8014d0c:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8014d10:	8925      	ldrh	r5, [r4, #8]
 8014d12:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8014d16:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8014d1a:	eba5 050c 	sub.w	r5, r5, ip
 8014d1e:	784a      	ldrb	r2, [r1, #1]
 8014d20:	f8d8 3000 	ldr.w	r3, [r8]
 8014d24:	b22d      	sxth	r5, r5
 8014d26:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8014d2a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8014d2e:	9500      	str	r5, [sp, #0]
 8014d30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014d34:	a803      	add	r0, sp, #12
 8014d36:	f001 fdc9 	bl	80168cc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8014d3a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8014d3e:	b203      	sxth	r3, r0
 8014d40:	18b9      	adds	r1, r7, r2
 8014d42:	2900      	cmp	r1, #0
 8014d44:	dd0b      	ble.n	8014d5e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8014d46:	3b01      	subs	r3, #1
 8014d48:	fb13 f302 	smulbb	r3, r3, r2
 8014d4c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8014d50:	b21f      	sxth	r7, r3
 8014d52:	4638      	mov	r0, r7
 8014d54:	b01d      	add	sp, #116	@ 0x74
 8014d56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d5a:	b003      	add	sp, #12
 8014d5c:	4770      	bx	lr
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	dcf7      	bgt.n	8014d52 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8014d62:	2700      	movs	r7, #0
 8014d64:	e7f5      	b.n	8014d52 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8014d66:	bf00      	nop
 8014d68:	24006654 	.word	0x24006654
 8014d6c:	24006650 	.word	0x24006650
 8014d70:	24006658 	.word	0x24006658

08014d74 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8014d74:	4bbd      	ldr	r3, [pc, #756]	@ (801506c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8014d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d7a:	460c      	mov	r4, r1
 8014d7c:	881b      	ldrh	r3, [r3, #0]
 8014d7e:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8014d80:	b0a9      	sub	sp, #164	@ 0xa4
 8014d82:	4680      	mov	r8, r0
 8014d84:	428b      	cmp	r3, r1
 8014d86:	d809      	bhi.n	8014d9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8014d88:	2300      	movs	r3, #0
 8014d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8014d8e:	6083      	str	r3, [r0, #8]
 8014d90:	e9c0 3200 	strd	r3, r2, [r0]
 8014d94:	4640      	mov	r0, r8
 8014d96:	b029      	add	sp, #164	@ 0xa4
 8014d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d9c:	4eb4      	ldr	r6, [pc, #720]	@ (8015070 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8014d9e:	6833      	ldr	r3, [r6, #0]
 8014da0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8014da4:	4bb3      	ldr	r3, [pc, #716]	@ (8015074 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014dac:	4bb2      	ldr	r3, [pc, #712]	@ (8015078 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014dae:	6818      	ldr	r0, [r3, #0]
 8014db0:	f7fa fd00 	bl	800f7b4 <_ZNK8touchgfx5Texts7getTextEt>
 8014db4:	682b      	ldr	r3, [r5, #0]
 8014db6:	4681      	mov	r9, r0
 8014db8:	4628      	mov	r0, r5
 8014dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014dbc:	4798      	blx	r3
 8014dbe:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8014dc0:	b203      	sxth	r3, r0
 8014dc2:	4682      	mov	sl, r0
 8014dc4:	4407      	add	r7, r0
 8014dc6:	a80f      	add	r0, sp, #60	@ 0x3c
 8014dc8:	9304      	str	r3, [sp, #16]
 8014dca:	b2bb      	uxth	r3, r7
 8014dcc:	9303      	str	r3, [sp, #12]
 8014dce:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	f040 80a5 	bne.w	8014f22 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8014dd8:	f004 f904 	bl	8018fe4 <_ZN8touchgfx12TextProviderC1Ev>
 8014ddc:	682b      	ldr	r3, [r5, #0]
 8014dde:	4628      	mov	r0, r5
 8014de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014de2:	4798      	blx	r3
 8014de4:	682b      	ldr	r3, [r5, #0]
 8014de6:	4606      	mov	r6, r0
 8014de8:	4628      	mov	r0, r5
 8014dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014dec:	4798      	blx	r3
 8014dee:	6823      	ldr	r3, [r4, #0]
 8014df0:	4607      	mov	r7, r0
 8014df2:	4620      	mov	r0, r4
 8014df4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014df6:	4798      	blx	r3
 8014df8:	6823      	ldr	r3, [r4, #0]
 8014dfa:	4683      	mov	fp, r0
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014e02:	4798      	blx	r3
 8014e04:	463b      	mov	r3, r7
 8014e06:	4649      	mov	r1, r9
 8014e08:	4632      	mov	r2, r6
 8014e0a:	2600      	movs	r6, #0
 8014e0c:	e9cd b000 	strd	fp, r0, [sp]
 8014e10:	a80f      	add	r0, sp, #60	@ 0x3c
 8014e12:	4637      	mov	r7, r6
 8014e14:	f004 f956 	bl	80190c4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8014e18:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014e1c:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8015070 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8014e20:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014e24:	bf0c      	ite	eq
 8014e26:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8014e2a:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8014e2e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8014e30:	4629      	mov	r1, r5
 8014e32:	f8db 3000 	ldr.w	r3, [fp]
 8014e36:	a80f      	add	r0, sp, #60	@ 0x3c
 8014e38:	3701      	adds	r7, #1
 8014e3a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014e3e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014e42:	b2bf      	uxth	r7, r7
 8014e44:	785b      	ldrb	r3, [r3, #1]
 8014e46:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014e4a:	f001 fa46 	bl	80162da <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8014e4e:	9b03      	ldr	r3, [sp, #12]
 8014e50:	4286      	cmp	r6, r0
 8014e52:	eba9 0903 	sub.w	r9, r9, r3
 8014e56:	bfb8      	it	lt
 8014e58:	4606      	movlt	r6, r0
 8014e5a:	a80f      	add	r0, sp, #60	@ 0x3c
 8014e5c:	fa0f f989 	sxth.w	r9, r9
 8014e60:	b236      	sxth	r6, r6
 8014e62:	f004 f8e6 	bl	8019032 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8014e66:	b918      	cbnz	r0, 8014e70 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014e68:	7a2b      	ldrb	r3, [r5, #8]
 8014e6a:	444b      	add	r3, r9
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	dcde      	bgt.n	8014e2e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8014e70:	9b03      	ldr	r3, [sp, #12]
 8014e72:	4620      	mov	r0, r4
 8014e74:	9a04      	ldr	r2, [sp, #16]
 8014e76:	fb13 f707 	smulbb	r7, r3, r7
 8014e7a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014e7c:	f895 9009 	ldrb.w	r9, [r5, #9]
 8014e80:	1aff      	subs	r7, r7, r3
 8014e82:	b2bf      	uxth	r7, r7
 8014e84:	b23b      	sxth	r3, r7
 8014e86:	429a      	cmp	r2, r3
 8014e88:	bfa8      	it	ge
 8014e8a:	4657      	movge	r7, sl
 8014e8c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014e90:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014e94:	6823      	ldr	r3, [r4, #0]
 8014e96:	444f      	add	r7, r9
 8014e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e9a:	bf08      	it	eq
 8014e9c:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8014ea0:	fa1f f987 	uxth.w	r9, r7
 8014ea4:	bf18      	it	ne
 8014ea6:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8014eaa:	4798      	blx	r3
 8014eac:	2801      	cmp	r0, #1
 8014eae:	fa0f f789 	sxth.w	r7, r9
 8014eb2:	b2b3      	uxth	r3, r6
 8014eb4:	f000 80e2 	beq.w	801507c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8014eb8:	2802      	cmp	r0, #2
 8014eba:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8014ebe:	f000 80e3 	beq.w	8015088 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8014ec2:	7aea      	ldrb	r2, [r5, #11]
 8014ec4:	b236      	sxth	r6, r6
 8014ec6:	7b2d      	ldrb	r5, [r5, #12]
 8014ec8:	1ab6      	subs	r6, r6, r2
 8014eca:	442a      	add	r2, r5
 8014ecc:	fa1f fa86 	uxth.w	sl, r6
 8014ed0:	4413      	add	r3, r2
 8014ed2:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8014ed6:	fa0f fb8a 	sxth.w	fp, sl
 8014eda:	b29b      	uxth	r3, r3
 8014edc:	2a02      	cmp	r2, #2
 8014ede:	b21e      	sxth	r6, r3
 8014ee0:	f000 80d6 	beq.w	8015090 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8014ee4:	2a03      	cmp	r2, #3
 8014ee6:	f000 80de 	beq.w	80150a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8014eea:	2a01      	cmp	r2, #1
 8014eec:	f040 80e6 	bne.w	80150bc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8014ef0:	8925      	ldrh	r5, [r4, #8]
 8014ef2:	4633      	mov	r3, r6
 8014ef4:	463e      	mov	r6, r7
 8014ef6:	eba5 0909 	sub.w	r9, r5, r9
 8014efa:	461f      	mov	r7, r3
 8014efc:	465d      	mov	r5, fp
 8014efe:	fa0f fb89 	sxth.w	fp, r9
 8014f02:	4b5d      	ldr	r3, [pc, #372]	@ (8015078 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014f04:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8014f06:	6818      	ldr	r0, [r3, #0]
 8014f08:	f7fa fc54 	bl	800f7b4 <_ZNK8touchgfx5Texts7getTextEt>
 8014f0c:	f8a8 b000 	strh.w	fp, [r8]
 8014f10:	f8a8 5002 	strh.w	r5, [r8, #2]
 8014f14:	f8a8 6004 	strh.w	r6, [r8, #4]
 8014f18:	f8a8 7006 	strh.w	r7, [r8, #6]
 8014f1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8014f20:	e738      	b.n	8014d94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8014f22:	f004 f85f 	bl	8018fe4 <_ZN8touchgfx12TextProviderC1Ev>
 8014f26:	682b      	ldr	r3, [r5, #0]
 8014f28:	4628      	mov	r0, r5
 8014f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f2c:	4798      	blx	r3
 8014f2e:	682b      	ldr	r3, [r5, #0]
 8014f30:	4607      	mov	r7, r0
 8014f32:	4628      	mov	r0, r5
 8014f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f36:	4798      	blx	r3
 8014f38:	6823      	ldr	r3, [r4, #0]
 8014f3a:	4683      	mov	fp, r0
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014f40:	4798      	blx	r3
 8014f42:	6822      	ldr	r2, [r4, #0]
 8014f44:	9005      	str	r0, [sp, #20]
 8014f46:	4620      	mov	r0, r4
 8014f48:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8014f4c:	4790      	blx	r2
 8014f4e:	9b05      	ldr	r3, [sp, #20]
 8014f50:	463a      	mov	r2, r7
 8014f52:	4649      	mov	r1, r9
 8014f54:	9001      	str	r0, [sp, #4]
 8014f56:	a80f      	add	r0, sp, #60	@ 0x3c
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	465b      	mov	r3, fp
 8014f5c:	f004 f8b2 	bl	80190c4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8014f60:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014f64:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8014f68:	af0f      	add	r7, sp, #60	@ 0x3c
 8014f6a:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014f6e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014f72:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8014f74:	bf0a      	itet	eq
 8014f76:	464a      	moveq	r2, r9
 8014f78:	461a      	movne	r2, r3
 8014f7a:	4699      	moveq	r9, r3
 8014f7c:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8014f80:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8014f84:	1ad2      	subs	r2, r2, r3
 8014f86:	6833      	ldr	r3, [r6, #0]
 8014f88:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8014f8c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8014f90:	7859      	ldrb	r1, [r3, #1]
 8014f92:	2300      	movs	r3, #0
 8014f94:	9707      	str	r7, [sp, #28]
 8014f96:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8014f9a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014f9e:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8014fa2:	f88d 1020 	strb.w	r1, [sp, #32]
 8014fa6:	9509      	str	r5, [sp, #36]	@ 0x24
 8014fa8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8014fac:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8014fb0:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8014fb4:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014fb8:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8014fbc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8014fc0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8014fc4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8014fc8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8014fcc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8014fd0:	b350      	cbz	r0, 8015028 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014fd2:	682b      	ldr	r3, [r5, #0]
 8014fd4:	4628      	mov	r0, r5
 8014fd6:	695b      	ldr	r3, [r3, #20]
 8014fd8:	4798      	blx	r3
 8014fda:	4607      	mov	r7, r0
 8014fdc:	b320      	cbz	r0, 8015028 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014fe0:	4639      	mov	r1, r7
 8014fe2:	6803      	ldr	r3, [r0, #0]
 8014fe4:	68db      	ldr	r3, [r3, #12]
 8014fe6:	4798      	blx	r3
 8014fe8:	4606      	mov	r6, r0
 8014fea:	b1e8      	cbz	r0, 8015028 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014fec:	7b43      	ldrb	r3, [r0, #13]
 8014fee:	7a82      	ldrb	r2, [r0, #10]
 8014ff0:	005b      	lsls	r3, r3, #1
 8014ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ff6:	4313      	orrs	r3, r2
 8014ff8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8014ffc:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8015000:	2b06      	cmp	r3, #6
 8015002:	d111      	bne.n	8015028 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8015004:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015006:	4632      	mov	r2, r6
 8015008:	4639      	mov	r1, r7
 801500a:	6803      	ldr	r3, [r0, #0]
 801500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801500e:	4798      	blx	r3
 8015010:	7b73      	ldrb	r3, [r6, #13]
 8015012:	005b      	lsls	r3, r3, #1
 8015014:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015018:	7ab3      	ldrb	r3, [r6, #10]
 801501a:	4313      	orrs	r3, r2
 801501c:	4418      	add	r0, r3
 801501e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015022:	4418      	add	r0, r3
 8015024:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8015028:	2600      	movs	r6, #0
 801502a:	4637      	mov	r7, r6
 801502c:	a806      	add	r0, sp, #24
 801502e:	3701      	adds	r7, #1
 8015030:	f001 fb49 	bl	80166c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015034:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8015038:	9b03      	ldr	r3, [sp, #12]
 801503a:	b2bf      	uxth	r7, r7
 801503c:	4286      	cmp	r6, r0
 801503e:	eba9 0903 	sub.w	r9, r9, r3
 8015042:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015046:	bfb8      	it	lt
 8015048:	4606      	movlt	r6, r0
 801504a:	fa0f f989 	sxth.w	r9, r9
 801504e:	b236      	sxth	r6, r6
 8015050:	2b00      	cmp	r3, #0
 8015052:	f43f af0d 	beq.w	8014e70 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015056:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 801505a:	2b00      	cmp	r3, #0
 801505c:	f47f af08 	bne.w	8014e70 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015060:	7a2b      	ldrb	r3, [r5, #8]
 8015062:	444b      	add	r3, r9
 8015064:	2b00      	cmp	r3, #0
 8015066:	dce1      	bgt.n	801502c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8015068:	e702      	b.n	8014e70 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801506a:	bf00      	nop
 801506c:	24006654 	.word	0x24006654
 8015070:	24006650 	.word	0x24006650
 8015074:	24006658 	.word	0x24006658
 8015078:	2400665c 	.word	0x2400665c
 801507c:	ebaa 0606 	sub.w	r6, sl, r6
 8015080:	2002      	movs	r0, #2
 8015082:	fb96 f6f0 	sdiv	r6, r6, r0
 8015086:	e71c      	b.n	8014ec2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8015088:	441e      	add	r6, r3
 801508a:	ebaa 0606 	sub.w	r6, sl, r6
 801508e:	e718      	b.n	8014ec2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8015090:	8925      	ldrh	r5, [r4, #8]
 8015092:	1aed      	subs	r5, r5, r3
 8015094:	eba5 050a 	sub.w	r5, r5, sl
 8015098:	fa0f fb85 	sxth.w	fp, r5
 801509c:	8965      	ldrh	r5, [r4, #10]
 801509e:	eba5 0509 	sub.w	r5, r5, r9
 80150a2:	b22d      	sxth	r5, r5
 80150a4:	e72d      	b.n	8014f02 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80150a6:	8965      	ldrh	r5, [r4, #10]
 80150a8:	f04f 0b00 	mov.w	fp, #0
 80150ac:	1aed      	subs	r5, r5, r3
 80150ae:	4633      	mov	r3, r6
 80150b0:	463e      	mov	r6, r7
 80150b2:	eba5 050a 	sub.w	r5, r5, sl
 80150b6:	461f      	mov	r7, r3
 80150b8:	b22d      	sxth	r5, r5
 80150ba:	e722      	b.n	8014f02 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80150bc:	2500      	movs	r5, #0
 80150be:	e720      	b.n	8014f02 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

080150c0 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80150c0:	b513      	push	{r0, r1, r4, lr}
 80150c2:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80150c6:	4604      	mov	r4, r0
 80150c8:	b1fb      	cbz	r3, 801510a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80150ca:	4b16      	ldr	r3, [pc, #88]	@ (8015124 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80150cc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80150ce:	881b      	ldrh	r3, [r3, #0]
 80150d0:	428b      	cmp	r3, r1
 80150d2:	d91a      	bls.n	801510a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80150d4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	dd16      	ble.n	801510a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80150dc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	dd12      	ble.n	801510a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80150e4:	4b10      	ldr	r3, [pc, #64]	@ (8015128 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80150e6:	6818      	ldr	r0, [r3, #0]
 80150e8:	f7fa fb64 	bl	800f7b4 <_ZNK8touchgfx5Texts7getTextEt>
 80150ec:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80150f0:	6822      	ldr	r2, [r4, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	db06      	blt.n	8015104 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80150f6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	db02      	blt.n	8015104 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80150fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015100:	4298      	cmp	r0, r3
 8015102:	d004      	beq.n	801510e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8015104:	6953      	ldr	r3, [r2, #20]
 8015106:	4620      	mov	r0, r4
 8015108:	4798      	blx	r3
 801510a:	b002      	add	sp, #8
 801510c:	bd10      	pop	{r4, pc}
 801510e:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8015112:	466b      	mov	r3, sp
 8015114:	6912      	ldr	r2, [r2, #16]
 8015116:	c903      	ldmia	r1, {r0, r1}
 8015118:	e883 0003 	stmia.w	r3, {r0, r1}
 801511c:	4619      	mov	r1, r3
 801511e:	4620      	mov	r0, r4
 8015120:	4790      	blx	r2
 8015122:	e7f2      	b.n	801510a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015124:	24006654 	.word	0x24006654
 8015128:	2400665c 	.word	0x2400665c

0801512c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801512c:	4b45      	ldr	r3, [pc, #276]	@ (8015244 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801512e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015132:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015134:	b08e      	sub	sp, #56	@ 0x38
 8015136:	881b      	ldrh	r3, [r3, #0]
 8015138:	4604      	mov	r4, r0
 801513a:	4293      	cmp	r3, r2
 801513c:	d97e      	bls.n	801523c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801513e:	6808      	ldr	r0, [r1, #0]
 8015140:	ab05      	add	r3, sp, #20
 8015142:	6849      	ldr	r1, [r1, #4]
 8015144:	4d40      	ldr	r5, [pc, #256]	@ (8015248 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8015146:	c303      	stmia	r3!, {r0, r1}
 8015148:	4611      	mov	r1, r2
 801514a:	6828      	ldr	r0, [r5, #0]
 801514c:	f7fa fb32 	bl	800f7b4 <_ZNK8touchgfx5Texts7getTextEt>
 8015150:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8015154:	2b00      	cmp	r3, #0
 8015156:	db11      	blt.n	801517c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015158:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 801515c:	2b00      	cmp	r3, #0
 801515e:	db0d      	blt.n	801517c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015160:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015162:	4298      	cmp	r0, r3
 8015164:	d10a      	bne.n	801517c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015166:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801516a:	ab09      	add	r3, sp, #36	@ 0x24
 801516c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015170:	e883 0003 	stmia.w	r3, {r0, r1}
 8015174:	4619      	mov	r1, r3
 8015176:	a805      	add	r0, sp, #20
 8015178:	f7fd fdf4 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 801517c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015180:	2b00      	cmp	r3, #0
 8015182:	dd5b      	ble.n	801523c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015184:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015188:	2b00      	cmp	r3, #0
 801518a:	dd57      	ble.n	801523c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801518c:	4f2f      	ldr	r7, [pc, #188]	@ (801524c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801518e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015196:	4b2e      	ldr	r3, [pc, #184]	@ (8015250 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801519e:	2e00      	cmp	r6, #0
 80151a0:	d04c      	beq.n	801523c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80151a2:	6823      	ldr	r3, [r4, #0]
 80151a4:	4620      	mov	r0, r4
 80151a6:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 80151aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151ac:	4798      	blx	r3
 80151ae:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80151b0:	683b      	ldr	r3, [r7, #0]
 80151b2:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 80151b6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80151ba:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 80151be:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 80151c2:	785b      	ldrb	r3, [r3, #1]
 80151c4:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 80151c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80151cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80151ce:	9609      	str	r6, [sp, #36]	@ 0x24
 80151d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80151d4:	4b1f      	ldr	r3, [pc, #124]	@ (8015254 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80151d6:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 80151e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80151e2:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 80151e6:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 80151ea:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80151ee:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80151f2:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80151f6:	b10a      	cbz	r2, 80151fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80151f8:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80151fa:	b906      	cbnz	r6, 80151fe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80151fc:	689e      	ldr	r6, [r3, #8]
 80151fe:	af07      	add	r7, sp, #28
 8015200:	4621      	mov	r1, r4
 8015202:	4638      	mov	r0, r7
 8015204:	f003 faa4 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015208:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801520a:	6828      	ldr	r0, [r5, #0]
 801520c:	f7fa fad2 	bl	800f7b4 <_ZNK8touchgfx5Texts7getTextEt>
 8015210:	6823      	ldr	r3, [r4, #0]
 8015212:	4605      	mov	r5, r0
 8015214:	4620      	mov	r0, r4
 8015216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015218:	4798      	blx	r3
 801521a:	6823      	ldr	r3, [r4, #0]
 801521c:	4680      	mov	r8, r0
 801521e:	4620      	mov	r0, r4
 8015220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015224:	4798      	blx	r3
 8015226:	ab09      	add	r3, sp, #36	@ 0x24
 8015228:	9501      	str	r5, [sp, #4]
 801522a:	9300      	str	r3, [sp, #0]
 801522c:	ab05      	add	r3, sp, #20
 801522e:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8015232:	4630      	mov	r0, r6
 8015234:	e897 0006 	ldmia.w	r7, {r1, r2}
 8015238:	f7fa fa4d 	bl	800f6d6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801523c:	b00e      	add	sp, #56	@ 0x38
 801523e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015242:	bf00      	nop
 8015244:	24006654 	.word	0x24006654
 8015248:	2400665c 	.word	0x2400665c
 801524c:	24006650 	.word	0x24006650
 8015250:	24006658 	.word	0x24006658
 8015254:	24006600 	.word	0x24006600

08015258 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015258:	b538      	push	{r3, r4, r5, lr}
 801525a:	4b0e      	ldr	r3, [pc, #56]	@ (8015294 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801525c:	4604      	mov	r4, r0
 801525e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015260:	881b      	ldrh	r3, [r3, #0]
 8015262:	429a      	cmp	r2, r3
 8015264:	d214      	bcs.n	8015290 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8015266:	6803      	ldr	r3, [r0, #0]
 8015268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801526a:	4798      	blx	r3
 801526c:	6823      	ldr	r3, [r4, #0]
 801526e:	4605      	mov	r5, r0
 8015270:	4620      	mov	r0, r4
 8015272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015274:	4798      	blx	r3
 8015276:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801527a:	b22d      	sxth	r5, r5
 801527c:	4601      	mov	r1, r0
 801527e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8015282:	bf06      	itte	eq
 8015284:	4602      	moveq	r2, r0
 8015286:	4629      	moveq	r1, r5
 8015288:	462a      	movne	r2, r5
 801528a:	4620      	mov	r0, r4
 801528c:	f7f8 ffff 	bl	800e28e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015290:	bd38      	pop	{r3, r4, r5, pc}
 8015292:	bf00      	nop
 8015294:	24006654 	.word	0x24006654

08015298 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8015298:	b530      	push	{r4, r5, lr}
 801529a:	888b      	ldrh	r3, [r1, #4]
 801529c:	b085      	sub	sp, #20
 801529e:	4604      	mov	r4, r0
 80152a0:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80152a2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80152a6:	b923      	cbnz	r3, 80152b2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80152a8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80152ac:	b90b      	cbnz	r3, 80152b2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80152ae:	f7ff ffd3 	bl	8015258 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80152b2:	6823      	ldr	r3, [r4, #0]
 80152b4:	466d      	mov	r5, sp
 80152b6:	4621      	mov	r1, r4
 80152b8:	343c      	adds	r4, #60	@ 0x3c
 80152ba:	4628      	mov	r0, r5
 80152bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152c0:	4798      	blx	r3
 80152c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80152c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80152ca:	b005      	add	sp, #20
 80152cc:	bd30      	pop	{r4, r5, pc}

080152ce <_ZNK8touchgfx3Box12getSolidRectEv>:
 80152ce:	2300      	movs	r3, #0
 80152d0:	8083      	strh	r3, [r0, #4]
 80152d2:	80c3      	strh	r3, [r0, #6]
 80152d4:	8003      	strh	r3, [r0, #0]
 80152d6:	8043      	strh	r3, [r0, #2]
 80152d8:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80152dc:	2bff      	cmp	r3, #255	@ 0xff
 80152de:	bf01      	itttt	eq
 80152e0:	890b      	ldrheq	r3, [r1, #8]
 80152e2:	8083      	strheq	r3, [r0, #4]
 80152e4:	894b      	ldrheq	r3, [r1, #10]
 80152e6:	80c3      	strheq	r3, [r0, #6]
 80152e8:	4770      	bx	lr
	...

080152ec <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80152ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152ee:	4604      	mov	r4, r0
 80152f0:	466b      	mov	r3, sp
 80152f2:	6808      	ldr	r0, [r1, #0]
 80152f4:	6849      	ldr	r1, [r1, #4]
 80152f6:	c303      	stmia	r3!, {r0, r1}
 80152f8:	6823      	ldr	r3, [r4, #0]
 80152fa:	4669      	mov	r1, sp
 80152fc:	4620      	mov	r0, r4
 80152fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015300:	4798      	blx	r3
 8015302:	4b08      	ldr	r3, [pc, #32]	@ (8015324 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801530a:	b10a      	cbz	r2, 8015310 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801530c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801530e:	b900      	cbnz	r0, 8015312 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8015310:	6898      	ldr	r0, [r3, #8]
 8015312:	6803      	ldr	r3, [r0, #0]
 8015314:	4669      	mov	r1, sp
 8015316:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8015318:	6a1d      	ldr	r5, [r3, #32]
 801531a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801531e:	47a8      	blx	r5
 8015320:	b003      	add	sp, #12
 8015322:	bd30      	pop	{r4, r5, pc}
 8015324:	24006600 	.word	0x24006600

08015328 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8015328:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801532c:	b12a      	cbz	r2, 801533a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801532e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8015332:	b112      	cbz	r2, 801533a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015334:	6803      	ldr	r3, [r0, #0]
 8015336:	695b      	ldr	r3, [r3, #20]
 8015338:	4718      	bx	r3
 801533a:	4770      	bx	lr

0801533c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801533c:	b570      	push	{r4, r5, r6, lr}
 801533e:	880b      	ldrh	r3, [r1, #0]
 8015340:	4605      	mov	r5, r0
 8015342:	4604      	mov	r4, r0
 8015344:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8015346:	8813      	ldrh	r3, [r2, #0]
 8015348:	f825 3f30 	strh.w	r3, [r5, #48]!
 801534c:	4628      	mov	r0, r5
 801534e:	f005 fb55 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015352:	4606      	mov	r6, r0
 8015354:	4628      	mov	r0, r5
 8015356:	f005 fb85 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801535a:	6823      	ldr	r3, [r4, #0]
 801535c:	4605      	mov	r5, r0
 801535e:	4631      	mov	r1, r6
 8015360:	4620      	mov	r0, r4
 8015362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015364:	4798      	blx	r3
 8015366:	6823      	ldr	r3, [r4, #0]
 8015368:	4629      	mov	r1, r5
 801536a:	4620      	mov	r0, r4
 801536c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801536e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015372:	4718      	bx	r3

08015374 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8015374:	b510      	push	{r4, lr}
 8015376:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 801537a:	4604      	mov	r4, r0
 801537c:	2bff      	cmp	r3, #255	@ 0xff
 801537e:	d006      	beq.n	801538e <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8015380:	2300      	movs	r3, #0
 8015382:	8003      	strh	r3, [r0, #0]
 8015384:	8043      	strh	r3, [r0, #2]
 8015386:	8083      	strh	r3, [r0, #4]
 8015388:	80c3      	strh	r3, [r0, #6]
 801538a:	4620      	mov	r0, r4
 801538c:	bd10      	pop	{r4, pc}
 801538e:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8015392:	b11b      	cbz	r3, 801539c <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8015394:	3130      	adds	r1, #48	@ 0x30
 8015396:	f005 fb99 	bl	801aacc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801539a:	e7f6      	b.n	801538a <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801539c:	312e      	adds	r1, #46	@ 0x2e
 801539e:	e7fa      	b.n	8015396 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080153a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80153a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80153a8:	b08a      	sub	sp, #40	@ 0x28
 80153aa:	4604      	mov	r4, r0
 80153ac:	4688      	mov	r8, r1
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d066      	beq.n	8015480 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80153b2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80153b4:	a805      	add	r0, sp, #20
 80153b6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80153ba:	f005 fb1f 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80153be:	4607      	mov	r7, r0
 80153c0:	a805      	add	r0, sp, #20
 80153c2:	f005 fb4f 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80153c6:	f9b8 6000 	ldrsh.w	r6, [r8]
 80153ca:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80153ce:	2300      	movs	r3, #0
 80153d0:	4432      	add	r2, r6
 80153d2:	9306      	str	r3, [sp, #24]
 80153d4:	b292      	uxth	r2, r2
 80153d6:	fa0f fc82 	sxth.w	ip, r2
 80153da:	459c      	cmp	ip, r3
 80153dc:	dd52      	ble.n	8015484 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80153de:	42b7      	cmp	r7, r6
 80153e0:	dd50      	ble.n	8015484 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80153e2:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80153e6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80153ea:	442b      	add	r3, r5
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	b219      	sxth	r1, r3
 80153f0:	2900      	cmp	r1, #0
 80153f2:	dd47      	ble.n	8015484 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80153f4:	42a8      	cmp	r0, r5
 80153f6:	dd45      	ble.n	8015484 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80153f8:	4567      	cmp	r7, ip
 80153fa:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80153fe:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8015402:	bfb8      	it	lt
 8015404:	b2ba      	uxthlt	r2, r7
 8015406:	4288      	cmp	r0, r1
 8015408:	f8ad 6018 	strh.w	r6, [sp, #24]
 801540c:	bfb8      	it	lt
 801540e:	b283      	uxthlt	r3, r0
 8015410:	1b92      	subs	r2, r2, r6
 8015412:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015416:	1b5b      	subs	r3, r3, r5
 8015418:	f8ad 201c 	strh.w	r2, [sp, #28]
 801541c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015420:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015424:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015428:	429a      	cmp	r2, r3
 801542a:	d026      	beq.n	801547a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801542c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015430:	2b00      	cmp	r3, #0
 8015432:	dd22      	ble.n	801547a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8015434:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015438:	2b00      	cmp	r3, #0
 801543a:	dd1e      	ble.n	801547a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801543c:	2300      	movs	r3, #0
 801543e:	a908      	add	r1, sp, #32
 8015440:	4620      	mov	r0, r4
 8015442:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015446:	6823      	ldr	r3, [r4, #0]
 8015448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801544a:	4798      	blx	r3
 801544c:	4b0f      	ldr	r3, [pc, #60]	@ (801548c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015454:	b10a      	cbz	r2, 801545a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8015456:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8015458:	b900      	cbnz	r0, 801545c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801545a:	6898      	ldr	r0, [r3, #8]
 801545c:	2501      	movs	r5, #1
 801545e:	6801      	ldr	r1, [r0, #0]
 8015460:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8015464:	9502      	str	r5, [sp, #8]
 8015466:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801546a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801546e:	9401      	str	r4, [sp, #4]
 8015470:	ac06      	add	r4, sp, #24
 8015472:	9400      	str	r4, [sp, #0]
 8015474:	688c      	ldr	r4, [r1, #8]
 8015476:	a905      	add	r1, sp, #20
 8015478:	47a0      	blx	r4
 801547a:	b00a      	add	sp, #40	@ 0x28
 801547c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015480:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8015482:	e797      	b.n	80153b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8015484:	2300      	movs	r3, #0
 8015486:	9307      	str	r3, [sp, #28]
 8015488:	e7ca      	b.n	8015420 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801548a:	bf00      	nop
 801548c:	24006600 	.word	0x24006600

08015490 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8015490:	4b30      	ldr	r3, [pc, #192]	@ (8015554 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8015492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015496:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015498:	b08d      	sub	sp, #52	@ 0x34
 801549a:	881b      	ldrh	r3, [r3, #0]
 801549c:	4604      	mov	r4, r0
 801549e:	460f      	mov	r7, r1
 80154a0:	4293      	cmp	r3, r2
 80154a2:	d954      	bls.n	801554e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80154a4:	4b2c      	ldr	r3, [pc, #176]	@ (8015558 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80154a6:	6819      	ldr	r1, [r3, #0]
 80154a8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80154ac:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80154b0:	4a2a      	ldr	r2, [pc, #168]	@ (801555c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80154b2:	6812      	ldr	r2, [r2, #0]
 80154b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80154b8:	2900      	cmp	r1, #0
 80154ba:	d048      	beq.n	801554e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80154bc:	785a      	ldrb	r2, [r3, #1]
 80154be:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80154c2:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80154c6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80154ca:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80154ce:	4b24      	ldr	r3, [pc, #144]	@ (8015560 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80154d0:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 80154d4:	681a      	ldr	r2, [r3, #0]
 80154d6:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 80154da:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 80154de:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 80154e2:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80154e4:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 80154e8:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80154ec:	9107      	str	r1, [sp, #28]
 80154ee:	f88d 8020 	strb.w	r8, [sp, #32]
 80154f2:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 80154f6:	9609      	str	r6, [sp, #36]	@ 0x24
 80154f8:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 80154fc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8015500:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8015504:	b10b      	cbz	r3, 801550a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8015506:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8015508:	b905      	cbnz	r5, 801550c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801550a:	6895      	ldr	r5, [r2, #8]
 801550c:	ae05      	add	r6, sp, #20
 801550e:	4621      	mov	r1, r4
 8015510:	4630      	mov	r0, r6
 8015512:	f003 f91d 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015516:	4b13      	ldr	r3, [pc, #76]	@ (8015564 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8015518:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801551a:	6818      	ldr	r0, [r3, #0]
 801551c:	f7fa f94a 	bl	800f7b4 <_ZNK8touchgfx5Texts7getTextEt>
 8015520:	6823      	ldr	r3, [r4, #0]
 8015522:	4680      	mov	r8, r0
 8015524:	4620      	mov	r0, r4
 8015526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015528:	4798      	blx	r3
 801552a:	6823      	ldr	r3, [r4, #0]
 801552c:	4681      	mov	r9, r0
 801552e:	4620      	mov	r0, r4
 8015530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015534:	4798      	blx	r3
 8015536:	ab07      	add	r3, sp, #28
 8015538:	f8cd 8004 	str.w	r8, [sp, #4]
 801553c:	9300      	str	r3, [sp, #0]
 801553e:	463b      	mov	r3, r7
 8015540:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8015544:	4628      	mov	r0, r5
 8015546:	e896 0006 	ldmia.w	r6, {r1, r2}
 801554a:	f7fa f8c4 	bl	800f6d6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801554e:	b00d      	add	sp, #52	@ 0x34
 8015550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015554:	24006654 	.word	0x24006654
 8015558:	24006650 	.word	0x24006650
 801555c:	24006658 	.word	0x24006658
 8015560:	24006600 	.word	0x24006600
 8015564:	2400665c 	.word	0x2400665c

08015568 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8015568:	b570      	push	{r4, r5, r6, lr}
 801556a:	880b      	ldrh	r3, [r1, #0]
 801556c:	460d      	mov	r5, r1
 801556e:	4604      	mov	r4, r0
 8015570:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8015572:	4608      	mov	r0, r1
 8015574:	f005 fa42 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015578:	4606      	mov	r6, r0
 801557a:	4628      	mov	r0, r5
 801557c:	f005 fa72 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015580:	6823      	ldr	r3, [r4, #0]
 8015582:	4605      	mov	r5, r0
 8015584:	4631      	mov	r1, r6
 8015586:	4620      	mov	r0, r4
 8015588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801558a:	4798      	blx	r3
 801558c:	6823      	ldr	r3, [r4, #0]
 801558e:	4629      	mov	r1, r5
 8015590:	4620      	mov	r0, r4
 8015592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015598:	4718      	bx	r3

0801559a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801559a:	b510      	push	{r4, lr}
 801559c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80155a0:	4604      	mov	r4, r0
 80155a2:	2bff      	cmp	r3, #255	@ 0xff
 80155a4:	d006      	beq.n	80155b4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80155a6:	2300      	movs	r3, #0
 80155a8:	8003      	strh	r3, [r0, #0]
 80155aa:	8043      	strh	r3, [r0, #2]
 80155ac:	8083      	strh	r3, [r0, #4]
 80155ae:	80c3      	strh	r3, [r0, #6]
 80155b0:	4620      	mov	r0, r4
 80155b2:	bd10      	pop	{r4, pc}
 80155b4:	3126      	adds	r1, #38	@ 0x26
 80155b6:	f005 fa89 	bl	801aacc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80155ba:	e7f9      	b.n	80155b0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080155bc <_ZNK8touchgfx5Image17invalidateContentEv>:
 80155bc:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 80155c0:	b12a      	cbz	r2, 80155ce <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80155c2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80155c6:	b112      	cbz	r2, 80155ce <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80155c8:	6803      	ldr	r3, [r0, #0]
 80155ca:	695b      	ldr	r3, [r3, #20]
 80155cc:	4718      	bx	r3
 80155ce:	4770      	bx	lr

080155d0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80155d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155d4:	4604      	mov	r4, r0
 80155d6:	b088      	sub	sp, #32
 80155d8:	2500      	movs	r5, #0
 80155da:	460f      	mov	r7, r1
 80155dc:	f854 3b26 	ldr.w	r3, [r4], #38
 80155e0:	a904      	add	r1, sp, #16
 80155e2:	4606      	mov	r6, r0
 80155e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80155ea:	4798      	blx	r3
 80155ec:	4620      	mov	r0, r4
 80155ee:	f005 fa05 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80155f2:	4680      	mov	r8, r0
 80155f4:	4620      	mov	r0, r4
 80155f6:	f005 fa35 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80155fa:	9506      	str	r5, [sp, #24]
 80155fc:	ad06      	add	r5, sp, #24
 80155fe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015602:	4639      	mov	r1, r7
 8015604:	f8ad 801c 	strh.w	r8, [sp, #28]
 8015608:	4628      	mov	r0, r5
 801560a:	f7fd fbab 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 801560e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015612:	2b00      	cmp	r3, #0
 8015614:	dd19      	ble.n	801564a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015616:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801561a:	2b00      	cmp	r3, #0
 801561c:	dd15      	ble.n	801564a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801561e:	4b0c      	ldr	r3, [pc, #48]	@ (8015650 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015626:	b10a      	cbz	r2, 801562c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8015628:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801562a:	b900      	cbnz	r0, 801562e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801562c:	6898      	ldr	r0, [r3, #8]
 801562e:	2701      	movs	r7, #1
 8015630:	6801      	ldr	r1, [r0, #0]
 8015632:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015636:	9702      	str	r7, [sp, #8]
 8015638:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 801563c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015640:	e9cd 5600 	strd	r5, r6, [sp]
 8015644:	688d      	ldr	r5, [r1, #8]
 8015646:	4621      	mov	r1, r4
 8015648:	47a8      	blx	r5
 801564a:	b008      	add	sp, #32
 801564c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015650:	24006600 	.word	0x24006600

08015654 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8015654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015658:	b08d      	sub	sp, #52	@ 0x34
 801565a:	4604      	mov	r4, r0
 801565c:	460f      	mov	r7, r1
 801565e:	f7ff fe9f 	bl	80153a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8015662:	4a55      	ldr	r2, [pc, #340]	@ (80157b8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8015664:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8015666:	8812      	ldrh	r2, [r2, #0]
 8015668:	429a      	cmp	r2, r3
 801566a:	f240 8082 	bls.w	8015772 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801566e:	4d53      	ldr	r5, [pc, #332]	@ (80157bc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8015670:	682a      	ldr	r2, [r5, #0]
 8015672:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015676:	4b52      	ldr	r3, [pc, #328]	@ (80157c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801567e:	2200      	movs	r2, #0
 8015680:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8015684:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015688:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 801568c:	2a03      	cmp	r2, #3
 801568e:	d811      	bhi.n	80156b4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8015690:	e8df f002 	tbb	[pc, r2]
 8015694:	89727902 	.word	0x89727902
 8015698:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801569c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80156a0:	1ad2      	subs	r2, r2, r3
 80156a2:	2002      	movs	r0, #2
 80156a4:	f8ad 1010 	strh.w	r1, [sp, #16]
 80156a8:	f8ad 3012 	strh.w	r3, [sp, #18]
 80156ac:	fb92 f2f0 	sdiv	r2, r2, r0
 80156b0:	f8ad 200e 	strh.w	r2, [sp, #14]
 80156b4:	f10d 080c 	add.w	r8, sp, #12
 80156b8:	f10d 0914 	add.w	r9, sp, #20
 80156bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80156c0:	e889 0003 	stmia.w	r9, {r0, r1}
 80156c4:	4639      	mov	r1, r7
 80156c6:	4648      	mov	r0, r9
 80156c8:	f7fd fb4c 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 80156cc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	dd4e      	ble.n	8015772 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80156d4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	dd4a      	ble.n	8015772 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80156dc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80156e0:	4641      	mov	r1, r8
 80156e2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80156e6:	4620      	mov	r0, r4
 80156e8:	1a9b      	subs	r3, r3, r2
 80156ea:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80156ee:	f8ad 3014 	strh.w	r3, [sp, #20]
 80156f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80156f6:	1a9b      	subs	r3, r3, r2
 80156f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156fc:	6823      	ldr	r3, [r4, #0]
 80156fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015700:	4798      	blx	r3
 8015702:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015706:	2b00      	cmp	r3, #0
 8015708:	d053      	beq.n	80157b2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 801570a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801570c:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 801570e:	682b      	ldr	r3, [r5, #0]
 8015710:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8015714:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8015718:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 801571c:	785b      	ldrb	r3, [r3, #1]
 801571e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015720:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8015724:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015728:	9607      	str	r6, [sp, #28]
 801572a:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 801572e:	2300      	movs	r3, #0
 8015730:	f88d 5020 	strb.w	r5, [sp, #32]
 8015734:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8015738:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 801573c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8015740:	4b20      	ldr	r3, [pc, #128]	@ (80157c4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8015742:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801574c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015750:	b10a      	cbz	r2, 8015756 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8015752:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015754:	b904      	cbnz	r4, 8015758 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8015756:	689c      	ldr	r4, [r3, #8]
 8015758:	4b1b      	ldr	r3, [pc, #108]	@ (80157c8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801575a:	6818      	ldr	r0, [r3, #0]
 801575c:	f7fa f82a 	bl	800f7b4 <_ZNK8touchgfx5Texts7getTextEt>
 8015760:	ab07      	add	r3, sp, #28
 8015762:	9001      	str	r0, [sp, #4]
 8015764:	4620      	mov	r0, r4
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	464b      	mov	r3, r9
 801576a:	e898 0006 	ldmia.w	r8, {r1, r2}
 801576e:	f7f9 ffb2 	bl	800f6d6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015772:	b00d      	add	sp, #52	@ 0x34
 8015774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015778:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801577c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8015780:	1ad2      	subs	r2, r2, r3
 8015782:	3201      	adds	r2, #1
 8015784:	e78d      	b.n	80156a2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 8015786:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801578a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801578e:	1ad2      	subs	r2, r2, r3
 8015790:	3201      	adds	r2, #1
 8015792:	2002      	movs	r0, #2
 8015794:	f8ad 3010 	strh.w	r3, [sp, #16]
 8015798:	f8ad 1012 	strh.w	r1, [sp, #18]
 801579c:	fb92 f2f0 	sdiv	r2, r2, r0
 80157a0:	f8ad 200c 	strh.w	r2, [sp, #12]
 80157a4:	e786      	b.n	80156b4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80157a6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80157aa:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80157ae:	1ad2      	subs	r2, r2, r3
 80157b0:	e7ef      	b.n	8015792 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80157b2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80157b4:	e7aa      	b.n	801570c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80157b6:	bf00      	nop
 80157b8:	24006654 	.word	0x24006654
 80157bc:	24006650 	.word	0x24006650
 80157c0:	24006658 	.word	0x24006658
 80157c4:	24006600 	.word	0x24006600
 80157c8:	2400665c 	.word	0x2400665c

080157cc <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80157cc:	2101      	movs	r1, #1
 80157ce:	2200      	movs	r2, #0
 80157d0:	b510      	push	{r4, lr}
 80157d2:	4c13      	ldr	r4, [pc, #76]	@ (8015820 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80157d4:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80157d8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80157dc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80157e0:	6004      	str	r4, [r0, #0]
 80157e2:	4c10      	ldr	r4, [pc, #64]	@ (8015824 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 80157e4:	8082      	strh	r2, [r0, #4]
 80157e6:	80c2      	strh	r2, [r0, #6]
 80157e8:	8102      	strh	r2, [r0, #8]
 80157ea:	8142      	strh	r2, [r0, #10]
 80157ec:	8182      	strh	r2, [r0, #12]
 80157ee:	81c2      	strh	r2, [r0, #14]
 80157f0:	8202      	strh	r2, [r0, #16]
 80157f2:	8242      	strh	r2, [r0, #18]
 80157f4:	61c2      	str	r2, [r0, #28]
 80157f6:	8402      	strh	r2, [r0, #32]
 80157f8:	8442      	strh	r2, [r0, #34]	@ 0x22
 80157fa:	6282      	str	r2, [r0, #40]	@ 0x28
 80157fc:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8015800:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8015802:	8601      	strh	r1, [r0, #48]	@ 0x30
 8015804:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8015808:	6344      	str	r4, [r0, #52]	@ 0x34
 801580a:	8701      	strh	r1, [r0, #56]	@ 0x38
 801580c:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8015810:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8015814:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015818:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801581c:	bd10      	pop	{r4, pc}
 801581e:	bf00      	nop
 8015820:	0802c4c4 	.word	0x0802c4c4
 8015824:	0802b154 	.word	0x0802b154

08015828 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015828:	b510      	push	{r4, lr}
 801582a:	6803      	ldr	r3, [r0, #0]
 801582c:	460c      	mov	r4, r1
 801582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015830:	4798      	blx	r3
 8015832:	1b03      	subs	r3, r0, r4
 8015834:	4258      	negs	r0, r3
 8015836:	4158      	adcs	r0, r3
 8015838:	bd10      	pop	{r4, pc}
	...

0801583c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801583c:	4b01      	ldr	r3, [pc, #4]	@ (8015844 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801583e:	6019      	str	r1, [r3, #0]
 8015840:	4770      	bx	lr
 8015842:	bf00      	nop
 8015844:	24006608 	.word	0x24006608

08015848 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801584c:	4696      	mov	lr, r2
 801584e:	b097      	sub	sp, #92	@ 0x5c
 8015850:	4605      	mov	r5, r0
 8015852:	4614      	mov	r4, r2
 8015854:	460e      	mov	r6, r1
 8015856:	461f      	mov	r7, r3
 8015858:	f10d 0c1c 	add.w	ip, sp, #28
 801585c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8015860:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8015864:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8015868:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801586c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015870:	f8de 3000 	ldr.w	r3, [lr]
 8015874:	f104 0e14 	add.w	lr, r4, #20
 8015878:	f8cc 3000 	str.w	r3, [ip]
 801587c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015880:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015888:	f8de 3000 	ldr.w	r3, [lr]
 801588c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8015890:	f8cc 3000 	str.w	r3, [ip]
 8015894:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8015898:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801589c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158a0:	f8de 3000 	ldr.w	r3, [lr]
 80158a4:	4631      	mov	r1, r6
 80158a6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80158a8:	4628      	mov	r0, r5
 80158aa:	f8cc 3000 	str.w	r3, [ip]
 80158ae:	682b      	ldr	r3, [r5, #0]
 80158b0:	9201      	str	r2, [sp, #4]
 80158b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80158b4:	f8cd 8008 	str.w	r8, [sp, #8]
 80158b8:	9200      	str	r2, [sp, #0]
 80158ba:	aa07      	add	r2, sp, #28
 80158bc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80158c0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80158c4:	463b      	mov	r3, r7
 80158c6:	47d8      	blx	fp
 80158c8:	46a6      	mov	lr, r4
 80158ca:	f10d 0c1c 	add.w	ip, sp, #28
 80158ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158d6:	f8de 3000 	ldr.w	r3, [lr]
 80158da:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80158de:	343c      	adds	r4, #60	@ 0x3c
 80158e0:	f8cc 3000 	str.w	r3, [ip]
 80158e4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80158e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158f0:	f8de 3000 	ldr.w	r3, [lr]
 80158f4:	f8cc 3000 	str.w	r3, [ip]
 80158f8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80158fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015902:	6823      	ldr	r3, [r4, #0]
 8015904:	4631      	mov	r1, r6
 8015906:	4628      	mov	r0, r5
 8015908:	f8cc 3000 	str.w	r3, [ip]
 801590c:	682b      	ldr	r3, [r5, #0]
 801590e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015912:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015914:	f8cd 8008 	str.w	r8, [sp, #8]
 8015918:	9201      	str	r2, [sp, #4]
 801591a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801591c:	9200      	str	r2, [sp, #0]
 801591e:	aa07      	add	r2, sp, #28
 8015920:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8015922:	463b      	mov	r3, r7
 8015924:	47a0      	blx	r4
 8015926:	b017      	add	sp, #92	@ 0x5c
 8015928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801592c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801592c:	2000      	movs	r0, #0
 801592e:	4770      	bx	lr

08015930 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015934:	b08d      	sub	sp, #52	@ 0x34
 8015936:	4688      	mov	r8, r1
 8015938:	f8d3 c000 	ldr.w	ip, [r3]
 801593c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801593e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8015942:	680f      	ldr	r7, [r1, #0]
 8015944:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8015948:	eba7 070c 	sub.w	r7, r7, ip
 801594c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8015950:	edd3 6a07 	vldr	s13, [r3, #28]
 8015954:	42bc      	cmp	r4, r7
 8015956:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015958:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801595c:	bfa8      	it	ge
 801595e:	463c      	movge	r4, r7
 8015960:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015964:	f9ba 1000 	ldrsh.w	r1, [sl]
 8015968:	ee07 4a90 	vmov	s15, r4
 801596c:	eb09 0e0c 	add.w	lr, r9, ip
 8015970:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8015974:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015978:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801597c:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8015980:	4571      	cmp	r1, lr
 8015982:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015986:	ee65 4a24 	vmul.f32	s9, s10, s9
 801598a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801598e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015992:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015996:	ee32 1a05 	vadd.f32	s2, s4, s10
 801599a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801599e:	ee36 0a84 	vadd.f32	s0, s13, s8
 80159a2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80159a6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80159aa:	f340 808c 	ble.w	8015ac6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80159ae:	eba1 060e 	sub.w	r6, r1, lr
 80159b2:	fb96 f5f4 	sdiv	r5, r6, r4
 80159b6:	ee07 5a10 	vmov	s14, r5
 80159ba:	2d00      	cmp	r5, #0
 80159bc:	fb04 6615 	mls	r6, r4, r5, r6
 80159c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80159c4:	eea7 0a04 	vfma.f32	s0, s14, s8
 80159c8:	eee7 0a24 	vfma.f32	s1, s14, s9
 80159cc:	eea7 1a05 	vfma.f32	s2, s14, s10
 80159d0:	dd12      	ble.n	80159f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80159d2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80159d6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80159da:	ee31 2a45 	vsub.f32	s4, s2, s10
 80159de:	eef5 6a40 	vcmp.f32	s13, #0.0
 80159e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159e6:	bf14      	ite	ne
 80159e8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80159ec:	eeb0 7a67 	vmoveq.f32	s14, s15
 80159f0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80159f4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80159f8:	fb05 f204 	mul.w	r2, r5, r4
 80159fc:	1abf      	subs	r7, r7, r2
 80159fe:	4494      	add	ip, r2
 8015a00:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015a04:	4411      	add	r1, r2
 8015a06:	eb09 020c 	add.w	r2, r9, ip
 8015a0a:	b209      	sxth	r1, r1
 8015a0c:	443a      	add	r2, r7
 8015a0e:	428a      	cmp	r2, r1
 8015a10:	bfc4      	itt	gt
 8015a12:	eba1 0209 	subgt.w	r2, r1, r9
 8015a16:	eba2 070c 	subgt.w	r7, r2, ip
 8015a1a:	2f00      	cmp	r7, #0
 8015a1c:	dd50      	ble.n	8015ac0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015a1e:	fb97 f1f4 	sdiv	r1, r7, r4
 8015a22:	fb04 7211 	mls	r2, r4, r1, r7
 8015a26:	b90a      	cbnz	r2, 8015a2c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015a28:	3901      	subs	r1, #1
 8015a2a:	4622      	mov	r2, r4
 8015a2c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015a30:	6840      	ldr	r0, [r0, #4]
 8015a32:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8015a36:	44b6      	add	lr, r6
 8015a38:	f8d0 a000 	ldr.w	sl, [r0]
 8015a3c:	2900      	cmp	r1, #0
 8015a3e:	bfcc      	ite	gt
 8015a40:	46a1      	movgt	r9, r4
 8015a42:	4691      	movle	r9, r2
 8015a44:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015a46:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015a48:	fb04 e505 	mla	r5, r4, r5, lr
 8015a4c:	eef0 6a42 	vmov.f32	s13, s4
 8015a50:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015a54:	9008      	str	r0, [sp, #32]
 8015a56:	eeb0 7a61 	vmov.f32	s14, s3
 8015a5a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8015a5c:	695b      	ldr	r3, [r3, #20]
 8015a5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015a62:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015a66:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015a6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8015a6c:	445b      	add	r3, fp
 8015a6e:	9307      	str	r3, [sp, #28]
 8015a70:	ee16 3a90 	vmov	r3, s13
 8015a74:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015a78:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015a7c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015a80:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015a84:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a88:	ee17 7a90 	vmov	r7, s15
 8015a8c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015a90:	fb97 f7f4 	sdiv	r7, r7, r4
 8015a94:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a98:	ee17 ca90 	vmov	ip, s15
 8015a9c:	fb9c fcf4 	sdiv	ip, ip, r4
 8015aa0:	fb0c 3306 	mla	r3, ip, r6, r3
 8015aa4:	9302      	str	r3, [sp, #8]
 8015aa6:	ee17 3a10 	vmov	r3, s14
 8015aaa:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015aae:	fb07 3706 	mla	r7, r7, r6, r3
 8015ab2:	eba9 0306 	sub.w	r3, r9, r6
 8015ab6:	e9cd 4700 	strd	r4, r7, [sp]
 8015aba:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015abe:	47a0      	blx	r4
 8015ac0:	b00d      	add	sp, #52	@ 0x34
 8015ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac6:	2500      	movs	r5, #0
 8015ac8:	462e      	mov	r6, r5
 8015aca:	e799      	b.n	8015a00 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015acc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad0:	b0db      	sub	sp, #364	@ 0x16c
 8015ad2:	461d      	mov	r5, r3
 8015ad4:	4614      	mov	r4, r2
 8015ad6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8015ada:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015adc:	4629      	mov	r1, r5
 8015ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8015ae0:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8015ae4:	9009      	str	r0, [sp, #36]	@ 0x24
 8015ae6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015ae8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8015aec:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8015af0:	9310      	str	r3, [sp, #64]	@ 0x40
 8015af2:	6803      	ldr	r3, [r0, #0]
 8015af4:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8015af6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015afa:	47b8      	blx	r7
 8015afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015afe:	6058      	str	r0, [r3, #4]
 8015b00:	2800      	cmp	r0, #0
 8015b02:	f000 83a1 	beq.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b06:	682b      	ldr	r3, [r5, #0]
 8015b08:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8015b0c:	ed94 7a02 	vldr	s14, [r4, #8]
 8015b10:	9314      	str	r3, [sp, #80]	@ 0x50
 8015b12:	686b      	ldr	r3, [r5, #4]
 8015b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b18:	9315      	str	r3, [sp, #84]	@ 0x54
 8015b1a:	4bc1      	ldr	r3, [pc, #772]	@ (8015e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015b1c:	7819      	ldrb	r1, [r3, #0]
 8015b1e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015b22:	2900      	cmp	r1, #0
 8015b24:	bf16      	itet	ne
 8015b26:	4619      	movne	r1, r3
 8015b28:	4611      	moveq	r1, r2
 8015b2a:	4613      	movne	r3, r2
 8015b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b30:	9116      	str	r1, [sp, #88]	@ 0x58
 8015b32:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8015b36:	f240 8387 	bls.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b3a:	ed94 7a07 	vldr	s14, [r4, #28]
 8015b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b46:	f240 837f 	bls.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b4a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8015b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b56:	f240 8377 	bls.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b5a:	6822      	ldr	r2, [r4, #0]
 8015b5c:	4bb1      	ldr	r3, [pc, #708]	@ (8015e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	f2c0 8372 	blt.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b64:	49b0      	ldr	r1, [pc, #704]	@ (8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015b66:	6963      	ldr	r3, [r4, #20]
 8015b68:	428a      	cmp	r2, r1
 8015b6a:	f300 836d 	bgt.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b6e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8015b72:	48ae      	ldr	r0, [pc, #696]	@ (8015e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015b74:	33ff      	adds	r3, #255	@ 0xff
 8015b76:	4283      	cmp	r3, r0
 8015b78:	f200 8366 	bhi.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b7c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015b7e:	4dac      	ldr	r5, [pc, #688]	@ (8015e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015b80:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8015b84:	33ff      	adds	r3, #255	@ 0xff
 8015b86:	42ab      	cmp	r3, r5
 8015b88:	f200 835e 	bhi.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b8c:	6862      	ldr	r2, [r4, #4]
 8015b8e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8015b92:	33ff      	adds	r3, #255	@ 0xff
 8015b94:	4283      	cmp	r3, r0
 8015b96:	f200 8357 	bhi.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b9a:	69a1      	ldr	r1, [r4, #24]
 8015b9c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8015ba0:	33ff      	adds	r3, #255	@ 0xff
 8015ba2:	4283      	cmp	r3, r0
 8015ba4:	f200 8350 	bhi.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ba8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8015baa:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8015bae:	30ff      	adds	r0, #255	@ 0xff
 8015bb0:	42a8      	cmp	r0, r5
 8015bb2:	f200 8349 	bhi.w	8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bb6:	428a      	cmp	r2, r1
 8015bb8:	f280 8110 	bge.w	8015ddc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015bbc:	429a      	cmp	r2, r3
 8015bbe:	f300 8119 	bgt.w	8015df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015bc2:	4299      	cmp	r1, r3
 8015bc4:	f280 811d 	bge.w	8015e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8015bc8:	2502      	movs	r5, #2
 8015bca:	2701      	movs	r7, #1
 8015bcc:	46a9      	mov	r9, r5
 8015bce:	46b8      	mov	r8, r7
 8015bd0:	f04f 0a00 	mov.w	sl, #0
 8015bd4:	4621      	mov	r1, r4
 8015bd6:	a849      	add	r0, sp, #292	@ 0x124
 8015bd8:	f004 f8ce 	bl	8019d78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015bdc:	4622      	mov	r2, r4
 8015bde:	4653      	mov	r3, sl
 8015be0:	a949      	add	r1, sp, #292	@ 0x124
 8015be2:	f8cd 9000 	str.w	r9, [sp]
 8015be6:	a819      	add	r0, sp, #100	@ 0x64
 8015be8:	f004 f9f6 	bl	8019fd8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015bec:	4622      	mov	r2, r4
 8015bee:	4653      	mov	r3, sl
 8015bf0:	a949      	add	r1, sp, #292	@ 0x124
 8015bf2:	f8cd 8000 	str.w	r8, [sp]
 8015bf6:	a829      	add	r0, sp, #164	@ 0xa4
 8015bf8:	f004 f9ee 	bl	8019fd8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015bfc:	4643      	mov	r3, r8
 8015bfe:	4622      	mov	r2, r4
 8015c00:	a949      	add	r1, sp, #292	@ 0x124
 8015c02:	f8cd 9000 	str.w	r9, [sp]
 8015c06:	a839      	add	r0, sp, #228	@ 0xe4
 8015c08:	f004 f9e6 	bl	8019fd8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015c0c:	42af      	cmp	r7, r5
 8015c0e:	af12      	add	r7, sp, #72	@ 0x48
 8015c10:	bfb7      	itett	lt
 8015c12:	2300      	movlt	r3, #0
 8015c14:	2301      	movge	r3, #1
 8015c16:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8015c18:	ac19      	addlt	r4, sp, #100	@ 0x64
 8015c1a:	bfb1      	iteee	lt
 8015c1c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8015c1e:	ad19      	addge	r5, sp, #100	@ 0x64
 8015c20:	930e      	strge	r3, [sp, #56]	@ 0x38
 8015c22:	ac29      	addge	r4, sp, #164	@ 0xa4
 8015c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015c2a:	e887 0003 	stmia.w	r7, {r0, r1}
 8015c2e:	b928      	cbnz	r0, 8015c3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015c30:	4b80      	ldr	r3, [pc, #512]	@ (8015e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015c32:	6818      	ldr	r0, [r3, #0]
 8015c34:	6803      	ldr	r3, [r0, #0]
 8015c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c38:	4798      	blx	r3
 8015c3a:	6038      	str	r0, [r7, #0]
 8015c3c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015c3e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015c42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c46:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8015c48:	930c      	str	r3, [sp, #48]	@ 0x30
 8015c4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015c4c:	6963      	ldr	r3, [r4, #20]
 8015c4e:	440b      	add	r3, r1
 8015c50:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015c54:	4408      	add	r0, r1
 8015c56:	b200      	sxth	r0, r0
 8015c58:	4283      	cmp	r3, r0
 8015c5a:	900d      	str	r0, [sp, #52]	@ 0x34
 8015c5c:	f280 80dd 	bge.w	8015e1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015c60:	428b      	cmp	r3, r1
 8015c62:	da08      	bge.n	8015c76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015c64:	2a00      	cmp	r2, #0
 8015c66:	dd06      	ble.n	8015c76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015c68:	1acb      	subs	r3, r1, r3
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	f2c0 80e4 	blt.w	8015e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	f300 80e2 	bgt.w	8015e3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8015c76:	6967      	ldr	r7, [r4, #20]
 8015c78:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015c7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c7e:	443b      	add	r3, r7
 8015c80:	461f      	mov	r7, r3
 8015c82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015c84:	1bdf      	subs	r7, r3, r7
 8015c86:	4297      	cmp	r7, r2
 8015c88:	bfa8      	it	ge
 8015c8a:	4617      	movge	r7, r2
 8015c8c:	2f00      	cmp	r7, #0
 8015c8e:	f340 8166 	ble.w	8015f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8015c92:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015c94:	6829      	ldr	r1, [r5, #0]
 8015c96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c9a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015c9e:	4411      	add	r1, r2
 8015ca0:	6820      	ldr	r0, [r4, #0]
 8015ca2:	4299      	cmp	r1, r3
 8015ca4:	dd1a      	ble.n	8015cdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015ca6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015caa:	4402      	add	r2, r0
 8015cac:	440b      	add	r3, r1
 8015cae:	b21b      	sxth	r3, r3
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	dc13      	bgt.n	8015cdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015cb4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015cb6:	a912      	add	r1, sp, #72	@ 0x48
 8015cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	9206      	str	r2, [sp, #24]
 8015cc0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015cc2:	9500      	str	r5, [sp, #0]
 8015cc4:	9205      	str	r2, [sp, #20]
 8015cc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015cc8:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015ccc:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015cce:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015cd2:	aa49      	add	r2, sp, #292	@ 0x124
 8015cd4:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8015cd8:	4623      	mov	r3, r4
 8015cda:	47c8      	blx	r9
 8015cdc:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015ce0:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015ce4:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8015ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015cec:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015cf0:	68a1      	ldr	r1, [r4, #8]
 8015cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015cf6:	ed94 6a08 	vldr	s12, [r4, #32]
 8015cfa:	edd4 6a07 	vldr	s13, [r4, #28]
 8015cfe:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015d02:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015d06:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015d0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015d0e:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d12:	441a      	add	r2, r3
 8015d14:	6963      	ldr	r3, [r4, #20]
 8015d16:	3301      	adds	r3, #1
 8015d18:	6022      	str	r2, [r4, #0]
 8015d1a:	6163      	str	r3, [r4, #20]
 8015d1c:	69a3      	ldr	r3, [r4, #24]
 8015d1e:	3b01      	subs	r3, #1
 8015d20:	61a3      	str	r3, [r4, #24]
 8015d22:	6923      	ldr	r3, [r4, #16]
 8015d24:	440b      	add	r3, r1
 8015d26:	68e1      	ldr	r1, [r4, #12]
 8015d28:	428b      	cmp	r3, r1
 8015d2a:	6123      	str	r3, [r4, #16]
 8015d2c:	db15      	blt.n	8015d5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015d2e:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015d32:	3201      	adds	r2, #1
 8015d34:	1a5b      	subs	r3, r3, r1
 8015d36:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015d3a:	6022      	str	r2, [r4, #0]
 8015d3c:	6123      	str	r3, [r4, #16]
 8015d3e:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d42:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8015d46:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015d4a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015d4e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8015d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d56:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015d5a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015d5e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8015d62:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8015d66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015d6a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8015d6e:	68a9      	ldr	r1, [r5, #8]
 8015d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d74:	ed95 6a08 	vldr	s12, [r5, #32]
 8015d78:	edd5 6a07 	vldr	s13, [r5, #28]
 8015d7c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015d80:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015d84:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015d88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015d8c:	edc5 6a07 	vstr	s13, [r5, #28]
 8015d90:	441a      	add	r2, r3
 8015d92:	696b      	ldr	r3, [r5, #20]
 8015d94:	3301      	adds	r3, #1
 8015d96:	602a      	str	r2, [r5, #0]
 8015d98:	616b      	str	r3, [r5, #20]
 8015d9a:	69ab      	ldr	r3, [r5, #24]
 8015d9c:	3b01      	subs	r3, #1
 8015d9e:	61ab      	str	r3, [r5, #24]
 8015da0:	692b      	ldr	r3, [r5, #16]
 8015da2:	440b      	add	r3, r1
 8015da4:	68e9      	ldr	r1, [r5, #12]
 8015da6:	428b      	cmp	r3, r1
 8015da8:	612b      	str	r3, [r5, #16]
 8015daa:	db15      	blt.n	8015dd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015dac:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015db0:	3201      	adds	r2, #1
 8015db2:	1a5b      	subs	r3, r3, r1
 8015db4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015db8:	602a      	str	r2, [r5, #0]
 8015dba:	612b      	str	r3, [r5, #16]
 8015dbc:	edc5 6a07 	vstr	s13, [r5, #28]
 8015dc0:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015dc4:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015dc8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015dcc:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015dd4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015dd8:	3f01      	subs	r7, #1
 8015dda:	e757      	b.n	8015c8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015ddc:	4299      	cmp	r1, r3
 8015dde:	dc13      	bgt.n	8015e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015de0:	429a      	cmp	r2, r3
 8015de2:	da14      	bge.n	8015e0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015de4:	2502      	movs	r5, #2
 8015de6:	2703      	movs	r7, #3
 8015de8:	f04f 0800 	mov.w	r8, #0
 8015dec:	46a9      	mov	r9, r5
 8015dee:	f04f 0a01 	mov.w	sl, #1
 8015df2:	e6ef      	b.n	8015bd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015df4:	2501      	movs	r5, #1
 8015df6:	2700      	movs	r7, #0
 8015df8:	46a9      	mov	r9, r5
 8015dfa:	46b8      	mov	r8, r7
 8015dfc:	f04f 0a02 	mov.w	sl, #2
 8015e00:	e6e8      	b.n	8015bd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015e02:	2501      	movs	r5, #1
 8015e04:	2702      	movs	r7, #2
 8015e06:	e6e1      	b.n	8015bcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015e08:	2500      	movs	r5, #0
 8015e0a:	2701      	movs	r7, #1
 8015e0c:	e7f4      	b.n	8015df8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015e0e:	2702      	movs	r7, #2
 8015e10:	2503      	movs	r5, #3
 8015e12:	f04f 0900 	mov.w	r9, #0
 8015e16:	46b8      	mov	r8, r7
 8015e18:	e7e9      	b.n	8015dee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015e1a:	4613      	mov	r3, r2
 8015e1c:	e728      	b.n	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015e1e:	bf00      	nop
 8015e20:	240065f8 	.word	0x240065f8
 8015e24:	fffd8f01 	.word	0xfffd8f01
 8015e28:	00027100 	.word	0x00027100
 8015e2c:	0004e1ff 	.word	0x0004e1ff
 8015e30:	0004e1fe 	.word	0x0004e1fe
 8015e34:	24006600 	.word	0x24006600
 8015e38:	4613      	mov	r3, r2
 8015e3a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8015e3c:	469e      	mov	lr, r3
 8015e3e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8015e40:	469c      	mov	ip, r3
 8015e42:	9111      	str	r1, [sp, #68]	@ 0x44
 8015e44:	f04f 0900 	mov.w	r9, #0
 8015e48:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8015e4c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8015e50:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8015e54:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8015e58:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8015e5c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8015e60:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8015e64:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8015e68:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8015e6c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8015e70:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8015e74:	f1bc 0f00 	cmp.w	ip, #0
 8015e78:	d147      	bne.n	8015f0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015e7a:	eb03 0c07 	add.w	ip, r3, r7
 8015e7e:	1ad7      	subs	r7, r2, r3
 8015e80:	f1b9 0f00 	cmp.w	r9, #0
 8015e84:	d009      	beq.n	8015e9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015e86:	9029      	str	r0, [sp, #164]	@ 0xa4
 8015e88:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8015e8c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8015e90:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8015e94:	912d      	str	r1, [sp, #180]	@ 0xb4
 8015e96:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8015e9a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015e9c:	f04f 0800 	mov.w	r8, #0
 8015ea0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8015ea4:	9111      	str	r1, [sp, #68]	@ 0x44
 8015ea6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015eaa:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015eae:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8015eb2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8015eb6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8015eba:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015ebe:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8015ec2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8015ec6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8015eca:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015ece:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8015ed2:	f1be 0f00 	cmp.w	lr, #0
 8015ed6:	d031      	beq.n	8015f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015ed8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015eda:	4450      	add	r0, sl
 8015edc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015ee0:	4431      	add	r1, r6
 8015ee2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015ee6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015eea:	4549      	cmp	r1, r9
 8015eec:	db08      	blt.n	8015f00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015eee:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015ef2:	3001      	adds	r0, #1
 8015ef4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015ef8:	eba1 0109 	sub.w	r1, r1, r9
 8015efc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015f00:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015f04:	f04f 0801 	mov.w	r8, #1
 8015f08:	e7e3      	b.n	8015ed2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015f0a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015f0c:	4450      	add	r0, sl
 8015f0e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015f12:	4431      	add	r1, r6
 8015f14:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015f18:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015f1c:	4541      	cmp	r1, r8
 8015f1e:	db08      	blt.n	8015f32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015f20:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015f24:	3001      	adds	r0, #1
 8015f26:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015f2a:	eba1 0108 	sub.w	r1, r1, r8
 8015f2e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015f32:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015f36:	f04f 0901 	mov.w	r9, #1
 8015f3a:	e79b      	b.n	8015e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015f3c:	449c      	add	ip, r3
 8015f3e:	1aff      	subs	r7, r7, r3
 8015f40:	f1b8 0f00 	cmp.w	r8, #0
 8015f44:	d009      	beq.n	8015f5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015f46:	9019      	str	r0, [sp, #100]	@ 0x64
 8015f48:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015f4c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015f50:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015f54:	911d      	str	r1, [sp, #116]	@ 0x74
 8015f56:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015f5a:	1ad2      	subs	r2, r2, r3
 8015f5c:	e68b      	b.n	8015c76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015f5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f60:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	f000 80d1 	beq.w	801610a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015f68:	ad19      	add	r5, sp, #100	@ 0x64
 8015f6a:	ac39      	add	r4, sp, #228	@ 0xe4
 8015f6c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015f6e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015f72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015f76:	930c      	str	r3, [sp, #48]	@ 0x30
 8015f78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f7a:	6963      	ldr	r3, [r4, #20]
 8015f7c:	440b      	add	r3, r1
 8015f7e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015f82:	4408      	add	r0, r1
 8015f84:	b200      	sxth	r0, r0
 8015f86:	4283      	cmp	r3, r0
 8015f88:	900d      	str	r0, [sp, #52]	@ 0x34
 8015f8a:	f280 80c1 	bge.w	8016110 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015f8e:	428b      	cmp	r3, r1
 8015f90:	da08      	bge.n	8015fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015f92:	2a00      	cmp	r2, #0
 8015f94:	dd06      	ble.n	8015fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015f96:	1acb      	subs	r3, r1, r3
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	f2c0 80bb 	blt.w	8016114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	f300 80b9 	bgt.w	8016116 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015fa4:	6967      	ldr	r7, [r4, #20]
 8015fa6:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015faa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fac:	443b      	add	r3, r7
 8015fae:	461f      	mov	r7, r3
 8015fb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015fb2:	1bdf      	subs	r7, r3, r7
 8015fb4:	4297      	cmp	r7, r2
 8015fb6:	bfa8      	it	ge
 8015fb8:	4617      	movge	r7, r2
 8015fba:	2f00      	cmp	r7, #0
 8015fbc:	f340 813c 	ble.w	8016238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015fc0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015fc2:	6829      	ldr	r1, [r5, #0]
 8015fc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015fc8:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015fcc:	4411      	add	r1, r2
 8015fce:	6820      	ldr	r0, [r4, #0]
 8015fd0:	4299      	cmp	r1, r3
 8015fd2:	dd1a      	ble.n	801600a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015fd4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015fd8:	4402      	add	r2, r0
 8015fda:	440b      	add	r3, r1
 8015fdc:	b21b      	sxth	r3, r3
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	dc13      	bgt.n	801600a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015fe2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015fe4:	a912      	add	r1, sp, #72	@ 0x48
 8015fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015fe8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	9206      	str	r2, [sp, #24]
 8015fee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015ff0:	9500      	str	r5, [sp, #0]
 8015ff2:	9205      	str	r2, [sp, #20]
 8015ff4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015ff6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015ffa:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015ffc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016000:	aa49      	add	r2, sp, #292	@ 0x124
 8016002:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8016006:	4623      	mov	r3, r4
 8016008:	47c8      	blx	r9
 801600a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801600e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8016012:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8016016:	ee37 7a27 	vadd.f32	s14, s14, s15
 801601a:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801601e:	68a1      	ldr	r1, [r4, #8]
 8016020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016024:	ed94 6a08 	vldr	s12, [r4, #32]
 8016028:	edd4 6a07 	vldr	s13, [r4, #28]
 801602c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8016030:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016034:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016038:	e9d4 2300 	ldrd	r2, r3, [r4]
 801603c:	edc4 6a07 	vstr	s13, [r4, #28]
 8016040:	441a      	add	r2, r3
 8016042:	6963      	ldr	r3, [r4, #20]
 8016044:	3301      	adds	r3, #1
 8016046:	6022      	str	r2, [r4, #0]
 8016048:	6163      	str	r3, [r4, #20]
 801604a:	69a3      	ldr	r3, [r4, #24]
 801604c:	3b01      	subs	r3, #1
 801604e:	61a3      	str	r3, [r4, #24]
 8016050:	6923      	ldr	r3, [r4, #16]
 8016052:	440b      	add	r3, r1
 8016054:	68e1      	ldr	r1, [r4, #12]
 8016056:	428b      	cmp	r3, r1
 8016058:	6123      	str	r3, [r4, #16]
 801605a:	db15      	blt.n	8016088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801605c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8016060:	3201      	adds	r2, #1
 8016062:	1a5b      	subs	r3, r3, r1
 8016064:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016068:	6022      	str	r2, [r4, #0]
 801606a:	6123      	str	r3, [r4, #16]
 801606c:	edc4 6a07 	vstr	s13, [r4, #28]
 8016070:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8016074:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016078:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801607c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8016080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016084:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016088:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801608c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8016090:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8016094:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016098:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801609c:	68a9      	ldr	r1, [r5, #8]
 801609e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80160a2:	ed95 6a08 	vldr	s12, [r5, #32]
 80160a6:	edd5 6a07 	vldr	s13, [r5, #28]
 80160aa:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80160ae:	ee76 6a86 	vadd.f32	s13, s13, s12
 80160b2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80160b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80160ba:	edc5 6a07 	vstr	s13, [r5, #28]
 80160be:	441a      	add	r2, r3
 80160c0:	696b      	ldr	r3, [r5, #20]
 80160c2:	3301      	adds	r3, #1
 80160c4:	602a      	str	r2, [r5, #0]
 80160c6:	616b      	str	r3, [r5, #20]
 80160c8:	69ab      	ldr	r3, [r5, #24]
 80160ca:	3b01      	subs	r3, #1
 80160cc:	61ab      	str	r3, [r5, #24]
 80160ce:	692b      	ldr	r3, [r5, #16]
 80160d0:	440b      	add	r3, r1
 80160d2:	68e9      	ldr	r1, [r5, #12]
 80160d4:	428b      	cmp	r3, r1
 80160d6:	612b      	str	r3, [r5, #16]
 80160d8:	db15      	blt.n	8016106 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80160da:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80160de:	3201      	adds	r2, #1
 80160e0:	1a5b      	subs	r3, r3, r1
 80160e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80160e6:	602a      	str	r2, [r5, #0]
 80160e8:	612b      	str	r3, [r5, #16]
 80160ea:	edc5 6a07 	vstr	s13, [r5, #28]
 80160ee:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80160f2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80160f6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80160fa:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80160fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016102:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8016106:	3f01      	subs	r7, #1
 8016108:	e757      	b.n	8015fba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801610a:	ad39      	add	r5, sp, #228	@ 0xe4
 801610c:	ac19      	add	r4, sp, #100	@ 0x64
 801610e:	e72d      	b.n	8015f6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016110:	4613      	mov	r3, r2
 8016112:	e744      	b.n	8015f9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016114:	4613      	mov	r3, r2
 8016116:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8016118:	469e      	mov	lr, r3
 801611a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801611e:	461f      	mov	r7, r3
 8016120:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8016124:	f04f 0900 	mov.w	r9, #0
 8016128:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801612c:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8016130:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8016134:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8016138:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801613c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801613e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8016142:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8016146:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801614a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801614e:	960e      	str	r6, [sp, #56]	@ 0x38
 8016150:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8016154:	2f00      	cmp	r7, #0
 8016156:	d146      	bne.n	80161e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016158:	449c      	add	ip, r3
 801615a:	1ad7      	subs	r7, r2, r3
 801615c:	f1b9 0f00 	cmp.w	r9, #0
 8016160:	d009      	beq.n	8016176 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016162:	9039      	str	r0, [sp, #228]	@ 0xe4
 8016164:	913d      	str	r1, [sp, #244]	@ 0xf4
 8016166:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801616a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801616e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8016172:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8016176:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8016178:	f04f 0800 	mov.w	r8, #0
 801617c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8016180:	910e      	str	r1, [sp, #56]	@ 0x38
 8016182:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8016186:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801618a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801618e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8016192:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8016196:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801619a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801619e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80161a2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80161a6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80161aa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80161ae:	f1be 0f00 	cmp.w	lr, #0
 80161b2:	d030      	beq.n	8016216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80161b4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80161b6:	4450      	add	r0, sl
 80161b8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80161bc:	4431      	add	r1, r6
 80161be:	ee37 7a04 	vadd.f32	s14, s14, s8
 80161c2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80161c6:	4549      	cmp	r1, r9
 80161c8:	db08      	blt.n	80161dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80161ca:	ee77 7a85 	vadd.f32	s15, s15, s10
 80161ce:	3001      	adds	r0, #1
 80161d0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80161d4:	eba1 0109 	sub.w	r1, r1, r9
 80161d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80161dc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80161e0:	f04f 0801 	mov.w	r8, #1
 80161e4:	e7e3      	b.n	80161ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80161e6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80161e8:	4450      	add	r0, sl
 80161ea:	ee37 7a24 	vadd.f32	s14, s14, s9
 80161ee:	4431      	add	r1, r6
 80161f0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80161f4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80161f8:	4541      	cmp	r1, r8
 80161fa:	db08      	blt.n	801620e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80161fc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016200:	3001      	adds	r0, #1
 8016202:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016206:	eba1 0108 	sub.w	r1, r1, r8
 801620a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801620e:	3f01      	subs	r7, #1
 8016210:	f04f 0901 	mov.w	r9, #1
 8016214:	e79e      	b.n	8016154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016216:	449c      	add	ip, r3
 8016218:	1aff      	subs	r7, r7, r3
 801621a:	f1b8 0f00 	cmp.w	r8, #0
 801621e:	d009      	beq.n	8016234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8016220:	9019      	str	r0, [sp, #100]	@ 0x64
 8016222:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8016226:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801622a:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801622e:	911d      	str	r1, [sp, #116]	@ 0x74
 8016230:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8016234:	1ad2      	subs	r2, r2, r3
 8016236:	e6b5      	b.n	8015fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	b923      	cbnz	r3, 8016248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801623e:	4b04      	ldr	r3, [pc, #16]	@ (8016250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8016240:	6818      	ldr	r0, [r3, #0]
 8016242:	6803      	ldr	r3, [r0, #0]
 8016244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016246:	4798      	blx	r3
 8016248:	b05b      	add	sp, #364	@ 0x16c
 801624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801624e:	bf00      	nop
 8016250:	24006600 	.word	0x24006600

08016254 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8016254:	b570      	push	{r4, r5, r6, lr}
 8016256:	4604      	mov	r4, r0
 8016258:	2500      	movs	r5, #0
 801625a:	9805      	ldr	r0, [sp, #20]
 801625c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8016260:	6061      	str	r1, [r4, #4]
 8016262:	8263      	strh	r3, [r4, #18]
 8016264:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8016268:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801626c:	8025      	strh	r5, [r4, #0]
 801626e:	7221      	strb	r1, [r4, #8]
 8016270:	7266      	strb	r6, [r4, #9]
 8016272:	60e0      	str	r0, [r4, #12]
 8016274:	8222      	strh	r2, [r4, #16]
 8016276:	82a3      	strh	r3, [r4, #20]
 8016278:	82e5      	strh	r5, [r4, #22]
 801627a:	8325      	strh	r5, [r4, #24]
 801627c:	8365      	strh	r5, [r4, #26]
 801627e:	83a5      	strh	r5, [r4, #28]
 8016280:	83e5      	strh	r5, [r4, #30]
 8016282:	8425      	strh	r5, [r4, #32]
 8016284:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8016288:	b32e      	cbz	r6, 80162d6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801628a:	6803      	ldr	r3, [r0, #0]
 801628c:	695b      	ldr	r3, [r3, #20]
 801628e:	4798      	blx	r3
 8016290:	4606      	mov	r6, r0
 8016292:	b300      	cbz	r0, 80162d6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016294:	68e0      	ldr	r0, [r4, #12]
 8016296:	4631      	mov	r1, r6
 8016298:	6803      	ldr	r3, [r0, #0]
 801629a:	68db      	ldr	r3, [r3, #12]
 801629c:	4798      	blx	r3
 801629e:	4605      	mov	r5, r0
 80162a0:	b1c8      	cbz	r0, 80162d6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80162a2:	7b43      	ldrb	r3, [r0, #13]
 80162a4:	7a82      	ldrb	r2, [r0, #10]
 80162a6:	005b      	lsls	r3, r3, #1
 80162a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80162ac:	4313      	orrs	r3, r2
 80162ae:	8423      	strh	r3, [r4, #32]
 80162b0:	7a63      	ldrb	r3, [r4, #9]
 80162b2:	2b06      	cmp	r3, #6
 80162b4:	d10f      	bne.n	80162d6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80162b6:	68e0      	ldr	r0, [r4, #12]
 80162b8:	462a      	mov	r2, r5
 80162ba:	4631      	mov	r1, r6
 80162bc:	6803      	ldr	r3, [r0, #0]
 80162be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162c0:	4798      	blx	r3
 80162c2:	7b6b      	ldrb	r3, [r5, #13]
 80162c4:	005b      	lsls	r3, r3, #1
 80162c6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80162ca:	7aab      	ldrb	r3, [r5, #10]
 80162cc:	4313      	orrs	r3, r2
 80162ce:	4418      	add	r0, r3
 80162d0:	8c23      	ldrh	r3, [r4, #32]
 80162d2:	4418      	add	r0, r3
 80162d4:	8420      	strh	r0, [r4, #32]
 80162d6:	4620      	mov	r0, r4
 80162d8:	bd70      	pop	{r4, r5, r6, pc}

080162da <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80162da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162de:	2400      	movs	r4, #0
 80162e0:	b085      	sub	sp, #20
 80162e2:	4681      	mov	r9, r0
 80162e4:	4688      	mov	r8, r1
 80162e6:	4692      	mov	sl, r2
 80162e8:	469b      	mov	fp, r3
 80162ea:	4627      	mov	r7, r4
 80162ec:	4625      	mov	r5, r4
 80162ee:	4626      	mov	r6, r4
 80162f0:	4554      	cmp	r4, sl
 80162f2:	da2a      	bge.n	801634a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80162f4:	2300      	movs	r3, #0
 80162f6:	9303      	str	r3, [sp, #12]
 80162f8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80162fc:	429d      	cmp	r5, r3
 80162fe:	d004      	beq.n	801630a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8016300:	f242 030b 	movw	r3, #8203	@ 0x200b
 8016304:	429d      	cmp	r5, r3
 8016306:	bf18      	it	ne
 8016308:	462f      	movne	r7, r5
 801630a:	ab03      	add	r3, sp, #12
 801630c:	4642      	mov	r2, r8
 801630e:	4659      	mov	r1, fp
 8016310:	4648      	mov	r0, r9
 8016312:	f003 f9f5 	bl	8019700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016316:	4605      	mov	r5, r0
 8016318:	b1b8      	cbz	r0, 801634a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801631a:	280a      	cmp	r0, #10
 801631c:	d015      	beq.n	801634a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801631e:	9a03      	ldr	r2, [sp, #12]
 8016320:	b18a      	cbz	r2, 8016346 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8016322:	7b50      	ldrb	r0, [r2, #13]
 8016324:	4639      	mov	r1, r7
 8016326:	7a93      	ldrb	r3, [r2, #10]
 8016328:	0040      	lsls	r0, r0, #1
 801632a:	8895      	ldrh	r5, [r2, #4]
 801632c:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8016330:	4303      	orrs	r3, r0
 8016332:	4640      	mov	r0, r8
 8016334:	9301      	str	r3, [sp, #4]
 8016336:	f8d8 3000 	ldr.w	r3, [r8]
 801633a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801633c:	4798      	blx	r3
 801633e:	9b01      	ldr	r3, [sp, #4]
 8016340:	4418      	add	r0, r3
 8016342:	4406      	add	r6, r0
 8016344:	b2b6      	uxth	r6, r6
 8016346:	3401      	adds	r4, #1
 8016348:	e7d2      	b.n	80162f0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801634a:	4630      	mov	r0, r6
 801634c:	b005      	add	sp, #20
 801634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016352 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8016352:	2a02      	cmp	r2, #2
 8016354:	b530      	push	{r4, r5, lr}
 8016356:	d011      	beq.n	801637c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8016358:	2a03      	cmp	r2, #3
 801635a:	d01c      	beq.n	8016396 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801635c:	2a01      	cmp	r2, #1
 801635e:	d10c      	bne.n	801637a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016360:	888b      	ldrh	r3, [r1, #4]
 8016362:	8801      	ldrh	r1, [r0, #0]
 8016364:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016368:	1a5b      	subs	r3, r3, r1
 801636a:	8844      	ldrh	r4, [r0, #2]
 801636c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016370:	1a9b      	subs	r3, r3, r2
 8016372:	8004      	strh	r4, [r0, #0]
 8016374:	8081      	strh	r1, [r0, #4]
 8016376:	8043      	strh	r3, [r0, #2]
 8016378:	80c2      	strh	r2, [r0, #6]
 801637a:	bd30      	pop	{r4, r5, pc}
 801637c:	88cb      	ldrh	r3, [r1, #6]
 801637e:	8842      	ldrh	r2, [r0, #2]
 8016380:	1a9b      	subs	r3, r3, r2
 8016382:	88c2      	ldrh	r2, [r0, #6]
 8016384:	1a9b      	subs	r3, r3, r2
 8016386:	888a      	ldrh	r2, [r1, #4]
 8016388:	8801      	ldrh	r1, [r0, #0]
 801638a:	8043      	strh	r3, [r0, #2]
 801638c:	1a52      	subs	r2, r2, r1
 801638e:	8881      	ldrh	r1, [r0, #4]
 8016390:	1a52      	subs	r2, r2, r1
 8016392:	8002      	strh	r2, [r0, #0]
 8016394:	e7f1      	b.n	801637a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016396:	88cb      	ldrh	r3, [r1, #6]
 8016398:	8841      	ldrh	r1, [r0, #2]
 801639a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801639e:	1a5b      	subs	r3, r3, r1
 80163a0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80163a4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80163a8:	1a9b      	subs	r3, r3, r2
 80163aa:	8045      	strh	r5, [r0, #2]
 80163ac:	8082      	strh	r2, [r0, #4]
 80163ae:	8003      	strh	r3, [r0, #0]
 80163b0:	80c4      	strh	r4, [r0, #6]
 80163b2:	e7e2      	b.n	801637a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080163b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80163b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163b8:	b09f      	sub	sp, #124	@ 0x7c
 80163ba:	920f      	str	r2, [sp, #60]	@ 0x3c
 80163bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80163be:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80163c0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80163c2:	8812      	ldrh	r2, [r2, #0]
 80163c4:	889b      	ldrh	r3, [r3, #4]
 80163c6:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80163c8:	4413      	add	r3, r2
 80163ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80163cc:	6828      	ldr	r0, [r5, #0]
 80163ce:	b21b      	sxth	r3, r3
 80163d0:	9117      	str	r1, [sp, #92]	@ 0x5c
 80163d2:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 80163d6:	9311      	str	r3, [sp, #68]	@ 0x44
 80163d8:	6803      	ldr	r3, [r0, #0]
 80163da:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 80163de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80163e0:	4798      	blx	r3
 80163e2:	682b      	ldr	r3, [r5, #0]
 80163e4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80163e6:	7b1a      	ldrb	r2, [r3, #12]
 80163e8:	7adb      	ldrb	r3, [r3, #11]
 80163ea:	9215      	str	r2, [sp, #84]	@ 0x54
 80163ec:	9316      	str	r3, [sp, #88]	@ 0x58
 80163ee:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 80163f2:	2c00      	cmp	r4, #0
 80163f4:	d067      	beq.n	80164c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80163f6:	7c2b      	ldrb	r3, [r5, #16]
 80163f8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80163fa:	2b06      	cmp	r3, #6
 80163fc:	bf14      	ite	ne
 80163fe:	2301      	movne	r3, #1
 8016400:	2302      	moveq	r3, #2
 8016402:	4413      	add	r3, r2
 8016404:	f04f 0900 	mov.w	r9, #0
 8016408:	9310      	str	r3, [sp, #64]	@ 0x40
 801640a:	464c      	mov	r4, r9
 801640c:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8016410:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8016414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016416:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016418:	4293      	cmp	r3, r2
 801641a:	f280 808b 	bge.w	8016534 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801641e:	2300      	movs	r3, #0
 8016420:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8016424:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8016428:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801642c:	429c      	cmp	r4, r3
 801642e:	d006      	beq.n	801643e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8016430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016432:	f242 020b 	movw	r2, #8203	@ 0x200b
 8016436:	4294      	cmp	r4, r2
 8016438:	bf18      	it	ne
 801643a:	4623      	movne	r3, r4
 801643c:	930c      	str	r3, [sp, #48]	@ 0x30
 801643e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016440:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8016442:	682a      	ldr	r2, [r5, #0]
 8016444:	428b      	cmp	r3, r1
 8016446:	db40      	blt.n	80164ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8016448:	6813      	ldr	r3, [r2, #0]
 801644a:	4610      	mov	r0, r2
 801644c:	695b      	ldr	r3, [r3, #20]
 801644e:	4798      	blx	r3
 8016450:	4604      	mov	r4, r0
 8016452:	6828      	ldr	r0, [r5, #0]
 8016454:	aa1d      	add	r2, sp, #116	@ 0x74
 8016456:	4621      	mov	r1, r4
 8016458:	6803      	ldr	r3, [r0, #0]
 801645a:	689f      	ldr	r7, [r3, #8]
 801645c:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8016460:	47b8      	blx	r7
 8016462:	901c      	str	r0, [sp, #112]	@ 0x70
 8016464:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8016468:	429c      	cmp	r4, r3
 801646a:	f000 80eb 	beq.w	8016644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801646e:	f242 030b 	movw	r3, #8203	@ 0x200b
 8016472:	429c      	cmp	r4, r3
 8016474:	f000 80e6 	beq.w	8016644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016478:	2c00      	cmp	r4, #0
 801647a:	f000 810d 	beq.w	8016698 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801647e:	2c0a      	cmp	r4, #10
 8016480:	d05e      	beq.n	8016540 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8016482:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016484:	b36a      	cbz	r2, 80164e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8016486:	8894      	ldrh	r4, [r2, #4]
 8016488:	f1bb 0f00 	cmp.w	fp, #0
 801648c:	d03a      	beq.n	8016504 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801648e:	f892 900d 	ldrb.w	r9, [r2, #13]
 8016492:	f1bb 0f01 	cmp.w	fp, #1
 8016496:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801649a:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801649e:	f892 900a 	ldrb.w	r9, [r2, #10]
 80164a2:	ea49 0903 	orr.w	r9, r9, r3
 80164a6:	d133      	bne.n	8016510 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 80164a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80164aa:	eba6 0609 	sub.w	r6, r6, r9
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d14d      	bne.n	801654e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80164b2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80164b4:	eb09 0306 	add.w	r3, r9, r6
 80164b8:	4413      	add	r3, r2
 80164ba:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80164bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80164c0:	4293      	cmp	r3, r2
 80164c2:	da4e      	bge.n	8016562 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80164c4:	e036      	b.n	8016534 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80164c6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80164c8:	e79c      	b.n	8016404 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 80164ca:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 80164ce:	4659      	mov	r1, fp
 80164d0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80164d2:	9301      	str	r3, [sp, #4]
 80164d4:	ab1d      	add	r3, sp, #116	@ 0x74
 80164d6:	9300      	str	r3, [sp, #0]
 80164d8:	ab1c      	add	r3, sp, #112	@ 0x70
 80164da:	f003 f95a 	bl	8019792 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80164de:	4604      	mov	r4, r0
 80164e0:	e7c0      	b.n	8016464 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80164e2:	6828      	ldr	r0, [r5, #0]
 80164e4:	6803      	ldr	r3, [r0, #0]
 80164e6:	691b      	ldr	r3, [r3, #16]
 80164e8:	4798      	blx	r3
 80164ea:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80164ee:	4298      	cmp	r0, r3
 80164f0:	f000 80a8 	beq.w	8016644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80164f4:	f242 030b 	movw	r3, #8203	@ 0x200b
 80164f8:	4298      	cmp	r0, r3
 80164fa:	f000 80a3 	beq.w	8016644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80164fe:	f1bb 0f00 	cmp.w	fp, #0
 8016502:	d100      	bne.n	8016506 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8016504:	444e      	add	r6, r9
 8016506:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016508:	2a00      	cmp	r2, #0
 801650a:	d1c0      	bne.n	801648e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801650c:	4691      	mov	r9, r2
 801650e:	e099      	b.n	8016644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016510:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016512:	2b00      	cmp	r3, #0
 8016514:	f000 80c2 	beq.w	801669c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8016518:	f1bb 0f00 	cmp.w	fp, #0
 801651c:	d117      	bne.n	801654e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801651e:	6828      	ldr	r0, [r5, #0]
 8016520:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016522:	6803      	ldr	r3, [r0, #0]
 8016524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016526:	4798      	blx	r3
 8016528:	4406      	add	r6, r0
 801652a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801652c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801652e:	1af3      	subs	r3, r6, r3
 8016530:	4293      	cmp	r3, r2
 8016532:	dd16      	ble.n	8016562 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8016534:	2c00      	cmp	r4, #0
 8016536:	f000 80af 	beq.w	8016698 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801653a:	2c0a      	cmp	r4, #10
 801653c:	f040 809d 	bne.w	801667a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8016540:	240a      	movs	r4, #10
 8016542:	fab4 f084 	clz	r0, r4
 8016546:	0940      	lsrs	r0, r0, #5
 8016548:	b01f      	add	sp, #124	@ 0x7c
 801654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801654e:	6828      	ldr	r0, [r5, #0]
 8016550:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016552:	6803      	ldr	r3, [r0, #0]
 8016554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016556:	4798      	blx	r3
 8016558:	f1bb 0f01 	cmp.w	fp, #1
 801655c:	eba6 0600 	sub.w	r6, r6, r0
 8016560:	d0a7      	beq.n	80164b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8016562:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8016564:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8016566:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801656a:	f9b3 8000 	ldrsh.w	r8, [r3]
 801656e:	7b43      	ldrb	r3, [r0, #13]
 8016570:	4431      	add	r1, r6
 8016572:	015b      	lsls	r3, r3, #5
 8016574:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016578:	7983      	ldrb	r3, [r0, #6]
 801657a:	4313      	orrs	r3, r2
 801657c:	440b      	add	r3, r1
 801657e:	4543      	cmp	r3, r8
 8016580:	db60      	blt.n	8016644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016582:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016584:	4299      	cmp	r1, r3
 8016586:	da5d      	bge.n	8016644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016588:	6828      	ldr	r0, [r5, #0]
 801658a:	45b0      	cmp	r8, r6
 801658c:	6803      	ldr	r3, [r0, #0]
 801658e:	bfcc      	ite	gt
 8016590:	eba8 0806 	subgt.w	r8, r8, r6
 8016594:	f04f 0800 	movle.w	r8, #0
 8016598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801659a:	bfc8      	it	gt
 801659c:	fa1f f888 	uxthgt.w	r8, r8
 80165a0:	4798      	blx	r3
 80165a2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80165a4:	7b53      	ldrb	r3, [r2, #13]
 80165a6:	00d9      	lsls	r1, r3, #3
 80165a8:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 80165ac:	7a11      	ldrb	r1, [r2, #8]
 80165ae:	4339      	orrs	r1, r7
 80165b0:	065f      	lsls	r7, r3, #25
 80165b2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80165b4:	bf48      	it	mi
 80165b6:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 80165ba:	4407      	add	r7, r0
 80165bc:	bf48      	it	mi
 80165be:	b209      	sxthmi	r1, r1
 80165c0:	1a7f      	subs	r7, r7, r1
 80165c2:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80165c4:	b2bf      	uxth	r7, r7
 80165c6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80165ca:	fa0f fa87 	sxth.w	sl, r7
 80165ce:	4551      	cmp	r1, sl
 80165d0:	dd3c      	ble.n	801664c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80165d2:	011b      	lsls	r3, r3, #4
 80165d4:	79d0      	ldrb	r0, [r2, #7]
 80165d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80165da:	4303      	orrs	r3, r0
 80165dc:	449a      	add	sl, r3
 80165de:	4551      	cmp	r1, sl
 80165e0:	dc30      	bgt.n	8016644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80165e2:	1bcf      	subs	r7, r1, r7
 80165e4:	468a      	mov	sl, r1
 80165e6:	b23f      	sxth	r7, r7
 80165e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80165ea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80165ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80165ee:	6828      	ldr	r0, [r5, #0]
 80165f0:	2a00      	cmp	r2, #0
 80165f2:	d12d      	bne.n	8016650 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 80165f4:	9318      	str	r3, [sp, #96]	@ 0x60
 80165f6:	b2bf      	uxth	r7, r7
 80165f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80165fa:	6819      	ldr	r1, [r3, #0]
 80165fc:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 80165fe:	6801      	ldr	r1, [r0, #0]
 8016600:	9314      	str	r3, [sp, #80]	@ 0x50
 8016602:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016604:	4788      	blx	r1
 8016606:	79a9      	ldrb	r1, [r5, #6]
 8016608:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801660a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801660c:	7ba9      	ldrb	r1, [r5, #14]
 801660e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016610:	910a      	str	r1, [sp, #40]	@ 0x28
 8016612:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8016616:	9109      	str	r1, [sp, #36]	@ 0x24
 8016618:	68a9      	ldr	r1, [r5, #8]
 801661a:	9306      	str	r3, [sp, #24]
 801661c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801661e:	9205      	str	r2, [sp, #20]
 8016620:	9304      	str	r3, [sp, #16]
 8016622:	f8cd a004 	str.w	sl, [sp, #4]
 8016626:	e9cd 8702 	strd	r8, r7, [sp, #8]
 801662a:	44b0      	add	r8, r6
 801662c:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801662e:	fa0f f388 	sxth.w	r3, r8
 8016632:	9300      	str	r3, [sp, #0]
 8016634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016636:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801663a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801663c:	681a      	ldr	r2, [r3, #0]
 801663e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8016640:	685b      	ldr	r3, [r3, #4]
 8016642:	47b8      	blx	r7
 8016644:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016646:	3301      	adds	r3, #1
 8016648:	930d      	str	r3, [sp, #52]	@ 0x34
 801664a:	e6e3      	b.n	8016414 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 801664c:	2700      	movs	r7, #0
 801664e:	e7cb      	b.n	80165e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8016650:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016652:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8016656:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016658:	f8dc 1000 	ldr.w	r1, [ip]
 801665c:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8016660:	79aa      	ldrb	r2, [r5, #6]
 8016662:	9203      	str	r2, [sp, #12]
 8016664:	7baa      	ldrb	r2, [r5, #14]
 8016666:	9202      	str	r2, [sp, #8]
 8016668:	68aa      	ldr	r2, [r5, #8]
 801666a:	e9cd 0200 	strd	r0, r2, [sp]
 801666e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016670:	4660      	mov	r0, ip
 8016672:	688f      	ldr	r7, [r1, #8]
 8016674:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016676:	47b8      	blx	r7
 8016678:	e7e4      	b.n	8016644 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801667a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801667c:	3501      	adds	r5, #1
 801667e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8016680:	429d      	cmp	r5, r3
 8016682:	f6bf af5e 	bge.w	8016542 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8016686:	4659      	mov	r1, fp
 8016688:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801668a:	f7f8 ff73 	bl	800f574 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801668e:	4604      	mov	r4, r0
 8016690:	b110      	cbz	r0, 8016698 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8016692:	280a      	cmp	r0, #10
 8016694:	d1f2      	bne.n	801667c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8016696:	e753      	b.n	8016540 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8016698:	2400      	movs	r4, #0
 801669a:	e752      	b.n	8016542 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801669c:	f1bb 0f00 	cmp.w	fp, #0
 80166a0:	f43f af43 	beq.w	801652a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80166a4:	e75d      	b.n	8016562 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

080166a6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80166a6:	b530      	push	{r4, r5, lr}
 80166a8:	8ac4      	ldrh	r4, [r0, #22]
 80166aa:	8b45      	ldrh	r5, [r0, #26]
 80166ac:	8343      	strh	r3, [r0, #26]
 80166ae:	442c      	add	r4, r5
 80166b0:	1ae4      	subs	r4, r4, r3
 80166b2:	8b83      	ldrh	r3, [r0, #28]
 80166b4:	82c4      	strh	r4, [r0, #22]
 80166b6:	8b04      	ldrh	r4, [r0, #24]
 80166b8:	4422      	add	r2, r4
 80166ba:	440c      	add	r4, r1
 80166bc:	1a59      	subs	r1, r3, r1
 80166be:	83c2      	strh	r2, [r0, #30]
 80166c0:	8304      	strh	r4, [r0, #24]
 80166c2:	8381      	strh	r1, [r0, #28]
 80166c4:	bd30      	pop	{r4, r5, pc}

080166c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80166c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166ca:	4604      	mov	r4, r0
 80166cc:	8a47      	ldrh	r7, [r0, #18]
 80166ce:	68c0      	ldr	r0, [r0, #12]
 80166d0:	b085      	sub	sp, #20
 80166d2:	6803      	ldr	r3, [r0, #0]
 80166d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80166d6:	4798      	blx	r3
 80166d8:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80166dc:	7a63      	ldrb	r3, [r4, #9]
 80166de:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80166e2:	3b01      	subs	r3, #1
 80166e4:	42b7      	cmp	r7, r6
 80166e6:	bfac      	ite	ge
 80166e8:	f04f 0900 	movge.w	r9, #0
 80166ec:	f04f 0901 	movlt.w	r9, #1
 80166f0:	2b05      	cmp	r3, #5
 80166f2:	d804      	bhi.n	80166fe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80166f4:	e8df f003 	tbb	[pc, r3]
 80166f8:	470f0854 	.word	0x470f0854
 80166fc:	4c4c      	.short	0x4c4c
 80166fe:	2500      	movs	r5, #0
 8016700:	46a9      	mov	r9, r5
 8016702:	462e      	mov	r6, r5
 8016704:	462f      	mov	r7, r5
 8016706:	e00e      	b.n	8016726 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016708:	42b7      	cmp	r7, r6
 801670a:	f04f 0500 	mov.w	r5, #0
 801670e:	bfb4      	ite	lt
 8016710:	2600      	movlt	r6, #0
 8016712:	2601      	movge	r6, #1
 8016714:	e7f6      	b.n	8016704 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8016716:	42b7      	cmp	r7, r6
 8016718:	464d      	mov	r5, r9
 801671a:	f04f 0900 	mov.w	r9, #0
 801671e:	bfb4      	ite	lt
 8016720:	2600      	movlt	r6, #0
 8016722:	2601      	movge	r6, #1
 8016724:	464f      	mov	r7, r9
 8016726:	f04f 0800 	mov.w	r8, #0
 801672a:	f8a4 8016 	strh.w	r8, [r4, #22]
 801672e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8016732:	f8cd 8004 	str.w	r8, [sp, #4]
 8016736:	2300      	movs	r3, #0
 8016738:	9303      	str	r3, [sp, #12]
 801673a:	8823      	ldrh	r3, [r4, #0]
 801673c:	2b20      	cmp	r3, #32
 801673e:	d033      	beq.n	80167a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8016740:	f242 010b 	movw	r1, #8203	@ 0x200b
 8016744:	1a5a      	subs	r2, r3, r1
 8016746:	f1d2 0a00 	rsbs	sl, r2, #0
 801674a:	eb4a 0a02 	adc.w	sl, sl, r2
 801674e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8016752:	4293      	cmp	r3, r2
 8016754:	d008      	beq.n	8016768 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8016756:	428b      	cmp	r3, r1
 8016758:	9a01      	ldr	r2, [sp, #4]
 801675a:	bf0e      	itee	eq
 801675c:	f04f 0a01 	moveq.w	sl, #1
 8016760:	461a      	movne	r2, r3
 8016762:	f04f 0a00 	movne.w	sl, #0
 8016766:	9201      	str	r2, [sp, #4]
 8016768:	ab03      	add	r3, sp, #12
 801676a:	68e2      	ldr	r2, [r4, #12]
 801676c:	7a21      	ldrb	r1, [r4, #8]
 801676e:	6860      	ldr	r0, [r4, #4]
 8016770:	f002 ffc6 	bl	8019700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016774:	8020      	strh	r0, [r4, #0]
 8016776:	b9d8      	cbnz	r0, 80167b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8016778:	8ba2      	ldrh	r2, [r4, #28]
 801677a:	2300      	movs	r3, #0
 801677c:	4611      	mov	r1, r2
 801677e:	4620      	mov	r0, r4
 8016780:	f7ff ff91 	bl	80166a6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016784:	e06e      	b.n	8016864 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8016786:	2500      	movs	r5, #0
 8016788:	2701      	movs	r7, #1
 801678a:	46a9      	mov	r9, r5
 801678c:	462e      	mov	r6, r5
 801678e:	e7ca      	b.n	8016726 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016790:	42b7      	cmp	r7, r6
 8016792:	f04f 0500 	mov.w	r5, #0
 8016796:	bfb4      	ite	lt
 8016798:	2700      	movlt	r7, #0
 801679a:	2701      	movge	r7, #1
 801679c:	462e      	mov	r6, r5
 801679e:	e7c2      	b.n	8016726 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80167a0:	2500      	movs	r5, #0
 80167a2:	2601      	movs	r6, #1
 80167a4:	46a9      	mov	r9, r5
 80167a6:	e7ad      	b.n	8016704 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80167a8:	9301      	str	r3, [sp, #4]
 80167aa:	f04f 0a01 	mov.w	sl, #1
 80167ae:	e7db      	b.n	8016768 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80167b0:	8b63      	ldrh	r3, [r4, #26]
 80167b2:	280a      	cmp	r0, #10
 80167b4:	f103 0301 	add.w	r3, r3, #1
 80167b8:	8363      	strh	r3, [r4, #26]
 80167ba:	d0dd      	beq.n	8016778 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80167bc:	9a03      	ldr	r2, [sp, #12]
 80167be:	bb62      	cbnz	r2, 801681a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80167c0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80167c4:	4298      	cmp	r0, r3
 80167c6:	d003      	beq.n	80167d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80167c8:	f242 030b 	movw	r3, #8203	@ 0x200b
 80167cc:	4298      	cmp	r0, r3
 80167ce:	d1b2      	bne.n	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80167d0:	8823      	ldrh	r3, [r4, #0]
 80167d2:	8ba1      	ldrh	r1, [r4, #28]
 80167d4:	2b20      	cmp	r3, #32
 80167d6:	d003      	beq.n	80167e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80167d8:	f242 000b 	movw	r0, #8203	@ 0x200b
 80167dc:	4283      	cmp	r3, r0
 80167de:	d131      	bne.n	8016844 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80167e0:	f1ba 0f00 	cmp.w	sl, #0
 80167e4:	bf0a      	itet	eq
 80167e6:	4688      	moveq	r8, r1
 80167e8:	4650      	movne	r0, sl
 80167ea:	2001      	moveq	r0, #1
 80167ec:	440a      	add	r2, r1
 80167ee:	8b23      	ldrh	r3, [r4, #24]
 80167f0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80167f4:	b292      	uxth	r2, r2
 80167f6:	83a2      	strh	r2, [r4, #28]
 80167f8:	4413      	add	r3, r2
 80167fa:	f1b9 0f00 	cmp.w	r9, #0
 80167fe:	d102      	bne.n	8016806 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8016800:	2d00      	cmp	r5, #0
 8016802:	d042      	beq.n	801688a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8016804:	b300      	cbz	r0, 8016848 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8016806:	8c21      	ldrh	r1, [r4, #32]
 8016808:	4419      	add	r1, r3
 801680a:	458c      	cmp	ip, r1
 801680c:	da37      	bge.n	801687e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801680e:	8ae1      	ldrh	r1, [r4, #22]
 8016810:	2900      	cmp	r1, #0
 8016812:	d034      	beq.n	801687e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8016814:	4563      	cmp	r3, ip
 8016816:	dd8e      	ble.n	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016818:	e01d      	b.n	8016856 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801681a:	8893      	ldrh	r3, [r2, #4]
 801681c:	9901      	ldr	r1, [sp, #4]
 801681e:	8023      	strh	r3, [r4, #0]
 8016820:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8016824:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8016828:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 801682c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8016830:	ea4b 0b00 	orr.w	fp, fp, r0
 8016834:	68e0      	ldr	r0, [r4, #12]
 8016836:	6803      	ldr	r3, [r0, #0]
 8016838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801683a:	4798      	blx	r3
 801683c:	eb0b 0200 	add.w	r2, fp, r0
 8016840:	b292      	uxth	r2, r2
 8016842:	e7c5      	b.n	80167d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8016844:	2000      	movs	r0, #0
 8016846:	e7d1      	b.n	80167ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8016848:	4563      	cmp	r3, ip
 801684a:	f77f af74 	ble.w	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801684e:	8ae3      	ldrh	r3, [r4, #22]
 8016850:	2b00      	cmp	r3, #0
 8016852:	f43f af70 	beq.w	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016856:	2301      	movs	r3, #1
 8016858:	8c22      	ldrh	r2, [r4, #32]
 801685a:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 801685e:	8be3      	ldrh	r3, [r4, #30]
 8016860:	4413      	add	r3, r2
 8016862:	83e3      	strh	r3, [r4, #30]
 8016864:	68e0      	ldr	r0, [r4, #12]
 8016866:	6803      	ldr	r3, [r0, #0]
 8016868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801686a:	4798      	blx	r3
 801686c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8016870:	4418      	add	r0, r3
 8016872:	8a63      	ldrh	r3, [r4, #18]
 8016874:	1a18      	subs	r0, r3, r0
 8016876:	8260      	strh	r0, [r4, #18]
 8016878:	b005      	add	sp, #20
 801687a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801687e:	2300      	movs	r3, #0
 8016880:	4611      	mov	r1, r2
 8016882:	4620      	mov	r0, r4
 8016884:	f7ff ff0f 	bl	80166a6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016888:	e755      	b.n	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801688a:	4563      	cmp	r3, ip
 801688c:	dd14      	ble.n	80168b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801688e:	b117      	cbz	r7, 8016896 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8016890:	2301      	movs	r3, #1
 8016892:	460a      	mov	r2, r1
 8016894:	e772      	b.n	801677c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8016896:	2e00      	cmp	r6, #0
 8016898:	f43f af4d 	beq.w	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801689c:	2800      	cmp	r0, #0
 801689e:	f47f af4a 	bne.w	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80168a2:	f1ba 0f00 	cmp.w	sl, #0
 80168a6:	d002      	beq.n	80168ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80168a8:	2301      	movs	r3, #1
 80168aa:	4642      	mov	r2, r8
 80168ac:	e767      	b.n	801677e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80168ae:	8ae3      	ldrh	r3, [r4, #22]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	f43f af40 	beq.w	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80168b6:	e7d5      	b.n	8016864 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80168b8:	2800      	cmp	r0, #0
 80168ba:	f47f af3c 	bne.w	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80168be:	f1ba 0f00 	cmp.w	sl, #0
 80168c2:	f43f af38 	beq.w	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80168c6:	2301      	movs	r3, #1
 80168c8:	4642      	mov	r2, r8
 80168ca:	e7da      	b.n	8016882 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080168cc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80168cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168ce:	4605      	mov	r5, r0
 80168d0:	b08f      	sub	sp, #60	@ 0x3c
 80168d2:	4617      	mov	r7, r2
 80168d4:	461c      	mov	r4, r3
 80168d6:	460e      	mov	r6, r1
 80168d8:	b1d1      	cbz	r1, 8016910 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	4620      	mov	r0, r4
 80168de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80168e0:	4798      	blx	r3
 80168e2:	4240      	negs	r0, r0
 80168e4:	9603      	str	r6, [sp, #12]
 80168e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80168ea:	b200      	sxth	r0, r0
 80168ec:	9700      	str	r7, [sp, #0]
 80168ee:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 80168f2:	4629      	mov	r1, r5
 80168f4:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80168f8:	2401      	movs	r4, #1
 80168fa:	a805      	add	r0, sp, #20
 80168fc:	f7ff fcaa 	bl	8016254 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016900:	a805      	add	r0, sp, #20
 8016902:	f7ff fee0 	bl	80166c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016906:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801690a:	b163      	cbz	r3, 8016926 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801690c:	3401      	adds	r4, #1
 801690e:	e7f7      	b.n	8016900 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8016910:	2401      	movs	r4, #1
 8016912:	f002 ffc1 	bl	8019898 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016916:	280a      	cmp	r0, #10
 8016918:	4628      	mov	r0, r5
 801691a:	bf08      	it	eq
 801691c:	3401      	addeq	r4, #1
 801691e:	f002 ffbb 	bl	8019898 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016922:	2800      	cmp	r0, #0
 8016924:	d1f7      	bne.n	8016916 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8016926:	b2a0      	uxth	r0, r4
 8016928:	b00f      	add	sp, #60	@ 0x3c
 801692a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801692c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016930:	b0e3      	sub	sp, #396	@ 0x18c
 8016932:	461c      	mov	r4, r3
 8016934:	4683      	mov	fp, r0
 8016936:	4688      	mov	r8, r1
 8016938:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 801693a:	2b00      	cmp	r3, #0
 801693c:	f000 8112 	beq.w	8016b64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016940:	6823      	ldr	r3, [r4, #0]
 8016942:	2b00      	cmp	r3, #0
 8016944:	f000 810e 	beq.w	8016b64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016948:	7ba3      	ldrb	r3, [r4, #14]
 801694a:	2b00      	cmp	r3, #0
 801694c:	f000 810a 	beq.w	8016b64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016950:	ad0a      	add	r5, sp, #40	@ 0x28
 8016952:	6810      	ldr	r0, [r2, #0]
 8016954:	6851      	ldr	r1, [r2, #4]
 8016956:	462b      	mov	r3, r5
 8016958:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801695c:	c303      	stmia	r3!, {r0, r1}
 801695e:	2100      	movs	r1, #0
 8016960:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8016964:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8016968:	4628      	mov	r0, r5
 801696a:	910c      	str	r1, [sp, #48]	@ 0x30
 801696c:	a90c      	add	r1, sp, #48	@ 0x30
 801696e:	79a2      	ldrb	r2, [r4, #6]
 8016970:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016974:	f7ff fced 	bl	8016352 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016978:	a90c      	add	r1, sp, #48	@ 0x30
 801697a:	79a2      	ldrb	r2, [r4, #6]
 801697c:	4608      	mov	r0, r1
 801697e:	f7ff fce8 	bl	8016352 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016982:	a817      	add	r0, sp, #92	@ 0x5c
 8016984:	f002 fb2e 	bl	8018fe4 <_ZN8touchgfx12TextProviderC1Ev>
 8016988:	6820      	ldr	r0, [r4, #0]
 801698a:	6803      	ldr	r3, [r0, #0]
 801698c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801698e:	4798      	blx	r3
 8016990:	4606      	mov	r6, r0
 8016992:	6820      	ldr	r0, [r4, #0]
 8016994:	6803      	ldr	r3, [r0, #0]
 8016996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016998:	4798      	blx	r3
 801699a:	4633      	mov	r3, r6
 801699c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801699e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80169a0:	9000      	str	r0, [sp, #0]
 80169a2:	a817      	add	r0, sp, #92	@ 0x5c
 80169a4:	f002 fb79 	bl	801909a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80169a8:	6820      	ldr	r0, [r4, #0]
 80169aa:	f894 a004 	ldrb.w	sl, [r4, #4]
 80169ae:	6803      	ldr	r3, [r0, #0]
 80169b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169b2:	4798      	blx	r3
 80169b4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80169b8:	6823      	ldr	r3, [r4, #0]
 80169ba:	4607      	mov	r7, r0
 80169bc:	4406      	add	r6, r0
 80169be:	a830      	add	r0, sp, #192	@ 0xc0
 80169c0:	f893 9009 	ldrb.w	r9, [r3, #9]
 80169c4:	f002 fb0e 	bl	8018fe4 <_ZN8touchgfx12TextProviderC1Ev>
 80169c8:	7c23      	ldrb	r3, [r4, #16]
 80169ca:	b17b      	cbz	r3, 80169ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80169cc:	6820      	ldr	r0, [r4, #0]
 80169ce:	6803      	ldr	r3, [r0, #0]
 80169d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80169d2:	4798      	blx	r3
 80169d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80169d6:	6820      	ldr	r0, [r4, #0]
 80169d8:	6802      	ldr	r2, [r0, #0]
 80169da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80169dc:	4790      	blx	r2
 80169de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169e0:	9000      	str	r0, [sp, #0]
 80169e2:	a830      	add	r0, sp, #192	@ 0xc0
 80169e4:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80169e6:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80169e8:	f002 fb57 	bl	801909a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80169ec:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80169f0:	a80e      	add	r0, sp, #56	@ 0x38
 80169f2:	7be2      	ldrb	r2, [r4, #15]
 80169f4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80169f8:	1a8a      	subs	r2, r1, r2
 80169fa:	7c21      	ldrb	r1, [r4, #16]
 80169fc:	9103      	str	r1, [sp, #12]
 80169fe:	b292      	uxth	r2, r2
 8016a00:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8016a04:	9102      	str	r1, [sp, #8]
 8016a06:	6821      	ldr	r1, [r4, #0]
 8016a08:	9101      	str	r1, [sp, #4]
 8016a0a:	7961      	ldrb	r1, [r4, #5]
 8016a0c:	9100      	str	r1, [sp, #0]
 8016a0e:	a930      	add	r1, sp, #192	@ 0xc0
 8016a10:	f7ff fc20 	bl	8016254 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016a14:	2e00      	cmp	r6, #0
 8016a16:	dc5b      	bgt.n	8016ad0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8016a18:	af17      	add	r7, sp, #92	@ 0x5c
 8016a1a:	f04f 0900 	mov.w	r9, #0
 8016a1e:	7c23      	ldrb	r3, [r4, #16]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	f000 80b1 	beq.w	8016b88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8016a26:	a80e      	add	r0, sp, #56	@ 0x38
 8016a28:	f7ff fe4d 	bl	80166c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016a2c:	f1ba 0f00 	cmp.w	sl, #0
 8016a30:	f000 80a5 	beq.w	8016b7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016a34:	7c23      	ldrb	r3, [r4, #16]
 8016a36:	2264      	movs	r2, #100	@ 0x64
 8016a38:	4639      	mov	r1, r7
 8016a3a:	a849      	add	r0, sp, #292	@ 0x124
 8016a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a3e:	f013 f82b 	bl	8029a98 <memcpy>
 8016a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	f000 80a7 	beq.w	8016b98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8016a4a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8016a4e:	7922      	ldrb	r2, [r4, #4]
 8016a50:	2a01      	cmp	r2, #1
 8016a52:	f040 808a 	bne.w	8016b6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8016a56:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8016a5a:	1ac0      	subs	r0, r0, r3
 8016a5c:	2302      	movs	r3, #2
 8016a5e:	fb90 f0f3 	sdiv	r0, r0, r3
 8016a62:	b200      	sxth	r0, r0
 8016a64:	7c23      	ldrb	r3, [r4, #16]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	f000 808b 	beq.w	8016b82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8016a6c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8016a70:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8016a74:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016a78:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016a7c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8016a80:	2100      	movs	r1, #0
 8016a82:	4410      	add	r0, r2
 8016a84:	4642      	mov	r2, r8
 8016a86:	b200      	sxth	r0, r0
 8016a88:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8016a8c:	9000      	str	r0, [sp, #0]
 8016a8e:	4658      	mov	r0, fp
 8016a90:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8016a94:	f7ff fc8e 	bl	80163b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016a98:	2800      	cmp	r0, #0
 8016a9a:	d163      	bne.n	8016b64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016a9c:	b2b2      	uxth	r2, r6
 8016a9e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016aa2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8016aa6:	4413      	add	r3, r2
 8016aa8:	1a8a      	subs	r2, r1, r2
 8016aaa:	b21b      	sxth	r3, r3
 8016aac:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8016ab0:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8016ab4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8016ab8:	2a00      	cmp	r2, #0
 8016aba:	d153      	bne.n	8016b64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016abc:	6822      	ldr	r2, [r4, #0]
 8016abe:	8869      	ldrh	r1, [r5, #2]
 8016ac0:	7a12      	ldrb	r2, [r2, #8]
 8016ac2:	1a9b      	subs	r3, r3, r2
 8016ac4:	88ea      	ldrh	r2, [r5, #6]
 8016ac6:	440a      	add	r2, r1
 8016ac8:	b212      	sxth	r2, r2
 8016aca:	4293      	cmp	r3, r2
 8016acc:	dda7      	ble.n	8016a1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8016ace:	e049      	b.n	8016b64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016ad0:	7c23      	ldrb	r3, [r4, #16]
 8016ad2:	444f      	add	r7, r9
 8016ad4:	b1c3      	cbz	r3, 8016b08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8016ad6:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8016ada:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016ade:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016ae2:	443b      	add	r3, r7
 8016ae4:	4293      	cmp	r3, r2
 8016ae6:	da97      	bge.n	8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016ae8:	a80e      	add	r0, sp, #56	@ 0x38
 8016aea:	f7ff fdec 	bl	80166c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016aee:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8016af2:	3b01      	subs	r3, #1
 8016af4:	b29b      	uxth	r3, r3
 8016af6:	454b      	cmp	r3, r9
 8016af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8016afa:	d021      	beq.n	8016b40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8016afc:	7961      	ldrb	r1, [r4, #5]
 8016afe:	a817      	add	r0, sp, #92	@ 0x5c
 8016b00:	f7f8 fd38 	bl	800f574 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b06:	e7f4      	b.n	8016af2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8016b08:	fa1f f986 	uxth.w	r9, r6
 8016b0c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016b10:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016b14:	443b      	add	r3, r7
 8016b16:	4293      	cmp	r3, r2
 8016b18:	f6bf af7e 	bge.w	8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016b1c:	a817      	add	r0, sp, #92	@ 0x5c
 8016b1e:	f002 febb 	bl	8019898 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016b22:	b1f8      	cbz	r0, 8016b64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016b24:	280a      	cmp	r0, #10
 8016b26:	d1f1      	bne.n	8016b0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016b28:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016b2c:	444b      	add	r3, r9
 8016b2e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8016b32:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8016b36:	eba3 0309 	sub.w	r3, r3, r9
 8016b3a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016b3e:	e7e5      	b.n	8016b0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016b40:	b2b3      	uxth	r3, r6
 8016b42:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8016b46:	441a      	add	r2, r3
 8016b48:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8016b4c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8016b50:	1ad3      	subs	r3, r2, r3
 8016b52:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016b56:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8016b5a:	b11b      	cbz	r3, 8016b64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016b5c:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d0ba      	beq.n	8016ada <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8016b64:	b063      	add	sp, #396	@ 0x18c
 8016b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b6a:	2a02      	cmp	r2, #2
 8016b6c:	d105      	bne.n	8016b7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8016b6e:	7be2      	ldrb	r2, [r4, #15]
 8016b70:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8016b74:	1a80      	subs	r0, r0, r2
 8016b76:	1ac0      	subs	r0, r0, r3
 8016b78:	e773      	b.n	8016a62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8016b7a:	2000      	movs	r0, #0
 8016b7c:	e772      	b.n	8016a64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016b7e:	7be0      	ldrb	r0, [r4, #15]
 8016b80:	e770      	b.n	8016a64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016b82:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016b86:	e773      	b.n	8016a70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8016b88:	f1ba 0f00 	cmp.w	sl, #0
 8016b8c:	d0f7      	beq.n	8016b7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016b8e:	2264      	movs	r2, #100	@ 0x64
 8016b90:	4639      	mov	r1, r7
 8016b92:	a849      	add	r0, sp, #292	@ 0x124
 8016b94:	f012 ff80 	bl	8029a98 <memcpy>
 8016b98:	2300      	movs	r3, #0
 8016b9a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016b9e:	6821      	ldr	r1, [r4, #0]
 8016ba0:	a849      	add	r0, sp, #292	@ 0x124
 8016ba2:	f7ff fb9a 	bl	80162da <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016ba6:	b203      	sxth	r3, r0
 8016ba8:	e751      	b.n	8016a4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08016baa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016baa:	2b03      	cmp	r3, #3
 8016bac:	d818      	bhi.n	8016be0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016bae:	e8df f003 	tbb	[pc, r3]
 8016bb2:	0602      	.short	0x0602
 8016bb4:	130d      	.short	0x130d
 8016bb6:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016bba:	1850      	adds	r0, r2, r1
 8016bbc:	4770      	bx	lr
 8016bbe:	8803      	ldrh	r3, [r0, #0]
 8016bc0:	8880      	ldrh	r0, [r0, #4]
 8016bc2:	4418      	add	r0, r3
 8016bc4:	b200      	sxth	r0, r0
 8016bc6:	1a80      	subs	r0, r0, r2
 8016bc8:	3801      	subs	r0, #1
 8016bca:	4770      	bx	lr
 8016bcc:	8803      	ldrh	r3, [r0, #0]
 8016bce:	8880      	ldrh	r0, [r0, #4]
 8016bd0:	4418      	add	r0, r3
 8016bd2:	b200      	sxth	r0, r0
 8016bd4:	1a40      	subs	r0, r0, r1
 8016bd6:	e7f7      	b.n	8016bc8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016bd8:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016bdc:	4410      	add	r0, r2
 8016bde:	4770      	bx	lr
 8016be0:	2000      	movs	r0, #0
 8016be2:	4770      	bx	lr

08016be4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016be4:	2b03      	cmp	r3, #3
 8016be6:	d817      	bhi.n	8016c18 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8016be8:	e8df f003 	tbb	[pc, r3]
 8016bec:	10090602 	.word	0x10090602
 8016bf0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016bf4:	1850      	adds	r0, r2, r1
 8016bf6:	4770      	bx	lr
 8016bf8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016bfc:	e7fa      	b.n	8016bf4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016bfe:	8843      	ldrh	r3, [r0, #2]
 8016c00:	88c0      	ldrh	r0, [r0, #6]
 8016c02:	4418      	add	r0, r3
 8016c04:	b200      	sxth	r0, r0
 8016c06:	1a80      	subs	r0, r0, r2
 8016c08:	3801      	subs	r0, #1
 8016c0a:	4770      	bx	lr
 8016c0c:	8843      	ldrh	r3, [r0, #2]
 8016c0e:	88c0      	ldrh	r0, [r0, #6]
 8016c10:	4418      	add	r0, r3
 8016c12:	b200      	sxth	r0, r0
 8016c14:	1a40      	subs	r0, r0, r1
 8016c16:	e7f7      	b.n	8016c08 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016c18:	2000      	movs	r0, #0
 8016c1a:	4770      	bx	lr

08016c1c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016c1c:	4b01      	ldr	r3, [pc, #4]	@ (8016c24 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016c1e:	2200      	movs	r2, #0
 8016c20:	601a      	str	r2, [r3, #0]
 8016c22:	4770      	bx	lr
 8016c24:	24006608 	.word	0x24006608

08016c28 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016c28:	4603      	mov	r3, r0
 8016c2a:	b1c8      	cbz	r0, 8016c60 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016c2c:	0c02      	lsrs	r2, r0, #16
 8016c2e:	0412      	lsls	r2, r2, #16
 8016c30:	b9a2      	cbnz	r2, 8016c5c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016c32:	0403      	lsls	r3, r0, #16
 8016c34:	2010      	movs	r0, #16
 8016c36:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8016c3a:	bf04      	itt	eq
 8016c3c:	021b      	lsleq	r3, r3, #8
 8016c3e:	3008      	addeq	r0, #8
 8016c40:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8016c44:	bf04      	itt	eq
 8016c46:	011b      	lsleq	r3, r3, #4
 8016c48:	3004      	addeq	r0, #4
 8016c4a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8016c4e:	bf04      	itt	eq
 8016c50:	009b      	lsleq	r3, r3, #2
 8016c52:	3002      	addeq	r0, #2
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	db04      	blt.n	8016c62 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016c58:	3001      	adds	r0, #1
 8016c5a:	4770      	bx	lr
 8016c5c:	2000      	movs	r0, #0
 8016c5e:	e7ea      	b.n	8016c36 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016c60:	2020      	movs	r0, #32
 8016c62:	4770      	bx	lr

08016c64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8016c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c68:	b087      	sub	sp, #28
 8016c6a:	460d      	mov	r5, r1
 8016c6c:	4616      	mov	r6, r2
 8016c6e:	4698      	mov	r8, r3
 8016c70:	4601      	mov	r1, r0
 8016c72:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8016c76:	b120      	cbz	r0, 8016c82 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016c78:	b11a      	cbz	r2, 8016c82 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016c7a:	2d1f      	cmp	r5, #31
 8016c7c:	d801      	bhi.n	8016c82 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016c7e:	2b1f      	cmp	r3, #31
 8016c80:	d904      	bls.n	8016c8c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8016c82:	2000      	movs	r0, #0
 8016c84:	6038      	str	r0, [r7, #0]
 8016c86:	b007      	add	sp, #28
 8016c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c8c:	b97d      	cbnz	r5, 8016cae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8016c8e:	b143      	cbz	r3, 8016ca2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8016c90:	4602      	mov	r2, r0
 8016c92:	462b      	mov	r3, r5
 8016c94:	4641      	mov	r1, r8
 8016c96:	4630      	mov	r0, r6
 8016c98:	e9cd 4700 	strd	r4, r7, [sp]
 8016c9c:	f7ff ffe2 	bl	8016c64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016ca0:	e7f1      	b.n	8016c86 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ca6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016caa:	603b      	str	r3, [r7, #0]
 8016cac:	e7eb      	b.n	8016c86 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016cae:	fa32 fa05 	lsrs.w	sl, r2, r5
 8016cb2:	d106      	bne.n	8016cc2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8016cb4:	4346      	muls	r6, r0
 8016cb6:	fbb6 f0f4 	udiv	r0, r6, r4
 8016cba:	fb04 6610 	mls	r6, r4, r0, r6
 8016cbe:	603e      	str	r6, [r7, #0]
 8016cc0:	e7e1      	b.n	8016c86 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016cc2:	2201      	movs	r2, #1
 8016cc4:	fa00 fb05 	lsl.w	fp, r0, r5
 8016cc8:	40aa      	lsls	r2, r5
 8016cca:	fbbb f9f4 	udiv	r9, fp, r4
 8016cce:	3a01      	subs	r2, #1
 8016cd0:	fb0a f309 	mul.w	r3, sl, r9
 8016cd4:	fb04 b919 	mls	r9, r4, r9, fp
 8016cd8:	4016      	ands	r6, r2
 8016cda:	9303      	str	r3, [sp, #12]
 8016cdc:	4630      	mov	r0, r6
 8016cde:	f7ff ffa3 	bl	8016c28 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016ce2:	462b      	mov	r3, r5
 8016ce4:	460a      	mov	r2, r1
 8016ce6:	4601      	mov	r1, r0
 8016ce8:	4630      	mov	r0, r6
 8016cea:	e9cd 4700 	strd	r4, r7, [sp]
 8016cee:	f7ff ffb9 	bl	8016c64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016cf2:	4606      	mov	r6, r0
 8016cf4:	4648      	mov	r0, r9
 8016cf6:	eb05 0108 	add.w	r1, r5, r8
 8016cfa:	f7ff ff95 	bl	8016c28 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016cfe:	ab05      	add	r3, sp, #20
 8016d00:	464a      	mov	r2, r9
 8016d02:	e9cd 4300 	strd	r4, r3, [sp]
 8016d06:	4603      	mov	r3, r0
 8016d08:	4650      	mov	r0, sl
 8016d0a:	f7ff ffab 	bl	8016c64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016d0e:	6839      	ldr	r1, [r7, #0]
 8016d10:	9a05      	ldr	r2, [sp, #20]
 8016d12:	9b03      	ldr	r3, [sp, #12]
 8016d14:	4411      	add	r1, r2
 8016d16:	fbb1 f2f4 	udiv	r2, r1, r4
 8016d1a:	18d3      	adds	r3, r2, r3
 8016d1c:	fb04 1412 	mls	r4, r4, r2, r1
 8016d20:	441e      	add	r6, r3
 8016d22:	603c      	str	r4, [r7, #0]
 8016d24:	4430      	add	r0, r6
 8016d26:	e7ae      	b.n	8016c86 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08016d28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d2c:	b085      	sub	sp, #20
 8016d2e:	f1b0 0900 	subs.w	r9, r0, #0
 8016d32:	461d      	mov	r5, r3
 8016d34:	4617      	mov	r7, r2
 8016d36:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8016d38:	bfbb      	ittet	lt
 8016d3a:	f1c9 0900 	rsblt	r9, r9, #0
 8016d3e:	f04f 36ff 	movlt.w	r6, #4294967295
 8016d42:	2601      	movge	r6, #1
 8016d44:	6823      	ldrlt	r3, [r4, #0]
 8016d46:	bfbc      	itt	lt
 8016d48:	425b      	neglt	r3, r3
 8016d4a:	6023      	strlt	r3, [r4, #0]
 8016d4c:	2a00      	cmp	r2, #0
 8016d4e:	da04      	bge.n	8016d5a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016d50:	6823      	ldr	r3, [r4, #0]
 8016d52:	4257      	negs	r7, r2
 8016d54:	4276      	negs	r6, r6
 8016d56:	425b      	negs	r3, r3
 8016d58:	6023      	str	r3, [r4, #0]
 8016d5a:	2d00      	cmp	r5, #0
 8016d5c:	4638      	mov	r0, r7
 8016d5e:	bfba      	itte	lt
 8016d60:	426d      	neglt	r5, r5
 8016d62:	f04f 38ff 	movlt.w	r8, #4294967295
 8016d66:	f04f 0801 	movge.w	r8, #1
 8016d6a:	f7ff ff5d 	bl	8016c28 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016d6e:	ab03      	add	r3, sp, #12
 8016d70:	463a      	mov	r2, r7
 8016d72:	e9cd 5300 	strd	r5, r3, [sp]
 8016d76:	4603      	mov	r3, r0
 8016d78:	4648      	mov	r0, r9
 8016d7a:	f7ff ff73 	bl	8016c64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016d7e:	6823      	ldr	r3, [r4, #0]
 8016d80:	9a03      	ldr	r2, [sp, #12]
 8016d82:	4546      	cmp	r6, r8
 8016d84:	441a      	add	r2, r3
 8016d86:	fb92 f3f5 	sdiv	r3, r2, r5
 8016d8a:	4418      	add	r0, r3
 8016d8c:	fb05 2313 	mls	r3, r5, r3, r2
 8016d90:	bf18      	it	ne
 8016d92:	4240      	negne	r0, r0
 8016d94:	1c72      	adds	r2, r6, #1
 8016d96:	6023      	str	r3, [r4, #0]
 8016d98:	d105      	bne.n	8016da6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f1c3 0200 	rsb	r2, r3, #0
 8016da0:	db0b      	blt.n	8016dba <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8016da2:	6022      	str	r2, [r4, #0]
 8016da4:	e006      	b.n	8016db4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016da6:	2e01      	cmp	r6, #1
 8016da8:	d104      	bne.n	8016db4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	da02      	bge.n	8016db4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016dae:	442b      	add	r3, r5
 8016db0:	3801      	subs	r0, #1
 8016db2:	6023      	str	r3, [r4, #0]
 8016db4:	b005      	add	sp, #20
 8016db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dba:	3801      	subs	r0, #1
 8016dbc:	1b52      	subs	r2, r2, r5
 8016dbe:	e7f0      	b.n	8016da2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08016dc0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016dc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016dc4:	4c1c      	ldr	r4, [pc, #112]	@ (8016e38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016dc6:	4605      	mov	r5, r0
 8016dc8:	6807      	ldr	r7, [r0, #0]
 8016dca:	69a3      	ldr	r3, [r4, #24]
 8016dcc:	b92b      	cbnz	r3, 8016dda <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016dce:	6840      	ldr	r0, [r0, #4]
 8016dd0:	e9c5 7000 	strd	r7, r0, [r5]
 8016dd4:	b004      	add	sp, #16
 8016dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dda:	f04f 0802 	mov.w	r8, #2
 8016dde:	68a2      	ldr	r2, [r4, #8]
 8016de0:	ae04      	add	r6, sp, #16
 8016de2:	6820      	ldr	r0, [r4, #0]
 8016de4:	fb93 f1f8 	sdiv	r1, r3, r8
 8016de8:	440a      	add	r2, r1
 8016dea:	69e1      	ldr	r1, [r4, #28]
 8016dec:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016df0:	463a      	mov	r2, r7
 8016df2:	9600      	str	r6, [sp, #0]
 8016df4:	f7ff ff98 	bl	8016d28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016df8:	69a3      	ldr	r3, [r4, #24]
 8016dfa:	4607      	mov	r7, r0
 8016dfc:	686a      	ldr	r2, [r5, #4]
 8016dfe:	6a21      	ldr	r1, [r4, #32]
 8016e00:	9600      	str	r6, [sp, #0]
 8016e02:	6860      	ldr	r0, [r4, #4]
 8016e04:	f7ff ff90 	bl	8016d28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016e08:	69a3      	ldr	r3, [r4, #24]
 8016e0a:	6962      	ldr	r2, [r4, #20]
 8016e0c:	4407      	add	r7, r0
 8016e0e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8016e10:	9600      	str	r6, [sp, #0]
 8016e12:	68e0      	ldr	r0, [r4, #12]
 8016e14:	fb93 f8f8 	sdiv	r8, r3, r8
 8016e18:	4442      	add	r2, r8
 8016e1a:	9203      	str	r2, [sp, #12]
 8016e1c:	682a      	ldr	r2, [r5, #0]
 8016e1e:	f7ff ff83 	bl	8016d28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016e22:	4680      	mov	r8, r0
 8016e24:	9600      	str	r6, [sp, #0]
 8016e26:	69a3      	ldr	r3, [r4, #24]
 8016e28:	686a      	ldr	r2, [r5, #4]
 8016e2a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8016e2c:	6920      	ldr	r0, [r4, #16]
 8016e2e:	f7ff ff7b 	bl	8016d28 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016e32:	4440      	add	r0, r8
 8016e34:	e7cc      	b.n	8016dd0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016e36:	bf00      	nop
 8016e38:	2400660c 	.word	0x2400660c

08016e3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016e3c:	4b07      	ldr	r3, [pc, #28]	@ (8016e5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016e3e:	781b      	ldrb	r3, [r3, #0]
 8016e40:	2b01      	cmp	r3, #1
 8016e42:	d109      	bne.n	8016e58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016e44:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016e48:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016e4c:	8003      	strh	r3, [r0, #0]
 8016e4e:	4b04      	ldr	r3, [pc, #16]	@ (8016e60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016e50:	881b      	ldrh	r3, [r3, #0]
 8016e52:	3b01      	subs	r3, #1
 8016e54:	1a9b      	subs	r3, r3, r2
 8016e56:	800b      	strh	r3, [r1, #0]
 8016e58:	4770      	bx	lr
 8016e5a:	bf00      	nop
 8016e5c:	240065f8 	.word	0x240065f8
 8016e60:	240065f4 	.word	0x240065f4

08016e64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016e64:	4b07      	ldr	r3, [pc, #28]	@ (8016e84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016e66:	b510      	push	{r4, lr}
 8016e68:	781b      	ldrb	r3, [r3, #0]
 8016e6a:	2b01      	cmp	r3, #1
 8016e6c:	d108      	bne.n	8016e80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016e6e:	4b06      	ldr	r3, [pc, #24]	@ (8016e88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016e70:	880c      	ldrh	r4, [r1, #0]
 8016e72:	881b      	ldrh	r3, [r3, #0]
 8016e74:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016e78:	3b01      	subs	r3, #1
 8016e7a:	1b1b      	subs	r3, r3, r4
 8016e7c:	8003      	strh	r3, [r0, #0]
 8016e7e:	800a      	strh	r2, [r1, #0]
 8016e80:	bd10      	pop	{r4, pc}
 8016e82:	bf00      	nop
 8016e84:	240065f8 	.word	0x240065f8
 8016e88:	240065f4 	.word	0x240065f4

08016e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8016eb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016e8e:	b510      	push	{r4, lr}
 8016e90:	781b      	ldrb	r3, [r3, #0]
 8016e92:	2b01      	cmp	r3, #1
 8016e94:	d10e      	bne.n	8016eb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016e96:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016e9a:	8843      	ldrh	r3, [r0, #2]
 8016e9c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016ea0:	18ca      	adds	r2, r1, r3
 8016ea2:	4b06      	ldr	r3, [pc, #24]	@ (8016ebc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016ea4:	8044      	strh	r4, [r0, #2]
 8016ea6:	881b      	ldrh	r3, [r3, #0]
 8016ea8:	1a9b      	subs	r3, r3, r2
 8016eaa:	8003      	strh	r3, [r0, #0]
 8016eac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016eb0:	8081      	strh	r1, [r0, #4]
 8016eb2:	80c3      	strh	r3, [r0, #6]
 8016eb4:	bd10      	pop	{r4, pc}
 8016eb6:	bf00      	nop
 8016eb8:	240065f8 	.word	0x240065f8
 8016ebc:	240065f4 	.word	0x240065f4

08016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016ec0:	4b08      	ldr	r3, [pc, #32]	@ (8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	2b01      	cmp	r3, #1
 8016ec6:	d10c      	bne.n	8016ee2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016ec8:	8803      	ldrh	r3, [r0, #0]
 8016eca:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016ece:	8842      	ldrh	r2, [r0, #2]
 8016ed0:	8002      	strh	r2, [r0, #0]
 8016ed2:	185a      	adds	r2, r3, r1
 8016ed4:	4b04      	ldr	r3, [pc, #16]	@ (8016ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016ed6:	881b      	ldrh	r3, [r3, #0]
 8016ed8:	1a9b      	subs	r3, r3, r2
 8016eda:	8043      	strh	r3, [r0, #2]
 8016edc:	88c3      	ldrh	r3, [r0, #6]
 8016ede:	80c1      	strh	r1, [r0, #6]
 8016ee0:	8083      	strh	r3, [r0, #4]
 8016ee2:	4770      	bx	lr
 8016ee4:	240065f8 	.word	0x240065f8
 8016ee8:	240065f4 	.word	0x240065f4

08016eec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016eec:	4b07      	ldr	r3, [pc, #28]	@ (8016f0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016eee:	b510      	push	{r4, lr}
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	2b01      	cmp	r3, #1
 8016ef4:	d108      	bne.n	8016f08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016ef6:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016efa:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016efe:	8003      	strh	r3, [r0, #0]
 8016f00:	8893      	ldrh	r3, [r2, #4]
 8016f02:	3b01      	subs	r3, #1
 8016f04:	1b1b      	subs	r3, r3, r4
 8016f06:	800b      	strh	r3, [r1, #0]
 8016f08:	bd10      	pop	{r4, pc}
 8016f0a:	bf00      	nop
 8016f0c:	240065f8 	.word	0x240065f8

08016f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8016f10:	4b0b      	ldr	r3, [pc, #44]	@ (8016f40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	2b01      	cmp	r3, #1
 8016f16:	d111      	bne.n	8016f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8016f18:	680b      	ldr	r3, [r1, #0]
 8016f1a:	ed90 7a00 	vldr	s14, [r0]
 8016f1e:	6003      	str	r3, [r0, #0]
 8016f20:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8016f24:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8016f44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8016f28:	ee07 3a90 	vmov	s15, r3
 8016f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016f34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f38:	edc1 7a00 	vstr	s15, [r1]
 8016f3c:	4770      	bx	lr
 8016f3e:	bf00      	nop
 8016f40:	240065f8 	.word	0x240065f8
 8016f44:	38d1b717 	.word	0x38d1b717

08016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016f48:	4b0a      	ldr	r3, [pc, #40]	@ (8016f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016f4a:	460a      	mov	r2, r1
 8016f4c:	b510      	push	{r4, lr}
 8016f4e:	781b      	ldrb	r3, [r3, #0]
 8016f50:	2b01      	cmp	r3, #1
 8016f52:	d10d      	bne.n	8016f70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016f54:	8881      	ldrh	r1, [r0, #4]
 8016f56:	8803      	ldrh	r3, [r0, #0]
 8016f58:	440b      	add	r3, r1
 8016f5a:	4601      	mov	r1, r0
 8016f5c:	3b01      	subs	r3, #1
 8016f5e:	f821 3b02 	strh.w	r3, [r1], #2
 8016f62:	f7ff ffc3 	bl	8016eec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016f66:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016f6a:	88c2      	ldrh	r2, [r0, #6]
 8016f6c:	80c3      	strh	r3, [r0, #6]
 8016f6e:	8082      	strh	r2, [r0, #4]
 8016f70:	bd10      	pop	{r4, pc}
 8016f72:	bf00      	nop
 8016f74:	240065f8 	.word	0x240065f8

08016f78 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016f78:	4b06      	ldr	r3, [pc, #24]	@ (8016f94 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016f7a:	2100      	movs	r1, #0
 8016f7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f80:	4b05      	ldr	r3, [pc, #20]	@ (8016f98 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016f82:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8016f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f8a:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8016f8e:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8016f92:	4770      	bx	lr
 8016f94:	240065f4 	.word	0x240065f4
 8016f98:	240065f6 	.word	0x240065f6

08016f9c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016f9c:	4b03      	ldr	r3, [pc, #12]	@ (8016fac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016f9e:	6818      	ldr	r0, [r3, #0]
 8016fa0:	b110      	cbz	r0, 8016fa8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016fa2:	6803      	ldr	r3, [r0, #0]
 8016fa4:	699b      	ldr	r3, [r3, #24]
 8016fa6:	4718      	bx	r3
 8016fa8:	4770      	bx	lr
 8016faa:	bf00      	nop
 8016fac:	2400663c 	.word	0x2400663c

08016fb0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016fb0:	4770      	bx	lr
	...

08016fb4 <_ZN8touchgfx11Application4drawEv>:
 8016fb4:	4b09      	ldr	r3, [pc, #36]	@ (8016fdc <_ZN8touchgfx11Application4drawEv+0x28>)
 8016fb6:	b507      	push	{r0, r1, r2, lr}
 8016fb8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016fbc:	2100      	movs	r1, #0
 8016fbe:	4b08      	ldr	r3, [pc, #32]	@ (8016fe0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016fc0:	9100      	str	r1, [sp, #0]
 8016fc2:	4669      	mov	r1, sp
 8016fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fc8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016fcc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016fd0:	6803      	ldr	r3, [r0, #0]
 8016fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016fd4:	4798      	blx	r3
 8016fd6:	b003      	add	sp, #12
 8016fd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fdc:	240065f4 	.word	0x240065f4
 8016fe0:	240065f6 	.word	0x240065f6

08016fe4 <_ZN8touchgfx11Application10invalidateEv>:
 8016fe4:	4b09      	ldr	r3, [pc, #36]	@ (801700c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016fe6:	b082      	sub	sp, #8
 8016fe8:	2100      	movs	r1, #0
 8016fea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016fee:	4b08      	ldr	r3, [pc, #32]	@ (8017010 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016ff0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016ff4:	aa02      	add	r2, sp, #8
 8016ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ffa:	9100      	str	r1, [sp, #0]
 8016ffc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017000:	6803      	ldr	r3, [r0, #0]
 8017002:	e912 0006 	ldmdb	r2, {r1, r2}
 8017006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017008:	b002      	add	sp, #8
 801700a:	4718      	bx	r3
 801700c:	240065f4 	.word	0x240065f4
 8017010:	240065f6 	.word	0x240065f6

08017014 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017014:	4b03      	ldr	r3, [pc, #12]	@ (8017024 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017016:	6818      	ldr	r0, [r3, #0]
 8017018:	b110      	cbz	r0, 8017020 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801701a:	6803      	ldr	r3, [r0, #0]
 801701c:	69db      	ldr	r3, [r3, #28]
 801701e:	4718      	bx	r3
 8017020:	4770      	bx	lr
 8017022:	bf00      	nop
 8017024:	2400663c 	.word	0x2400663c

08017028 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017028:	4b03      	ldr	r3, [pc, #12]	@ (8017038 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801702a:	6818      	ldr	r0, [r3, #0]
 801702c:	b110      	cbz	r0, 8017034 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801702e:	6803      	ldr	r3, [r0, #0]
 8017030:	6a1b      	ldr	r3, [r3, #32]
 8017032:	4718      	bx	r3
 8017034:	4770      	bx	lr
 8017036:	bf00      	nop
 8017038:	2400663c 	.word	0x2400663c

0801703c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801703c:	2300      	movs	r3, #0
 801703e:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8017042:	4770      	bx	lr

08017044 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017044:	4b03      	ldr	r3, [pc, #12]	@ (8017054 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017046:	6818      	ldr	r0, [r3, #0]
 8017048:	b110      	cbz	r0, 8017050 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801704a:	6803      	ldr	r3, [r0, #0]
 801704c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801704e:	4718      	bx	r3
 8017050:	4770      	bx	lr
 8017052:	bf00      	nop
 8017054:	2400663c 	.word	0x2400663c

08017058 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017058:	b510      	push	{r4, lr}
 801705a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801705e:	888a      	ldrh	r2, [r1, #4]
 8017060:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017064:	4422      	add	r2, r4
 8017066:	b212      	sxth	r2, r2
 8017068:	4293      	cmp	r3, r2
 801706a:	da15      	bge.n	8017098 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801706c:	8882      	ldrh	r2, [r0, #4]
 801706e:	4413      	add	r3, r2
 8017070:	b21b      	sxth	r3, r3
 8017072:	429c      	cmp	r4, r3
 8017074:	da10      	bge.n	8017098 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017076:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801707a:	88c9      	ldrh	r1, [r1, #6]
 801707c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017080:	4419      	add	r1, r3
 8017082:	b209      	sxth	r1, r1
 8017084:	428a      	cmp	r2, r1
 8017086:	da07      	bge.n	8017098 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017088:	88c0      	ldrh	r0, [r0, #6]
 801708a:	4410      	add	r0, r2
 801708c:	b200      	sxth	r0, r0
 801708e:	4283      	cmp	r3, r0
 8017090:	bfac      	ite	ge
 8017092:	2000      	movge	r0, #0
 8017094:	2001      	movlt	r0, #1
 8017096:	bd10      	pop	{r4, pc}
 8017098:	2000      	movs	r0, #0
 801709a:	e7fc      	b.n	8017096 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801709c <_ZN8touchgfx4Rect10restrictToEss>:
 801709c:	f9b0 3000 	ldrsh.w	r3, [r0]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	b510      	push	{r4, lr}
 80170a4:	da04      	bge.n	80170b0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80170a6:	8884      	ldrh	r4, [r0, #4]
 80170a8:	4423      	add	r3, r4
 80170aa:	8083      	strh	r3, [r0, #4]
 80170ac:	2300      	movs	r3, #0
 80170ae:	8003      	strh	r3, [r0, #0]
 80170b0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80170b4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80170b8:	1b09      	subs	r1, r1, r4
 80170ba:	428b      	cmp	r3, r1
 80170bc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80170c0:	bfc8      	it	gt
 80170c2:	8081      	strhgt	r1, [r0, #4]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	da04      	bge.n	80170d2 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80170c8:	88c1      	ldrh	r1, [r0, #6]
 80170ca:	440b      	add	r3, r1
 80170cc:	80c3      	strh	r3, [r0, #6]
 80170ce:	2300      	movs	r3, #0
 80170d0:	8043      	strh	r3, [r0, #2]
 80170d2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80170d6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80170da:	1a52      	subs	r2, r2, r1
 80170dc:	4293      	cmp	r3, r2
 80170de:	bfc8      	it	gt
 80170e0:	80c2      	strhgt	r2, [r0, #6]
 80170e2:	bd10      	pop	{r4, pc}

080170e4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80170e4:	4b10      	ldr	r3, [pc, #64]	@ (8017128 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80170e6:	b510      	push	{r4, lr}
 80170e8:	460c      	mov	r4, r1
 80170ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80170ee:	4b0f      	ldr	r3, [pc, #60]	@ (801712c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80170f0:	4620      	mov	r0, r4
 80170f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80170f6:	f7ff ffd1 	bl	801709c <_ZN8touchgfx4Rect10restrictToEss>
 80170fa:	4b0d      	ldr	r3, [pc, #52]	@ (8017130 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80170fc:	6818      	ldr	r0, [r3, #0]
 80170fe:	b190      	cbz	r0, 8017126 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017100:	6803      	ldr	r3, [r0, #0]
 8017102:	4621      	mov	r1, r4
 8017104:	689b      	ldr	r3, [r3, #8]
 8017106:	4798      	blx	r3
 8017108:	4b0a      	ldr	r3, [pc, #40]	@ (8017134 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801710a:	6818      	ldr	r0, [r3, #0]
 801710c:	b118      	cbz	r0, 8017116 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801710e:	6803      	ldr	r3, [r0, #0]
 8017110:	4621      	mov	r1, r4
 8017112:	689b      	ldr	r3, [r3, #8]
 8017114:	4798      	blx	r3
 8017116:	4b08      	ldr	r3, [pc, #32]	@ (8017138 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8017118:	4621      	mov	r1, r4
 801711a:	6818      	ldr	r0, [r3, #0]
 801711c:	6803      	ldr	r3, [r0, #0]
 801711e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017122:	69db      	ldr	r3, [r3, #28]
 8017124:	4718      	bx	r3
 8017126:	bd10      	pop	{r4, pc}
 8017128:	240065f6 	.word	0x240065f6
 801712c:	240065f4 	.word	0x240065f4
 8017130:	2400663c 	.word	0x2400663c
 8017134:	24006638 	.word	0x24006638
 8017138:	24006600 	.word	0x24006600

0801713c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801713e:	4606      	mov	r6, r0
 8017140:	4608      	mov	r0, r1
 8017142:	460f      	mov	r7, r1
 8017144:	f7fb fe51 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8017148:	b9e8      	cbnz	r0, 8017186 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801714a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801714e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017152:	42a5      	cmp	r5, r4
 8017154:	db17      	blt.n	8017186 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017156:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801715a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801715e:	429a      	cmp	r2, r3
 8017160:	db11      	blt.n	8017186 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017162:	88b9      	ldrh	r1, [r7, #4]
 8017164:	440d      	add	r5, r1
 8017166:	88b1      	ldrh	r1, [r6, #4]
 8017168:	440c      	add	r4, r1
 801716a:	b22d      	sxth	r5, r5
 801716c:	b224      	sxth	r4, r4
 801716e:	42a5      	cmp	r5, r4
 8017170:	dc09      	bgt.n	8017186 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017172:	88f8      	ldrh	r0, [r7, #6]
 8017174:	4410      	add	r0, r2
 8017176:	88f2      	ldrh	r2, [r6, #6]
 8017178:	4413      	add	r3, r2
 801717a:	b200      	sxth	r0, r0
 801717c:	b21b      	sxth	r3, r3
 801717e:	4298      	cmp	r0, r3
 8017180:	bfcc      	ite	gt
 8017182:	2000      	movgt	r0, #0
 8017184:	2001      	movle	r0, #1
 8017186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017188 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801718a:	4604      	mov	r4, r0
 801718c:	4608      	mov	r0, r1
 801718e:	460d      	mov	r5, r1
 8017190:	f7fb fe2b 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8017194:	b978      	cbnz	r0, 80171b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017196:	4620      	mov	r0, r4
 8017198:	f7fb fe27 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 801719c:	f9b5 6000 	ldrsh.w	r6, [r5]
 80171a0:	b150      	cbz	r0, 80171b8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80171a2:	8026      	strh	r6, [r4, #0]
 80171a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80171a8:	8063      	strh	r3, [r4, #2]
 80171aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80171ae:	80a3      	strh	r3, [r4, #4]
 80171b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80171b4:	80e3      	strh	r3, [r4, #6]
 80171b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80171bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80171c0:	42b1      	cmp	r1, r6
 80171c2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80171c6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80171ca:	460f      	mov	r7, r1
 80171cc:	88ed      	ldrh	r5, [r5, #6]
 80171ce:	bfa8      	it	ge
 80171d0:	4637      	movge	r7, r6
 80171d2:	4293      	cmp	r3, r2
 80171d4:	4618      	mov	r0, r3
 80171d6:	4466      	add	r6, ip
 80171d8:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80171dc:	bfa8      	it	ge
 80171de:	4610      	movge	r0, r2
 80171e0:	442a      	add	r2, r5
 80171e2:	88e5      	ldrh	r5, [r4, #6]
 80171e4:	4461      	add	r1, ip
 80171e6:	b236      	sxth	r6, r6
 80171e8:	8027      	strh	r7, [r4, #0]
 80171ea:	442b      	add	r3, r5
 80171ec:	b209      	sxth	r1, r1
 80171ee:	b212      	sxth	r2, r2
 80171f0:	8060      	strh	r0, [r4, #2]
 80171f2:	b21b      	sxth	r3, r3
 80171f4:	428e      	cmp	r6, r1
 80171f6:	bfac      	ite	ge
 80171f8:	ebc7 0106 	rsbge	r1, r7, r6
 80171fc:	ebc7 0101 	rsblt	r1, r7, r1
 8017200:	429a      	cmp	r2, r3
 8017202:	bfac      	ite	ge
 8017204:	ebc0 0202 	rsbge	r2, r0, r2
 8017208:	ebc0 0203 	rsblt	r2, r0, r3
 801720c:	80a1      	strh	r1, [r4, #4]
 801720e:	80e2      	strh	r2, [r4, #6]
 8017210:	e7d1      	b.n	80171b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08017214 <_ZN8touchgfx11Application11getInstanceEv>:
 8017214:	4b01      	ldr	r3, [pc, #4]	@ (801721c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017216:	6818      	ldr	r0, [r3, #0]
 8017218:	4770      	bx	lr
 801721a:	bf00      	nop
 801721c:	2400664c 	.word	0x2400664c

08017220 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8017220:	2300      	movs	r3, #0
 8017222:	b510      	push	{r4, lr}
 8017224:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8017228:	4604      	mov	r4, r0
 801722a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801722e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8017232:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8017236:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801723a:	429a      	cmp	r2, r3
 801723c:	d90e      	bls.n	801725c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801723e:	18e2      	adds	r2, r4, r3
 8017240:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8017244:	b122      	cbz	r2, 8017250 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8017246:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801724a:	6803      	ldr	r3, [r0, #0]
 801724c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801724e:	4798      	blx	r3
 8017250:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8017254:	3301      	adds	r3, #1
 8017256:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801725a:	e7ea      	b.n	8017232 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801725c:	bd10      	pop	{r4, pc}

0801725e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801725e:	b530      	push	{r4, r5, lr}
 8017260:	2200      	movs	r2, #0
 8017262:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 8017266:	b293      	uxth	r3, r2
 8017268:	429d      	cmp	r5, r3
 801726a:	d90e      	bls.n	801728a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801726c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8017270:	428b      	cmp	r3, r1
 8017272:	d10b      	bne.n	801728c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8017274:	1884      	adds	r4, r0, r2
 8017276:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801727a:	b13b      	cbz	r3, 801728c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801727c:	3b01      	subs	r3, #1
 801727e:	b2db      	uxtb	r3, r3
 8017280:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8017284:	b90b      	cbnz	r3, 801728a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8017286:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801728a:	bd30      	pop	{r4, r5, pc}
 801728c:	3201      	adds	r2, #1
 801728e:	e7ea      	b.n	8017266 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08017290 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8017290:	2300      	movs	r3, #0
 8017292:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8017296:	30a4      	adds	r0, #164	@ 0xa4
 8017298:	f820 3c24 	strh.w	r3, [r0, #-36]
 801729c:	f802 3b01 	strb.w	r3, [r2], #1
 80172a0:	4282      	cmp	r2, r0
 80172a2:	d1fb      	bne.n	801729c <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80172a4:	4770      	bx	lr
	...

080172a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80172a8:	b570      	push	{r4, r5, r6, lr}
 80172aa:	4c0b      	ldr	r4, [pc, #44]	@ (80172d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80172ac:	4605      	mov	r5, r0
 80172ae:	460e      	mov	r6, r1
 80172b0:	6820      	ldr	r0, [r4, #0]
 80172b2:	b110      	cbz	r0, 80172ba <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80172b4:	6803      	ldr	r3, [r0, #0]
 80172b6:	695b      	ldr	r3, [r3, #20]
 80172b8:	4798      	blx	r3
 80172ba:	1d28      	adds	r0, r5, #4
 80172bc:	f7ff ffe8 	bl	8017290 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80172c0:	6026      	str	r6, [r4, #0]
 80172c2:	6833      	ldr	r3, [r6, #0]
 80172c4:	4630      	mov	r0, r6
 80172c6:	68db      	ldr	r3, [r3, #12]
 80172c8:	4798      	blx	r3
 80172ca:	682b      	ldr	r3, [r5, #0]
 80172cc:	4628      	mov	r0, r5
 80172ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80172d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172d4:	4718      	bx	r3
 80172d6:	bf00      	nop
 80172d8:	2400663c 	.word	0x2400663c

080172dc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80172dc:	2300      	movs	r3, #0
 80172de:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 80172e2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 80172e6:	461a      	mov	r2, r3
 80172e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172ea:	461c      	mov	r4, r3
 80172ec:	461d      	mov	r5, r3
 80172ee:	459c      	cmp	ip, r3
 80172f0:	dd1a      	ble.n	8017328 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80172f2:	18c6      	adds	r6, r0, r3
 80172f4:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80172f8:	b16e      	cbz	r6, 8017316 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80172fa:	429a      	cmp	r2, r3
 80172fc:	d008      	beq.n	8017310 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80172fe:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8017302:	fa1f fe82 	uxth.w	lr, r2
 8017306:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801730a:	1887      	adds	r7, r0, r2
 801730c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8017310:	3201      	adds	r2, #1
 8017312:	3301      	adds	r3, #1
 8017314:	e7eb      	b.n	80172ee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8017316:	4299      	cmp	r1, r3
 8017318:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801731c:	bfa8      	it	ge
 801731e:	3501      	addge	r5, #1
 8017320:	429e      	cmp	r6, r3
 8017322:	bfc8      	it	gt
 8017324:	3401      	addgt	r4, #1
 8017326:	e7f4      	b.n	8017312 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8017328:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801732c:	1b49      	subs	r1, r1, r5
 801732e:	1b1b      	subs	r3, r3, r4
 8017330:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8017334:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8017338:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801733c:	4293      	cmp	r3, r2
 801733e:	dd03      	ble.n	8017348 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8017340:	3b01      	subs	r3, #1
 8017342:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8017346:	e7f7      	b.n	8017338 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8017348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801734c <_ZN8touchgfx11Application15handleTickEventEv>:
 801734c:	b570      	push	{r4, r5, r6, lr}
 801734e:	4d16      	ldr	r5, [pc, #88]	@ (80173a8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8017350:	4604      	mov	r4, r0
 8017352:	6828      	ldr	r0, [r5, #0]
 8017354:	b140      	cbz	r0, 8017368 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017356:	7a03      	ldrb	r3, [r0, #8]
 8017358:	b933      	cbnz	r3, 8017368 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801735a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801735e:	6803      	ldr	r3, [r0, #0]
 8017360:	689b      	ldr	r3, [r3, #8]
 8017362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017366:	4718      	bx	r3
 8017368:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801736c:	4e0f      	ldr	r6, [pc, #60]	@ (80173ac <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801736e:	b973      	cbnz	r3, 801738e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017370:	b168      	cbz	r0, 801738e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017372:	7a03      	ldrb	r3, [r0, #8]
 8017374:	b15b      	cbz	r3, 801738e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017376:	6830      	ldr	r0, [r6, #0]
 8017378:	b110      	cbz	r0, 8017380 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801737a:	6803      	ldr	r3, [r0, #0]
 801737c:	691b      	ldr	r3, [r3, #16]
 801737e:	4798      	blx	r3
 8017380:	6828      	ldr	r0, [r5, #0]
 8017382:	6803      	ldr	r3, [r0, #0]
 8017384:	68db      	ldr	r3, [r3, #12]
 8017386:	4798      	blx	r3
 8017388:	2301      	movs	r3, #1
 801738a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801738e:	3404      	adds	r4, #4
 8017390:	4620      	mov	r0, r4
 8017392:	f7ff ff45 	bl	8017220 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8017396:	4620      	mov	r0, r4
 8017398:	f7ff ffa0 	bl	80172dc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801739c:	6830      	ldr	r0, [r6, #0]
 801739e:	b110      	cbz	r0, 80173a6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80173a0:	6803      	ldr	r3, [r0, #0]
 80173a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173a4:	e7dd      	b.n	8017362 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80173a6:	bd70      	pop	{r4, r5, r6, pc}
 80173a8:	24006640 	.word	0x24006640
 80173ac:	2400663c 	.word	0x2400663c

080173b0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 80173b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173b2:	2300      	movs	r3, #0
 80173b4:	4604      	mov	r4, r0
 80173b6:	460d      	mov	r5, r1
 80173b8:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 80173bc:	4618      	mov	r0, r3
 80173be:	b29a      	uxth	r2, r3
 80173c0:	4291      	cmp	r1, r2
 80173c2:	d912      	bls.n	80173ea <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 80173c4:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 80173c8:	18e6      	adds	r6, r4, r3
 80173ca:	42af      	cmp	r7, r5
 80173cc:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 80173d0:	d105      	bne.n	80173de <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 80173d2:	2aff      	cmp	r2, #255	@ 0xff
 80173d4:	d002      	beq.n	80173dc <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80173d6:	3201      	adds	r2, #1
 80173d8:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 80173dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173de:	2a00      	cmp	r2, #0
 80173e0:	f103 0301 	add.w	r3, r3, #1
 80173e4:	bf08      	it	eq
 80173e6:	2001      	moveq	r0, #1
 80173e8:	e7e9      	b.n	80173be <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 80173ea:	b120      	cbz	r0, 80173f6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80173ec:	2920      	cmp	r1, #32
 80173ee:	d102      	bne.n	80173f6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80173f0:	4620      	mov	r0, r4
 80173f2:	f7ff ff73 	bl	80172dc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80173f6:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 80173fa:	2b1f      	cmp	r3, #31
 80173fc:	d8ee      	bhi.n	80173dc <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80173fe:	18e2      	adds	r2, r4, r3
 8017400:	2101      	movs	r1, #1
 8017402:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8017406:	185a      	adds	r2, r3, r1
 8017408:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801740c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8017410:	e7e4      	b.n	80173dc <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08017412 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017412:	4603      	mov	r3, r0
 8017414:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8017418:	2200      	movs	r2, #0
 801741a:	801a      	strh	r2, [r3, #0]
 801741c:	3308      	adds	r3, #8
 801741e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8017422:	f823 2c04 	strh.w	r2, [r3, #-4]
 8017426:	f823 2c02 	strh.w	r2, [r3, #-2]
 801742a:	428b      	cmp	r3, r1
 801742c:	d1f5      	bne.n	801741a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801742e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8017432:	4770      	bx	lr

08017434 <_ZN8touchgfx11ApplicationC1Ev>:
 8017434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017436:	4b1d      	ldr	r3, [pc, #116]	@ (80174ac <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017438:	4606      	mov	r6, r0
 801743a:	4604      	mov	r4, r0
 801743c:	2500      	movs	r5, #0
 801743e:	f846 3b04 	str.w	r3, [r6], #4
 8017442:	22a8      	movs	r2, #168	@ 0xa8
 8017444:	2100      	movs	r1, #0
 8017446:	4630      	mov	r0, r6
 8017448:	f012 f9fb 	bl	8029842 <memset>
 801744c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8017450:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8017454:	4f16      	ldr	r7, [pc, #88]	@ (80174b0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017456:	f7ff ffdc 	bl	8017412 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801745a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801745e:	f7ff ffd8 	bl	8017412 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017462:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8017466:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801746a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801746e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8017472:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8017476:	490f      	ldr	r1, [pc, #60]	@ (80174b4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017478:	480f      	ldr	r0, [pc, #60]	@ (80174b8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801747a:	f011 fcd5 	bl	8028e28 <CRC_Lock>
 801747e:	4b0f      	ldr	r3, [pc, #60]	@ (80174bc <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8017480:	b158      	cbz	r0, 801749a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8017482:	801d      	strh	r5, [r3, #0]
 8017484:	2300      	movs	r3, #0
 8017486:	4a0e      	ldr	r2, [pc, #56]	@ (80174c0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8017488:	4630      	mov	r0, r6
 801748a:	6013      	str	r3, [r2, #0]
 801748c:	4a0d      	ldr	r2, [pc, #52]	@ (80174c4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801748e:	603b      	str	r3, [r7, #0]
 8017490:	6013      	str	r3, [r2, #0]
 8017492:	f7ff fefd 	bl	8017290 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017496:	4620      	mov	r0, r4
 8017498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801749a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801749e:	2002      	movs	r0, #2
 80174a0:	801a      	strh	r2, [r3, #0]
 80174a2:	6038      	str	r0, [r7, #0]
 80174a4:	f001 fbb2 	bl	8018c0c <_ZN8touchgfx6Screen4drawEv>
 80174a8:	e7ec      	b.n	8017484 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80174aa:	bf00      	nop
 80174ac:	0802c590 	.word	0x0802c590
 80174b0:	2400663c 	.word	0x2400663c
 80174b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80174b8:	f407a5c2 	.word	0xf407a5c2
 80174bc:	24000020 	.word	0x24000020
 80174c0:	2400664c 	.word	0x2400664c
 80174c4:	24006640 	.word	0x24006640

080174c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80174c8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80174cc:	3b01      	subs	r3, #1
 80174ce:	b29b      	uxth	r3, r3
 80174d0:	428b      	cmp	r3, r1
 80174d2:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 80174d6:	b510      	push	{r4, lr}
 80174d8:	d908      	bls.n	80174ec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80174da:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80174de:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80174e2:	681a      	ldr	r2, [r3, #0]
 80174e4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80174e8:	685a      	ldr	r2, [r3, #4]
 80174ea:	6062      	str	r2, [r4, #4]
 80174ec:	bd10      	pop	{r4, pc}
	...

080174f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80174f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f4:	b08f      	sub	sp, #60	@ 0x3c
 80174f6:	4b92      	ldr	r3, [pc, #584]	@ (8017740 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 80174f8:	4683      	mov	fp, r0
 80174fa:	ac0a      	add	r4, sp, #40	@ 0x28
 80174fc:	e884 0006 	stmia.w	r4, {r1, r2}
 8017500:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017504:	4620      	mov	r0, r4
 8017506:	4b8f      	ldr	r3, [pc, #572]	@ (8017744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 8017508:	f9b3 1000 	ldrsh.w	r1, [r3]
 801750c:	f7ff fdc6 	bl	801709c <_ZN8touchgfx4Rect10restrictToEss>
 8017510:	4620      	mov	r0, r4
 8017512:	f7fb fc6a 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8017516:	2800      	cmp	r0, #0
 8017518:	d170      	bne.n	80175fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801751a:	4b8b      	ldr	r3, [pc, #556]	@ (8017748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8017522:	2b02      	cmp	r3, #2
 8017524:	d06a      	beq.n	80175fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8017526:	9403      	str	r4, [sp, #12]
 8017528:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801752c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8017530:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8017534:	9301      	str	r3, [sp, #4]
 8017536:	35a4      	adds	r5, #164	@ 0xa4
 8017538:	b15c      	cbz	r4, 8017552 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801753a:	4629      	mov	r1, r5
 801753c:	9803      	ldr	r0, [sp, #12]
 801753e:	f7ff fdfd 	bl	801713c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017542:	3c01      	subs	r4, #1
 8017544:	b118      	cbz	r0, 801754e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8017546:	b2a1      	uxth	r1, r4
 8017548:	9801      	ldr	r0, [sp, #4]
 801754a:	f7ff ffbd 	bl	80174c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801754e:	3d08      	subs	r5, #8
 8017550:	e7f2      	b.n	8017538 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8017552:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8017556:	f10a 33ff 	add.w	r3, sl, #4294967295
 801755a:	f8cd a010 	str.w	sl, [sp, #16]
 801755e:	9302      	str	r3, [sp, #8]
 8017560:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017564:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8017568:	9306      	str	r3, [sp, #24]
 801756a:	445c      	add	r4, fp
 801756c:	2500      	movs	r5, #0
 801756e:	4626      	mov	r6, r4
 8017570:	f8cd a014 	str.w	sl, [sp, #20]
 8017574:	462f      	mov	r7, r5
 8017576:	9b05      	ldr	r3, [sp, #20]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d073      	beq.n	8017664 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 801757c:	9903      	ldr	r1, [sp, #12]
 801757e:	4630      	mov	r0, r6
 8017580:	f7ff fd6a 	bl	8017058 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017584:	b350      	cbz	r0, 80175dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8017586:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801758a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801758e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8017592:	45e6      	cmp	lr, ip
 8017594:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8017598:	db33      	blt.n	8017602 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 801759a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801759e:	88b3      	ldrh	r3, [r6, #4]
 80175a0:	4472      	add	r2, lr
 80175a2:	4463      	add	r3, ip
 80175a4:	b212      	sxth	r2, r2
 80175a6:	b21b      	sxth	r3, r3
 80175a8:	429a      	cmp	r2, r3
 80175aa:	dc2a      	bgt.n	8017602 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 80175ac:	fa1f f289 	uxth.w	r2, r9
 80175b0:	88f3      	ldrh	r3, [r6, #6]
 80175b2:	45c8      	cmp	r8, r9
 80175b4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80175b8:	4413      	add	r3, r2
 80175ba:	fa1f fc88 	uxth.w	ip, r8
 80175be:	b29b      	uxth	r3, r3
 80175c0:	fa0f fe83 	sxth.w	lr, r3
 80175c4:	db0f      	blt.n	80175e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 80175c6:	eba3 030c 	sub.w	r3, r3, ip
 80175ca:	1ac9      	subs	r1, r1, r3
 80175cc:	b209      	sxth	r1, r1
 80175ce:	2900      	cmp	r1, #0
 80175d0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80175d4:	dd12      	ble.n	80175fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80175d6:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 80175da:	4605      	mov	r5, r0
 80175dc:	9b05      	ldr	r3, [sp, #20]
 80175de:	3e08      	subs	r6, #8
 80175e0:	3b01      	subs	r3, #1
 80175e2:	9305      	str	r3, [sp, #20]
 80175e4:	e7c7      	b.n	8017576 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 80175e6:	4461      	add	r1, ip
 80175e8:	b209      	sxth	r1, r1
 80175ea:	4571      	cmp	r1, lr
 80175ec:	dc38      	bgt.n	8017660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80175ee:	eba2 020c 	sub.w	r2, r2, ip
 80175f2:	b212      	sxth	r2, r2
 80175f4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80175f8:	2a00      	cmp	r2, #0
 80175fa:	dcee      	bgt.n	80175da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80175fc:	b00f      	add	sp, #60	@ 0x3c
 80175fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017602:	45c8      	cmp	r8, r9
 8017604:	db2c      	blt.n	8017660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8017606:	88f3      	ldrh	r3, [r6, #6]
 8017608:	4499      	add	r9, r3
 801760a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801760e:	4498      	add	r8, r3
 8017610:	fa0f f989 	sxth.w	r9, r9
 8017614:	fa0f f888 	sxth.w	r8, r8
 8017618:	45c1      	cmp	r9, r8
 801761a:	db21      	blt.n	8017660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 801761c:	fa1f f28c 	uxth.w	r2, ip
 8017620:	88b3      	ldrh	r3, [r6, #4]
 8017622:	45e6      	cmp	lr, ip
 8017624:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8017628:	4413      	add	r3, r2
 801762a:	fa1f f88e 	uxth.w	r8, lr
 801762e:	b29b      	uxth	r3, r3
 8017630:	fa0f f983 	sxth.w	r9, r3
 8017634:	db0a      	blt.n	801764c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 8017636:	eba3 0308 	sub.w	r3, r3, r8
 801763a:	1ac9      	subs	r1, r1, r3
 801763c:	b209      	sxth	r1, r1
 801763e:	2900      	cmp	r1, #0
 8017640:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8017644:	ddda      	ble.n	80175fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8017646:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801764a:	e7c6      	b.n	80175da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801764c:	4441      	add	r1, r8
 801764e:	b209      	sxth	r1, r1
 8017650:	4549      	cmp	r1, r9
 8017652:	dc05      	bgt.n	8017660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8017654:	eba2 0208 	sub.w	r2, r2, r8
 8017658:	b212      	sxth	r2, r2
 801765a:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801765e:	e7cb      	b.n	80175f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8017660:	4607      	mov	r7, r0
 8017662:	e7bb      	b.n	80175dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8017664:	2d00      	cmp	r5, #0
 8017666:	d181      	bne.n	801756c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8017668:	2f00      	cmp	r7, #0
 801766a:	f000 81df 	beq.w	8017a2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801766e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8017672:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8017676:	b2b3      	uxth	r3, r6
 8017678:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801767c:	9305      	str	r3, [sp, #20]
 801767e:	9a05      	ldr	r2, [sp, #20]
 8017680:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8017684:	4413      	add	r3, r2
 8017686:	b2ba      	uxth	r2, r7
 8017688:	4492      	add	sl, r2
 801768a:	b29b      	uxth	r3, r3
 801768c:	fa1f fa8a 	uxth.w	sl, sl
 8017690:	fa0f f883 	sxth.w	r8, r3
 8017694:	fa0f f98a 	sxth.w	r9, sl
 8017698:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801769c:	9b04      	ldr	r3, [sp, #16]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d054      	beq.n	801774c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 80176a2:	9903      	ldr	r1, [sp, #12]
 80176a4:	4620      	mov	r0, r4
 80176a6:	f7ff fcd7 	bl	8017058 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80176aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80176ae:	b1c0      	cbz	r0, 80176e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80176b0:	f9b4 e000 	ldrsh.w	lr, [r4]
 80176b4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80176b8:	4576      	cmp	r6, lr
 80176ba:	dc22      	bgt.n	8017702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 80176bc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80176c0:	44f4      	add	ip, lr
 80176c2:	fa0f fc8c 	sxth.w	ip, ip
 80176c6:	45e0      	cmp	r8, ip
 80176c8:	db1b      	blt.n	8017702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 80176ca:	428f      	cmp	r7, r1
 80176cc:	fa1f fc81 	uxth.w	ip, r1
 80176d0:	88e1      	ldrh	r1, [r4, #6]
 80176d2:	dc0d      	bgt.n	80176f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 80176d4:	ebaa 0c0c 	sub.w	ip, sl, ip
 80176d8:	f8a4 9002 	strh.w	r9, [r4, #2]
 80176dc:	eba1 010c 	sub.w	r1, r1, ip
 80176e0:	80e1      	strh	r1, [r4, #6]
 80176e2:	4628      	mov	r0, r5
 80176e4:	9904      	ldr	r1, [sp, #16]
 80176e6:	3c08      	subs	r4, #8
 80176e8:	4605      	mov	r5, r0
 80176ea:	3901      	subs	r1, #1
 80176ec:	9104      	str	r1, [sp, #16]
 80176ee:	e7d3      	b.n	8017698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 80176f0:	4461      	add	r1, ip
 80176f2:	b209      	sxth	r1, r1
 80176f4:	4549      	cmp	r1, r9
 80176f6:	dcf5      	bgt.n	80176e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80176f8:	eba2 0c0c 	sub.w	ip, r2, ip
 80176fc:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017700:	e7ef      	b.n	80176e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8017702:	428f      	cmp	r7, r1
 8017704:	dcee      	bgt.n	80176e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8017706:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801770a:	4461      	add	r1, ip
 801770c:	b209      	sxth	r1, r1
 801770e:	4589      	cmp	r9, r1
 8017710:	dbe8      	blt.n	80176e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8017712:	4576      	cmp	r6, lr
 8017714:	fa1f fc8e 	uxth.w	ip, lr
 8017718:	88a1      	ldrh	r1, [r4, #4]
 801771a:	dc07      	bgt.n	801772c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 801771c:	eba3 0c0c 	sub.w	ip, r3, ip
 8017720:	f8a4 8000 	strh.w	r8, [r4]
 8017724:	eba1 010c 	sub.w	r1, r1, ip
 8017728:	80a1      	strh	r1, [r4, #4]
 801772a:	e7da      	b.n	80176e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801772c:	4461      	add	r1, ip
 801772e:	b209      	sxth	r1, r1
 8017730:	4588      	cmp	r8, r1
 8017732:	dbd7      	blt.n	80176e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8017734:	9905      	ldr	r1, [sp, #20]
 8017736:	eba1 0c0c 	sub.w	ip, r1, ip
 801773a:	f8a4 c004 	strh.w	ip, [r4, #4]
 801773e:	e7d0      	b.n	80176e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8017740:	240065f6 	.word	0x240065f6
 8017744:	240065f4 	.word	0x240065f4
 8017748:	24006600 	.word	0x24006600
 801774c:	2d00      	cmp	r5, #0
 801774e:	f000 816d 	beq.w	8017a2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017752:	9b06      	ldr	r3, [sp, #24]
 8017754:	445b      	add	r3, fp
 8017756:	461c      	mov	r4, r3
 8017758:	9b02      	ldr	r3, [sp, #8]
 801775a:	3301      	adds	r3, #1
 801775c:	f000 8166 	beq.w	8017a2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017760:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8017764:	9803      	ldr	r0, [sp, #12]
 8017766:	4629      	mov	r1, r5
 8017768:	f7ff fce8 	bl	801713c <_ZNK8touchgfx4Rect8includesERKS0_>
 801776c:	b120      	cbz	r0, 8017778 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 801776e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017772:	9801      	ldr	r0, [sp, #4]
 8017774:	f7ff fea8 	bl	80174c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017778:	9903      	ldr	r1, [sp, #12]
 801777a:	4628      	mov	r0, r5
 801777c:	f7ff fc6c 	bl	8017058 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017780:	2800      	cmp	r0, #0
 8017782:	f000 809c 	beq.w	80178be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8017786:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801778a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801778e:	fa1f f189 	uxth.w	r1, r9
 8017792:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8017796:	9309      	str	r3, [sp, #36]	@ 0x24
 8017798:	eb01 0c03 	add.w	ip, r1, r3
 801779c:	b283      	uxth	r3, r0
 801779e:	4548      	cmp	r0, r9
 80177a0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 80177a4:	fa1f fa8c 	uxth.w	sl, ip
 80177a8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80177ac:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 80177b0:	eb03 050c 	add.w	r5, r3, ip
 80177b4:	b2ad      	uxth	r5, r5
 80177b6:	9505      	str	r5, [sp, #20]
 80177b8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80177bc:	9504      	str	r5, [sp, #16]
 80177be:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 80177c2:	f340 8099 	ble.w	80178f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 80177c6:	1a5b      	subs	r3, r3, r1
 80177c8:	4596      	cmp	lr, r2
 80177ca:	fa0f f08a 	sxth.w	r0, sl
 80177ce:	b29b      	uxth	r3, r3
 80177d0:	b21e      	sxth	r6, r3
 80177d2:	dd2e      	ble.n	8017832 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 80177d4:	9f02      	ldr	r7, [sp, #8]
 80177d6:	fa1f fe8e 	uxth.w	lr, lr
 80177da:	b292      	uxth	r2, r2
 80177dc:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 80177e0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80177e4:	9f04      	ldr	r7, [sp, #16]
 80177e6:	ebae 0102 	sub.w	r1, lr, r2
 80177ea:	44a6      	add	lr, r4
 80177ec:	1a3f      	subs	r7, r7, r0
 80177ee:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 80177f2:	b289      	uxth	r1, r1
 80177f4:	4402      	add	r2, r0
 80177f6:	fa0f fe8e 	sxth.w	lr, lr
 80177fa:	b20d      	sxth	r5, r1
 80177fc:	b212      	sxth	r2, r2
 80177fe:	436f      	muls	r7, r5
 8017800:	ebae 0202 	sub.w	r2, lr, r2
 8017804:	4372      	muls	r2, r6
 8017806:	4297      	cmp	r7, r2
 8017808:	db09      	blt.n	801781e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 801780a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801780e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8017812:	449c      	add	ip, r3
 8017814:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017818:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801781c:	e684      	b.n	8017528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801781e:	4421      	add	r1, r4
 8017820:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8017824:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8017828:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801782c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017830:	e67a      	b.n	8017528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8017832:	9f04      	ldr	r7, [sp, #16]
 8017834:	42b8      	cmp	r0, r7
 8017836:	da27      	bge.n	8017888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8017838:	9902      	ldr	r1, [sp, #8]
 801783a:	1a3f      	subs	r7, r7, r0
 801783c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8017840:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8017844:	eb05 010e 	add.w	r1, r5, lr
 8017848:	fa1f f881 	uxth.w	r8, r1
 801784c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8017850:	4411      	add	r1, r2
 8017852:	fa0f f988 	sxth.w	r9, r8
 8017856:	eba2 020e 	sub.w	r2, r2, lr
 801785a:	eba1 0108 	sub.w	r1, r1, r8
 801785e:	4372      	muls	r2, r6
 8017860:	b289      	uxth	r1, r1
 8017862:	fa0f f881 	sxth.w	r8, r1
 8017866:	fb08 f707 	mul.w	r7, r8, r7
 801786a:	42ba      	cmp	r2, r7
 801786c:	dc06      	bgt.n	801787c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 801786e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8017872:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8017876:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801787a:	e7ca      	b.n	8017812 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801787c:	4429      	add	r1, r5
 801787e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8017882:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017886:	e64f      	b.n	8017528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8017888:	9805      	ldr	r0, [sp, #20]
 801788a:	2d06      	cmp	r5, #6
 801788c:	ebaa 0000 	sub.w	r0, sl, r0
 8017890:	b280      	uxth	r0, r0
 8017892:	fa0f fe80 	sxth.w	lr, r0
 8017896:	d817      	bhi.n	80178c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8017898:	9b04      	ldr	r3, [sp, #16]
 801789a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801789e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80178a2:	1c6b      	adds	r3, r5, #1
 80178a4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 80178a8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80178ac:	9b01      	ldr	r3, [sp, #4]
 80178ae:	9801      	ldr	r0, [sp, #4]
 80178b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80178b4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80178b8:	805a      	strh	r2, [r3, #2]
 80178ba:	809e      	strh	r6, [r3, #4]
 80178bc:	80d9      	strh	r1, [r3, #6]
 80178be:	9b02      	ldr	r3, [sp, #8]
 80178c0:	3c08      	subs	r4, #8
 80178c2:	3b01      	subs	r3, #1
 80178c4:	9302      	str	r3, [sp, #8]
 80178c6:	e747      	b.n	8017758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 80178c8:	9a02      	ldr	r2, [sp, #8]
 80178ca:	45b6      	cmp	lr, r6
 80178cc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80178d0:	db0d      	blt.n	80178ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 80178d2:	449c      	add	ip, r3
 80178d4:	445a      	add	r2, fp
 80178d6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80178da:	fa1f fc8c 	uxth.w	ip, ip
 80178de:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 80178e2:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80178e6:	448c      	add	ip, r1
 80178e8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 80178ec:	e61c      	b.n	8017528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80178ee:	445a      	add	r2, fp
 80178f0:	4484      	add	ip, r0
 80178f2:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 80178f6:	e78f      	b.n	8017818 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80178f8:	fa1f f18e 	uxth.w	r1, lr
 80178fc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8017900:	b293      	uxth	r3, r2
 8017902:	4596      	cmp	lr, r2
 8017904:	eb01 0806 	add.w	r8, r1, r6
 8017908:	9306      	str	r3, [sp, #24]
 801790a:	fa1f f888 	uxth.w	r8, r8
 801790e:	9f06      	ldr	r7, [sp, #24]
 8017910:	fa0f f388 	sxth.w	r3, r8
 8017914:	9307      	str	r3, [sp, #28]
 8017916:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801791a:	443b      	add	r3, r7
 801791c:	b29b      	uxth	r3, r3
 801791e:	9308      	str	r3, [sp, #32]
 8017920:	da24      	bge.n	801796c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8017922:	9905      	ldr	r1, [sp, #20]
 8017924:	eba3 0308 	sub.w	r3, r3, r8
 8017928:	eba2 020e 	sub.w	r2, r2, lr
 801792c:	eba9 0000 	sub.w	r0, r9, r0
 8017930:	ebaa 0401 	sub.w	r4, sl, r1
 8017934:	b29b      	uxth	r3, r3
 8017936:	b2a4      	uxth	r4, r4
 8017938:	b219      	sxth	r1, r3
 801793a:	b225      	sxth	r5, r4
 801793c:	4348      	muls	r0, r1
 801793e:	436a      	muls	r2, r5
 8017940:	4282      	cmp	r2, r0
 8017942:	9a02      	ldr	r2, [sp, #8]
 8017944:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017948:	445a      	add	r2, fp
 801794a:	dc06      	bgt.n	801795a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801794c:	9b07      	ldr	r3, [sp, #28]
 801794e:	44a4      	add	ip, r4
 8017950:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8017954:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8017958:	e75e      	b.n	8017818 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 801795a:	9904      	ldr	r1, [sp, #16]
 801795c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8017960:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8017964:	4433      	add	r3, r6
 8017966:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801796a:	e5dd      	b.n	8017528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801796c:	9f06      	ldr	r7, [sp, #24]
 801796e:	9b04      	ldr	r3, [sp, #16]
 8017970:	1bc9      	subs	r1, r1, r7
 8017972:	fa0f f78a 	sxth.w	r7, sl
 8017976:	b289      	uxth	r1, r1
 8017978:	429f      	cmp	r7, r3
 801797a:	fa0f fe81 	sxth.w	lr, r1
 801797e:	dd23      	ble.n	80179c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8017980:	9a05      	ldr	r2, [sp, #20]
 8017982:	eba9 0000 	sub.w	r0, r9, r0
 8017986:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801798a:	ebaa 0202 	sub.w	r2, sl, r2
 801798e:	9d07      	ldr	r5, [sp, #28]
 8017990:	fb0e f000 	mul.w	r0, lr, r0
 8017994:	b292      	uxth	r2, r2
 8017996:	eba5 0a03 	sub.w	sl, r5, r3
 801799a:	9b02      	ldr	r3, [sp, #8]
 801799c:	b214      	sxth	r4, r2
 801799e:	00db      	lsls	r3, r3, #3
 80179a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80179a4:	445b      	add	r3, fp
 80179a6:	4550      	cmp	r0, sl
 80179a8:	db03      	blt.n	80179b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 80179aa:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 80179ae:	4494      	add	ip, r2
 80179b0:	e732      	b.n	8017818 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80179b2:	9a04      	ldr	r2, [sp, #16]
 80179b4:	4431      	add	r1, r6
 80179b6:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 80179ba:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80179be:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80179c2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80179c6:	e75c      	b.n	8017882 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 80179c8:	9b08      	ldr	r3, [sp, #32]
 80179ca:	2d06      	cmp	r5, #6
 80179cc:	eba3 0308 	sub.w	r3, r3, r8
 80179d0:	b29b      	uxth	r3, r3
 80179d2:	b218      	sxth	r0, r3
 80179d4:	d813      	bhi.n	80179fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 80179d6:	9b07      	ldr	r3, [sp, #28]
 80179d8:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 80179dc:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 80179e0:	1c6b      	adds	r3, r5, #1
 80179e2:	9901      	ldr	r1, [sp, #4]
 80179e4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80179e8:	9b01      	ldr	r3, [sp, #4]
 80179ea:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80179ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80179f2:	805a      	strh	r2, [r3, #2]
 80179f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80179f6:	f8a3 e006 	strh.w	lr, [r3, #6]
 80179fa:	809a      	strh	r2, [r3, #4]
 80179fc:	e75f      	b.n	80178be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 80179fe:	9c02      	ldr	r4, [sp, #8]
 8017a00:	4570      	cmp	r0, lr
 8017a02:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8017a06:	db0d      	blt.n	8017a24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8017a08:	4431      	add	r1, r6
 8017a0a:	9b06      	ldr	r3, [sp, #24]
 8017a0c:	445c      	add	r4, fp
 8017a0e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8017a12:	b289      	uxth	r1, r1
 8017a14:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8017a18:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017a1c:	4419      	add	r1, r3
 8017a1e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8017a22:	e581      	b.n	8017528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8017a24:	445c      	add	r4, fp
 8017a26:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8017a2a:	e79b      	b.n	8017964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8017a2c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8017a30:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8017a34:	1e65      	subs	r5, r4, #1
 8017a36:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8017a3a:	b2ad      	uxth	r5, r5
 8017a3c:	42b5      	cmp	r5, r6
 8017a3e:	d044      	beq.n	8017aca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 8017a40:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8017a44:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8017a48:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8017a4c:	4282      	cmp	r2, r0
 8017a4e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8017a52:	d11f      	bne.n	8017a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8017a54:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8017a58:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8017a5c:	459c      	cmp	ip, r3
 8017a5e:	d119      	bne.n	8017a94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8017a60:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8017a64:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8017a68:	19d8      	adds	r0, r3, r7
 8017a6a:	b200      	sxth	r0, r0
 8017a6c:	4288      	cmp	r0, r1
 8017a6e:	d109      	bne.n	8017a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8017a70:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8017a74:	4413      	add	r3, r2
 8017a76:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8017a7a:	4629      	mov	r1, r5
 8017a7c:	9801      	ldr	r0, [sp, #4]
 8017a7e:	f7ff fd23 	bl	80174c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017a82:	e003      	b.n	8017a8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8017a84:	4411      	add	r1, r2
 8017a86:	b209      	sxth	r1, r1
 8017a88:	42b9      	cmp	r1, r7
 8017a8a:	d0f3      	beq.n	8017a74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8017a8c:	3d01      	subs	r5, #1
 8017a8e:	3c08      	subs	r4, #8
 8017a90:	b2ad      	uxth	r5, r5
 8017a92:	e7d3      	b.n	8017a3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8017a94:	42b9      	cmp	r1, r7
 8017a96:	d1f9      	bne.n	8017a8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8017a98:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8017a9c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017aa0:	4299      	cmp	r1, r3
 8017aa2:	d1f3      	bne.n	8017a8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8017aa4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8017aa8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8017aac:	181f      	adds	r7, r3, r0
 8017aae:	b23f      	sxth	r7, r7
 8017ab0:	42ba      	cmp	r2, r7
 8017ab2:	d105      	bne.n	8017ac0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 8017ab4:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8017ab8:	440b      	add	r3, r1
 8017aba:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017abe:	e7dc      	b.n	8017a7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 8017ac0:	440a      	add	r2, r1
 8017ac2:	b212      	sxth	r2, r2
 8017ac4:	4290      	cmp	r0, r2
 8017ac6:	d1e1      	bne.n	8017a8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8017ac8:	e7f6      	b.n	8017ab8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 8017aca:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8017ace:	2e07      	cmp	r6, #7
 8017ad0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8017ad4:	d812      	bhi.n	8017afc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 8017ad6:	1c75      	adds	r5, r6, #1
 8017ad8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8017adc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8017ae0:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8017ae4:	9d01      	ldr	r5, [sp, #4]
 8017ae6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8017aea:	442c      	add	r4, r5
 8017aec:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8017af0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8017af4:	8061      	strh	r1, [r4, #2]
 8017af6:	80a2      	strh	r2, [r4, #4]
 8017af8:	80e3      	strh	r3, [r4, #6]
 8017afa:	e57f      	b.n	80175fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8017afc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8017b00:	3e01      	subs	r6, #1
 8017b02:	445c      	add	r4, fp
 8017b04:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8017b08:	f04f 37ff 	mov.w	r7, #4294967295
 8017b0c:	2500      	movs	r5, #0
 8017b0e:	9305      	str	r3, [sp, #20]
 8017b10:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017b14:	1e72      	subs	r2, r6, #1
 8017b16:	9302      	str	r3, [sp, #8]
 8017b18:	4691      	mov	r9, r2
 8017b1a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8017b1e:	9304      	str	r3, [sp, #16]
 8017b20:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8017b24:	f1b9 3fff 	cmp.w	r9, #4294967295
 8017b28:	6818      	ldr	r0, [r3, #0]
 8017b2a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017b2e:	9207      	str	r2, [sp, #28]
 8017b30:	bf16      	itet	ne
 8017b32:	9905      	ldrne	r1, [sp, #20]
 8017b34:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8017b38:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8017b3c:	9306      	str	r3, [sp, #24]
 8017b3e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8017b42:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8017b46:	fb18 f801 	smulbb	r8, r8, r1
 8017b4a:	6859      	ldr	r1, [r3, #4]
 8017b4c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017b50:	4671      	mov	r1, lr
 8017b52:	a80c      	add	r0, sp, #48	@ 0x30
 8017b54:	f7ff fb18 	bl	8017188 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017b58:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8017b5c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8017b60:	f04f 0c08 	mov.w	ip, #8
 8017b64:	9b04      	ldr	r3, [sp, #16]
 8017b66:	9a02      	ldr	r2, [sp, #8]
 8017b68:	fb10 f001 	smulbb	r0, r0, r1
 8017b6c:	fb02 8803 	mla	r8, r2, r3, r8
 8017b70:	eba0 0108 	sub.w	r1, r0, r8
 8017b74:	fb90 f0fc 	sdiv	r0, r0, ip
 8017b78:	4288      	cmp	r0, r1
 8017b7a:	dc20      	bgt.n	8017bbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8017b7c:	4551      	cmp	r1, sl
 8017b7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017b82:	da03      	bge.n	8017b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69c>
 8017b84:	b1d9      	cbz	r1, 8017bbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8017b86:	468a      	mov	sl, r1
 8017b88:	464f      	mov	r7, r9
 8017b8a:	4635      	mov	r5, r6
 8017b8c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017b90:	f119 0f02 	cmn.w	r9, #2
 8017b94:	d1c6      	bne.n	8017b24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8017b96:	4616      	mov	r6, r2
 8017b98:	3201      	adds	r2, #1
 8017b9a:	f1a4 0408 	sub.w	r4, r4, #8
 8017b9e:	d1b7      	bne.n	8017b10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8017ba0:	9b01      	ldr	r3, [sp, #4]
 8017ba2:	b2ac      	uxth	r4, r5
 8017ba4:	00ed      	lsls	r5, r5, #3
 8017ba6:	1958      	adds	r0, r3, r5
 8017ba8:	1c7b      	adds	r3, r7, #1
 8017baa:	d10b      	bne.n	8017bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d4>
 8017bac:	4601      	mov	r1, r0
 8017bae:	9803      	ldr	r0, [sp, #12]
 8017bb0:	f7ff faea 	bl	8017188 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017bb4:	4621      	mov	r1, r4
 8017bb6:	9801      	ldr	r0, [sp, #4]
 8017bb8:	f7ff fc86 	bl	80174c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017bbc:	e4b4      	b.n	8017528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8017bbe:	464f      	mov	r7, r9
 8017bc0:	4635      	mov	r5, r6
 8017bc2:	e7ed      	b.n	8017ba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b0>
 8017bc4:	9b01      	ldr	r3, [sp, #4]
 8017bc6:	00ff      	lsls	r7, r7, #3
 8017bc8:	445d      	add	r5, fp
 8017bca:	19d9      	adds	r1, r3, r7
 8017bcc:	445f      	add	r7, fp
 8017bce:	f7ff fadb 	bl	8017188 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017bd2:	9b03      	ldr	r3, [sp, #12]
 8017bd4:	cb03      	ldmia	r3!, {r0, r1}
 8017bd6:	9b03      	ldr	r3, [sp, #12]
 8017bd8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8017bdc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8017be0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8017be4:	6869      	ldr	r1, [r5, #4]
 8017be6:	c303      	stmia	r3!, {r0, r1}
 8017be8:	e7e4      	b.n	8017bb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8017bea:	bf00      	nop

08017bec <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8017bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf0:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8017bf4:	b0a1      	sub	sp, #132	@ 0x84
 8017bf6:	4604      	mov	r4, r0
 8017bf8:	4630      	mov	r0, r6
 8017bfa:	f7fb f8f6 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8017bfe:	4605      	mov	r5, r0
 8017c00:	b948      	cbnz	r0, 8017c16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8017c02:	6823      	ldr	r3, [r4, #0]
 8017c04:	4620      	mov	r0, r4
 8017c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c08:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017c0c:	4798      	blx	r3
 8017c0e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8017c12:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8017c16:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d149      	bne.n	8017cb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 8017c1e:	4bb2      	ldr	r3, [pc, #712]	@ (8017ee8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 8017c26:	1ebb      	subs	r3, r7, #2
 8017c28:	425f      	negs	r7, r3
 8017c2a:	415f      	adcs	r7, r3
 8017c2c:	4baf      	ldr	r3, [pc, #700]	@ (8017eec <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d040      	beq.n	8017cb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8017c34:	4dae      	ldr	r5, [pc, #696]	@ (8017ef0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 8017c36:	4628      	mov	r0, r5
 8017c38:	f7fb f8d7 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c3c:	4606      	mov	r6, r0
 8017c3e:	2800      	cmp	r0, #0
 8017c40:	d139      	bne.n	8017cb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8017c42:	4628      	mov	r0, r5
 8017c44:	f7ff f922 	bl	8016e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017c48:	6823      	ldr	r3, [r4, #0]
 8017c4a:	6829      	ldr	r1, [r5, #0]
 8017c4c:	4620      	mov	r0, r4
 8017c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017c50:	686a      	ldr	r2, [r5, #4]
 8017c52:	4798      	blx	r3
 8017c54:	802e      	strh	r6, [r5, #0]
 8017c56:	806e      	strh	r6, [r5, #2]
 8017c58:	80ae      	strh	r6, [r5, #4]
 8017c5a:	80ee      	strh	r6, [r5, #6]
 8017c5c:	af0f      	add	r7, sp, #60	@ 0x3c
 8017c5e:	4ea5      	ldr	r6, [pc, #660]	@ (8017ef4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 8017c60:	4638      	mov	r0, r7
 8017c62:	f7ff fbd6 	bl	8017412 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017c66:	8835      	ldrh	r5, [r6, #0]
 8017c68:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 8017c6c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8017c70:	462b      	mov	r3, r5
 8017c72:	4563      	cmp	r3, ip
 8017c74:	d224      	bcs.n	8017cc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8017c76:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8017c7a:	2907      	cmp	r1, #7
 8017c7c:	d816      	bhi.n	8017cac <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8017c7e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8017c82:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8017c86:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8017c8a:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 8017c8e:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 8017c92:	1c4a      	adds	r2, r1, #1
 8017c94:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 8017c98:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 8017c9c:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 8017ca0:	f8a2 a002 	strh.w	sl, [r2, #2]
 8017ca4:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017ca8:	f8a2 e006 	strh.w	lr, [r2, #6]
 8017cac:	3301      	adds	r3, #1
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	e7df      	b.n	8017c72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8017cb2:	2701      	movs	r7, #1
 8017cb4:	e7ba      	b.n	8017c2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 8017cb6:	2f00      	cmp	r7, #0
 8017cb8:	d1d0      	bne.n	8017c5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 8017cba:	b021      	add	sp, #132	@ 0x84
 8017cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8017cc4:	42ab      	cmp	r3, r5
 8017cc6:	d90c      	bls.n	8017ce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 8017cc8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8017ccc:	6822      	ldr	r2, [r4, #0]
 8017cce:	3501      	adds	r5, #1
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8017cd4:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8017cd8:	b2ad      	uxth	r5, r5
 8017cda:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8017cde:	47b8      	blx	r7
 8017ce0:	e7ee      	b.n	8017cc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8017ce2:	4d81      	ldr	r5, [pc, #516]	@ (8017ee8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8017ce4:	6828      	ldr	r0, [r5, #0]
 8017ce6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8017cea:	2b01      	cmp	r3, #1
 8017cec:	f040 813d 	bne.w	8017f6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 8017cf0:	4a81      	ldr	r2, [pc, #516]	@ (8017ef8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 8017cf2:	8833      	ldrh	r3, [r6, #0]
 8017cf4:	7812      	ldrb	r2, [r2, #0]
 8017cf6:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 8017cfa:	2a01      	cmp	r2, #1
 8017cfc:	d014      	beq.n	8017d28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8017cfe:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8017d02:	f04f 0900 	mov.w	r9, #0
 8017d06:	32ae      	adds	r2, #174	@ 0xae
 8017d08:	4283      	cmp	r3, r0
 8017d0a:	f102 0208 	add.w	r2, r2, #8
 8017d0e:	f280 8083 	bge.w	8017e18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8017d12:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 8017d16:	3301      	adds	r3, #1
 8017d18:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 8017d1c:	4439      	add	r1, r7
 8017d1e:	b209      	sxth	r1, r1
 8017d20:	4589      	cmp	r9, r1
 8017d22:	bfb8      	it	lt
 8017d24:	4689      	movlt	r9, r1
 8017d26:	e7ef      	b.n	8017d08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 8017d28:	4f74      	ldr	r7, [pc, #464]	@ (8017efc <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 8017d2a:	883a      	ldrh	r2, [r7, #0]
 8017d2c:	4693      	mov	fp, r2
 8017d2e:	4283      	cmp	r3, r0
 8017d30:	da08      	bge.n	8017d44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 8017d32:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8017d36:	3301      	adds	r3, #1
 8017d38:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 8017d3c:	458b      	cmp	fp, r1
 8017d3e:	bfa8      	it	ge
 8017d40:	468b      	movge	fp, r1
 8017d42:	e7f4      	b.n	8017d2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 8017d44:	2a0f      	cmp	r2, #15
 8017d46:	f04f 0300 	mov.w	r3, #0
 8017d4a:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 8017f00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 8017d4e:	bf8c      	ite	hi
 8017d50:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 8017d54:	f04f 0801 	movls.w	r8, #1
 8017d58:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8017d5c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017d60:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8017d64:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017d68:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8017d6c:	6828      	ldr	r0, [r5, #0]
 8017d6e:	455b      	cmp	r3, fp
 8017d70:	f340 80c8 	ble.w	8017f04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017d74:	6803      	ldr	r3, [r0, #0]
 8017d76:	f8b7 a000 	ldrh.w	sl, [r7]
 8017d7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017d7e:	4798      	blx	r3
 8017d80:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8017d84:	ebaa 0000 	sub.w	r0, sl, r0
 8017d88:	682b      	ldr	r3, [r5, #0]
 8017d8a:	ebac 0e08 	sub.w	lr, ip, r8
 8017d8e:	b280      	uxth	r0, r0
 8017d90:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8017d94:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8017d98:	4570      	cmp	r0, lr
 8017d9a:	dd05      	ble.n	8017da8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8017d9c:	4558      	cmp	r0, fp
 8017d9e:	dd03      	ble.n	8017da8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8017da0:	b901      	cbnz	r1, 8017da4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8017da2:	b392      	cbz	r2, 8017e0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 8017da4:	4658      	mov	r0, fp
 8017da6:	e006      	b.n	8017db6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 8017da8:	2900      	cmp	r1, #0
 8017daa:	d1fb      	bne.n	8017da4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8017dac:	2a00      	cmp	r2, #0
 8017dae:	d1f9      	bne.n	8017da4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8017db0:	4558      	cmp	r0, fp
 8017db2:	bfb8      	it	lt
 8017db4:	4658      	movlt	r0, fp
 8017db6:	f9b9 3000 	ldrsh.w	r3, [r9]
 8017dba:	2200      	movs	r2, #0
 8017dbc:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8017dc0:	ebac 0000 	sub.w	r0, ip, r0
 8017dc4:	f8b6 a000 	ldrh.w	sl, [r6]
 8017dc8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8017dcc:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8017dd0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017dd4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017dd8:	4553      	cmp	r3, sl
 8017dda:	ddc5      	ble.n	8017d68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8017ddc:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8017de0:	ab0d      	add	r3, sp, #52	@ 0x34
 8017de2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017de6:	6851      	ldr	r1, [r2, #4]
 8017de8:	c303      	stmia	r3!, {r0, r1}
 8017dea:	a80d      	add	r0, sp, #52	@ 0x34
 8017dec:	a90b      	add	r1, sp, #44	@ 0x2c
 8017dee:	f7fa ffb9 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8017df2:	a80d      	add	r0, sp, #52	@ 0x34
 8017df4:	f7fa fff9 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8017df8:	b920      	cbnz	r0, 8017e04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 8017dfa:	6823      	ldr	r3, [r4, #0]
 8017dfc:	a90d      	add	r1, sp, #52	@ 0x34
 8017dfe:	4620      	mov	r0, r4
 8017e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017e02:	4798      	blx	r3
 8017e04:	f10a 0a01 	add.w	sl, sl, #1
 8017e08:	e7e4      	b.n	8017dd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 8017e0a:	681a      	ldr	r2, [r3, #0]
 8017e0c:	2101      	movs	r1, #1
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8017e14:	4790      	blx	r2
 8017e16:	e7a7      	b.n	8017d68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8017e18:	4b39      	ldr	r3, [pc, #228]	@ (8017f00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 8017e1a:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8017efc <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 8017e1e:	881f      	ldrh	r7, [r3, #0]
 8017e20:	2300      	movs	r3, #0
 8017e22:	2f0f      	cmp	r7, #15
 8017e24:	bf8c      	ite	hi
 8017e26:	08ff      	lsrhi	r7, r7, #3
 8017e28:	2701      	movls	r7, #1
 8017e2a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 8017e2e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8017e32:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8017e36:	6828      	ldr	r0, [r5, #0]
 8017e38:	4413      	add	r3, r2
 8017e3a:	b21b      	sxth	r3, r3
 8017e3c:	454b      	cmp	r3, r9
 8017e3e:	da61      	bge.n	8017f04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017e40:	6803      	ldr	r3, [r0, #0]
 8017e42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017e46:	4798      	blx	r3
 8017e48:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 8017e4c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8017e50:	682a      	ldr	r2, [r5, #0]
 8017e52:	4473      	add	r3, lr
 8017e54:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 8017e58:	b21b      	sxth	r3, r3
 8017e5a:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 8017e5e:	eb03 0e07 	add.w	lr, r3, r7
 8017e62:	4570      	cmp	r0, lr
 8017e64:	da0d      	bge.n	8017e82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8017e66:	4548      	cmp	r0, r9
 8017e68:	da0b      	bge.n	8017e82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8017e6a:	f1bc 0f00 	cmp.w	ip, #0
 8017e6e:	d138      	bne.n	8017ee2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8017e70:	2900      	cmp	r1, #0
 8017e72:	d136      	bne.n	8017ee2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8017e74:	6813      	ldr	r3, [r2, #0]
 8017e76:	2101      	movs	r1, #1
 8017e78:	4610      	mov	r0, r2
 8017e7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017e7e:	4798      	blx	r3
 8017e80:	e7d5      	b.n	8017e2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8017e82:	f1bc 0f00 	cmp.w	ip, #0
 8017e86:	d12c      	bne.n	8017ee2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8017e88:	bb59      	cbnz	r1, 8017ee2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8017e8a:	4548      	cmp	r0, r9
 8017e8c:	bfa8      	it	ge
 8017e8e:	4648      	movge	r0, r9
 8017e90:	f9b8 2000 	ldrsh.w	r2, [r8]
 8017e94:	2100      	movs	r1, #0
 8017e96:	1ac0      	subs	r0, r0, r3
 8017e98:	f8b6 a000 	ldrh.w	sl, [r6]
 8017e9c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8017ea0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017ea4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8017ea8:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8017eac:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017eb0:	4553      	cmp	r3, sl
 8017eb2:	ddbc      	ble.n	8017e2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8017eb4:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8017eb8:	ab0d      	add	r3, sp, #52	@ 0x34
 8017eba:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017ebe:	6851      	ldr	r1, [r2, #4]
 8017ec0:	c303      	stmia	r3!, {r0, r1}
 8017ec2:	a80d      	add	r0, sp, #52	@ 0x34
 8017ec4:	a90b      	add	r1, sp, #44	@ 0x2c
 8017ec6:	f7fa ff4d 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8017eca:	a80d      	add	r0, sp, #52	@ 0x34
 8017ecc:	f7fa ff8d 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ed0:	b920      	cbnz	r0, 8017edc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>
 8017ed2:	6823      	ldr	r3, [r4, #0]
 8017ed4:	a90d      	add	r1, sp, #52	@ 0x34
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017eda:	4798      	blx	r3
 8017edc:	f10a 0a01 	add.w	sl, sl, #1
 8017ee0:	e7e4      	b.n	8017eac <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c0>
 8017ee2:	4648      	mov	r0, r9
 8017ee4:	e7d4      	b.n	8017e90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a4>
 8017ee6:	bf00      	nop
 8017ee8:	24006600 	.word	0x24006600
 8017eec:	24006638 	.word	0x24006638
 8017ef0:	24006644 	.word	0x24006644
 8017ef4:	24000020 	.word	0x24000020
 8017ef8:	240065f8 	.word	0x240065f8
 8017efc:	240065f4 	.word	0x240065f4
 8017f00:	240065f6 	.word	0x240065f6
 8017f04:	6828      	ldr	r0, [r5, #0]
 8017f06:	6803      	ldr	r3, [r0, #0]
 8017f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f0a:	4798      	blx	r3
 8017f0c:	4ba4      	ldr	r3, [pc, #656]	@ (80181a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 8017f0e:	781b      	ldrb	r3, [r3, #0]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	f43f aed2 	beq.w	8017cba <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8017f16:	2300      	movs	r3, #0
 8017f18:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 8017f1c:	a80f      	add	r0, sp, #60	@ 0x3c
 8017f1e:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 8017f22:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8017f26:	4b9f      	ldr	r3, [pc, #636]	@ (80181a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 8017f28:	881b      	ldrh	r3, [r3, #0]
 8017f2a:	42b3      	cmp	r3, r6
 8017f2c:	f4bf aec5 	bcs.w	8017cba <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8017f30:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8017f34:	2907      	cmp	r1, #7
 8017f36:	d815      	bhi.n	8017f64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 8017f38:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8017f3c:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8017f40:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8017f44:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8017f48:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8017f4c:	1c4a      	adds	r2, r1, #1
 8017f4e:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8017f52:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 8017f56:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 8017f5a:	f8a2 e002 	strh.w	lr, [r2, #2]
 8017f5e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8017f62:	80d7      	strh	r7, [r2, #6]
 8017f64:	3301      	adds	r3, #1
 8017f66:	b29b      	uxth	r3, r3
 8017f68:	e7df      	b.n	8017f2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 8017f6a:	2b02      	cmp	r3, #2
 8017f6c:	f040 80ce 	bne.w	801810c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8017f70:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8017f74:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 8017f78:	9308      	str	r3, [sp, #32]
 8017f7a:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 8017f7e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017f82:	9307      	str	r3, [sp, #28]
 8017f84:	b2bf      	uxth	r7, r7
 8017f86:	6803      	ldr	r3, [r0, #0]
 8017f88:	fa0f f887 	sxth.w	r8, r7
 8017f8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017f90:	4798      	blx	r3
 8017f92:	4b85      	ldr	r3, [pc, #532]	@ (80181a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 8017f94:	4682      	mov	sl, r0
 8017f96:	2000      	movs	r0, #0
 8017f98:	881b      	ldrh	r3, [r3, #0]
 8017f9a:	9302      	str	r3, [sp, #8]
 8017f9c:	4b83      	ldr	r3, [pc, #524]	@ (80181ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 8017f9e:	881e      	ldrh	r6, [r3, #0]
 8017fa0:	4b83      	ldr	r3, [pc, #524]	@ (80181b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	2b01      	cmp	r3, #1
 8017fa6:	bf1e      	ittt	ne
 8017fa8:	9b02      	ldrne	r3, [sp, #8]
 8017faa:	9602      	strne	r6, [sp, #8]
 8017fac:	461e      	movne	r6, r3
 8017fae:	f7f7 ff39 	bl	800fe24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017fb2:	fb96 fbfb 	sdiv	fp, r6, fp
 8017fb6:	fb0b f808 	mul.w	r8, fp, r8
 8017fba:	45c2      	cmp	sl, r8
 8017fbc:	da0c      	bge.n	8017fd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 8017fbe:	6828      	ldr	r0, [r5, #0]
 8017fc0:	210a      	movs	r1, #10
 8017fc2:	6803      	ldr	r3, [r0, #0]
 8017fc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017fc8:	4798      	blx	r3
 8017fca:	6828      	ldr	r0, [r5, #0]
 8017fcc:	6803      	ldr	r3, [r0, #0]
 8017fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017fd2:	4798      	blx	r3
 8017fd4:	4682      	mov	sl, r0
 8017fd6:	e7f0      	b.n	8017fba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 8017fd8:	2000      	movs	r0, #0
 8017fda:	f04f 0800 	mov.w	r8, #0
 8017fde:	f7f7 ff3d 	bl	800fe5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017fe2:	fa1f f38b 	uxth.w	r3, fp
 8017fe6:	4645      	mov	r5, r8
 8017fe8:	fb17 f703 	smulbb	r7, r7, r3
 8017fec:	9304      	str	r3, [sp, #16]
 8017fee:	b2bb      	uxth	r3, r7
 8017ff0:	4f70      	ldr	r7, [pc, #448]	@ (80181b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 8017ff2:	9305      	str	r3, [sp, #20]
 8017ff4:	0973      	lsrs	r3, r6, #5
 8017ff6:	9306      	str	r3, [sp, #24]
 8017ff8:	42b5      	cmp	r5, r6
 8017ffa:	d087      	beq.n	8017f0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8017ffc:	6838      	ldr	r0, [r7, #0]
 8017ffe:	6803      	ldr	r3, [r0, #0]
 8018000:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018004:	4798      	blx	r3
 8018006:	4582      	cmp	sl, r0
 8018008:	4681      	mov	r9, r0
 801800a:	d907      	bls.n	801801c <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 801800c:	f1b8 0f00 	cmp.w	r8, #0
 8018010:	d007      	beq.n	8018022 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 8018012:	6838      	ldr	r0, [r7, #0]
 8018014:	6803      	ldr	r3, [r0, #0]
 8018016:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801801a:	e776      	b.n	8017f0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801801c:	f1b8 0f00 	cmp.w	r8, #0
 8018020:	d003      	beq.n	801802a <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 8018022:	454d      	cmp	r5, r9
 8018024:	d3f5      	bcc.n	8018012 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 8018026:	f04f 0801 	mov.w	r8, #1
 801802a:	9a04      	ldr	r2, [sp, #16]
 801802c:	fb95 f3fb 	sdiv	r3, r5, fp
 8018030:	9303      	str	r3, [sp, #12]
 8018032:	3301      	adds	r3, #1
 8018034:	fb13 f302 	smulbb	r3, r3, r2
 8018038:	b299      	uxth	r1, r3
 801803a:	f1b8 0f00 	cmp.w	r8, #0
 801803e:	d04d      	beq.n	80180dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f0>
 8018040:	eb09 030b 	add.w	r3, r9, fp
 8018044:	42b3      	cmp	r3, r6
 8018046:	bfa8      	it	ge
 8018048:	4633      	movge	r3, r6
 801804a:	b29b      	uxth	r3, r3
 801804c:	9807      	ldr	r0, [sp, #28]
 801804e:	428b      	cmp	r3, r1
 8018050:	bf94      	ite	ls
 8018052:	ebc5 0203 	rsbls	r2, r5, r3
 8018056:	ebc5 0201 	rsbhi	r2, r5, r1
 801805a:	4282      	cmp	r2, r0
 801805c:	bfa8      	it	ge
 801805e:	4602      	movge	r2, r0
 8018060:	9808      	ldr	r0, [sp, #32]
 8018062:	fa1f fa82 	uxth.w	sl, r2
 8018066:	4582      	cmp	sl, r0
 8018068:	d205      	bcs.n	8018076 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801806a:	fa15 f082 	uxtah	r0, r5, r2
 801806e:	4286      	cmp	r6, r0
 8018070:	d001      	beq.n	8018076 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8018072:	4299      	cmp	r1, r3
 8018074:	d23f      	bcs.n	80180f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x50a>
 8018076:	2001      	movs	r0, #1
 8018078:	9209      	str	r2, [sp, #36]	@ 0x24
 801807a:	f7f7 fed3 	bl	800fe24 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801807e:	6838      	ldr	r0, [r7, #0]
 8018080:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8018084:	6803      	ldr	r3, [r0, #0]
 8018086:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801808a:	4798      	blx	r3
 801808c:	4b48      	ldr	r3, [pc, #288]	@ (80181b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 801808e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018090:	2000      	movs	r0, #0
 8018092:	781b      	ldrb	r3, [r3, #0]
 8018094:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8018098:	b212      	sxth	r2, r2
 801809a:	2b01      	cmp	r3, #1
 801809c:	d122      	bne.n	80180e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f8>
 801809e:	1b73      	subs	r3, r6, r5
 80180a0:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 80180a4:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80180a8:	eba3 030a 	sub.w	r3, r3, sl
 80180ac:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 80180b0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80180b4:	6823      	ldr	r3, [r4, #0]
 80180b6:	a90d      	add	r1, sp, #52	@ 0x34
 80180b8:	4620      	mov	r0, r4
 80180ba:	4455      	add	r5, sl
 80180bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80180be:	4798      	blx	r3
 80180c0:	6838      	ldr	r0, [r7, #0]
 80180c2:	9b03      	ldr	r3, [sp, #12]
 80180c4:	b2ad      	uxth	r5, r5
 80180c6:	4259      	negs	r1, r3
 80180c8:	6803      	ldr	r3, [r0, #0]
 80180ca:	b209      	sxth	r1, r1
 80180cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80180d0:	4798      	blx	r3
 80180d2:	2001      	movs	r0, #1
 80180d4:	f7f7 fec2 	bl	800fe5c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80180d8:	46ca      	mov	sl, r9
 80180da:	e78d      	b.n	8017ff8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 80180dc:	9b05      	ldr	r3, [sp, #20]
 80180de:	eba9 0303 	sub.w	r3, r9, r3
 80180e2:	e7b2      	b.n	801804a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80180e4:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80180e8:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 80180ec:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 80180f0:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 80180f4:	e7de      	b.n	80180b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 80180f6:	6838      	ldr	r0, [r7, #0]
 80180f8:	6803      	ldr	r3, [r0, #0]
 80180fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180fc:	4798      	blx	r3
 80180fe:	6838      	ldr	r0, [r7, #0]
 8018100:	9906      	ldr	r1, [sp, #24]
 8018102:	6803      	ldr	r3, [r0, #0]
 8018104:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8018108:	4798      	blx	r3
 801810a:	e7e5      	b.n	80180d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ec>
 801810c:	2b03      	cmp	r3, #3
 801810e:	f040 8133 	bne.w	8018378 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78c>
 8018112:	4b27      	ldr	r3, [pc, #156]	@ (80181b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8018114:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8018118:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 801811c:	781b      	ldrb	r3, [r3, #0]
 801811e:	2b01      	cmp	r3, #1
 8018120:	f000 8095 	beq.w	801824e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8018124:	8832      	ldrh	r2, [r6, #0]
 8018126:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801812a:	3201      	adds	r2, #1
 801812c:	b292      	uxth	r2, r2
 801812e:	2900      	cmp	r1, #0
 8018130:	f43f aeec 	beq.w	8017f0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8018134:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 8018138:	4694      	mov	ip, r2
 801813a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801813e:	f04f 0800 	mov.w	r8, #0
 8018142:	441d      	add	r5, r3
 8018144:	b22d      	sxth	r5, r5
 8018146:	fa1f f38c 	uxth.w	r3, ip
 801814a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801814e:	4299      	cmp	r1, r3
 8018150:	f240 80bc 	bls.w	80182cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e0>
 8018154:	4427      	add	r7, r4
 8018156:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801815a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801815e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8018162:	4283      	cmp	r3, r0
 8018164:	f340 809e 	ble.w	80182a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b8>
 8018168:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 801816c:	46e0      	mov	r8, ip
 801816e:	4405      	add	r5, r0
 8018170:	b22d      	sxth	r5, r5
 8018172:	429d      	cmp	r5, r3
 8018174:	bfa8      	it	ge
 8018176:	461d      	movge	r5, r3
 8018178:	f10c 0c01 	add.w	ip, ip, #1
 801817c:	e7e3      	b.n	8018146 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55a>
 801817e:	d10a      	bne.n	8018196 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5aa>
 8018180:	4562      	cmp	r2, ip
 8018182:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 8018186:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801818a:	bfb8      	it	lt
 801818c:	4662      	movlt	r2, ip
 801818e:	4288      	cmp	r0, r1
 8018190:	bfb8      	it	lt
 8018192:	4698      	movlt	r8, r3
 8018194:	e084      	b.n	80182a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 8018196:	428a      	cmp	r2, r1
 8018198:	bfb8      	it	lt
 801819a:	460a      	movlt	r2, r1
 801819c:	e080      	b.n	80182a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 801819e:	bf00      	nop
 80181a0:	240065fe 	.word	0x240065fe
 80181a4:	24000020 	.word	0x24000020
 80181a8:	240065f6 	.word	0x240065f6
 80181ac:	240065f4 	.word	0x240065f4
 80181b0:	240065f8 	.word	0x240065f8
 80181b4:	24006600 	.word	0x24006600
 80181b8:	19e1      	adds	r1, r4, r7
 80181ba:	ab0d      	add	r3, sp, #52	@ 0x34
 80181bc:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80181c0:	6849      	ldr	r1, [r1, #4]
 80181c2:	c303      	stmia	r3!, {r0, r1}
 80181c4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 80181c8:	a80d      	add	r0, sp, #52	@ 0x34
 80181ca:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80181ce:	454b      	cmp	r3, r9
 80181d0:	440b      	add	r3, r1
 80181d2:	bfb8      	it	lt
 80181d4:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 80181d8:	1a9b      	subs	r3, r3, r2
 80181da:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80181de:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80181e2:	f7fe fe6d 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80181e6:	a80d      	add	r0, sp, #52	@ 0x34
 80181e8:	f7fa fdff 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 80181ec:	bb78      	cbnz	r0, 801824e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 80181ee:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 80181f2:	4427      	add	r7, r4
 80181f4:	6828      	ldr	r0, [r5, #0]
 80181f6:	45cc      	cmp	ip, r9
 80181f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80181fc:	f8d0 e000 	ldr.w	lr, [r0]
 8018200:	bfd8      	it	le
 8018202:	fa1f fc8c 	uxthle.w	ip, ip
 8018206:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801820a:	bfc8      	it	gt
 801820c:	fa1f fc89 	uxthgt.w	ip, r9
 8018210:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8018214:	f8cd c000 	str.w	ip, [sp]
 8018218:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 801821c:	47d8      	blx	fp
 801821e:	4683      	mov	fp, r0
 8018220:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8018224:	a80d      	add	r0, sp, #52	@ 0x34
 8018226:	f7fe fe31 	bl	8016e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801822a:	6823      	ldr	r3, [r4, #0]
 801822c:	4620      	mov	r0, r4
 801822e:	a90d      	add	r1, sp, #52	@ 0x34
 8018230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018232:	4798      	blx	r3
 8018234:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 8018238:	eba0 000b 	sub.w	r0, r0, fp
 801823c:	b200      	sxth	r0, r0
 801823e:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 8018242:	b920      	cbnz	r0, 801824e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8018244:	fa1f f188 	uxth.w	r1, r8
 8018248:	4650      	mov	r0, sl
 801824a:	f7ff f93d 	bl	80174c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801824e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8018252:	f1bb 0f00 	cmp.w	fp, #0
 8018256:	f43f ae59 	beq.w	8017f0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801825a:	8833      	ldrh	r3, [r6, #0]
 801825c:	f04f 0800 	mov.w	r8, #0
 8018260:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8018264:	3301      	adds	r3, #1
 8018266:	b29b      	uxth	r3, r3
 8018268:	b299      	uxth	r1, r3
 801826a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801826e:	458b      	cmp	fp, r1
 8018270:	d9a2      	bls.n	80181b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 8018272:	4427      	add	r7, r4
 8018274:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8018278:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 801827c:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 8018280:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8018284:	4408      	add	r0, r1
 8018286:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801828a:	4461      	add	r1, ip
 801828c:	b200      	sxth	r0, r0
 801828e:	b209      	sxth	r1, r1
 8018290:	4288      	cmp	r0, r1
 8018292:	f6bf af74 	bge.w	801817e <_ZN8touchgfx11Application15drawCachedAreasEv+0x592>
 8018296:	4584      	cmp	ip, r0
 8018298:	4662      	mov	r2, ip
 801829a:	4698      	mov	r8, r3
 801829c:	bfb8      	it	lt
 801829e:	4602      	movlt	r2, r0
 80182a0:	3301      	adds	r3, #1
 80182a2:	e7e1      	b.n	8018268 <_ZN8touchgfx11Application15drawCachedAreasEv+0x67c>
 80182a4:	d10e      	bne.n	80182c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d8>
 80182a6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80182aa:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80182ae:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80182b2:	4473      	add	r3, lr
 80182b4:	b21b      	sxth	r3, r3
 80182b6:	429d      	cmp	r5, r3
 80182b8:	bfa8      	it	ge
 80182ba:	461d      	movge	r5, r3
 80182bc:	4287      	cmp	r7, r0
 80182be:	bfb8      	it	lt
 80182c0:	46e0      	movlt	r8, ip
 80182c2:	e759      	b.n	8018178 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 80182c4:	4285      	cmp	r5, r0
 80182c6:	bfa8      	it	ge
 80182c8:	4605      	movge	r5, r0
 80182ca:	e755      	b.n	8018178 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 80182cc:	eb0a 0007 	add.w	r0, sl, r7
 80182d0:	4427      	add	r7, r4
 80182d2:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80182d6:	45cb      	cmp	fp, r9
 80182d8:	bfbc      	itt	lt
 80182da:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 80182de:	445d      	addlt	r5, fp
 80182e0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80182e4:	bfb8      	it	lt
 80182e6:	b22d      	sxthlt	r5, r5
 80182e8:	f7fa fd7f 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 80182ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80182f0:	2800      	cmp	r0, #0
 80182f2:	f47f af1c 	bne.w	801812e <_ZN8touchgfx11Application15drawCachedAreasEv+0x542>
 80182f6:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80182fa:	fa1f fb8b 	uxth.w	fp, fp
 80182fe:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8018302:	1aad      	subs	r5, r5, r2
 8018304:	4829      	ldr	r0, [pc, #164]	@ (80183ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x7c0>)
 8018306:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801830a:	454d      	cmp	r5, r9
 801830c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8018310:	6800      	ldr	r0, [r0, #0]
 8018312:	bfa8      	it	ge
 8018314:	464d      	movge	r5, r9
 8018316:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 801831a:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801831e:	b289      	uxth	r1, r1
 8018320:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8018324:	b2ad      	uxth	r5, r5
 8018326:	f8d0 c000 	ldr.w	ip, [r0]
 801832a:	b292      	uxth	r2, r2
 801832c:	455d      	cmp	r5, fp
 801832e:	bf94      	ite	ls
 8018330:	9500      	strls	r5, [sp, #0]
 8018332:	f8cd b000 	strhi.w	fp, [sp]
 8018336:	b29b      	uxth	r3, r3
 8018338:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 801833c:	47a8      	blx	r5
 801833e:	6823      	ldr	r3, [r4, #0]
 8018340:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8018344:	a90d      	add	r1, sp, #52	@ 0x34
 8018346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018348:	4620      	mov	r0, r4
 801834a:	4798      	blx	r3
 801834c:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 8018350:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8018354:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8018358:	1a5b      	subs	r3, r3, r1
 801835a:	440a      	add	r2, r1
 801835c:	b21b      	sxth	r3, r3
 801835e:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8018362:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8018366:	2b00      	cmp	r3, #0
 8018368:	f47f aedc 	bne.w	8018124 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 801836c:	fa1f f188 	uxth.w	r1, r8
 8018370:	4650      	mov	r0, sl
 8018372:	f7ff f8a9 	bl	80174c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018376:	e6d5      	b.n	8018124 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 8018378:	8835      	ldrh	r5, [r6, #0]
 801837a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801837e:	42ab      	cmp	r3, r5
 8018380:	f67f adc4 	bls.w	8017f0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8018384:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018388:	ab0d      	add	r3, sp, #52	@ 0x34
 801838a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801838e:	6851      	ldr	r1, [r2, #4]
 8018390:	c303      	stmia	r3!, {r0, r1}
 8018392:	a80d      	add	r0, sp, #52	@ 0x34
 8018394:	f7fa fd29 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8018398:	b920      	cbnz	r0, 80183a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b8>
 801839a:	6823      	ldr	r3, [r4, #0]
 801839c:	a90d      	add	r1, sp, #52	@ 0x34
 801839e:	4620      	mov	r0, r4
 80183a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80183a2:	4798      	blx	r3
 80183a4:	3501      	adds	r5, #1
 80183a6:	b2ad      	uxth	r5, r5
 80183a8:	e7e7      	b.n	801837a <_ZN8touchgfx11Application15drawCachedAreasEv+0x78e>
 80183aa:	bf00      	nop
 80183ac:	24006600 	.word	0x24006600

080183b0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80183b0:	4b03      	ldr	r3, [pc, #12]	@ (80183c0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80183b2:	2200      	movs	r2, #0
 80183b4:	801a      	strh	r2, [r3, #0]
 80183b6:	805a      	strh	r2, [r3, #2]
 80183b8:	809a      	strh	r2, [r3, #4]
 80183ba:	80da      	strh	r2, [r3, #6]
 80183bc:	4770      	bx	lr
 80183be:	bf00      	nop
 80183c0:	24006644 	.word	0x24006644

080183c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80183c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183c8:	b09d      	sub	sp, #116	@ 0x74
 80183ca:	4606      	mov	r6, r0
 80183cc:	4614      	mov	r4, r2
 80183ce:	468a      	mov	sl, r1
 80183d0:	a803      	add	r0, sp, #12
 80183d2:	461d      	mov	r5, r3
 80183d4:	f000 fe06 	bl	8018fe4 <_ZN8touchgfx12TextProviderC1Ev>
 80183d8:	6833      	ldr	r3, [r6, #0]
 80183da:	4630      	mov	r0, r6
 80183dc:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80183e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80183e2:	4798      	blx	r3
 80183e4:	6833      	ldr	r3, [r6, #0]
 80183e6:	4607      	mov	r7, r0
 80183e8:	4630      	mov	r0, r6
 80183ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80183ec:	4798      	blx	r3
 80183ee:	462a      	mov	r2, r5
 80183f0:	2500      	movs	r5, #0
 80183f2:	4621      	mov	r1, r4
 80183f4:	9000      	str	r0, [sp, #0]
 80183f6:	463b      	mov	r3, r7
 80183f8:	462c      	mov	r4, r5
 80183fa:	46a9      	mov	r9, r5
 80183fc:	46a8      	mov	r8, r5
 80183fe:	a803      	add	r0, sp, #12
 8018400:	f000 fe4b 	bl	801909a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018404:	2300      	movs	r3, #0
 8018406:	9302      	str	r3, [sp, #8]
 8018408:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801840c:	429c      	cmp	r4, r3
 801840e:	d002      	beq.n	8018416 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018410:	455c      	cmp	r4, fp
 8018412:	bf18      	it	ne
 8018414:	4625      	movne	r5, r4
 8018416:	ab02      	add	r3, sp, #8
 8018418:	4632      	mov	r2, r6
 801841a:	4651      	mov	r1, sl
 801841c:	a803      	add	r0, sp, #12
 801841e:	f001 f96f 	bl	8019700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018422:	4604      	mov	r4, r0
 8018424:	b108      	cbz	r0, 801842a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018426:	280a      	cmp	r0, #10
 8018428:	d10a      	bne.n	8018440 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801842a:	45c1      	cmp	r9, r8
 801842c:	bf38      	it	cc
 801842e:	46c1      	movcc	r9, r8
 8018430:	f04f 0800 	mov.w	r8, #0
 8018434:	2c00      	cmp	r4, #0
 8018436:	d1e5      	bne.n	8018404 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018438:	4648      	mov	r0, r9
 801843a:	b01d      	add	sp, #116	@ 0x74
 801843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018440:	9a02      	ldr	r2, [sp, #8]
 8018442:	2a00      	cmp	r2, #0
 8018444:	d0de      	beq.n	8018404 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018446:	7b57      	ldrb	r7, [r2, #13]
 8018448:	4629      	mov	r1, r5
 801844a:	6833      	ldr	r3, [r6, #0]
 801844c:	007f      	lsls	r7, r7, #1
 801844e:	8894      	ldrh	r4, [r2, #4]
 8018450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018452:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8018456:	7a97      	ldrb	r7, [r2, #10]
 8018458:	4307      	orrs	r7, r0
 801845a:	4630      	mov	r0, r6
 801845c:	4798      	blx	r3
 801845e:	4438      	add	r0, r7
 8018460:	4480      	add	r8, r0
 8018462:	fa1f f888 	uxth.w	r8, r8
 8018466:	e7e5      	b.n	8018434 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018468 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018468:	b508      	push	{r3, lr}
 801846a:	6803      	ldr	r3, [r0, #0]
 801846c:	68db      	ldr	r3, [r3, #12]
 801846e:	4798      	blx	r3
 8018470:	b128      	cbz	r0, 801847e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018472:	7b43      	ldrb	r3, [r0, #13]
 8018474:	7a80      	ldrb	r0, [r0, #10]
 8018476:	005b      	lsls	r3, r3, #1
 8018478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801847c:	4318      	orrs	r0, r3
 801847e:	bd08      	pop	{r3, pc}

08018480 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018480:	b40e      	push	{r1, r2, r3}
 8018482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018484:	b09e      	sub	sp, #120	@ 0x78
 8018486:	4605      	mov	r5, r0
 8018488:	ab23      	add	r3, sp, #140	@ 0x8c
 801848a:	a805      	add	r0, sp, #20
 801848c:	f853 4b04 	ldr.w	r4, [r3], #4
 8018490:	9303      	str	r3, [sp, #12]
 8018492:	f000 fda7 	bl	8018fe4 <_ZN8touchgfx12TextProviderC1Ev>
 8018496:	682b      	ldr	r3, [r5, #0]
 8018498:	4628      	mov	r0, r5
 801849a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801849c:	4798      	blx	r3
 801849e:	682b      	ldr	r3, [r5, #0]
 80184a0:	4606      	mov	r6, r0
 80184a2:	4628      	mov	r0, r5
 80184a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80184a6:	4798      	blx	r3
 80184a8:	4633      	mov	r3, r6
 80184aa:	4621      	mov	r1, r4
 80184ac:	ae1e      	add	r6, sp, #120	@ 0x78
 80184ae:	2400      	movs	r4, #0
 80184b0:	9000      	str	r0, [sp, #0]
 80184b2:	9a03      	ldr	r2, [sp, #12]
 80184b4:	a805      	add	r0, sp, #20
 80184b6:	f000 fdf0 	bl	801909a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80184ba:	f846 4d68 	str.w	r4, [r6, #-104]!
 80184be:	462a      	mov	r2, r5
 80184c0:	4633      	mov	r3, r6
 80184c2:	4621      	mov	r1, r4
 80184c4:	a805      	add	r0, sp, #20
 80184c6:	f001 f91b 	bl	8019700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80184ca:	b300      	cbz	r0, 801850e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80184cc:	280a      	cmp	r0, #10
 80184ce:	d01a      	beq.n	8018506 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80184d0:	9f04      	ldr	r7, [sp, #16]
 80184d2:	b1c7      	cbz	r7, 8018506 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80184d4:	7b78      	ldrb	r0, [r7, #13]
 80184d6:	7a3b      	ldrb	r3, [r7, #8]
 80184d8:	00c1      	lsls	r1, r0, #3
 80184da:	88ea      	ldrh	r2, [r5, #6]
 80184dc:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80184e0:	4319      	orrs	r1, r3
 80184e2:	0643      	lsls	r3, r0, #25
 80184e4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80184e8:	bf48      	it	mi
 80184ea:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80184ee:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80184f2:	bf48      	it	mi
 80184f4:	b219      	sxthmi	r1, r3
 80184f6:	79fb      	ldrb	r3, [r7, #7]
 80184f8:	4303      	orrs	r3, r0
 80184fa:	4413      	add	r3, r2
 80184fc:	1a5b      	subs	r3, r3, r1
 80184fe:	b21b      	sxth	r3, r3
 8018500:	429c      	cmp	r4, r3
 8018502:	bfb8      	it	lt
 8018504:	461c      	movlt	r4, r3
 8018506:	4633      	mov	r3, r6
 8018508:	462a      	mov	r2, r5
 801850a:	2100      	movs	r1, #0
 801850c:	e7da      	b.n	80184c4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801850e:	b2a0      	uxth	r0, r4
 8018510:	b01e      	add	sp, #120	@ 0x78
 8018512:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018516:	b003      	add	sp, #12
 8018518:	4770      	bx	lr

0801851a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801851a:	7a43      	ldrb	r3, [r0, #9]
 801851c:	8880      	ldrh	r0, [r0, #4]
 801851e:	4418      	add	r0, r3
 8018520:	b280      	uxth	r0, r0
 8018522:	4770      	bx	lr

08018524 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8018524:	6803      	ldr	r3, [r0, #0]
 8018526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018528:	4718      	bx	r3

0801852a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801852a:	b40e      	push	{r1, r2, r3}
 801852c:	b570      	push	{r4, r5, r6, lr}
 801852e:	b09d      	sub	sp, #116	@ 0x74
 8018530:	4604      	mov	r4, r0
 8018532:	ab21      	add	r3, sp, #132	@ 0x84
 8018534:	a803      	add	r0, sp, #12
 8018536:	f853 5b04 	ldr.w	r5, [r3], #4
 801853a:	9302      	str	r3, [sp, #8]
 801853c:	f000 fd52 	bl	8018fe4 <_ZN8touchgfx12TextProviderC1Ev>
 8018540:	6823      	ldr	r3, [r4, #0]
 8018542:	4620      	mov	r0, r4
 8018544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018546:	4798      	blx	r3
 8018548:	6823      	ldr	r3, [r4, #0]
 801854a:	4606      	mov	r6, r0
 801854c:	4620      	mov	r0, r4
 801854e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018550:	2401      	movs	r4, #1
 8018552:	4798      	blx	r3
 8018554:	4633      	mov	r3, r6
 8018556:	9000      	str	r0, [sp, #0]
 8018558:	4629      	mov	r1, r5
 801855a:	9a02      	ldr	r2, [sp, #8]
 801855c:	a803      	add	r0, sp, #12
 801855e:	f000 fd9c 	bl	801909a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018562:	a803      	add	r0, sp, #12
 8018564:	f001 f998 	bl	8019898 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018568:	b2a3      	uxth	r3, r4
 801856a:	b138      	cbz	r0, 801857c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801856c:	280a      	cmp	r0, #10
 801856e:	a803      	add	r0, sp, #12
 8018570:	bf04      	itt	eq
 8018572:	3301      	addeq	r3, #1
 8018574:	b21c      	sxtheq	r4, r3
 8018576:	f001 f98f 	bl	8019898 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801857a:	e7f5      	b.n	8018568 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801857c:	4618      	mov	r0, r3
 801857e:	b01d      	add	sp, #116	@ 0x74
 8018580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018584:	b003      	add	sp, #12
 8018586:	4770      	bx	lr

08018588 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018588:	b40e      	push	{r1, r2, r3}
 801858a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801858c:	b09e      	sub	sp, #120	@ 0x78
 801858e:	4604      	mov	r4, r0
 8018590:	ab23      	add	r3, sp, #140	@ 0x8c
 8018592:	a805      	add	r0, sp, #20
 8018594:	f853 5b04 	ldr.w	r5, [r3], #4
 8018598:	9303      	str	r3, [sp, #12]
 801859a:	f000 fd23 	bl	8018fe4 <_ZN8touchgfx12TextProviderC1Ev>
 801859e:	6823      	ldr	r3, [r4, #0]
 80185a0:	4620      	mov	r0, r4
 80185a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80185a4:	4798      	blx	r3
 80185a6:	6823      	ldr	r3, [r4, #0]
 80185a8:	4606      	mov	r6, r0
 80185aa:	4620      	mov	r0, r4
 80185ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80185ae:	4798      	blx	r3
 80185b0:	4633      	mov	r3, r6
 80185b2:	4629      	mov	r1, r5
 80185b4:	9000      	str	r0, [sp, #0]
 80185b6:	9a03      	ldr	r2, [sp, #12]
 80185b8:	a805      	add	r0, sp, #20
 80185ba:	f000 fd6e 	bl	801909a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80185be:	ad1e      	add	r5, sp, #120	@ 0x78
 80185c0:	2100      	movs	r1, #0
 80185c2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80185c6:	4622      	mov	r2, r4
 80185c8:	a805      	add	r0, sp, #20
 80185ca:	f845 1d68 	str.w	r1, [r5, #-104]!
 80185ce:	462b      	mov	r3, r5
 80185d0:	f001 f896 	bl	8019700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80185d4:	b1d8      	cbz	r0, 801860e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80185d6:	280a      	cmp	r0, #10
 80185d8:	d012      	beq.n	8018600 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80185da:	9804      	ldr	r0, [sp, #16]
 80185dc:	b180      	cbz	r0, 8018600 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80185de:	7b47      	ldrb	r7, [r0, #13]
 80185e0:	88e2      	ldrh	r2, [r4, #6]
 80185e2:	00fb      	lsls	r3, r7, #3
 80185e4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80185e8:	7a03      	ldrb	r3, [r0, #8]
 80185ea:	430b      	orrs	r3, r1
 80185ec:	0679      	lsls	r1, r7, #25
 80185ee:	bf44      	itt	mi
 80185f0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80185f4:	b21b      	sxthmi	r3, r3
 80185f6:	1ad3      	subs	r3, r2, r3
 80185f8:	b21b      	sxth	r3, r3
 80185fa:	429e      	cmp	r6, r3
 80185fc:	bfa8      	it	ge
 80185fe:	461e      	movge	r6, r3
 8018600:	462b      	mov	r3, r5
 8018602:	4622      	mov	r2, r4
 8018604:	2100      	movs	r1, #0
 8018606:	a805      	add	r0, sp, #20
 8018608:	f001 f87a 	bl	8019700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801860c:	e7e2      	b.n	80185d4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801860e:	4630      	mov	r0, r6
 8018610:	b01e      	add	sp, #120	@ 0x78
 8018612:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018616:	b003      	add	sp, #12
 8018618:	4770      	bx	lr

0801861a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801861a:	b513      	push	{r0, r1, r4, lr}
 801861c:	6803      	ldr	r3, [r0, #0]
 801861e:	2400      	movs	r4, #0
 8018620:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018624:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018628:	f8ad 1004 	strh.w	r1, [sp, #4]
 801862c:	4669      	mov	r1, sp
 801862e:	691b      	ldr	r3, [r3, #16]
 8018630:	9400      	str	r4, [sp, #0]
 8018632:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018636:	4798      	blx	r3
 8018638:	b002      	add	sp, #8
 801863a:	bd10      	pop	{r4, pc}

0801863c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801863c:	b538      	push	{r3, r4, r5, lr}
 801863e:	680b      	ldr	r3, [r1, #0]
 8018640:	460c      	mov	r4, r1
 8018642:	4605      	mov	r5, r0
 8018644:	68db      	ldr	r3, [r3, #12]
 8018646:	4798      	blx	r3
 8018648:	6823      	ldr	r3, [r4, #0]
 801864a:	4620      	mov	r0, r4
 801864c:	4629      	mov	r1, r5
 801864e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018650:	4798      	blx	r3
 8018652:	4628      	mov	r0, r5
 8018654:	bd38      	pop	{r3, r4, r5, pc}

08018656 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018656:	b410      	push	{r4}
 8018658:	880a      	ldrh	r2, [r1, #0]
 801865a:	8884      	ldrh	r4, [r0, #4]
 801865c:	4422      	add	r2, r4
 801865e:	800a      	strh	r2, [r1, #0]
 8018660:	884a      	ldrh	r2, [r1, #2]
 8018662:	88c4      	ldrh	r4, [r0, #6]
 8018664:	4422      	add	r2, r4
 8018666:	804a      	strh	r2, [r1, #2]
 8018668:	6940      	ldr	r0, [r0, #20]
 801866a:	b120      	cbz	r0, 8018676 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801866c:	6803      	ldr	r3, [r0, #0]
 801866e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018674:	4718      	bx	r3
 8018676:	f85d 4b04 	ldr.w	r4, [sp], #4
 801867a:	4770      	bx	lr

0801867c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801867c:	b570      	push	{r4, r5, r6, lr}
 801867e:	8882      	ldrh	r2, [r0, #4]
 8018680:	460c      	mov	r4, r1
 8018682:	880b      	ldrh	r3, [r1, #0]
 8018684:	4605      	mov	r5, r0
 8018686:	4413      	add	r3, r2
 8018688:	800b      	strh	r3, [r1, #0]
 801868a:	884b      	ldrh	r3, [r1, #2]
 801868c:	88c2      	ldrh	r2, [r0, #6]
 801868e:	4413      	add	r3, r2
 8018690:	804b      	strh	r3, [r1, #2]
 8018692:	1d01      	adds	r1, r0, #4
 8018694:	4620      	mov	r0, r4
 8018696:	f7fa fb65 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 801869a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	dd0b      	ble.n	80186ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80186a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	dd07      	ble.n	80186ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80186aa:	6968      	ldr	r0, [r5, #20]
 80186ac:	b128      	cbz	r0, 80186ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80186ae:	6803      	ldr	r3, [r0, #0]
 80186b0:	4621      	mov	r1, r4
 80186b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80186b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186b8:	4718      	bx	r3
 80186ba:	bd70      	pop	{r4, r5, r6, pc}

080186bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80186bc:	b570      	push	{r4, r5, r6, lr}
 80186be:	8882      	ldrh	r2, [r0, #4]
 80186c0:	460c      	mov	r4, r1
 80186c2:	880b      	ldrh	r3, [r1, #0]
 80186c4:	4605      	mov	r5, r0
 80186c6:	4413      	add	r3, r2
 80186c8:	800b      	strh	r3, [r1, #0]
 80186ca:	884b      	ldrh	r3, [r1, #2]
 80186cc:	88c2      	ldrh	r2, [r0, #6]
 80186ce:	4413      	add	r3, r2
 80186d0:	804b      	strh	r3, [r1, #2]
 80186d2:	1d01      	adds	r1, r0, #4
 80186d4:	4620      	mov	r0, r4
 80186d6:	f7fa fb45 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 80186da:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	dd19      	ble.n	8018716 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80186e2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	dd15      	ble.n	8018716 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80186ea:	6968      	ldr	r0, [r5, #20]
 80186ec:	b128      	cbz	r0, 80186fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80186ee:	6803      	ldr	r3, [r0, #0]
 80186f0:	4621      	mov	r1, r4
 80186f2:	691b      	ldr	r3, [r3, #16]
 80186f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186f8:	4718      	bx	r3
 80186fa:	4b07      	ldr	r3, [pc, #28]	@ (8018718 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	3304      	adds	r3, #4
 8018700:	429d      	cmp	r5, r3
 8018702:	d108      	bne.n	8018716 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8018704:	f7fe fd86 	bl	8017214 <_ZN8touchgfx11Application11getInstanceEv>
 8018708:	6803      	ldr	r3, [r0, #0]
 801870a:	6821      	ldr	r1, [r4, #0]
 801870c:	6862      	ldr	r2, [r4, #4]
 801870e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018714:	4718      	bx	r3
 8018716:	bd70      	pop	{r4, r5, r6, pc}
 8018718:	2400663c 	.word	0x2400663c

0801871c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801871c:	b570      	push	{r4, r5, r6, lr}
 801871e:	4604      	mov	r4, r0
 8018720:	4616      	mov	r6, r2
 8018722:	460d      	mov	r5, r1
 8018724:	b901      	cbnz	r1, 8018728 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018726:	b192      	cbz	r2, 801874e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8018728:	6823      	ldr	r3, [r4, #0]
 801872a:	4620      	mov	r0, r4
 801872c:	699b      	ldr	r3, [r3, #24]
 801872e:	4798      	blx	r3
 8018730:	88e2      	ldrh	r2, [r4, #6]
 8018732:	88a1      	ldrh	r1, [r4, #4]
 8018734:	4620      	mov	r0, r4
 8018736:	4432      	add	r2, r6
 8018738:	4429      	add	r1, r5
 801873a:	b212      	sxth	r2, r2
 801873c:	b209      	sxth	r1, r1
 801873e:	f7f5 fd4a 	bl	800e1d6 <_ZN8touchgfx8Drawable5setXYEss>
 8018742:	6823      	ldr	r3, [r4, #0]
 8018744:	4620      	mov	r0, r4
 8018746:	699b      	ldr	r3, [r3, #24]
 8018748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801874c:	4718      	bx	r3
 801874e:	bd70      	pop	{r4, r5, r6, pc}

08018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018750:	b510      	push	{r4, lr}
 8018752:	2300      	movs	r3, #0
 8018754:	4604      	mov	r4, r0
 8018756:	4608      	mov	r0, r1
 8018758:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801875c:	8023      	strh	r3, [r4, #0]
 801875e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018762:	8063      	strh	r3, [r4, #2]
 8018764:	6803      	ldr	r3, [r0, #0]
 8018766:	80a1      	strh	r1, [r4, #4]
 8018768:	4621      	mov	r1, r4
 801876a:	80e2      	strh	r2, [r4, #6]
 801876c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801876e:	4798      	blx	r3
 8018770:	4620      	mov	r0, r4
 8018772:	bd10      	pop	{r4, pc}

08018774 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8018774:	b530      	push	{r4, r5, lr}
 8018776:	8083      	strh	r3, [r0, #4]
 8018778:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801877c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8018780:	80c3      	strh	r3, [r0, #6]
 8018782:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8018786:	6141      	str	r1, [r0, #20]
 8018788:	7203      	strb	r3, [r0, #8]
 801878a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801878e:	8302      	strh	r2, [r0, #24]
 8018790:	7243      	strb	r3, [r0, #9]
 8018792:	7a83      	ldrb	r3, [r0, #10]
 8018794:	f365 0306 	bfi	r3, r5, #0, #7
 8018798:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801879c:	f365 13c7 	bfi	r3, r5, #7, #1
 80187a0:	7283      	strb	r3, [r0, #10]
 80187a2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80187a6:	72c3      	strb	r3, [r0, #11]
 80187a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80187ac:	7303      	strb	r3, [r0, #12]
 80187ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80187b2:	81c3      	strh	r3, [r0, #14]
 80187b4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80187b8:	8203      	strh	r3, [r0, #16]
 80187ba:	4b01      	ldr	r3, [pc, #4]	@ (80187c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80187bc:	6003      	str	r3, [r0, #0]
 80187be:	bd30      	pop	{r4, r5, pc}
 80187c0:	0802c64c 	.word	0x0802c64c

080187c4 <_ZNK8touchgfx9ConstFont4findEt>:
 80187c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187c6:	6944      	ldr	r4, [r0, #20]
 80187c8:	b3bc      	cbz	r4, 801883a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80187ca:	88a3      	ldrh	r3, [r4, #4]
 80187cc:	8b02      	ldrh	r2, [r0, #24]
 80187ce:	1acb      	subs	r3, r1, r3
 80187d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80187d4:	d431      	bmi.n	801883a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80187d6:	4293      	cmp	r3, r2
 80187d8:	dd0c      	ble.n	80187f4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80187da:	230e      	movs	r3, #14
 80187dc:	fb03 4302 	mla	r3, r3, r2, r4
 80187e0:	889b      	ldrh	r3, [r3, #4]
 80187e2:	1a5b      	subs	r3, r3, r1
 80187e4:	1ad3      	subs	r3, r2, r3
 80187e6:	429a      	cmp	r2, r3
 80187e8:	db27      	blt.n	801883a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	bfbc      	itt	lt
 80187ee:	2302      	movlt	r3, #2
 80187f0:	fb92 f3f3 	sdivlt	r3, r2, r3
 80187f4:	2500      	movs	r5, #0
 80187f6:	260e      	movs	r6, #14
 80187f8:	4295      	cmp	r5, r2
 80187fa:	dc1e      	bgt.n	801883a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80187fc:	fb06 4003 	mla	r0, r6, r3, r4
 8018800:	8887      	ldrh	r7, [r0, #4]
 8018802:	42b9      	cmp	r1, r7
 8018804:	d01a      	beq.n	801883c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018806:	d20d      	bcs.n	8018824 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018808:	1e5a      	subs	r2, r3, #1
 801880a:	4295      	cmp	r5, r2
 801880c:	dc15      	bgt.n	801883a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801880e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018812:	1a5b      	subs	r3, r3, r1
 8018814:	1ad3      	subs	r3, r2, r3
 8018816:	429a      	cmp	r2, r3
 8018818:	db0f      	blt.n	801883a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801881a:	429d      	cmp	r5, r3
 801881c:	ddec      	ble.n	80187f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801881e:	1953      	adds	r3, r2, r5
 8018820:	105b      	asrs	r3, r3, #1
 8018822:	e7e9      	b.n	80187f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018824:	1c5d      	adds	r5, r3, #1
 8018826:	42aa      	cmp	r2, r5
 8018828:	db07      	blt.n	801883a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801882a:	8a43      	ldrh	r3, [r0, #18]
 801882c:	1acb      	subs	r3, r1, r3
 801882e:	442b      	add	r3, r5
 8018830:	429d      	cmp	r5, r3
 8018832:	dc02      	bgt.n	801883a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018834:	429a      	cmp	r2, r3
 8018836:	dadf      	bge.n	80187f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018838:	e7f1      	b.n	801881e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801883a:	2000      	movs	r0, #0
 801883c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801883e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801883e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018840:	4604      	mov	r4, r0
 8018842:	4617      	mov	r7, r2
 8018844:	461e      	mov	r6, r3
 8018846:	b911      	cbnz	r1, 801884e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018848:	2500      	movs	r5, #0
 801884a:	4628      	mov	r0, r5
 801884c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801884e:	290a      	cmp	r1, #10
 8018850:	d0fa      	beq.n	8018848 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018852:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8018856:	4291      	cmp	r1, r2
 8018858:	d0f6      	beq.n	8018848 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801885a:	f242 020b 	movw	r2, #8203	@ 0x200b
 801885e:	4291      	cmp	r1, r2
 8018860:	d0f2      	beq.n	8018848 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018862:	f7ff ffaf 	bl	80187c4 <_ZNK8touchgfx9ConstFont4findEt>
 8018866:	4605      	mov	r5, r0
 8018868:	b950      	cbnz	r0, 8018880 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801886a:	6823      	ldr	r3, [r4, #0]
 801886c:	4620      	mov	r0, r4
 801886e:	691b      	ldr	r3, [r3, #16]
 8018870:	4798      	blx	r3
 8018872:	4601      	mov	r1, r0
 8018874:	4620      	mov	r0, r4
 8018876:	f7ff ffa5 	bl	80187c4 <_ZNK8touchgfx9ConstFont4findEt>
 801887a:	4605      	mov	r5, r0
 801887c:	2800      	cmp	r0, #0
 801887e:	d0e3      	beq.n	8018848 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018880:	6823      	ldr	r3, [r4, #0]
 8018882:	4629      	mov	r1, r5
 8018884:	4620      	mov	r0, r4
 8018886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018888:	4798      	blx	r3
 801888a:	6038      	str	r0, [r7, #0]
 801888c:	6823      	ldr	r3, [r4, #0]
 801888e:	4620      	mov	r0, r4
 8018890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018892:	4798      	blx	r3
 8018894:	7030      	strb	r0, [r6, #0]
 8018896:	e7d8      	b.n	801884a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018898 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8018898:	b538      	push	{r3, r4, r5, lr}
 801889a:	4605      	mov	r5, r0
 801889c:	f002 fa24 	bl	801ace8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80188a0:	4604      	mov	r4, r0
 80188a2:	4628      	mov	r0, r5
 80188a4:	f002 f964 	bl	801ab70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80188a8:	2800      	cmp	r0, #0
 80188aa:	bf14      	ite	ne
 80188ac:	2002      	movne	r0, #2
 80188ae:	2000      	moveq	r0, #0
 80188b0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80188b4:	b280      	uxth	r0, r0
 80188b6:	bd38      	pop	{r3, r4, r5, pc}

080188b8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 80188b8:	b538      	push	{r3, r4, r5, lr}
 80188ba:	4605      	mov	r5, r0
 80188bc:	f002 fa14 	bl	801ace8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80188c0:	4604      	mov	r4, r0
 80188c2:	4628      	mov	r0, r5
 80188c4:	f002 f954 	bl	801ab70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80188c8:	2800      	cmp	r0, #0
 80188ca:	bf14      	ite	ne
 80188cc:	2002      	movne	r0, #2
 80188ce:	2000      	moveq	r0, #0
 80188d0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80188d4:	f040 0001 	orr.w	r0, r0, #1
 80188d8:	b280      	uxth	r0, r0
 80188da:	bd38      	pop	{r3, r4, r5, pc}

080188dc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80188dc:	2000      	movs	r0, #0
 80188de:	4770      	bx	lr

080188e0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80188e0:	2001      	movs	r0, #1
 80188e2:	4770      	bx	lr

080188e4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80188e4:	2002      	movs	r0, #2
 80188e6:	4770      	bx	lr

080188e8 <_ZN8touchgfx12GestureEventD1Ev>:
 80188e8:	4770      	bx	lr

080188ea <_ZN8touchgfx9DragEventD1Ev>:
 80188ea:	4770      	bx	lr

080188ec <_ZN8touchgfx10ClickEventD1Ev>:
 80188ec:	4770      	bx	lr

080188ee <_ZN8touchgfx10ClickEventD0Ev>:
 80188ee:	b510      	push	{r4, lr}
 80188f0:	4604      	mov	r4, r0
 80188f2:	210c      	movs	r1, #12
 80188f4:	f010 fbc1 	bl	802907a <_ZdlPvj>
 80188f8:	4620      	mov	r0, r4
 80188fa:	bd10      	pop	{r4, pc}

080188fc <_ZN8touchgfx9DragEventD0Ev>:
 80188fc:	b510      	push	{r4, lr}
 80188fe:	4604      	mov	r4, r0
 8018900:	2110      	movs	r1, #16
 8018902:	f010 fbba 	bl	802907a <_ZdlPvj>
 8018906:	4620      	mov	r0, r4
 8018908:	bd10      	pop	{r4, pc}

0801890a <_ZN8touchgfx12GestureEventD0Ev>:
 801890a:	b510      	push	{r4, lr}
 801890c:	4604      	mov	r4, r0
 801890e:	210c      	movs	r1, #12
 8018910:	f010 fbb3 	bl	802907a <_ZdlPvj>
 8018914:	4620      	mov	r0, r4
 8018916:	bd10      	pop	{r4, pc}

08018918 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018918:	b530      	push	{r4, r5, lr}
 801891a:	460d      	mov	r5, r1
 801891c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801891e:	b087      	sub	sp, #28
 8018920:	4604      	mov	r4, r0
 8018922:	b301      	cbz	r1, 8018966 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018924:	a801      	add	r0, sp, #4
 8018926:	f7ff ff13 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801892a:	892a      	ldrh	r2, [r5, #8]
 801892c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018930:	7928      	ldrb	r0, [r5, #4]
 8018932:	1ad2      	subs	r2, r2, r3
 8018934:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018936:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801893a:	441a      	add	r2, r3
 801893c:	896b      	ldrh	r3, [r5, #10]
 801893e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018942:	f88d 0010 	strb.w	r0, [sp, #16]
 8018946:	1b5b      	subs	r3, r3, r5
 8018948:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801894a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801894c:	442b      	add	r3, r5
 801894e:	4d07      	ldr	r5, [pc, #28]	@ (801896c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018950:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018954:	a903      	add	r1, sp, #12
 8018956:	9503      	str	r5, [sp, #12]
 8018958:	f8ad 2014 	strh.w	r2, [sp, #20]
 801895c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018960:	6803      	ldr	r3, [r0, #0]
 8018962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018964:	4798      	blx	r3
 8018966:	b007      	add	sp, #28
 8018968:	bd30      	pop	{r4, r5, pc}
 801896a:	bf00      	nop
 801896c:	0802c6dc 	.word	0x0802c6dc

08018970 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018974:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018976:	b08a      	sub	sp, #40	@ 0x28
 8018978:	4604      	mov	r4, r0
 801897a:	460d      	mov	r5, r1
 801897c:	b113      	cbz	r3, 8018984 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801897e:	790b      	ldrb	r3, [r1, #4]
 8018980:	2b00      	cmp	r3, #0
 8018982:	d044      	beq.n	8018a0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018984:	f104 0804 	add.w	r8, r4, #4
 8018988:	a803      	add	r0, sp, #12
 801898a:	4641      	mov	r1, r8
 801898c:	f7ff fee0 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018990:	792b      	ldrb	r3, [r5, #4]
 8018992:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018996:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801899a:	b983      	cbnz	r3, 80189be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801899c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 80189a0:	892a      	ldrh	r2, [r5, #8]
 80189a2:	88e9      	ldrh	r1, [r5, #6]
 80189a4:	4640      	mov	r0, r8
 80189a6:	1b92      	subs	r2, r2, r6
 80189a8:	9301      	str	r3, [sp, #4]
 80189aa:	1bc9      	subs	r1, r1, r7
 80189ac:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 80189b0:	b212      	sxth	r2, r2
 80189b2:	9300      	str	r3, [sp, #0]
 80189b4:	b209      	sxth	r1, r1
 80189b6:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80189ba:	f7fa f8f1 	bl	8012ba0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80189be:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80189c0:	b329      	cbz	r1, 8018a0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80189c2:	a805      	add	r0, sp, #20
 80189c4:	f7ff fec4 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80189c8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80189cc:	792b      	ldrb	r3, [r5, #4]
 80189ce:	a907      	add	r1, sp, #28
 80189d0:	1abf      	subs	r7, r7, r2
 80189d2:	88ea      	ldrh	r2, [r5, #6]
 80189d4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80189d6:	4417      	add	r7, r2
 80189d8:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80189da:	f88d 3020 	strb.w	r3, [sp, #32]
 80189de:	4417      	add	r7, r2
 80189e0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80189e4:	1ab6      	subs	r6, r6, r2
 80189e6:	892a      	ldrh	r2, [r5, #8]
 80189e8:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80189ec:	4416      	add	r6, r2
 80189ee:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80189f0:	4416      	add	r6, r2
 80189f2:	4a08      	ldr	r2, [pc, #32]	@ (8018a14 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80189f4:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80189f8:	2600      	movs	r6, #0
 80189fa:	9207      	str	r2, [sp, #28]
 80189fc:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8018a00:	6803      	ldr	r3, [r0, #0]
 8018a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018a04:	4798      	blx	r3
 8018a06:	792b      	ldrb	r3, [r5, #4]
 8018a08:	b10b      	cbz	r3, 8018a0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018a0a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8018a0e:	b00a      	add	sp, #40	@ 0x28
 8018a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a14:	0802c6b4 	.word	0x0802c6b4

08018a18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a1c:	460c      	mov	r4, r1
 8018a1e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8018a20:	b088      	sub	sp, #32
 8018a22:	4605      	mov	r5, r0
 8018a24:	2900      	cmp	r1, #0
 8018a26:	d06d      	beq.n	8018b04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018a28:	4668      	mov	r0, sp
 8018a2a:	f7ff fe91 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018a2e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8018a30:	88e3      	ldrh	r3, [r4, #6]
 8018a32:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018a36:	440b      	add	r3, r1
 8018a38:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018a3c:	b21b      	sxth	r3, r3
 8018a3e:	4543      	cmp	r3, r8
 8018a40:	db31      	blt.n	8018aa6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018a42:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018a46:	44c4      	add	ip, r8
 8018a48:	fa0f fc8c 	sxth.w	ip, ip
 8018a4c:	4563      	cmp	r3, ip
 8018a4e:	da2a      	bge.n	8018aa6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018a50:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8018a52:	8926      	ldrh	r6, [r4, #8]
 8018a54:	4416      	add	r6, r2
 8018a56:	b236      	sxth	r6, r6
 8018a58:	42be      	cmp	r6, r7
 8018a5a:	db24      	blt.n	8018aa6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018a5c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018a60:	4438      	add	r0, r7
 8018a62:	b200      	sxth	r0, r0
 8018a64:	4286      	cmp	r6, r0
 8018a66:	da1e      	bge.n	8018aa6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018a68:	8963      	ldrh	r3, [r4, #10]
 8018a6a:	4419      	add	r1, r3
 8018a6c:	b209      	sxth	r1, r1
 8018a6e:	4541      	cmp	r1, r8
 8018a70:	db08      	blt.n	8018a84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018a72:	4561      	cmp	r1, ip
 8018a74:	da06      	bge.n	8018a84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018a76:	89a3      	ldrh	r3, [r4, #12]
 8018a78:	441a      	add	r2, r3
 8018a7a:	b212      	sxth	r2, r2
 8018a7c:	42ba      	cmp	r2, r7
 8018a7e:	db01      	blt.n	8018a84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018a80:	4282      	cmp	r2, r0
 8018a82:	db10      	blt.n	8018aa6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018a84:	4b21      	ldr	r3, [pc, #132]	@ (8018b0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018a86:	a904      	add	r1, sp, #16
 8018a88:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018a8a:	9304      	str	r3, [sp, #16]
 8018a8c:	2302      	movs	r3, #2
 8018a8e:	f88d 3014 	strb.w	r3, [sp, #20]
 8018a92:	2300      	movs	r3, #0
 8018a94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018a98:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018a9c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018aa0:	6803      	ldr	r3, [r0, #0]
 8018aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018aa4:	4798      	blx	r3
 8018aa6:	1d29      	adds	r1, r5, #4
 8018aa8:	a802      	add	r0, sp, #8
 8018aaa:	f7ff fe51 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018aae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018ab2:	88e0      	ldrh	r0, [r4, #6]
 8018ab4:	eba3 0808 	sub.w	r8, r3, r8
 8018ab8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018abc:	7921      	ldrb	r1, [r4, #4]
 8018abe:	fa1f f888 	uxth.w	r8, r8
 8018ac2:	1bdf      	subs	r7, r3, r7
 8018ac4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8018ac8:	b2bb      	uxth	r3, r7
 8018aca:	4440      	add	r0, r8
 8018acc:	8922      	ldrh	r2, [r4, #8]
 8018ace:	8967      	ldrh	r7, [r4, #10]
 8018ad0:	4460      	add	r0, ip
 8018ad2:	89a4      	ldrh	r4, [r4, #12]
 8018ad4:	441a      	add	r2, r3
 8018ad6:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8018ad8:	44b8      	add	r8, r7
 8018ada:	4423      	add	r3, r4
 8018adc:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018ae0:	4432      	add	r2, r6
 8018ae2:	44e0      	add	r8, ip
 8018ae4:	4433      	add	r3, r6
 8018ae6:	4c0a      	ldr	r4, [pc, #40]	@ (8018b10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018ae8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018aea:	f88d 1014 	strb.w	r1, [sp, #20]
 8018aee:	a904      	add	r1, sp, #16
 8018af0:	9404      	str	r4, [sp, #16]
 8018af2:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018af6:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018afa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018afe:	6803      	ldr	r3, [r0, #0]
 8018b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018b02:	4798      	blx	r3
 8018b04:	b008      	add	sp, #32
 8018b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b0a:	bf00      	nop
 8018b0c:	0802c6b4 	.word	0x0802c6b4
 8018b10:	0802c6c8 	.word	0x0802c6c8

08018b14 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b16:	4604      	mov	r4, r0
 8018b18:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018b1c:	3201      	adds	r2, #1
 8018b1e:	d112      	bne.n	8018b46 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018b20:	2500      	movs	r5, #0
 8018b22:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018b26:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018b2a:	6803      	ldr	r3, [r0, #0]
 8018b2c:	9500      	str	r5, [sp, #0]
 8018b2e:	466d      	mov	r5, sp
 8018b30:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018b34:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018b38:	4629      	mov	r1, r5
 8018b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b3c:	4798      	blx	r3
 8018b3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018b42:	e884 0003 	stmia.w	r4, {r0, r1}
 8018b46:	4620      	mov	r0, r4
 8018b48:	b003      	add	sp, #12
 8018b4a:	bd30      	pop	{r4, r5, pc}

08018b4c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018b4c:	b513      	push	{r0, r1, r4, lr}
 8018b4e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018b52:	4604      	mov	r4, r0
 8018b54:	3301      	adds	r3, #1
 8018b56:	d109      	bne.n	8018b6c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018b58:	4601      	mov	r1, r0
 8018b5a:	4668      	mov	r0, sp
 8018b5c:	f7ff fdf8 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018b60:	f8bd 3000 	ldrh.w	r3, [sp]
 8018b64:	8423      	strh	r3, [r4, #32]
 8018b66:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018b6a:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018b6c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018b70:	b002      	add	sp, #8
 8018b72:	bd10      	pop	{r4, pc}

08018b74 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018b74:	b513      	push	{r0, r1, r4, lr}
 8018b76:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8018b7a:	4604      	mov	r4, r0
 8018b7c:	3301      	adds	r3, #1
 8018b7e:	d109      	bne.n	8018b94 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018b80:	4601      	mov	r1, r0
 8018b82:	4668      	mov	r0, sp
 8018b84:	f7ff fde4 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018b88:	f8bd 3000 	ldrh.w	r3, [sp]
 8018b8c:	8423      	strh	r3, [r4, #32]
 8018b8e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018b92:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018b94:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8018b98:	b002      	add	sp, #8
 8018b9a:	bd10      	pop	{r4, pc}

08018b9c <_ZN8touchgfx6ScreenC1Ev>:
 8018b9c:	b570      	push	{r4, r5, r6, lr}
 8018b9e:	4b17      	ldr	r3, [pc, #92]	@ (8018bfc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018ba0:	4605      	mov	r5, r0
 8018ba2:	4a17      	ldr	r2, [pc, #92]	@ (8018c00 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018ba4:	2101      	movs	r1, #1
 8018ba6:	f845 3b04 	str.w	r3, [r5], #4
 8018baa:	2300      	movs	r3, #0
 8018bac:	6042      	str	r2, [r0, #4]
 8018bae:	4604      	mov	r4, r0
 8018bb0:	8103      	strh	r3, [r0, #8]
 8018bb2:	8143      	strh	r3, [r0, #10]
 8018bb4:	8183      	strh	r3, [r0, #12]
 8018bb6:	81c3      	strh	r3, [r0, #14]
 8018bb8:	8203      	strh	r3, [r0, #16]
 8018bba:	8243      	strh	r3, [r0, #18]
 8018bbc:	8283      	strh	r3, [r0, #20]
 8018bbe:	82c3      	strh	r3, [r0, #22]
 8018bc0:	6203      	str	r3, [r0, #32]
 8018bc2:	8483      	strh	r3, [r0, #36]	@ 0x24
 8018bc4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8018bc6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8018bca:	6343      	str	r3, [r0, #52]	@ 0x34
 8018bcc:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8018bd0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018bd4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018bd8:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8018bdc:	4b09      	ldr	r3, [pc, #36]	@ (8018c04 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018bde:	4628      	mov	r0, r5
 8018be0:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018be4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8018be6:	4a08      	ldr	r2, [pc, #32]	@ (8018c08 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018be8:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018bec:	4798      	blx	r3
 8018bee:	6863      	ldr	r3, [r4, #4]
 8018bf0:	4628      	mov	r0, r5
 8018bf2:	4631      	mov	r1, r6
 8018bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018bf6:	4798      	blx	r3
 8018bf8:	4620      	mov	r0, r4
 8018bfa:	bd70      	pop	{r4, r5, r6, pc}
 8018bfc:	0802c6f0 	.word	0x0802c6f0
 8018c00:	0802bd40 	.word	0x0802bd40
 8018c04:	240065f6 	.word	0x240065f6
 8018c08:	240065f4 	.word	0x240065f4

08018c0c <_ZN8touchgfx6Screen4drawEv>:
 8018c0c:	4b09      	ldr	r3, [pc, #36]	@ (8018c34 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018c0e:	b507      	push	{r0, r1, r2, lr}
 8018c10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018c14:	2100      	movs	r1, #0
 8018c16:	4b08      	ldr	r3, [pc, #32]	@ (8018c38 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018c18:	9100      	str	r1, [sp, #0]
 8018c1a:	4669      	mov	r1, sp
 8018c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c20:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018c24:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018c28:	6803      	ldr	r3, [r0, #0]
 8018c2a:	689b      	ldr	r3, [r3, #8]
 8018c2c:	4798      	blx	r3
 8018c2e:	b003      	add	sp, #12
 8018c30:	f85d fb04 	ldr.w	pc, [sp], #4
 8018c34:	240065f4 	.word	0x240065f4
 8018c38:	240065f6 	.word	0x240065f6

08018c3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c40:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018c44:	b089      	sub	sp, #36	@ 0x24
 8018c46:	4680      	mov	r8, r0
 8018c48:	460c      	mov	r4, r1
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	4615      	mov	r5, r2
 8018c4e:	dd0e      	ble.n	8018c6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018c50:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	dd0a      	ble.n	8018c6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018c58:	4628      	mov	r0, r5
 8018c5a:	f7ff ff5b 	bl	8018b14 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018c5e:	4621      	mov	r1, r4
 8018c60:	f7fe f9fa 	bl	8017058 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018c64:	69eb      	ldr	r3, [r5, #28]
 8018c66:	b928      	cbnz	r0, 8018c74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018c68:	461d      	mov	r5, r3
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d1f4      	bne.n	8018c58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018c6e:	b009      	add	sp, #36	@ 0x24
 8018c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c74:	ae04      	add	r6, sp, #16
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	f000 80b5 	beq.w	8018de6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018c7c:	682b      	ldr	r3, [r5, #0]
 8018c7e:	4629      	mov	r1, r5
 8018c80:	a802      	add	r0, sp, #8
 8018c82:	68db      	ldr	r3, [r3, #12]
 8018c84:	4798      	blx	r3
 8018c86:	4628      	mov	r0, r5
 8018c88:	f7ff ff60 	bl	8018b4c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018c8c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8018c90:	4407      	add	r7, r0
 8018c92:	4628      	mov	r0, r5
 8018c94:	f7ff ff6e 	bl	8018b74 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018c98:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018c9c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018ca0:	b23f      	sxth	r7, r7
 8018ca2:	4418      	add	r0, r3
 8018ca4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018ca8:	4621      	mov	r1, r4
 8018caa:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018cae:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018cb2:	4630      	mov	r0, r6
 8018cb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018cb8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018cbc:	f7fa f852 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8018cc0:	4628      	mov	r0, r5
 8018cc2:	f7ff ff27 	bl	8018b14 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018cc6:	ab06      	add	r3, sp, #24
 8018cc8:	4602      	mov	r2, r0
 8018cca:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018cce:	e883 0003 	stmia.w	r3, {r0, r1}
 8018cd2:	4611      	mov	r1, r2
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f7fa f845 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8018cda:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018cde:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018ce2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018ce6:	4299      	cmp	r1, r3
 8018ce8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018cec:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018cf0:	d10b      	bne.n	8018d0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018cf2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018cf6:	4552      	cmp	r2, sl
 8018cf8:	d107      	bne.n	8018d0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018cfa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018cfe:	455a      	cmp	r2, fp
 8018d00:	d103      	bne.n	8018d0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018d02:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018d06:	454a      	cmp	r2, r9
 8018d08:	d06d      	beq.n	8018de6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018d0a:	f1bb 0f00 	cmp.w	fp, #0
 8018d0e:	dd65      	ble.n	8018ddc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018d10:	f1b9 0f00 	cmp.w	r9, #0
 8018d14:	dd62      	ble.n	8018ddc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018d16:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018d1a:	fa1f f08a 	uxth.w	r0, sl
 8018d1e:	4552      	cmp	r2, sl
 8018d20:	9000      	str	r0, [sp, #0]
 8018d22:	da12      	bge.n	8018d4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018d24:	9301      	str	r3, [sp, #4]
 8018d26:	9b00      	ldr	r3, [sp, #0]
 8018d28:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018d2c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018d30:	1a9a      	subs	r2, r3, r2
 8018d32:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018d36:	4631      	mov	r1, r6
 8018d38:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018d3c:	4640      	mov	r0, r8
 8018d3e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018d42:	69ea      	ldr	r2, [r5, #28]
 8018d44:	f7ff ff7a 	bl	8018c3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018d48:	9b01      	ldr	r3, [sp, #4]
 8018d4a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018d4e:	b29f      	uxth	r7, r3
 8018d50:	429a      	cmp	r2, r3
 8018d52:	da0d      	bge.n	8018d70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018d54:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018d58:	1aba      	subs	r2, r7, r2
 8018d5a:	f8ad a012 	strh.w	sl, [sp, #18]
 8018d5e:	4631      	mov	r1, r6
 8018d60:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018d64:	4640      	mov	r0, r8
 8018d66:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018d6a:	69ea      	ldr	r2, [r5, #28]
 8018d6c:	f7ff ff66 	bl	8018c3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018d70:	8822      	ldrh	r2, [r4, #0]
 8018d72:	445f      	add	r7, fp
 8018d74:	88a3      	ldrh	r3, [r4, #4]
 8018d76:	b2bf      	uxth	r7, r7
 8018d78:	4413      	add	r3, r2
 8018d7a:	b23a      	sxth	r2, r7
 8018d7c:	b29b      	uxth	r3, r3
 8018d7e:	b219      	sxth	r1, r3
 8018d80:	4291      	cmp	r1, r2
 8018d82:	dd0d      	ble.n	8018da0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018d84:	1bdb      	subs	r3, r3, r7
 8018d86:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018d8a:	f8ad a012 	strh.w	sl, [sp, #18]
 8018d8e:	4631      	mov	r1, r6
 8018d90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018d94:	4640      	mov	r0, r8
 8018d96:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018d9a:	69ea      	ldr	r2, [r5, #28]
 8018d9c:	f7ff ff4e 	bl	8018c3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018da0:	88e2      	ldrh	r2, [r4, #6]
 8018da2:	8863      	ldrh	r3, [r4, #2]
 8018da4:	4413      	add	r3, r2
 8018da6:	9a00      	ldr	r2, [sp, #0]
 8018da8:	444a      	add	r2, r9
 8018daa:	b29b      	uxth	r3, r3
 8018dac:	fa1f f982 	uxth.w	r9, r2
 8018db0:	b219      	sxth	r1, r3
 8018db2:	fa0f f289 	sxth.w	r2, r9
 8018db6:	428a      	cmp	r2, r1
 8018db8:	da15      	bge.n	8018de6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018dba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018dbe:	eba3 0309 	sub.w	r3, r3, r9
 8018dc2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018dc6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018dca:	4631      	mov	r1, r6
 8018dcc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018dd0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018dd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018dd8:	69ea      	ldr	r2, [r5, #28]
 8018dda:	e001      	b.n	8018de0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018ddc:	69ea      	ldr	r2, [r5, #28]
 8018dde:	4621      	mov	r1, r4
 8018de0:	4640      	mov	r0, r8
 8018de2:	f7ff ff2b 	bl	8018c3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018de6:	4628      	mov	r0, r5
 8018de8:	f7ff fe94 	bl	8018b14 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018dec:	6861      	ldr	r1, [r4, #4]
 8018dee:	4602      	mov	r2, r0
 8018df0:	4633      	mov	r3, r6
 8018df2:	6820      	ldr	r0, [r4, #0]
 8018df4:	c303      	stmia	r3!, {r0, r1}
 8018df6:	4611      	mov	r1, r2
 8018df8:	4630      	mov	r0, r6
 8018dfa:	f7f9 ffb3 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8018dfe:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	f77f af33 	ble.w	8018c6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018e08:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	f77f af2e 	ble.w	8018c6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018e12:	4628      	mov	r0, r5
 8018e14:	f7ff fe9a 	bl	8018b4c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018e18:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018e1c:	1a18      	subs	r0, r3, r0
 8018e1e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018e22:	4628      	mov	r0, r5
 8018e24:	f7ff fea6 	bl	8018b74 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018e28:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018e2c:	4631      	mov	r1, r6
 8018e2e:	1a18      	subs	r0, r3, r0
 8018e30:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018e34:	4628      	mov	r0, r5
 8018e36:	682b      	ldr	r3, [r5, #0]
 8018e38:	689b      	ldr	r3, [r3, #8]
 8018e3a:	4798      	blx	r3
 8018e3c:	e717      	b.n	8018c6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018e3e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018e3e:	b570      	push	{r4, r5, r6, lr}
 8018e40:	1d06      	adds	r6, r0, #4
 8018e42:	b086      	sub	sp, #24
 8018e44:	460c      	mov	r4, r1
 8018e46:	2300      	movs	r3, #0
 8018e48:	4631      	mov	r1, r6
 8018e4a:	4605      	mov	r5, r0
 8018e4c:	a802      	add	r0, sp, #8
 8018e4e:	9301      	str	r3, [sp, #4]
 8018e50:	f7ff fc7e 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e54:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018e58:	8822      	ldrh	r2, [r4, #0]
 8018e5a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018e5e:	1ad2      	subs	r2, r2, r3
 8018e60:	8863      	ldrh	r3, [r4, #2]
 8018e62:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018e66:	1a5b      	subs	r3, r3, r1
 8018e68:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018e6c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018e70:	aa01      	add	r2, sp, #4
 8018e72:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018e76:	4630      	mov	r0, r6
 8018e78:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018e7c:	a904      	add	r1, sp, #16
 8018e7e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018e82:	f7fa f847 	bl	8012f14 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018e86:	9a01      	ldr	r2, [sp, #4]
 8018e88:	b11a      	cbz	r2, 8018e92 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8018e8a:	4621      	mov	r1, r4
 8018e8c:	4628      	mov	r0, r5
 8018e8e:	f7ff fed5 	bl	8018c3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018e92:	b006      	add	sp, #24
 8018e94:	bd70      	pop	{r4, r5, r6, pc}

08018e96 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018e96:	4602      	mov	r2, r0
 8018e98:	b530      	push	{r4, r5, lr}
 8018e9a:	4604      	mov	r4, r0
 8018e9c:	b085      	sub	sp, #20
 8018e9e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018ea2:	460d      	mov	r5, r1
 8018ea4:	466b      	mov	r3, sp
 8018ea6:	6851      	ldr	r1, [r2, #4]
 8018ea8:	c303      	stmia	r3!, {r0, r1}
 8018eaa:	4629      	mov	r1, r5
 8018eac:	4668      	mov	r0, sp
 8018eae:	f7f9 ff59 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8018eb2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018eb6:	b12b      	cbz	r3, 8018ec4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018eb8:	4669      	mov	r1, sp
 8018eba:	4620      	mov	r0, r4
 8018ebc:	f7ff ffbf 	bl	8018e3e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018ec0:	b005      	add	sp, #20
 8018ec2:	bd30      	pop	{r4, r5, pc}
 8018ec4:	3404      	adds	r4, #4
 8018ec6:	a802      	add	r0, sp, #8
 8018ec8:	4621      	mov	r1, r4
 8018eca:	f7ff fc41 	bl	8018750 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018ece:	f8bd 3000 	ldrh.w	r3, [sp]
 8018ed2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018ed6:	4669      	mov	r1, sp
 8018ed8:	4620      	mov	r0, r4
 8018eda:	1a9b      	subs	r3, r3, r2
 8018edc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018ee0:	f8ad 3000 	strh.w	r3, [sp]
 8018ee4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018ee8:	1a9b      	subs	r3, r3, r2
 8018eea:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018eee:	f7f9 ffd8 	bl	8012ea2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018ef2:	e7e5      	b.n	8018ec0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018ef4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018ef4:	460b      	mov	r3, r1
 8018ef6:	680a      	ldr	r2, [r1, #0]
 8018ef8:	1d01      	adds	r1, r0, #4
 8018efa:	6992      	ldr	r2, [r2, #24]
 8018efc:	4618      	mov	r0, r3
 8018efe:	4710      	bx	r2

08018f00 <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst>:
 8018f00:	4298      	cmp	r0, r3
 8018f02:	d200      	bcs.n	8018f06 <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0x6>
 8018f04:	b913      	cbnz	r3, 8018f0c <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0xc>
 8018f06:	440a      	add	r2, r1
 8018f08:	b210      	sxth	r0, r2
 8018f0a:	4770      	bx	lr
 8018f0c:	ee07 0a90 	vmov	s15, r0
 8018f10:	ee07 3a10 	vmov	s14, r3
 8018f14:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8018f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018f1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018f20:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018f24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018f28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8018f2c:	ee07 2a90 	vmov	s15, r2
 8018f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018f34:	ee07 1a90 	vmov	s15, r1
 8018f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f3c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018f40:	eef4 6ae5 	vcmpe.f32	s13, s11
 8018f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f48:	bf55      	itete	pl
 8018f4a:	eef0 5a00 	vmovpl.f32	s11, #0	@ 0x40000000  2.0
 8018f4e:	ee26 7a87 	vmulmi.f32	s14, s13, s14
 8018f52:	ee76 6ae5 	vsubpl.f32	s13, s13, s11
 8018f56:	ee27 7a26 	vmulmi.f32	s14, s14, s13
 8018f5a:	bf57      	itett	pl
 8018f5c:	ee26 5aa6 	vmulpl.f32	s10, s13, s13
 8018f60:	eee7 7a26 	vfmami.f32	s15, s14, s13
 8018f64:	eee5 5a26 	vfmapl.f32	s11, s10, s13
 8018f68:	eee5 7a87 	vfmapl.f32	s15, s11, s14
 8018f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f74:	bfcc      	ite	gt
 8018f76:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 8018f7a:	ee77 7ac6 	vsuble.f32	s15, s15, s12
 8018f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018f82:	ee17 3a90 	vmov	r3, s15
 8018f86:	b218      	sxth	r0, r3
 8018f88:	4770      	bx	lr

08018f8a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8018f8a:	4298      	cmp	r0, r3
 8018f8c:	d200      	bcs.n	8018f90 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8018f8e:	b913      	cbnz	r3, 8018f96 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8018f90:	440a      	add	r2, r1
 8018f92:	b210      	sxth	r0, r2
 8018f94:	4770      	bx	lr
 8018f96:	ee07 2a90 	vmov	s15, r2
 8018f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018f9e:	ee07 0a90 	vmov	s15, r0
 8018fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018faa:	ee07 3a10 	vmov	s14, r3
 8018fae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018fb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018fb6:	ee07 1a90 	vmov	s15, r1
 8018fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018fc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fce:	bfcc      	ite	gt
 8018fd0:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8018fd4:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8018fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018fdc:	ee17 3a90 	vmov	r3, s15
 8018fe0:	b218      	sxth	r0, r3
 8018fe2:	4770      	bx	lr

08018fe4 <_ZN8touchgfx12TextProviderC1Ev>:
 8018fe4:	b538      	push	{r3, r4, r5, lr}
 8018fe6:	2500      	movs	r5, #0
 8018fe8:	2302      	movs	r3, #2
 8018fea:	4604      	mov	r4, r0
 8018fec:	220e      	movs	r2, #14
 8018fee:	7403      	strb	r3, [r0, #16]
 8018ff0:	4629      	mov	r1, r5
 8018ff2:	6145      	str	r5, [r0, #20]
 8018ff4:	7605      	strb	r5, [r0, #24]
 8018ff6:	83c5      	strh	r5, [r0, #30]
 8018ff8:	8405      	strh	r5, [r0, #32]
 8018ffa:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8018ffc:	8705      	strh	r5, [r0, #56]	@ 0x38
 8018ffe:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8019000:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8019004:	e9c0 5500 	strd	r5, r5, [r0]
 8019008:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801900c:	304c      	adds	r0, #76	@ 0x4c
 801900e:	f010 fc18 	bl	8029842 <memset>
 8019012:	2301      	movs	r3, #1
 8019014:	4620      	mov	r0, r4
 8019016:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801901a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801901e:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8019022:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8019026:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801902a:	f7f6 fb49 	bl	800f6c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801902e:	4620      	mov	r0, r4
 8019030:	bd38      	pop	{r3, r4, r5, pc}

08019032 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8019032:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019034:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019038:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801903a:	fab0 f080 	clz	r0, r0
 801903e:	0940      	lsrs	r0, r0, #5
 8019040:	4770      	bx	lr

08019042 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019042:	b530      	push	{r4, r5, lr}
 8019044:	2500      	movs	r5, #0
 8019046:	2401      	movs	r4, #1
 8019048:	6843      	ldr	r3, [r0, #4]
 801904a:	b913      	cbnz	r3, 8019052 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801904c:	6803      	ldr	r3, [r0, #0]
 801904e:	b313      	cbz	r3, 8019096 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019050:	6043      	str	r3, [r0, #4]
 8019052:	7e03      	ldrb	r3, [r0, #24]
 8019054:	b143      	cbz	r3, 8019068 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019056:	6943      	ldr	r3, [r0, #20]
 8019058:	b12b      	cbz	r3, 8019066 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801905a:	881a      	ldrh	r2, [r3, #0]
 801905c:	b11a      	cbz	r2, 8019066 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801905e:	1c9a      	adds	r2, r3, #2
 8019060:	6142      	str	r2, [r0, #20]
 8019062:	8818      	ldrh	r0, [r3, #0]
 8019064:	bd30      	pop	{r4, r5, pc}
 8019066:	7605      	strb	r5, [r0, #24]
 8019068:	6843      	ldr	r3, [r0, #4]
 801906a:	8819      	ldrh	r1, [r3, #0]
 801906c:	b199      	cbz	r1, 8019096 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801906e:	1c9a      	adds	r2, r3, #2
 8019070:	2902      	cmp	r1, #2
 8019072:	6042      	str	r2, [r0, #4]
 8019074:	d1f5      	bne.n	8019062 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019076:	7c03      	ldrb	r3, [r0, #16]
 8019078:	2b01      	cmp	r3, #1
 801907a:	d8e5      	bhi.n	8019048 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801907c:	1c5a      	adds	r2, r3, #1
 801907e:	3302      	adds	r3, #2
 8019080:	7402      	strb	r2, [r0, #16]
 8019082:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019086:	6143      	str	r3, [r0, #20]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d0dd      	beq.n	8019048 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801908c:	881b      	ldrh	r3, [r3, #0]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d0da      	beq.n	8019048 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019092:	7604      	strb	r4, [r0, #24]
 8019094:	e7d8      	b.n	8019048 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019096:	2000      	movs	r0, #0
 8019098:	e7e4      	b.n	8019064 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801909a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801909a:	6001      	str	r1, [r0, #0]
 801909c:	2100      	movs	r1, #0
 801909e:	b430      	push	{r4, r5}
 80190a0:	6041      	str	r1, [r0, #4]
 80190a2:	6815      	ldr	r5, [r2, #0]
 80190a4:	6085      	str	r5, [r0, #8]
 80190a6:	6852      	ldr	r2, [r2, #4]
 80190a8:	6443      	str	r3, [r0, #68]	@ 0x44
 80190aa:	9b02      	ldr	r3, [sp, #8]
 80190ac:	60c2      	str	r2, [r0, #12]
 80190ae:	7401      	strb	r1, [r0, #16]
 80190b0:	6141      	str	r1, [r0, #20]
 80190b2:	7601      	strb	r1, [r0, #24]
 80190b4:	8701      	strh	r1, [r0, #56]	@ 0x38
 80190b6:	8401      	strh	r1, [r0, #32]
 80190b8:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80190bc:	6483      	str	r3, [r0, #72]	@ 0x48
 80190be:	bc30      	pop	{r4, r5}
 80190c0:	f7f6 bafe 	b.w	800f6c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080190c4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 80190c4:	b408      	push	{r3}
 80190c6:	b510      	push	{r4, lr}
 80190c8:	b085      	sub	sp, #20
 80190ca:	ac07      	add	r4, sp, #28
 80190cc:	f854 3b04 	ldr.w	r3, [r4], #4
 80190d0:	9300      	str	r3, [sp, #0]
 80190d2:	4613      	mov	r3, r2
 80190d4:	4622      	mov	r2, r4
 80190d6:	9403      	str	r4, [sp, #12]
 80190d8:	f7ff ffdf 	bl	801909a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80190dc:	b005      	add	sp, #20
 80190de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190e2:	b001      	add	sp, #4
 80190e4:	4770      	bx	lr

080190e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80190e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190e8:	4605      	mov	r5, r0
 80190ea:	4608      	mov	r0, r1
 80190ec:	b1f1      	cbz	r1, 801912c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80190ee:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80190f2:	460b      	mov	r3, r1
 80190f4:	f101 0708 	add.w	r7, r1, #8
 80190f8:	4622      	mov	r2, r4
 80190fa:	6818      	ldr	r0, [r3, #0]
 80190fc:	3308      	adds	r3, #8
 80190fe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019102:	4626      	mov	r6, r4
 8019104:	42bb      	cmp	r3, r7
 8019106:	c603      	stmia	r6!, {r0, r1}
 8019108:	4634      	mov	r4, r6
 801910a:	d1f6      	bne.n	80190fa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801910c:	6818      	ldr	r0, [r3, #0]
 801910e:	6030      	str	r0, [r6, #0]
 8019110:	4610      	mov	r0, r2
 8019112:	889b      	ldrh	r3, [r3, #4]
 8019114:	80b3      	strh	r3, [r6, #4]
 8019116:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801911a:	015b      	lsls	r3, r3, #5
 801911c:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8019120:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8019124:	430b      	orrs	r3, r1
 8019126:	425b      	negs	r3, r3
 8019128:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801912c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801912e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801912e:	b538      	push	{r3, r4, r5, lr}
 8019130:	460c      	mov	r4, r1
 8019132:	6811      	ldr	r1, [r2, #0]
 8019134:	4610      	mov	r0, r2
 8019136:	68cd      	ldr	r5, [r1, #12]
 8019138:	4619      	mov	r1, r3
 801913a:	47a8      	blx	r5
 801913c:	2800      	cmp	r0, #0
 801913e:	bf08      	it	eq
 8019140:	4620      	moveq	r0, r4
 8019142:	bd38      	pop	{r3, r4, r5, pc}

08019144 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019148:	468c      	mov	ip, r1
 801914a:	4605      	mov	r5, r0
 801914c:	4614      	mov	r4, r2
 801914e:	b942      	cbnz	r2, 8019162 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8019150:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8019154:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8019158:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801915c:	4620      	mov	r0, r4
 801915e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019162:	7b50      	ldrb	r0, [r2, #13]
 8019164:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8019168:	8893      	ldrh	r3, [r2, #4]
 801916a:	0106      	lsls	r6, r0, #4
 801916c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8019170:	79e6      	ldrb	r6, [r4, #7]
 8019172:	4316      	orrs	r6, r2
 8019174:	185a      	adds	r2, r3, r1
 8019176:	b291      	uxth	r1, r2
 8019178:	b2b7      	uxth	r7, r6
 801917a:	291d      	cmp	r1, #29
 801917c:	d87f      	bhi.n	801927e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801917e:	2201      	movs	r2, #1
 8019180:	10f6      	asrs	r6, r6, #3
 8019182:	408a      	lsls	r2, r1
 8019184:	498b      	ldr	r1, [pc, #556]	@ (80193b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8019186:	420a      	tst	r2, r1
 8019188:	d12e      	bne.n	80191e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801918a:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801918e:	d076      	beq.n	801927e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8019190:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8019194:	4623      	mov	r3, r4
 8019196:	f104 0e08 	add.w	lr, r4, #8
 801919a:	4614      	mov	r4, r2
 801919c:	6818      	ldr	r0, [r3, #0]
 801919e:	3308      	adds	r3, #8
 80191a0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80191a4:	4694      	mov	ip, r2
 80191a6:	4573      	cmp	r3, lr
 80191a8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80191ac:	4662      	mov	r2, ip
 80191ae:	d1f5      	bne.n	801919c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80191b0:	6818      	ldr	r0, [r3, #0]
 80191b2:	f8cc 0000 	str.w	r0, [ip]
 80191b6:	889b      	ldrh	r3, [r3, #4]
 80191b8:	f8ac 3004 	strh.w	r3, [ip, #4]
 80191bc:	b2b3      	uxth	r3, r6
 80191be:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 80191c2:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 80191c6:	1aca      	subs	r2, r1, r3
 80191c8:	1bcf      	subs	r7, r1, r7
 80191ca:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80191ce:	b292      	uxth	r2, r2
 80191d0:	1afb      	subs	r3, r7, r3
 80191d2:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 80191d6:	10d2      	asrs	r2, r2, #3
 80191d8:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80191dc:	4302      	orrs	r2, r0
 80191de:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 80191e2:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 80191e6:	e7b9      	b.n	801915c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80191e8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80191ec:	4623      	mov	r3, r4
 80191ee:	f104 0808 	add.w	r8, r4, #8
 80191f2:	4614      	mov	r4, r2
 80191f4:	6818      	ldr	r0, [r3, #0]
 80191f6:	3308      	adds	r3, #8
 80191f8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80191fc:	4696      	mov	lr, r2
 80191fe:	4543      	cmp	r3, r8
 8019200:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019204:	4672      	mov	r2, lr
 8019206:	d1f5      	bne.n	80191f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8019208:	6818      	ldr	r0, [r3, #0]
 801920a:	f8ce 0000 	str.w	r0, [lr]
 801920e:	889b      	ldrh	r3, [r3, #4]
 8019210:	f8ae 3004 	strh.w	r3, [lr, #4]
 8019214:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8019216:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801921a:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801921c:	f640 6333 	movw	r3, #3635	@ 0xe33
 8019220:	4299      	cmp	r1, r3
 8019222:	d111      	bne.n	8019248 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8019224:	f8dc 3000 	ldr.w	r3, [ip]
 8019228:	4660      	mov	r0, ip
 801922a:	68db      	ldr	r3, [r3, #12]
 801922c:	4798      	blx	r3
 801922e:	7b41      	ldrb	r1, [r0, #13]
 8019230:	00cb      	lsls	r3, r1, #3
 8019232:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019236:	7a03      	ldrb	r3, [r0, #8]
 8019238:	4313      	orrs	r3, r2
 801923a:	064a      	lsls	r2, r1, #25
 801923c:	bf44      	itt	mi
 801923e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019242:	b21b      	sxthmi	r3, r3
 8019244:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8019248:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801924c:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8019250:	443b      	add	r3, r7
 8019252:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8019256:	4433      	add	r3, r6
 8019258:	b29b      	uxth	r3, r3
 801925a:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801925e:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8019262:	10db      	asrs	r3, r3, #3
 8019264:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019268:	4313      	orrs	r3, r2
 801926a:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801926e:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8019272:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8019276:	1a9b      	subs	r3, r3, r2
 8019278:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801927c:	e76e      	b.n	801915c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801927e:	f023 0204 	bic.w	r2, r3, #4
 8019282:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8019286:	428a      	cmp	r2, r1
 8019288:	d003      	beq.n	8019292 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801928a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801928e:	4293      	cmp	r3, r2
 8019290:	d138      	bne.n	8019304 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8019292:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8019296:	4622      	mov	r2, r4
 8019298:	f104 0808 	add.w	r8, r4, #8
 801929c:	4634      	mov	r4, r6
 801929e:	6810      	ldr	r0, [r2, #0]
 80192a0:	3208      	adds	r2, #8
 80192a2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80192a6:	46b6      	mov	lr, r6
 80192a8:	4542      	cmp	r2, r8
 80192aa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80192ae:	4676      	mov	r6, lr
 80192b0:	d1f5      	bne.n	801929e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 80192b2:	6810      	ldr	r0, [r2, #0]
 80192b4:	3b01      	subs	r3, #1
 80192b6:	4621      	mov	r1, r4
 80192b8:	f8ce 0000 	str.w	r0, [lr]
 80192bc:	b29b      	uxth	r3, r3
 80192be:	8892      	ldrh	r2, [r2, #4]
 80192c0:	4628      	mov	r0, r5
 80192c2:	f8ae 2004 	strh.w	r2, [lr, #4]
 80192c6:	4662      	mov	r2, ip
 80192c8:	f7ff ff31 	bl	801912e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80192cc:	7b41      	ldrb	r1, [r0, #13]
 80192ce:	00cb      	lsls	r3, r1, #3
 80192d0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80192d4:	7a03      	ldrb	r3, [r0, #8]
 80192d6:	0648      	lsls	r0, r1, #25
 80192d8:	ea43 0302 	orr.w	r3, r3, r2
 80192dc:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80192e0:	bf44      	itt	mi
 80192e2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80192e6:	b21b      	sxthmi	r3, r3
 80192e8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80192ec:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80192f0:	005b      	lsls	r3, r3, #1
 80192f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80192f6:	4313      	orrs	r3, r2
 80192f8:	115a      	asrs	r2, r3, #5
 80192fa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80192fe:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8019302:	e047      	b.n	8019394 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8019304:	00c2      	lsls	r2, r0, #3
 8019306:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801930a:	7a22      	ldrb	r2, [r4, #8]
 801930c:	430a      	orrs	r2, r1
 801930e:	0641      	lsls	r1, r0, #25
 8019310:	f640 6109 	movw	r1, #3593	@ 0xe09
 8019314:	bf44      	itt	mi
 8019316:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801931a:	b212      	sxthmi	r2, r2
 801931c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8019320:	f023 0210 	bic.w	r2, r3, #16
 8019324:	428a      	cmp	r2, r1
 8019326:	d003      	beq.n	8019330 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8019328:	f640 6213 	movw	r2, #3603	@ 0xe13
 801932c:	4293      	cmp	r3, r2
 801932e:	d13e      	bne.n	80193ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8019330:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8019334:	f104 0808 	add.w	r8, r4, #8
 8019338:	4696      	mov	lr, r2
 801933a:	6820      	ldr	r0, [r4, #0]
 801933c:	3408      	adds	r4, #8
 801933e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8019342:	4616      	mov	r6, r2
 8019344:	4544      	cmp	r4, r8
 8019346:	c603      	stmia	r6!, {r0, r1}
 8019348:	4632      	mov	r2, r6
 801934a:	d1f6      	bne.n	801933a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801934c:	6820      	ldr	r0, [r4, #0]
 801934e:	6030      	str	r0, [r6, #0]
 8019350:	4628      	mov	r0, r5
 8019352:	88a1      	ldrh	r1, [r4, #4]
 8019354:	4674      	mov	r4, lr
 8019356:	80b1      	strh	r1, [r6, #4]
 8019358:	4671      	mov	r1, lr
 801935a:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801935e:	0076      	lsls	r6, r6, #1
 8019360:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8019364:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8019368:	4316      	orrs	r6, r2
 801936a:	f640 6213 	movw	r2, #3603	@ 0xe13
 801936e:	4293      	cmp	r3, r2
 8019370:	4662      	mov	r2, ip
 8019372:	bf16      	itet	ne
 8019374:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019378:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801937c:	b29b      	uxthne	r3, r3
 801937e:	f7ff fed6 	bl	801912e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019382:	7b43      	ldrb	r3, [r0, #13]
 8019384:	7a82      	ldrb	r2, [r0, #10]
 8019386:	005b      	lsls	r3, r3, #1
 8019388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801938c:	4313      	orrs	r3, r2
 801938e:	1af6      	subs	r6, r6, r3
 8019390:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8019394:	7b61      	ldrb	r1, [r4, #13]
 8019396:	00cb      	lsls	r3, r1, #3
 8019398:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801939c:	7a23      	ldrb	r3, [r4, #8]
 801939e:	4313      	orrs	r3, r2
 80193a0:	064a      	lsls	r2, r1, #25
 80193a2:	bf44      	itt	mi
 80193a4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80193a8:	b21b      	sxthmi	r3, r3
 80193aa:	1bdb      	subs	r3, r3, r7
 80193ac:	e719      	b.n	80191e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80193ae:	2300      	movs	r3, #0
 80193b0:	e7a5      	b.n	80192fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 80193b2:	bf00      	nop
 80193b4:	3fc00079 	.word	0x3fc00079

080193b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80193b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80193bc:	4604      	mov	r4, r0
 80193be:	b942      	cbnz	r2, 80193d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80193c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80193c4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80193c8:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80193cc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80193d0:	e047      	b.n	8019462 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80193d2:	7b51      	ldrb	r1, [r2, #13]
 80193d4:	8893      	ldrh	r3, [r2, #4]
 80193d6:	010d      	lsls	r5, r1, #4
 80193d8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80193dc:	79d5      	ldrb	r5, [r2, #7]
 80193de:	4305      	orrs	r5, r0
 80193e0:	2d04      	cmp	r5, #4
 80193e2:	bfcc      	ite	gt
 80193e4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80193e8:	f04f 0e01 	movle.w	lr, #1
 80193ec:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80193f0:	f200 80ab 	bhi.w	801954a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80193f4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80193f8:	4283      	cmp	r3, r0
 80193fa:	d216      	bcs.n	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80193fc:	f240 605b 	movw	r0, #1627	@ 0x65b
 8019400:	4283      	cmp	r3, r0
 8019402:	d859      	bhi.n	80194b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8019404:	f240 6057 	movw	r0, #1623	@ 0x657
 8019408:	4283      	cmp	r3, r0
 801940a:	d20e      	bcs.n	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801940c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8019410:	d24a      	bcs.n	80194a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8019412:	f240 604e 	movw	r0, #1614	@ 0x64e
 8019416:	4283      	cmp	r3, r0
 8019418:	d207      	bcs.n	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801941a:	f240 601a 	movw	r0, #1562	@ 0x61a
 801941e:	4283      	cmp	r3, r0
 8019420:	d02a      	beq.n	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019422:	d821      	bhi.n	8019468 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019424:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8019428:	d35b      	bcc.n	80194e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801942a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801942e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019432:	f040 80d0 	bne.w	80195d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019436:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801943a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801943e:	f040 80ca 	bne.w	80195d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019442:	00cb      	lsls	r3, r1, #3
 8019444:	0649      	lsls	r1, r1, #25
 8019446:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801944a:	7a13      	ldrb	r3, [r2, #8]
 801944c:	ea43 0300 	orr.w	r3, r3, r0
 8019450:	bf44      	itt	mi
 8019452:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019456:	b21b      	sxthmi	r3, r3
 8019458:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801945c:	1b5d      	subs	r5, r3, r5
 801945e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8019462:	4610      	mov	r0, r2
 8019464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019468:	f240 604b 	movw	r0, #1611	@ 0x64b
 801946c:	4283      	cmp	r3, r0
 801946e:	d338      	bcc.n	80194e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019470:	f240 604c 	movw	r0, #1612	@ 0x64c
 8019474:	4283      	cmp	r3, r0
 8019476:	d9d8      	bls.n	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019478:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801947c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8019480:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8019484:	f040 80f3 	bne.w	801966e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019488:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801948c:	f040 80ef 	bne.w	801966e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019490:	00cb      	lsls	r3, r1, #3
 8019492:	064e      	lsls	r6, r1, #25
 8019494:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8019498:	7a13      	ldrb	r3, [r2, #8]
 801949a:	ea43 0300 	orr.w	r3, r3, r0
 801949e:	bf44      	itt	mi
 80194a0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80194a4:	b21b      	sxthmi	r3, r3
 80194a6:	e7d9      	b.n	801945c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80194a8:	f240 6054 	movw	r0, #1620	@ 0x654
 80194ac:	4283      	cmp	r3, r0
 80194ae:	d8e3      	bhi.n	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80194b0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80194b4:	d9e0      	bls.n	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80194b6:	e7b8      	b.n	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80194b8:	f240 6074 	movw	r0, #1652	@ 0x674
 80194bc:	4283      	cmp	r3, r0
 80194be:	d0b4      	beq.n	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80194c0:	d82d      	bhi.n	801951e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80194c2:	f240 605e 	movw	r0, #1630	@ 0x65e
 80194c6:	4283      	cmp	r3, r0
 80194c8:	d804      	bhi.n	80194d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80194ca:	f240 605d 	movw	r0, #1629	@ 0x65d
 80194ce:	4283      	cmp	r3, r0
 80194d0:	d3d2      	bcc.n	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80194d2:	e7aa      	b.n	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80194d4:	f240 605f 	movw	r0, #1631	@ 0x65f
 80194d8:	4283      	cmp	r3, r0
 80194da:	d0cd      	beq.n	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80194dc:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80194e0:	d0a3      	beq.n	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80194e2:	00cb      	lsls	r3, r1, #3
 80194e4:	0649      	lsls	r1, r1, #25
 80194e6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80194ea:	7a13      	ldrb	r3, [r2, #8]
 80194ec:	ea43 0300 	orr.w	r3, r3, r0
 80194f0:	bf44      	itt	mi
 80194f2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80194f6:	b21b      	sxthmi	r3, r3
 80194f8:	1b5d      	subs	r5, r3, r5
 80194fa:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80194fe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8019502:	7b53      	ldrb	r3, [r2, #13]
 8019504:	015b      	lsls	r3, r3, #5
 8019506:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801950a:	7993      	ldrb	r3, [r2, #6]
 801950c:	430b      	orrs	r3, r1
 801950e:	2105      	movs	r1, #5
 8019510:	005b      	lsls	r3, r3, #1
 8019512:	fb93 f3f1 	sdiv	r3, r3, r1
 8019516:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801951a:	440b      	add	r3, r1
 801951c:	e756      	b.n	80193cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801951e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8019522:	4283      	cmp	r3, r0
 8019524:	d809      	bhi.n	801953a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8019526:	f240 60df 	movw	r0, #1759	@ 0x6df
 801952a:	4283      	cmp	r3, r0
 801952c:	f4bf af7d 	bcs.w	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019530:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8019534:	2b05      	cmp	r3, #5
 8019536:	d8d4      	bhi.n	80194e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019538:	e777      	b.n	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801953a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801953e:	4283      	cmp	r3, r0
 8019540:	d09a      	beq.n	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019542:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8019546:	4283      	cmp	r3, r0
 8019548:	e7ca      	b.n	80194e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801954a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801954e:	d22b      	bcs.n	80195a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019550:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8019554:	4283      	cmp	r3, r0
 8019556:	d28f      	bcs.n	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019558:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801955c:	4283      	cmp	r3, r0
 801955e:	d816      	bhi.n	801958e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019560:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8019564:	4283      	cmp	r3, r0
 8019566:	f4bf af60 	bcs.w	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801956a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801956e:	4283      	cmp	r3, r0
 8019570:	d80a      	bhi.n	8019588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8019572:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8019576:	4283      	cmp	r3, r0
 8019578:	f4bf af57 	bcs.w	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801957c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8019580:	4283      	cmp	r3, r0
 8019582:	f43f af79 	beq.w	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019586:	e7ac      	b.n	80194e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019588:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801958c:	e7f8      	b.n	8019580 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801958e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8019592:	4283      	cmp	r3, r0
 8019594:	d802      	bhi.n	801959c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8019596:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801959a:	e798      	b.n	80194ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801959c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 80195a0:	4283      	cmp	r3, r0
 80195a2:	f47f af42 	bne.w	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80195a6:	e767      	b.n	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80195a8:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 80195ac:	4283      	cmp	r3, r0
 80195ae:	f43f af63 	beq.w	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80195b2:	d802      	bhi.n	80195ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80195b4:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80195b8:	e7f2      	b.n	80195a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80195ba:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 80195be:	4283      	cmp	r3, r0
 80195c0:	d805      	bhi.n	80195ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80195c2:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80195c6:	4283      	cmp	r3, r0
 80195c8:	f4ff af2f 	bcc.w	801942a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80195cc:	e754      	b.n	8019478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80195ce:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80195d2:	4283      	cmp	r3, r0
 80195d4:	e7af      	b.n	8019536 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80195d6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80195da:	4617      	mov	r7, r2
 80195dc:	f102 0808 	add.w	r8, r2, #8
 80195e0:	4666      	mov	r6, ip
 80195e2:	6838      	ldr	r0, [r7, #0]
 80195e4:	3708      	adds	r7, #8
 80195e6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80195ea:	46e6      	mov	lr, ip
 80195ec:	4547      	cmp	r7, r8
 80195ee:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80195f2:	46f4      	mov	ip, lr
 80195f4:	d1f5      	bne.n	80195e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80195f6:	6838      	ldr	r0, [r7, #0]
 80195f8:	f8ce 0000 	str.w	r0, [lr]
 80195fc:	88b9      	ldrh	r1, [r7, #4]
 80195fe:	f8ae 1004 	strh.w	r1, [lr, #4]
 8019602:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8019606:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801960a:	d009      	beq.n	8019620 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801960c:	7b51      	ldrb	r1, [r2, #13]
 801960e:	7992      	ldrb	r2, [r2, #6]
 8019610:	0149      	lsls	r1, r1, #5
 8019612:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8019616:	4311      	orrs	r1, r2
 8019618:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801961c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8019620:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019624:	b2ad      	uxth	r5, r5
 8019626:	d00d      	beq.n	8019644 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8019628:	442b      	add	r3, r5
 801962a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801962e:	b29b      	uxth	r3, r3
 8019630:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8019634:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8019638:	10db      	asrs	r3, r3, #3
 801963a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801963e:	4313      	orrs	r3, r2
 8019640:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8019644:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8019648:	00cb      	lsls	r3, r1, #3
 801964a:	064f      	lsls	r7, r1, #25
 801964c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019650:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8019654:	ea43 0302 	orr.w	r3, r3, r2
 8019658:	bf44      	itt	mi
 801965a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801965e:	b21b      	sxthmi	r3, r3
 8019660:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019664:	1b5b      	subs	r3, r3, r5
 8019666:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801966a:	4632      	mov	r2, r6
 801966c:	e6f9      	b.n	8019462 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801966e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8019672:	4617      	mov	r7, r2
 8019674:	f102 0908 	add.w	r9, r2, #8
 8019678:	4666      	mov	r6, ip
 801967a:	6838      	ldr	r0, [r7, #0]
 801967c:	3708      	adds	r7, #8
 801967e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019682:	46e0      	mov	r8, ip
 8019684:	454f      	cmp	r7, r9
 8019686:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801968a:	46c4      	mov	ip, r8
 801968c:	d1f5      	bne.n	801967a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801968e:	6838      	ldr	r0, [r7, #0]
 8019690:	f8c8 0000 	str.w	r0, [r8]
 8019694:	88b9      	ldrh	r1, [r7, #4]
 8019696:	f8a8 1004 	strh.w	r1, [r8, #4]
 801969a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801969e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80196a2:	d009      	beq.n	80196b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80196a4:	7b51      	ldrb	r1, [r2, #13]
 80196a6:	7992      	ldrb	r2, [r2, #6]
 80196a8:	0149      	lsls	r1, r1, #5
 80196aa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80196ae:	4311      	orrs	r1, r2
 80196b0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80196b4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80196b8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80196bc:	d00e      	beq.n	80196dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80196be:	eba3 030e 	sub.w	r3, r3, lr
 80196c2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80196c6:	b29b      	uxth	r3, r3
 80196c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80196cc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80196d0:	10db      	asrs	r3, r3, #3
 80196d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80196d6:	4313      	orrs	r3, r2
 80196d8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80196dc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80196e0:	00cb      	lsls	r3, r1, #3
 80196e2:	0648      	lsls	r0, r1, #25
 80196e4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80196e8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80196ec:	ea43 0302 	orr.w	r3, r3, r2
 80196f0:	bf44      	itt	mi
 80196f2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80196f6:	b21b      	sxthmi	r3, r3
 80196f8:	1b5d      	subs	r5, r3, r5
 80196fa:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80196fe:	e7b4      	b.n	801966a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08019700 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019704:	461e      	mov	r6, r3
 8019706:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019708:	4604      	mov	r4, r0
 801970a:	4617      	mov	r7, r2
 801970c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019710:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8019714:	f7f5 ff2e 	bl	800f574 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019718:	4605      	mov	r5, r0
 801971a:	b918      	cbnz	r0, 8019724 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801971c:	6030      	str	r0, [r6, #0]
 801971e:	4628      	mov	r0, r5
 8019720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019724:	683b      	ldr	r3, [r7, #0]
 8019726:	4601      	mov	r1, r0
 8019728:	4638      	mov	r0, r7
 801972a:	68db      	ldr	r3, [r3, #12]
 801972c:	4798      	blx	r3
 801972e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8019732:	4602      	mov	r2, r0
 8019734:	6030      	str	r0, [r6, #0]
 8019736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801973a:	d213      	bcs.n	8019764 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801973c:	4643      	mov	r3, r8
 801973e:	4639      	mov	r1, r7
 8019740:	4620      	mov	r0, r4
 8019742:	f7ff fe39 	bl	80193b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019746:	6030      	str	r0, [r6, #0]
 8019748:	6833      	ldr	r3, [r6, #0]
 801974a:	b143      	cbz	r3, 801975e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801974c:	7b5a      	ldrb	r2, [r3, #13]
 801974e:	7a9b      	ldrb	r3, [r3, #10]
 8019750:	0052      	lsls	r2, r2, #1
 8019752:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8019756:	4313      	orrs	r3, r2
 8019758:	bf0c      	ite	eq
 801975a:	2301      	moveq	r3, #1
 801975c:	2300      	movne	r3, #0
 801975e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8019762:	e7dc      	b.n	801971e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8019764:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8019768:	b29b      	uxth	r3, r3
 801976a:	2b7f      	cmp	r3, #127	@ 0x7f
 801976c:	d804      	bhi.n	8019778 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801976e:	4639      	mov	r1, r7
 8019770:	4620      	mov	r0, r4
 8019772:	f7ff fce7 	bl	8019144 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019776:	e7e6      	b.n	8019746 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019778:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801977c:	2b00      	cmp	r3, #0
 801977e:	d0e3      	beq.n	8019748 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019780:	f640 1302 	movw	r3, #2306	@ 0x902
 8019784:	429d      	cmp	r5, r3
 8019786:	d1df      	bne.n	8019748 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019788:	4601      	mov	r1, r0
 801978a:	4620      	mov	r0, r4
 801978c:	f7ff fcab 	bl	80190e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019790:	e7d9      	b.n	8019746 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08019792 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8019792:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019796:	461e      	mov	r6, r3
 8019798:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801979a:	4604      	mov	r4, r0
 801979c:	4617      	mov	r7, r2
 801979e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80197a2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80197a6:	f7f5 fee5 	bl	800f574 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80197aa:	4605      	mov	r5, r0
 80197ac:	b918      	cbnz	r0, 80197b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 80197ae:	6030      	str	r0, [r6, #0]
 80197b0:	4628      	mov	r0, r5
 80197b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197b6:	683b      	ldr	r3, [r7, #0]
 80197b8:	4601      	mov	r1, r0
 80197ba:	4638      	mov	r0, r7
 80197bc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80197c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80197c4:	47c8      	blx	r9
 80197c6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80197ca:	4602      	mov	r2, r0
 80197cc:	6030      	str	r0, [r6, #0]
 80197ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80197d2:	d213      	bcs.n	80197fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 80197d4:	4643      	mov	r3, r8
 80197d6:	4639      	mov	r1, r7
 80197d8:	4620      	mov	r0, r4
 80197da:	f7ff fded 	bl	80193b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80197de:	6030      	str	r0, [r6, #0]
 80197e0:	6833      	ldr	r3, [r6, #0]
 80197e2:	b143      	cbz	r3, 80197f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80197e4:	7b5a      	ldrb	r2, [r3, #13]
 80197e6:	7a9b      	ldrb	r3, [r3, #10]
 80197e8:	0052      	lsls	r2, r2, #1
 80197ea:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80197ee:	4313      	orrs	r3, r2
 80197f0:	bf0c      	ite	eq
 80197f2:	2301      	moveq	r3, #1
 80197f4:	2300      	movne	r3, #0
 80197f6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80197fa:	e7d9      	b.n	80197b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80197fc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8019800:	b29b      	uxth	r3, r3
 8019802:	2b7f      	cmp	r3, #127	@ 0x7f
 8019804:	d804      	bhi.n	8019810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8019806:	4639      	mov	r1, r7
 8019808:	4620      	mov	r0, r4
 801980a:	f7ff fc9b 	bl	8019144 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801980e:	e7e6      	b.n	80197de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8019810:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8019814:	2b00      	cmp	r3, #0
 8019816:	d0e3      	beq.n	80197e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019818:	f640 1302 	movw	r3, #2306	@ 0x902
 801981c:	429d      	cmp	r5, r3
 801981e:	d1df      	bne.n	80197e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019820:	4601      	mov	r1, r0
 8019822:	4620      	mov	r0, r4
 8019824:	f7ff fc5f 	bl	80190e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019828:	e7d9      	b.n	80197de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801982a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801982a:	b510      	push	{r4, lr}
 801982c:	4604      	mov	r4, r0
 801982e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8019832:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8019834:	b1e1      	cbz	r1, 8019870 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8019836:	2b0a      	cmp	r3, #10
 8019838:	d02d      	beq.n	8019896 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801983a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801983c:	3901      	subs	r1, #1
 801983e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019842:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8019844:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8019848:	1c51      	adds	r1, r2, #1
 801984a:	b289      	uxth	r1, r1
 801984c:	2901      	cmp	r1, #1
 801984e:	bf8a      	itet	hi
 8019850:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019854:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8019856:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8019858:	1c5a      	adds	r2, r3, #1
 801985a:	8722      	strh	r2, [r4, #56]	@ 0x38
 801985c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801985e:	4413      	add	r3, r2
 8019860:	b29b      	uxth	r3, r3
 8019862:	2b09      	cmp	r3, #9
 8019864:	bf88      	it	hi
 8019866:	3b0a      	subhi	r3, #10
 8019868:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801986c:	8458      	strh	r0, [r3, #34]	@ 0x22
 801986e:	e7de      	b.n	801982e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019870:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8019872:	2b0a      	cmp	r3, #10
 8019874:	d00f      	beq.n	8019896 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8019876:	4620      	mov	r0, r4
 8019878:	f7ff fbe3 	bl	8019042 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801987c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801987e:	1c5a      	adds	r2, r3, #1
 8019880:	8722      	strh	r2, [r4, #56]	@ 0x38
 8019882:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019884:	4413      	add	r3, r2
 8019886:	b29b      	uxth	r3, r3
 8019888:	2b09      	cmp	r3, #9
 801988a:	bf88      	it	hi
 801988c:	3b0a      	subhi	r3, #10
 801988e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019892:	8458      	strh	r0, [r3, #34]	@ 0x22
 8019894:	e7ec      	b.n	8019870 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8019896:	bd10      	pop	{r4, pc}

08019898 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019898:	b538      	push	{r3, r4, r5, lr}
 801989a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801989c:	4604      	mov	r4, r0
 801989e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80198a2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80198a4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80198a6:	3a01      	subs	r2, #1
 80198a8:	8702      	strh	r2, [r0, #56]	@ 0x38
 80198aa:	1c5a      	adds	r2, r3, #1
 80198ac:	b292      	uxth	r2, r2
 80198ae:	2a09      	cmp	r2, #9
 80198b0:	bf8a      	itet	hi
 80198b2:	3b09      	subhi	r3, #9
 80198b4:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80198b6:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80198b8:	f7ff ffb7 	bl	801982a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80198bc:	8c23      	ldrh	r3, [r4, #32]
 80198be:	2b01      	cmp	r3, #1
 80198c0:	bf9c      	itt	ls
 80198c2:	3301      	addls	r3, #1
 80198c4:	8423      	strhls	r3, [r4, #32]
 80198c6:	8be3      	ldrh	r3, [r4, #30]
 80198c8:	b90b      	cbnz	r3, 80198ce <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80198ca:	2302      	movs	r3, #2
 80198cc:	83e3      	strh	r3, [r4, #30]
 80198ce:	8be3      	ldrh	r3, [r4, #30]
 80198d0:	4628      	mov	r0, r5
 80198d2:	3b01      	subs	r3, #1
 80198d4:	b29b      	uxth	r3, r3
 80198d6:	83e3      	strh	r3, [r4, #30]
 80198d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80198dc:	8365      	strh	r5, [r4, #26]
 80198de:	bd38      	pop	{r3, r4, r5, pc}

080198e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80198e0:	428a      	cmp	r2, r1
 80198e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198e6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80198e8:	d932      	bls.n	8019950 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80198ea:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80198ec:	1a54      	subs	r4, r2, r1
 80198ee:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80198f2:	19ee      	adds	r6, r5, r7
 80198f4:	fa1f fe84 	uxth.w	lr, r4
 80198f8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 80198fc:	3e01      	subs	r6, #1
 80198fe:	b2b4      	uxth	r4, r6
 8019900:	eba4 090e 	sub.w	r9, r4, lr
 8019904:	fa1f f989 	uxth.w	r9, r9
 8019908:	2c09      	cmp	r4, #9
 801990a:	4626      	mov	r6, r4
 801990c:	bf88      	it	hi
 801990e:	f1a4 060a 	subhi.w	r6, r4, #10
 8019912:	f1bc 0f00 	cmp.w	ip, #0
 8019916:	f104 34ff 	add.w	r4, r4, #4294967295
 801991a:	bf08      	it	eq
 801991c:	f04f 0c02 	moveq.w	ip, #2
 8019920:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019924:	b2a4      	uxth	r4, r4
 8019926:	f10c 3cff 	add.w	ip, ip, #4294967295
 801992a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801992e:	454c      	cmp	r4, r9
 8019930:	fa1f fc8c 	uxth.w	ip, ip
 8019934:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019938:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801993c:	d1e4      	bne.n	8019908 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801993e:	eba5 050e 	sub.w	r5, r5, lr
 8019942:	eb0e 0408 	add.w	r4, lr, r8
 8019946:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801994a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801994c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8019950:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8019952:	250a      	movs	r5, #10
 8019954:	1a64      	subs	r4, r4, r1
 8019956:	4439      	add	r1, r7
 8019958:	b289      	uxth	r1, r1
 801995a:	8704      	strh	r4, [r0, #56]	@ 0x38
 801995c:	2909      	cmp	r1, #9
 801995e:	bf88      	it	hi
 8019960:	390a      	subhi	r1, #10
 8019962:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8019964:	b18a      	cbz	r2, 801998a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8019966:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8019968:	3a01      	subs	r2, #1
 801996a:	3101      	adds	r1, #1
 801996c:	b292      	uxth	r2, r2
 801996e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019972:	8701      	strh	r1, [r0, #56]	@ 0x38
 8019974:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8019976:	b901      	cbnz	r1, 801997a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8019978:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801997a:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801997c:	3901      	subs	r1, #1
 801997e:	b289      	uxth	r1, r1
 8019980:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8019982:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019986:	844c      	strh	r4, [r1, #34]	@ 0x22
 8019988:	e7ec      	b.n	8019964 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801998a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801998e:	f7ff bf4c 	b.w	801982a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08019992 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019992:	b570      	push	{r4, r5, r6, lr}
 8019994:	2500      	movs	r5, #0
 8019996:	4295      	cmp	r5, r2
 8019998:	d011      	beq.n	80199be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801999a:	8bc4      	ldrh	r4, [r0, #30]
 801999c:	f831 6b02 	ldrh.w	r6, [r1], #2
 80199a0:	4414      	add	r4, r2
 80199a2:	3c01      	subs	r4, #1
 80199a4:	1b64      	subs	r4, r4, r5
 80199a6:	b2a4      	uxth	r4, r4
 80199a8:	2c01      	cmp	r4, #1
 80199aa:	bf88      	it	hi
 80199ac:	3c02      	subhi	r4, #2
 80199ae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80199b2:	8b64      	ldrh	r4, [r4, #26]
 80199b4:	42b4      	cmp	r4, r6
 80199b6:	d117      	bne.n	80199e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80199b8:	3501      	adds	r5, #1
 80199ba:	b2ad      	uxth	r5, r5
 80199bc:	e7eb      	b.n	8019996 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80199be:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80199c2:	2400      	movs	r4, #0
 80199c4:	4413      	add	r3, r2
 80199c6:	b2a2      	uxth	r2, r4
 80199c8:	429a      	cmp	r2, r3
 80199ca:	da0f      	bge.n	80199ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80199cc:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80199ce:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80199d2:	3401      	adds	r4, #1
 80199d4:	4432      	add	r2, r6
 80199d6:	b292      	uxth	r2, r2
 80199d8:	2a09      	cmp	r2, #9
 80199da:	bf88      	it	hi
 80199dc:	3a0a      	subhi	r2, #10
 80199de:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80199e2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80199e4:	42aa      	cmp	r2, r5
 80199e6:	d0ee      	beq.n	80199c6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80199e8:	2000      	movs	r0, #0
 80199ea:	bd70      	pop	{r4, r5, r6, pc}
 80199ec:	2001      	movs	r0, #1
 80199ee:	e7fc      	b.n	80199ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080199f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80199f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199f4:	4605      	mov	r5, r0
 80199f6:	4616      	mov	r6, r2
 80199f8:	1c8c      	adds	r4, r1, #2
 80199fa:	8809      	ldrh	r1, [r1, #0]
 80199fc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019a00:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019a04:	42b3      	cmp	r3, r6
 8019a06:	d124      	bne.n	8019a52 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019a08:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019a0c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019a10:	f001 070f 	and.w	r7, r1, #15
 8019a14:	4652      	mov	r2, sl
 8019a16:	f8cd 8000 	str.w	r8, [sp]
 8019a1a:	464b      	mov	r3, r9
 8019a1c:	4621      	mov	r1, r4
 8019a1e:	4628      	mov	r0, r5
 8019a20:	f7ff ffb7 	bl	8019992 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019a24:	4683      	mov	fp, r0
 8019a26:	b168      	cbz	r0, 8019a44 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019a28:	eb0a 0109 	add.w	r1, sl, r9
 8019a2c:	463a      	mov	r2, r7
 8019a2e:	4628      	mov	r0, r5
 8019a30:	4441      	add	r1, r8
 8019a32:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019a36:	4649      	mov	r1, r9
 8019a38:	f7ff ff52 	bl	80198e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019a3c:	4658      	mov	r0, fp
 8019a3e:	b003      	add	sp, #12
 8019a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a44:	eb07 010a 	add.w	r1, r7, sl
 8019a48:	4449      	add	r1, r9
 8019a4a:	4441      	add	r1, r8
 8019a4c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019a50:	e7d2      	b.n	80199f8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019a52:	f04f 0b00 	mov.w	fp, #0
 8019a56:	e7f1      	b.n	8019a3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019a58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019a58:	b570      	push	{r4, r5, r6, lr}
 8019a5a:	8810      	ldrh	r0, [r2, #0]
 8019a5c:	4298      	cmp	r0, r3
 8019a5e:	d817      	bhi.n	8019a90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019a60:	1e48      	subs	r0, r1, #1
 8019a62:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019a66:	4298      	cmp	r0, r3
 8019a68:	d312      	bcc.n	8019a90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019a6a:	2400      	movs	r4, #0
 8019a6c:	428c      	cmp	r4, r1
 8019a6e:	d20f      	bcs.n	8019a90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019a70:	1860      	adds	r0, r4, r1
 8019a72:	1040      	asrs	r0, r0, #1
 8019a74:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019a78:	0085      	lsls	r5, r0, #2
 8019a7a:	42b3      	cmp	r3, r6
 8019a7c:	d902      	bls.n	8019a84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019a7e:	3001      	adds	r0, #1
 8019a80:	b284      	uxth	r4, r0
 8019a82:	e7f3      	b.n	8019a6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019a84:	d201      	bcs.n	8019a8a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8019a86:	b281      	uxth	r1, r0
 8019a88:	e7f0      	b.n	8019a6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019a8a:	442a      	add	r2, r5
 8019a8c:	8850      	ldrh	r0, [r2, #2]
 8019a8e:	bd70      	pop	{r4, r5, r6, pc}
 8019a90:	2000      	movs	r0, #0
 8019a92:	e7fc      	b.n	8019a8e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019a94 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a98:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8019a9a:	4604      	mov	r4, r0
 8019a9c:	260b      	movs	r6, #11
 8019a9e:	886f      	ldrh	r7, [r5, #2]
 8019aa0:	087f      	lsrs	r7, r7, #1
 8019aa2:	3e01      	subs	r6, #1
 8019aa4:	d013      	beq.n	8019ace <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019aa6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8019aa8:	462a      	mov	r2, r5
 8019aaa:	4639      	mov	r1, r7
 8019aac:	4620      	mov	r0, r4
 8019aae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019ab2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8019ab6:	4643      	mov	r3, r8
 8019ab8:	f7ff ffce 	bl	8019a58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019abc:	b138      	cbz	r0, 8019ace <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019abe:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019ac2:	4642      	mov	r2, r8
 8019ac4:	4620      	mov	r0, r4
 8019ac6:	f7ff ff93 	bl	80199f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019aca:	2800      	cmp	r0, #0
 8019acc:	d1e9      	bne.n	8019aa2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08019ad4 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 8019ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	b08d      	sub	sp, #52	@ 0x34
 8019ada:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8019ade:	f101 0710 	add.w	r7, r1, #16
 8019ae2:	9304      	str	r3, [sp, #16]
 8019ae4:	aa04      	add	r2, sp, #16
 8019ae6:	9305      	str	r3, [sp, #20]
 8019ae8:	9306      	str	r3, [sp, #24]
 8019aea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8019aee:	9307      	str	r3, [sp, #28]
 8019af0:	4613      	mov	r3, r2
 8019af2:	460c      	mov	r4, r1
 8019af4:	4605      	mov	r5, r0
 8019af6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8019b30 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8019afa:	ecb4 7a01 	vldmia	r4!, {s14}
 8019afe:	ecf5 6a01 	vldmia	r5!, {s13}
 8019b02:	42bc      	cmp	r4, r7
 8019b04:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019b08:	d1f7      	bne.n	8019afa <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8019b0a:	3010      	adds	r0, #16
 8019b0c:	ece2 7a01 	vstmia	r2!, {s15}
 8019b10:	42b0      	cmp	r0, r6
 8019b12:	d1ee      	bne.n	8019af2 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8019b14:	ac0c      	add	r4, sp, #48	@ 0x30
 8019b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b18:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019b1c:	ed9d 0a08 	vldr	s0, [sp, #32]
 8019b20:	eddd 0a09 	vldr	s1, [sp, #36]	@ 0x24
 8019b24:	ed9d 1a0a 	vldr	s2, [sp, #40]	@ 0x28
 8019b28:	eddd 1a0b 	vldr	s3, [sp, #44]	@ 0x2c
 8019b2c:	b00d      	add	sp, #52	@ 0x34
 8019b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b30:	00000000 	.word	0x00000000

08019b34 <_ZN8touchgfx9Matrix4x4C1Ev>:
 8019b34:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019b38:	2300      	movs	r3, #0
 8019b3a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8019b60 <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 8019b3e:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 8019b42:	2200      	movs	r2, #0
 8019b44:	4293      	cmp	r3, r2
 8019b46:	f102 0201 	add.w	r2, r2, #1
 8019b4a:	fe47 6a87 	vseleq.f32	s13, s15, s14
 8019b4e:	2a04      	cmp	r2, #4
 8019b50:	ece1 6a01 	vstmia	r1!, {s13}
 8019b54:	d1f6      	bne.n	8019b44 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8019b56:	3301      	adds	r3, #1
 8019b58:	2b04      	cmp	r3, #4
 8019b5a:	d1f0      	bne.n	8019b3e <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8019b5c:	4770      	bx	lr
 8019b5e:	bf00      	nop
 8019b60:	00000000 	.word	0x00000000

08019b64 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8019b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b68:	460c      	mov	r4, r1
 8019b6a:	4605      	mov	r5, r0
 8019b6c:	4690      	mov	r8, r2
 8019b6e:	f7ff ffe1 	bl	8019b34 <_ZN8touchgfx9Matrix4x4C1Ev>
 8019b72:	4628      	mov	r0, r5
 8019b74:	4621      	mov	r1, r4
 8019b76:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	eb08 0603 	add.w	r6, r8, r3
 8019b80:	460f      	mov	r7, r1
 8019b82:	2400      	movs	r4, #0
 8019b84:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019bb8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 8019b88:	4632      	mov	r2, r6
 8019b8a:	3401      	adds	r4, #1
 8019b8c:	ecf7 6a01 	vldmia	r7!, {s13}
 8019b90:	3610      	adds	r6, #16
 8019b92:	ed92 7a00 	vldr	s14, [r2]
 8019b96:	2c04      	cmp	r4, #4
 8019b98:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019b9c:	d1f4      	bne.n	8019b88 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 8019b9e:	18c2      	adds	r2, r0, r3
 8019ba0:	3304      	adds	r3, #4
 8019ba2:	2b10      	cmp	r3, #16
 8019ba4:	edc2 7a00 	vstr	s15, [r2]
 8019ba8:	d1e8      	bne.n	8019b7c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 8019baa:	3110      	adds	r1, #16
 8019bac:	3010      	adds	r0, #16
 8019bae:	4561      	cmp	r1, ip
 8019bb0:	d1e3      	bne.n	8019b7a <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 8019bb2:	4628      	mov	r0, r5
 8019bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bb8:	00000000 	.word	0x00000000

08019bbc <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8019bbc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019bc0:	f100 0320 	add.w	r3, r0, #32
 8019bc4:	3030      	adds	r0, #48	@ 0x30
 8019bc6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019bca:	ecf3 7a01 	vldmia	r3!, {s15}
 8019bce:	4283      	cmp	r3, r0
 8019bd0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019bd4:	edc3 7a03 	vstr	s15, [r3, #12]
 8019bd8:	d1f7      	bne.n	8019bca <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 8019bda:	4770      	bx	lr

08019bdc <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 8019bdc:	b510      	push	{r4, lr}
 8019bde:	ed2d 8b02 	vpush	{d8}
 8019be2:	eef0 8a40 	vmov.f32	s17, s0
 8019be6:	4604      	mov	r4, r0
 8019be8:	f00f fa8a 	bl	8029100 <sinf>
 8019bec:	eeb0 8a40 	vmov.f32	s16, s0
 8019bf0:	eeb0 0a68 	vmov.f32	s0, s17
 8019bf4:	f00f fb48 	bl	8029288 <cosf>
 8019bf8:	eeb1 6a48 	vneg.f32	s12, s16
 8019bfc:	f104 0310 	add.w	r3, r4, #16
 8019c00:	f104 0220 	add.w	r2, r4, #32
 8019c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8019c08:	edd3 6a00 	vldr	s13, [r3]
 8019c0c:	ee26 7a27 	vmul.f32	s14, s12, s15
 8019c10:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019c14:	eea6 7a80 	vfma.f32	s14, s13, s0
 8019c18:	eee6 7a88 	vfma.f32	s15, s13, s16
 8019c1c:	eca3 7a01 	vstmia	r3!, {s14}
 8019c20:	429a      	cmp	r2, r3
 8019c22:	edc3 7a03 	vstr	s15, [r3, #12]
 8019c26:	d1ed      	bne.n	8019c04 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8019c28:	4620      	mov	r0, r4
 8019c2a:	ecbd 8b02 	vpop	{d8}
 8019c2e:	bd10      	pop	{r4, pc}

08019c30 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8019c30:	b510      	push	{r4, lr}
 8019c32:	ed2d 8b02 	vpush	{d8}
 8019c36:	eef0 8a40 	vmov.f32	s17, s0
 8019c3a:	4604      	mov	r4, r0
 8019c3c:	f00f fa60 	bl	8029100 <sinf>
 8019c40:	eeb0 8a40 	vmov.f32	s16, s0
 8019c44:	eeb0 0a68 	vmov.f32	s0, s17
 8019c48:	f00f fb1e 	bl	8029288 <cosf>
 8019c4c:	eeb1 6a48 	vneg.f32	s12, s16
 8019c50:	4623      	mov	r3, r4
 8019c52:	f104 0210 	add.w	r2, r4, #16
 8019c56:	edd3 7a08 	vldr	s15, [r3, #32]
 8019c5a:	edd3 6a00 	vldr	s13, [r3]
 8019c5e:	ee27 7a88 	vmul.f32	s14, s15, s16
 8019c62:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019c66:	eea6 7a80 	vfma.f32	s14, s13, s0
 8019c6a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019c6e:	eca3 7a01 	vstmia	r3!, {s14}
 8019c72:	429a      	cmp	r2, r3
 8019c74:	edc3 7a07 	vstr	s15, [r3, #28]
 8019c78:	d1ed      	bne.n	8019c56 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 8019c7a:	4620      	mov	r0, r4
 8019c7c:	ecbd 8b02 	vpop	{d8}
 8019c80:	bd10      	pop	{r4, pc}

08019c82 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 8019c82:	b510      	push	{r4, lr}
 8019c84:	ed2d 8b02 	vpush	{d8}
 8019c88:	eef0 8a40 	vmov.f32	s17, s0
 8019c8c:	4604      	mov	r4, r0
 8019c8e:	f00f fa37 	bl	8029100 <sinf>
 8019c92:	eeb0 8a40 	vmov.f32	s16, s0
 8019c96:	eeb0 0a68 	vmov.f32	s0, s17
 8019c9a:	f00f faf5 	bl	8029288 <cosf>
 8019c9e:	eeb1 6a48 	vneg.f32	s12, s16
 8019ca2:	4623      	mov	r3, r4
 8019ca4:	f104 0210 	add.w	r2, r4, #16
 8019ca8:	edd3 7a04 	vldr	s15, [r3, #16]
 8019cac:	edd3 6a00 	vldr	s13, [r3]
 8019cb0:	ee26 7a27 	vmul.f32	s14, s12, s15
 8019cb4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019cb8:	eea6 7a80 	vfma.f32	s14, s13, s0
 8019cbc:	eee6 7a88 	vfma.f32	s15, s13, s16
 8019cc0:	eca3 7a01 	vstmia	r3!, {s14}
 8019cc4:	429a      	cmp	r2, r3
 8019cc6:	edc3 7a03 	vstr	s15, [r3, #12]
 8019cca:	d1ed      	bne.n	8019ca8 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8019ccc:	4620      	mov	r0, r4
 8019cce:	ecbd 8b02 	vpop	{d8}
 8019cd2:	bd10      	pop	{r4, pc}

08019cd4 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	f100 0210 	add.w	r2, r0, #16
 8019cda:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8019cde:	edd3 7a00 	vldr	s15, [r3]
 8019ce2:	eee7 7a00 	vfma.f32	s15, s14, s0
 8019ce6:	ece3 7a01 	vstmia	r3!, {s15}
 8019cea:	4293      	cmp	r3, r2
 8019cec:	d1f5      	bne.n	8019cda <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 8019cee:	4770      	bx	lr

08019cf0 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 8019cf0:	f100 0310 	add.w	r3, r0, #16
 8019cf4:	f100 0220 	add.w	r2, r0, #32
 8019cf8:	ed93 7a08 	vldr	s14, [r3, #32]
 8019cfc:	edd3 7a00 	vldr	s15, [r3]
 8019d00:	eee7 7a00 	vfma.f32	s15, s14, s0
 8019d04:	ece3 7a01 	vstmia	r3!, {s15}
 8019d08:	4293      	cmp	r3, r2
 8019d0a:	d1f5      	bne.n	8019cf8 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 8019d0c:	4770      	bx	lr

08019d0e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 8019d0e:	f100 0320 	add.w	r3, r0, #32
 8019d12:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8019d16:	ed93 7a04 	vldr	s14, [r3, #16]
 8019d1a:	edd3 7a00 	vldr	s15, [r3]
 8019d1e:	eee7 7a00 	vfma.f32	s15, s14, s0
 8019d22:	ece3 7a01 	vstmia	r3!, {s15}
 8019d26:	4293      	cmp	r3, r2
 8019d28:	d1f5      	bne.n	8019d16 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 8019d2a:	4770      	bx	lr

08019d2c <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8019d2c:	4603      	mov	r3, r0
 8019d2e:	f100 0210 	add.w	r2, r0, #16
 8019d32:	edd3 7a00 	vldr	s15, [r3]
 8019d36:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019d3a:	ece3 7a01 	vstmia	r3!, {s15}
 8019d3e:	4293      	cmp	r3, r2
 8019d40:	d1f7      	bne.n	8019d32 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 8019d42:	4770      	bx	lr

08019d44 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 8019d44:	f100 0310 	add.w	r3, r0, #16
 8019d48:	f100 0220 	add.w	r2, r0, #32
 8019d4c:	edd3 7a00 	vldr	s15, [r3]
 8019d50:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019d54:	ece3 7a01 	vstmia	r3!, {s15}
 8019d58:	4293      	cmp	r3, r2
 8019d5a:	d1f7      	bne.n	8019d4c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 8019d5c:	4770      	bx	lr

08019d5e <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 8019d5e:	f100 0320 	add.w	r3, r0, #32
 8019d62:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8019d66:	edd3 7a00 	vldr	s15, [r3]
 8019d6a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019d6e:	ece3 7a01 	vstmia	r3!, {s15}
 8019d72:	4293      	cmp	r3, r2
 8019d74:	d1f7      	bne.n	8019d66 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8019d76:	4770      	bx	lr

08019d78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019d78:	b570      	push	{r4, r5, r6, lr}
 8019d7a:	694a      	ldr	r2, [r1, #20]
 8019d7c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8019d7e:	684b      	ldr	r3, [r1, #4]
 8019d80:	1b54      	subs	r4, r2, r5
 8019d82:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8019d84:	f000 8106 	beq.w	8019f94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8019d88:	1b9b      	subs	r3, r3, r6
 8019d8a:	d003      	beq.n	8019d94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019d8c:	4363      	muls	r3, r4
 8019d8e:	2210      	movs	r2, #16
 8019d90:	fb93 f3f2 	sdiv	r3, r3, r2
 8019d94:	680c      	ldr	r4, [r1, #0]
 8019d96:	698a      	ldr	r2, [r1, #24]
 8019d98:	1b65      	subs	r5, r4, r5
 8019d9a:	f000 80fd 	beq.w	8019f98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8019d9e:	1b92      	subs	r2, r2, r6
 8019da0:	d003      	beq.n	8019daa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019da2:	436a      	muls	r2, r5
 8019da4:	2410      	movs	r4, #16
 8019da6:	fb92 f2f4 	sdiv	r2, r2, r4
 8019daa:	1a9b      	subs	r3, r3, r2
 8019dac:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8019fd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8019db0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019db4:	460a      	mov	r2, r1
 8019db6:	ee07 3a90 	vmov	s15, r3
 8019dba:	f100 040c 	add.w	r4, r0, #12
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019dc4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019dc8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019dcc:	eeb1 6a43 	vneg.f32	s12, s6
 8019dd0:	edd2 7a02 	vldr	s15, [r2, #8]
 8019dd4:	3214      	adds	r2, #20
 8019dd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019dda:	ece3 6a01 	vstmia	r3!, {s13}
 8019dde:	429c      	cmp	r4, r3
 8019de0:	ed52 7a02 	vldr	s15, [r2, #-8]
 8019de4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019de8:	edc3 7a02 	vstr	s15, [r3, #8]
 8019dec:	ed52 7a01 	vldr	s15, [r2, #-4]
 8019df0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019df4:	edc3 7a05 	vstr	s15, [r3, #20]
 8019df8:	d1ea      	bne.n	8019dd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019dfa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019dfc:	698b      	ldr	r3, [r1, #24]
 8019dfe:	edd0 4a02 	vldr	s9, [r0, #8]
 8019e02:	1a9b      	subs	r3, r3, r2
 8019e04:	edd0 3a00 	vldr	s7, [r0]
 8019e08:	edd0 6a01 	vldr	s13, [r0, #4]
 8019e0c:	ee07 3a90 	vmov	s15, r3
 8019e10:	684b      	ldr	r3, [r1, #4]
 8019e12:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019e16:	ed90 5a05 	vldr	s10, [r0, #20]
 8019e1a:	1a9b      	subs	r3, r3, r2
 8019e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e20:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019e24:	ed90 2a03 	vldr	s4, [r0, #12]
 8019e28:	ee07 3a10 	vmov	s14, r3
 8019e2c:	edd0 5a04 	vldr	s11, [r0, #16]
 8019e30:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019e34:	ed90 1a07 	vldr	s2, [r0, #28]
 8019e38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e3c:	edd0 2a06 	vldr	s5, [r0, #24]
 8019e40:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019e44:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019e48:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e4c:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019e50:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019e54:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019e58:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8019e5c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019e5e:	694a      	ldr	r2, [r1, #20]
 8019e60:	1b13      	subs	r3, r2, r4
 8019e62:	ee07 3a10 	vmov	s14, r3
 8019e66:	680b      	ldr	r3, [r1, #0]
 8019e68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e6c:	1b1b      	subs	r3, r3, r4
 8019e6e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e72:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8019e76:	ee07 3a10 	vmov	s14, r3
 8019e7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e7e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e82:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019e86:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019e8a:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8019e8e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019e90:	698b      	ldr	r3, [r1, #24]
 8019e92:	1a9b      	subs	r3, r3, r2
 8019e94:	ee06 3a90 	vmov	s13, r3
 8019e98:	684b      	ldr	r3, [r1, #4]
 8019e9a:	1a9b      	subs	r3, r3, r2
 8019e9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019ea0:	ee07 3a10 	vmov	s14, r3
 8019ea4:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019ea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019eac:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019eb0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019eb4:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019eb8:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019ebc:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8019ec0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019ec2:	694a      	ldr	r2, [r1, #20]
 8019ec4:	1b13      	subs	r3, r2, r4
 8019ec6:	ee07 3a10 	vmov	s14, r3
 8019eca:	680b      	ldr	r3, [r1, #0]
 8019ecc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ed0:	1b1b      	subs	r3, r3, r4
 8019ed2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019ed6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019eda:	ee07 3a10 	vmov	s14, r3
 8019ede:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ee2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019ee6:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019eea:	edd0 5a08 	vldr	s11, [r0, #32]
 8019eee:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019ef2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8019ef6:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019efa:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8019efe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019f00:	698b      	ldr	r3, [r1, #24]
 8019f02:	1a9b      	subs	r3, r3, r2
 8019f04:	ee07 3a10 	vmov	s14, r3
 8019f08:	684b      	ldr	r3, [r1, #4]
 8019f0a:	1a9b      	subs	r3, r3, r2
 8019f0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f10:	ee01 3a90 	vmov	s3, r3
 8019f14:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019f18:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019f1c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019f20:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019f24:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019f28:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019f2c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019f30:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019f32:	694a      	ldr	r2, [r1, #20]
 8019f34:	1b13      	subs	r3, r2, r4
 8019f36:	ee03 3a10 	vmov	s6, r3
 8019f3a:	680b      	ldr	r3, [r1, #0]
 8019f3c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019f40:	1b1b      	subs	r3, r3, r4
 8019f42:	ee23 3a04 	vmul.f32	s6, s6, s8
 8019f46:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019f4a:	ee03 3a10 	vmov	s6, r3
 8019f4e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019f52:	ee23 4a04 	vmul.f32	s8, s6, s8
 8019f56:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019f5a:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019f5e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019f62:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8019f66:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019f6a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f72:	dd13      	ble.n	8019f9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8019f74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019f78:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019f7c:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019f7e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f8a:	dd15      	ble.n	8019fb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8019f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019f90:	6403      	str	r3, [r0, #64]	@ 0x40
 8019f92:	bd70      	pop	{r4, r5, r6, pc}
 8019f94:	4623      	mov	r3, r4
 8019f96:	e6fd      	b.n	8019d94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019f98:	462a      	mov	r2, r5
 8019f9a:	e706      	b.n	8019daa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019f9c:	d502      	bpl.n	8019fa4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8019f9e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019fa2:	e7e9      	b.n	8019f78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8019fa4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019fa8:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019fac:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fb4:	dade      	bge.n	8019f74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8019fb6:	e7f2      	b.n	8019f9e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019fb8:	d502      	bpl.n	8019fc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8019fba:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019fbe:	e7e7      	b.n	8019f90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019fc0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019fc4:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019fc8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fd0:	dadc      	bge.n	8019f8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8019fd2:	e7f2      	b.n	8019fba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019fd4:	3d800000 	.word	0x3d800000

08019fd8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fdc:	2714      	movs	r7, #20
 8019fde:	435f      	muls	r7, r3
 8019fe0:	eb02 0c07 	add.w	ip, r2, r7
 8019fe4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019fe8:	f115 0e0f 	adds.w	lr, r5, #15
 8019fec:	f100 80a2 	bmi.w	801a134 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019ff0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019ff4:	9c08      	ldr	r4, [sp, #32]
 8019ff6:	2614      	movs	r6, #20
 8019ff8:	f8c0 e014 	str.w	lr, [r0, #20]
 8019ffc:	4366      	muls	r6, r4
 8019ffe:	eb02 0806 	add.w	r8, r2, r6
 801a002:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a006:	f115 040f 	adds.w	r4, r5, #15
 801a00a:	f100 809f 	bmi.w	801a14c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801a00e:	1124      	asrs	r4, r4, #4
 801a010:	eba4 040e 	sub.w	r4, r4, lr
 801a014:	6184      	str	r4, [r0, #24]
 801a016:	2c00      	cmp	r4, #0
 801a018:	f000 808a 	beq.w	801a130 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801a01c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801a020:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801a024:	5995      	ldr	r5, [r2, r6]
 801a026:	eba4 0809 	sub.w	r8, r4, r9
 801a02a:	59d4      	ldr	r4, [r2, r7]
 801a02c:	eba5 0a04 	sub.w	sl, r5, r4
 801a030:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801a034:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801a038:	fb0e fe05 	mul.w	lr, lr, r5
 801a03c:	fb0a ee19 	mls	lr, sl, r9, lr
 801a040:	fb08 e404 	mla	r4, r8, r4, lr
 801a044:	3c01      	subs	r4, #1
 801a046:	19a4      	adds	r4, r4, r6
 801a048:	f100 808c 	bmi.w	801a164 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801a04c:	fb94 fef6 	sdiv	lr, r4, r6
 801a050:	fb06 441e 	mls	r4, r6, lr, r4
 801a054:	f8c0 e000 	str.w	lr, [r0]
 801a058:	6104      	str	r4, [r0, #16]
 801a05a:	2d00      	cmp	r5, #0
 801a05c:	f2c0 8095 	blt.w	801a18a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a060:	fb95 f4f6 	sdiv	r4, r5, r6
 801a064:	fb06 5514 	mls	r5, r6, r4, r5
 801a068:	6044      	str	r4, [r0, #4]
 801a06a:	6085      	str	r5, [r0, #8]
 801a06c:	60c6      	str	r6, [r0, #12]
 801a06e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a072:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a076:	6945      	ldr	r5, [r0, #20]
 801a078:	59d2      	ldr	r2, [r2, r7]
 801a07a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a07e:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801a1ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a082:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801a086:	ee07 4a10 	vmov	s14, r4
 801a08a:	6804      	ldr	r4, [r0, #0]
 801a08c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a090:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a094:	ee07 2a90 	vmov	s15, r2
 801a098:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a09c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a0a4:	edd3 6a00 	vldr	s13, [r3]
 801a0a8:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a0ac:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801a0b0:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a0b4:	edc0 6a07 	vstr	s13, [r0, #28]
 801a0b8:	edd0 6a01 	vldr	s13, [r0, #4]
 801a0bc:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801a0c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a0c4:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801a0c8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a0cc:	ed80 6a08 	vstr	s12, [r0, #32]
 801a0d0:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801a0d2:	6242      	str	r2, [r0, #36]	@ 0x24
 801a0d4:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801a0d8:	ed93 6a03 	vldr	s12, [r3, #12]
 801a0dc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a0e0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801a0e4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a0e8:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801a0ec:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801a0f0:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801a0f4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a0f8:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801a0fc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801a0fe:	6302      	str	r2, [r0, #48]	@ 0x30
 801a100:	ed93 6a06 	vldr	s12, [r3, #24]
 801a104:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801a108:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a10c:	eeb0 7a46 	vmov.f32	s14, s12
 801a110:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801a114:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a118:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801a11c:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801a120:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801a124:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a128:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801a12c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801a12e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801a130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a134:	2410      	movs	r4, #16
 801a136:	f1c5 0501 	rsb	r5, r5, #1
 801a13a:	fb9e fef4 	sdiv	lr, lr, r4
 801a13e:	f015 050f 	ands.w	r5, r5, #15
 801a142:	bf18      	it	ne
 801a144:	2501      	movne	r5, #1
 801a146:	ebae 0e05 	sub.w	lr, lr, r5
 801a14a:	e753      	b.n	8019ff4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a14c:	f04f 0910 	mov.w	r9, #16
 801a150:	f1c5 0501 	rsb	r5, r5, #1
 801a154:	fb94 f4f9 	sdiv	r4, r4, r9
 801a158:	f015 050f 	ands.w	r5, r5, #15
 801a15c:	bf18      	it	ne
 801a15e:	2501      	movne	r5, #1
 801a160:	1b64      	subs	r4, r4, r5
 801a162:	e755      	b.n	801a010 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a164:	4264      	negs	r4, r4
 801a166:	fb94 fef6 	sdiv	lr, r4, r6
 801a16a:	f1ce 0800 	rsb	r8, lr, #0
 801a16e:	fb06 441e 	mls	r4, r6, lr, r4
 801a172:	f8c0 8000 	str.w	r8, [r0]
 801a176:	6104      	str	r4, [r0, #16]
 801a178:	2c00      	cmp	r4, #0
 801a17a:	f43f af6e 	beq.w	801a05a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a17e:	ea6f 0e0e 	mvn.w	lr, lr
 801a182:	1b34      	subs	r4, r6, r4
 801a184:	f8c0 e000 	str.w	lr, [r0]
 801a188:	e766      	b.n	801a058 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a18a:	426d      	negs	r5, r5
 801a18c:	fb95 f4f6 	sdiv	r4, r5, r6
 801a190:	f1c4 0e00 	rsb	lr, r4, #0
 801a194:	fb06 5514 	mls	r5, r6, r4, r5
 801a198:	f8c0 e004 	str.w	lr, [r0, #4]
 801a19c:	6085      	str	r5, [r0, #8]
 801a19e:	2d00      	cmp	r5, #0
 801a1a0:	f43f af64 	beq.w	801a06c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a1a4:	43e4      	mvns	r4, r4
 801a1a6:	1b75      	subs	r5, r6, r5
 801a1a8:	6044      	str	r4, [r0, #4]
 801a1aa:	e75e      	b.n	801a06a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a1ac:	3d800000 	.word	0x3d800000

0801a1b0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a1b0:	4602      	mov	r2, r0
 801a1b2:	b148      	cbz	r0, 801a1c8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	b298      	uxth	r0, r3
 801a1b8:	3301      	adds	r3, #1
 801a1ba:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a1be:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a1c2:	2900      	cmp	r1, #0
 801a1c4:	d1f7      	bne.n	801a1b6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a1c6:	4770      	bx	lr
 801a1c8:	4770      	bx	lr

0801a1ca <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a1ca:	b530      	push	{r4, r5, lr}
 801a1cc:	4604      	mov	r4, r0
 801a1ce:	b159      	cbz	r1, 801a1e8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a1d0:	b148      	cbz	r0, 801a1e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	b298      	uxth	r0, r3
 801a1d6:	4282      	cmp	r2, r0
 801a1d8:	d905      	bls.n	801a1e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a1da:	5ccd      	ldrb	r5, [r1, r3]
 801a1dc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a1e0:	3301      	adds	r3, #1
 801a1e2:	2d00      	cmp	r5, #0
 801a1e4:	d1f6      	bne.n	801a1d4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a1e6:	bd30      	pop	{r4, r5, pc}
 801a1e8:	4608      	mov	r0, r1
 801a1ea:	e7fc      	b.n	801a1e6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a1ec <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801a1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1ee:	b08b      	sub	sp, #44	@ 0x2c
 801a1f0:	468c      	mov	ip, r1
 801a1f2:	4604      	mov	r4, r0
 801a1f4:	2100      	movs	r1, #0
 801a1f6:	261f      	movs	r6, #31
 801a1f8:	af01      	add	r7, sp, #4
 801a1fa:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a1fe:	1e71      	subs	r1, r6, #1
 801a200:	fb94 fef3 	sdiv	lr, r4, r3
 801a204:	fb03 441e 	mls	r4, r3, lr, r4
 801a208:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a20c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a210:	b2ec      	uxtb	r4, r5
 801a212:	2d09      	cmp	r5, #9
 801a214:	bfd4      	ite	le
 801a216:	3430      	addle	r4, #48	@ 0x30
 801a218:	3457      	addgt	r4, #87	@ 0x57
 801a21a:	b2e4      	uxtb	r4, r4
 801a21c:	55bc      	strb	r4, [r7, r6]
 801a21e:	4674      	mov	r4, lr
 801a220:	b974      	cbnz	r4, 801a240 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801a222:	2800      	cmp	r0, #0
 801a224:	da05      	bge.n	801a232 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801a226:	ab0a      	add	r3, sp, #40	@ 0x28
 801a228:	4419      	add	r1, r3
 801a22a:	232d      	movs	r3, #45	@ 0x2d
 801a22c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a230:	1eb1      	subs	r1, r6, #2
 801a232:	3101      	adds	r1, #1
 801a234:	4660      	mov	r0, ip
 801a236:	4439      	add	r1, r7
 801a238:	f7ff ffc7 	bl	801a1ca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a23c:	b00b      	add	sp, #44	@ 0x2c
 801a23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a240:	460e      	mov	r6, r1
 801a242:	e7dc      	b.n	801a1fe <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801a244 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801a244:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a246:	468c      	mov	ip, r1
 801a248:	b08b      	sub	sp, #44	@ 0x2c
 801a24a:	2100      	movs	r1, #0
 801a24c:	ae01      	add	r6, sp, #4
 801a24e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a252:	211f      	movs	r1, #31
 801a254:	fbb0 f7f3 	udiv	r7, r0, r3
 801a258:	fb03 0517 	mls	r5, r3, r7, r0
 801a25c:	4638      	mov	r0, r7
 801a25e:	b2ec      	uxtb	r4, r5
 801a260:	2d09      	cmp	r5, #9
 801a262:	bfd4      	ite	le
 801a264:	3430      	addle	r4, #48	@ 0x30
 801a266:	3457      	addgt	r4, #87	@ 0x57
 801a268:	b2e4      	uxtb	r4, r4
 801a26a:	558c      	strb	r4, [r1, r6]
 801a26c:	1e4c      	subs	r4, r1, #1
 801a26e:	b92f      	cbnz	r7, 801a27c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801a270:	4431      	add	r1, r6
 801a272:	4660      	mov	r0, ip
 801a274:	f7ff ffa9 	bl	801a1ca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a278:	b00b      	add	sp, #44	@ 0x2c
 801a27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a27c:	4621      	mov	r1, r4
 801a27e:	e7e9      	b.n	801a254 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801a280 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a284:	b085      	sub	sp, #20
 801a286:	4691      	mov	r9, r2
 801a288:	6802      	ldr	r2, [r0, #0]
 801a28a:	4688      	mov	r8, r1
 801a28c:	461c      	mov	r4, r3
 801a28e:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801a292:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801a296:	4683      	mov	fp, r0
 801a298:	4610      	mov	r0, r2
 801a29a:	9103      	str	r1, [sp, #12]
 801a29c:	9302      	str	r3, [sp, #8]
 801a29e:	9201      	str	r2, [sp, #4]
 801a2a0:	f7ff ff86 	bl	801a1b0 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a2a4:	f1b8 0f00 	cmp.w	r8, #0
 801a2a8:	bf0c      	ite	eq
 801a2aa:	4684      	moveq	ip, r0
 801a2ac:	f100 0c01 	addne.w	ip, r0, #1
 801a2b0:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801a2b4:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801a2b8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801a2ba:	fa1f fc8c 	uxth.w	ip, ip
 801a2be:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801a2c0:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801a2c4:	9903      	ldr	r1, [sp, #12]
 801a2c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a2ca:	d041      	beq.n	801a350 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a2cc:	d834      	bhi.n	801a338 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801a2ce:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801a2d2:	d059      	beq.n	801a388 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801a2d4:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801a2d8:	d03a      	beq.n	801a350 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a2da:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801a2de:	d034      	beq.n	801a34a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a2e0:	2400      	movs	r4, #0
 801a2e2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801a2e6:	3a01      	subs	r2, #1
 801a2e8:	b169      	cbz	r1, 801a306 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a2ea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a2ec:	458c      	cmp	ip, r1
 801a2ee:	da09      	bge.n	801a304 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a2f0:	eba1 010c 	sub.w	r1, r1, ip
 801a2f4:	b289      	uxth	r1, r1
 801a2f6:	b933      	cbnz	r3, 801a306 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a2f8:	2e00      	cmp	r6, #0
 801a2fa:	d051      	beq.n	801a3a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a2fc:	2800      	cmp	r0, #0
 801a2fe:	d04f      	beq.n	801a3a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a300:	440c      	add	r4, r1
 801a302:	b2a4      	uxth	r4, r4
 801a304:	2100      	movs	r1, #0
 801a306:	682b      	ldr	r3, [r5, #0]
 801a308:	4293      	cmp	r3, r2
 801a30a:	da07      	bge.n	801a31c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a30c:	f1b8 0f00 	cmp.w	r8, #0
 801a310:	d004      	beq.n	801a31c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a312:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801a316:	682b      	ldr	r3, [r5, #0]
 801a318:	3301      	adds	r3, #1
 801a31a:	602b      	str	r3, [r5, #0]
 801a31c:	2730      	movs	r7, #48	@ 0x30
 801a31e:	2c00      	cmp	r4, #0
 801a320:	d04e      	beq.n	801a3c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a322:	682e      	ldr	r6, [r5, #0]
 801a324:	3c01      	subs	r4, #1
 801a326:	42b2      	cmp	r2, r6
 801a328:	b2a4      	uxth	r4, r4
 801a32a:	dd49      	ble.n	801a3c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a32c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a330:	682b      	ldr	r3, [r5, #0]
 801a332:	3301      	adds	r3, #1
 801a334:	602b      	str	r3, [r5, #0]
 801a336:	e7f2      	b.n	801a31e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801a338:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801a33c:	d01d      	beq.n	801a37a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801a33e:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801a342:	d002      	beq.n	801a34a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a344:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801a348:	e7c9      	b.n	801a2de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801a34a:	4684      	mov	ip, r0
 801a34c:	f04f 0800 	mov.w	r8, #0
 801a350:	2c00      	cmp	r4, #0
 801a352:	d0c6      	beq.n	801a2e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a354:	b947      	cbnz	r7, 801a368 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a356:	2801      	cmp	r0, #1
 801a358:	d106      	bne.n	801a368 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a35a:	8814      	ldrh	r4, [r2, #0]
 801a35c:	2c30      	cmp	r4, #48	@ 0x30
 801a35e:	bf02      	ittt	eq
 801a360:	3202      	addeq	r2, #2
 801a362:	4638      	moveq	r0, r7
 801a364:	f8cb 2000 	streq.w	r2, [fp]
 801a368:	45bc      	cmp	ip, r7
 801a36a:	da14      	bge.n	801a396 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801a36c:	b2bf      	uxth	r7, r7
 801a36e:	eba7 040c 	sub.w	r4, r7, ip
 801a372:	46bc      	mov	ip, r7
 801a374:	b2a4      	uxth	r4, r4
 801a376:	2600      	movs	r6, #0
 801a378:	e7b3      	b.n	801a2e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a37a:	4684      	mov	ip, r0
 801a37c:	b16c      	cbz	r4, 801a39a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801a37e:	42b8      	cmp	r0, r7
 801a380:	dd00      	ble.n	801a384 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801a382:	b2b8      	uxth	r0, r7
 801a384:	2400      	movs	r4, #0
 801a386:	e003      	b.n	801a390 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801a388:	f04f 0c01 	mov.w	ip, #1
 801a38c:	2400      	movs	r4, #0
 801a38e:	4660      	mov	r0, ip
 801a390:	4626      	mov	r6, r4
 801a392:	46a0      	mov	r8, r4
 801a394:	e7a5      	b.n	801a2e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a396:	2400      	movs	r4, #0
 801a398:	e7ed      	b.n	801a376 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801a39a:	4626      	mov	r6, r4
 801a39c:	46a0      	mov	r8, r4
 801a39e:	e7a0      	b.n	801a2e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a3a0:	2900      	cmp	r1, #0
 801a3a2:	d0b0      	beq.n	801a306 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a3a4:	2720      	movs	r7, #32
 801a3a6:	682e      	ldr	r6, [r5, #0]
 801a3a8:	2900      	cmp	r1, #0
 801a3aa:	d0ac      	beq.n	801a306 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a3ac:	3901      	subs	r1, #1
 801a3ae:	4296      	cmp	r6, r2
 801a3b0:	b289      	uxth	r1, r1
 801a3b2:	daa7      	bge.n	801a304 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a3b4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a3b8:	682b      	ldr	r3, [r5, #0]
 801a3ba:	3301      	adds	r3, #1
 801a3bc:	602b      	str	r3, [r5, #0]
 801a3be:	e7f2      	b.n	801a3a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801a3c0:	b188      	cbz	r0, 801a3e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a3c2:	682b      	ldr	r3, [r5, #0]
 801a3c4:	3801      	subs	r0, #1
 801a3c6:	429a      	cmp	r2, r3
 801a3c8:	b280      	uxth	r0, r0
 801a3ca:	dd0c      	ble.n	801a3e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a3cc:	f8db 3000 	ldr.w	r3, [fp]
 801a3d0:	1c9c      	adds	r4, r3, #2
 801a3d2:	f8cb 4000 	str.w	r4, [fp]
 801a3d6:	881c      	ldrh	r4, [r3, #0]
 801a3d8:	682b      	ldr	r3, [r5, #0]
 801a3da:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801a3de:	682b      	ldr	r3, [r5, #0]
 801a3e0:	3301      	adds	r3, #1
 801a3e2:	602b      	str	r3, [r5, #0]
 801a3e4:	e7ec      	b.n	801a3c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a3e6:	2620      	movs	r6, #32
 801a3e8:	b151      	cbz	r1, 801a400 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a3ea:	6828      	ldr	r0, [r5, #0]
 801a3ec:	3901      	subs	r1, #1
 801a3ee:	4282      	cmp	r2, r0
 801a3f0:	b289      	uxth	r1, r1
 801a3f2:	dd05      	ble.n	801a400 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a3f4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801a3f8:	682b      	ldr	r3, [r5, #0]
 801a3fa:	3301      	adds	r3, #1
 801a3fc:	602b      	str	r3, [r5, #0]
 801a3fe:	e7f3      	b.n	801a3e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801a400:	b005      	add	sp, #20
 801a402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a406 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801a406:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a40a:	2400      	movs	r4, #0
 801a40c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801a410:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801a414:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801a418:	8014      	strh	r4, [r2, #0]
 801a41a:	701c      	strb	r4, [r3, #0]
 801a41c:	f888 4000 	strb.w	r4, [r8]
 801a420:	f88c 4000 	strb.w	r4, [ip]
 801a424:	f88e 4000 	strb.w	r4, [lr]
 801a428:	703c      	strb	r4, [r7, #0]
 801a42a:	6804      	ldr	r4, [r0, #0]
 801a42c:	b1a4      	cbz	r4, 801a458 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801a42e:	8824      	ldrh	r4, [r4, #0]
 801a430:	f04f 0901 	mov.w	r9, #1
 801a434:	b314      	cbz	r4, 801a47c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a436:	2c2b      	cmp	r4, #43	@ 0x2b
 801a438:	d001      	beq.n	801a43e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801a43a:	2c20      	cmp	r4, #32
 801a43c:	d110      	bne.n	801a460 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801a43e:	8014      	strh	r4, [r2, #0]
 801a440:	6804      	ldr	r4, [r0, #0]
 801a442:	b10c      	cbz	r4, 801a448 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801a444:	3402      	adds	r4, #2
 801a446:	6004      	str	r4, [r0, #0]
 801a448:	680c      	ldr	r4, [r1, #0]
 801a44a:	b10c      	cbz	r4, 801a450 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801a44c:	3401      	adds	r4, #1
 801a44e:	600c      	str	r4, [r1, #0]
 801a450:	6804      	ldr	r4, [r0, #0]
 801a452:	b17c      	cbz	r4, 801a474 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801a454:	8824      	ldrh	r4, [r4, #0]
 801a456:	e7ed      	b.n	801a434 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a458:	680c      	ldr	r4, [r1, #0]
 801a45a:	b17c      	cbz	r4, 801a47c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a45c:	7824      	ldrb	r4, [r4, #0]
 801a45e:	e7e7      	b.n	801a430 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801a460:	2c2d      	cmp	r4, #45	@ 0x2d
 801a462:	d102      	bne.n	801a46a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801a464:	f883 9000 	strb.w	r9, [r3]
 801a468:	e7ea      	b.n	801a440 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a46a:	2c23      	cmp	r4, #35	@ 0x23
 801a46c:	d107      	bne.n	801a47e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801a46e:	f888 9000 	strb.w	r9, [r8]
 801a472:	e7e5      	b.n	801a440 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a474:	680c      	ldr	r4, [r1, #0]
 801a476:	b10c      	cbz	r4, 801a47c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a478:	7824      	ldrb	r4, [r4, #0]
 801a47a:	e7db      	b.n	801a434 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a47c:	2400      	movs	r4, #0
 801a47e:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801a482:	2b09      	cmp	r3, #9
 801a484:	d901      	bls.n	801a48a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801a486:	2c2a      	cmp	r4, #42	@ 0x2a
 801a488:	d122      	bne.n	801a4d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a48a:	2301      	movs	r3, #1
 801a48c:	2c30      	cmp	r4, #48	@ 0x30
 801a48e:	f88e 3000 	strb.w	r3, [lr]
 801a492:	d10d      	bne.n	801a4b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a494:	f88c 3000 	strb.w	r3, [ip]
 801a498:	6803      	ldr	r3, [r0, #0]
 801a49a:	b10b      	cbz	r3, 801a4a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801a49c:	3302      	adds	r3, #2
 801a49e:	6003      	str	r3, [r0, #0]
 801a4a0:	680b      	ldr	r3, [r1, #0]
 801a4a2:	b10b      	cbz	r3, 801a4a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801a4a4:	3301      	adds	r3, #1
 801a4a6:	600b      	str	r3, [r1, #0]
 801a4a8:	6803      	ldr	r3, [r0, #0]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d02f      	beq.n	801a50e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801a4ae:	881c      	ldrh	r4, [r3, #0]
 801a4b0:	2c2a      	cmp	r4, #42	@ 0x2a
 801a4b2:	d135      	bne.n	801a520 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a4b4:	f04f 33ff 	mov.w	r3, #4294967295
 801a4b8:	6033      	str	r3, [r6, #0]
 801a4ba:	6803      	ldr	r3, [r0, #0]
 801a4bc:	b10b      	cbz	r3, 801a4c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801a4be:	3302      	adds	r3, #2
 801a4c0:	6003      	str	r3, [r0, #0]
 801a4c2:	680b      	ldr	r3, [r1, #0]
 801a4c4:	b10b      	cbz	r3, 801a4ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801a4c6:	3301      	adds	r3, #1
 801a4c8:	600b      	str	r3, [r1, #0]
 801a4ca:	6803      	ldr	r3, [r0, #0]
 801a4cc:	b31b      	cbz	r3, 801a516 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801a4ce:	881c      	ldrh	r4, [r3, #0]
 801a4d0:	2c2e      	cmp	r4, #46	@ 0x2e
 801a4d2:	d11a      	bne.n	801a50a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a4d4:	2301      	movs	r3, #1
 801a4d6:	703b      	strb	r3, [r7, #0]
 801a4d8:	6803      	ldr	r3, [r0, #0]
 801a4da:	b10b      	cbz	r3, 801a4e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801a4dc:	3302      	adds	r3, #2
 801a4de:	6003      	str	r3, [r0, #0]
 801a4e0:	680b      	ldr	r3, [r1, #0]
 801a4e2:	b10b      	cbz	r3, 801a4e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801a4e4:	3301      	adds	r3, #1
 801a4e6:	600b      	str	r3, [r1, #0]
 801a4e8:	6803      	ldr	r3, [r0, #0]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d036      	beq.n	801a55c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801a4ee:	881b      	ldrh	r3, [r3, #0]
 801a4f0:	2b2a      	cmp	r3, #42	@ 0x2a
 801a4f2:	d137      	bne.n	801a564 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a4f4:	f04f 33ff 	mov.w	r3, #4294967295
 801a4f8:	602b      	str	r3, [r5, #0]
 801a4fa:	6803      	ldr	r3, [r0, #0]
 801a4fc:	b10b      	cbz	r3, 801a502 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801a4fe:	3302      	adds	r3, #2
 801a500:	6003      	str	r3, [r0, #0]
 801a502:	680b      	ldr	r3, [r1, #0]
 801a504:	b10b      	cbz	r3, 801a50a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a506:	3301      	adds	r3, #1
 801a508:	600b      	str	r3, [r1, #0]
 801a50a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a50e:	680c      	ldr	r4, [r1, #0]
 801a510:	b134      	cbz	r4, 801a520 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a512:	7824      	ldrb	r4, [r4, #0]
 801a514:	e7cc      	b.n	801a4b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a516:	680b      	ldr	r3, [r1, #0]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d0f6      	beq.n	801a50a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a51c:	781c      	ldrb	r4, [r3, #0]
 801a51e:	e7d7      	b.n	801a4d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a520:	2300      	movs	r3, #0
 801a522:	220a      	movs	r2, #10
 801a524:	6033      	str	r3, [r6, #0]
 801a526:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a52a:	fa1f f38c 	uxth.w	r3, ip
 801a52e:	2b09      	cmp	r3, #9
 801a530:	d8ce      	bhi.n	801a4d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a532:	6833      	ldr	r3, [r6, #0]
 801a534:	fb02 c303 	mla	r3, r2, r3, ip
 801a538:	6033      	str	r3, [r6, #0]
 801a53a:	6803      	ldr	r3, [r0, #0]
 801a53c:	b10b      	cbz	r3, 801a542 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801a53e:	3302      	adds	r3, #2
 801a540:	6003      	str	r3, [r0, #0]
 801a542:	680b      	ldr	r3, [r1, #0]
 801a544:	b10b      	cbz	r3, 801a54a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801a546:	3301      	adds	r3, #1
 801a548:	600b      	str	r3, [r1, #0]
 801a54a:	6803      	ldr	r3, [r0, #0]
 801a54c:	b10b      	cbz	r3, 801a552 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801a54e:	881c      	ldrh	r4, [r3, #0]
 801a550:	e7e9      	b.n	801a526 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a552:	680c      	ldr	r4, [r1, #0]
 801a554:	2c00      	cmp	r4, #0
 801a556:	d0e6      	beq.n	801a526 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a558:	7824      	ldrb	r4, [r4, #0]
 801a55a:	e7e4      	b.n	801a526 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a55c:	680b      	ldr	r3, [r1, #0]
 801a55e:	b10b      	cbz	r3, 801a564 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a560:	781b      	ldrb	r3, [r3, #0]
 801a562:	e7c5      	b.n	801a4f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801a564:	2200      	movs	r2, #0
 801a566:	240a      	movs	r4, #10
 801a568:	602a      	str	r2, [r5, #0]
 801a56a:	3b30      	subs	r3, #48	@ 0x30
 801a56c:	682a      	ldr	r2, [r5, #0]
 801a56e:	b29e      	uxth	r6, r3
 801a570:	2e09      	cmp	r6, #9
 801a572:	d813      	bhi.n	801a59c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801a574:	fb04 3302 	mla	r3, r4, r2, r3
 801a578:	602b      	str	r3, [r5, #0]
 801a57a:	6803      	ldr	r3, [r0, #0]
 801a57c:	b10b      	cbz	r3, 801a582 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801a57e:	3302      	adds	r3, #2
 801a580:	6003      	str	r3, [r0, #0]
 801a582:	680b      	ldr	r3, [r1, #0]
 801a584:	b10b      	cbz	r3, 801a58a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801a586:	3301      	adds	r3, #1
 801a588:	600b      	str	r3, [r1, #0]
 801a58a:	6803      	ldr	r3, [r0, #0]
 801a58c:	b10b      	cbz	r3, 801a592 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801a58e:	881b      	ldrh	r3, [r3, #0]
 801a590:	e7eb      	b.n	801a56a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a592:	680b      	ldr	r3, [r1, #0]
 801a594:	2b00      	cmp	r3, #0
 801a596:	d0e8      	beq.n	801a56a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a598:	781b      	ldrb	r3, [r3, #0]
 801a59a:	e7e6      	b.n	801a56a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a59c:	2a06      	cmp	r2, #6
 801a59e:	bfa8      	it	ge
 801a5a0:	2206      	movge	r2, #6
 801a5a2:	602a      	str	r2, [r5, #0]
 801a5a4:	e7b1      	b.n	801a50a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801a5a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801a5a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5aa:	b0a3      	sub	sp, #140	@ 0x8c
 801a5ac:	2600      	movs	r6, #0
 801a5ae:	4607      	mov	r7, r0
 801a5b0:	4688      	mov	r8, r1
 801a5b2:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801a5b6:	4631      	mov	r1, r6
 801a5b8:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801a5ba:	4648      	mov	r0, r9
 801a5bc:	960d      	str	r6, [sp, #52]	@ 0x34
 801a5be:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801a5c2:	2242      	movs	r2, #66	@ 0x42
 801a5c4:	f00f f93d 	bl	8029842 <memset>
 801a5c8:	b15f      	cbz	r7, 801a5e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801a5ca:	f108 3aff 	add.w	sl, r8, #4294967295
 801a5ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a5d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a5d2:	b152      	cbz	r2, 801a5ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801a5d4:	8812      	ldrh	r2, [r2, #0]
 801a5d6:	b10a      	cbz	r2, 801a5dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801a5d8:	459a      	cmp	sl, r3
 801a5da:	dc2e      	bgt.n	801a63a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801a5dc:	2200      	movs	r2, #0
 801a5de:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801a5e2:	4638      	mov	r0, r7
 801a5e4:	b023      	add	sp, #140	@ 0x8c
 801a5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5ea:	9a08      	ldr	r2, [sp, #32]
 801a5ec:	2a00      	cmp	r2, #0
 801a5ee:	d0f5      	beq.n	801a5dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801a5f0:	7812      	ldrb	r2, [r2, #0]
 801a5f2:	e7f0      	b.n	801a5d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801a5f4:	2d00      	cmp	r5, #0
 801a5f6:	d0ea      	beq.n	801a5ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a5f8:	782a      	ldrb	r2, [r5, #0]
 801a5fa:	b142      	cbz	r2, 801a60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801a5fc:	2a25      	cmp	r2, #37	@ 0x25
 801a5fe:	d001      	beq.n	801a604 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801a600:	459a      	cmp	sl, r3
 801a602:	dc08      	bgt.n	801a616 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801a604:	f1bb 0f00 	cmp.w	fp, #0
 801a608:	d121      	bne.n	801a64e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801a60a:	2d00      	cmp	r5, #0
 801a60c:	d0df      	beq.n	801a5ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a60e:	782a      	ldrb	r2, [r5, #0]
 801a610:	f04f 0b00 	mov.w	fp, #0
 801a614:	e01d      	b.n	801a652 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801a616:	f1bb 0f00 	cmp.w	fp, #0
 801a61a:	d077      	beq.n	801a70c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801a61c:	f8bb 2000 	ldrh.w	r2, [fp]
 801a620:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801a624:	f1bb 0f00 	cmp.w	fp, #0
 801a628:	d002      	beq.n	801a630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801a62a:	f10b 0202 	add.w	r2, fp, #2
 801a62e:	9209      	str	r2, [sp, #36]	@ 0x24
 801a630:	b10d      	cbz	r5, 801a636 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801a632:	3501      	adds	r5, #1
 801a634:	9508      	str	r5, [sp, #32]
 801a636:	3301      	adds	r3, #1
 801a638:	930d      	str	r3, [sp, #52]	@ 0x34
 801a63a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a63c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801a640:	f1bb 0f00 	cmp.w	fp, #0
 801a644:	d0d6      	beq.n	801a5f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801a646:	f8bb 2000 	ldrh.w	r2, [fp]
 801a64a:	2a00      	cmp	r2, #0
 801a64c:	d1d6      	bne.n	801a5fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801a64e:	f8bb 2000 	ldrh.w	r2, [fp]
 801a652:	2a00      	cmp	r2, #0
 801a654:	d0bb      	beq.n	801a5ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a656:	459a      	cmp	sl, r3
 801a658:	ddb9      	ble.n	801a5ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a65a:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801a65e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801a662:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801a666:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801a66a:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801a66e:	960e      	str	r6, [sp, #56]	@ 0x38
 801a670:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801a674:	960f      	str	r6, [sp, #60]	@ 0x3c
 801a676:	f1bb 0f00 	cmp.w	fp, #0
 801a67a:	d002      	beq.n	801a682 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801a67c:	f10b 0302 	add.w	r3, fp, #2
 801a680:	9309      	str	r3, [sp, #36]	@ 0x24
 801a682:	b10d      	cbz	r5, 801a688 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801a684:	1c6b      	adds	r3, r5, #1
 801a686:	9308      	str	r3, [sp, #32]
 801a688:	ab0f      	add	r3, sp, #60	@ 0x3c
 801a68a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801a68e:	a908      	add	r1, sp, #32
 801a690:	a809      	add	r0, sp, #36	@ 0x24
 801a692:	9305      	str	r3, [sp, #20]
 801a694:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801a698:	9304      	str	r3, [sp, #16]
 801a69a:	ab0e      	add	r3, sp, #56	@ 0x38
 801a69c:	9303      	str	r3, [sp, #12]
 801a69e:	ab0c      	add	r3, sp, #48	@ 0x30
 801a6a0:	9302      	str	r3, [sp, #8]
 801a6a2:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801a6a6:	9301      	str	r3, [sp, #4]
 801a6a8:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801a6ac:	9300      	str	r3, [sp, #0]
 801a6ae:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801a6b2:	f7ff fea8 	bl	801a406 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801a6b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	bfbf      	itttt	lt
 801a6bc:	6823      	ldrlt	r3, [r4, #0]
 801a6be:	3404      	addlt	r4, #4
 801a6c0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a6c4:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801a6c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	bfbe      	ittt	lt
 801a6cc:	6823      	ldrlt	r3, [r4, #0]
 801a6ce:	3404      	addlt	r4, #4
 801a6d0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a6d4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a6d8:	bfb8      	it	lt
 801a6da:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801a6dc:	b1d9      	cbz	r1, 801a716 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801a6de:	880b      	ldrh	r3, [r1, #0]
 801a6e0:	2b69      	cmp	r3, #105	@ 0x69
 801a6e2:	d01f      	beq.n	801a724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a6e4:	d82f      	bhi.n	801a746 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801a6e6:	2b58      	cmp	r3, #88	@ 0x58
 801a6e8:	d01c      	beq.n	801a724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a6ea:	d818      	bhi.n	801a71e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801a6ec:	2b25      	cmp	r3, #37	@ 0x25
 801a6ee:	d034      	beq.n	801a75a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801a6f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a6f2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801a6f6:	f1bb 0f00 	cmp.w	fp, #0
 801a6fa:	f000 80b7 	beq.w	801a86c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801a6fe:	f8bb 5000 	ldrh.w	r5, [fp]
 801a702:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801a706:	3301      	adds	r3, #1
 801a708:	930d      	str	r3, [sp, #52]	@ 0x34
 801a70a:	e029      	b.n	801a760 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a70c:	b10d      	cbz	r5, 801a712 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801a70e:	782a      	ldrb	r2, [r5, #0]
 801a710:	e786      	b.n	801a620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a712:	462a      	mov	r2, r5
 801a714:	e784      	b.n	801a620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a716:	2a00      	cmp	r2, #0
 801a718:	d0ea      	beq.n	801a6f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a71a:	7813      	ldrb	r3, [r2, #0]
 801a71c:	e7e0      	b.n	801a6e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801a71e:	3b63      	subs	r3, #99	@ 0x63
 801a720:	2b01      	cmp	r3, #1
 801a722:	d8e5      	bhi.n	801a6f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a724:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801a728:	b329      	cbz	r1, 801a776 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801a72a:	880b      	ldrh	r3, [r1, #0]
 801a72c:	2b69      	cmp	r3, #105	@ 0x69
 801a72e:	d063      	beq.n	801a7f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a730:	d825      	bhi.n	801a77e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801a732:	2b63      	cmp	r3, #99	@ 0x63
 801a734:	d038      	beq.n	801a7a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801a736:	2b64      	cmp	r3, #100	@ 0x64
 801a738:	d05e      	beq.n	801a7f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a73a:	2b58      	cmp	r3, #88	@ 0x58
 801a73c:	d07a      	beq.n	801a834 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801a73e:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801a742:	4625      	mov	r5, r4
 801a744:	e036      	b.n	801a7b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a746:	2b73      	cmp	r3, #115	@ 0x73
 801a748:	d0ec      	beq.n	801a724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a74a:	d802      	bhi.n	801a752 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801a74c:	2b6f      	cmp	r3, #111	@ 0x6f
 801a74e:	d1cf      	bne.n	801a6f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a750:	e7e8      	b.n	801a724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a752:	2b75      	cmp	r3, #117	@ 0x75
 801a754:	d0e6      	beq.n	801a724 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a756:	2b78      	cmp	r3, #120	@ 0x78
 801a758:	e7f9      	b.n	801a74e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801a75a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a75c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801a760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a762:	b10b      	cbz	r3, 801a768 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801a764:	3302      	adds	r3, #2
 801a766:	9309      	str	r3, [sp, #36]	@ 0x24
 801a768:	9b08      	ldr	r3, [sp, #32]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	f43f af2f 	beq.w	801a5ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a770:	3301      	adds	r3, #1
 801a772:	9308      	str	r3, [sp, #32]
 801a774:	e72b      	b.n	801a5ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a776:	2a00      	cmp	r2, #0
 801a778:	d0e1      	beq.n	801a73e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a77a:	7813      	ldrb	r3, [r2, #0]
 801a77c:	e7d6      	b.n	801a72c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801a77e:	2b73      	cmp	r3, #115	@ 0x73
 801a780:	d036      	beq.n	801a7f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801a782:	d807      	bhi.n	801a794 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801a784:	2b6f      	cmp	r3, #111	@ 0x6f
 801a786:	d1da      	bne.n	801a73e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a788:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a78a:	1d25      	adds	r5, r4, #4
 801a78c:	2308      	movs	r3, #8
 801a78e:	eba8 0202 	sub.w	r2, r8, r2
 801a792:	e049      	b.n	801a828 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a794:	2b75      	cmp	r3, #117	@ 0x75
 801a796:	d042      	beq.n	801a81e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801a798:	2b78      	cmp	r3, #120	@ 0x78
 801a79a:	d1d0      	bne.n	801a73e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a79c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a79e:	1d25      	adds	r5, r4, #4
 801a7a0:	2310      	movs	r3, #16
 801a7a2:	eba8 0202 	sub.w	r2, r8, r2
 801a7a6:	e03f      	b.n	801a828 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a7a8:	6823      	ldr	r3, [r4, #0]
 801a7aa:	1d25      	adds	r5, r4, #4
 801a7ac:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801a7b0:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801a7b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7b6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d051      	beq.n	801a862 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801a7be:	881a      	ldrh	r2, [r3, #0]
 801a7c0:	a80d      	add	r0, sp, #52	@ 0x34
 801a7c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801a7c6:	462c      	mov	r4, r5
 801a7c8:	9005      	str	r0, [sp, #20]
 801a7ca:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801a7ce:	9004      	str	r0, [sp, #16]
 801a7d0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a7d2:	9003      	str	r0, [sp, #12]
 801a7d4:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801a7d8:	9002      	str	r0, [sp, #8]
 801a7da:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801a7dc:	9001      	str	r0, [sp, #4]
 801a7de:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801a7e2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801a7e6:	9000      	str	r0, [sp, #0]
 801a7e8:	a810      	add	r0, sp, #64	@ 0x40
 801a7ea:	f7ff fd49 	bl	801a280 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801a7ee:	e7b7      	b.n	801a760 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a7f0:	1d25      	adds	r5, r4, #4
 801a7f2:	6823      	ldr	r3, [r4, #0]
 801a7f4:	9310      	str	r3, [sp, #64]	@ 0x40
 801a7f6:	e7dd      	b.n	801a7b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a7f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a7fa:	230a      	movs	r3, #10
 801a7fc:	4649      	mov	r1, r9
 801a7fe:	6820      	ldr	r0, [r4, #0]
 801a800:	eba8 0202 	sub.w	r2, r8, r2
 801a804:	1d25      	adds	r5, r4, #4
 801a806:	b292      	uxth	r2, r2
 801a808:	f7ff fcf0 	bl	801a1ec <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801a80c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801a810:	2b2d      	cmp	r3, #45	@ 0x2d
 801a812:	d1cf      	bne.n	801a7b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a814:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a818:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a81a:	3302      	adds	r3, #2
 801a81c:	e7ea      	b.n	801a7f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801a81e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a820:	1d25      	adds	r5, r4, #4
 801a822:	230a      	movs	r3, #10
 801a824:	eba8 0202 	sub.w	r2, r8, r2
 801a828:	b292      	uxth	r2, r2
 801a82a:	4649      	mov	r1, r9
 801a82c:	6820      	ldr	r0, [r4, #0]
 801a82e:	f7ff fd09 	bl	801a244 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a832:	e7bf      	b.n	801a7b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a834:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a836:	2310      	movs	r3, #16
 801a838:	4649      	mov	r1, r9
 801a83a:	6820      	ldr	r0, [r4, #0]
 801a83c:	eba8 0202 	sub.w	r2, r8, r2
 801a840:	1d25      	adds	r5, r4, #4
 801a842:	b292      	uxth	r2, r2
 801a844:	f7ff fcfe 	bl	801a244 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a848:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801a84c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a850:	2b00      	cmp	r3, #0
 801a852:	d0af      	beq.n	801a7b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a854:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801a858:	2919      	cmp	r1, #25
 801a85a:	d8f7      	bhi.n	801a84c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a85c:	3b20      	subs	r3, #32
 801a85e:	8013      	strh	r3, [r2, #0]
 801a860:	e7f4      	b.n	801a84c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a862:	9a08      	ldr	r2, [sp, #32]
 801a864:	2a00      	cmp	r2, #0
 801a866:	d0ab      	beq.n	801a7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a868:	7812      	ldrb	r2, [r2, #0]
 801a86a:	e7a9      	b.n	801a7c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a86c:	2d00      	cmp	r5, #0
 801a86e:	f43f af48 	beq.w	801a702 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801a872:	782d      	ldrb	r5, [r5, #0]
 801a874:	e745      	b.n	801a702 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801a876 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801a876:	b507      	push	{r0, r1, r2, lr}
 801a878:	9300      	str	r3, [sp, #0]
 801a87a:	4613      	mov	r3, r2
 801a87c:	2200      	movs	r2, #0
 801a87e:	f7ff fe92 	bl	801a5a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801a882:	b003      	add	sp, #12
 801a884:	f85d fb04 	ldr.w	pc, [sp], #4

0801a888 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801a888:	b40c      	push	{r2, r3}
 801a88a:	b507      	push	{r0, r1, r2, lr}
 801a88c:	ab04      	add	r3, sp, #16
 801a88e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a892:	9301      	str	r3, [sp, #4]
 801a894:	f7ff ffef 	bl	801a876 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801a898:	b003      	add	sp, #12
 801a89a:	f85d eb04 	ldr.w	lr, [sp], #4
 801a89e:	b002      	add	sp, #8
 801a8a0:	4770      	bx	lr
	...

0801a8a4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a8a4:	4b01      	ldr	r3, [pc, #4]	@ (801a8ac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a8a6:	6018      	str	r0, [r3, #0]
 801a8a8:	4770      	bx	lr
 801a8aa:	bf00      	nop
 801a8ac:	24006660 	.word	0x24006660

0801a8b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a8b0:	4b06      	ldr	r3, [pc, #24]	@ (801a8cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a8b2:	881a      	ldrh	r2, [r3, #0]
 801a8b4:	4282      	cmp	r2, r0
 801a8b6:	d807      	bhi.n	801a8c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a8b8:	4b05      	ldr	r3, [pc, #20]	@ (801a8d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a8ba:	881b      	ldrh	r3, [r3, #0]
 801a8bc:	4413      	add	r3, r2
 801a8be:	4298      	cmp	r0, r3
 801a8c0:	bfac      	ite	ge
 801a8c2:	2000      	movge	r0, #0
 801a8c4:	2001      	movlt	r0, #1
 801a8c6:	4770      	bx	lr
 801a8c8:	2000      	movs	r0, #0
 801a8ca:	4770      	bx	lr
 801a8cc:	24006680 	.word	0x24006680
 801a8d0:	24006684 	.word	0x24006684

0801a8d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a8d4:	b508      	push	{r3, lr}
 801a8d6:	4601      	mov	r1, r0
 801a8d8:	f7ff ffea 	bl	801a8b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a8dc:	b118      	cbz	r0, 801a8e6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a8de:	4b02      	ldr	r3, [pc, #8]	@ (801a8e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a8e6:	bd08      	pop	{r3, pc}
 801a8e8:	24006664 	.word	0x24006664

0801a8ec <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8ee:	4c24      	ldr	r4, [pc, #144]	@ (801a980 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a8f0:	6823      	ldr	r3, [r4, #0]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d042      	beq.n	801a97c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a8f6:	4a23      	ldr	r2, [pc, #140]	@ (801a984 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a8f8:	4d23      	ldr	r5, [pc, #140]	@ (801a988 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a8fa:	8811      	ldrh	r1, [r2, #0]
 801a8fc:	f8b5 c000 	ldrh.w	ip, [r5]
 801a900:	4822      	ldr	r0, [pc, #136]	@ (801a98c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a902:	4461      	add	r1, ip
 801a904:	1c4a      	adds	r2, r1, #1
 801a906:	008f      	lsls	r7, r1, #2
 801a908:	f022 0201 	bic.w	r2, r2, #1
 801a90c:	19de      	adds	r6, r3, r7
 801a90e:	0412      	lsls	r2, r2, #16
 801a910:	6006      	str	r6, [r0, #0]
 801a912:	4e1f      	ldr	r6, [pc, #124]	@ (801a990 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a914:	0c12      	lsrs	r2, r2, #16
 801a916:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a91a:	19da      	adds	r2, r3, r7
 801a91c:	6032      	str	r2, [r6, #0]
 801a91e:	220e      	movs	r2, #14
 801a920:	fb02 f20c 	mul.w	r2, r2, ip
 801a924:	3203      	adds	r2, #3
 801a926:	f022 0203 	bic.w	r2, r2, #3
 801a92a:	443a      	add	r2, r7
 801a92c:	4f19      	ldr	r7, [pc, #100]	@ (801a994 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a92e:	4413      	add	r3, r2
 801a930:	603b      	str	r3, [r7, #0]
 801a932:	2300      	movs	r3, #0
 801a934:	4f18      	ldr	r7, [pc, #96]	@ (801a998 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a936:	469c      	mov	ip, r3
 801a938:	803b      	strh	r3, [r7, #0]
 801a93a:	4f18      	ldr	r7, [pc, #96]	@ (801a99c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a93c:	683f      	ldr	r7, [r7, #0]
 801a93e:	1aba      	subs	r2, r7, r2
 801a940:	4f17      	ldr	r7, [pc, #92]	@ (801a9a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a942:	603a      	str	r2, [r7, #0]
 801a944:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801a948:	4a16      	ldr	r2, [pc, #88]	@ (801a9a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a94a:	8013      	strh	r3, [r2, #0]
 801a94c:	428b      	cmp	r3, r1
 801a94e:	d10d      	bne.n	801a96c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a950:	882d      	ldrh	r5, [r5, #0]
 801a952:	2300      	movs	r3, #0
 801a954:	6830      	ldr	r0, [r6, #0]
 801a956:	240e      	movs	r4, #14
 801a958:	429d      	cmp	r5, r3
 801a95a:	d90f      	bls.n	801a97c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a95c:	fb04 0203 	mla	r2, r4, r3, r0
 801a960:	3301      	adds	r3, #1
 801a962:	7b11      	ldrb	r1, [r2, #12]
 801a964:	f36f 1145 	bfc	r1, #5, #1
 801a968:	7311      	strb	r1, [r2, #12]
 801a96a:	e7f5      	b.n	801a958 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a96c:	6822      	ldr	r2, [r4, #0]
 801a96e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a972:	6802      	ldr	r2, [r0, #0]
 801a974:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a978:	3301      	adds	r3, #1
 801a97a:	e7e7      	b.n	801a94c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a97e:	bf00      	nop
 801a980:	24006664 	.word	0x24006664
 801a984:	24006680 	.word	0x24006680
 801a988:	24006684 	.word	0x24006684
 801a98c:	24006678 	.word	0x24006678
 801a990:	24006668 	.word	0x24006668
 801a994:	24006670 	.word	0x24006670
 801a998:	24006682 	.word	0x24006682
 801a99c:	2400666c 	.word	0x2400666c
 801a9a0:	2400667c 	.word	0x2400667c
 801a9a4:	24006674 	.word	0x24006674

0801a9a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a9a8:	4b06      	ldr	r3, [pc, #24]	@ (801a9c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	b943      	cbnz	r3, 801a9c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a9ae:	b139      	cbz	r1, 801a9c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a9b0:	4b05      	ldr	r3, [pc, #20]	@ (801a9c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a9b2:	801a      	strh	r2, [r3, #0]
 801a9b4:	4b05      	ldr	r3, [pc, #20]	@ (801a9cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a9b6:	6019      	str	r1, [r3, #0]
 801a9b8:	4b05      	ldr	r3, [pc, #20]	@ (801a9d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a9ba:	6018      	str	r0, [r3, #0]
 801a9bc:	f7ff bf96 	b.w	801a8ec <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a9c0:	4770      	bx	lr
 801a9c2:	bf00      	nop
 801a9c4:	24006670 	.word	0x24006670
 801a9c8:	24006684 	.word	0x24006684
 801a9cc:	2400666c 	.word	0x2400666c
 801a9d0:	24006664 	.word	0x24006664

0801a9d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a9d4:	b470      	push	{r4, r5, r6}
 801a9d6:	4c07      	ldr	r4, [pc, #28]	@ (801a9f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a9d8:	4605      	mov	r5, r0
 801a9da:	4610      	mov	r0, r2
 801a9dc:	9a03      	ldr	r2, [sp, #12]
 801a9de:	6826      	ldr	r6, [r4, #0]
 801a9e0:	b936      	cbnz	r6, 801a9f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a9e2:	6025      	str	r5, [r4, #0]
 801a9e4:	4c04      	ldr	r4, [pc, #16]	@ (801a9f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a9e6:	8021      	strh	r1, [r4, #0]
 801a9e8:	4619      	mov	r1, r3
 801a9ea:	bc70      	pop	{r4, r5, r6}
 801a9ec:	f7ff bfdc 	b.w	801a9a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a9f0:	bc70      	pop	{r4, r5, r6}
 801a9f2:	4770      	bx	lr
 801a9f4:	24006688 	.word	0x24006688
 801a9f8:	24006680 	.word	0x24006680

0801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a9fc:	4a12      	ldr	r2, [pc, #72]	@ (801aa48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a9fe:	8803      	ldrh	r3, [r0, #0]
 801aa00:	8812      	ldrh	r2, [r2, #0]
 801aa02:	4293      	cmp	r3, r2
 801aa04:	d207      	bcs.n	801aa16 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801aa06:	4a11      	ldr	r2, [pc, #68]	@ (801aa4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801aa08:	2114      	movs	r1, #20
 801aa0a:	6812      	ldr	r2, [r2, #0]
 801aa0c:	fb01 2303 	mla	r3, r1, r3, r2
 801aa10:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801aa14:	4770      	bx	lr
 801aa16:	490e      	ldr	r1, [pc, #56]	@ (801aa50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801aa18:	8809      	ldrh	r1, [r1, #0]
 801aa1a:	4411      	add	r1, r2
 801aa1c:	428b      	cmp	r3, r1
 801aa1e:	da04      	bge.n	801aa2a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801aa20:	1a9b      	subs	r3, r3, r2
 801aa22:	4a0c      	ldr	r2, [pc, #48]	@ (801aa54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801aa24:	210e      	movs	r1, #14
 801aa26:	6812      	ldr	r2, [r2, #0]
 801aa28:	e7f0      	b.n	801aa0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801aa2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801aa2e:	4293      	cmp	r3, r2
 801aa30:	d108      	bne.n	801aa44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801aa32:	4b09      	ldr	r3, [pc, #36]	@ (801aa58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801aa34:	781b      	ldrb	r3, [r3, #0]
 801aa36:	b91b      	cbnz	r3, 801aa40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801aa38:	4b08      	ldr	r3, [pc, #32]	@ (801aa5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801aa3a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801aa3e:	4770      	bx	lr
 801aa40:	4b07      	ldr	r3, [pc, #28]	@ (801aa60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801aa42:	e7fa      	b.n	801aa3a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801aa44:	2000      	movs	r0, #0
 801aa46:	4770      	bx	lr
 801aa48:	24006680 	.word	0x24006680
 801aa4c:	24006688 	.word	0x24006688
 801aa50:	24006684 	.word	0x24006684
 801aa54:	24006668 	.word	0x24006668
 801aa58:	240065f8 	.word	0x240065f8
 801aa5c:	240065fa 	.word	0x240065fa
 801aa60:	240065fc 	.word	0x240065fc

0801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801aa64:	4a12      	ldr	r2, [pc, #72]	@ (801aab0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801aa66:	8803      	ldrh	r3, [r0, #0]
 801aa68:	8812      	ldrh	r2, [r2, #0]
 801aa6a:	4293      	cmp	r3, r2
 801aa6c:	d207      	bcs.n	801aa7e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801aa6e:	4a11      	ldr	r2, [pc, #68]	@ (801aab4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801aa70:	2114      	movs	r1, #20
 801aa72:	6812      	ldr	r2, [r2, #0]
 801aa74:	fb01 2303 	mla	r3, r1, r3, r2
 801aa78:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801aa7c:	4770      	bx	lr
 801aa7e:	490e      	ldr	r1, [pc, #56]	@ (801aab8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801aa80:	8809      	ldrh	r1, [r1, #0]
 801aa82:	4411      	add	r1, r2
 801aa84:	428b      	cmp	r3, r1
 801aa86:	da04      	bge.n	801aa92 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801aa88:	1a9b      	subs	r3, r3, r2
 801aa8a:	4a0c      	ldr	r2, [pc, #48]	@ (801aabc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801aa8c:	210e      	movs	r1, #14
 801aa8e:	6812      	ldr	r2, [r2, #0]
 801aa90:	e7f0      	b.n	801aa74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801aa92:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801aa96:	4293      	cmp	r3, r2
 801aa98:	d108      	bne.n	801aaac <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801aa9a:	4b09      	ldr	r3, [pc, #36]	@ (801aac0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801aa9c:	781b      	ldrb	r3, [r3, #0]
 801aa9e:	b91b      	cbnz	r3, 801aaa8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801aaa0:	4b08      	ldr	r3, [pc, #32]	@ (801aac4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801aaa2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801aaa6:	4770      	bx	lr
 801aaa8:	4b07      	ldr	r3, [pc, #28]	@ (801aac8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801aaaa:	e7fa      	b.n	801aaa2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801aaac:	2000      	movs	r0, #0
 801aaae:	4770      	bx	lr
 801aab0:	24006680 	.word	0x24006680
 801aab4:	24006688 	.word	0x24006688
 801aab8:	24006684 	.word	0x24006684
 801aabc:	24006668 	.word	0x24006668
 801aac0:	240065f8 	.word	0x240065f8
 801aac4:	240065fc 	.word	0x240065fc
 801aac8:	240065fa 	.word	0x240065fa

0801aacc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801aacc:	4a22      	ldr	r2, [pc, #136]	@ (801ab58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801aace:	b530      	push	{r4, r5, lr}
 801aad0:	880b      	ldrh	r3, [r1, #0]
 801aad2:	8812      	ldrh	r2, [r2, #0]
 801aad4:	4293      	cmp	r3, r2
 801aad6:	d213      	bcs.n	801ab00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801aad8:	4a20      	ldr	r2, [pc, #128]	@ (801ab5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801aada:	2114      	movs	r1, #20
 801aadc:	6812      	ldr	r2, [r2, #0]
 801aade:	fb01 2303 	mla	r3, r1, r3, r2
 801aae2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801aae6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801aaea:	8a1a      	ldrh	r2, [r3, #16]
 801aaec:	8a5b      	ldrh	r3, [r3, #18]
 801aaee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801aaf2:	8004      	strh	r4, [r0, #0]
 801aaf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aaf8:	8041      	strh	r1, [r0, #2]
 801aafa:	8082      	strh	r2, [r0, #4]
 801aafc:	80c3      	strh	r3, [r0, #6]
 801aafe:	e024      	b.n	801ab4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801ab00:	4917      	ldr	r1, [pc, #92]	@ (801ab60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ab02:	8809      	ldrh	r1, [r1, #0]
 801ab04:	4411      	add	r1, r2
 801ab06:	428b      	cmp	r3, r1
 801ab08:	da10      	bge.n	801ab2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801ab0a:	1a9b      	subs	r3, r3, r2
 801ab0c:	220e      	movs	r2, #14
 801ab0e:	4353      	muls	r3, r2
 801ab10:	4a14      	ldr	r2, [pc, #80]	@ (801ab64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ab12:	6811      	ldr	r1, [r2, #0]
 801ab14:	18ca      	adds	r2, r1, r3
 801ab16:	5ecd      	ldrsh	r5, [r1, r3]
 801ab18:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801ab1c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801ab20:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801ab24:	8005      	strh	r5, [r0, #0]
 801ab26:	8044      	strh	r4, [r0, #2]
 801ab28:	8081      	strh	r1, [r0, #4]
 801ab2a:	e7e7      	b.n	801aafc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ab2c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ab30:	4293      	cmp	r3, r2
 801ab32:	d10b      	bne.n	801ab4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801ab34:	4b0c      	ldr	r3, [pc, #48]	@ (801ab68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ab36:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ab3a:	4b0c      	ldr	r3, [pc, #48]	@ (801ab6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ab3c:	8081      	strh	r1, [r0, #4]
 801ab3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab42:	2300      	movs	r3, #0
 801ab44:	80c2      	strh	r2, [r0, #6]
 801ab46:	8003      	strh	r3, [r0, #0]
 801ab48:	8043      	strh	r3, [r0, #2]
 801ab4a:	bd30      	pop	{r4, r5, pc}
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	8003      	strh	r3, [r0, #0]
 801ab50:	8043      	strh	r3, [r0, #2]
 801ab52:	8083      	strh	r3, [r0, #4]
 801ab54:	e7d2      	b.n	801aafc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ab56:	bf00      	nop
 801ab58:	24006680 	.word	0x24006680
 801ab5c:	24006688 	.word	0x24006688
 801ab60:	24006684 	.word	0x24006684
 801ab64:	24006668 	.word	0x24006668
 801ab68:	240065f4 	.word	0x240065f4
 801ab6c:	240065f6 	.word	0x240065f6

0801ab70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801ab70:	4a17      	ldr	r2, [pc, #92]	@ (801abd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801ab72:	8803      	ldrh	r3, [r0, #0]
 801ab74:	8812      	ldrh	r2, [r2, #0]
 801ab76:	4293      	cmp	r3, r2
 801ab78:	d213      	bcs.n	801aba2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801ab7a:	4a16      	ldr	r2, [pc, #88]	@ (801abd4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ab7c:	2114      	movs	r1, #20
 801ab7e:	6812      	ldr	r2, [r2, #0]
 801ab80:	fb01 2303 	mla	r3, r1, r3, r2
 801ab84:	8a1a      	ldrh	r2, [r3, #16]
 801ab86:	8919      	ldrh	r1, [r3, #8]
 801ab88:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ab8c:	428a      	cmp	r2, r1
 801ab8e:	db1d      	blt.n	801abcc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ab90:	8a58      	ldrh	r0, [r3, #18]
 801ab92:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ab96:	895b      	ldrh	r3, [r3, #10]
 801ab98:	4298      	cmp	r0, r3
 801ab9a:	bfac      	ite	ge
 801ab9c:	2000      	movge	r0, #0
 801ab9e:	2001      	movlt	r0, #1
 801aba0:	4770      	bx	lr
 801aba2:	490d      	ldr	r1, [pc, #52]	@ (801abd8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801aba4:	8809      	ldrh	r1, [r1, #0]
 801aba6:	4411      	add	r1, r2
 801aba8:	428b      	cmp	r3, r1
 801abaa:	da0d      	bge.n	801abc8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801abac:	1a9b      	subs	r3, r3, r2
 801abae:	4a0b      	ldr	r2, [pc, #44]	@ (801abdc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801abb0:	210e      	movs	r1, #14
 801abb2:	6812      	ldr	r2, [r2, #0]
 801abb4:	fb01 2303 	mla	r3, r1, r3, r2
 801abb8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801abbc:	891a      	ldrh	r2, [r3, #8]
 801abbe:	4291      	cmp	r1, r2
 801abc0:	db04      	blt.n	801abcc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801abc2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801abc6:	e7e6      	b.n	801ab96 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801abc8:	2000      	movs	r0, #0
 801abca:	4770      	bx	lr
 801abcc:	2001      	movs	r0, #1
 801abce:	4770      	bx	lr
 801abd0:	24006680 	.word	0x24006680
 801abd4:	24006688 	.word	0x24006688
 801abd8:	24006684 	.word	0x24006684
 801abdc:	24006668 	.word	0x24006668

0801abe0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801abe0:	4a12      	ldr	r2, [pc, #72]	@ (801ac2c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801abe2:	8803      	ldrh	r3, [r0, #0]
 801abe4:	8811      	ldrh	r1, [r2, #0]
 801abe6:	428b      	cmp	r3, r1
 801abe8:	d20b      	bcs.n	801ac02 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801abea:	4a11      	ldr	r2, [pc, #68]	@ (801ac30 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801abec:	6812      	ldr	r2, [r2, #0]
 801abee:	b112      	cbz	r2, 801abf6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801abf0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801abf4:	b9c0      	cbnz	r0, 801ac28 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801abf6:	4a0f      	ldr	r2, [pc, #60]	@ (801ac34 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801abf8:	6811      	ldr	r1, [r2, #0]
 801abfa:	2214      	movs	r2, #20
 801abfc:	4353      	muls	r3, r2
 801abfe:	58c8      	ldr	r0, [r1, r3]
 801ac00:	4770      	bx	lr
 801ac02:	4a0d      	ldr	r2, [pc, #52]	@ (801ac38 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ac04:	8812      	ldrh	r2, [r2, #0]
 801ac06:	440a      	add	r2, r1
 801ac08:	4293      	cmp	r3, r2
 801ac0a:	da04      	bge.n	801ac16 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801ac0c:	4a08      	ldr	r2, [pc, #32]	@ (801ac30 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ac0e:	6812      	ldr	r2, [r2, #0]
 801ac10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ac14:	4770      	bx	lr
 801ac16:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ac1a:	4293      	cmp	r3, r2
 801ac1c:	d103      	bne.n	801ac26 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ac1e:	4b07      	ldr	r3, [pc, #28]	@ (801ac3c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801ac24:	4770      	bx	lr
 801ac26:	2000      	movs	r0, #0
 801ac28:	4770      	bx	lr
 801ac2a:	bf00      	nop
 801ac2c:	24006680 	.word	0x24006680
 801ac30:	24006664 	.word	0x24006664
 801ac34:	24006688 	.word	0x24006688
 801ac38:	24006684 	.word	0x24006684
 801ac3c:	24006600 	.word	0x24006600

0801ac40 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ac40:	4b24      	ldr	r3, [pc, #144]	@ (801acd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ac42:	8802      	ldrh	r2, [r0, #0]
 801ac44:	8818      	ldrh	r0, [r3, #0]
 801ac46:	4282      	cmp	r2, r0
 801ac48:	d221      	bcs.n	801ac8e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801ac4a:	4b23      	ldr	r3, [pc, #140]	@ (801acd8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ac4c:	6819      	ldr	r1, [r3, #0]
 801ac4e:	2314      	movs	r3, #20
 801ac50:	fb03 1302 	mla	r3, r3, r2, r1
 801ac54:	6858      	ldr	r0, [r3, #4]
 801ac56:	2800      	cmp	r0, #0
 801ac58:	d03a      	beq.n	801acd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ac5a:	4920      	ldr	r1, [pc, #128]	@ (801acdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ac5c:	6809      	ldr	r1, [r1, #0]
 801ac5e:	2900      	cmp	r1, #0
 801ac60:	d036      	beq.n	801acd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ac62:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ac66:	2900      	cmp	r1, #0
 801ac68:	d032      	beq.n	801acd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ac6a:	891a      	ldrh	r2, [r3, #8]
 801ac6c:	8958      	ldrh	r0, [r3, #10]
 801ac6e:	4350      	muls	r0, r2
 801ac70:	7c5a      	ldrb	r2, [r3, #17]
 801ac72:	7cdb      	ldrb	r3, [r3, #19]
 801ac74:	0952      	lsrs	r2, r2, #5
 801ac76:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ac7a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ac7e:	2b0b      	cmp	r3, #11
 801ac80:	bf18      	it	ne
 801ac82:	0040      	lslne	r0, r0, #1
 801ac84:	3003      	adds	r0, #3
 801ac86:	f020 0003 	bic.w	r0, r0, #3
 801ac8a:	4408      	add	r0, r1
 801ac8c:	4770      	bx	lr
 801ac8e:	4b14      	ldr	r3, [pc, #80]	@ (801ace0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ac90:	881b      	ldrh	r3, [r3, #0]
 801ac92:	4403      	add	r3, r0
 801ac94:	429a      	cmp	r2, r3
 801ac96:	da1a      	bge.n	801acce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ac98:	4b12      	ldr	r3, [pc, #72]	@ (801ace4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ac9a:	1a10      	subs	r0, r2, r0
 801ac9c:	210e      	movs	r1, #14
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	fb01 3000 	mla	r0, r1, r0, r3
 801aca4:	7b03      	ldrb	r3, [r0, #12]
 801aca6:	f003 031f 	and.w	r3, r3, #31
 801acaa:	2b0b      	cmp	r3, #11
 801acac:	d10b      	bne.n	801acc6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801acae:	8903      	ldrh	r3, [r0, #8]
 801acb0:	8940      	ldrh	r0, [r0, #10]
 801acb2:	4358      	muls	r0, r3
 801acb4:	4b09      	ldr	r3, [pc, #36]	@ (801acdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801acb6:	3003      	adds	r0, #3
 801acb8:	6819      	ldr	r1, [r3, #0]
 801acba:	f020 0303 	bic.w	r3, r0, #3
 801acbe:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801acc2:	4418      	add	r0, r3
 801acc4:	4770      	bx	lr
 801acc6:	2b0d      	cmp	r3, #13
 801acc8:	d101      	bne.n	801acce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801acca:	300d      	adds	r0, #13
 801accc:	4770      	bx	lr
 801acce:	2000      	movs	r0, #0
 801acd0:	4770      	bx	lr
 801acd2:	bf00      	nop
 801acd4:	24006680 	.word	0x24006680
 801acd8:	24006688 	.word	0x24006688
 801acdc:	24006664 	.word	0x24006664
 801ace0:	24006684 	.word	0x24006684
 801ace4:	24006668 	.word	0x24006668

0801ace8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ace8:	4b1f      	ldr	r3, [pc, #124]	@ (801ad68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801acea:	b510      	push	{r4, lr}
 801acec:	8802      	ldrh	r2, [r0, #0]
 801acee:	881b      	ldrh	r3, [r3, #0]
 801acf0:	429a      	cmp	r2, r3
 801acf2:	d21a      	bcs.n	801ad2a <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801acf4:	4b1d      	ldr	r3, [pc, #116]	@ (801ad6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801acf6:	2114      	movs	r1, #20
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	fb01 3102 	mla	r1, r1, r2, r3
 801acfe:	7c4b      	ldrb	r3, [r1, #17]
 801ad00:	0958      	lsrs	r0, r3, #5
 801ad02:	7ccb      	ldrb	r3, [r1, #19]
 801ad04:	491a      	ldr	r1, [pc, #104]	@ (801ad70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801ad06:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ad0a:	6809      	ldr	r1, [r1, #0]
 801ad0c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801ad10:	b2d8      	uxtb	r0, r3
 801ad12:	b149      	cbz	r1, 801ad28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ad14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801ad18:	b132      	cbz	r2, 801ad28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ad1a:	2b0e      	cmp	r3, #14
 801ad1c:	d021      	beq.n	801ad62 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801ad1e:	280f      	cmp	r0, #15
 801ad20:	d01d      	beq.n	801ad5e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801ad22:	2810      	cmp	r0, #16
 801ad24:	bf08      	it	eq
 801ad26:	2002      	moveq	r0, #2
 801ad28:	bd10      	pop	{r4, pc}
 801ad2a:	4912      	ldr	r1, [pc, #72]	@ (801ad74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801ad2c:	8809      	ldrh	r1, [r1, #0]
 801ad2e:	4419      	add	r1, r3
 801ad30:	428a      	cmp	r2, r1
 801ad32:	da09      	bge.n	801ad48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801ad34:	1ad3      	subs	r3, r2, r3
 801ad36:	4a10      	ldr	r2, [pc, #64]	@ (801ad78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801ad38:	210e      	movs	r1, #14
 801ad3a:	6812      	ldr	r2, [r2, #0]
 801ad3c:	fb01 2303 	mla	r3, r1, r3, r2
 801ad40:	7b18      	ldrb	r0, [r3, #12]
 801ad42:	f000 001f 	and.w	r0, r0, #31
 801ad46:	e7ef      	b.n	801ad28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ad48:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801ad4c:	429a      	cmp	r2, r3
 801ad4e:	d108      	bne.n	801ad62 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801ad50:	f7f2 fcba 	bl	800d6c8 <_ZN8touchgfx3HAL3lcdEv>
 801ad54:	6803      	ldr	r3, [r0, #0]
 801ad56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad5c:	4718      	bx	r3
 801ad5e:	2001      	movs	r0, #1
 801ad60:	e7e2      	b.n	801ad28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ad62:	2000      	movs	r0, #0
 801ad64:	e7e0      	b.n	801ad28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ad66:	bf00      	nop
 801ad68:	24006680 	.word	0x24006680
 801ad6c:	24006688 	.word	0x24006688
 801ad70:	24006664 	.word	0x24006664
 801ad74:	24006684 	.word	0x24006684
 801ad78:	24006668 	.word	0x24006668

0801ad7c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801ad7c:	2010      	movs	r0, #16
 801ad7e:	4770      	bx	lr

0801ad80 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801ad80:	2000      	movs	r0, #0
 801ad82:	4770      	bx	lr

0801ad84 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801ad84:	4b02      	ldr	r3, [pc, #8]	@ (801ad90 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801ad86:	8818      	ldrh	r0, [r3, #0]
 801ad88:	0040      	lsls	r0, r0, #1
 801ad8a:	b280      	uxth	r0, r0
 801ad8c:	4770      	bx	lr
 801ad8e:	bf00      	nop
 801ad90:	240065fa 	.word	0x240065fa

0801ad94 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ad94:	2bff      	cmp	r3, #255	@ 0xff
 801ad96:	d05e      	beq.n	801ae56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 801ad98:	2a0b      	cmp	r2, #11
 801ad9a:	d058      	beq.n	801ae4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801ad9c:	d80e      	bhi.n	801adbc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ad9e:	2a03      	cmp	r2, #3
 801ada0:	d04d      	beq.n	801ae3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801ada2:	d804      	bhi.n	801adae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ada4:	2a01      	cmp	r2, #1
 801ada6:	d04c      	beq.n	801ae42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 801ada8:	d94d      	bls.n	801ae46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801adaa:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801adac:	e031      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801adae:	2a09      	cmp	r2, #9
 801adb0:	d04d      	beq.n	801ae4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801adb2:	d84a      	bhi.n	801ae4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801adb4:	2a08      	cmp	r2, #8
 801adb6:	d048      	beq.n	801ae4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801adb8:	2300      	movs	r3, #0
 801adba:	e02a      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801adbc:	2a2f      	cmp	r2, #47	@ 0x2f
 801adbe:	d02c      	beq.n	801ae1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801adc0:	d811      	bhi.n	801ade6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801adc2:	2a2d      	cmp	r2, #45	@ 0x2d
 801adc4:	d018      	beq.n	801adf8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 801adc6:	d831      	bhi.n	801ae2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 801adc8:	2a2c      	cmp	r2, #44	@ 0x2c
 801adca:	d1f5      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801adcc:	684a      	ldr	r2, [r1, #4]
 801adce:	7813      	ldrb	r3, [r2, #0]
 801add0:	7852      	ldrb	r2, [r2, #1]
 801add2:	2a00      	cmp	r2, #0
 801add4:	d1f0      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801add6:	2b01      	cmp	r3, #1
 801add8:	d01d      	beq.n	801ae16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801adda:	2b00      	cmp	r3, #0
 801addc:	d02d      	beq.n	801ae3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801adde:	2b02      	cmp	r3, #2
 801ade0:	d1ea      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ade2:	68c3      	ldr	r3, [r0, #12]
 801ade4:	e015      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ade6:	2a31      	cmp	r2, #49	@ 0x31
 801ade8:	d004      	beq.n	801adf4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801adea:	d332      	bcc.n	801ae52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801adec:	2a32      	cmp	r2, #50	@ 0x32
 801adee:	d030      	beq.n	801ae52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801adf0:	2a33      	cmp	r2, #51	@ 0x33
 801adf2:	d1e1      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801adf4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801adf6:	e00c      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801adf8:	684a      	ldr	r2, [r1, #4]
 801adfa:	7813      	ldrb	r3, [r2, #0]
 801adfc:	7852      	ldrb	r2, [r2, #1]
 801adfe:	2a00      	cmp	r2, #0
 801ae00:	d1da      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ae02:	2b01      	cmp	r3, #1
 801ae04:	d004      	beq.n	801ae10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801ae06:	d30f      	bcc.n	801ae28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 801ae08:	2b02      	cmp	r3, #2
 801ae0a:	d1d5      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ae0c:	6943      	ldr	r3, [r0, #20]
 801ae0e:	e000      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae10:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ae12:	4618      	mov	r0, r3
 801ae14:	4770      	bx	lr
 801ae16:	69c3      	ldr	r3, [r0, #28]
 801ae18:	e7fb      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae1a:	684b      	ldr	r3, [r1, #4]
 801ae1c:	781a      	ldrb	r2, [r3, #0]
 801ae1e:	785b      	ldrb	r3, [r3, #1]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d1c9      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ae24:	2a00      	cmp	r2, #0
 801ae26:	d1f4      	bne.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae28:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801ae2a:	e7f2      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae2c:	684b      	ldr	r3, [r1, #4]
 801ae2e:	781a      	ldrb	r2, [r3, #0]
 801ae30:	785b      	ldrb	r3, [r3, #1]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d1c0      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ae36:	2a00      	cmp	r2, #0
 801ae38:	d1eb      	bne.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae3a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801ae3c:	e7e9      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae3e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801ae40:	e7e7      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae42:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801ae44:	e7e5      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae46:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801ae48:	e7e3      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae4a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801ae4c:	e7e1      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae4e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801ae50:	e7df      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae52:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ae54:	e7dd      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae56:	2a0b      	cmp	r2, #11
 801ae58:	d059      	beq.n	801af0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801ae5a:	d80e      	bhi.n	801ae7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801ae5c:	2a03      	cmp	r2, #3
 801ae5e:	d050      	beq.n	801af02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801ae60:	d804      	bhi.n	801ae6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801ae62:	2a01      	cmp	r2, #1
 801ae64:	d04f      	beq.n	801af06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801ae66:	d950      	bls.n	801af0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801ae68:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801ae6a:	e7d2      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae6c:	2a09      	cmp	r2, #9
 801ae6e:	d04e      	beq.n	801af0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801ae70:	d801      	bhi.n	801ae76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801ae72:	2a08      	cmp	r2, #8
 801ae74:	d1a0      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ae76:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801ae78:	e7cb      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ae7a:	2a2f      	cmp	r2, #47	@ 0x2f
 801ae7c:	d02d      	beq.n	801aeda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801ae7e:	d811      	bhi.n	801aea4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801ae80:	2a2d      	cmp	r2, #45	@ 0x2d
 801ae82:	d018      	beq.n	801aeb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801ae84:	d833      	bhi.n	801aeee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801ae86:	2a2c      	cmp	r2, #44	@ 0x2c
 801ae88:	d196      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ae8a:	684a      	ldr	r2, [r1, #4]
 801ae8c:	7813      	ldrb	r3, [r2, #0]
 801ae8e:	7852      	ldrb	r2, [r2, #1]
 801ae90:	2a00      	cmp	r2, #0
 801ae92:	d191      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ae94:	2b01      	cmp	r3, #1
 801ae96:	d01e      	beq.n	801aed6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d030      	beq.n	801aefe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801ae9c:	2b02      	cmp	r3, #2
 801ae9e:	d18b      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aea0:	6903      	ldr	r3, [r0, #16]
 801aea2:	e7b6      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aea4:	2a31      	cmp	r2, #49	@ 0x31
 801aea6:	d004      	beq.n	801aeb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 801aea8:	d333      	bcc.n	801af12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801aeaa:	2a32      	cmp	r2, #50	@ 0x32
 801aeac:	d031      	beq.n	801af12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801aeae:	2a33      	cmp	r2, #51	@ 0x33
 801aeb0:	d182      	bne.n	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aeb2:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801aeb4:	e7ad      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aeb6:	684a      	ldr	r2, [r1, #4]
 801aeb8:	7813      	ldrb	r3, [r2, #0]
 801aeba:	7852      	ldrb	r2, [r2, #1]
 801aebc:	2a00      	cmp	r2, #0
 801aebe:	f47f af7b 	bne.w	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aec2:	2b01      	cmp	r3, #1
 801aec4:	d005      	beq.n	801aed2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801aec6:	d310      	bcc.n	801aeea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 801aec8:	2b02      	cmp	r3, #2
 801aeca:	f47f af75 	bne.w	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aece:	6983      	ldr	r3, [r0, #24]
 801aed0:	e79f      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aed2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801aed4:	e79d      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aed6:	6a03      	ldr	r3, [r0, #32]
 801aed8:	e79b      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aeda:	684b      	ldr	r3, [r1, #4]
 801aedc:	781a      	ldrb	r2, [r3, #0]
 801aede:	785b      	ldrb	r3, [r3, #1]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	f47f af69 	bne.w	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aee6:	2a00      	cmp	r2, #0
 801aee8:	d193      	bne.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aeea:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801aeec:	e791      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aeee:	684b      	ldr	r3, [r1, #4]
 801aef0:	781a      	ldrb	r2, [r3, #0]
 801aef2:	785b      	ldrb	r3, [r3, #1]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	f47f af5f 	bne.w	801adb8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aefa:	2a00      	cmp	r2, #0
 801aefc:	d189      	bne.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aefe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801af00:	e787      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801af02:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801af04:	e785      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801af06:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801af08:	e783      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801af0a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801af0c:	e781      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801af0e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801af10:	e77f      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801af12:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801af14:	e77d      	b.n	801ae12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801af16 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801af16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af1a:	b087      	sub	sp, #28
 801af1c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801af1e:	9205      	str	r2, [sp, #20]
 801af20:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801af24:	9101      	str	r1, [sp, #4]
 801af26:	9202      	str	r2, [sp, #8]
 801af28:	6841      	ldr	r1, [r0, #4]
 801af2a:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801af2e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801af32:	fb01 2404 	mla	r4, r1, r4, r2
 801af36:	6802      	ldr	r2, [r0, #0]
 801af38:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801af3c:	f8de 2000 	ldr.w	r2, [lr]
 801af40:	9203      	str	r2, [sp, #12]
 801af42:	f8de 2004 	ldr.w	r2, [lr, #4]
 801af46:	3204      	adds	r2, #4
 801af48:	9204      	str	r2, [sp, #16]
 801af4a:	9a02      	ldr	r2, [sp, #8]
 801af4c:	43d6      	mvns	r6, r2
 801af4e:	b2f6      	uxtb	r6, r6
 801af50:	9a01      	ldr	r2, [sp, #4]
 801af52:	2a00      	cmp	r2, #0
 801af54:	dc03      	bgt.n	801af5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801af56:	9a05      	ldr	r2, [sp, #20]
 801af58:	2a00      	cmp	r2, #0
 801af5a:	f340 8129 	ble.w	801b1b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801af5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801af60:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801af64:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801af68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801af6a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801af6e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801af72:	2b00      	cmp	r3, #0
 801af74:	dd0e      	ble.n	801af94 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801af76:	1408      	asrs	r0, r1, #16
 801af78:	d405      	bmi.n	801af86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801af7a:	4560      	cmp	r0, ip
 801af7c:	da03      	bge.n	801af86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801af7e:	1410      	asrs	r0, r2, #16
 801af80:	d401      	bmi.n	801af86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801af82:	42b8      	cmp	r0, r7
 801af84:	db07      	blt.n	801af96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801af86:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801af88:	3b01      	subs	r3, #1
 801af8a:	3402      	adds	r4, #2
 801af8c:	4401      	add	r1, r0
 801af8e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801af90:	4402      	add	r2, r0
 801af92:	e7ee      	b.n	801af72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801af94:	d071      	beq.n	801b07a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801af96:	1e58      	subs	r0, r3, #1
 801af98:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801af9a:	fb05 1500 	mla	r5, r5, r0, r1
 801af9e:	142d      	asrs	r5, r5, #16
 801afa0:	d45f      	bmi.n	801b062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801afa2:	4565      	cmp	r5, ip
 801afa4:	da5d      	bge.n	801b062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801afa6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801afa8:	fb05 2000 	mla	r0, r5, r0, r2
 801afac:	1400      	asrs	r0, r0, #16
 801afae:	d458      	bmi.n	801b062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801afb0:	42b8      	cmp	r0, r7
 801afb2:	da56      	bge.n	801b062 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801afb4:	4699      	mov	r9, r3
 801afb6:	46a2      	mov	sl, r4
 801afb8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801afbc:	f1b9 0f00 	cmp.w	r9, #0
 801afc0:	dd57      	ble.n	801b072 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801afc2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801afc6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801afca:	9803      	ldr	r0, [sp, #12]
 801afcc:	140d      	asrs	r5, r1, #16
 801afce:	f109 39ff 	add.w	r9, r9, #4294967295
 801afd2:	fb07 000c 	mla	r0, r7, ip, r0
 801afd6:	5d40      	ldrb	r0, [r0, r5]
 801afd8:	9d04      	ldr	r5, [sp, #16]
 801afda:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801afde:	f8ba 5000 	ldrh.w	r5, [sl]
 801afe2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801afe6:	122f      	asrs	r7, r5, #8
 801afe8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801afec:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801aff0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801aff4:	00ed      	lsls	r5, r5, #3
 801aff6:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801affa:	fb17 f706 	smulbb	r7, r7, r6
 801affe:	b2ed      	uxtb	r5, r5
 801b000:	fb18 f806 	smulbb	r8, r8, r6
 801b004:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801b008:	10c7      	asrs	r7, r0, #3
 801b00a:	fb15 f506 	smulbb	r5, r5, r6
 801b00e:	00c0      	lsls	r0, r0, #3
 801b010:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b014:	fa1f fc8c 	uxth.w	ip, ip
 801b018:	b2c0      	uxtb	r0, r0
 801b01a:	fb07 870b 	mla	r7, r7, fp, r8
 801b01e:	fb00 500b 	mla	r0, r0, fp, r5
 801b022:	f10c 0501 	add.w	r5, ip, #1
 801b026:	b2bf      	uxth	r7, r7
 801b028:	b280      	uxth	r0, r0
 801b02a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b02e:	f107 0801 	add.w	r8, r7, #1
 801b032:	1c45      	adds	r5, r0, #1
 801b034:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801b038:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b03c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b040:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b042:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b046:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b04a:	4401      	add	r1, r0
 801b04c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801b050:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b052:	ea45 0c0c 	orr.w	ip, r5, ip
 801b056:	4402      	add	r2, r0
 801b058:	ea4c 0c08 	orr.w	ip, ip, r8
 801b05c:	f82a cb02 	strh.w	ip, [sl], #2
 801b060:	e7ac      	b.n	801afbc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b062:	f04f 0800 	mov.w	r8, #0
 801b066:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801b06a:	eb03 0008 	add.w	r0, r3, r8
 801b06e:	2800      	cmp	r0, #0
 801b070:	dc41      	bgt.n	801b0f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801b072:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b076:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b07a:	9b01      	ldr	r3, [sp, #4]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	f340 8097 	ble.w	801b1b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b082:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b086:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b088:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b08c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b090:	eef0 6a62 	vmov.f32	s13, s5
 801b094:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b098:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b09c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0a0:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801b0a4:	eef0 6a43 	vmov.f32	s13, s6
 801b0a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0ac:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801b0b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0c8:	ee12 2a90 	vmov	r2, s5
 801b0cc:	eef0 2a47 	vmov.f32	s5, s14
 801b0d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0d4:	ee13 2a10 	vmov	r2, s6
 801b0d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b0da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b0dc:	eeb0 3a67 	vmov.f32	s6, s15
 801b0e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0e4:	9314      	str	r3, [sp, #80]	@ 0x50
 801b0e6:	9b01      	ldr	r3, [sp, #4]
 801b0e8:	9a05      	ldr	r2, [sp, #20]
 801b0ea:	3b01      	subs	r3, #1
 801b0ec:	9301      	str	r3, [sp, #4]
 801b0ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b0f0:	bf08      	it	eq
 801b0f2:	4613      	moveq	r3, r2
 801b0f4:	e72c      	b.n	801af50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b0f6:	140f      	asrs	r7, r1, #16
 801b0f8:	d453      	bmi.n	801b1a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b0fa:	f8de 5008 	ldr.w	r5, [lr, #8]
 801b0fe:	42bd      	cmp	r5, r7
 801b100:	dd4f      	ble.n	801b1a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b102:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b106:	d44c      	bmi.n	801b1a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b108:	f8de 000c 	ldr.w	r0, [lr, #12]
 801b10c:	4560      	cmp	r0, ip
 801b10e:	dd48      	ble.n	801b1a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b110:	9803      	ldr	r0, [sp, #12]
 801b112:	b22d      	sxth	r5, r5
 801b114:	fb0c 0505 	mla	r5, ip, r5, r0
 801b118:	5de8      	ldrb	r0, [r5, r7]
 801b11a:	9d04      	ldr	r5, [sp, #16]
 801b11c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801b120:	f06f 0501 	mvn.w	r5, #1
 801b124:	fb05 fb08 	mul.w	fp, r5, r8
 801b128:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801b12c:	f834 500b 	ldrh.w	r5, [r4, fp]
 801b130:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801b134:	122f      	asrs	r7, r5, #8
 801b136:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b13a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b13e:	00ed      	lsls	r5, r5, #3
 801b140:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801b144:	fb17 f706 	smulbb	r7, r7, r6
 801b148:	b2ed      	uxtb	r5, r5
 801b14a:	fb19 f906 	smulbb	r9, r9, r6
 801b14e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b152:	10c7      	asrs	r7, r0, #3
 801b154:	fb15 f506 	smulbb	r5, r5, r6
 801b158:	00c0      	lsls	r0, r0, #3
 801b15a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b15e:	fa1f fc8c 	uxth.w	ip, ip
 801b162:	b2c0      	uxtb	r0, r0
 801b164:	fb07 970a 	mla	r7, r7, sl, r9
 801b168:	fb00 500a 	mla	r0, r0, sl, r5
 801b16c:	f10c 0501 	add.w	r5, ip, #1
 801b170:	b2bf      	uxth	r7, r7
 801b172:	b280      	uxth	r0, r0
 801b174:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b178:	f107 0901 	add.w	r9, r7, #1
 801b17c:	1c45      	adds	r5, r0, #1
 801b17e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b182:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b186:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b18a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b18e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b192:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801b196:	ea45 0c0c 	orr.w	ip, r5, ip
 801b19a:	ea4c 0c09 	orr.w	ip, ip, r9
 801b19e:	f824 c00b 	strh.w	ip, [r4, fp]
 801b1a2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b1a4:	f108 38ff 	add.w	r8, r8, #4294967295
 801b1a8:	4401      	add	r1, r0
 801b1aa:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b1ac:	4402      	add	r2, r0
 801b1ae:	e75c      	b.n	801b06a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b1b0:	b007      	add	sp, #28
 801b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b1b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b1b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1ba:	b085      	sub	sp, #20
 801b1bc:	4693      	mov	fp, r2
 801b1be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b1c2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b1c4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801b1c6:	6870      	ldr	r0, [r6, #4]
 801b1c8:	9100      	str	r1, [sp, #0]
 801b1ca:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b1ce:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801b1d2:	fb00 2404 	mla	r4, r0, r4, r2
 801b1d6:	6832      	ldr	r2, [r6, #0]
 801b1d8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b1dc:	682a      	ldr	r2, [r5, #0]
 801b1de:	9201      	str	r2, [sp, #4]
 801b1e0:	686a      	ldr	r2, [r5, #4]
 801b1e2:	3204      	adds	r2, #4
 801b1e4:	9202      	str	r2, [sp, #8]
 801b1e6:	9a00      	ldr	r2, [sp, #0]
 801b1e8:	2a00      	cmp	r2, #0
 801b1ea:	dc03      	bgt.n	801b1f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b1ec:	f1bb 0f00 	cmp.w	fp, #0
 801b1f0:	f340 80a0 	ble.w	801b334 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801b1f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b1f6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b1fa:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b1fe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b200:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b204:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b208:	2b00      	cmp	r3, #0
 801b20a:	dd0c      	ble.n	801b226 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b20c:	1406      	asrs	r6, r0, #16
 801b20e:	d405      	bmi.n	801b21c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b210:	454e      	cmp	r6, r9
 801b212:	da03      	bge.n	801b21c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b214:	1416      	asrs	r6, r2, #16
 801b216:	d401      	bmi.n	801b21c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b218:	4546      	cmp	r6, r8
 801b21a:	db05      	blt.n	801b228 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b21c:	4470      	add	r0, lr
 801b21e:	4462      	add	r2, ip
 801b220:	3b01      	subs	r3, #1
 801b222:	3402      	adds	r4, #2
 801b224:	e7f0      	b.n	801b208 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b226:	d00f      	beq.n	801b248 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b228:	1e5e      	subs	r6, r3, #1
 801b22a:	fb0e 0706 	mla	r7, lr, r6, r0
 801b22e:	143f      	asrs	r7, r7, #16
 801b230:	d541      	bpl.n	801b2b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801b232:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b236:	4698      	mov	r8, r3
 801b238:	9603      	str	r6, [sp, #12]
 801b23a:	f1b8 0f00 	cmp.w	r8, #0
 801b23e:	dc59      	bgt.n	801b2f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b240:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b244:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b248:	9b00      	ldr	r3, [sp, #0]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	dd72      	ble.n	801b334 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801b24e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b254:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b258:	eeb0 6a62 	vmov.f32	s12, s5
 801b25c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b260:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b264:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b268:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b26c:	eeb0 6a43 	vmov.f32	s12, s6
 801b270:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b274:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b278:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b27c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b280:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b284:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b288:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b28c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b290:	ee12 2a90 	vmov	r2, s5
 801b294:	eef0 2a47 	vmov.f32	s5, s14
 801b298:	fb92 fef3 	sdiv	lr, r2, r3
 801b29c:	ee13 2a10 	vmov	r2, s6
 801b2a0:	eeb0 3a67 	vmov.f32	s6, s15
 801b2a4:	fb92 fcf3 	sdiv	ip, r2, r3
 801b2a8:	9b00      	ldr	r3, [sp, #0]
 801b2aa:	3b01      	subs	r3, #1
 801b2ac:	9300      	str	r3, [sp, #0]
 801b2ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2b0:	bf08      	it	eq
 801b2b2:	465b      	moveq	r3, fp
 801b2b4:	e797      	b.n	801b1e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b2b6:	454f      	cmp	r7, r9
 801b2b8:	dabb      	bge.n	801b232 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b2ba:	fb0c 2606 	mla	r6, ip, r6, r2
 801b2be:	1436      	asrs	r6, r6, #16
 801b2c0:	d4b7      	bmi.n	801b232 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b2c2:	4546      	cmp	r6, r8
 801b2c4:	dab5      	bge.n	801b232 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b2c6:	461e      	mov	r6, r3
 801b2c8:	46a0      	mov	r8, r4
 801b2ca:	2e00      	cmp	r6, #0
 801b2cc:	ddb8      	ble.n	801b240 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b2ce:	1417      	asrs	r7, r2, #16
 801b2d0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b2d4:	9901      	ldr	r1, [sp, #4]
 801b2d6:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b2da:	4462      	add	r2, ip
 801b2dc:	4470      	add	r0, lr
 801b2de:	fb0a 1707 	mla	r7, sl, r7, r1
 801b2e2:	9902      	ldr	r1, [sp, #8]
 801b2e4:	3e01      	subs	r6, #1
 801b2e6:	f817 7009 	ldrb.w	r7, [r7, r9]
 801b2ea:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b2ee:	f828 7b02 	strh.w	r7, [r8], #2
 801b2f2:	e7ea      	b.n	801b2ca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801b2f4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b2f8:	d417      	bmi.n	801b32a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b2fa:	68ae      	ldr	r6, [r5, #8]
 801b2fc:	454e      	cmp	r6, r9
 801b2fe:	dd14      	ble.n	801b32a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b300:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b304:	d411      	bmi.n	801b32a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b306:	68ef      	ldr	r7, [r5, #12]
 801b308:	4557      	cmp	r7, sl
 801b30a:	dd0e      	ble.n	801b32a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b30c:	9f01      	ldr	r7, [sp, #4]
 801b30e:	b236      	sxth	r6, r6
 801b310:	f06f 0101 	mvn.w	r1, #1
 801b314:	fb0a 7606 	mla	r6, sl, r6, r7
 801b318:	9f02      	ldr	r7, [sp, #8]
 801b31a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801b31e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b322:	fb01 f608 	mul.w	r6, r1, r8
 801b326:	9903      	ldr	r1, [sp, #12]
 801b328:	538f      	strh	r7, [r1, r6]
 801b32a:	4470      	add	r0, lr
 801b32c:	4462      	add	r2, ip
 801b32e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b332:	e782      	b.n	801b23a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b334:	b005      	add	sp, #20
 801b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b33a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b33a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b33e:	b087      	sub	sp, #28
 801b340:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b342:	9205      	str	r2, [sp, #20]
 801b344:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b348:	9102      	str	r1, [sp, #8]
 801b34a:	9203      	str	r2, [sp, #12]
 801b34c:	6861      	ldr	r1, [r4, #4]
 801b34e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801b352:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801b356:	fb01 2000 	mla	r0, r1, r0, r2
 801b35a:	6822      	ldr	r2, [r4, #0]
 801b35c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b360:	9200      	str	r2, [sp, #0]
 801b362:	f8dc 2000 	ldr.w	r2, [ip]
 801b366:	9204      	str	r2, [sp, #16]
 801b368:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b36c:	3204      	adds	r2, #4
 801b36e:	9201      	str	r2, [sp, #4]
 801b370:	9a03      	ldr	r2, [sp, #12]
 801b372:	43d5      	mvns	r5, r2
 801b374:	b2ed      	uxtb	r5, r5
 801b376:	9a02      	ldr	r2, [sp, #8]
 801b378:	2a00      	cmp	r2, #0
 801b37a:	dc03      	bgt.n	801b384 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b37c:	9a05      	ldr	r2, [sp, #20]
 801b37e:	2a00      	cmp	r2, #0
 801b380:	f340 812c 	ble.w	801b5dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b384:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b386:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b38a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b38e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b390:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b394:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b398:	2b00      	cmp	r3, #0
 801b39a:	dd10      	ble.n	801b3be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b39c:	140c      	asrs	r4, r1, #16
 801b39e:	d405      	bmi.n	801b3ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b3a0:	4574      	cmp	r4, lr
 801b3a2:	da03      	bge.n	801b3ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b3a4:	1414      	asrs	r4, r2, #16
 801b3a6:	d401      	bmi.n	801b3ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b3a8:	42bc      	cmp	r4, r7
 801b3aa:	db09      	blt.n	801b3c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b3ac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b3ae:	3b01      	subs	r3, #1
 801b3b0:	9800      	ldr	r0, [sp, #0]
 801b3b2:	4421      	add	r1, r4
 801b3b4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b3b6:	3002      	adds	r0, #2
 801b3b8:	4422      	add	r2, r4
 801b3ba:	9000      	str	r0, [sp, #0]
 801b3bc:	e7ec      	b.n	801b398 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b3be:	d071      	beq.n	801b4a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801b3c0:	1e5c      	subs	r4, r3, #1
 801b3c2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b3c4:	fb06 1604 	mla	r6, r6, r4, r1
 801b3c8:	1436      	asrs	r6, r6, #16
 801b3ca:	d45d      	bmi.n	801b488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b3cc:	4576      	cmp	r6, lr
 801b3ce:	da5b      	bge.n	801b488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b3d0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b3d2:	fb06 2404 	mla	r4, r6, r4, r2
 801b3d6:	1424      	asrs	r4, r4, #16
 801b3d8:	d456      	bmi.n	801b488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b3da:	42bc      	cmp	r4, r7
 801b3dc:	da54      	bge.n	801b488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b3de:	4698      	mov	r8, r3
 801b3e0:	f8dd 9000 	ldr.w	r9, [sp]
 801b3e4:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801b3e8:	f1b8 0f00 	cmp.w	r8, #0
 801b3ec:	dd54      	ble.n	801b498 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b3ee:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801b3f2:	1414      	asrs	r4, r2, #16
 801b3f4:	9804      	ldr	r0, [sp, #16]
 801b3f6:	140e      	asrs	r6, r1, #16
 801b3f8:	f108 38ff 	add.w	r8, r8, #4294967295
 801b3fc:	fb07 0404 	mla	r4, r7, r4, r0
 801b400:	9801      	ldr	r0, [sp, #4]
 801b402:	f814 e006 	ldrb.w	lr, [r4, r6]
 801b406:	f8b9 4000 	ldrh.w	r4, [r9]
 801b40a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b40e:	1227      	asrs	r7, r4, #8
 801b410:	eb00 0b0e 	add.w	fp, r0, lr
 801b414:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801b418:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b41c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b41e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801b422:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b426:	4401      	add	r1, r0
 801b428:	fb16 f60a 	smulbb	r6, r6, sl
 801b42c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b42e:	fb1b fb0a 	smulbb	fp, fp, sl
 801b432:	fb07 6705 	mla	r7, r7, r5, r6
 801b436:	10e6      	asrs	r6, r4, #3
 801b438:	00e4      	lsls	r4, r4, #3
 801b43a:	4402      	add	r2, r0
 801b43c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b440:	b2bf      	uxth	r7, r7
 801b442:	b2e4      	uxtb	r4, r4
 801b444:	fb06 b605 	mla	r6, r6, r5, fp
 801b448:	fb14 f405 	smulbb	r4, r4, r5
 801b44c:	b2b6      	uxth	r6, r6
 801b44e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801b452:	1c7c      	adds	r4, r7, #1
 801b454:	f106 0b01 	add.w	fp, r6, #1
 801b458:	fa1f fe8e 	uxth.w	lr, lr
 801b45c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801b460:	f10e 0401 	add.w	r4, lr, #1
 801b464:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b468:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801b46c:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801b470:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b474:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801b478:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801b47c:	4327      	orrs	r7, r4
 801b47e:	ea47 070b 	orr.w	r7, r7, fp
 801b482:	f829 7b02 	strh.w	r7, [r9], #2
 801b486:	e7af      	b.n	801b3e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801b488:	f04f 0e00 	mov.w	lr, #0
 801b48c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801b490:	eb03 040e 	add.w	r4, r3, lr
 801b494:	2c00      	cmp	r4, #0
 801b496:	dc43      	bgt.n	801b520 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b498:	9a00      	ldr	r2, [sp, #0]
 801b49a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b49e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b4a2:	9300      	str	r3, [sp, #0]
 801b4a4:	9b02      	ldr	r3, [sp, #8]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	f340 8098 	ble.w	801b5dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b4ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b4b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b4b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b4b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b4ba:	eef0 6a62 	vmov.f32	s13, s5
 801b4be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b4c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b4c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4ca:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801b4ce:	eef0 6a43 	vmov.f32	s13, s6
 801b4d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4d6:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801b4da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b4de:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b4e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b4e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b4ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b4ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b4f2:	ee12 2a90 	vmov	r2, s5
 801b4f6:	eef0 2a47 	vmov.f32	s5, s14
 801b4fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801b4fe:	ee13 2a10 	vmov	r2, s6
 801b502:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b504:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b506:	eeb0 3a67 	vmov.f32	s6, s15
 801b50a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b50e:	9314      	str	r3, [sp, #80]	@ 0x50
 801b510:	9b02      	ldr	r3, [sp, #8]
 801b512:	9a05      	ldr	r2, [sp, #20]
 801b514:	3b01      	subs	r3, #1
 801b516:	9302      	str	r3, [sp, #8]
 801b518:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b51a:	bf08      	it	eq
 801b51c:	4613      	moveq	r3, r2
 801b51e:	e72a      	b.n	801b376 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b520:	140f      	asrs	r7, r1, #16
 801b522:	d454      	bmi.n	801b5ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b524:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b528:	42be      	cmp	r6, r7
 801b52a:	dd50      	ble.n	801b5ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b52c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801b530:	d44d      	bmi.n	801b5ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b532:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801b536:	4544      	cmp	r4, r8
 801b538:	dd49      	ble.n	801b5ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b53a:	9c04      	ldr	r4, [sp, #16]
 801b53c:	b236      	sxth	r6, r6
 801b53e:	f06f 0001 	mvn.w	r0, #1
 801b542:	fb08 4606 	mla	r6, r8, r6, r4
 801b546:	9c01      	ldr	r4, [sp, #4]
 801b548:	fb00 fa0e 	mul.w	sl, r0, lr
 801b54c:	9800      	ldr	r0, [sp, #0]
 801b54e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801b552:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b556:	eb04 0b08 	add.w	fp, r4, r8
 801b55a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801b55e:	9801      	ldr	r0, [sp, #4]
 801b560:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801b564:	1227      	asrs	r7, r4, #8
 801b566:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b56a:	fb16 f609 	smulbb	r6, r6, r9
 801b56e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b572:	f810 8008 	ldrb.w	r8, [r0, r8]
 801b576:	fb1b fb09 	smulbb	fp, fp, r9
 801b57a:	fb07 6705 	mla	r7, r7, r5, r6
 801b57e:	10e6      	asrs	r6, r4, #3
 801b580:	00e4      	lsls	r4, r4, #3
 801b582:	9800      	ldr	r0, [sp, #0]
 801b584:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b588:	b2bf      	uxth	r7, r7
 801b58a:	b2e4      	uxtb	r4, r4
 801b58c:	fb06 b605 	mla	r6, r6, r5, fp
 801b590:	fb14 f405 	smulbb	r4, r4, r5
 801b594:	b2b6      	uxth	r6, r6
 801b596:	fb08 4809 	mla	r8, r8, r9, r4
 801b59a:	1c7c      	adds	r4, r7, #1
 801b59c:	f106 0b01 	add.w	fp, r6, #1
 801b5a0:	fa1f f888 	uxth.w	r8, r8
 801b5a4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801b5a8:	f108 0401 	add.w	r4, r8, #1
 801b5ac:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b5b0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801b5b4:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801b5b8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b5bc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801b5c0:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801b5c4:	4327      	orrs	r7, r4
 801b5c6:	ea47 070b 	orr.w	r7, r7, fp
 801b5ca:	f820 700a 	strh.w	r7, [r0, sl]
 801b5ce:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b5d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b5d4:	4401      	add	r1, r0
 801b5d6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b5d8:	4402      	add	r2, r0
 801b5da:	e759      	b.n	801b490 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b5dc:	b007      	add	sp, #28
 801b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b5e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5e8:	b085      	sub	sp, #20
 801b5ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b5ee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b5f0:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801b5f2:	9203      	str	r2, [sp, #12]
 801b5f4:	6870      	ldr	r0, [r6, #4]
 801b5f6:	686f      	ldr	r7, [r5, #4]
 801b5f8:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801b5fc:	3704      	adds	r7, #4
 801b5fe:	9101      	str	r1, [sp, #4]
 801b600:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b604:	fb00 2404 	mla	r4, r0, r4, r2
 801b608:	6832      	ldr	r2, [r6, #0]
 801b60a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b60e:	682a      	ldr	r2, [r5, #0]
 801b610:	9202      	str	r2, [sp, #8]
 801b612:	9a01      	ldr	r2, [sp, #4]
 801b614:	2a00      	cmp	r2, #0
 801b616:	dc03      	bgt.n	801b620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b618:	9a03      	ldr	r2, [sp, #12]
 801b61a:	2a00      	cmp	r2, #0
 801b61c:	f340 80cc 	ble.w	801b7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801b620:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b622:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b626:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b62a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b62c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b630:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b634:	2b00      	cmp	r3, #0
 801b636:	dd0d      	ble.n	801b654 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b638:	1406      	asrs	r6, r0, #16
 801b63a:	d405      	bmi.n	801b648 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b63c:	454e      	cmp	r6, r9
 801b63e:	da03      	bge.n	801b648 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b640:	1416      	asrs	r6, r2, #16
 801b642:	d401      	bmi.n	801b648 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b644:	4546      	cmp	r6, r8
 801b646:	db06      	blt.n	801b656 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b648:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b64a:	4460      	add	r0, ip
 801b64c:	3b01      	subs	r3, #1
 801b64e:	3402      	adds	r4, #2
 801b650:	4432      	add	r2, r6
 801b652:	e7ef      	b.n	801b634 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b654:	d00f      	beq.n	801b676 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b656:	1e5e      	subs	r6, r3, #1
 801b658:	fb0c 0e06 	mla	lr, ip, r6, r0
 801b65c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801b660:	d543      	bpl.n	801b6ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801b662:	4698      	mov	r8, r3
 801b664:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801b668:	f1b8 0f00 	cmp.w	r8, #0
 801b66c:	dc71      	bgt.n	801b752 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801b66e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b672:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b676:	9b01      	ldr	r3, [sp, #4]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	f340 809d 	ble.w	801b7b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801b67e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b684:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b688:	eeb0 6a62 	vmov.f32	s12, s5
 801b68c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b690:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b694:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b698:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b69c:	eeb0 6a43 	vmov.f32	s12, s6
 801b6a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b6a4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b6a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b6ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b6b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b6b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b6b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b6bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b6c0:	ee12 2a90 	vmov	r2, s5
 801b6c4:	eef0 2a47 	vmov.f32	s5, s14
 801b6c8:	fb92 fcf3 	sdiv	ip, r2, r3
 801b6cc:	ee13 2a10 	vmov	r2, s6
 801b6d0:	eeb0 3a67 	vmov.f32	s6, s15
 801b6d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b6d8:	9312      	str	r3, [sp, #72]	@ 0x48
 801b6da:	9b01      	ldr	r3, [sp, #4]
 801b6dc:	9a03      	ldr	r2, [sp, #12]
 801b6de:	3b01      	subs	r3, #1
 801b6e0:	9301      	str	r3, [sp, #4]
 801b6e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b6e4:	bf08      	it	eq
 801b6e6:	4613      	moveq	r3, r2
 801b6e8:	e793      	b.n	801b612 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b6ea:	45ce      	cmp	lr, r9
 801b6ec:	dab9      	bge.n	801b662 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b6ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b6f0:	fb01 2606 	mla	r6, r1, r6, r2
 801b6f4:	1436      	asrs	r6, r6, #16
 801b6f6:	d4b4      	bmi.n	801b662 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b6f8:	4546      	cmp	r6, r8
 801b6fa:	dab2      	bge.n	801b662 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b6fc:	4698      	mov	r8, r3
 801b6fe:	46a2      	mov	sl, r4
 801b700:	f1b8 0f00 	cmp.w	r8, #0
 801b704:	ddb3      	ble.n	801b66e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b706:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b70a:	1416      	asrs	r6, r2, #16
 801b70c:	9902      	ldr	r1, [sp, #8]
 801b70e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801b712:	f108 38ff 	add.w	r8, r8, #4294967295
 801b716:	4460      	add	r0, ip
 801b718:	fb09 1606 	mla	r6, r9, r6, r1
 801b71c:	4928      	ldr	r1, [pc, #160]	@ (801b7c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801b71e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801b722:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b726:	eb07 0b0e 	add.w	fp, r7, lr
 801b72a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801b72e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b732:	00f6      	lsls	r6, r6, #3
 801b734:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801b738:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b73a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801b73e:	440a      	add	r2, r1
 801b740:	ea49 0606 	orr.w	r6, r9, r6
 801b744:	f817 900e 	ldrb.w	r9, [r7, lr]
 801b748:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801b74c:	f82a 6b02 	strh.w	r6, [sl], #2
 801b750:	e7d6      	b.n	801b700 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b752:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b756:	d429      	bmi.n	801b7ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b758:	68ae      	ldr	r6, [r5, #8]
 801b75a:	454e      	cmp	r6, r9
 801b75c:	dd26      	ble.n	801b7ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b75e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801b762:	d423      	bmi.n	801b7ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b764:	68e9      	ldr	r1, [r5, #12]
 801b766:	4559      	cmp	r1, fp
 801b768:	dd20      	ble.n	801b7ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b76a:	fa0f fe86 	sxth.w	lr, r6
 801b76e:	9902      	ldr	r1, [sp, #8]
 801b770:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801b774:	f06f 0101 	mvn.w	r1, #1
 801b778:	f81e e009 	ldrb.w	lr, [lr, r9]
 801b77c:	fb01 f908 	mul.w	r9, r1, r8
 801b780:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801b784:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b788:	eb07 060e 	add.w	r6, r7, lr
 801b78c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801b790:	7876      	ldrb	r6, [r6, #1]
 801b792:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801b796:	00f6      	lsls	r6, r6, #3
 801b798:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801b79c:	ea4b 0606 	orr.w	r6, fp, r6
 801b7a0:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801b7a4:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801b7a8:	f82a 6009 	strh.w	r6, [sl, r9]
 801b7ac:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b7ae:	4460      	add	r0, ip
 801b7b0:	f108 38ff 	add.w	r8, r8, #4294967295
 801b7b4:	440a      	add	r2, r1
 801b7b6:	e757      	b.n	801b668 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b7b8:	b005      	add	sp, #20
 801b7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7be:	bf00      	nop
 801b7c0:	fffff800 	.word	0xfffff800

0801b7c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7c8:	b087      	sub	sp, #28
 801b7ca:	468b      	mov	fp, r1
 801b7cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b7d0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801b7d2:	9204      	str	r2, [sp, #16]
 801b7d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b7d8:	6841      	ldr	r1, [r0, #4]
 801b7da:	9205      	str	r2, [sp, #20]
 801b7dc:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801b7e0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801b7e4:	fb01 2404 	mla	r4, r1, r4, r2
 801b7e8:	6802      	ldr	r2, [r0, #0]
 801b7ea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b7ee:	f8dc 2000 	ldr.w	r2, [ip]
 801b7f2:	9201      	str	r2, [sp, #4]
 801b7f4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b7f8:	3204      	adds	r2, #4
 801b7fa:	9202      	str	r2, [sp, #8]
 801b7fc:	f1bb 0f00 	cmp.w	fp, #0
 801b800:	dc03      	bgt.n	801b80a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801b802:	9a04      	ldr	r2, [sp, #16]
 801b804:	2a00      	cmp	r2, #0
 801b806:	f340 8138 	ble.w	801ba7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b80a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b80c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801b810:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b814:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b816:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801b81a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b81e:	2b00      	cmp	r3, #0
 801b820:	dd0e      	ble.n	801b840 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b822:	1402      	asrs	r2, r0, #16
 801b824:	d405      	bmi.n	801b832 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b826:	42ba      	cmp	r2, r7
 801b828:	da03      	bge.n	801b832 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b82a:	140a      	asrs	r2, r1, #16
 801b82c:	d401      	bmi.n	801b832 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b82e:	42b2      	cmp	r2, r6
 801b830:	db07      	blt.n	801b842 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b832:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b834:	3b01      	subs	r3, #1
 801b836:	3402      	adds	r4, #2
 801b838:	4410      	add	r0, r2
 801b83a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b83c:	4411      	add	r1, r2
 801b83e:	e7ee      	b.n	801b81e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b840:	d019      	beq.n	801b876 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b842:	1e5a      	subs	r2, r3, #1
 801b844:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b846:	fb05 0502 	mla	r5, r5, r2, r0
 801b84a:	142d      	asrs	r5, r5, #16
 801b84c:	d409      	bmi.n	801b862 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b84e:	42bd      	cmp	r5, r7
 801b850:	da07      	bge.n	801b862 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b852:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801b854:	fb05 1202 	mla	r2, r5, r2, r1
 801b858:	1412      	asrs	r2, r2, #16
 801b85a:	d402      	bmi.n	801b862 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b85c:	42b2      	cmp	r2, r6
 801b85e:	f2c0 80ac 	blt.w	801b9ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801b862:	f04f 0e00 	mov.w	lr, #0
 801b866:	eb03 020e 	add.w	r2, r3, lr
 801b86a:	2a00      	cmp	r2, #0
 801b86c:	dc3e      	bgt.n	801b8ec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b86e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b872:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b876:	f1bb 0f00 	cmp.w	fp, #0
 801b87a:	f340 80fe 	ble.w	801ba7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b87e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b882:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b884:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b888:	f1bb 0b01 	subs.w	fp, fp, #1
 801b88c:	eeb0 6a62 	vmov.f32	s12, s5
 801b890:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b894:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b898:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b89c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801b8a0:	eeb0 6a43 	vmov.f32	s12, s6
 801b8a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8a8:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801b8ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b8bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b8c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b8c4:	ee12 2a90 	vmov	r2, s5
 801b8c8:	eef0 2a47 	vmov.f32	s5, s14
 801b8cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8d0:	ee13 2a10 	vmov	r2, s6
 801b8d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b8d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b8d8:	eeb0 3a67 	vmov.f32	s6, s15
 801b8dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8e0:	9a04      	ldr	r2, [sp, #16]
 801b8e2:	9314      	str	r3, [sp, #80]	@ 0x50
 801b8e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b8e6:	bf08      	it	eq
 801b8e8:	4613      	moveq	r3, r2
 801b8ea:	e787      	b.n	801b7fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b8ec:	1406      	asrs	r6, r0, #16
 801b8ee:	d45d      	bmi.n	801b9ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b8f0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801b8f4:	42b5      	cmp	r5, r6
 801b8f6:	dd59      	ble.n	801b9ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b8f8:	140f      	asrs	r7, r1, #16
 801b8fa:	d457      	bmi.n	801b9ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b8fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b900:	42ba      	cmp	r2, r7
 801b902:	dd53      	ble.n	801b9ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b904:	9a01      	ldr	r2, [sp, #4]
 801b906:	b22d      	sxth	r5, r5
 801b908:	fb07 2505 	mla	r5, r7, r5, r2
 801b90c:	5daa      	ldrb	r2, [r5, r6]
 801b90e:	9d02      	ldr	r5, [sp, #8]
 801b910:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b914:	0e2e      	lsrs	r6, r5, #24
 801b916:	d049      	beq.n	801b9ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b918:	f06f 0201 	mvn.w	r2, #1
 801b91c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b920:	fb02 f20e 	mul.w	r2, r2, lr
 801b924:	f834 8002 	ldrh.w	r8, [r4, r2]
 801b928:	9203      	str	r2, [sp, #12]
 801b92a:	9a05      	ldr	r2, [sp, #20]
 801b92c:	ea4f 2728 	mov.w	r7, r8, asr #8
 801b930:	4356      	muls	r6, r2
 801b932:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b936:	1c72      	adds	r2, r6, #1
 801b938:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b93c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b940:	b2ed      	uxtb	r5, r5
 801b942:	1212      	asrs	r2, r2, #8
 801b944:	fa1f f982 	uxth.w	r9, r2
 801b948:	43d2      	mvns	r2, r2
 801b94a:	fb16 f609 	smulbb	r6, r6, r9
 801b94e:	b2d2      	uxtb	r2, r2
 801b950:	fb15 f509 	smulbb	r5, r5, r9
 801b954:	fb07 6702 	mla	r7, r7, r2, r6
 801b958:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801b95c:	fb1a fa09 	smulbb	sl, sl, r9
 801b960:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b964:	b2bf      	uxth	r7, r7
 801b966:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b96a:	fa5f f888 	uxtb.w	r8, r8
 801b96e:	fb06 a602 	mla	r6, r6, r2, sl
 801b972:	fb08 5502 	mla	r5, r8, r2, r5
 801b976:	1c7a      	adds	r2, r7, #1
 801b978:	b2b6      	uxth	r6, r6
 801b97a:	b2ad      	uxth	r5, r5
 801b97c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b980:	9a03      	ldr	r2, [sp, #12]
 801b982:	f105 0a01 	add.w	sl, r5, #1
 801b986:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801b98a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b98e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b992:	ea4a 0707 	orr.w	r7, sl, r7
 801b996:	f106 0a01 	add.w	sl, r6, #1
 801b99a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b99e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b9a2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b9a6:	ea47 070a 	orr.w	r7, r7, sl
 801b9aa:	52a7      	strh	r7, [r4, r2]
 801b9ac:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b9ae:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b9b2:	4410      	add	r0, r2
 801b9b4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b9b6:	4411      	add	r1, r2
 801b9b8:	e755      	b.n	801b866 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b9ba:	f04f 0800 	mov.w	r8, #0
 801b9be:	eba3 0208 	sub.w	r2, r3, r8
 801b9c2:	2a00      	cmp	r2, #0
 801b9c4:	f77f af53 	ble.w	801b86e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801b9c8:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801b9cc:	140a      	asrs	r2, r1, #16
 801b9ce:	9f01      	ldr	r7, [sp, #4]
 801b9d0:	1405      	asrs	r5, r0, #16
 801b9d2:	fb06 7202 	mla	r2, r6, r2, r7
 801b9d6:	5d52      	ldrb	r2, [r2, r5]
 801b9d8:	9d02      	ldr	r5, [sp, #8]
 801b9da:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b9de:	0e2e      	lsrs	r6, r5, #24
 801b9e0:	d044      	beq.n	801ba6c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b9e2:	9a05      	ldr	r2, [sp, #20]
 801b9e4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b9e8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801b9ec:	4356      	muls	r6, r2
 801b9ee:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b9f2:	1c72      	adds	r2, r6, #1
 801b9f4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b9f8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b9fc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ba00:	b2ed      	uxtb	r5, r5
 801ba02:	1212      	asrs	r2, r2, #8
 801ba04:	fa1f f982 	uxth.w	r9, r2
 801ba08:	43d2      	mvns	r2, r2
 801ba0a:	fb16 f609 	smulbb	r6, r6, r9
 801ba0e:	b2d2      	uxtb	r2, r2
 801ba10:	fb15 f509 	smulbb	r5, r5, r9
 801ba14:	fb07 6702 	mla	r7, r7, r2, r6
 801ba18:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ba1c:	fb1a fa09 	smulbb	sl, sl, r9
 801ba20:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ba24:	b2bf      	uxth	r7, r7
 801ba26:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ba2a:	fa5f fe8e 	uxtb.w	lr, lr
 801ba2e:	fb06 a602 	mla	r6, r6, r2, sl
 801ba32:	fb0e 5502 	mla	r5, lr, r2, r5
 801ba36:	1c7a      	adds	r2, r7, #1
 801ba38:	b2b6      	uxth	r6, r6
 801ba3a:	b2ad      	uxth	r5, r5
 801ba3c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ba40:	f105 0a01 	add.w	sl, r5, #1
 801ba44:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ba48:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ba4c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ba50:	ea4a 0707 	orr.w	r7, sl, r7
 801ba54:	f106 0a01 	add.w	sl, r6, #1
 801ba58:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ba5c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ba60:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ba64:	ea47 070a 	orr.w	r7, r7, sl
 801ba68:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ba6c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ba6e:	f108 0801 	add.w	r8, r8, #1
 801ba72:	4410      	add	r0, r2
 801ba74:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ba76:	4411      	add	r1, r2
 801ba78:	e7a1      	b.n	801b9be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ba7a:	b007      	add	sp, #28
 801ba7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba84:	b085      	sub	sp, #20
 801ba86:	468b      	mov	fp, r1
 801ba88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ba8c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ba8e:	9203      	str	r2, [sp, #12]
 801ba90:	6841      	ldr	r1, [r0, #4]
 801ba92:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801ba96:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ba9a:	fb01 2404 	mla	r4, r1, r4, r2
 801ba9e:	6802      	ldr	r2, [r0, #0]
 801baa0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801baa4:	f8de 2000 	ldr.w	r2, [lr]
 801baa8:	9200      	str	r2, [sp, #0]
 801baaa:	f8de 2004 	ldr.w	r2, [lr, #4]
 801baae:	3204      	adds	r2, #4
 801bab0:	9201      	str	r2, [sp, #4]
 801bab2:	f1bb 0f00 	cmp.w	fp, #0
 801bab6:	dc03      	bgt.n	801bac0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801bab8:	9a03      	ldr	r2, [sp, #12]
 801baba:	2a00      	cmp	r2, #0
 801babc:	f340 8153 	ble.w	801bd66 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801bac0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bac2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801bac6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801baca:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bacc:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801bad0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	dd0e      	ble.n	801baf6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bad8:	1408      	asrs	r0, r1, #16
 801bada:	d405      	bmi.n	801bae8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801badc:	42b8      	cmp	r0, r7
 801bade:	da03      	bge.n	801bae8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bae0:	1410      	asrs	r0, r2, #16
 801bae2:	d401      	bmi.n	801bae8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bae4:	42b0      	cmp	r0, r6
 801bae6:	db07      	blt.n	801baf8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bae8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801baea:	3b01      	subs	r3, #1
 801baec:	3402      	adds	r4, #2
 801baee:	4401      	add	r1, r0
 801baf0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801baf2:	4402      	add	r2, r0
 801baf4:	e7ee      	b.n	801bad4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801baf6:	d017      	beq.n	801bb28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801baf8:	1e58      	subs	r0, r3, #1
 801bafa:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801bafc:	fb05 1500 	mla	r5, r5, r0, r1
 801bb00:	142d      	asrs	r5, r5, #16
 801bb02:	d409      	bmi.n	801bb18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bb04:	42bd      	cmp	r5, r7
 801bb06:	da07      	bge.n	801bb18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bb08:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801bb0a:	fb05 2000 	mla	r0, r5, r0, r2
 801bb0e:	1400      	asrs	r0, r0, #16
 801bb10:	d402      	bmi.n	801bb18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bb12:	42b0      	cmp	r0, r6
 801bb14:	f2c0 80bc 	blt.w	801bc90 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801bb18:	2600      	movs	r6, #0
 801bb1a:	1998      	adds	r0, r3, r6
 801bb1c:	2800      	cmp	r0, #0
 801bb1e:	dc3e      	bgt.n	801bb9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801bb20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb24:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801bb28:	f1bb 0f00 	cmp.w	fp, #0
 801bb2c:	f340 811b 	ble.w	801bd66 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801bb30:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb36:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb3a:	f1bb 0b01 	subs.w	fp, fp, #1
 801bb3e:	eeb0 6a62 	vmov.f32	s12, s5
 801bb42:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bb46:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb4a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb4e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801bb52:	eeb0 6a43 	vmov.f32	s12, s6
 801bb56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb5a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801bb5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb66:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bb76:	ee12 2a90 	vmov	r2, s5
 801bb7a:	eef0 2a47 	vmov.f32	s5, s14
 801bb7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb82:	ee13 2a10 	vmov	r2, s6
 801bb86:	9311      	str	r3, [sp, #68]	@ 0x44
 801bb88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb8a:	eeb0 3a67 	vmov.f32	s6, s15
 801bb8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb92:	9a03      	ldr	r2, [sp, #12]
 801bb94:	9312      	str	r3, [sp, #72]	@ 0x48
 801bb96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb98:	bf08      	it	eq
 801bb9a:	4613      	moveq	r3, r2
 801bb9c:	e789      	b.n	801bab2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801bb9e:	140f      	asrs	r7, r1, #16
 801bba0:	d426      	bmi.n	801bbf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bba2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801bba6:	42bd      	cmp	r5, r7
 801bba8:	dd22      	ble.n	801bbf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bbaa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bbae:	d41f      	bmi.n	801bbf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bbb0:	f8de 000c 	ldr.w	r0, [lr, #12]
 801bbb4:	4560      	cmp	r0, ip
 801bbb6:	dd1b      	ble.n	801bbf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bbb8:	9800      	ldr	r0, [sp, #0]
 801bbba:	b22d      	sxth	r5, r5
 801bbbc:	fb0c 0505 	mla	r5, ip, r5, r0
 801bbc0:	5de8      	ldrb	r0, [r5, r7]
 801bbc2:	9d01      	ldr	r5, [sp, #4]
 801bbc4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801bbc8:	0e07      	lsrs	r7, r0, #24
 801bbca:	2fff      	cmp	r7, #255	@ 0xff
 801bbcc:	d116      	bne.n	801bbfc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801bbce:	f06f 0501 	mvn.w	r5, #1
 801bbd2:	fb05 f706 	mul.w	r7, r5, r6
 801bbd6:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801bbda:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801bbde:	0945      	lsrs	r5, r0, #5
 801bbe0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801bbe4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801bbe8:	ea4c 0505 	orr.w	r5, ip, r5
 801bbec:	4305      	orrs	r5, r0
 801bbee:	53e5      	strh	r5, [r4, r7]
 801bbf0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801bbf2:	3e01      	subs	r6, #1
 801bbf4:	4401      	add	r1, r0
 801bbf6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801bbf8:	4402      	add	r2, r0
 801bbfa:	e78e      	b.n	801bb1a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bbfc:	b2fd      	uxtb	r5, r7
 801bbfe:	2f00      	cmp	r7, #0
 801bc00:	d0f6      	beq.n	801bbf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bc02:	f06f 0701 	mvn.w	r7, #1
 801bc06:	fa1f f985 	uxth.w	r9, r5
 801bc0a:	43ed      	mvns	r5, r5
 801bc0c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801bc10:	4377      	muls	r7, r6
 801bc12:	fb1a fa09 	smulbb	sl, sl, r9
 801bc16:	b2ed      	uxtb	r5, r5
 801bc18:	f834 8007 	ldrh.w	r8, [r4, r7]
 801bc1c:	9702      	str	r7, [sp, #8]
 801bc1e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801bc22:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801bc26:	fb17 f709 	smulbb	r7, r7, r9
 801bc2a:	b2c0      	uxtb	r0, r0
 801bc2c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801bc30:	fb10 f009 	smulbb	r0, r0, r9
 801bc34:	fb0c 7c05 	mla	ip, ip, r5, r7
 801bc38:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801bc3c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bc40:	fa1f fc8c 	uxth.w	ip, ip
 801bc44:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801bc48:	fa5f f888 	uxtb.w	r8, r8
 801bc4c:	fb07 a705 	mla	r7, r7, r5, sl
 801bc50:	fb08 0005 	mla	r0, r8, r5, r0
 801bc54:	f10c 0501 	add.w	r5, ip, #1
 801bc58:	b2bf      	uxth	r7, r7
 801bc5a:	b280      	uxth	r0, r0
 801bc5c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bc60:	f100 0a01 	add.w	sl, r0, #1
 801bc64:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801bc68:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801bc6c:	9802      	ldr	r0, [sp, #8]
 801bc6e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bc72:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bc76:	f107 0a01 	add.w	sl, r7, #1
 801bc7a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bc7e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bc82:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801bc86:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bc8a:	f824 c000 	strh.w	ip, [r4, r0]
 801bc8e:	e7af      	b.n	801bbf0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bc90:	f04f 0800 	mov.w	r8, #0
 801bc94:	eba3 0008 	sub.w	r0, r3, r8
 801bc98:	2800      	cmp	r0, #0
 801bc9a:	f77f af41 	ble.w	801bb20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bc9e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801bca2:	1410      	asrs	r0, r2, #16
 801bca4:	9f00      	ldr	r7, [sp, #0]
 801bca6:	140d      	asrs	r5, r1, #16
 801bca8:	fb06 7000 	mla	r0, r6, r0, r7
 801bcac:	5d40      	ldrb	r0, [r0, r5]
 801bcae:	9d01      	ldr	r5, [sp, #4]
 801bcb0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801bcb4:	0e2e      	lsrs	r6, r5, #24
 801bcb6:	2eff      	cmp	r6, #255	@ 0xff
 801bcb8:	d112      	bne.n	801bce0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801bcba:	482c      	ldr	r0, [pc, #176]	@ (801bd6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801bcbc:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801bcc0:	0968      	lsrs	r0, r5, #5
 801bcc2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bcc6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801bcca:	4330      	orrs	r0, r6
 801bccc:	4328      	orrs	r0, r5
 801bcce:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801bcd2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801bcd4:	f108 0801 	add.w	r8, r8, #1
 801bcd8:	4401      	add	r1, r0
 801bcda:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801bcdc:	4402      	add	r2, r0
 801bcde:	e7d9      	b.n	801bc94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801bce0:	b2f0      	uxtb	r0, r6
 801bce2:	2e00      	cmp	r6, #0
 801bce4:	d0f5      	beq.n	801bcd2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801bce6:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801bcea:	fa1f f980 	uxth.w	r9, r0
 801bcee:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801bcf2:	43c0      	mvns	r0, r0
 801bcf4:	ea4f 272c 	mov.w	r7, ip, asr #8
 801bcf8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bcfc:	fb16 f609 	smulbb	r6, r6, r9
 801bd00:	b2c0      	uxtb	r0, r0
 801bd02:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801bd06:	b2ed      	uxtb	r5, r5
 801bd08:	fb1a fa09 	smulbb	sl, sl, r9
 801bd0c:	fb07 6700 	mla	r7, r7, r0, r6
 801bd10:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801bd14:	fb15 f509 	smulbb	r5, r5, r9
 801bd18:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bd1c:	b2bf      	uxth	r7, r7
 801bd1e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801bd22:	fa5f fc8c 	uxtb.w	ip, ip
 801bd26:	fb06 a600 	mla	r6, r6, r0, sl
 801bd2a:	fb0c 5500 	mla	r5, ip, r0, r5
 801bd2e:	1c78      	adds	r0, r7, #1
 801bd30:	b2b6      	uxth	r6, r6
 801bd32:	b2ad      	uxth	r5, r5
 801bd34:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801bd38:	f105 0a01 	add.w	sl, r5, #1
 801bd3c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801bd40:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bd44:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bd48:	ea4a 0707 	orr.w	r7, sl, r7
 801bd4c:	f106 0a01 	add.w	sl, r6, #1
 801bd50:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bd54:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bd58:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801bd5c:	ea47 070a 	orr.w	r7, r7, sl
 801bd60:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801bd64:	e7b5      	b.n	801bcd2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801bd66:	b005      	add	sp, #20
 801bd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd6c:	fffff800 	.word	0xfffff800

0801bd70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd74:	b087      	sub	sp, #28
 801bd76:	468b      	mov	fp, r1
 801bd78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bd7c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bd7e:	9204      	str	r2, [sp, #16]
 801bd80:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801bd84:	6861      	ldr	r1, [r4, #4]
 801bd86:	9205      	str	r2, [sp, #20]
 801bd88:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801bd8c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801bd90:	fb01 2000 	mla	r0, r1, r0, r2
 801bd94:	6822      	ldr	r2, [r4, #0]
 801bd96:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801bd9a:	f8de 2000 	ldr.w	r2, [lr]
 801bd9e:	9201      	str	r2, [sp, #4]
 801bda0:	f8de 2004 	ldr.w	r2, [lr, #4]
 801bda4:	9202      	str	r2, [sp, #8]
 801bda6:	f1bb 0f00 	cmp.w	fp, #0
 801bdaa:	dc03      	bgt.n	801bdb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801bdac:	9a04      	ldr	r2, [sp, #16]
 801bdae:	2a00      	cmp	r2, #0
 801bdb0:	f340 8142 	ble.w	801c038 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801bdb4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bdb6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801bdba:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801bdbe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bdc0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801bdc4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	dd0e      	ble.n	801bdea <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801bdcc:	140c      	asrs	r4, r1, #16
 801bdce:	d405      	bmi.n	801bddc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bdd0:	42bc      	cmp	r4, r7
 801bdd2:	da03      	bge.n	801bddc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bdd4:	1414      	asrs	r4, r2, #16
 801bdd6:	d401      	bmi.n	801bddc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bdd8:	42b4      	cmp	r4, r6
 801bdda:	db07      	blt.n	801bdec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bddc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bdde:	3b01      	subs	r3, #1
 801bde0:	3002      	adds	r0, #2
 801bde2:	4421      	add	r1, r4
 801bde4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bde6:	4422      	add	r2, r4
 801bde8:	e7ee      	b.n	801bdc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801bdea:	d019      	beq.n	801be20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801bdec:	1e5c      	subs	r4, r3, #1
 801bdee:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801bdf0:	fb05 1504 	mla	r5, r5, r4, r1
 801bdf4:	142d      	asrs	r5, r5, #16
 801bdf6:	d409      	bmi.n	801be0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801bdf8:	42bd      	cmp	r5, r7
 801bdfa:	da07      	bge.n	801be0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801bdfc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801bdfe:	fb05 2404 	mla	r4, r5, r4, r2
 801be02:	1424      	asrs	r4, r4, #16
 801be04:	d402      	bmi.n	801be0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801be06:	42b4      	cmp	r4, r6
 801be08:	f2c0 80b1 	blt.w	801bf6e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801be0c:	f04f 0800 	mov.w	r8, #0
 801be10:	eb03 0408 	add.w	r4, r3, r8
 801be14:	2c00      	cmp	r4, #0
 801be16:	dc3e      	bgt.n	801be96 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801be18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be1c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801be20:	f1bb 0f00 	cmp.w	fp, #0
 801be24:	f340 8108 	ble.w	801c038 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801be28:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801be2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be32:	f1bb 0b01 	subs.w	fp, fp, #1
 801be36:	eeb0 6a62 	vmov.f32	s12, s5
 801be3a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801be3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be42:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be46:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801be4a:	eeb0 6a43 	vmov.f32	s12, s6
 801be4e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be52:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801be56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be6e:	ee12 2a90 	vmov	r2, s5
 801be72:	eef0 2a47 	vmov.f32	s5, s14
 801be76:	fb92 f3f3 	sdiv	r3, r2, r3
 801be7a:	ee13 2a10 	vmov	r2, s6
 801be7e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801be80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801be82:	eeb0 3a67 	vmov.f32	s6, s15
 801be86:	fb92 f3f3 	sdiv	r3, r2, r3
 801be8a:	9a04      	ldr	r2, [sp, #16]
 801be8c:	9314      	str	r3, [sp, #80]	@ 0x50
 801be8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801be90:	bf08      	it	eq
 801be92:	4613      	moveq	r3, r2
 801be94:	e787      	b.n	801bda6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801be96:	140e      	asrs	r6, r1, #16
 801be98:	d462      	bmi.n	801bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801be9a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801be9e:	42b5      	cmp	r5, r6
 801bea0:	dd5e      	ble.n	801bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801bea2:	1417      	asrs	r7, r2, #16
 801bea4:	d45c      	bmi.n	801bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801bea6:	f8de 400c 	ldr.w	r4, [lr, #12]
 801beaa:	42bc      	cmp	r4, r7
 801beac:	dd58      	ble.n	801bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801beae:	b22d      	sxth	r5, r5
 801beb0:	9c02      	ldr	r4, [sp, #8]
 801beb2:	fb07 6505 	mla	r5, r7, r5, r6
 801beb6:	5d66      	ldrb	r6, [r4, r5]
 801beb8:	2e00      	cmp	r6, #0
 801beba:	d051      	beq.n	801bf60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801bebc:	9c01      	ldr	r4, [sp, #4]
 801bebe:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801bec2:	f06f 0401 	mvn.w	r4, #1
 801bec6:	fb04 f408 	mul.w	r4, r4, r8
 801beca:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801bece:	5b05      	ldrh	r5, [r0, r4]
 801bed0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801bed4:	9403      	str	r4, [sp, #12]
 801bed6:	9c05      	ldr	r4, [sp, #20]
 801bed8:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801bedc:	4366      	muls	r6, r4
 801bede:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801bee2:	1c74      	adds	r4, r6, #1
 801bee4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801bee8:	122e      	asrs	r6, r5, #8
 801beea:	1224      	asrs	r4, r4, #8
 801beec:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801bef0:	00ed      	lsls	r5, r5, #3
 801bef2:	b2a7      	uxth	r7, r4
 801bef4:	43e4      	mvns	r4, r4
 801bef6:	b2ed      	uxtb	r5, r5
 801bef8:	b2e4      	uxtb	r4, r4
 801befa:	fb16 f604 	smulbb	r6, r6, r4
 801befe:	fb15 f504 	smulbb	r5, r5, r4
 801bf02:	fb0c 6c07 	mla	ip, ip, r7, r6
 801bf06:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801bf0a:	fb1a fa04 	smulbb	sl, sl, r4
 801bf0e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801bf12:	fa1f fc8c 	uxth.w	ip, ip
 801bf16:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801bf1a:	fa5f f989 	uxtb.w	r9, r9
 801bf1e:	fb06 a607 	mla	r6, r6, r7, sl
 801bf22:	f10c 0401 	add.w	r4, ip, #1
 801bf26:	fb09 5507 	mla	r5, r9, r7, r5
 801bf2a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801bf2e:	9c03      	ldr	r4, [sp, #12]
 801bf30:	b2ad      	uxth	r5, r5
 801bf32:	b2b6      	uxth	r6, r6
 801bf34:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801bf38:	f105 0a01 	add.w	sl, r5, #1
 801bf3c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bf40:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bf44:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bf48:	f106 0a01 	add.w	sl, r6, #1
 801bf4c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bf50:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bf54:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801bf58:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bf5c:	f820 c004 	strh.w	ip, [r0, r4]
 801bf60:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bf62:	f108 38ff 	add.w	r8, r8, #4294967295
 801bf66:	4421      	add	r1, r4
 801bf68:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bf6a:	4422      	add	r2, r4
 801bf6c:	e750      	b.n	801be10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bf6e:	f04f 0900 	mov.w	r9, #0
 801bf72:	eba3 0409 	sub.w	r4, r3, r9
 801bf76:	2c00      	cmp	r4, #0
 801bf78:	f77f af4e 	ble.w	801be18 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801bf7c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801bf80:	140d      	asrs	r5, r1, #16
 801bf82:	1414      	asrs	r4, r2, #16
 801bf84:	fb06 5404 	mla	r4, r6, r4, r5
 801bf88:	9d02      	ldr	r5, [sp, #8]
 801bf8a:	5d2e      	ldrb	r6, [r5, r4]
 801bf8c:	2e00      	cmp	r6, #0
 801bf8e:	d04c      	beq.n	801c02a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801bf90:	9d01      	ldr	r5, [sp, #4]
 801bf92:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801bf96:	9c05      	ldr	r4, [sp, #20]
 801bf98:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801bf9c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801bfa0:	4366      	muls	r6, r4
 801bfa2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801bfa6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801bfaa:	1c74      	adds	r4, r6, #1
 801bfac:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801bfb0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801bfb4:	122e      	asrs	r6, r5, #8
 801bfb6:	1224      	asrs	r4, r4, #8
 801bfb8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801bfbc:	00ed      	lsls	r5, r5, #3
 801bfbe:	b2a7      	uxth	r7, r4
 801bfc0:	43e4      	mvns	r4, r4
 801bfc2:	b2ed      	uxtb	r5, r5
 801bfc4:	b2e4      	uxtb	r4, r4
 801bfc6:	fb16 f604 	smulbb	r6, r6, r4
 801bfca:	fb15 f504 	smulbb	r5, r5, r4
 801bfce:	fb0c 6c07 	mla	ip, ip, r7, r6
 801bfd2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801bfd6:	fb1a fa04 	smulbb	sl, sl, r4
 801bfda:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bfde:	fa1f fc8c 	uxth.w	ip, ip
 801bfe2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801bfe6:	fa5f f888 	uxtb.w	r8, r8
 801bfea:	fb06 a607 	mla	r6, r6, r7, sl
 801bfee:	f10c 0401 	add.w	r4, ip, #1
 801bff2:	fb08 5507 	mla	r5, r8, r7, r5
 801bff6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801bffa:	b2ad      	uxth	r5, r5
 801bffc:	b2b6      	uxth	r6, r6
 801bffe:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c002:	f105 0a01 	add.w	sl, r5, #1
 801c006:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c00a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c00e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c012:	f106 0a01 	add.w	sl, r6, #1
 801c016:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c01a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c01e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801c022:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c026:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801c02a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c02c:	f109 0901 	add.w	r9, r9, #1
 801c030:	4421      	add	r1, r4
 801c032:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c034:	4422      	add	r2, r4
 801c036:	e79c      	b.n	801bf72 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801c038:	b007      	add	sp, #28
 801c03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c03e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c03e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c042:	b085      	sub	sp, #20
 801c044:	468b      	mov	fp, r1
 801c046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c04a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c04c:	9203      	str	r2, [sp, #12]
 801c04e:	6861      	ldr	r1, [r4, #4]
 801c050:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801c054:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801c058:	fb01 2000 	mla	r0, r1, r0, r2
 801c05c:	6822      	ldr	r2, [r4, #0]
 801c05e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801c062:	f8d8 2000 	ldr.w	r2, [r8]
 801c066:	9200      	str	r2, [sp, #0]
 801c068:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c06c:	9201      	str	r2, [sp, #4]
 801c06e:	f1bb 0f00 	cmp.w	fp, #0
 801c072:	dc03      	bgt.n	801c07c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c074:	9a03      	ldr	r2, [sp, #12]
 801c076:	2a00      	cmp	r2, #0
 801c078:	f340 8146 	ble.w	801c308 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801c07c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c07e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801c082:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c086:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c088:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801c08c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c090:	2b00      	cmp	r3, #0
 801c092:	dd0e      	ble.n	801c0b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c094:	140c      	asrs	r4, r1, #16
 801c096:	d405      	bmi.n	801c0a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c098:	42bc      	cmp	r4, r7
 801c09a:	da03      	bge.n	801c0a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c09c:	1414      	asrs	r4, r2, #16
 801c09e:	d401      	bmi.n	801c0a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c0a0:	42b4      	cmp	r4, r6
 801c0a2:	db07      	blt.n	801c0b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c0a4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c0a6:	3b01      	subs	r3, #1
 801c0a8:	3002      	adds	r0, #2
 801c0aa:	4421      	add	r1, r4
 801c0ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c0ae:	4422      	add	r2, r4
 801c0b0:	e7ee      	b.n	801c090 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c0b2:	d017      	beq.n	801c0e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c0b4:	1e5c      	subs	r4, r3, #1
 801c0b6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c0b8:	fb05 1504 	mla	r5, r5, r4, r1
 801c0bc:	142d      	asrs	r5, r5, #16
 801c0be:	d409      	bmi.n	801c0d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c0c0:	42bd      	cmp	r5, r7
 801c0c2:	da07      	bge.n	801c0d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c0c4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801c0c6:	fb05 2404 	mla	r4, r5, r4, r2
 801c0ca:	1424      	asrs	r4, r4, #16
 801c0cc:	d402      	bmi.n	801c0d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c0ce:	42b4      	cmp	r4, r6
 801c0d0:	f2c0 80b3 	blt.w	801c23a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801c0d4:	2600      	movs	r6, #0
 801c0d6:	199c      	adds	r4, r3, r6
 801c0d8:	2c00      	cmp	r4, #0
 801c0da:	dc3e      	bgt.n	801c15a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c0dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c0e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c0e4:	f1bb 0f00 	cmp.w	fp, #0
 801c0e8:	f340 810e 	ble.w	801c308 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801c0ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c0f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c0f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c0f6:	f1bb 0b01 	subs.w	fp, fp, #1
 801c0fa:	eeb0 6a62 	vmov.f32	s12, s5
 801c0fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c102:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c106:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c10a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c10e:	eeb0 6a43 	vmov.f32	s12, s6
 801c112:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c116:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c11a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c11e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c122:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c126:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c12a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c12e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c132:	ee12 2a90 	vmov	r2, s5
 801c136:	eef0 2a47 	vmov.f32	s5, s14
 801c13a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c13e:	ee13 2a10 	vmov	r2, s6
 801c142:	9311      	str	r3, [sp, #68]	@ 0x44
 801c144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c146:	eeb0 3a67 	vmov.f32	s6, s15
 801c14a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c14e:	9a03      	ldr	r2, [sp, #12]
 801c150:	9312      	str	r3, [sp, #72]	@ 0x48
 801c152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c154:	bf08      	it	eq
 801c156:	4613      	moveq	r3, r2
 801c158:	e789      	b.n	801c06e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c15a:	140f      	asrs	r7, r1, #16
 801c15c:	d418      	bmi.n	801c190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c15e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c162:	42bd      	cmp	r5, r7
 801c164:	dd14      	ble.n	801c190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c166:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c16a:	d411      	bmi.n	801c190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c16c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801c170:	4564      	cmp	r4, ip
 801c172:	dd0d      	ble.n	801c190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c174:	b22d      	sxth	r5, r5
 801c176:	9c01      	ldr	r4, [sp, #4]
 801c178:	fb0c 7505 	mla	r5, ip, r5, r7
 801c17c:	5d64      	ldrb	r4, [r4, r5]
 801c17e:	2cff      	cmp	r4, #255	@ 0xff
 801c180:	d10c      	bne.n	801c19c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c182:	9c00      	ldr	r4, [sp, #0]
 801c184:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801c188:	f06f 0401 	mvn.w	r4, #1
 801c18c:	4374      	muls	r4, r6
 801c18e:	5305      	strh	r5, [r0, r4]
 801c190:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c192:	3e01      	subs	r6, #1
 801c194:	4421      	add	r1, r4
 801c196:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c198:	4422      	add	r2, r4
 801c19a:	e79c      	b.n	801c0d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c19c:	2c00      	cmp	r4, #0
 801c19e:	d0f7      	beq.n	801c190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c1a0:	9f00      	ldr	r7, [sp, #0]
 801c1a2:	fa1f fc84 	uxth.w	ip, r4
 801c1a6:	43e4      	mvns	r4, r4
 801c1a8:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801c1ac:	f06f 0501 	mvn.w	r5, #1
 801c1b0:	b2e4      	uxtb	r4, r4
 801c1b2:	4375      	muls	r5, r6
 801c1b4:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801c1b8:	9502      	str	r5, [sp, #8]
 801c1ba:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801c1be:	5b45      	ldrh	r5, [r0, r5]
 801c1c0:	122f      	asrs	r7, r5, #8
 801c1c2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c1c6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c1ca:	00ed      	lsls	r5, r5, #3
 801c1cc:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801c1d0:	fb17 f704 	smulbb	r7, r7, r4
 801c1d4:	b2ed      	uxtb	r5, r5
 801c1d6:	fb1a fa04 	smulbb	sl, sl, r4
 801c1da:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801c1de:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801c1e2:	fb15 f504 	smulbb	r5, r5, r4
 801c1e6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801c1ea:	fa1f fe8e 	uxth.w	lr, lr
 801c1ee:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c1f2:	fa5f f989 	uxtb.w	r9, r9
 801c1f6:	fb07 a70c 	mla	r7, r7, ip, sl
 801c1fa:	f10e 0401 	add.w	r4, lr, #1
 801c1fe:	fb09 550c 	mla	r5, r9, ip, r5
 801c202:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801c206:	9c02      	ldr	r4, [sp, #8]
 801c208:	b2ad      	uxth	r5, r5
 801c20a:	b2bf      	uxth	r7, r7
 801c20c:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801c210:	f105 0a01 	add.w	sl, r5, #1
 801c214:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c218:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c21c:	ea4a 0e0e 	orr.w	lr, sl, lr
 801c220:	f107 0a01 	add.w	sl, r7, #1
 801c224:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c228:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c22c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801c230:	ea4e 0e0a 	orr.w	lr, lr, sl
 801c234:	f820 e004 	strh.w	lr, [r0, r4]
 801c238:	e7aa      	b.n	801c190 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c23a:	f04f 0900 	mov.w	r9, #0
 801c23e:	eba3 0409 	sub.w	r4, r3, r9
 801c242:	2c00      	cmp	r4, #0
 801c244:	f77f af4a 	ble.w	801c0dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c248:	1414      	asrs	r4, r2, #16
 801c24a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801c24e:	140d      	asrs	r5, r1, #16
 801c250:	fb06 5504 	mla	r5, r6, r4, r5
 801c254:	9c01      	ldr	r4, [sp, #4]
 801c256:	5d64      	ldrb	r4, [r4, r5]
 801c258:	2cff      	cmp	r4, #255	@ 0xff
 801c25a:	d10b      	bne.n	801c274 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801c25c:	9c00      	ldr	r4, [sp, #0]
 801c25e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801c262:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801c266:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c268:	f109 0901 	add.w	r9, r9, #1
 801c26c:	4421      	add	r1, r4
 801c26e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c270:	4422      	add	r2, r4
 801c272:	e7e4      	b.n	801c23e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c274:	2c00      	cmp	r4, #0
 801c276:	d0f6      	beq.n	801c266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c278:	9e00      	ldr	r6, [sp, #0]
 801c27a:	b2a7      	uxth	r7, r4
 801c27c:	43e4      	mvns	r4, r4
 801c27e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801c282:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801c286:	b2e4      	uxtb	r4, r4
 801c288:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c28c:	122e      	asrs	r6, r5, #8
 801c28e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c292:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c296:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801c29a:	00ed      	lsls	r5, r5, #3
 801c29c:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801c2a0:	fb16 f604 	smulbb	r6, r6, r4
 801c2a4:	b2ed      	uxtb	r5, r5
 801c2a6:	fb1a fa04 	smulbb	sl, sl, r4
 801c2aa:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c2ae:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c2b2:	fb15 f504 	smulbb	r5, r5, r4
 801c2b6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c2ba:	fa1f fc8c 	uxth.w	ip, ip
 801c2be:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c2c2:	fa5f fe8e 	uxtb.w	lr, lr
 801c2c6:	fb06 a607 	mla	r6, r6, r7, sl
 801c2ca:	f10c 0401 	add.w	r4, ip, #1
 801c2ce:	fb0e 5507 	mla	r5, lr, r7, r5
 801c2d2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c2d6:	b2ad      	uxth	r5, r5
 801c2d8:	b2b6      	uxth	r6, r6
 801c2da:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c2de:	f105 0a01 	add.w	sl, r5, #1
 801c2e2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c2e6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c2ea:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c2ee:	f106 0a01 	add.w	sl, r6, #1
 801c2f2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c2f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c2fa:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801c2fe:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c302:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801c306:	e7ae      	b.n	801c266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c308:	b005      	add	sp, #20
 801c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c30e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c30e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c312:	b085      	sub	sp, #20
 801c314:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c316:	9203      	str	r2, [sp, #12]
 801c318:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801c31c:	9100      	str	r1, [sp, #0]
 801c31e:	9201      	str	r2, [sp, #4]
 801c320:	6841      	ldr	r1, [r0, #4]
 801c322:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801c326:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c32a:	fb01 2404 	mla	r4, r1, r4, r2
 801c32e:	6802      	ldr	r2, [r0, #0]
 801c330:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c334:	f8de 2000 	ldr.w	r2, [lr]
 801c338:	9202      	str	r2, [sp, #8]
 801c33a:	9a01      	ldr	r2, [sp, #4]
 801c33c:	43d6      	mvns	r6, r2
 801c33e:	b2f6      	uxtb	r6, r6
 801c340:	9a00      	ldr	r2, [sp, #0]
 801c342:	2a00      	cmp	r2, #0
 801c344:	dc03      	bgt.n	801c34e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c346:	9a03      	ldr	r2, [sp, #12]
 801c348:	2a00      	cmp	r2, #0
 801c34a:	f340 8124 	ble.w	801c596 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c34e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c350:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801c354:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c358:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c35a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801c35e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c362:	2b00      	cmp	r3, #0
 801c364:	dd0e      	ble.n	801c384 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c366:	1408      	asrs	r0, r1, #16
 801c368:	d405      	bmi.n	801c376 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c36a:	4560      	cmp	r0, ip
 801c36c:	da03      	bge.n	801c376 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c36e:	1410      	asrs	r0, r2, #16
 801c370:	d401      	bmi.n	801c376 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c372:	42b8      	cmp	r0, r7
 801c374:	db07      	blt.n	801c386 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c376:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c378:	3b01      	subs	r3, #1
 801c37a:	3402      	adds	r4, #2
 801c37c:	4401      	add	r1, r0
 801c37e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c380:	4402      	add	r2, r0
 801c382:	e7ee      	b.n	801c362 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c384:	d06e      	beq.n	801c464 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c386:	1e58      	subs	r0, r3, #1
 801c388:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c38a:	fb05 1500 	mla	r5, r5, r0, r1
 801c38e:	142d      	asrs	r5, r5, #16
 801c390:	d45c      	bmi.n	801c44c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c392:	4565      	cmp	r5, ip
 801c394:	da5a      	bge.n	801c44c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c396:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801c398:	fb05 2000 	mla	r0, r5, r0, r2
 801c39c:	1400      	asrs	r0, r0, #16
 801c39e:	d455      	bmi.n	801c44c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c3a0:	42b8      	cmp	r0, r7
 801c3a2:	da53      	bge.n	801c44c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c3a4:	4699      	mov	r9, r3
 801c3a6:	46a2      	mov	sl, r4
 801c3a8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801c3ac:	f1b9 0f00 	cmp.w	r9, #0
 801c3b0:	dd54      	ble.n	801c45c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c3b2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c3b6:	140d      	asrs	r5, r1, #16
 801c3b8:	1410      	asrs	r0, r2, #16
 801c3ba:	f109 39ff 	add.w	r9, r9, #4294967295
 801c3be:	fb07 5000 	mla	r0, r7, r0, r5
 801c3c2:	9d02      	ldr	r5, [sp, #8]
 801c3c4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c3c8:	f8ba 5000 	ldrh.w	r5, [sl]
 801c3cc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c3d0:	122f      	asrs	r7, r5, #8
 801c3d2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801c3d6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c3da:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c3de:	00ed      	lsls	r5, r5, #3
 801c3e0:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801c3e4:	fb17 f706 	smulbb	r7, r7, r6
 801c3e8:	b2ed      	uxtb	r5, r5
 801c3ea:	fb18 f806 	smulbb	r8, r8, r6
 801c3ee:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801c3f2:	10c7      	asrs	r7, r0, #3
 801c3f4:	fb15 f506 	smulbb	r5, r5, r6
 801c3f8:	00c0      	lsls	r0, r0, #3
 801c3fa:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c3fe:	fa1f fc8c 	uxth.w	ip, ip
 801c402:	b2c0      	uxtb	r0, r0
 801c404:	fb07 870b 	mla	r7, r7, fp, r8
 801c408:	fb00 500b 	mla	r0, r0, fp, r5
 801c40c:	f10c 0501 	add.w	r5, ip, #1
 801c410:	b2bf      	uxth	r7, r7
 801c412:	b280      	uxth	r0, r0
 801c414:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c418:	f107 0801 	add.w	r8, r7, #1
 801c41c:	1c45      	adds	r5, r0, #1
 801c41e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801c422:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c426:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c42a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c42c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c430:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c434:	4401      	add	r1, r0
 801c436:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801c43a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c43c:	ea45 0c0c 	orr.w	ip, r5, ip
 801c440:	4402      	add	r2, r0
 801c442:	ea4c 0c08 	orr.w	ip, ip, r8
 801c446:	f82a cb02 	strh.w	ip, [sl], #2
 801c44a:	e7af      	b.n	801c3ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c44c:	f04f 0800 	mov.w	r8, #0
 801c450:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801c454:	eb03 0008 	add.w	r0, r3, r8
 801c458:	2800      	cmp	r0, #0
 801c45a:	dc41      	bgt.n	801c4e0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801c45c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c460:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c464:	9b00      	ldr	r3, [sp, #0]
 801c466:	2b00      	cmp	r3, #0
 801c468:	f340 8095 	ble.w	801c596 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c46c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c472:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c476:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c47a:	eef0 6a62 	vmov.f32	s13, s5
 801c47e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c482:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c486:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c48a:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801c48e:	eef0 6a43 	vmov.f32	s13, s6
 801c492:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c496:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801c49a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c49e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c4a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c4a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c4aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c4ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c4b2:	ee12 2a90 	vmov	r2, s5
 801c4b6:	eef0 2a47 	vmov.f32	s5, s14
 801c4ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801c4be:	ee13 2a10 	vmov	r2, s6
 801c4c2:	9311      	str	r3, [sp, #68]	@ 0x44
 801c4c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c4c6:	eeb0 3a67 	vmov.f32	s6, s15
 801c4ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801c4ce:	9312      	str	r3, [sp, #72]	@ 0x48
 801c4d0:	9b00      	ldr	r3, [sp, #0]
 801c4d2:	9a03      	ldr	r2, [sp, #12]
 801c4d4:	3b01      	subs	r3, #1
 801c4d6:	9300      	str	r3, [sp, #0]
 801c4d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c4da:	bf08      	it	eq
 801c4dc:	4613      	moveq	r3, r2
 801c4de:	e72f      	b.n	801c340 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c4e0:	140f      	asrs	r7, r1, #16
 801c4e2:	d451      	bmi.n	801c588 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c4e4:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c4e8:	42bd      	cmp	r5, r7
 801c4ea:	dd4d      	ble.n	801c588 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c4ec:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c4f0:	d44a      	bmi.n	801c588 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c4f2:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c4f6:	4560      	cmp	r0, ip
 801c4f8:	dd46      	ble.n	801c588 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c4fa:	b22d      	sxth	r5, r5
 801c4fc:	9802      	ldr	r0, [sp, #8]
 801c4fe:	fb0c 7505 	mla	r5, ip, r5, r7
 801c502:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801c506:	f06f 0501 	mvn.w	r5, #1
 801c50a:	fb05 fb08 	mul.w	fp, r5, r8
 801c50e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c512:	f834 500b 	ldrh.w	r5, [r4, fp]
 801c516:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c51a:	122f      	asrs	r7, r5, #8
 801c51c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c520:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c524:	00ed      	lsls	r5, r5, #3
 801c526:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801c52a:	fb17 f706 	smulbb	r7, r7, r6
 801c52e:	b2ed      	uxtb	r5, r5
 801c530:	fb19 f906 	smulbb	r9, r9, r6
 801c534:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801c538:	10c7      	asrs	r7, r0, #3
 801c53a:	fb15 f506 	smulbb	r5, r5, r6
 801c53e:	00c0      	lsls	r0, r0, #3
 801c540:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c544:	fa1f fc8c 	uxth.w	ip, ip
 801c548:	b2c0      	uxtb	r0, r0
 801c54a:	fb07 970a 	mla	r7, r7, sl, r9
 801c54e:	fb00 500a 	mla	r0, r0, sl, r5
 801c552:	f10c 0501 	add.w	r5, ip, #1
 801c556:	b2bf      	uxth	r7, r7
 801c558:	b280      	uxth	r0, r0
 801c55a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c55e:	f107 0901 	add.w	r9, r7, #1
 801c562:	1c45      	adds	r5, r0, #1
 801c564:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801c568:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c56c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c570:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c574:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c578:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801c57c:	ea45 0c0c 	orr.w	ip, r5, ip
 801c580:	ea4c 0c09 	orr.w	ip, ip, r9
 801c584:	f824 c00b 	strh.w	ip, [r4, fp]
 801c588:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c58a:	f108 38ff 	add.w	r8, r8, #4294967295
 801c58e:	4401      	add	r1, r0
 801c590:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c592:	4402      	add	r2, r0
 801c594:	e75e      	b.n	801c454 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c596:	b005      	add	sp, #20
 801c598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c59c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5a0:	b085      	sub	sp, #20
 801c5a2:	4693      	mov	fp, r2
 801c5a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c5a8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c5aa:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801c5ac:	6870      	ldr	r0, [r6, #4]
 801c5ae:	9101      	str	r1, [sp, #4]
 801c5b0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c5b4:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801c5b8:	fb00 2404 	mla	r4, r0, r4, r2
 801c5bc:	6832      	ldr	r2, [r6, #0]
 801c5be:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c5c2:	682a      	ldr	r2, [r5, #0]
 801c5c4:	9202      	str	r2, [sp, #8]
 801c5c6:	9a01      	ldr	r2, [sp, #4]
 801c5c8:	2a00      	cmp	r2, #0
 801c5ca:	dc03      	bgt.n	801c5d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c5cc:	f1bb 0f00 	cmp.w	fp, #0
 801c5d0:	f340 809a 	ble.w	801c708 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c5d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c5d6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c5da:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c5de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c5e0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c5e4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	dd0c      	ble.n	801c606 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c5ec:	1406      	asrs	r6, r0, #16
 801c5ee:	d405      	bmi.n	801c5fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c5f0:	454e      	cmp	r6, r9
 801c5f2:	da03      	bge.n	801c5fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c5f4:	1416      	asrs	r6, r2, #16
 801c5f6:	d401      	bmi.n	801c5fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c5f8:	4546      	cmp	r6, r8
 801c5fa:	db05      	blt.n	801c608 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c5fc:	4470      	add	r0, lr
 801c5fe:	4462      	add	r2, ip
 801c600:	3b01      	subs	r3, #1
 801c602:	3402      	adds	r4, #2
 801c604:	e7f0      	b.n	801c5e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c606:	d00f      	beq.n	801c628 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c608:	1e5e      	subs	r6, r3, #1
 801c60a:	fb0e 0706 	mla	r7, lr, r6, r0
 801c60e:	143f      	asrs	r7, r7, #16
 801c610:	d541      	bpl.n	801c696 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801c612:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801c616:	4698      	mov	r8, r3
 801c618:	9603      	str	r6, [sp, #12]
 801c61a:	f1b8 0f00 	cmp.w	r8, #0
 801c61e:	dc56      	bgt.n	801c6ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801c620:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c624:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c628:	9b01      	ldr	r3, [sp, #4]
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	dd6c      	ble.n	801c708 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c62e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c634:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c638:	eeb0 6a62 	vmov.f32	s12, s5
 801c63c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c640:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c644:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c648:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c64c:	eeb0 6a43 	vmov.f32	s12, s6
 801c650:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c654:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c658:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c65c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c660:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c664:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c668:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c66c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c670:	ee12 2a90 	vmov	r2, s5
 801c674:	eef0 2a47 	vmov.f32	s5, s14
 801c678:	fb92 fef3 	sdiv	lr, r2, r3
 801c67c:	ee13 2a10 	vmov	r2, s6
 801c680:	eeb0 3a67 	vmov.f32	s6, s15
 801c684:	fb92 fcf3 	sdiv	ip, r2, r3
 801c688:	9b01      	ldr	r3, [sp, #4]
 801c68a:	3b01      	subs	r3, #1
 801c68c:	9301      	str	r3, [sp, #4]
 801c68e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c690:	bf08      	it	eq
 801c692:	465b      	moveq	r3, fp
 801c694:	e797      	b.n	801c5c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801c696:	454f      	cmp	r7, r9
 801c698:	dabb      	bge.n	801c612 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c69a:	fb0c 2606 	mla	r6, ip, r6, r2
 801c69e:	1436      	asrs	r6, r6, #16
 801c6a0:	d4b7      	bmi.n	801c612 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c6a2:	4546      	cmp	r6, r8
 801c6a4:	dab5      	bge.n	801c612 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c6a6:	461e      	mov	r6, r3
 801c6a8:	46a0      	mov	r8, r4
 801c6aa:	2e00      	cmp	r6, #0
 801c6ac:	ddb8      	ble.n	801c620 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c6ae:	1417      	asrs	r7, r2, #16
 801c6b0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801c6b4:	ea4f 4920 	mov.w	r9, r0, asr #16
 801c6b8:	9902      	ldr	r1, [sp, #8]
 801c6ba:	4470      	add	r0, lr
 801c6bc:	4462      	add	r2, ip
 801c6be:	fb0a 9707 	mla	r7, sl, r7, r9
 801c6c2:	3e01      	subs	r6, #1
 801c6c4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801c6c8:	f828 7b02 	strh.w	r7, [r8], #2
 801c6cc:	e7ed      	b.n	801c6aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801c6ce:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c6d2:	d414      	bmi.n	801c6fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c6d4:	68ae      	ldr	r6, [r5, #8]
 801c6d6:	454e      	cmp	r6, r9
 801c6d8:	dd11      	ble.n	801c6fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c6da:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c6de:	d40e      	bmi.n	801c6fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c6e0:	68ef      	ldr	r7, [r5, #12]
 801c6e2:	4557      	cmp	r7, sl
 801c6e4:	dd0b      	ble.n	801c6fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c6e6:	b236      	sxth	r6, r6
 801c6e8:	f06f 0101 	mvn.w	r1, #1
 801c6ec:	9f02      	ldr	r7, [sp, #8]
 801c6ee:	fb0a 9606 	mla	r6, sl, r6, r9
 801c6f2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801c6f6:	fb01 f608 	mul.w	r6, r1, r8
 801c6fa:	9903      	ldr	r1, [sp, #12]
 801c6fc:	538f      	strh	r7, [r1, r6]
 801c6fe:	4470      	add	r0, lr
 801c700:	4462      	add	r2, ip
 801c702:	f108 38ff 	add.w	r8, r8, #4294967295
 801c706:	e788      	b.n	801c61a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c708:	b005      	add	sp, #20
 801c70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c70e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c70e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c712:	b087      	sub	sp, #28
 801c714:	468b      	mov	fp, r1
 801c716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c71a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c71c:	9203      	str	r2, [sp, #12]
 801c71e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c722:	6841      	ldr	r1, [r0, #4]
 801c724:	9204      	str	r2, [sp, #16]
 801c726:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801c72a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801c72e:	fb01 2505 	mla	r5, r1, r5, r2
 801c732:	6802      	ldr	r2, [r0, #0]
 801c734:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801c738:	f8d9 2000 	ldr.w	r2, [r9]
 801c73c:	9201      	str	r2, [sp, #4]
 801c73e:	f1bb 0f00 	cmp.w	fp, #0
 801c742:	dc03      	bgt.n	801c74c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c744:	9a03      	ldr	r2, [sp, #12]
 801c746:	2a00      	cmp	r2, #0
 801c748:	f340 8158 	ble.w	801c9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801c74c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c74e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801c752:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c756:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c758:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801c75c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c760:	2b00      	cmp	r3, #0
 801c762:	dd0e      	ble.n	801c782 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c764:	1402      	asrs	r2, r0, #16
 801c766:	d405      	bmi.n	801c774 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c768:	42ba      	cmp	r2, r7
 801c76a:	da03      	bge.n	801c774 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c76c:	140a      	asrs	r2, r1, #16
 801c76e:	d401      	bmi.n	801c774 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c770:	42b2      	cmp	r2, r6
 801c772:	db07      	blt.n	801c784 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c774:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c776:	3b01      	subs	r3, #1
 801c778:	3502      	adds	r5, #2
 801c77a:	4410      	add	r0, r2
 801c77c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c77e:	4411      	add	r1, r2
 801c780:	e7ee      	b.n	801c760 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c782:	d017      	beq.n	801c7b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c784:	1e5a      	subs	r2, r3, #1
 801c786:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c788:	fb04 0402 	mla	r4, r4, r2, r0
 801c78c:	1424      	asrs	r4, r4, #16
 801c78e:	d409      	bmi.n	801c7a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c790:	42bc      	cmp	r4, r7
 801c792:	da07      	bge.n	801c7a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c794:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c796:	fb04 1202 	mla	r2, r4, r2, r1
 801c79a:	1412      	asrs	r2, r2, #16
 801c79c:	d402      	bmi.n	801c7a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c79e:	42b2      	cmp	r2, r6
 801c7a0:	f2c0 80bf 	blt.w	801c922 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c7a4:	2700      	movs	r7, #0
 801c7a6:	19da      	adds	r2, r3, r7
 801c7a8:	2a00      	cmp	r2, #0
 801c7aa:	dc3e      	bgt.n	801c82a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c7ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7b0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c7b4:	f1bb 0f00 	cmp.w	fp, #0
 801c7b8:	f340 8120 	ble.w	801c9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801c7bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c7c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c7c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7c6:	f1bb 0b01 	subs.w	fp, fp, #1
 801c7ca:	eeb0 6a62 	vmov.f32	s12, s5
 801c7ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c7d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c7d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c7da:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801c7de:	eeb0 6a43 	vmov.f32	s12, s6
 801c7e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c7e6:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801c7ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c7ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c7f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c7f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c7fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c7fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c802:	ee12 2a90 	vmov	r2, s5
 801c806:	eef0 2a47 	vmov.f32	s5, s14
 801c80a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c80e:	ee13 2a10 	vmov	r2, s6
 801c812:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c814:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c816:	eeb0 3a67 	vmov.f32	s6, s15
 801c81a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c81e:	9a03      	ldr	r2, [sp, #12]
 801c820:	9314      	str	r3, [sp, #80]	@ 0x50
 801c822:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c824:	bf08      	it	eq
 801c826:	4613      	moveq	r3, r2
 801c828:	e789      	b.n	801c73e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c82a:	1406      	asrs	r6, r0, #16
 801c82c:	d42d      	bmi.n	801c88a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c82e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801c832:	42b4      	cmp	r4, r6
 801c834:	dd29      	ble.n	801c88a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c836:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801c83a:	d426      	bmi.n	801c88a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c83c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c840:	4562      	cmp	r2, ip
 801c842:	dd22      	ble.n	801c88a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c844:	b224      	sxth	r4, r4
 801c846:	9a01      	ldr	r2, [sp, #4]
 801c848:	fb0c 6404 	mla	r4, ip, r4, r6
 801c84c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801c850:	0e22      	lsrs	r2, r4, #24
 801c852:	d01a      	beq.n	801c88a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c854:	9e04      	ldr	r6, [sp, #16]
 801c856:	4372      	muls	r2, r6
 801c858:	1c56      	adds	r6, r2, #1
 801c85a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c85e:	0a26      	lsrs	r6, r4, #8
 801c860:	1212      	asrs	r2, r2, #8
 801c862:	9605      	str	r6, [sp, #20]
 801c864:	2aff      	cmp	r2, #255	@ 0xff
 801c866:	d116      	bne.n	801c896 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801c868:	f06f 0201 	mvn.w	r2, #1
 801c86c:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801c870:	fb02 fc07 	mul.w	ip, r2, r7
 801c874:	0962      	lsrs	r2, r4, #5
 801c876:	f026 0607 	bic.w	r6, r6, #7
 801c87a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c87e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801c882:	4316      	orrs	r6, r2
 801c884:	4326      	orrs	r6, r4
 801c886:	f825 600c 	strh.w	r6, [r5, ip]
 801c88a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c88c:	3f01      	subs	r7, #1
 801c88e:	4410      	add	r0, r2
 801c890:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c892:	4411      	add	r1, r2
 801c894:	e787      	b.n	801c7a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c896:	f06f 0601 	mvn.w	r6, #1
 801c89a:	fa1f fa82 	uxth.w	sl, r2
 801c89e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801c8a2:	43d2      	mvns	r2, r2
 801c8a4:	437e      	muls	r6, r7
 801c8a6:	b2e4      	uxtb	r4, r4
 801c8a8:	fb1c fc0a 	smulbb	ip, ip, sl
 801c8ac:	b2d2      	uxtb	r2, r2
 801c8ae:	f835 8006 	ldrh.w	r8, [r5, r6]
 801c8b2:	fb14 f40a 	smulbb	r4, r4, sl
 801c8b6:	9602      	str	r6, [sp, #8]
 801c8b8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801c8bc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801c8c0:	fb16 f60a 	smulbb	r6, r6, sl
 801c8c4:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801c8c8:	fb0e ce02 	mla	lr, lr, r2, ip
 801c8cc:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801c8d0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c8d4:	fa1f fe8e 	uxth.w	lr, lr
 801c8d8:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801c8dc:	fa5f f888 	uxtb.w	r8, r8
 801c8e0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801c8e4:	fb08 4402 	mla	r4, r8, r2, r4
 801c8e8:	f10e 0201 	add.w	r2, lr, #1
 801c8ec:	fa1f fc8c 	uxth.w	ip, ip
 801c8f0:	b2a4      	uxth	r4, r4
 801c8f2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c8f6:	9a02      	ldr	r2, [sp, #8]
 801c8f8:	1c66      	adds	r6, r4, #1
 801c8fa:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801c8fe:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801c902:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c906:	ea46 0e0e 	orr.w	lr, r6, lr
 801c90a:	f10c 0601 	add.w	r6, ip, #1
 801c90e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801c912:	0976      	lsrs	r6, r6, #5
 801c914:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c918:	ea4e 0e06 	orr.w	lr, lr, r6
 801c91c:	f825 e002 	strh.w	lr, [r5, r2]
 801c920:	e7b3      	b.n	801c88a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c922:	f04f 0800 	mov.w	r8, #0
 801c926:	eba3 0208 	sub.w	r2, r3, r8
 801c92a:	2a00      	cmp	r2, #0
 801c92c:	f77f af3e 	ble.w	801c7ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c930:	1404      	asrs	r4, r0, #16
 801c932:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801c936:	140a      	asrs	r2, r1, #16
 801c938:	fb06 4202 	mla	r2, r6, r2, r4
 801c93c:	9c01      	ldr	r4, [sp, #4]
 801c93e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801c942:	0e22      	lsrs	r2, r4, #24
 801c944:	d015      	beq.n	801c972 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801c946:	9e04      	ldr	r6, [sp, #16]
 801c948:	4372      	muls	r2, r6
 801c94a:	1c56      	adds	r6, r2, #1
 801c94c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c950:	0a26      	lsrs	r6, r4, #8
 801c952:	1212      	asrs	r2, r2, #8
 801c954:	2aff      	cmp	r2, #255	@ 0xff
 801c956:	d113      	bne.n	801c980 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801c958:	0962      	lsrs	r2, r4, #5
 801c95a:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801c95e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c962:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801c966:	f026 0607 	bic.w	r6, r6, #7
 801c96a:	4316      	orrs	r6, r2
 801c96c:	4326      	orrs	r6, r4
 801c96e:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801c972:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c974:	f108 0801 	add.w	r8, r8, #1
 801c978:	4410      	add	r0, r2
 801c97a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c97c:	4411      	add	r1, r2
 801c97e:	e7d2      	b.n	801c926 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801c980:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801c984:	fa1f fa82 	uxth.w	sl, r2
 801c988:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801c98c:	43d2      	mvns	r2, r2
 801c98e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c992:	fb17 f70a 	smulbb	r7, r7, sl
 801c996:	b2d2      	uxtb	r2, r2
 801c998:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c99c:	b2e4      	uxtb	r4, r4
 801c99e:	b2f6      	uxtb	r6, r6
 801c9a0:	fb0c 7c02 	mla	ip, ip, r2, r7
 801c9a4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c9a8:	fb14 f40a 	smulbb	r4, r4, sl
 801c9ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c9b0:	fa1f fc8c 	uxth.w	ip, ip
 801c9b4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c9b8:	fb16 f60a 	smulbb	r6, r6, sl
 801c9bc:	fa5f fe8e 	uxtb.w	lr, lr
 801c9c0:	fb0e 4402 	mla	r4, lr, r2, r4
 801c9c4:	fb07 6702 	mla	r7, r7, r2, r6
 801c9c8:	f10c 0201 	add.w	r2, ip, #1
 801c9cc:	b2a4      	uxth	r4, r4
 801c9ce:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c9d2:	1c66      	adds	r6, r4, #1
 801c9d4:	b2bf      	uxth	r7, r7
 801c9d6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c9da:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801c9de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c9e2:	ea46 0c0c 	orr.w	ip, r6, ip
 801c9e6:	1c7e      	adds	r6, r7, #1
 801c9e8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801c9ec:	0976      	lsrs	r6, r6, #5
 801c9ee:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c9f2:	ea4c 0c06 	orr.w	ip, ip, r6
 801c9f6:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801c9fa:	e7ba      	b.n	801c972 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801c9fc:	b007      	add	sp, #28
 801c9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ca04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca08:	b085      	sub	sp, #20
 801ca0a:	468b      	mov	fp, r1
 801ca0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ca10:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ca12:	9203      	str	r2, [sp, #12]
 801ca14:	6841      	ldr	r1, [r0, #4]
 801ca16:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801ca1a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ca1e:	fb01 2404 	mla	r4, r1, r4, r2
 801ca22:	6802      	ldr	r2, [r0, #0]
 801ca24:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ca28:	f8d8 2000 	ldr.w	r2, [r8]
 801ca2c:	9201      	str	r2, [sp, #4]
 801ca2e:	f1bb 0f00 	cmp.w	fp, #0
 801ca32:	dc03      	bgt.n	801ca3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ca34:	9a03      	ldr	r2, [sp, #12]
 801ca36:	2a00      	cmp	r2, #0
 801ca38:	f340 814f 	ble.w	801ccda <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ca3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ca3e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ca42:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ca46:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ca48:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ca4c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	dd0e      	ble.n	801ca72 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ca54:	1408      	asrs	r0, r1, #16
 801ca56:	d405      	bmi.n	801ca64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ca58:	42b8      	cmp	r0, r7
 801ca5a:	da03      	bge.n	801ca64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ca5c:	1410      	asrs	r0, r2, #16
 801ca5e:	d401      	bmi.n	801ca64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ca60:	42b0      	cmp	r0, r6
 801ca62:	db07      	blt.n	801ca74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ca64:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ca66:	3b01      	subs	r3, #1
 801ca68:	3402      	adds	r4, #2
 801ca6a:	4401      	add	r1, r0
 801ca6c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ca6e:	4402      	add	r2, r0
 801ca70:	e7ee      	b.n	801ca50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ca72:	d017      	beq.n	801caa4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ca74:	1e58      	subs	r0, r3, #1
 801ca76:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ca78:	fb05 1500 	mla	r5, r5, r0, r1
 801ca7c:	142d      	asrs	r5, r5, #16
 801ca7e:	d409      	bmi.n	801ca94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ca80:	42bd      	cmp	r5, r7
 801ca82:	da07      	bge.n	801ca94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ca84:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ca86:	fb05 2000 	mla	r0, r5, r0, r2
 801ca8a:	1400      	asrs	r0, r0, #16
 801ca8c:	d402      	bmi.n	801ca94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ca8e:	42b0      	cmp	r0, r6
 801ca90:	f2c0 80ba 	blt.w	801cc08 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ca94:	2600      	movs	r6, #0
 801ca96:	1998      	adds	r0, r3, r6
 801ca98:	2800      	cmp	r0, #0
 801ca9a:	dc3e      	bgt.n	801cb1a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ca9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801caa0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801caa4:	f1bb 0f00 	cmp.w	fp, #0
 801caa8:	f340 8117 	ble.w	801ccda <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801caac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cab2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cab6:	f1bb 0b01 	subs.w	fp, fp, #1
 801caba:	eeb0 6a62 	vmov.f32	s12, s5
 801cabe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cac2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cac6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801caca:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801cace:	eeb0 6a43 	vmov.f32	s12, s6
 801cad2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cad6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801cada:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cade:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cae2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cae6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801caea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801caee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801caf2:	ee12 2a90 	vmov	r2, s5
 801caf6:	eef0 2a47 	vmov.f32	s5, s14
 801cafa:	fb92 f3f3 	sdiv	r3, r2, r3
 801cafe:	ee13 2a10 	vmov	r2, s6
 801cb02:	9311      	str	r3, [sp, #68]	@ 0x44
 801cb04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb06:	eeb0 3a67 	vmov.f32	s6, s15
 801cb0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb0e:	9a03      	ldr	r2, [sp, #12]
 801cb10:	9312      	str	r3, [sp, #72]	@ 0x48
 801cb12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb14:	bf08      	it	eq
 801cb16:	4613      	moveq	r3, r2
 801cb18:	e789      	b.n	801ca2e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801cb1a:	140f      	asrs	r7, r1, #16
 801cb1c:	d424      	bmi.n	801cb68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cb1e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801cb22:	42bd      	cmp	r5, r7
 801cb24:	dd20      	ble.n	801cb68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cb26:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801cb2a:	d41d      	bmi.n	801cb68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cb2c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801cb30:	4560      	cmp	r0, ip
 801cb32:	dd19      	ble.n	801cb68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cb34:	b22d      	sxth	r5, r5
 801cb36:	9801      	ldr	r0, [sp, #4]
 801cb38:	fb0c 7505 	mla	r5, ip, r5, r7
 801cb3c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801cb40:	0e07      	lsrs	r7, r0, #24
 801cb42:	2fff      	cmp	r7, #255	@ 0xff
 801cb44:	d116      	bne.n	801cb74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801cb46:	f06f 0501 	mvn.w	r5, #1
 801cb4a:	fb05 f706 	mul.w	r7, r5, r6
 801cb4e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801cb52:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801cb56:	0945      	lsrs	r5, r0, #5
 801cb58:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801cb5c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801cb60:	ea4c 0505 	orr.w	r5, ip, r5
 801cb64:	4305      	orrs	r5, r0
 801cb66:	53e5      	strh	r5, [r4, r7]
 801cb68:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801cb6a:	3e01      	subs	r6, #1
 801cb6c:	4401      	add	r1, r0
 801cb6e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cb70:	4402      	add	r2, r0
 801cb72:	e790      	b.n	801ca96 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cb74:	b2fd      	uxtb	r5, r7
 801cb76:	2f00      	cmp	r7, #0
 801cb78:	d0f6      	beq.n	801cb68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cb7a:	f06f 0701 	mvn.w	r7, #1
 801cb7e:	fa1f f985 	uxth.w	r9, r5
 801cb82:	43ed      	mvns	r5, r5
 801cb84:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801cb88:	4377      	muls	r7, r6
 801cb8a:	fb1a fa09 	smulbb	sl, sl, r9
 801cb8e:	b2ed      	uxtb	r5, r5
 801cb90:	f834 e007 	ldrh.w	lr, [r4, r7]
 801cb94:	9702      	str	r7, [sp, #8]
 801cb96:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801cb9a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cb9e:	fb17 f709 	smulbb	r7, r7, r9
 801cba2:	b2c0      	uxtb	r0, r0
 801cba4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801cba8:	fb10 f009 	smulbb	r0, r0, r9
 801cbac:	fb0c 7c05 	mla	ip, ip, r5, r7
 801cbb0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801cbb4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cbb8:	fa1f fc8c 	uxth.w	ip, ip
 801cbbc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801cbc0:	fa5f fe8e 	uxtb.w	lr, lr
 801cbc4:	fb07 a705 	mla	r7, r7, r5, sl
 801cbc8:	fb0e 0005 	mla	r0, lr, r5, r0
 801cbcc:	f10c 0501 	add.w	r5, ip, #1
 801cbd0:	b2bf      	uxth	r7, r7
 801cbd2:	b280      	uxth	r0, r0
 801cbd4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cbd8:	f100 0a01 	add.w	sl, r0, #1
 801cbdc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801cbe0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801cbe4:	9802      	ldr	r0, [sp, #8]
 801cbe6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cbea:	ea4a 0c0c 	orr.w	ip, sl, ip
 801cbee:	f107 0a01 	add.w	sl, r7, #1
 801cbf2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801cbf6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cbfa:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801cbfe:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cc02:	f824 c000 	strh.w	ip, [r4, r0]
 801cc06:	e7af      	b.n	801cb68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cc08:	f04f 0e00 	mov.w	lr, #0
 801cc0c:	eba3 000e 	sub.w	r0, r3, lr
 801cc10:	2800      	cmp	r0, #0
 801cc12:	f77f af43 	ble.w	801ca9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cc16:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801cc1a:	140d      	asrs	r5, r1, #16
 801cc1c:	1410      	asrs	r0, r2, #16
 801cc1e:	fb06 5000 	mla	r0, r6, r0, r5
 801cc22:	9d01      	ldr	r5, [sp, #4]
 801cc24:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801cc28:	0e2e      	lsrs	r6, r5, #24
 801cc2a:	2eff      	cmp	r6, #255	@ 0xff
 801cc2c:	d112      	bne.n	801cc54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801cc2e:	482c      	ldr	r0, [pc, #176]	@ (801cce0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801cc30:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801cc34:	0968      	lsrs	r0, r5, #5
 801cc36:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801cc3a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801cc3e:	4330      	orrs	r0, r6
 801cc40:	4328      	orrs	r0, r5
 801cc42:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801cc46:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801cc48:	f10e 0e01 	add.w	lr, lr, #1
 801cc4c:	4401      	add	r1, r0
 801cc4e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cc50:	4402      	add	r2, r0
 801cc52:	e7db      	b.n	801cc0c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cc54:	b2f0      	uxtb	r0, r6
 801cc56:	2e00      	cmp	r6, #0
 801cc58:	d0f5      	beq.n	801cc46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801cc5a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801cc5e:	fa1f f980 	uxth.w	r9, r0
 801cc62:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801cc66:	43c0      	mvns	r0, r0
 801cc68:	ea4f 272c 	mov.w	r7, ip, asr #8
 801cc6c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cc70:	fb16 f609 	smulbb	r6, r6, r9
 801cc74:	b2c0      	uxtb	r0, r0
 801cc76:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801cc7a:	b2ed      	uxtb	r5, r5
 801cc7c:	fb1a fa09 	smulbb	sl, sl, r9
 801cc80:	fb07 6700 	mla	r7, r7, r0, r6
 801cc84:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801cc88:	fb15 f509 	smulbb	r5, r5, r9
 801cc8c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801cc90:	b2bf      	uxth	r7, r7
 801cc92:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801cc96:	fa5f fc8c 	uxtb.w	ip, ip
 801cc9a:	fb06 a600 	mla	r6, r6, r0, sl
 801cc9e:	fb0c 5500 	mla	r5, ip, r0, r5
 801cca2:	1c78      	adds	r0, r7, #1
 801cca4:	b2b6      	uxth	r6, r6
 801cca6:	b2ad      	uxth	r5, r5
 801cca8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ccac:	f105 0a01 	add.w	sl, r5, #1
 801ccb0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ccb4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ccb8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ccbc:	ea4a 0707 	orr.w	r7, sl, r7
 801ccc0:	f106 0a01 	add.w	sl, r6, #1
 801ccc4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ccc8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cccc:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ccd0:	ea47 070a 	orr.w	r7, r7, sl
 801ccd4:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801ccd8:	e7b5      	b.n	801cc46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ccda:	b005      	add	sp, #20
 801ccdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cce0:	fffff800 	.word	0xfffff800

0801cce4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cce8:	b087      	sub	sp, #28
 801ccea:	468b      	mov	fp, r1
 801ccec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ccf0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ccf2:	9203      	str	r2, [sp, #12]
 801ccf4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ccf8:	6841      	ldr	r1, [r0, #4]
 801ccfa:	9204      	str	r2, [sp, #16]
 801ccfc:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801cd00:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801cd04:	fb01 2404 	mla	r4, r1, r4, r2
 801cd08:	6802      	ldr	r2, [r0, #0]
 801cd0a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cd0e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801cd12:	3201      	adds	r2, #1
 801cd14:	f022 0201 	bic.w	r2, r2, #1
 801cd18:	9200      	str	r2, [sp, #0]
 801cd1a:	f8d9 2000 	ldr.w	r2, [r9]
 801cd1e:	9201      	str	r2, [sp, #4]
 801cd20:	f1bb 0f00 	cmp.w	fp, #0
 801cd24:	dc03      	bgt.n	801cd2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801cd26:	9a03      	ldr	r2, [sp, #12]
 801cd28:	2a00      	cmp	r2, #0
 801cd2a:	f340 816a 	ble.w	801d002 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801cd2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cd30:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801cd34:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801cd38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cd3a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801cd3e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	dd0e      	ble.n	801cd64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cd46:	1402      	asrs	r2, r0, #16
 801cd48:	d405      	bmi.n	801cd56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cd4a:	42ba      	cmp	r2, r7
 801cd4c:	da03      	bge.n	801cd56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cd4e:	140a      	asrs	r2, r1, #16
 801cd50:	d401      	bmi.n	801cd56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cd52:	42b2      	cmp	r2, r6
 801cd54:	db07      	blt.n	801cd66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cd56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cd58:	3b01      	subs	r3, #1
 801cd5a:	3402      	adds	r4, #2
 801cd5c:	4410      	add	r0, r2
 801cd5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cd60:	4411      	add	r1, r2
 801cd62:	e7ee      	b.n	801cd42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801cd64:	d017      	beq.n	801cd96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801cd66:	1e5a      	subs	r2, r3, #1
 801cd68:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801cd6a:	fb05 0502 	mla	r5, r5, r2, r0
 801cd6e:	142d      	asrs	r5, r5, #16
 801cd70:	d409      	bmi.n	801cd86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cd72:	42bd      	cmp	r5, r7
 801cd74:	da07      	bge.n	801cd86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cd76:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801cd78:	fb05 1202 	mla	r2, r5, r2, r1
 801cd7c:	1412      	asrs	r2, r2, #16
 801cd7e:	d402      	bmi.n	801cd86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cd80:	42b2      	cmp	r2, r6
 801cd82:	f2c0 80c8 	blt.w	801cf16 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801cd86:	2700      	movs	r7, #0
 801cd88:	19da      	adds	r2, r3, r7
 801cd8a:	2a00      	cmp	r2, #0
 801cd8c:	dc3e      	bgt.n	801ce0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801cd8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd92:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cd96:	f1bb 0f00 	cmp.w	fp, #0
 801cd9a:	f340 8132 	ble.w	801d002 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801cd9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cda2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cda4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cda8:	f1bb 0b01 	subs.w	fp, fp, #1
 801cdac:	eeb0 6a62 	vmov.f32	s12, s5
 801cdb0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cdb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cdb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdbc:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801cdc0:	eeb0 6a43 	vmov.f32	s12, s6
 801cdc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdc8:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801cdcc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdd8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cddc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cde0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cde4:	ee12 2a90 	vmov	r2, s5
 801cde8:	eef0 2a47 	vmov.f32	s5, s14
 801cdec:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdf0:	ee13 2a10 	vmov	r2, s6
 801cdf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cdf6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cdf8:	eeb0 3a67 	vmov.f32	s6, s15
 801cdfc:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce00:	9a03      	ldr	r2, [sp, #12]
 801ce02:	9314      	str	r3, [sp, #80]	@ 0x50
 801ce04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ce06:	bf08      	it	eq
 801ce08:	4613      	moveq	r3, r2
 801ce0a:	e789      	b.n	801cd20 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ce0c:	1405      	asrs	r5, r0, #16
 801ce0e:	d436      	bmi.n	801ce7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ce10:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ce14:	42aa      	cmp	r2, r5
 801ce16:	dd32      	ble.n	801ce7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ce18:	140e      	asrs	r6, r1, #16
 801ce1a:	d430      	bmi.n	801ce7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ce1c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ce20:	42b2      	cmp	r2, r6
 801ce22:	dd2c      	ble.n	801ce7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ce24:	9a00      	ldr	r2, [sp, #0]
 801ce26:	fb06 5502 	mla	r5, r6, r2, r5
 801ce2a:	9e01      	ldr	r6, [sp, #4]
 801ce2c:	086a      	lsrs	r2, r5, #1
 801ce2e:	5cb2      	ldrb	r2, [r6, r2]
 801ce30:	07ee      	lsls	r6, r5, #31
 801ce32:	bf54      	ite	pl
 801ce34:	f002 020f 	andpl.w	r2, r2, #15
 801ce38:	1112      	asrmi	r2, r2, #4
 801ce3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ce3e:	b2d2      	uxtb	r2, r2
 801ce40:	b1ea      	cbz	r2, 801ce7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ce42:	9d04      	ldr	r5, [sp, #16]
 801ce44:	436a      	muls	r2, r5
 801ce46:	1c55      	adds	r5, r2, #1
 801ce48:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ce4c:	4d6e      	ldr	r5, [pc, #440]	@ (801d008 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ce4e:	1212      	asrs	r2, r2, #8
 801ce50:	682d      	ldr	r5, [r5, #0]
 801ce52:	2aff      	cmp	r2, #255	@ 0xff
 801ce54:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ce58:	9605      	str	r6, [sp, #20]
 801ce5a:	d116      	bne.n	801ce8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ce5c:	f06f 0201 	mvn.w	r2, #1
 801ce60:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801ce64:	fb02 fc07 	mul.w	ip, r2, r7
 801ce68:	096a      	lsrs	r2, r5, #5
 801ce6a:	f026 0607 	bic.w	r6, r6, #7
 801ce6e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ce72:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ce76:	4316      	orrs	r6, r2
 801ce78:	432e      	orrs	r6, r5
 801ce7a:	f824 600c 	strh.w	r6, [r4, ip]
 801ce7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ce80:	3f01      	subs	r7, #1
 801ce82:	4410      	add	r0, r2
 801ce84:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ce86:	4411      	add	r1, r2
 801ce88:	e77e      	b.n	801cd88 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ce8a:	f06f 0601 	mvn.w	r6, #1
 801ce8e:	fa1f fa82 	uxth.w	sl, r2
 801ce92:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801ce96:	43d2      	mvns	r2, r2
 801ce98:	437e      	muls	r6, r7
 801ce9a:	b2ed      	uxtb	r5, r5
 801ce9c:	fb1c fc0a 	smulbb	ip, ip, sl
 801cea0:	b2d2      	uxtb	r2, r2
 801cea2:	f834 8006 	ldrh.w	r8, [r4, r6]
 801cea6:	fb15 f50a 	smulbb	r5, r5, sl
 801ceaa:	9602      	str	r6, [sp, #8]
 801ceac:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801ceb0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801ceb4:	fb16 f60a 	smulbb	r6, r6, sl
 801ceb8:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801cebc:	fb0e ce02 	mla	lr, lr, r2, ip
 801cec0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801cec4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cec8:	fa1f fe8e 	uxth.w	lr, lr
 801cecc:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801ced0:	fa5f f888 	uxtb.w	r8, r8
 801ced4:	fb0c 6c02 	mla	ip, ip, r2, r6
 801ced8:	fb08 5502 	mla	r5, r8, r2, r5
 801cedc:	f10e 0201 	add.w	r2, lr, #1
 801cee0:	fa1f fc8c 	uxth.w	ip, ip
 801cee4:	b2ad      	uxth	r5, r5
 801cee6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ceea:	9a02      	ldr	r2, [sp, #8]
 801ceec:	1c6e      	adds	r6, r5, #1
 801ceee:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801cef2:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801cef6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801cefa:	ea46 0e0e 	orr.w	lr, r6, lr
 801cefe:	f10c 0601 	add.w	r6, ip, #1
 801cf02:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801cf06:	0976      	lsrs	r6, r6, #5
 801cf08:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801cf0c:	ea4e 0e06 	orr.w	lr, lr, r6
 801cf10:	f824 e002 	strh.w	lr, [r4, r2]
 801cf14:	e7b3      	b.n	801ce7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801cf16:	f04f 0800 	mov.w	r8, #0
 801cf1a:	eba3 0208 	sub.w	r2, r3, r8
 801cf1e:	2a00      	cmp	r2, #0
 801cf20:	f77f af35 	ble.w	801cd8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801cf24:	1402      	asrs	r2, r0, #16
 801cf26:	9e00      	ldr	r6, [sp, #0]
 801cf28:	140d      	asrs	r5, r1, #16
 801cf2a:	fb06 2505 	mla	r5, r6, r5, r2
 801cf2e:	9e01      	ldr	r6, [sp, #4]
 801cf30:	086a      	lsrs	r2, r5, #1
 801cf32:	07ed      	lsls	r5, r5, #31
 801cf34:	5cb2      	ldrb	r2, [r6, r2]
 801cf36:	bf54      	ite	pl
 801cf38:	f002 020f 	andpl.w	r2, r2, #15
 801cf3c:	1112      	asrmi	r2, r2, #4
 801cf3e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cf42:	b2d2      	uxtb	r2, r2
 801cf44:	b1c2      	cbz	r2, 801cf78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801cf46:	9d04      	ldr	r5, [sp, #16]
 801cf48:	436a      	muls	r2, r5
 801cf4a:	1c55      	adds	r5, r2, #1
 801cf4c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801cf50:	4d2d      	ldr	r5, [pc, #180]	@ (801d008 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801cf52:	1212      	asrs	r2, r2, #8
 801cf54:	682e      	ldr	r6, [r5, #0]
 801cf56:	2aff      	cmp	r2, #255	@ 0xff
 801cf58:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801cf5c:	d113      	bne.n	801cf86 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801cf5e:	0972      	lsrs	r2, r6, #5
 801cf60:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801cf64:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801cf68:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801cf6c:	f025 0507 	bic.w	r5, r5, #7
 801cf70:	4315      	orrs	r5, r2
 801cf72:	4335      	orrs	r5, r6
 801cf74:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801cf78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cf7a:	f108 0801 	add.w	r8, r8, #1
 801cf7e:	4410      	add	r0, r2
 801cf80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cf82:	4411      	add	r1, r2
 801cf84:	e7c9      	b.n	801cf1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801cf86:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801cf8a:	fa1f fa82 	uxth.w	sl, r2
 801cf8e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801cf92:	43d2      	mvns	r2, r2
 801cf94:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801cf98:	fb17 f70a 	smulbb	r7, r7, sl
 801cf9c:	b2d2      	uxtb	r2, r2
 801cf9e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801cfa2:	b2f6      	uxtb	r6, r6
 801cfa4:	b2ed      	uxtb	r5, r5
 801cfa6:	fb0c 7c02 	mla	ip, ip, r2, r7
 801cfaa:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801cfae:	fb16 f60a 	smulbb	r6, r6, sl
 801cfb2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801cfb6:	fa1f fc8c 	uxth.w	ip, ip
 801cfba:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801cfbe:	fb15 f50a 	smulbb	r5, r5, sl
 801cfc2:	fa5f fe8e 	uxtb.w	lr, lr
 801cfc6:	fb0e 6602 	mla	r6, lr, r2, r6
 801cfca:	fb07 5702 	mla	r7, r7, r2, r5
 801cfce:	f10c 0201 	add.w	r2, ip, #1
 801cfd2:	b2b6      	uxth	r6, r6
 801cfd4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801cfd8:	1c75      	adds	r5, r6, #1
 801cfda:	b2bf      	uxth	r7, r7
 801cfdc:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801cfe0:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801cfe4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801cfe8:	ea45 0c0c 	orr.w	ip, r5, ip
 801cfec:	1c7d      	adds	r5, r7, #1
 801cfee:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801cff2:	096d      	lsrs	r5, r5, #5
 801cff4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801cff8:	ea4c 0c05 	orr.w	ip, ip, r5
 801cffc:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801d000:	e7ba      	b.n	801cf78 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d002:	b007      	add	sp, #28
 801d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d008:	24006608 	.word	0x24006608

0801d00c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d010:	b087      	sub	sp, #28
 801d012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d016:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 801d320 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801d01a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d01c:	9101      	str	r1, [sp, #4]
 801d01e:	9205      	str	r2, [sp, #20]
 801d020:	6841      	ldr	r1, [r0, #4]
 801d022:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801d026:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801d02a:	fb01 2404 	mla	r4, r1, r4, r2
 801d02e:	6802      	ldr	r2, [r0, #0]
 801d030:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d034:	f8db 2008 	ldr.w	r2, [fp, #8]
 801d038:	3201      	adds	r2, #1
 801d03a:	f022 0201 	bic.w	r2, r2, #1
 801d03e:	9202      	str	r2, [sp, #8]
 801d040:	f8db 2000 	ldr.w	r2, [fp]
 801d044:	9203      	str	r2, [sp, #12]
 801d046:	9a01      	ldr	r2, [sp, #4]
 801d048:	2a00      	cmp	r2, #0
 801d04a:	dc03      	bgt.n	801d054 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d04c:	9a05      	ldr	r2, [sp, #20]
 801d04e:	2a00      	cmp	r2, #0
 801d050:	f340 8162 	ble.w	801d318 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801d054:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d056:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801d05a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d05e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d060:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801d064:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801d068:	2b00      	cmp	r3, #0
 801d06a:	dd0e      	ble.n	801d08a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d06c:	1402      	asrs	r2, r0, #16
 801d06e:	d405      	bmi.n	801d07c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d070:	42ba      	cmp	r2, r7
 801d072:	da03      	bge.n	801d07c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d074:	140a      	asrs	r2, r1, #16
 801d076:	d401      	bmi.n	801d07c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d078:	42b2      	cmp	r2, r6
 801d07a:	db07      	blt.n	801d08c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d07c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d07e:	3b01      	subs	r3, #1
 801d080:	3402      	adds	r4, #2
 801d082:	4410      	add	r0, r2
 801d084:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d086:	4411      	add	r1, r2
 801d088:	e7ee      	b.n	801d068 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d08a:	d017      	beq.n	801d0bc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801d08c:	1e5a      	subs	r2, r3, #1
 801d08e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d090:	fb05 0502 	mla	r5, r5, r2, r0
 801d094:	142d      	asrs	r5, r5, #16
 801d096:	d409      	bmi.n	801d0ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d098:	42bd      	cmp	r5, r7
 801d09a:	da07      	bge.n	801d0ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d09c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d09e:	fb05 1202 	mla	r2, r5, r2, r1
 801d0a2:	1412      	asrs	r2, r2, #16
 801d0a4:	d402      	bmi.n	801d0ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d0a6:	42b2      	cmp	r2, r6
 801d0a8:	f2c0 80c3 	blt.w	801d232 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801d0ac:	2500      	movs	r5, #0
 801d0ae:	195a      	adds	r2, r3, r5
 801d0b0:	2a00      	cmp	r2, #0
 801d0b2:	dc3f      	bgt.n	801d134 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d0b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d0bc:	9b01      	ldr	r3, [sp, #4]
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	f340 812a 	ble.w	801d318 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801d0c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d0ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0ce:	eeb0 6a62 	vmov.f32	s12, s5
 801d0d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d0d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0de:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801d0e2:	eeb0 6a43 	vmov.f32	s12, s6
 801d0e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d0ea:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801d0ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d0f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d0fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d0fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d102:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d106:	ee12 2a90 	vmov	r2, s5
 801d10a:	eef0 2a47 	vmov.f32	s5, s14
 801d10e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d112:	ee13 2a10 	vmov	r2, s6
 801d116:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d118:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d11a:	eeb0 3a67 	vmov.f32	s6, s15
 801d11e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d122:	9314      	str	r3, [sp, #80]	@ 0x50
 801d124:	9b01      	ldr	r3, [sp, #4]
 801d126:	9a05      	ldr	r2, [sp, #20]
 801d128:	3b01      	subs	r3, #1
 801d12a:	9301      	str	r3, [sp, #4]
 801d12c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d12e:	bf08      	it	eq
 801d130:	4613      	moveq	r3, r2
 801d132:	e788      	b.n	801d046 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d134:	1406      	asrs	r6, r0, #16
 801d136:	d42c      	bmi.n	801d192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d138:	f8db 2008 	ldr.w	r2, [fp, #8]
 801d13c:	42b2      	cmp	r2, r6
 801d13e:	dd28      	ble.n	801d192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d140:	140f      	asrs	r7, r1, #16
 801d142:	d426      	bmi.n	801d192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d144:	f8db 200c 	ldr.w	r2, [fp, #12]
 801d148:	42ba      	cmp	r2, r7
 801d14a:	dd22      	ble.n	801d192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d14c:	9a02      	ldr	r2, [sp, #8]
 801d14e:	fb07 6602 	mla	r6, r7, r2, r6
 801d152:	9f03      	ldr	r7, [sp, #12]
 801d154:	0872      	lsrs	r2, r6, #1
 801d156:	07f6      	lsls	r6, r6, #31
 801d158:	5cba      	ldrb	r2, [r7, r2]
 801d15a:	bf54      	ite	pl
 801d15c:	f002 020f 	andpl.w	r2, r2, #15
 801d160:	1112      	asrmi	r2, r2, #4
 801d162:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d166:	b2d2      	uxtb	r2, r2
 801d168:	2aff      	cmp	r2, #255	@ 0xff
 801d16a:	d118      	bne.n	801d19e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801d16c:	f06f 0601 	mvn.w	r6, #1
 801d170:	f8d8 2000 	ldr.w	r2, [r8]
 801d174:	fb06 f705 	mul.w	r7, r6, r5
 801d178:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801d17c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801d180:	0956      	lsrs	r6, r2, #5
 801d182:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d186:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d18a:	ea4c 0606 	orr.w	r6, ip, r6
 801d18e:	4316      	orrs	r6, r2
 801d190:	53e6      	strh	r6, [r4, r7]
 801d192:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d194:	3d01      	subs	r5, #1
 801d196:	4410      	add	r0, r2
 801d198:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d19a:	4411      	add	r1, r2
 801d19c:	e787      	b.n	801d0ae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d19e:	2a00      	cmp	r2, #0
 801d1a0:	d0f7      	beq.n	801d192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d1a2:	f06f 0601 	mvn.w	r6, #1
 801d1a6:	f8d8 c000 	ldr.w	ip, [r8]
 801d1aa:	fa1f f982 	uxth.w	r9, r2
 801d1ae:	43d2      	mvns	r2, r2
 801d1b0:	436e      	muls	r6, r5
 801d1b2:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801d1b6:	b2d2      	uxtb	r2, r2
 801d1b8:	f834 e006 	ldrh.w	lr, [r4, r6]
 801d1bc:	fb1a fa09 	smulbb	sl, sl, r9
 801d1c0:	9604      	str	r6, [sp, #16]
 801d1c2:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801d1c6:	ea4f 272e 	mov.w	r7, lr, asr #8
 801d1ca:	fb16 f609 	smulbb	r6, r6, r9
 801d1ce:	fa5f fc8c 	uxtb.w	ip, ip
 801d1d2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d1d6:	fb1c fc09 	smulbb	ip, ip, r9
 801d1da:	fb07 6702 	mla	r7, r7, r2, r6
 801d1de:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d1e2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d1e6:	b2bf      	uxth	r7, r7
 801d1e8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d1ec:	fa5f fe8e 	uxtb.w	lr, lr
 801d1f0:	fb06 a602 	mla	r6, r6, r2, sl
 801d1f4:	fb0e cc02 	mla	ip, lr, r2, ip
 801d1f8:	1c7a      	adds	r2, r7, #1
 801d1fa:	b2b6      	uxth	r6, r6
 801d1fc:	fa1f fc8c 	uxth.w	ip, ip
 801d200:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d204:	9a04      	ldr	r2, [sp, #16]
 801d206:	f10c 0a01 	add.w	sl, ip, #1
 801d20a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d20e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801d212:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d216:	ea4a 0707 	orr.w	r7, sl, r7
 801d21a:	f106 0a01 	add.w	sl, r6, #1
 801d21e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d222:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d226:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d22a:	ea47 070a 	orr.w	r7, r7, sl
 801d22e:	52a7      	strh	r7, [r4, r2]
 801d230:	e7af      	b.n	801d192 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d232:	f04f 0e00 	mov.w	lr, #0
 801d236:	eba3 020e 	sub.w	r2, r3, lr
 801d23a:	2a00      	cmp	r2, #0
 801d23c:	f77f af3a 	ble.w	801d0b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801d240:	1402      	asrs	r2, r0, #16
 801d242:	9e02      	ldr	r6, [sp, #8]
 801d244:	140d      	asrs	r5, r1, #16
 801d246:	fb06 2505 	mla	r5, r6, r5, r2
 801d24a:	9e03      	ldr	r6, [sp, #12]
 801d24c:	086a      	lsrs	r2, r5, #1
 801d24e:	07ed      	lsls	r5, r5, #31
 801d250:	5cb2      	ldrb	r2, [r6, r2]
 801d252:	bf54      	ite	pl
 801d254:	f002 020f 	andpl.w	r2, r2, #15
 801d258:	1112      	asrmi	r2, r2, #4
 801d25a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d25e:	b2d2      	uxtb	r2, r2
 801d260:	2aff      	cmp	r2, #255	@ 0xff
 801d262:	d115      	bne.n	801d290 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d264:	f8d8 5000 	ldr.w	r5, [r8]
 801d268:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801d26c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801d270:	096a      	lsrs	r2, r5, #5
 801d272:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d276:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d27a:	4332      	orrs	r2, r6
 801d27c:	432a      	orrs	r2, r5
 801d27e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801d282:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d284:	f10e 0e01 	add.w	lr, lr, #1
 801d288:	4410      	add	r0, r2
 801d28a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d28c:	4411      	add	r1, r2
 801d28e:	e7d2      	b.n	801d236 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d290:	2a00      	cmp	r2, #0
 801d292:	d0f6      	beq.n	801d282 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d294:	f8d8 7000 	ldr.w	r7, [r8]
 801d298:	fa1f f982 	uxth.w	r9, r2
 801d29c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d2a0:	43d2      	mvns	r2, r2
 801d2a2:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801d2a6:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d2aa:	ea4f 262c 	mov.w	r6, ip, asr #8
 801d2ae:	fb15 f509 	smulbb	r5, r5, r9
 801d2b2:	b2d2      	uxtb	r2, r2
 801d2b4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d2b8:	b2ff      	uxtb	r7, r7
 801d2ba:	fb1a fa09 	smulbb	sl, sl, r9
 801d2be:	fb06 5602 	mla	r6, r6, r2, r5
 801d2c2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d2c6:	fb17 f709 	smulbb	r7, r7, r9
 801d2ca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d2ce:	b2b6      	uxth	r6, r6
 801d2d0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801d2d4:	fa5f fc8c 	uxtb.w	ip, ip
 801d2d8:	fb05 a502 	mla	r5, r5, r2, sl
 801d2dc:	fb0c 7702 	mla	r7, ip, r2, r7
 801d2e0:	1c72      	adds	r2, r6, #1
 801d2e2:	b2ad      	uxth	r5, r5
 801d2e4:	b2bf      	uxth	r7, r7
 801d2e6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801d2ea:	f107 0a01 	add.w	sl, r7, #1
 801d2ee:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801d2f2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d2f6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d2fa:	ea4a 0606 	orr.w	r6, sl, r6
 801d2fe:	f105 0a01 	add.w	sl, r5, #1
 801d302:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d306:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d30a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d30e:	ea46 060a 	orr.w	r6, r6, sl
 801d312:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801d316:	e7b4      	b.n	801d282 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d318:	b007      	add	sp, #28
 801d31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d31e:	bf00      	nop
 801d320:	24006608 	.word	0x24006608

0801d324 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 801d324:	4770      	bx	lr

0801d326 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801d326:	4770      	bx	lr

0801d328 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801d328:	4770      	bx	lr

0801d32a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801d32a:	4770      	bx	lr

0801d32c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d32c:	4770      	bx	lr

0801d32e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d32e:	4770      	bx	lr

0801d330 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d330:	4770      	bx	lr

0801d332 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d332:	4770      	bx	lr

0801d334 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d334:	4770      	bx	lr

0801d336 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d336:	4770      	bx	lr

0801d338 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d338:	4770      	bx	lr

0801d33a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d33a:	4770      	bx	lr

0801d33c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d33c:	4770      	bx	lr

0801d33e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801d33e:	4770      	bx	lr

0801d340 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d340:	4770      	bx	lr

0801d342 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d342:	4770      	bx	lr

0801d344 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d344:	4770      	bx	lr

0801d346 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801d346:	4770      	bx	lr

0801d348 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d348:	4770      	bx	lr

0801d34a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d34a:	4770      	bx	lr

0801d34c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d34c:	4770      	bx	lr

0801d34e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d34e:	4770      	bx	lr

0801d350 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d350:	4770      	bx	lr

0801d352 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d352:	4770      	bx	lr

0801d354 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d354:	4770      	bx	lr

0801d356 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d356:	4770      	bx	lr

0801d358 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d358:	4770      	bx	lr

0801d35a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d35a:	4770      	bx	lr

0801d35c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d35c:	4770      	bx	lr

0801d35e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801d35e:	4770      	bx	lr

0801d360 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d360:	4770      	bx	lr

0801d362 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801d362:	4770      	bx	lr

0801d364 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d368:	b088      	sub	sp, #32
 801d36a:	4606      	mov	r6, r0
 801d36c:	4688      	mov	r8, r1
 801d36e:	4691      	mov	r9, r2
 801d370:	ac08      	add	r4, sp, #32
 801d372:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801d376:	4620      	mov	r0, r4
 801d378:	f7fd fc32 	bl	801abe0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d37c:	6833      	ldr	r3, [r6, #0]
 801d37e:	4605      	mov	r5, r0
 801d380:	4620      	mov	r0, r4
 801d382:	699f      	ldr	r7, [r3, #24]
 801d384:	f7fd fb3a 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d388:	4682      	mov	sl, r0
 801d38a:	4620      	mov	r0, r4
 801d38c:	f7fd fb6a 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d390:	9500      	str	r5, [sp, #0]
 801d392:	464b      	mov	r3, r9
 801d394:	4642      	mov	r2, r8
 801d396:	4631      	mov	r1, r6
 801d398:	e9cd a001 	strd	sl, r0, [sp, #4]
 801d39c:	a806      	add	r0, sp, #24
 801d39e:	47b8      	blx	r7
 801d3a0:	4628      	mov	r0, r5
 801d3a2:	b008      	add	sp, #32
 801d3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801d3a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801d3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	9300      	str	r3, [sp, #0]
 801d3b0:	4b3d      	ldr	r3, [pc, #244]	@ (801d4a8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801d3b2:	781b      	ldrb	r3, [r3, #0]
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d137      	bne.n	801d428 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801d3b8:	4a3c      	ldr	r2, [pc, #240]	@ (801d4ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d3ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 801d3be:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d132      	bne.n	801d42c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801d3c6:	4b3a      	ldr	r3, [pc, #232]	@ (801d4b0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801d3c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3cc:	ac02      	add	r4, sp, #8
 801d3ce:	6808      	ldr	r0, [r1, #0]
 801d3d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d3d4:	ab02      	add	r3, sp, #8
 801d3d6:	6849      	ldr	r1, [r1, #4]
 801d3d8:	4d36      	ldr	r5, [pc, #216]	@ (801d4b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801d3da:	c303      	stmia	r3!, {r0, r1}
 801d3dc:	4669      	mov	r1, sp
 801d3de:	4620      	mov	r0, r4
 801d3e0:	f7f9 fdb2 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3e4:	4668      	mov	r0, sp
 801d3e6:	f7f9 fd6b 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d3ee:	f8bd 2000 	ldrh.w	r2, [sp]
 801d3f2:	462f      	mov	r7, r5
 801d3f4:	6828      	ldr	r0, [r5, #0]
 801d3f6:	4413      	add	r3, r2
 801d3f8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d3fc:	f8ad 3008 	strh.w	r3, [sp, #8]
 801d400:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d404:	4413      	add	r3, r2
 801d406:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d40a:	6803      	ldr	r3, [r0, #0]
 801d40c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d40e:	4798      	blx	r3
 801d410:	f010 0f01 	tst.w	r0, #1
 801d414:	d00c      	beq.n	801d430 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801d416:	6828      	ldr	r0, [r5, #0]
 801d418:	6803      	ldr	r3, [r0, #0]
 801d41a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801d41e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d420:	4798      	blx	r3
 801d422:	b004      	add	sp, #16
 801d424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d428:	4a21      	ldr	r2, [pc, #132]	@ (801d4b0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801d42a:	e7c6      	b.n	801d3ba <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801d42c:	4b1f      	ldr	r3, [pc, #124]	@ (801d4ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d42e:	e7cb      	b.n	801d3c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801d430:	6838      	ldr	r0, [r7, #0]
 801d432:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801d436:	6803      	ldr	r3, [r0, #0]
 801d438:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801d43c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801d440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d442:	4798      	blx	r3
 801d444:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801d448:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d44c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801d450:	fb16 3602 	smlabb	r6, r6, r2, r3
 801d454:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d458:	6838      	ldr	r0, [r7, #0]
 801d45a:	6803      	ldr	r3, [r0, #0]
 801d45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d45e:	4798      	blx	r3
 801d460:	4a12      	ldr	r2, [pc, #72]	@ (801d4ac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d462:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801d466:	8813      	ldrh	r3, [r2, #0]
 801d468:	4691      	mov	r9, r2
 801d46a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d46e:	435d      	muls	r5, r3
 801d470:	fb03 1404 	mla	r4, r3, r4, r1
 801d474:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d478:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d47c:	6838      	ldr	r0, [r7, #0]
 801d47e:	42ac      	cmp	r4, r5
 801d480:	6803      	ldr	r3, [r0, #0]
 801d482:	d20e      	bcs.n	801d4a2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801d484:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 801d488:	4632      	mov	r2, r6
 801d48a:	4643      	mov	r3, r8
 801d48c:	4621      	mov	r1, r4
 801d48e:	47d0      	blx	sl
 801d490:	f8b9 3000 	ldrh.w	r3, [r9]
 801d494:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d498:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801d49c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d4a0:	e7ec      	b.n	801d47c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801d4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d4a4:	4798      	blx	r3
 801d4a6:	e7bc      	b.n	801d422 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801d4a8:	240065f8 	.word	0x240065f8
 801d4ac:	240065fa 	.word	0x240065fa
 801d4b0:	240065fc 	.word	0x240065fc
 801d4b4:	24006600 	.word	0x24006600

0801d4b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4bc:	b08b      	sub	sp, #44	@ 0x2c
 801d4be:	460f      	mov	r7, r1
 801d4c0:	4616      	mov	r6, r2
 801d4c2:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801d4c6:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801d4ca:	f1bb 0f00 	cmp.w	fp, #0
 801d4ce:	d04a      	beq.n	801d566 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801d4d0:	6810      	ldr	r0, [r2, #0]
 801d4d2:	ad06      	add	r5, sp, #24
 801d4d4:	6851      	ldr	r1, [r2, #4]
 801d4d6:	c503      	stmia	r5!, {r0, r1}
 801d4d8:	6818      	ldr	r0, [r3, #0]
 801d4da:	ad08      	add	r5, sp, #32
 801d4dc:	6859      	ldr	r1, [r3, #4]
 801d4de:	c503      	stmia	r5!, {r0, r1}
 801d4e0:	a806      	add	r0, sp, #24
 801d4e2:	f7f9 fced 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d4e6:	4631      	mov	r1, r6
 801d4e8:	a808      	add	r0, sp, #32
 801d4ea:	f7f9 fd2d 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d4ee:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d4f2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801d4f6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801d4fa:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801d4fe:	fb16 2103 	smlabb	r1, r6, r3, r2
 801d502:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801d506:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801d50a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d50e:	4f5f      	ldr	r7, [pc, #380]	@ (801d68c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801d510:	440a      	add	r2, r1
 801d512:	6838      	ldr	r0, [r7, #0]
 801d514:	46b9      	mov	r9, r7
 801d516:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d51a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d51e:	4413      	add	r3, r2
 801d520:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801d524:	6803      	ldr	r3, [r0, #0]
 801d526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d528:	4798      	blx	r3
 801d52a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d52e:	d11d      	bne.n	801d56c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801d530:	b9fc      	cbnz	r4, 801d572 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801d532:	f010 0f01 	tst.w	r0, #1
 801d536:	d01c      	beq.n	801d572 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801d538:	f8d9 0000 	ldr.w	r0, [r9]
 801d53c:	2700      	movs	r7, #0
 801d53e:	b2ad      	uxth	r5, r5
 801d540:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801d544:	6801      	ldr	r1, [r0, #0]
 801d546:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d54a:	f8cd b00c 	str.w	fp, [sp, #12]
 801d54e:	9501      	str	r5, [sp, #4]
 801d550:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801d554:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801d558:	9402      	str	r4, [sp, #8]
 801d55a:	fa1f f488 	uxth.w	r4, r8
 801d55e:	9400      	str	r4, [sp, #0]
 801d560:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 801d562:	4631      	mov	r1, r6
 801d564:	47a0      	blx	r4
 801d566:	b00b      	add	sp, #44	@ 0x2c
 801d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d56c:	f010 0f04 	tst.w	r0, #4
 801d570:	e7e1      	b.n	801d536 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801d572:	f8d9 0000 	ldr.w	r0, [r9]
 801d576:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801d57a:	6803      	ldr	r3, [r0, #0]
 801d57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d57e:	4798      	blx	r3
 801d580:	4b43      	ldr	r3, [pc, #268]	@ (801d690 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801d582:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801d586:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d58a:	881a      	ldrh	r2, [r3, #0]
 801d58c:	469a      	mov	sl, r3
 801d58e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d592:	fb05 f502 	mul.w	r5, r5, r2
 801d596:	fb02 1404 	mla	r4, r2, r4, r1
 801d59a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d59e:	d059      	beq.n	801d654 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801d5a0:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801d5a4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d5a8:	fa1f f28b 	uxth.w	r2, fp
 801d5ac:	469e      	mov	lr, r3
 801d5ae:	fa1f f989 	uxth.w	r9, r9
 801d5b2:	42ac      	cmp	r4, r5
 801d5b4:	d264      	bcs.n	801d680 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801d5b6:	eb04 0a07 	add.w	sl, r4, r7
 801d5ba:	4554      	cmp	r4, sl
 801d5bc:	d23d      	bcs.n	801d63a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801d5be:	8821      	ldrh	r1, [r4, #0]
 801d5c0:	f836 3b02 	ldrh.w	r3, [r6], #2
 801d5c4:	1208      	asrs	r0, r1, #8
 801d5c6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d5ca:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801d5ce:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801d5d2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d5d6:	00c9      	lsls	r1, r1, #3
 801d5d8:	fb10 f009 	smulbb	r0, r0, r9
 801d5dc:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801d5e0:	b2c9      	uxtb	r1, r1
 801d5e2:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d5e6:	10d8      	asrs	r0, r3, #3
 801d5e8:	fb1b fb09 	smulbb	fp, fp, r9
 801d5ec:	00db      	lsls	r3, r3, #3
 801d5ee:	fa1f fc8c 	uxth.w	ip, ip
 801d5f2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801d5f6:	fb11 f109 	smulbb	r1, r1, r9
 801d5fa:	b2db      	uxtb	r3, r3
 801d5fc:	fb00 b002 	mla	r0, r0, r2, fp
 801d600:	f10c 0b01 	add.w	fp, ip, #1
 801d604:	fb03 1302 	mla	r3, r3, r2, r1
 801d608:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d60c:	b29b      	uxth	r3, r3
 801d60e:	b280      	uxth	r0, r0
 801d610:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801d614:	f103 0c01 	add.w	ip, r3, #1
 801d618:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d61c:	1c43      	adds	r3, r0, #1
 801d61e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d622:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d626:	0940      	lsrs	r0, r0, #5
 801d628:	ea4c 0c0b 	orr.w	ip, ip, fp
 801d62c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d630:	ea4c 0c00 	orr.w	ip, ip, r0
 801d634:	f824 cb02 	strh.w	ip, [r4], #2
 801d638:	e7bf      	b.n	801d5ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801d63a:	f8be 3000 	ldrh.w	r3, [lr]
 801d63e:	eba3 0308 	sub.w	r3, r3, r8
 801d642:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d646:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d64a:	eba3 0308 	sub.w	r3, r3, r8
 801d64e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d652:	e7ae      	b.n	801d5b2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801d654:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d658:	f8d9 0000 	ldr.w	r0, [r9]
 801d65c:	42ac      	cmp	r4, r5
 801d65e:	6803      	ldr	r3, [r0, #0]
 801d660:	d20e      	bcs.n	801d680 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801d662:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 801d666:	4632      	mov	r2, r6
 801d668:	463b      	mov	r3, r7
 801d66a:	4621      	mov	r1, r4
 801d66c:	47c0      	blx	r8
 801d66e:	f8ba 3000 	ldrh.w	r3, [sl]
 801d672:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d676:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d67a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d67e:	e7eb      	b.n	801d658 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801d680:	4b02      	ldr	r3, [pc, #8]	@ (801d68c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801d682:	6818      	ldr	r0, [r3, #0]
 801d684:	6803      	ldr	r3, [r0, #0]
 801d686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d688:	4798      	blx	r3
 801d68a:	e76c      	b.n	801d566 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801d68c:	24006600 	.word	0x24006600
 801d690:	240065fa 	.word	0x240065fa

0801d694 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801d694:	b510      	push	{r4, lr}
 801d696:	4604      	mov	r4, r0
 801d698:	2104      	movs	r1, #4
 801d69a:	f00b fcee 	bl	802907a <_ZdlPvj>
 801d69e:	4620      	mov	r0, r4
 801d6a0:	bd10      	pop	{r4, pc}

0801d6a2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801d6a2:	b510      	push	{r4, lr}
 801d6a4:	4604      	mov	r4, r0
 801d6a6:	2104      	movs	r1, #4
 801d6a8:	f00b fce7 	bl	802907a <_ZdlPvj>
 801d6ac:	4620      	mov	r0, r4
 801d6ae:	bd10      	pop	{r4, pc}

0801d6b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801d6b0:	b510      	push	{r4, lr}
 801d6b2:	4604      	mov	r4, r0
 801d6b4:	f640 0144 	movw	r1, #2116	@ 0x844
 801d6b8:	f00b fcdf 	bl	802907a <_ZdlPvj>
 801d6bc:	4620      	mov	r0, r4
 801d6be:	bd10      	pop	{r4, pc}

0801d6c0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 801d6c0:	b510      	push	{r4, lr}
 801d6c2:	4604      	mov	r4, r0
 801d6c4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801d6c8:	f00b fcd7 	bl	802907a <_ZdlPvj>
 801d6cc:	4620      	mov	r0, r4
 801d6ce:	bd10      	pop	{r4, pc}

0801d6d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d6d0:	b510      	push	{r4, lr}
 801d6d2:	4604      	mov	r4, r0
 801d6d4:	2104      	movs	r1, #4
 801d6d6:	f00b fcd0 	bl	802907a <_ZdlPvj>
 801d6da:	4620      	mov	r0, r4
 801d6dc:	bd10      	pop	{r4, pc}

0801d6de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801d6de:	b510      	push	{r4, lr}
 801d6e0:	4604      	mov	r4, r0
 801d6e2:	2104      	movs	r1, #4
 801d6e4:	f00b fcc9 	bl	802907a <_ZdlPvj>
 801d6e8:	4620      	mov	r0, r4
 801d6ea:	bd10      	pop	{r4, pc}

0801d6ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d6ec:	b510      	push	{r4, lr}
 801d6ee:	4604      	mov	r4, r0
 801d6f0:	2104      	movs	r1, #4
 801d6f2:	f00b fcc2 	bl	802907a <_ZdlPvj>
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	bd10      	pop	{r4, pc}

0801d6fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801d6fa:	b510      	push	{r4, lr}
 801d6fc:	4604      	mov	r4, r0
 801d6fe:	2104      	movs	r1, #4
 801d700:	f00b fcbb 	bl	802907a <_ZdlPvj>
 801d704:	4620      	mov	r0, r4
 801d706:	bd10      	pop	{r4, pc}

0801d708 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d708:	b510      	push	{r4, lr}
 801d70a:	4604      	mov	r4, r0
 801d70c:	2104      	movs	r1, #4
 801d70e:	f00b fcb4 	bl	802907a <_ZdlPvj>
 801d712:	4620      	mov	r0, r4
 801d714:	bd10      	pop	{r4, pc}

0801d716 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d716:	b510      	push	{r4, lr}
 801d718:	4604      	mov	r4, r0
 801d71a:	2104      	movs	r1, #4
 801d71c:	f00b fcad 	bl	802907a <_ZdlPvj>
 801d720:	4620      	mov	r0, r4
 801d722:	bd10      	pop	{r4, pc}

0801d724 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d724:	b510      	push	{r4, lr}
 801d726:	4604      	mov	r4, r0
 801d728:	2104      	movs	r1, #4
 801d72a:	f00b fca6 	bl	802907a <_ZdlPvj>
 801d72e:	4620      	mov	r0, r4
 801d730:	bd10      	pop	{r4, pc}

0801d732 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d732:	b510      	push	{r4, lr}
 801d734:	4604      	mov	r4, r0
 801d736:	2104      	movs	r1, #4
 801d738:	f00b fc9f 	bl	802907a <_ZdlPvj>
 801d73c:	4620      	mov	r0, r4
 801d73e:	bd10      	pop	{r4, pc}

0801d740 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d740:	b510      	push	{r4, lr}
 801d742:	4604      	mov	r4, r0
 801d744:	2104      	movs	r1, #4
 801d746:	f00b fc98 	bl	802907a <_ZdlPvj>
 801d74a:	4620      	mov	r0, r4
 801d74c:	bd10      	pop	{r4, pc}

0801d74e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d74e:	b510      	push	{r4, lr}
 801d750:	4604      	mov	r4, r0
 801d752:	2104      	movs	r1, #4
 801d754:	f00b fc91 	bl	802907a <_ZdlPvj>
 801d758:	4620      	mov	r0, r4
 801d75a:	bd10      	pop	{r4, pc}

0801d75c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d75c:	b510      	push	{r4, lr}
 801d75e:	4604      	mov	r4, r0
 801d760:	2104      	movs	r1, #4
 801d762:	f00b fc8a 	bl	802907a <_ZdlPvj>
 801d766:	4620      	mov	r0, r4
 801d768:	bd10      	pop	{r4, pc}

0801d76a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d76a:	b510      	push	{r4, lr}
 801d76c:	4604      	mov	r4, r0
 801d76e:	2104      	movs	r1, #4
 801d770:	f00b fc83 	bl	802907a <_ZdlPvj>
 801d774:	4620      	mov	r0, r4
 801d776:	bd10      	pop	{r4, pc}

0801d778 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d778:	b510      	push	{r4, lr}
 801d77a:	4604      	mov	r4, r0
 801d77c:	2104      	movs	r1, #4
 801d77e:	f00b fc7c 	bl	802907a <_ZdlPvj>
 801d782:	4620      	mov	r0, r4
 801d784:	bd10      	pop	{r4, pc}

0801d786 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801d786:	b510      	push	{r4, lr}
 801d788:	4604      	mov	r4, r0
 801d78a:	2104      	movs	r1, #4
 801d78c:	f00b fc75 	bl	802907a <_ZdlPvj>
 801d790:	4620      	mov	r0, r4
 801d792:	bd10      	pop	{r4, pc}

0801d794 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d794:	b510      	push	{r4, lr}
 801d796:	4604      	mov	r4, r0
 801d798:	2104      	movs	r1, #4
 801d79a:	f00b fc6e 	bl	802907a <_ZdlPvj>
 801d79e:	4620      	mov	r0, r4
 801d7a0:	bd10      	pop	{r4, pc}

0801d7a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d7a2:	b510      	push	{r4, lr}
 801d7a4:	4604      	mov	r4, r0
 801d7a6:	2104      	movs	r1, #4
 801d7a8:	f00b fc67 	bl	802907a <_ZdlPvj>
 801d7ac:	4620      	mov	r0, r4
 801d7ae:	bd10      	pop	{r4, pc}

0801d7b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d7b0:	b510      	push	{r4, lr}
 801d7b2:	4604      	mov	r4, r0
 801d7b4:	2104      	movs	r1, #4
 801d7b6:	f00b fc60 	bl	802907a <_ZdlPvj>
 801d7ba:	4620      	mov	r0, r4
 801d7bc:	bd10      	pop	{r4, pc}

0801d7be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801d7be:	b510      	push	{r4, lr}
 801d7c0:	4604      	mov	r4, r0
 801d7c2:	2104      	movs	r1, #4
 801d7c4:	f00b fc59 	bl	802907a <_ZdlPvj>
 801d7c8:	4620      	mov	r0, r4
 801d7ca:	bd10      	pop	{r4, pc}

0801d7cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d7cc:	b510      	push	{r4, lr}
 801d7ce:	4604      	mov	r4, r0
 801d7d0:	2104      	movs	r1, #4
 801d7d2:	f00b fc52 	bl	802907a <_ZdlPvj>
 801d7d6:	4620      	mov	r0, r4
 801d7d8:	bd10      	pop	{r4, pc}

0801d7da <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d7da:	b510      	push	{r4, lr}
 801d7dc:	4604      	mov	r4, r0
 801d7de:	2104      	movs	r1, #4
 801d7e0:	f00b fc4b 	bl	802907a <_ZdlPvj>
 801d7e4:	4620      	mov	r0, r4
 801d7e6:	bd10      	pop	{r4, pc}

0801d7e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d7e8:	b510      	push	{r4, lr}
 801d7ea:	4604      	mov	r4, r0
 801d7ec:	2104      	movs	r1, #4
 801d7ee:	f00b fc44 	bl	802907a <_ZdlPvj>
 801d7f2:	4620      	mov	r0, r4
 801d7f4:	bd10      	pop	{r4, pc}

0801d7f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d7f6:	b510      	push	{r4, lr}
 801d7f8:	4604      	mov	r4, r0
 801d7fa:	2104      	movs	r1, #4
 801d7fc:	f00b fc3d 	bl	802907a <_ZdlPvj>
 801d800:	4620      	mov	r0, r4
 801d802:	bd10      	pop	{r4, pc}

0801d804 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d804:	b510      	push	{r4, lr}
 801d806:	4604      	mov	r4, r0
 801d808:	2104      	movs	r1, #4
 801d80a:	f00b fc36 	bl	802907a <_ZdlPvj>
 801d80e:	4620      	mov	r0, r4
 801d810:	bd10      	pop	{r4, pc}

0801d812 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d812:	b510      	push	{r4, lr}
 801d814:	4604      	mov	r4, r0
 801d816:	2104      	movs	r1, #4
 801d818:	f00b fc2f 	bl	802907a <_ZdlPvj>
 801d81c:	4620      	mov	r0, r4
 801d81e:	bd10      	pop	{r4, pc}

0801d820 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d820:	b510      	push	{r4, lr}
 801d822:	4604      	mov	r4, r0
 801d824:	2104      	movs	r1, #4
 801d826:	f00b fc28 	bl	802907a <_ZdlPvj>
 801d82a:	4620      	mov	r0, r4
 801d82c:	bd10      	pop	{r4, pc}

0801d82e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d82e:	b510      	push	{r4, lr}
 801d830:	4604      	mov	r4, r0
 801d832:	2104      	movs	r1, #4
 801d834:	f00b fc21 	bl	802907a <_ZdlPvj>
 801d838:	4620      	mov	r0, r4
 801d83a:	bd10      	pop	{r4, pc}

0801d83c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d83c:	b510      	push	{r4, lr}
 801d83e:	4604      	mov	r4, r0
 801d840:	2104      	movs	r1, #4
 801d842:	f00b fc1a 	bl	802907a <_ZdlPvj>
 801d846:	4620      	mov	r0, r4
 801d848:	bd10      	pop	{r4, pc}

0801d84a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d84a:	b510      	push	{r4, lr}
 801d84c:	4604      	mov	r4, r0
 801d84e:	2104      	movs	r1, #4
 801d850:	f00b fc13 	bl	802907a <_ZdlPvj>
 801d854:	4620      	mov	r0, r4
 801d856:	bd10      	pop	{r4, pc}

0801d858 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801d858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d85c:	b08f      	sub	sp, #60	@ 0x3c
 801d85e:	4616      	mov	r6, r2
 801d860:	4682      	mov	sl, r0
 801d862:	460d      	mov	r5, r1
 801d864:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801d868:	9205      	str	r2, [sp, #20]
 801d86a:	2a00      	cmp	r2, #0
 801d86c:	f000 82b7 	beq.w	801ddde <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 801d870:	6830      	ldr	r0, [r6, #0]
 801d872:	ac0a      	add	r4, sp, #40	@ 0x28
 801d874:	6871      	ldr	r1, [r6, #4]
 801d876:	c403      	stmia	r4!, {r0, r1}
 801d878:	6818      	ldr	r0, [r3, #0]
 801d87a:	ac0c      	add	r4, sp, #48	@ 0x30
 801d87c:	6859      	ldr	r1, [r3, #4]
 801d87e:	c403      	stmia	r4!, {r0, r1}
 801d880:	a80a      	add	r0, sp, #40	@ 0x28
 801d882:	f7f9 fb1d 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d886:	4631      	mov	r1, r6
 801d888:	a80c      	add	r0, sp, #48	@ 0x30
 801d88a:	f7f9 fb5d 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d88e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801d892:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801d896:	bfdb      	ittet	le
 801d898:	b293      	uxthle	r3, r2
 801d89a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d89e:	2301      	movgt	r3, #1
 801d8a0:	fb91 f3f3 	sdivle	r3, r1, r3
 801d8a4:	9300      	str	r3, [sp, #0]
 801d8a6:	f105 0308 	add.w	r3, r5, #8
 801d8aa:	9900      	ldr	r1, [sp, #0]
 801d8ac:	9306      	str	r3, [sp, #24]
 801d8ae:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801d8b2:	440b      	add	r3, r1
 801d8b4:	3b01      	subs	r3, #1
 801d8b6:	fb93 f3f1 	sdiv	r3, r3, r1
 801d8ba:	3b01      	subs	r3, #1
 801d8bc:	9906      	ldr	r1, [sp, #24]
 801d8be:	b29b      	uxth	r3, r3
 801d8c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d8c4:	9900      	ldr	r1, [sp, #0]
 801d8c6:	9307      	str	r3, [sp, #28]
 801d8c8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801d8cc:	fb93 f0f1 	sdiv	r0, r3, r1
 801d8d0:	b284      	uxth	r4, r0
 801d8d2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801d8d6:	9402      	str	r4, [sp, #8]
 801d8d8:	9d02      	ldr	r5, [sp, #8]
 801d8da:	9c00      	ldr	r4, [sp, #0]
 801d8dc:	fb05 3414 	mls	r4, r5, r4, r3
 801d8e0:	fb14 f402 	smulbb	r4, r4, r2
 801d8e4:	440c      	add	r4, r1
 801d8e6:	b2a4      	uxth	r4, r4
 801d8e8:	2d00      	cmp	r5, #0
 801d8ea:	d06c      	beq.n	801d9c6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 801d8ec:	1e6a      	subs	r2, r5, #1
 801d8ee:	9806      	ldr	r0, [sp, #24]
 801d8f0:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 801d8f4:	9a07      	ldr	r2, [sp, #28]
 801d8f6:	ba36      	rev	r6, r6
 801d8f8:	4416      	add	r6, r2
 801d8fa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801d8fe:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801d902:	4411      	add	r1, r2
 801d904:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801d908:	f8df 932c 	ldr.w	r9, [pc, #812]	@ 801dc38 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 801d90c:	4413      	add	r3, r2
 801d90e:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801d912:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d916:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801d91a:	9301      	str	r3, [sp, #4]
 801d91c:	4bc4      	ldr	r3, [pc, #784]	@ (801dc30 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 801d91e:	6818      	ldr	r0, [r3, #0]
 801d920:	6803      	ldr	r3, [r0, #0]
 801d922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d924:	4798      	blx	r3
 801d926:	4bc3      	ldr	r3, [pc, #780]	@ (801dc34 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 801d928:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801d92c:	881b      	ldrh	r3, [r3, #0]
 801d92e:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 801d932:	fb03 2808 	mla	r8, r3, r8, r2
 801d936:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d93a:	436b      	muls	r3, r5
 801d93c:	2500      	movs	r5, #0
 801d93e:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 801d942:	4629      	mov	r1, r5
 801d944:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801d948:	9309      	str	r3, [sp, #36]	@ 0x24
 801d94a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801d94e:	fb94 f3f3 	sdiv	r3, r4, r3
 801d952:	9304      	str	r3, [sp, #16]
 801d954:	f10a 0304 	add.w	r3, sl, #4
 801d958:	4618      	mov	r0, r3
 801d95a:	9308      	str	r3, [sp, #32]
 801d95c:	f00b ff71 	bl	8029842 <memset>
 801d960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d962:	4543      	cmp	r3, r8
 801d964:	f240 8236 	bls.w	801ddd4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 801d968:	2203      	movs	r2, #3
 801d96a:	2107      	movs	r1, #7
 801d96c:	200b      	movs	r0, #11
 801d96e:	2c00      	cmp	r4, #0
 801d970:	f000 8131 	beq.w	801dbd6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 801d974:	7833      	ldrb	r3, [r6, #0]
 801d976:	b2db      	uxtb	r3, r3
 801d978:	2bfe      	cmp	r3, #254	@ 0xfe
 801d97a:	d126      	bne.n	801d9ca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 801d97c:	f896 e001 	ldrb.w	lr, [r6, #1]
 801d980:	3c01      	subs	r4, #1
 801d982:	f896 c002 	ldrb.w	ip, [r6, #2]
 801d986:	1d37      	adds	r7, r6, #4
 801d988:	fa5f fe8e 	uxtb.w	lr, lr
 801d98c:	f896 b003 	ldrb.w	fp, [r6, #3]
 801d990:	fa5f fc8c 	uxtb.w	ip, ip
 801d994:	f36e 0507 	bfi	r5, lr, #0, #8
 801d998:	fa5f fb8b 	uxtb.w	fp, fp
 801d99c:	b2a4      	uxth	r4, r4
 801d99e:	f36c 250f 	bfi	r5, ip, #8, #8
 801d9a2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801d9a6:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 801d9aa:	f36b 4517 	bfi	r5, fp, #16, #8
 801d9ae:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801d9b2:	0e2b      	lsrs	r3, r5, #24
 801d9b4:	fb10 c303 	smlabb	r3, r0, r3, ip
 801d9b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d9bc:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801d9c0:	605d      	str	r5, [r3, #4]
 801d9c2:	463e      	mov	r6, r7
 801d9c4:	e7d3      	b.n	801d96e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 801d9c6:	9e07      	ldr	r6, [sp, #28]
 801d9c8:	e797      	b.n	801d8fa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 801d9ca:	2bff      	cmp	r3, #255	@ 0xff
 801d9cc:	d127      	bne.n	801da1e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 801d9ce:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d9d2:	3c01      	subs	r4, #1
 801d9d4:	78b3      	ldrb	r3, [r6, #2]
 801d9d6:	1d77      	adds	r7, r6, #5
 801d9d8:	fa5f fc8c 	uxtb.w	ip, ip
 801d9dc:	f896 e003 	ldrb.w	lr, [r6, #3]
 801d9e0:	b2db      	uxtb	r3, r3
 801d9e2:	f896 b004 	ldrb.w	fp, [r6, #4]
 801d9e6:	f36c 0507 	bfi	r5, ip, #0, #8
 801d9ea:	fa5f fe8e 	uxtb.w	lr, lr
 801d9ee:	fa5f fb8b 	uxtb.w	fp, fp
 801d9f2:	f363 250f 	bfi	r5, r3, #8, #8
 801d9f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d9fa:	b2a4      	uxth	r4, r4
 801d9fc:	fb12 330e 	smlabb	r3, r2, lr, r3
 801da00:	f36e 4517 	bfi	r5, lr, #16, #8
 801da04:	fb11 330c 	smlabb	r3, r1, ip, r3
 801da08:	f36b 651f 	bfi	r5, fp, #24, #8
 801da0c:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 801da10:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 801da14:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 801da18:	f8cb 5004 	str.w	r5, [fp, #4]
 801da1c:	e7d1      	b.n	801d9c2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801da1e:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 801da22:	f106 0701 	add.w	r7, r6, #1
 801da26:	d107      	bne.n	801da38 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 801da28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801da2c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801da30:	685d      	ldr	r5, [r3, #4]
 801da32:	3c01      	subs	r4, #1
 801da34:	b2a4      	uxth	r4, r4
 801da36:	e7c4      	b.n	801d9c2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801da38:	f1bc 0f01 	cmp.w	ip, #1
 801da3c:	d12c      	bne.n	801da98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 801da3e:	f003 0e03 	and.w	lr, r3, #3
 801da42:	f003 0c0c 	and.w	ip, r3, #12
 801da46:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801da4a:	f1ae 0e02 	sub.w	lr, lr, #2
 801da4e:	f1ac 0c08 	sub.w	ip, ip, #8
 801da52:	3b02      	subs	r3, #2
 801da54:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 801da58:	fa5f fe8e 	uxtb.w	lr, lr
 801da5c:	f36e 0507 	bfi	r5, lr, #0, #8
 801da60:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801da64:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801da68:	f36c 250f 	bfi	r5, ip, #8, #8
 801da6c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801da70:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801da74:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801da78:	b2db      	uxtb	r3, r3
 801da7a:	fb12 cc03 	smlabb	ip, r2, r3, ip
 801da7e:	f363 4517 	bfi	r5, r3, #16, #8
 801da82:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801da86:	0e2e      	lsrs	r6, r5, #24
 801da88:	fb10 c606 	smlabb	r6, r0, r6, ip
 801da8c:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 801da90:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 801da94:	6075      	str	r5, [r6, #4]
 801da96:	e7cc      	b.n	801da32 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 801da98:	f1bc 0f02 	cmp.w	ip, #2
 801da9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801daa0:	d12a      	bne.n	801daf8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 801daa2:	1cb7      	adds	r7, r6, #2
 801daa4:	7876      	ldrb	r6, [r6, #1]
 801daa6:	3b20      	subs	r3, #32
 801daa8:	b2f6      	uxtb	r6, r6
 801daaa:	f006 0c0f 	and.w	ip, r6, #15
 801daae:	1136      	asrs	r6, r6, #4
 801dab0:	f1ac 0c08 	sub.w	ip, ip, #8
 801dab4:	3e08      	subs	r6, #8
 801dab6:	449c      	add	ip, r3
 801dab8:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801dabc:	fa5f fc8c 	uxtb.w	ip, ip
 801dac0:	f36c 0507 	bfi	r5, ip, #0, #8
 801dac4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801dac8:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 801dacc:	4433      	add	r3, r6
 801dace:	fa5f fe8e 	uxtb.w	lr, lr
 801dad2:	f36e 250f 	bfi	r5, lr, #8, #8
 801dad6:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 801dada:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801dade:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801dae2:	b2db      	uxtb	r3, r3
 801dae4:	fb12 ee03 	smlabb	lr, r2, r3, lr
 801dae8:	f363 4517 	bfi	r5, r3, #16, #8
 801daec:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 801daf0:	0e2e      	lsrs	r6, r5, #24
 801daf2:	fb10 e606 	smlabb	r6, r0, r6, lr
 801daf6:	e7c9      	b.n	801da8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 801daf8:	1c5e      	adds	r6, r3, #1
 801dafa:	42a6      	cmp	r6, r4
 801dafc:	dd4e      	ble.n	801db9c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 801dafe:	1b36      	subs	r6, r6, r4
 801db00:	2e00      	cmp	r6, #0
 801db02:	dc4e      	bgt.n	801dba2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 801db04:	f8dd b004 	ldr.w	fp, [sp, #4]
 801db08:	2400      	movs	r4, #0
 801db0a:	f1bb 0f00 	cmp.w	fp, #0
 801db0e:	f340 8122 	ble.w	801dd56 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 801db12:	1c7b      	adds	r3, r7, #1
 801db14:	9303      	str	r3, [sp, #12]
 801db16:	783b      	ldrb	r3, [r7, #0]
 801db18:	b2db      	uxtb	r3, r3
 801db1a:	2bfe      	cmp	r3, #254	@ 0xfe
 801db1c:	d160      	bne.n	801dbe0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 801db1e:	7879      	ldrb	r1, [r7, #1]
 801db20:	1d3b      	adds	r3, r7, #4
 801db22:	78ba      	ldrb	r2, [r7, #2]
 801db24:	b2c9      	uxtb	r1, r1
 801db26:	78f8      	ldrb	r0, [r7, #3]
 801db28:	b2d2      	uxtb	r2, r2
 801db2a:	9303      	str	r3, [sp, #12]
 801db2c:	f361 0507 	bfi	r5, r1, #0, #8
 801db30:	b2c0      	uxtb	r0, r0
 801db32:	2303      	movs	r3, #3
 801db34:	f362 250f 	bfi	r5, r2, #8, #8
 801db38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801db3c:	fb13 2200 	smlabb	r2, r3, r0, r2
 801db40:	f360 4517 	bfi	r5, r0, #16, #8
 801db44:	2307      	movs	r3, #7
 801db46:	0e2e      	lsrs	r6, r5, #24
 801db48:	fb13 2101 	smlabb	r1, r3, r1, r2
 801db4c:	230b      	movs	r3, #11
 801db4e:	fb13 1306 	smlabb	r3, r3, r6, r1
 801db52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801db56:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801db5a:	605d      	str	r5, [r3, #4]
 801db5c:	2601      	movs	r6, #1
 801db5e:	4637      	mov	r7, r6
 801db60:	0e2b      	lsrs	r3, r5, #24
 801db62:	ebab 0b07 	sub.w	fp, fp, r7
 801db66:	eba6 0607 	sub.w	r6, r6, r7
 801db6a:	f040 80d3 	bne.w	801dd14 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 801db6e:	b18c      	cbz	r4, 801db94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 801db70:	4648      	mov	r0, r9
 801db72:	00a1      	lsls	r1, r4, #2
 801db74:	f7f3 f93a 	bl	8010dec <_ZN8touchgfx5paint9flushLineEPmi>
 801db78:	9b05      	ldr	r3, [sp, #20]
 801db7a:	4622      	mov	r2, r4
 801db7c:	4649      	mov	r1, r9
 801db7e:	4640      	mov	r0, r8
 801db80:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801db84:	f7f3 f9bc 	bl	8010f00 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801db88:	4b2b      	ldr	r3, [pc, #172]	@ (801dc38 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 801db8a:	4a2c      	ldr	r2, [pc, #176]	@ (801dc3c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 801db8c:	4599      	cmp	r9, r3
 801db8e:	bf08      	it	eq
 801db90:	4613      	moveq	r3, r2
 801db92:	4699      	mov	r9, r3
 801db94:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 801db98:	2400      	movs	r4, #0
 801db9a:	e0da      	b.n	801dd52 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 801db9c:	1ba6      	subs	r6, r4, r6
 801db9e:	b2b4      	uxth	r4, r6
 801dba0:	e70f      	b.n	801d9c2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801dba2:	9b01      	ldr	r3, [sp, #4]
 801dba4:	9a01      	ldr	r2, [sp, #4]
 801dba6:	42b3      	cmp	r3, r6
 801dba8:	bfa8      	it	ge
 801dbaa:	4633      	movge	r3, r6
 801dbac:	0e2c      	lsrs	r4, r5, #24
 801dbae:	eba2 0b03 	sub.w	fp, r2, r3
 801dbb2:	eba6 0603 	sub.w	r6, r6, r3
 801dbb6:	d00b      	beq.n	801dbd0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 801dbb8:	f1a9 0104 	sub.w	r1, r9, #4
 801dbbc:	461a      	mov	r2, r3
 801dbbe:	2a00      	cmp	r2, #0
 801dbc0:	dc02      	bgt.n	801dbc8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 801dbc2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801dbc6:	e7a0      	b.n	801db0a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801dbc8:	f841 5f04 	str.w	r5, [r1, #4]!
 801dbcc:	3a01      	subs	r2, #1
 801dbce:	e7f6      	b.n	801dbbe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 801dbd0:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801dbd4:	e799      	b.n	801db0a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801dbd6:	4637      	mov	r7, r6
 801dbd8:	f8dd b004 	ldr.w	fp, [sp, #4]
 801dbdc:	4626      	mov	r6, r4
 801dbde:	e794      	b.n	801db0a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801dbe0:	2bff      	cmp	r3, #255	@ 0xff
 801dbe2:	d11d      	bne.n	801dc20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 801dbe4:	7878      	ldrb	r0, [r7, #1]
 801dbe6:	1d7b      	adds	r3, r7, #5
 801dbe8:	78ba      	ldrb	r2, [r7, #2]
 801dbea:	b2c0      	uxtb	r0, r0
 801dbec:	78fe      	ldrb	r6, [r7, #3]
 801dbee:	b2d2      	uxtb	r2, r2
 801dbf0:	9303      	str	r3, [sp, #12]
 801dbf2:	f360 0507 	bfi	r5, r0, #0, #8
 801dbf6:	793b      	ldrb	r3, [r7, #4]
 801dbf8:	b2f6      	uxtb	r6, r6
 801dbfa:	b2d9      	uxtb	r1, r3
 801dbfc:	f362 250f 	bfi	r5, r2, #8, #8
 801dc00:	2303      	movs	r3, #3
 801dc02:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801dc06:	f366 4517 	bfi	r5, r6, #16, #8
 801dc0a:	fb13 2206 	smlabb	r2, r3, r6, r2
 801dc0e:	2307      	movs	r3, #7
 801dc10:	f361 651f 	bfi	r5, r1, #24, #8
 801dc14:	fb13 2000 	smlabb	r0, r3, r0, r2
 801dc18:	230b      	movs	r3, #11
 801dc1a:	fb13 0301 	smlabb	r3, r3, r1, r0
 801dc1e:	e798      	b.n	801db52 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 801dc20:	119e      	asrs	r6, r3, #6
 801dc22:	d10d      	bne.n	801dc40 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801dc24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dc28:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801dc2c:	685d      	ldr	r5, [r3, #4]
 801dc2e:	e795      	b.n	801db5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801dc30:	24006600 	.word	0x24006600
 801dc34:	240065fa 	.word	0x240065fa
 801dc38:	24000100 	.word	0x24000100
 801dc3c:	24000200 	.word	0x24000200
 801dc40:	2e01      	cmp	r6, #1
 801dc42:	ea4f 6115 	mov.w	r1, r5, lsr #24
 801dc46:	d12b      	bne.n	801dca0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 801dc48:	f003 0003 	and.w	r0, r3, #3
 801dc4c:	f003 020c 	and.w	r2, r3, #12
 801dc50:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801dc54:	3802      	subs	r0, #2
 801dc56:	3a08      	subs	r2, #8
 801dc58:	1e9f      	subs	r7, r3, #2
 801dc5a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 801dc5e:	b2c0      	uxtb	r0, r0
 801dc60:	f360 0507 	bfi	r5, r0, #0, #8
 801dc64:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801dc68:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801dc6c:	f362 250f 	bfi	r5, r2, #8, #8
 801dc70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801dc74:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801dc78:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801dc7c:	2703      	movs	r7, #3
 801dc7e:	b2db      	uxtb	r3, r3
 801dc80:	fb17 2203 	smlabb	r2, r7, r3, r2
 801dc84:	2707      	movs	r7, #7
 801dc86:	f363 4517 	bfi	r5, r3, #16, #8
 801dc8a:	230b      	movs	r3, #11
 801dc8c:	fb17 2000 	smlabb	r0, r7, r0, r2
 801dc90:	fb13 0101 	smlabb	r1, r3, r1, r0
 801dc94:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801dc98:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801dc9c:	604d      	str	r5, [r1, #4]
 801dc9e:	e75e      	b.n	801db5e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801dca0:	2e02      	cmp	r6, #2
 801dca2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dca6:	d12f      	bne.n	801dd08 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 801dca8:	7878      	ldrb	r0, [r7, #1]
 801dcaa:	1cba      	adds	r2, r7, #2
 801dcac:	3b20      	subs	r3, #32
 801dcae:	b2c0      	uxtb	r0, r0
 801dcb0:	9203      	str	r2, [sp, #12]
 801dcb2:	f000 020f 	and.w	r2, r0, #15
 801dcb6:	1100      	asrs	r0, r0, #4
 801dcb8:	3a08      	subs	r2, #8
 801dcba:	3808      	subs	r0, #8
 801dcbc:	441a      	add	r2, r3
 801dcbe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801dcc2:	b2d2      	uxtb	r2, r2
 801dcc4:	f362 0507 	bfi	r5, r2, #0, #8
 801dcc8:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801dccc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801dcd0:	4403      	add	r3, r0
 801dcd2:	b2f6      	uxtb	r6, r6
 801dcd4:	f366 250f 	bfi	r5, r6, #8, #8
 801dcd8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801dcdc:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801dce0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801dce4:	2003      	movs	r0, #3
 801dce6:	b2db      	uxtb	r3, r3
 801dce8:	fb10 6603 	smlabb	r6, r0, r3, r6
 801dcec:	2007      	movs	r0, #7
 801dcee:	f363 4517 	bfi	r5, r3, #16, #8
 801dcf2:	230b      	movs	r3, #11
 801dcf4:	fb10 6202 	smlabb	r2, r0, r2, r6
 801dcf8:	fb13 2101 	smlabb	r1, r3, r1, r2
 801dcfc:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801dd00:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801dd04:	604d      	str	r5, [r1, #4]
 801dd06:	e729      	b.n	801db5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801dd08:	1c5e      	adds	r6, r3, #1
 801dd0a:	465f      	mov	r7, fp
 801dd0c:	45b3      	cmp	fp, r6
 801dd0e:	bfa8      	it	ge
 801dd10:	4637      	movge	r7, r6
 801dd12:	e725      	b.n	801db60 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 801dd14:	193b      	adds	r3, r7, r4
 801dd16:	2b40      	cmp	r3, #64	@ 0x40
 801dd18:	dd13      	ble.n	801dd42 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 801dd1a:	4648      	mov	r0, r9
 801dd1c:	00a1      	lsls	r1, r4, #2
 801dd1e:	f7f3 f865 	bl	8010dec <_ZN8touchgfx5paint9flushLineEPmi>
 801dd22:	4649      	mov	r1, r9
 801dd24:	9b05      	ldr	r3, [sp, #20]
 801dd26:	4622      	mov	r2, r4
 801dd28:	4640      	mov	r0, r8
 801dd2a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801dd2e:	f7f3 f8e7 	bl	8010f00 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801dd32:	4b2c      	ldr	r3, [pc, #176]	@ (801dde4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 801dd34:	2400      	movs	r4, #0
 801dd36:	4599      	cmp	r9, r3
 801dd38:	bf0c      	ite	eq
 801dd3a:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 801ddf0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 801dd3e:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 801dde4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 801dd42:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 801dd46:	463b      	mov	r3, r7
 801dd48:	3b01      	subs	r3, #1
 801dd4a:	f842 5b04 	str.w	r5, [r2], #4
 801dd4e:	d1fb      	bne.n	801dd48 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 801dd50:	443c      	add	r4, r7
 801dd52:	9f03      	ldr	r7, [sp, #12]
 801dd54:	e6d9      	b.n	801db0a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801dd56:	b15c      	cbz	r4, 801dd70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 801dd58:	00a1      	lsls	r1, r4, #2
 801dd5a:	4648      	mov	r0, r9
 801dd5c:	f7f3 f846 	bl	8010dec <_ZN8touchgfx5paint9flushLineEPmi>
 801dd60:	4640      	mov	r0, r8
 801dd62:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801dd66:	9b05      	ldr	r3, [sp, #20]
 801dd68:	4622      	mov	r2, r4
 801dd6a:	4649      	mov	r1, r9
 801dd6c:	f7f3 f8c8 	bl	8010f00 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801dd70:	4b1d      	ldr	r3, [pc, #116]	@ (801dde8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 801dd72:	9a01      	ldr	r2, [sp, #4]
 801dd74:	881b      	ldrh	r3, [r3, #0]
 801dd76:	1a9b      	subs	r3, r3, r2
 801dd78:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801dd7c:	9b04      	ldr	r3, [sp, #16]
 801dd7e:	3301      	adds	r3, #1
 801dd80:	9304      	str	r3, [sp, #16]
 801dd82:	9a04      	ldr	r2, [sp, #16]
 801dd84:	9b00      	ldr	r3, [sp, #0]
 801dd86:	4293      	cmp	r3, r2
 801dd88:	d11d      	bne.n	801ddc6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 801dd8a:	9b02      	ldr	r3, [sp, #8]
 801dd8c:	2500      	movs	r5, #0
 801dd8e:	9a02      	ldr	r2, [sp, #8]
 801dd90:	f103 0b01 	add.w	fp, r3, #1
 801dd94:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 801dd98:	9b06      	ldr	r3, [sp, #24]
 801dd9a:	4629      	mov	r1, r5
 801dd9c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 801dda0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801dda4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801dda8:	1ba4      	subs	r4, r4, r6
 801ddaa:	9b07      	ldr	r3, [sp, #28]
 801ddac:	ba3f      	rev	r7, r7
 801ddae:	9808      	ldr	r0, [sp, #32]
 801ddb0:	b2a4      	uxth	r4, r4
 801ddb2:	441f      	add	r7, r3
 801ddb4:	f00b fd45 	bl	8029842 <memset>
 801ddb8:	f8cd b008 	str.w	fp, [sp, #8]
 801ddbc:	9504      	str	r5, [sp, #16]
 801ddbe:	f7f2 fffd 	bl	8010dbc <_ZN8touchgfx5paint8tearDownEv>
 801ddc2:	463e      	mov	r6, r7
 801ddc4:	e5cc      	b.n	801d960 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 801ddc6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801ddca:	9b01      	ldr	r3, [sp, #4]
 801ddcc:	1ae4      	subs	r4, r4, r3
 801ddce:	1ba4      	subs	r4, r4, r6
 801ddd0:	b2a4      	uxth	r4, r4
 801ddd2:	e7f4      	b.n	801ddbe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 801ddd4:	4b05      	ldr	r3, [pc, #20]	@ (801ddec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 801ddd6:	6818      	ldr	r0, [r3, #0]
 801ddd8:	6803      	ldr	r3, [r0, #0]
 801ddda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dddc:	4798      	blx	r3
 801ddde:	b00f      	add	sp, #60	@ 0x3c
 801dde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dde4:	24000100 	.word	0x24000100
 801dde8:	240065fa 	.word	0x240065fa
 801ddec:	24006600 	.word	0x24006600
 801ddf0:	24000200 	.word	0x24000200

0801ddf4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801ddf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddf8:	b08f      	sub	sp, #60	@ 0x3c
 801ddfa:	461c      	mov	r4, r3
 801ddfc:	9205      	str	r2, [sp, #20]
 801ddfe:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801de02:	9100      	str	r1, [sp, #0]
 801de04:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801de06:	9201      	str	r2, [sp, #4]
 801de08:	2a00      	cmp	r2, #0
 801de0a:	f000 8116 	beq.w	801e03a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801de0e:	6820      	ldr	r0, [r4, #0]
 801de10:	aa0a      	add	r2, sp, #40	@ 0x28
 801de12:	6861      	ldr	r1, [r4, #4]
 801de14:	c203      	stmia	r2!, {r0, r1}
 801de16:	6818      	ldr	r0, [r3, #0]
 801de18:	aa0c      	add	r2, sp, #48	@ 0x30
 801de1a:	6859      	ldr	r1, [r3, #4]
 801de1c:	c203      	stmia	r2!, {r0, r1}
 801de1e:	a80a      	add	r0, sp, #40	@ 0x28
 801de20:	f7f9 f84e 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de24:	4621      	mov	r1, r4
 801de26:	a80c      	add	r0, sp, #48	@ 0x30
 801de28:	f7f9 f88e 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de2c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801de30:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801de34:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801de38:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801de3c:	bfdb      	ittet	le
 801de3e:	b2b3      	uxthle	r3, r6
 801de40:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801de44:	2301      	movgt	r3, #1
 801de46:	fb92 f3f3 	sdivle	r3, r2, r3
 801de4a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801de4e:	441d      	add	r5, r3
 801de50:	fb92 f1f3 	sdiv	r1, r2, r3
 801de54:	fa1f fc81 	uxth.w	ip, r1
 801de58:	3d01      	subs	r5, #1
 801de5a:	fb0c 2413 	mls	r4, ip, r3, r2
 801de5e:	4661      	mov	r1, ip
 801de60:	fb14 f406 	smulbb	r4, r4, r6
 801de64:	4404      	add	r4, r0
 801de66:	fb95 f5f3 	sdiv	r5, r5, r3
 801de6a:	b2a4      	uxth	r4, r4
 801de6c:	b131      	cbz	r1, 801de7c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801de6e:	9b05      	ldr	r3, [sp, #20]
 801de70:	9900      	ldr	r1, [sp, #0]
 801de72:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801de76:	ba1b      	rev	r3, r3
 801de78:	4419      	add	r1, r3
 801de7a:	9100      	str	r1, [sp, #0]
 801de7c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801de80:	b2ad      	uxth	r5, r5
 801de82:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801de86:	4418      	add	r0, r3
 801de88:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801de8c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801de90:	00ad      	lsls	r5, r5, #2
 801de92:	441a      	add	r2, r3
 801de94:	4b6a      	ldr	r3, [pc, #424]	@ (801e040 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801de96:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801de9a:	6818      	ldr	r0, [r3, #0]
 801de9c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801dea0:	6803      	ldr	r3, [r0, #0]
 801dea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dea4:	4798      	blx	r3
 801dea6:	4967      	ldr	r1, [pc, #412]	@ (801e044 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801dea8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801deac:	2c00      	cmp	r4, #0
 801deae:	880b      	ldrh	r3, [r1, #0]
 801deb0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801deb4:	bf0c      	ite	eq
 801deb6:	46c6      	moveq	lr, r8
 801deb8:	f04f 0e00 	movne.w	lr, #0
 801debc:	9109      	str	r1, [sp, #36]	@ 0x24
 801debe:	fb03 c202 	mla	r2, r3, r2, ip
 801dec2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801dec6:	4373      	muls	r3, r6
 801dec8:	fa1f fe8e 	uxth.w	lr, lr
 801decc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ded0:	9103      	str	r1, [sp, #12]
 801ded2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ded6:	9306      	str	r3, [sp, #24]
 801ded8:	1d2b      	adds	r3, r5, #4
 801deda:	9307      	str	r3, [sp, #28]
 801dedc:	9b01      	ldr	r3, [sp, #4]
 801dede:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 801dee2:	2300      	movs	r3, #0
 801dee4:	b292      	uxth	r2, r2
 801dee6:	9302      	str	r3, [sp, #8]
 801dee8:	9204      	str	r2, [sp, #16]
 801deea:	9a06      	ldr	r2, [sp, #24]
 801deec:	4282      	cmp	r2, r0
 801deee:	f240 809f 	bls.w	801e030 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801def2:	b963      	cbnz	r3, 801df0e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801def4:	9b00      	ldr	r3, [sp, #0]
 801def6:	781a      	ldrb	r2, [r3, #0]
 801def8:	0993      	lsrs	r3, r2, #6
 801defa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801defe:	9202      	str	r2, [sp, #8]
 801df00:	1e5a      	subs	r2, r3, #1
 801df02:	2a02      	cmp	r2, #2
 801df04:	d815      	bhi.n	801df32 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801df06:	9a00      	ldr	r2, [sp, #0]
 801df08:	b29b      	uxth	r3, r3
 801df0a:	3201      	adds	r2, #1
 801df0c:	9200      	str	r2, [sp, #0]
 801df0e:	b1b4      	cbz	r4, 801df3e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801df10:	429c      	cmp	r4, r3
 801df12:	bf91      	iteee	ls
 801df14:	1b1c      	subls	r4, r3, r4
 801df16:	1ae4      	subhi	r4, r4, r3
 801df18:	4671      	movhi	r1, lr
 801df1a:	f04f 0a00 	movhi.w	sl, #0
 801df1e:	bf9b      	ittet	ls
 801df20:	fa1f fa84 	uxthls.w	sl, r4
 801df24:	2400      	movls	r4, #0
 801df26:	b2a4      	uxthhi	r4, r4
 801df28:	fa1f f188 	uxthls.w	r1, r8
 801df2c:	4653      	mov	r3, sl
 801df2e:	468e      	mov	lr, r1
 801df30:	e7db      	b.n	801deea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801df32:	9a00      	ldr	r2, [sp, #0]
 801df34:	9b00      	ldr	r3, [sp, #0]
 801df36:	3202      	adds	r2, #2
 801df38:	785b      	ldrb	r3, [r3, #1]
 801df3a:	9200      	str	r2, [sp, #0]
 801df3c:	e7e7      	b.n	801df0e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801df3e:	2202      	movs	r2, #2
 801df40:	9907      	ldr	r1, [sp, #28]
 801df42:	4573      	cmp	r3, lr
 801df44:	4615      	mov	r5, r2
 801df46:	9a02      	ldr	r2, [sp, #8]
 801df48:	bf24      	itt	cs
 801df4a:	eba3 0a0e 	subcs.w	sl, r3, lr
 801df4e:	46f1      	movcs	r9, lr
 801df50:	fb15 1202 	smlabb	r2, r5, r2, r1
 801df54:	9905      	ldr	r1, [sp, #20]
 801df56:	bf34      	ite	cc
 801df58:	4699      	movcc	r9, r3
 801df5a:	fa1f fa8a 	uxthcs.w	sl, sl
 801df5e:	f831 c002 	ldrh.w	ip, [r1, r2]
 801df62:	bf38      	it	cc
 801df64:	ebae 0103 	subcc.w	r1, lr, r3
 801df68:	9a01      	ldr	r2, [sp, #4]
 801df6a:	bf2e      	itee	cs
 801df6c:	4621      	movcs	r1, r4
 801df6e:	b289      	uxthcc	r1, r1
 801df70:	46a2      	movcc	sl, r4
 801df72:	2aff      	cmp	r2, #255	@ 0xff
 801df74:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801df78:	d105      	bne.n	801df86 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801df7a:	4481      	add	r9, r0
 801df7c:	4581      	cmp	r9, r0
 801df7e:	d045      	beq.n	801e00c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801df80:	f820 cb02 	strh.w	ip, [r0], #2
 801df84:	e7fa      	b.n	801df7c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 801df86:	ea4f 222c 	mov.w	r2, ip, asr #8
 801df8a:	9d03      	ldr	r5, [sp, #12]
 801df8c:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801df90:	4481      	add	r9, r0
 801df92:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801df96:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801df9a:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801df9e:	fa5f fc8c 	uxtb.w	ip, ip
 801dfa2:	436a      	muls	r2, r5
 801dfa4:	fb0b fb05 	mul.w	fp, fp, r5
 801dfa8:	fb0c fc05 	mul.w	ip, ip, r5
 801dfac:	9208      	str	r2, [sp, #32]
 801dfae:	4581      	cmp	r9, r0
 801dfb0:	d02c      	beq.n	801e00c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801dfb2:	8802      	ldrh	r2, [r0, #0]
 801dfb4:	9d04      	ldr	r5, [sp, #16]
 801dfb6:	1216      	asrs	r6, r2, #8
 801dfb8:	9f04      	ldr	r7, [sp, #16]
 801dfba:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801dfbe:	fb16 f605 	smulbb	r6, r6, r5
 801dfc2:	9d08      	ldr	r5, [sp, #32]
 801dfc4:	442e      	add	r6, r5
 801dfc6:	10d5      	asrs	r5, r2, #3
 801dfc8:	00d2      	lsls	r2, r2, #3
 801dfca:	b2b6      	uxth	r6, r6
 801dfcc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801dfd0:	b2d2      	uxtb	r2, r2
 801dfd2:	fb15 f507 	smulbb	r5, r5, r7
 801dfd6:	fb12 f207 	smulbb	r2, r2, r7
 801dfda:	1c77      	adds	r7, r6, #1
 801dfdc:	445d      	add	r5, fp
 801dfde:	4462      	add	r2, ip
 801dfe0:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801dfe4:	b2ad      	uxth	r5, r5
 801dfe6:	b292      	uxth	r2, r2
 801dfe8:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801dfec:	1c57      	adds	r7, r2, #1
 801dfee:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801dff2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801dff6:	4316      	orrs	r6, r2
 801dff8:	1c6a      	adds	r2, r5, #1
 801dffa:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801dffe:	096d      	lsrs	r5, r5, #5
 801e000:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801e004:	432e      	orrs	r6, r5
 801e006:	f820 6b02 	strh.w	r6, [r0], #2
 801e00a:	e7d0      	b.n	801dfae <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 801e00c:	4573      	cmp	r3, lr
 801e00e:	d38d      	bcc.n	801df2c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801e010:	fa1f f188 	uxth.w	r1, r8
 801e014:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801e018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e01a:	1a64      	subs	r4, r4, r1
 801e01c:	881b      	ldrh	r3, [r3, #0]
 801e01e:	b2a4      	uxth	r4, r4
 801e020:	eba3 0308 	sub.w	r3, r3, r8
 801e024:	2c00      	cmp	r4, #0
 801e026:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e02a:	bf18      	it	ne
 801e02c:	2100      	movne	r1, #0
 801e02e:	e77d      	b.n	801df2c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801e030:	4b03      	ldr	r3, [pc, #12]	@ (801e040 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801e032:	6818      	ldr	r0, [r3, #0]
 801e034:	6803      	ldr	r3, [r0, #0]
 801e036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e038:	4798      	blx	r3
 801e03a:	b00f      	add	sp, #60	@ 0x3c
 801e03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e040:	24006600 	.word	0x24006600
 801e044:	240065fa 	.word	0x240065fa

0801e048 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e04c:	b09f      	sub	sp, #124	@ 0x7c
 801e04e:	461d      	mov	r5, r3
 801e050:	4604      	mov	r4, r0
 801e052:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e054:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801e058:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801e05c:	9209      	str	r2, [sp, #36]	@ 0x24
 801e05e:	2a00      	cmp	r2, #0
 801e060:	f000 81ed 	beq.w	801e43e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 801e064:	6828      	ldr	r0, [r5, #0]
 801e066:	aa1a      	add	r2, sp, #104	@ 0x68
 801e068:	6869      	ldr	r1, [r5, #4]
 801e06a:	c203      	stmia	r2!, {r0, r1}
 801e06c:	6818      	ldr	r0, [r3, #0]
 801e06e:	aa1c      	add	r2, sp, #112	@ 0x70
 801e070:	6859      	ldr	r1, [r3, #4]
 801e072:	c203      	stmia	r2!, {r0, r1}
 801e074:	a81a      	add	r0, sp, #104	@ 0x68
 801e076:	f7f8 ff23 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e07a:	4629      	mov	r1, r5
 801e07c:	a81c      	add	r0, sp, #112	@ 0x70
 801e07e:	f7f8 ff63 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e082:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801e086:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 801e08a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e08e:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 801e092:	bfdb      	ittet	le
 801e094:	b29a      	uxthle	r2, r3
 801e096:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e09a:	2201      	movgt	r2, #1
 801e09c:	fb91 f2f2 	sdivle	r2, r1, r2
 801e0a0:	9202      	str	r2, [sp, #8]
 801e0a2:	9802      	ldr	r0, [sp, #8]
 801e0a4:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801e0a8:	9902      	ldr	r1, [sp, #8]
 801e0aa:	fb92 f0f0 	sdiv	r0, r2, r0
 801e0ae:	b280      	uxth	r0, r0
 801e0b0:	4488      	add	r8, r1
 801e0b2:	9010      	str	r0, [sp, #64]	@ 0x40
 801e0b4:	f108 38ff 	add.w	r8, r8, #4294967295
 801e0b8:	9802      	ldr	r0, [sp, #8]
 801e0ba:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801e0bc:	fb05 2510 	mls	r5, r5, r0, r2
 801e0c0:	fb98 f8f1 	sdiv	r8, r8, r1
 801e0c4:	fb15 f503 	smulbb	r5, r5, r3
 801e0c8:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801e0cc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801e0d0:	f108 0801 	add.w	r8, r8, #1
 801e0d4:	440d      	add	r5, r1
 801e0d6:	4419      	add	r1, r3
 801e0d8:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801e0dc:	fa1f f888 	uxth.w	r8, r8
 801e0e0:	441a      	add	r2, r3
 801e0e2:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801e0e6:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801e0ea:	b2ad      	uxth	r5, r5
 801e0ec:	9304      	str	r3, [sp, #16]
 801e0ee:	4b94      	ldr	r3, [pc, #592]	@ (801e340 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801e0f0:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801e0f4:	6818      	ldr	r0, [r3, #0]
 801e0f6:	6803      	ldr	r3, [r0, #0]
 801e0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e0fa:	4798      	blx	r3
 801e0fc:	4b91      	ldr	r3, [pc, #580]	@ (801e344 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801e0fe:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801e102:	2d00      	cmp	r5, #0
 801e104:	881a      	ldrh	r2, [r3, #0]
 801e106:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801e10a:	fb02 f606 	mul.w	r6, r2, r6
 801e10e:	fb02 7101 	mla	r1, r2, r1, r7
 801e112:	9318      	str	r3, [sp, #96]	@ 0x60
 801e114:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e118:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801e11c:	f04f 0100 	mov.w	r1, #0
 801e120:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801e124:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e126:	4b88      	ldr	r3, [pc, #544]	@ (801e348 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 801e128:	920a      	str	r2, [sp, #40]	@ 0x28
 801e12a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e12c:	eba3 0304 	sub.w	r3, r3, r4
 801e130:	910d      	str	r1, [sp, #52]	@ 0x34
 801e132:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801e136:	9319      	str	r3, [sp, #100]	@ 0x64
 801e138:	f108 0204 	add.w	r2, r8, #4
 801e13c:	9211      	str	r2, [sp, #68]	@ 0x44
 801e13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e140:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801e144:	9215      	str	r2, [sp, #84]	@ 0x54
 801e146:	9a04      	ldr	r2, [sp, #16]
 801e148:	bf18      	it	ne
 801e14a:	2200      	movne	r2, #0
 801e14c:	b292      	uxth	r2, r2
 801e14e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e150:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e152:	fa11 f383 	uxtah	r3, r1, r3
 801e156:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801e158:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e15c:	3304      	adds	r3, #4
 801e15e:	9306      	str	r3, [sp, #24]
 801e160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e162:	4283      	cmp	r3, r0
 801e164:	f240 8166 	bls.w	801e434 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 801e168:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801e16c:	f04f 0a01 	mov.w	sl, #1
 801e170:	9902      	ldr	r1, [sp, #8]
 801e172:	9e06      	ldr	r6, [sp, #24]
 801e174:	46d3      	mov	fp, sl
 801e176:	4657      	mov	r7, sl
 801e178:	7836      	ldrb	r6, [r6, #0]
 801e17a:	fbb5 f3f3 	udiv	r3, r5, r3
 801e17e:	1acb      	subs	r3, r1, r3
 801e180:	9612      	str	r6, [sp, #72]	@ 0x48
 801e182:	3601      	adds	r6, #1
 801e184:	b29b      	uxth	r3, r3
 801e186:	9605      	str	r6, [sp, #20]
 801e188:	9316      	str	r3, [sp, #88]	@ 0x58
 801e18a:	9b06      	ldr	r3, [sp, #24]
 801e18c:	7859      	ldrb	r1, [r3, #1]
 801e18e:	789b      	ldrb	r3, [r3, #2]
 801e190:	021b      	lsls	r3, r3, #8
 801e192:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801e196:	9906      	ldr	r1, [sp, #24]
 801e198:	78c9      	ldrb	r1, [r1, #3]
 801e19a:	430b      	orrs	r3, r1
 801e19c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e19e:	4419      	add	r1, r3
 801e1a0:	1c4e      	adds	r6, r1, #1
 801e1a2:	7849      	ldrb	r1, [r1, #1]
 801e1a4:	9603      	str	r6, [sp, #12]
 801e1a6:	0209      	lsls	r1, r1, #8
 801e1a8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e1aa:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801e1ae:	5cf3      	ldrb	r3, [r6, r3]
 801e1b0:	4319      	orrs	r1, r3
 801e1b2:	b28b      	uxth	r3, r1
 801e1b4:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801e1b8:	930c      	str	r3, [sp, #48]	@ 0x30
 801e1ba:	2300      	movs	r3, #0
 801e1bc:	9307      	str	r3, [sp, #28]
 801e1be:	469c      	mov	ip, r3
 801e1c0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801e1c4:	930e      	str	r3, [sp, #56]	@ 0x38
 801e1c6:	2d00      	cmp	r5, #0
 801e1c8:	d07e      	beq.n	801e2c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 801e1ca:	42af      	cmp	r7, r5
 801e1cc:	d26e      	bcs.n	801e2ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 801e1ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e1d0:	1bed      	subs	r5, r5, r7
 801e1d2:	9201      	str	r2, [sp, #4]
 801e1d4:	4283      	cmp	r3, r0
 801e1d6:	b2ad      	uxth	r5, r5
 801e1d8:	d802      	bhi.n	801e1e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 801e1da:	e073      	b.n	801e2c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d15f      	bne.n	801e2a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 801e1e0:	9b03      	ldr	r3, [sp, #12]
 801e1e2:	f1cb 0207 	rsb	r2, fp, #7
 801e1e6:	785b      	ldrb	r3, [r3, #1]
 801e1e8:	4093      	lsls	r3, r2
 801e1ea:	005b      	lsls	r3, r3, #1
 801e1ec:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801e1f0:	9b03      	ldr	r3, [sp, #12]
 801e1f2:	781b      	ldrb	r3, [r3, #0]
 801e1f4:	fa43 f30b 	asr.w	r3, r3, fp
 801e1f8:	b2db      	uxtb	r3, r3
 801e1fa:	4313      	orrs	r3, r2
 801e1fc:	f10b 0201 	add.w	r2, fp, #1
 801e200:	fa5f fb82 	uxtb.w	fp, r2
 801e204:	9a03      	ldr	r2, [sp, #12]
 801e206:	b29f      	uxth	r7, r3
 801e208:	f1bb 0f08 	cmp.w	fp, #8
 801e20c:	bf13      	iteet	ne
 801e20e:	3201      	addne	r2, #1
 801e210:	3202      	addeq	r2, #2
 801e212:	f04f 0b00 	moveq.w	fp, #0
 801e216:	9203      	strne	r2, [sp, #12]
 801e218:	bf08      	it	eq
 801e21a:	9203      	streq	r2, [sp, #12]
 801e21c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e21e:	42ba      	cmp	r2, r7
 801e220:	d309      	bcc.n	801e236 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 801e222:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801e226:	2301      	movs	r3, #1
 801e228:	9a05      	ldr	r2, [sp, #20]
 801e22a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801e22e:	d30e      	bcc.n	801e24e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801e230:	469a      	mov	sl, r3
 801e232:	2600      	movs	r6, #0
 801e234:	e035      	b.n	801e2a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 801e236:	9b05      	ldr	r3, [sp, #20]
 801e238:	429f      	cmp	r7, r3
 801e23a:	d318      	bcc.n	801e26e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 801e23c:	eb04 030a 	add.w	r3, r4, sl
 801e240:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801e244:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801e248:	f10a 0301 	add.w	r3, sl, #1
 801e24c:	b29b      	uxth	r3, r3
 801e24e:	9a05      	ldr	r2, [sp, #20]
 801e250:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801e254:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e258:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801e25a:	7116      	strb	r6, [r2, #4]
 801e25c:	f10a 0601 	add.w	r6, sl, #1
 801e260:	80d1      	strh	r1, [r2, #6]
 801e262:	7156      	strb	r6, [r2, #5]
 801e264:	9a05      	ldr	r2, [sp, #20]
 801e266:	3201      	adds	r2, #1
 801e268:	b292      	uxth	r2, r2
 801e26a:	9205      	str	r2, [sp, #20]
 801e26c:	e7e0      	b.n	801e230 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 801e26e:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801e272:	463a      	mov	r2, r7
 801e274:	795b      	ldrb	r3, [r3, #5]
 801e276:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801e27a:	4426      	add	r6, r4
 801e27c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801e27e:	eb01 0c06 	add.w	ip, r1, r6
 801e282:	f1bc 0f00 	cmp.w	ip, #0
 801e286:	dd07      	ble.n	801e298 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 801e288:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e28c:	f892 c004 	ldrb.w	ip, [r2, #4]
 801e290:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801e294:	88d2      	ldrh	r2, [r2, #6]
 801e296:	e7f1      	b.n	801e27c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 801e298:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801e29c:	b29b      	uxth	r3, r3
 801e29e:	e7c3      	b.n	801e228 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 801e2a0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e2a2:	970c      	str	r7, [sp, #48]	@ 0x30
 801e2a4:	46b4      	mov	ip, r6
 801e2a6:	9a01      	ldr	r2, [sp, #4]
 801e2a8:	461f      	mov	r7, r3
 801e2aa:	e78c      	b.n	801e1c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 801e2ac:	1b7b      	subs	r3, r7, r5
 801e2ae:	eb0c 0605 	add.w	r6, ip, r5
 801e2b2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e2b6:	b29b      	uxth	r3, r3
 801e2b8:	b2b6      	uxth	r6, r6
 801e2ba:	9201      	str	r2, [sp, #4]
 801e2bc:	2500      	movs	r5, #0
 801e2be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e2c0:	4282      	cmp	r2, r0
 801e2c2:	d88b      	bhi.n	801e1dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801e2c4:	9a01      	ldr	r2, [sp, #4]
 801e2c6:	e74b      	b.n	801e160 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801e2c8:	4297      	cmp	r7, r2
 801e2ca:	d332      	bcc.n	801e332 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 801e2cc:	1abb      	subs	r3, r7, r2
 801e2ce:	9208      	str	r2, [sp, #32]
 801e2d0:	9501      	str	r5, [sp, #4]
 801e2d2:	b29b      	uxth	r3, r3
 801e2d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e2d6:	29ff      	cmp	r1, #255	@ 0xff
 801e2d8:	9908      	ldr	r1, [sp, #32]
 801e2da:	eb0c 0601 	add.w	r6, ip, r1
 801e2de:	d135      	bne.n	801e34c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801e2e0:	f1a0 0e02 	sub.w	lr, r0, #2
 801e2e4:	b2b6      	uxth	r6, r6
 801e2e6:	45b4      	cmp	ip, r6
 801e2e8:	f040 808c 	bne.w	801e404 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 801e2ec:	9908      	ldr	r1, [sp, #32]
 801e2ee:	4297      	cmp	r7, r2
 801e2f0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e2f4:	d3e2      	bcc.n	801e2bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 801e2f6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e2f8:	9904      	ldr	r1, [sp, #16]
 801e2fa:	8812      	ldrh	r2, [r2, #0]
 801e2fc:	1a52      	subs	r2, r2, r1
 801e2fe:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801e300:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e304:	9a07      	ldr	r2, [sp, #28]
 801e306:	3201      	adds	r2, #1
 801e308:	428a      	cmp	r2, r1
 801e30a:	9207      	str	r2, [sp, #28]
 801e30c:	f040 8087 	bne.w	801e41e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 801e310:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801e314:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 801e318:	9b04      	ldr	r3, [sp, #16]
 801e31a:	1bed      	subs	r5, r5, r7
 801e31c:	b2ad      	uxth	r5, r5
 801e31e:	2d00      	cmp	r5, #0
 801e320:	bf08      	it	eq
 801e322:	461a      	moveq	r2, r3
 801e324:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e326:	bf18      	it	ne
 801e328:	2200      	movne	r2, #0
 801e32a:	3301      	adds	r3, #1
 801e32c:	b292      	uxth	r2, r2
 801e32e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e330:	e70d      	b.n	801e14e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 801e332:	1bd1      	subs	r1, r2, r7
 801e334:	9708      	str	r7, [sp, #32]
 801e336:	b28b      	uxth	r3, r1
 801e338:	9301      	str	r3, [sp, #4]
 801e33a:	462b      	mov	r3, r5
 801e33c:	e7ca      	b.n	801e2d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 801e33e:	bf00      	nop
 801e340:	24006600 	.word	0x24006600
 801e344:	240065fa 	.word	0x240065fa
 801e348:	fffff7fb 	.word	0xfffff7fb
 801e34c:	b2b6      	uxth	r6, r6
 801e34e:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e350:	45b4      	cmp	ip, r6
 801e352:	d0cb      	beq.n	801e2ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 801e354:	f10c 0101 	add.w	r1, ip, #1
 801e358:	44a4      	add	ip, r4
 801e35a:	9117      	str	r1, [sp, #92]	@ 0x5c
 801e35c:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801e360:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e362:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801e366:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e368:	ea4f 2825 	mov.w	r8, r5, asr #8
 801e36c:	f8b1 c000 	ldrh.w	ip, [r1]
 801e370:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e372:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801e376:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801e37a:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801e37e:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801e382:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e386:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801e38a:	fb1e fe01 	smulbb	lr, lr, r1
 801e38e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e390:	fa5f fc8c 	uxtb.w	ip, ip
 801e394:	fb08 e801 	mla	r8, r8, r1, lr
 801e398:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801e39c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e39e:	00ed      	lsls	r5, r5, #3
 801e3a0:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801e3a4:	fa1f f888 	uxth.w	r8, r8
 801e3a8:	fb19 f901 	smulbb	r9, r9, r1
 801e3ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e3ae:	b2ed      	uxtb	r5, r5
 801e3b0:	fb0e 9e01 	mla	lr, lr, r1, r9
 801e3b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e3b6:	fb1c fc01 	smulbb	ip, ip, r1
 801e3ba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e3bc:	fa1f fe8e 	uxth.w	lr, lr
 801e3c0:	fb05 c501 	mla	r5, r5, r1, ip
 801e3c4:	f108 0c01 	add.w	ip, r8, #1
 801e3c8:	f10e 0901 	add.w	r9, lr, #1
 801e3cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e3ce:	b2ad      	uxth	r5, r5
 801e3d0:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801e3d4:	f105 0c01 	add.w	ip, r5, #1
 801e3d8:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801e3dc:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801e3e0:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801e3e4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e3e8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e3ec:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801e3f0:	ea4c 0808 	orr.w	r8, ip, r8
 801e3f4:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 801e3f8:	ea48 0809 	orr.w	r8, r8, r9
 801e3fc:	f821 8b02 	strh.w	r8, [r1], #2
 801e400:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e402:	e7a5      	b.n	801e350 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 801e404:	f10c 0801 	add.w	r8, ip, #1
 801e408:	44a4      	add	ip, r4
 801e40a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e40c:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801e410:	fa1f fc88 	uxth.w	ip, r8
 801e414:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801e418:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801e41c:	e763      	b.n	801e2e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 801e41e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e422:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801e426:	1aad      	subs	r5, r5, r2
 801e428:	b2ad      	uxth	r5, r5
 801e42a:	2d00      	cmp	r5, #0
 801e42c:	bf18      	it	ne
 801e42e:	2200      	movne	r2, #0
 801e430:	9201      	str	r2, [sp, #4]
 801e432:	e744      	b.n	801e2be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 801e434:	4b03      	ldr	r3, [pc, #12]	@ (801e444 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 801e436:	6818      	ldr	r0, [r3, #0]
 801e438:	6803      	ldr	r3, [r0, #0]
 801e43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e43c:	4798      	blx	r3
 801e43e:	b01f      	add	sp, #124	@ 0x7c
 801e440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e444:	24006600 	.word	0x24006600

0801e448 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 801e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e44c:	b093      	sub	sp, #76	@ 0x4c
 801e44e:	4616      	mov	r6, r2
 801e450:	460d      	mov	r5, r1
 801e452:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 801e456:	9003      	str	r0, [sp, #12]
 801e458:	9201      	str	r2, [sp, #4]
 801e45a:	2a00      	cmp	r2, #0
 801e45c:	f000 8303 	beq.w	801ea66 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x61e>
 801e460:	6830      	ldr	r0, [r6, #0]
 801e462:	ac0e      	add	r4, sp, #56	@ 0x38
 801e464:	6871      	ldr	r1, [r6, #4]
 801e466:	c403      	stmia	r4!, {r0, r1}
 801e468:	6818      	ldr	r0, [r3, #0]
 801e46a:	ac10      	add	r4, sp, #64	@ 0x40
 801e46c:	6859      	ldr	r1, [r3, #4]
 801e46e:	c403      	stmia	r4!, {r0, r1}
 801e470:	a80e      	add	r0, sp, #56	@ 0x38
 801e472:	f7f8 fd25 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e476:	4631      	mov	r1, r6
 801e478:	a810      	add	r0, sp, #64	@ 0x40
 801e47a:	f7f8 fd65 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e47e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801e482:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801e486:	bfdb      	ittet	le
 801e488:	b293      	uxthle	r3, r2
 801e48a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e48e:	2301      	movgt	r3, #1
 801e490:	fb91 f3f3 	sdivle	r3, r1, r3
 801e494:	9304      	str	r3, [sp, #16]
 801e496:	f105 0308 	add.w	r3, r5, #8
 801e49a:	9904      	ldr	r1, [sp, #16]
 801e49c:	9308      	str	r3, [sp, #32]
 801e49e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801e4a2:	440b      	add	r3, r1
 801e4a4:	3b01      	subs	r3, #1
 801e4a6:	fb93 f3f1 	sdiv	r3, r3, r1
 801e4aa:	3b01      	subs	r3, #1
 801e4ac:	9908      	ldr	r1, [sp, #32]
 801e4ae:	b29b      	uxth	r3, r3
 801e4b0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e4b4:	9904      	ldr	r1, [sp, #16]
 801e4b6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e4b8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801e4bc:	fb93 f0f1 	sdiv	r0, r3, r1
 801e4c0:	b284      	uxth	r4, r0
 801e4c2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801e4c6:	9405      	str	r4, [sp, #20]
 801e4c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801e4cc:	fb05 3914 	mls	r9, r5, r4, r3
 801e4d0:	fb19 f902 	smulbb	r9, r9, r2
 801e4d4:	4489      	add	r9, r1
 801e4d6:	fa1f f989 	uxth.w	r9, r9
 801e4da:	2d00      	cmp	r5, #0
 801e4dc:	d05d      	beq.n	801e59a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 801e4de:	1e6a      	subs	r2, r5, #1
 801e4e0:	9808      	ldr	r0, [sp, #32]
 801e4e2:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 801e4e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e4e8:	fa9a fa8a 	rev.w	sl, sl
 801e4ec:	4492      	add	sl, r2
 801e4ee:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801e4f2:	f04f 0600 	mov.w	r6, #0
 801e4f6:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801e4fa:	4411      	add	r1, r2
 801e4fc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801e500:	4413      	add	r3, r2
 801e502:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801e506:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801e50a:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801e50e:	9302      	str	r3, [sp, #8]
 801e510:	4bca      	ldr	r3, [pc, #808]	@ (801e83c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 801e512:	6818      	ldr	r0, [r3, #0]
 801e514:	6803      	ldr	r3, [r0, #0]
 801e516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e518:	4798      	blx	r3
 801e51a:	4bc9      	ldr	r3, [pc, #804]	@ (801e840 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 801e51c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801e520:	2100      	movs	r1, #0
 801e522:	881b      	ldrh	r3, [r3, #0]
 801e524:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801e528:	fb03 2404 	mla	r4, r3, r4, r2
 801e52c:	2280      	movs	r2, #128	@ 0x80
 801e52e:	436b      	muls	r3, r5
 801e530:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e534:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e538:	930d      	str	r3, [sp, #52]	@ 0x34
 801e53a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801e53e:	fb99 f3f3 	sdiv	r3, r9, r3
 801e542:	9306      	str	r3, [sp, #24]
 801e544:	9b01      	ldr	r3, [sp, #4]
 801e546:	43db      	mvns	r3, r3
 801e548:	b2db      	uxtb	r3, r3
 801e54a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e54c:	9b03      	ldr	r3, [sp, #12]
 801e54e:	3304      	adds	r3, #4
 801e550:	4618      	mov	r0, r3
 801e552:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e554:	f00b f975 	bl	8029842 <memset>
 801e558:	4bba      	ldr	r3, [pc, #744]	@ (801e844 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 801e55a:	9300      	str	r3, [sp, #0]
 801e55c:	2300      	movs	r3, #0
 801e55e:	9307      	str	r3, [sp, #28]
 801e560:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e562:	42a3      	cmp	r3, r4
 801e564:	f240 827a 	bls.w	801ea5c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x614>
 801e568:	f04f 0e07 	mov.w	lr, #7
 801e56c:	f1b9 0f00 	cmp.w	r9, #0
 801e570:	f000 8159 	beq.w	801e826 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 801e574:	f89a 5000 	ldrb.w	r5, [sl]
 801e578:	f10a 0701 	add.w	r7, sl, #1
 801e57c:	b2ed      	uxtb	r5, r5
 801e57e:	11aa      	asrs	r2, r5, #6
 801e580:	d10e      	bne.n	801e5a0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 801e582:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801e586:	9b03      	ldr	r3, [sp, #12]
 801e588:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801e58c:	88ae      	ldrh	r6, [r5, #4]
 801e58e:	f109 39ff 	add.w	r9, r9, #4294967295
 801e592:	fa1f f989 	uxth.w	r9, r9
 801e596:	46ba      	mov	sl, r7
 801e598:	e7e8      	b.n	801e56c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 801e59a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 801e59e:	e7a6      	b.n	801e4ee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 801e5a0:	2a01      	cmp	r2, #1
 801e5a2:	d129      	bne.n	801e5f8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 801e5a4:	f3c6 0304 	ubfx	r3, r6, #0, #5
 801e5a8:	f005 0203 	and.w	r2, r5, #3
 801e5ac:	2103      	movs	r1, #3
 801e5ae:	3b02      	subs	r3, #2
 801e5b0:	4413      	add	r3, r2
 801e5b2:	f3c5 0281 	ubfx	r2, r5, #2, #2
 801e5b6:	f3c5 1501 	ubfx	r5, r5, #4, #2
 801e5ba:	f003 031f 	and.w	r3, r3, #31
 801e5be:	3a02      	subs	r2, #2
 801e5c0:	3d02      	subs	r5, #2
 801e5c2:	f363 0604 	bfi	r6, r3, #0, #5
 801e5c6:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 801e5ca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801e5ce:	f362 164a 	bfi	r6, r2, #5, #6
 801e5d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e5d6:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 801e5da:	f005 051f 	and.w	r5, r5, #31
 801e5de:	fb11 2205 	smlabb	r2, r1, r5, r2
 801e5e2:	f365 26cf 	bfi	r6, r5, #11, #5
 801e5e6:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801e5ea:	9a03      	ldr	r2, [sp, #12]
 801e5ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e5f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e5f4:	809e      	strh	r6, [r3, #4]
 801e5f6:	e7ca      	b.n	801e58e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 801e5f8:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801e5fc:	2a02      	cmp	r2, #2
 801e5fe:	b2ab      	uxth	r3, r5
 801e600:	d136      	bne.n	801e670 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 801e602:	2101      	movs	r1, #1
 801e604:	fb12 1205 	smlabb	r2, r2, r5, r1
 801e608:	4492      	add	sl, r2
 801e60a:	463a      	mov	r2, r7
 801e60c:	4552      	cmp	r2, sl
 801e60e:	d01c      	beq.n	801e64a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 801e610:	4694      	mov	ip, r2
 801e612:	f04f 0b03 	mov.w	fp, #3
 801e616:	f81c 1b02 	ldrb.w	r1, [ip], #2
 801e61a:	7852      	ldrb	r2, [r2, #1]
 801e61c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e620:	f3c1 1045 	ubfx	r0, r1, #5, #6
 801e624:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 801e628:	f001 021f 	and.w	r2, r1, #31
 801e62c:	460e      	mov	r6, r1
 801e62e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e632:	fb1b 0008 	smlabb	r0, fp, r8, r0
 801e636:	fb1e 0002 	smlabb	r0, lr, r2, r0
 801e63a:	9a03      	ldr	r2, [sp, #12]
 801e63c:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801e640:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e644:	4662      	mov	r2, ip
 801e646:	8081      	strh	r1, [r0, #4]
 801e648:	e7e0      	b.n	801e60c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 801e64a:	4599      	cmp	r9, r3
 801e64c:	d20b      	bcs.n	801e666 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 801e64e:	eba5 0509 	sub.w	r5, r5, r9
 801e652:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 801e656:	2d00      	cmp	r5, #0
 801e658:	f300 8208 	bgt.w	801ea6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x624>
 801e65c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801e660:	2301      	movs	r3, #1
 801e662:	9307      	str	r3, [sp, #28]
 801e664:	e00c      	b.n	801e680 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801e666:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801e66a:	eba9 0903 	sub.w	r9, r9, r3
 801e66e:	e790      	b.n	801e592 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 801e670:	4599      	cmp	r9, r3
 801e672:	d2fa      	bcs.n	801e66a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 801e674:	eba5 0509 	sub.w	r5, r5, r9
 801e678:	2d00      	cmp	r5, #0
 801e67a:	dc1d      	bgt.n	801e6b8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 801e67c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801e680:	f04f 0b00 	mov.w	fp, #0
 801e684:	f1b8 0f00 	cmp.w	r8, #0
 801e688:	f340 81a0 	ble.w	801e9cc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x584>
 801e68c:	783b      	ldrb	r3, [r7, #0]
 801e68e:	f107 0a01 	add.w	sl, r7, #1
 801e692:	b2db      	uxtb	r3, r3
 801e694:	119a      	asrs	r2, r3, #6
 801e696:	f040 80d7 	bne.w	801e848 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 801e69a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e69e:	9a03      	ldr	r2, [sp, #12]
 801e6a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e6a4:	889e      	ldrh	r6, [r3, #4]
 801e6a6:	9b01      	ldr	r3, [sp, #4]
 801e6a8:	2bff      	cmp	r3, #255	@ 0xff
 801e6aa:	f040 81e8 	bne.w	801ea7e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x636>
 801e6ae:	8026      	strh	r6, [r4, #0]
 801e6b0:	f108 38ff 	add.w	r8, r8, #4294967295
 801e6b4:	3402      	adds	r4, #2
 801e6b6:	e0be      	b.n	801e836 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801e6b8:	9b02      	ldr	r3, [sp, #8]
 801e6ba:	9a02      	ldr	r2, [sp, #8]
 801e6bc:	42ab      	cmp	r3, r5
 801e6be:	bfa8      	it	ge
 801e6c0:	462b      	movge	r3, r5
 801e6c2:	eba2 0803 	sub.w	r8, r2, r3
 801e6c6:	9a07      	ldr	r2, [sp, #28]
 801e6c8:	1aed      	subs	r5, r5, r3
 801e6ca:	2a00      	cmp	r2, #0
 801e6cc:	d05a      	beq.n	801e784 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 801e6ce:	9a01      	ldr	r2, [sp, #4]
 801e6d0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e6d4:	2aff      	cmp	r2, #255	@ 0xff
 801e6d6:	d049      	beq.n	801e76c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 801e6d8:	f8bd e004 	ldrh.w	lr, [sp, #4]
 801e6dc:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 801e6e0:	42a3      	cmp	r3, r4
 801e6e2:	f240 80a5 	bls.w	801e830 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 801e6e6:	46bc      	mov	ip, r7
 801e6e8:	8820      	ldrh	r0, [r4, #0]
 801e6ea:	f81c 2b02 	ldrb.w	r2, [ip], #2
 801e6ee:	ea4f 2a20 	mov.w	sl, r0, asr #8
 801e6f2:	7879      	ldrb	r1, [r7, #1]
 801e6f4:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 801e6f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801e6fc:	fb1a fa09 	smulbb	sl, sl, r9
 801e700:	b212      	sxth	r2, r2
 801e702:	b291      	uxth	r1, r2
 801e704:	00d2      	lsls	r2, r2, #3
 801e706:	120f      	asrs	r7, r1, #8
 801e708:	10c9      	asrs	r1, r1, #3
 801e70a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e70e:	b2d2      	uxtb	r2, r2
 801e710:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801e714:	fb07 a70e 	mla	r7, r7, lr, sl
 801e718:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 801e71c:	00c0      	lsls	r0, r0, #3
 801e71e:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e722:	b2bf      	uxth	r7, r7
 801e724:	b2c0      	uxtb	r0, r0
 801e726:	fb1a fa09 	smulbb	sl, sl, r9
 801e72a:	fb10 f009 	smulbb	r0, r0, r9
 801e72e:	fb01 a10e 	mla	r1, r1, lr, sl
 801e732:	fb02 020e 	mla	r2, r2, lr, r0
 801e736:	1c78      	adds	r0, r7, #1
 801e738:	b289      	uxth	r1, r1
 801e73a:	b292      	uxth	r2, r2
 801e73c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801e740:	f101 0a01 	add.w	sl, r1, #1
 801e744:	1c50      	adds	r0, r2, #1
 801e746:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 801e74a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e74e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e752:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e756:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801e75a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e75e:	4307      	orrs	r7, r0
 801e760:	ea47 070a 	orr.w	r7, r7, sl
 801e764:	f824 7b02 	strh.w	r7, [r4], #2
 801e768:	4667      	mov	r7, ip
 801e76a:	e7b9      	b.n	801e6e0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 801e76c:	42a3      	cmp	r3, r4
 801e76e:	d95f      	bls.n	801e830 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 801e770:	463a      	mov	r2, r7
 801e772:	f812 1b02 	ldrb.w	r1, [r2], #2
 801e776:	7878      	ldrb	r0, [r7, #1]
 801e778:	4617      	mov	r7, r2
 801e77a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 801e77e:	f824 1b02 	strh.w	r1, [r4], #2
 801e782:	e7f3      	b.n	801e76c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 801e784:	9901      	ldr	r1, [sp, #4]
 801e786:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e78a:	b2b2      	uxth	r2, r6
 801e78c:	29ff      	cmp	r1, #255	@ 0xff
 801e78e:	d044      	beq.n	801e81a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 801e790:	ea4f 2922 	mov.w	r9, r2, asr #8
 801e794:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801e798:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801e79c:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 801e7a0:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 801e7a4:	4608      	mov	r0, r1
 801e7a6:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801e7aa:	fb09 f901 	mul.w	r9, r9, r1
 801e7ae:	fb0e fe01 	mul.w	lr, lr, r1
 801e7b2:	00d1      	lsls	r1, r2, #3
 801e7b4:	b2c9      	uxtb	r1, r1
 801e7b6:	4341      	muls	r1, r0
 801e7b8:	429c      	cmp	r4, r3
 801e7ba:	f4bf af61 	bcs.w	801e680 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801e7be:	8822      	ldrh	r2, [r4, #0]
 801e7c0:	1210      	asrs	r0, r2, #8
 801e7c2:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801e7c6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801e7ca:	00d2      	lsls	r2, r2, #3
 801e7cc:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801e7d0:	fb00 900a 	mla	r0, r0, sl, r9
 801e7d4:	b2d2      	uxtb	r2, r2
 801e7d6:	fb0c ec0a 	mla	ip, ip, sl, lr
 801e7da:	b280      	uxth	r0, r0
 801e7dc:	fb02 120a 	mla	r2, r2, sl, r1
 801e7e0:	fa1f fc8c 	uxth.w	ip, ip
 801e7e4:	b292      	uxth	r2, r2
 801e7e6:	f100 0b01 	add.w	fp, r0, #1
 801e7ea:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801e7ee:	1c50      	adds	r0, r2, #1
 801e7f0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e7f4:	f10c 0201 	add.w	r2, ip, #1
 801e7f8:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 801e7fc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e800:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801e804:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e808:	ea40 0b0b 	orr.w	fp, r0, fp
 801e80c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801e810:	ea4b 0b0c 	orr.w	fp, fp, ip
 801e814:	f824 bb02 	strh.w	fp, [r4], #2
 801e818:	e7ce      	b.n	801e7b8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 801e81a:	429c      	cmp	r4, r3
 801e81c:	f4bf af30 	bcs.w	801e680 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801e820:	f824 2b02 	strh.w	r2, [r4], #2
 801e824:	e7f9      	b.n	801e81a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 801e826:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801e82a:	4657      	mov	r7, sl
 801e82c:	464d      	mov	r5, r9
 801e82e:	e727      	b.n	801e680 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801e830:	2300      	movs	r3, #0
 801e832:	e716      	b.n	801e662 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 801e834:	44bb      	add	fp, r7
 801e836:	4657      	mov	r7, sl
 801e838:	e724      	b.n	801e684 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 801e83a:	bf00      	nop
 801e83c:	24006600 	.word	0x24006600
 801e840:	240065fa 	.word	0x240065fa
 801e844:	24000100 	.word	0x24000100
 801e848:	2a01      	cmp	r2, #1
 801e84a:	d12a      	bne.n	801e8a2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 801e84c:	f3c6 0104 	ubfx	r1, r6, #0, #5
 801e850:	f003 0203 	and.w	r2, r3, #3
 801e854:	f3c3 0081 	ubfx	r0, r3, #2, #2
 801e858:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e85c:	3902      	subs	r1, #2
 801e85e:	3802      	subs	r0, #2
 801e860:	3b02      	subs	r3, #2
 801e862:	4411      	add	r1, r2
 801e864:	f001 011f 	and.w	r1, r1, #31
 801e868:	f361 0604 	bfi	r6, r1, #0, #5
 801e86c:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 801e870:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801e874:	f360 164a 	bfi	r6, r0, #5, #6
 801e878:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e87c:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 801e880:	f002 031f 	and.w	r3, r2, #31
 801e884:	2203      	movs	r2, #3
 801e886:	f363 26cf 	bfi	r6, r3, #11, #5
 801e88a:	fb12 0303 	smlabb	r3, r2, r3, r0
 801e88e:	2207      	movs	r2, #7
 801e890:	fb12 3301 	smlabb	r3, r2, r1, r3
 801e894:	9a03      	ldr	r2, [sp, #12]
 801e896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e89a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e89e:	809e      	strh	r6, [r3, #4]
 801e8a0:	e701      	b.n	801e6a6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 801e8a2:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 801e8a6:	4647      	mov	r7, r8
 801e8a8:	45a8      	cmp	r8, r5
 801e8aa:	bfa8      	it	ge
 801e8ac:	462f      	movge	r7, r5
 801e8ae:	2a02      	cmp	r2, #2
 801e8b0:	d154      	bne.n	801e95c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 801e8b2:	9b01      	ldr	r3, [sp, #4]
 801e8b4:	2bff      	cmp	r3, #255	@ 0xff
 801e8b6:	d01a      	beq.n	801e8ee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 801e8b8:	eb0b 0307 	add.w	r3, fp, r7
 801e8bc:	2b40      	cmp	r3, #64	@ 0x40
 801e8be:	dd16      	ble.n	801e8ee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 801e8c0:	ea4f 094b 	mov.w	r9, fp, lsl #1
 801e8c4:	9800      	ldr	r0, [sp, #0]
 801e8c6:	4649      	mov	r1, r9
 801e8c8:	f7f2 fa90 	bl	8010dec <_ZN8touchgfx5paint9flushLineEPmi>
 801e8cc:	465a      	mov	r2, fp
 801e8ce:	9b01      	ldr	r3, [sp, #4]
 801e8d0:	4620      	mov	r0, r4
 801e8d2:	9900      	ldr	r1, [sp, #0]
 801e8d4:	444c      	add	r4, r9
 801e8d6:	f7f2 fac7 	bl	8010e68 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801e8da:	9b00      	ldr	r3, [sp, #0]
 801e8dc:	f04f 0b00 	mov.w	fp, #0
 801e8e0:	461a      	mov	r2, r3
 801e8e2:	4b6a      	ldr	r3, [pc, #424]	@ (801ea8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801e8e4:	429a      	cmp	r2, r3
 801e8e6:	bf0c      	ite	eq
 801e8e8:	4b69      	ldreq	r3, [pc, #420]	@ (801ea90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 801e8ea:	4b68      	ldrne	r3, [pc, #416]	@ (801ea8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801e8ec:	9300      	str	r3, [sp, #0]
 801e8ee:	4652      	mov	r2, sl
 801e8f0:	2100      	movs	r1, #0
 801e8f2:	42a9      	cmp	r1, r5
 801e8f4:	da2c      	bge.n	801e950 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 801e8f6:	4694      	mov	ip, r2
 801e8f8:	f04f 0903 	mov.w	r9, #3
 801e8fc:	42b9      	cmp	r1, r7
 801e8fe:	f81c 3b02 	ldrb.w	r3, [ip], #2
 801e902:	7852      	ldrb	r2, [r2, #1]
 801e904:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e908:	f3c3 1045 	ubfx	r0, r3, #5, #6
 801e90c:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 801e910:	f003 021f 	and.w	r2, r3, #31
 801e914:	461e      	mov	r6, r3
 801e916:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e91a:	fb19 000e 	smlabb	r0, r9, lr, r0
 801e91e:	f04f 0e07 	mov.w	lr, #7
 801e922:	fb1e 0002 	smlabb	r0, lr, r2, r0
 801e926:	9a03      	ldr	r2, [sp, #12]
 801e928:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801e92c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e930:	8083      	strh	r3, [r0, #4]
 801e932:	da0a      	bge.n	801e94a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 801e934:	9a01      	ldr	r2, [sp, #4]
 801e936:	2aff      	cmp	r2, #255	@ 0xff
 801e938:	bf13      	iteet	ne
 801e93a:	9a00      	ldrne	r2, [sp, #0]
 801e93c:	8023      	strheq	r3, [r4, #0]
 801e93e:	3402      	addeq	r4, #2
 801e940:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 801e944:	bf18      	it	ne
 801e946:	f10b 0b01 	addne.w	fp, fp, #1
 801e94a:	3101      	adds	r1, #1
 801e94c:	4662      	mov	r2, ip
 801e94e:	e7d0      	b.n	801e8f2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 801e950:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801e954:	eba8 0807 	sub.w	r8, r8, r7
 801e958:	1bed      	subs	r5, r5, r7
 801e95a:	e76c      	b.n	801e836 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801e95c:	9b01      	ldr	r3, [sp, #4]
 801e95e:	eba8 0807 	sub.w	r8, r8, r7
 801e962:	1bed      	subs	r5, r5, r7
 801e964:	fa1f f986 	uxth.w	r9, r6
 801e968:	2bff      	cmp	r3, #255	@ 0xff
 801e96a:	d027      	beq.n	801e9bc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x574>
 801e96c:	eb0b 0307 	add.w	r3, fp, r7
 801e970:	2b40      	cmp	r3, #64	@ 0x40
 801e972:	dd18      	ble.n	801e9a6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x55e>
 801e974:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801e978:	9800      	ldr	r0, [sp, #0]
 801e97a:	4619      	mov	r1, r3
 801e97c:	930c      	str	r3, [sp, #48]	@ 0x30
 801e97e:	f7f2 fa35 	bl	8010dec <_ZN8touchgfx5paint9flushLineEPmi>
 801e982:	465a      	mov	r2, fp
 801e984:	9b01      	ldr	r3, [sp, #4]
 801e986:	4620      	mov	r0, r4
 801e988:	9900      	ldr	r1, [sp, #0]
 801e98a:	f04f 0b00 	mov.w	fp, #0
 801e98e:	f7f2 fa6b 	bl	8010e68 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801e992:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e994:	441c      	add	r4, r3
 801e996:	9b00      	ldr	r3, [sp, #0]
 801e998:	461a      	mov	r2, r3
 801e99a:	4b3c      	ldr	r3, [pc, #240]	@ (801ea8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801e99c:	429a      	cmp	r2, r3
 801e99e:	bf0c      	ite	eq
 801e9a0:	4b3b      	ldreq	r3, [pc, #236]	@ (801ea90 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 801e9a2:	4b3a      	ldrne	r3, [pc, #232]	@ (801ea8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801e9a4:	9300      	str	r3, [sp, #0]
 801e9a6:	9b00      	ldr	r3, [sp, #0]
 801e9a8:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 801e9ac:	463b      	mov	r3, r7
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	f43f af40 	beq.w	801e834 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 801e9b4:	f822 9b02 	strh.w	r9, [r2], #2
 801e9b8:	3b01      	subs	r3, #1
 801e9ba:	e7f8      	b.n	801e9ae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x566>
 801e9bc:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 801e9c0:	42a7      	cmp	r7, r4
 801e9c2:	f67f af38 	bls.w	801e836 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801e9c6:	f824 9b02 	strh.w	r9, [r4], #2
 801e9ca:	e7f9      	b.n	801e9c0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x578>
 801e9cc:	f1bb 0f00 	cmp.w	fp, #0
 801e9d0:	d00c      	beq.n	801e9ec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a4>
 801e9d2:	ea4f 084b 	mov.w	r8, fp, lsl #1
 801e9d6:	9800      	ldr	r0, [sp, #0]
 801e9d8:	4641      	mov	r1, r8
 801e9da:	f7f2 fa07 	bl	8010dec <_ZN8touchgfx5paint9flushLineEPmi>
 801e9de:	4620      	mov	r0, r4
 801e9e0:	4444      	add	r4, r8
 801e9e2:	9b01      	ldr	r3, [sp, #4]
 801e9e4:	465a      	mov	r2, fp
 801e9e6:	9900      	ldr	r1, [sp, #0]
 801e9e8:	f7f2 fa3e 	bl	8010e68 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801e9ec:	4b29      	ldr	r3, [pc, #164]	@ (801ea94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 801e9ee:	9a02      	ldr	r2, [sp, #8]
 801e9f0:	881b      	ldrh	r3, [r3, #0]
 801e9f2:	1a9b      	subs	r3, r3, r2
 801e9f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e9f8:	9b06      	ldr	r3, [sp, #24]
 801e9fa:	3301      	adds	r3, #1
 801e9fc:	9306      	str	r3, [sp, #24]
 801e9fe:	9a06      	ldr	r2, [sp, #24]
 801ea00:	9b04      	ldr	r3, [sp, #16]
 801ea02:	4293      	cmp	r3, r2
 801ea04:	d120      	bne.n	801ea48 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x600>
 801ea06:	9b05      	ldr	r3, [sp, #20]
 801ea08:	2100      	movs	r1, #0
 801ea0a:	9a05      	ldr	r2, [sp, #20]
 801ea0c:	f04f 0600 	mov.w	r6, #0
 801ea10:	f103 0801 	add.w	r8, r3, #1
 801ea14:	9b08      	ldr	r3, [sp, #32]
 801ea16:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 801ea1a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801ea1e:	2280      	movs	r2, #128	@ 0x80
 801ea20:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801ea24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea26:	ba3f      	rev	r7, r7
 801ea28:	eba9 0905 	sub.w	r9, r9, r5
 801ea2c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ea2e:	441f      	add	r7, r3
 801ea30:	f00a ff07 	bl	8029842 <memset>
 801ea34:	fa1f f989 	uxth.w	r9, r9
 801ea38:	2300      	movs	r3, #0
 801ea3a:	f8cd 8014 	str.w	r8, [sp, #20]
 801ea3e:	9306      	str	r3, [sp, #24]
 801ea40:	f7f2 f9bc 	bl	8010dbc <_ZN8touchgfx5paint8tearDownEv>
 801ea44:	46ba      	mov	sl, r7
 801ea46:	e58b      	b.n	801e560 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 801ea48:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 801ea4c:	9b02      	ldr	r3, [sp, #8]
 801ea4e:	eba9 0903 	sub.w	r9, r9, r3
 801ea52:	eba9 0505 	sub.w	r5, r9, r5
 801ea56:	fa1f f985 	uxth.w	r9, r5
 801ea5a:	e7f1      	b.n	801ea40 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5f8>
 801ea5c:	4b0e      	ldr	r3, [pc, #56]	@ (801ea98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 801ea5e:	6818      	ldr	r0, [r3, #0]
 801ea60:	6803      	ldr	r3, [r0, #0]
 801ea62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ea64:	4798      	blx	r3
 801ea66:	b013      	add	sp, #76	@ 0x4c
 801ea68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea6c:	9b02      	ldr	r3, [sp, #8]
 801ea6e:	9a02      	ldr	r2, [sp, #8]
 801ea70:	42ab      	cmp	r3, r5
 801ea72:	bfa8      	it	ge
 801ea74:	462b      	movge	r3, r5
 801ea76:	eba2 0803 	sub.w	r8, r2, r3
 801ea7a:	1aed      	subs	r5, r5, r3
 801ea7c:	e627      	b.n	801e6ce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 801ea7e:	f108 38ff 	add.w	r8, r8, #4294967295
 801ea82:	fa1f f986 	uxth.w	r9, r6
 801ea86:	2500      	movs	r5, #0
 801ea88:	2701      	movs	r7, #1
 801ea8a:	e76f      	b.n	801e96c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x524>
 801ea8c:	24000100 	.word	0x24000100
 801ea90:	24000200 	.word	0x24000200
 801ea94:	240065fa 	.word	0x240065fa
 801ea98:	24006600 	.word	0x24006600

0801ea9c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaa0:	b08f      	sub	sp, #60	@ 0x3c
 801eaa2:	461c      	mov	r4, r3
 801eaa4:	460f      	mov	r7, r1
 801eaa6:	9203      	str	r2, [sp, #12]
 801eaa8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801eaac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801eaae:	9202      	str	r2, [sp, #8]
 801eab0:	2a00      	cmp	r2, #0
 801eab2:	f000 8128 	beq.w	801ed06 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801eab6:	6820      	ldr	r0, [r4, #0]
 801eab8:	aa0a      	add	r2, sp, #40	@ 0x28
 801eaba:	6861      	ldr	r1, [r4, #4]
 801eabc:	c203      	stmia	r2!, {r0, r1}
 801eabe:	6818      	ldr	r0, [r3, #0]
 801eac0:	aa0c      	add	r2, sp, #48	@ 0x30
 801eac2:	6859      	ldr	r1, [r3, #4]
 801eac4:	c203      	stmia	r2!, {r0, r1}
 801eac6:	a80a      	add	r0, sp, #40	@ 0x28
 801eac8:	f7f8 f9fa 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eacc:	4621      	mov	r1, r4
 801eace:	a80c      	add	r0, sp, #48	@ 0x30
 801ead0:	f7f8 fa3a 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ead4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801ead8:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801eadc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801eae0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801eae4:	bfdb      	ittet	le
 801eae6:	b2b3      	uxthle	r3, r6
 801eae8:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801eaec:	2301      	movgt	r3, #1
 801eaee:	fb92 f3f3 	sdivle	r3, r2, r3
 801eaf2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801eaf6:	441d      	add	r5, r3
 801eaf8:	fb92 f1f3 	sdiv	r1, r2, r3
 801eafc:	fa1f fc81 	uxth.w	ip, r1
 801eb00:	3d01      	subs	r5, #1
 801eb02:	fb0c 2413 	mls	r4, ip, r3, r2
 801eb06:	4661      	mov	r1, ip
 801eb08:	fb14 f406 	smulbb	r4, r4, r6
 801eb0c:	4404      	add	r4, r0
 801eb0e:	fb95 f5f3 	sdiv	r5, r5, r3
 801eb12:	b2a4      	uxth	r4, r4
 801eb14:	b121      	cbz	r1, 801eb20 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 801eb16:	9b03      	ldr	r3, [sp, #12]
 801eb18:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801eb1c:	ba1b      	rev	r3, r3
 801eb1e:	441f      	add	r7, r3
 801eb20:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801eb24:	b2ad      	uxth	r5, r5
 801eb26:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801eb2a:	4418      	add	r0, r3
 801eb2c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801eb30:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801eb34:	00ad      	lsls	r5, r5, #2
 801eb36:	441a      	add	r2, r3
 801eb38:	4b74      	ldr	r3, [pc, #464]	@ (801ed0c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801eb3a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801eb3e:	6818      	ldr	r0, [r3, #0]
 801eb40:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801eb44:	6803      	ldr	r3, [r0, #0]
 801eb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb48:	4798      	blx	r3
 801eb4a:	4a71      	ldr	r2, [pc, #452]	@ (801ed10 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801eb4c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801eb50:	2c00      	cmp	r4, #0
 801eb52:	8813      	ldrh	r3, [r2, #0]
 801eb54:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801eb58:	bf0c      	ite	eq
 801eb5a:	46c8      	moveq	r8, r9
 801eb5c:	f04f 0800 	movne.w	r8, #0
 801eb60:	9209      	str	r2, [sp, #36]	@ 0x24
 801eb62:	fb03 c101 	mla	r1, r3, r1, ip
 801eb66:	4373      	muls	r3, r6
 801eb68:	fa1f f888 	uxth.w	r8, r8
 801eb6c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801eb70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801eb74:	9304      	str	r3, [sp, #16]
 801eb76:	1d2b      	adds	r3, r5, #4
 801eb78:	9305      	str	r3, [sp, #20]
 801eb7a:	2300      	movs	r3, #0
 801eb7c:	9301      	str	r3, [sp, #4]
 801eb7e:	9a04      	ldr	r2, [sp, #16]
 801eb80:	4282      	cmp	r2, r0
 801eb82:	f240 80bb 	bls.w	801ecfc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801eb86:	b95b      	cbnz	r3, 801eba0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 801eb88:	783a      	ldrb	r2, [r7, #0]
 801eb8a:	0993      	lsrs	r3, r2, #6
 801eb8c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801eb90:	9201      	str	r2, [sp, #4]
 801eb92:	1e5a      	subs	r2, r3, #1
 801eb94:	2a02      	cmp	r2, #2
 801eb96:	bf8d      	iteet	hi
 801eb98:	787b      	ldrbhi	r3, [r7, #1]
 801eb9a:	3701      	addls	r7, #1
 801eb9c:	b29b      	uxthls	r3, r3
 801eb9e:	3702      	addhi	r7, #2
 801eba0:	b184      	cbz	r4, 801ebc4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 801eba2:	429c      	cmp	r4, r3
 801eba4:	bf91      	iteee	ls
 801eba6:	1b1c      	subls	r4, r3, r4
 801eba8:	1ae4      	subhi	r4, r4, r3
 801ebaa:	46c4      	movhi	ip, r8
 801ebac:	f04f 0a00 	movhi.w	sl, #0
 801ebb0:	bf9b      	ittet	ls
 801ebb2:	fa1f fa84 	uxthls.w	sl, r4
 801ebb6:	2400      	movls	r4, #0
 801ebb8:	b2a4      	uxthhi	r4, r4
 801ebba:	fa1f fc89 	uxthls.w	ip, r9
 801ebbe:	4653      	mov	r3, sl
 801ebc0:	46e0      	mov	r8, ip
 801ebc2:	e7dc      	b.n	801eb7e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 801ebc4:	2204      	movs	r2, #4
 801ebc6:	9905      	ldr	r1, [sp, #20]
 801ebc8:	4543      	cmp	r3, r8
 801ebca:	4615      	mov	r5, r2
 801ebcc:	9a01      	ldr	r2, [sp, #4]
 801ebce:	bf24      	itt	cs
 801ebd0:	eba3 0a08 	subcs.w	sl, r3, r8
 801ebd4:	46c6      	movcs	lr, r8
 801ebd6:	fb15 1202 	smlabb	r2, r5, r2, r1
 801ebda:	9903      	ldr	r1, [sp, #12]
 801ebdc:	bf3c      	itt	cc
 801ebde:	eba8 0c03 	subcc.w	ip, r8, r3
 801ebe2:	469e      	movcc	lr, r3
 801ebe4:	588a      	ldr	r2, [r1, r2]
 801ebe6:	bf26      	itte	cs
 801ebe8:	fa1f fa8a 	uxthcs.w	sl, sl
 801ebec:	46a4      	movcs	ip, r4
 801ebee:	fa1f fc8c 	uxthcc.w	ip, ip
 801ebf2:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801ebf6:	bf38      	it	cc
 801ebf8:	46a2      	movcc	sl, r4
 801ebfa:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801ebfe:	2900      	cmp	r1, #0
 801ec00:	d066      	beq.n	801ecd0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801ec02:	29ff      	cmp	r1, #255	@ 0xff
 801ec04:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801ec08:	d114      	bne.n	801ec34 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801ec0a:	9d02      	ldr	r5, [sp, #8]
 801ec0c:	2dff      	cmp	r5, #255	@ 0xff
 801ec0e:	d111      	bne.n	801ec34 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801ec10:	0951      	lsrs	r1, r2, #5
 801ec12:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801ec16:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ec1a:	4486      	add	lr, r0
 801ec1c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801ec20:	f026 0607 	bic.w	r6, r6, #7
 801ec24:	430e      	orrs	r6, r1
 801ec26:	4316      	orrs	r6, r2
 801ec28:	b2b6      	uxth	r6, r6
 801ec2a:	4586      	cmp	lr, r0
 801ec2c:	d051      	beq.n	801ecd2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801ec2e:	f820 6b02 	strh.w	r6, [r0], #2
 801ec32:	e7fa      	b.n	801ec2a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801ec34:	9d02      	ldr	r5, [sp, #8]
 801ec36:	b2f6      	uxtb	r6, r6
 801ec38:	4486      	add	lr, r0
 801ec3a:	4369      	muls	r1, r5
 801ec3c:	1c4d      	adds	r5, r1, #1
 801ec3e:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801ec42:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801ec46:	b2d2      	uxtb	r2, r2
 801ec48:	122d      	asrs	r5, r5, #8
 801ec4a:	ea6f 0b05 	mvn.w	fp, r5
 801ec4e:	b2ad      	uxth	r5, r5
 801ec50:	fb11 f105 	smulbb	r1, r1, r5
 801ec54:	fa5f fb8b 	uxtb.w	fp, fp
 801ec58:	fb16 f605 	smulbb	r6, r6, r5
 801ec5c:	fb12 f205 	smulbb	r2, r2, r5
 801ec60:	b289      	uxth	r1, r1
 801ec62:	b2b6      	uxth	r6, r6
 801ec64:	b292      	uxth	r2, r2
 801ec66:	9106      	str	r1, [sp, #24]
 801ec68:	9607      	str	r6, [sp, #28]
 801ec6a:	9208      	str	r2, [sp, #32]
 801ec6c:	4586      	cmp	lr, r0
 801ec6e:	d030      	beq.n	801ecd2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801ec70:	8802      	ldrh	r2, [r0, #0]
 801ec72:	9906      	ldr	r1, [sp, #24]
 801ec74:	1216      	asrs	r6, r2, #8
 801ec76:	10d5      	asrs	r5, r2, #3
 801ec78:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801ec7c:	00d2      	lsls	r2, r2, #3
 801ec7e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801ec82:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ec86:	b2d2      	uxtb	r2, r2
 801ec88:	fb06 160b 	mla	r6, r6, fp, r1
 801ec8c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ec90:	9907      	ldr	r1, [sp, #28]
 801ec92:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ec96:	b2b6      	uxth	r6, r6
 801ec98:	fb05 150b 	mla	r5, r5, fp, r1
 801ec9c:	9908      	ldr	r1, [sp, #32]
 801ec9e:	fb02 120b 	mla	r2, r2, fp, r1
 801eca2:	1c71      	adds	r1, r6, #1
 801eca4:	b2ad      	uxth	r5, r5
 801eca6:	b292      	uxth	r2, r2
 801eca8:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801ecac:	1c51      	adds	r1, r2, #1
 801ecae:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801ecb2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ecb6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ecba:	4316      	orrs	r6, r2
 801ecbc:	1c6a      	adds	r2, r5, #1
 801ecbe:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801ecc2:	096d      	lsrs	r5, r5, #5
 801ecc4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ecc8:	432e      	orrs	r6, r5
 801ecca:	f820 6b02 	strh.w	r6, [r0], #2
 801ecce:	e7cd      	b.n	801ec6c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801ecd0:	4470      	add	r0, lr
 801ecd2:	4543      	cmp	r3, r8
 801ecd4:	f4ff af73 	bcc.w	801ebbe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801ecd8:	fa1f fc89 	uxth.w	ip, r9
 801ecdc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801ece0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ece2:	eba4 040c 	sub.w	r4, r4, ip
 801ece6:	881b      	ldrh	r3, [r3, #0]
 801ece8:	b2a4      	uxth	r4, r4
 801ecea:	eba3 0309 	sub.w	r3, r3, r9
 801ecee:	2c00      	cmp	r4, #0
 801ecf0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ecf4:	bf18      	it	ne
 801ecf6:	f04f 0c00 	movne.w	ip, #0
 801ecfa:	e760      	b.n	801ebbe <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801ecfc:	4b03      	ldr	r3, [pc, #12]	@ (801ed0c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801ecfe:	6818      	ldr	r0, [r3, #0]
 801ed00:	6803      	ldr	r3, [r0, #0]
 801ed02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ed04:	4798      	blx	r3
 801ed06:	b00f      	add	sp, #60	@ 0x3c
 801ed08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed0c:	24006600 	.word	0x24006600
 801ed10:	240065fa 	.word	0x240065fa

0801ed14 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801ed14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed18:	b093      	sub	sp, #76	@ 0x4c
 801ed1a:	461c      	mov	r4, r3
 801ed1c:	9205      	str	r2, [sp, #20]
 801ed1e:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 801ed22:	9101      	str	r1, [sp, #4]
 801ed24:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ed26:	9202      	str	r2, [sp, #8]
 801ed28:	2a00      	cmp	r2, #0
 801ed2a:	f000 812e 	beq.w	801ef8a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 801ed2e:	6820      	ldr	r0, [r4, #0]
 801ed30:	aa0e      	add	r2, sp, #56	@ 0x38
 801ed32:	6861      	ldr	r1, [r4, #4]
 801ed34:	c203      	stmia	r2!, {r0, r1}
 801ed36:	6818      	ldr	r0, [r3, #0]
 801ed38:	aa10      	add	r2, sp, #64	@ 0x40
 801ed3a:	6859      	ldr	r1, [r3, #4]
 801ed3c:	c203      	stmia	r2!, {r0, r1}
 801ed3e:	a80e      	add	r0, sp, #56	@ 0x38
 801ed40:	f7f8 f8be 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed44:	4621      	mov	r1, r4
 801ed46:	a810      	add	r0, sp, #64	@ 0x40
 801ed48:	f7f8 f8fe 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ed4c:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801ed50:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801ed54:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801ed58:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801ed5c:	bfdb      	ittet	le
 801ed5e:	b2b3      	uxthle	r3, r6
 801ed60:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801ed64:	2301      	movgt	r3, #1
 801ed66:	fb92 f3f3 	sdivle	r3, r2, r3
 801ed6a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801ed6e:	441d      	add	r5, r3
 801ed70:	fb92 f1f3 	sdiv	r1, r2, r3
 801ed74:	fa1f fc81 	uxth.w	ip, r1
 801ed78:	3d01      	subs	r5, #1
 801ed7a:	fb0c 2413 	mls	r4, ip, r3, r2
 801ed7e:	4661      	mov	r1, ip
 801ed80:	fb14 f406 	smulbb	r4, r4, r6
 801ed84:	4404      	add	r4, r0
 801ed86:	fb95 f5f3 	sdiv	r5, r5, r3
 801ed8a:	b2a4      	uxth	r4, r4
 801ed8c:	b131      	cbz	r1, 801ed9c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801ed8e:	9b05      	ldr	r3, [sp, #20]
 801ed90:	9901      	ldr	r1, [sp, #4]
 801ed92:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ed96:	ba1b      	rev	r3, r3
 801ed98:	4419      	add	r1, r3
 801ed9a:	9101      	str	r1, [sp, #4]
 801ed9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801eda0:	b2ad      	uxth	r5, r5
 801eda2:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801eda6:	4418      	add	r0, r3
 801eda8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801edac:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 801edb0:	00ad      	lsls	r5, r5, #2
 801edb2:	441a      	add	r2, r3
 801edb4:	4b76      	ldr	r3, [pc, #472]	@ (801ef90 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801edb6:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801edba:	6818      	ldr	r0, [r3, #0]
 801edbc:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801edc0:	6803      	ldr	r3, [r0, #0]
 801edc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801edc4:	4798      	blx	r3
 801edc6:	4973      	ldr	r1, [pc, #460]	@ (801ef94 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801edc8:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 801edcc:	2c00      	cmp	r4, #0
 801edce:	880b      	ldrh	r3, [r1, #0]
 801edd0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801edd4:	910d      	str	r1, [sp, #52]	@ 0x34
 801edd6:	fb03 c202 	mla	r2, r3, r2, ip
 801edda:	bf08      	it	eq
 801eddc:	46dc      	moveq	ip, fp
 801edde:	fb03 f306 	mul.w	r3, r3, r6
 801ede2:	bf18      	it	ne
 801ede4:	f04f 0c00 	movne.w	ip, #0
 801ede8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801edec:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801edf0:	fa1f fc8c 	uxth.w	ip, ip
 801edf4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801edf8:	9106      	str	r1, [sp, #24]
 801edfa:	9308      	str	r3, [sp, #32]
 801edfc:	1d2b      	adds	r3, r5, #4
 801edfe:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee00:	9b02      	ldr	r3, [sp, #8]
 801ee02:	43da      	mvns	r2, r3
 801ee04:	2300      	movs	r3, #0
 801ee06:	b2d2      	uxtb	r2, r2
 801ee08:	9303      	str	r3, [sp, #12]
 801ee0a:	9207      	str	r2, [sp, #28]
 801ee0c:	9a08      	ldr	r2, [sp, #32]
 801ee0e:	4282      	cmp	r2, r0
 801ee10:	f240 80b6 	bls.w	801ef80 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 801ee14:	b963      	cbnz	r3, 801ee30 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801ee16:	9b01      	ldr	r3, [sp, #4]
 801ee18:	781a      	ldrb	r2, [r3, #0]
 801ee1a:	0993      	lsrs	r3, r2, #6
 801ee1c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ee20:	9203      	str	r2, [sp, #12]
 801ee22:	1e5a      	subs	r2, r3, #1
 801ee24:	2a02      	cmp	r2, #2
 801ee26:	d815      	bhi.n	801ee54 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 801ee28:	9a01      	ldr	r2, [sp, #4]
 801ee2a:	b29b      	uxth	r3, r3
 801ee2c:	3201      	adds	r2, #1
 801ee2e:	9201      	str	r2, [sp, #4]
 801ee30:	b1b4      	cbz	r4, 801ee60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 801ee32:	429c      	cmp	r4, r3
 801ee34:	bf91      	iteee	ls
 801ee36:	1b1c      	subls	r4, r3, r4
 801ee38:	1ae4      	subhi	r4, r4, r3
 801ee3a:	4666      	movhi	r6, ip
 801ee3c:	f04f 0800 	movhi.w	r8, #0
 801ee40:	bf9b      	ittet	ls
 801ee42:	fa1f f884 	uxthls.w	r8, r4
 801ee46:	2400      	movls	r4, #0
 801ee48:	b2a4      	uxthhi	r4, r4
 801ee4a:	fa1f f68b 	uxthls.w	r6, fp
 801ee4e:	4643      	mov	r3, r8
 801ee50:	46b4      	mov	ip, r6
 801ee52:	e7db      	b.n	801ee0c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 801ee54:	9a01      	ldr	r2, [sp, #4]
 801ee56:	9b01      	ldr	r3, [sp, #4]
 801ee58:	3202      	adds	r2, #2
 801ee5a:	785b      	ldrb	r3, [r3, #1]
 801ee5c:	9201      	str	r2, [sp, #4]
 801ee5e:	e7e7      	b.n	801ee30 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801ee60:	2203      	movs	r2, #3
 801ee62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ee64:	4563      	cmp	r3, ip
 801ee66:	4615      	mov	r5, r2
 801ee68:	9a03      	ldr	r2, [sp, #12]
 801ee6a:	bf2c      	ite	cs
 801ee6c:	eba3 080c 	subcs.w	r8, r3, ip
 801ee70:	ebac 0603 	subcc.w	r6, ip, r3
 801ee74:	fb15 1202 	smlabb	r2, r5, r2, r1
 801ee78:	9905      	ldr	r1, [sp, #20]
 801ee7a:	bf24      	itt	cs
 801ee7c:	fa1f f888 	uxthcs.w	r8, r8
 801ee80:	46e1      	movcs	r9, ip
 801ee82:	eb01 0502 	add.w	r5, r1, r2
 801ee86:	9902      	ldr	r1, [sp, #8]
 801ee88:	bf2f      	iteee	cs
 801ee8a:	4626      	movcs	r6, r4
 801ee8c:	b2b6      	uxthcc	r6, r6
 801ee8e:	4699      	movcc	r9, r3
 801ee90:	46a0      	movcc	r8, r4
 801ee92:	29ff      	cmp	r1, #255	@ 0xff
 801ee94:	d04a      	beq.n	801ef2c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801ee96:	9f06      	ldr	r7, [sp, #24]
 801ee98:	46ca      	mov	sl, r9
 801ee9a:	78a9      	ldrb	r1, [r5, #2]
 801ee9c:	9004      	str	r0, [sp, #16]
 801ee9e:	4379      	muls	r1, r7
 801eea0:	910a      	str	r1, [sp, #40]	@ 0x28
 801eea2:	7869      	ldrb	r1, [r5, #1]
 801eea4:	4379      	muls	r1, r7
 801eea6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801eea8:	9905      	ldr	r1, [sp, #20]
 801eeaa:	5c8a      	ldrb	r2, [r1, r2]
 801eeac:	437a      	muls	r2, r7
 801eeae:	920c      	str	r2, [sp, #48]	@ 0x30
 801eeb0:	f1ba 0f00 	cmp.w	sl, #0
 801eeb4:	d03d      	beq.n	801ef32 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 801eeb6:	9a04      	ldr	r2, [sp, #16]
 801eeb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eebc:	9f07      	ldr	r7, [sp, #28]
 801eebe:	8812      	ldrh	r2, [r2, #0]
 801eec0:	fa1f fa8a 	uxth.w	sl, sl
 801eec4:	46be      	mov	lr, r7
 801eec6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801eec8:	1215      	asrs	r5, r2, #8
 801eeca:	10d1      	asrs	r1, r2, #3
 801eecc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801eed0:	00d2      	lsls	r2, r2, #3
 801eed2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801eed6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801eeda:	b2d2      	uxtb	r2, r2
 801eedc:	fb05 750e 	mla	r5, r5, lr, r7
 801eee0:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801eee4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801eee6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801eeea:	b2ad      	uxth	r5, r5
 801eeec:	fb01 710e 	mla	r1, r1, lr, r7
 801eef0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801eef2:	fb02 720e 	mla	r2, r2, lr, r7
 801eef6:	f105 0e01 	add.w	lr, r5, #1
 801eefa:	b289      	uxth	r1, r1
 801eefc:	b292      	uxth	r2, r2
 801eefe:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801ef02:	f102 0e01 	add.w	lr, r2, #1
 801ef06:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801ef0a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801ef0e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ef12:	4315      	orrs	r5, r2
 801ef14:	1c4a      	adds	r2, r1, #1
 801ef16:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ef1a:	9a04      	ldr	r2, [sp, #16]
 801ef1c:	0949      	lsrs	r1, r1, #5
 801ef1e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801ef22:	430d      	orrs	r5, r1
 801ef24:	f822 5b02 	strh.w	r5, [r2], #2
 801ef28:	9204      	str	r2, [sp, #16]
 801ef2a:	e7c1      	b.n	801eeb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801ef2c:	4649      	mov	r1, r9
 801ef2e:	4686      	mov	lr, r0
 801ef30:	b999      	cbnz	r1, 801ef5a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 801ef32:	4563      	cmp	r3, ip
 801ef34:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801ef38:	d389      	bcc.n	801ee4e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801ef3a:	fa1f f68b 	uxth.w	r6, fp
 801ef3e:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 801ef42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef44:	1ba4      	subs	r4, r4, r6
 801ef46:	881b      	ldrh	r3, [r3, #0]
 801ef48:	b2a4      	uxth	r4, r4
 801ef4a:	eba3 030b 	sub.w	r3, r3, fp
 801ef4e:	2c00      	cmp	r4, #0
 801ef50:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ef54:	bf18      	it	ne
 801ef56:	2600      	movne	r6, #0
 801ef58:	e779      	b.n	801ee4e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801ef5a:	78aa      	ldrb	r2, [r5, #2]
 801ef5c:	3901      	subs	r1, #1
 801ef5e:	4f0e      	ldr	r7, [pc, #56]	@ (801ef98 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 801ef60:	b289      	uxth	r1, r1
 801ef62:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801ef66:	786a      	ldrb	r2, [r5, #1]
 801ef68:	00d2      	lsls	r2, r2, #3
 801ef6a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ef6e:	ea4a 0202 	orr.w	r2, sl, r2
 801ef72:	f895 a000 	ldrb.w	sl, [r5]
 801ef76:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801ef7a:	f82e 2b02 	strh.w	r2, [lr], #2
 801ef7e:	e7d7      	b.n	801ef30 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 801ef80:	4b03      	ldr	r3, [pc, #12]	@ (801ef90 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801ef82:	6818      	ldr	r0, [r3, #0]
 801ef84:	6803      	ldr	r3, [r0, #0]
 801ef86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ef88:	4798      	blx	r3
 801ef8a:	b013      	add	sp, #76	@ 0x4c
 801ef8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef90:	24006600 	.word	0x24006600
 801ef94:	240065fa 	.word	0x240065fa
 801ef98:	fffff800 	.word	0xfffff800

0801ef9c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ef9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efa0:	b09d      	sub	sp, #116	@ 0x74
 801efa2:	461c      	mov	r4, r3
 801efa4:	4683      	mov	fp, r0
 801efa6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801efa8:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 801efac:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801efb0:	920e      	str	r2, [sp, #56]	@ 0x38
 801efb2:	2a00      	cmp	r2, #0
 801efb4:	f000 81e4 	beq.w	801f380 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 801efb8:	6820      	ldr	r0, [r4, #0]
 801efba:	aa18      	add	r2, sp, #96	@ 0x60
 801efbc:	6861      	ldr	r1, [r4, #4]
 801efbe:	c203      	stmia	r2!, {r0, r1}
 801efc0:	6818      	ldr	r0, [r3, #0]
 801efc2:	aa1a      	add	r2, sp, #104	@ 0x68
 801efc4:	6859      	ldr	r1, [r3, #4]
 801efc6:	c203      	stmia	r2!, {r0, r1}
 801efc8:	a818      	add	r0, sp, #96	@ 0x60
 801efca:	f7f7 ff79 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801efce:	4621      	mov	r1, r4
 801efd0:	a81a      	add	r0, sp, #104	@ 0x68
 801efd2:	f7f7 ffb9 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801efd6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801efda:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 801efde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801efe2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801efe6:	bfdb      	ittet	le
 801efe8:	b29a      	uxthle	r2, r3
 801efea:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801efee:	2201      	movgt	r2, #1
 801eff0:	fb91 f2f2 	sdivle	r2, r1, r2
 801eff4:	9202      	str	r2, [sp, #8]
 801eff6:	9802      	ldr	r0, [sp, #8]
 801eff8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801effc:	9902      	ldr	r1, [sp, #8]
 801effe:	fb92 f0f0 	sdiv	r0, r2, r0
 801f002:	b280      	uxth	r0, r0
 801f004:	440c      	add	r4, r1
 801f006:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f008:	3c01      	subs	r4, #1
 801f00a:	9802      	ldr	r0, [sp, #8]
 801f00c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801f00e:	fb05 2510 	mls	r5, r5, r0, r2
 801f012:	fb94 f4f1 	sdiv	r4, r4, r1
 801f016:	fb15 f503 	smulbb	r5, r5, r3
 801f01a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801f01e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801f022:	3401      	adds	r4, #1
 801f024:	440d      	add	r5, r1
 801f026:	4419      	add	r1, r3
 801f028:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801f02c:	b2a4      	uxth	r4, r4
 801f02e:	441a      	add	r2, r3
 801f030:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801f034:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801f038:	00a4      	lsls	r4, r4, #2
 801f03a:	9306      	str	r3, [sp, #24]
 801f03c:	b2ad      	uxth	r5, r5
 801f03e:	4bb3      	ldr	r3, [pc, #716]	@ (801f30c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801f040:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801f044:	6818      	ldr	r0, [r3, #0]
 801f046:	6803      	ldr	r3, [r0, #0]
 801f048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f04a:	4798      	blx	r3
 801f04c:	4bb0      	ldr	r3, [pc, #704]	@ (801f310 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 801f04e:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801f052:	2d00      	cmp	r5, #0
 801f054:	881a      	ldrh	r2, [r3, #0]
 801f056:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 801f05a:	fb02 f606 	mul.w	r6, r2, r6
 801f05e:	fb02 7101 	mla	r1, r2, r1, r7
 801f062:	9316      	str	r3, [sp, #88]	@ 0x58
 801f064:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801f068:	4baa      	ldr	r3, [pc, #680]	@ (801f314 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 801f06a:	bf18      	it	ne
 801f06c:	2100      	movne	r1, #0
 801f06e:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801f072:	eba3 030b 	sub.w	r3, r3, fp
 801f076:	920a      	str	r2, [sp, #40]	@ 0x28
 801f078:	f104 0204 	add.w	r2, r4, #4
 801f07c:	9317      	str	r3, [sp, #92]	@ 0x5c
 801f07e:	9213      	str	r2, [sp, #76]	@ 0x4c
 801f080:	9a06      	ldr	r2, [sp, #24]
 801f082:	bf08      	it	eq
 801f084:	4611      	moveq	r1, r2
 801f086:	2200      	movs	r2, #0
 801f088:	b289      	uxth	r1, r1
 801f08a:	920d      	str	r2, [sp, #52]	@ 0x34
 801f08c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f08e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f090:	fa12 f383 	uxtah	r3, r2, r3
 801f094:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f096:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f09a:	3304      	adds	r3, #4
 801f09c:	9308      	str	r3, [sp, #32]
 801f09e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f0a0:	4543      	cmp	r3, r8
 801f0a2:	f240 8168 	bls.w	801f376 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 801f0a6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801f0aa:	f04f 0e01 	mov.w	lr, #1
 801f0ae:	9a02      	ldr	r2, [sp, #8]
 801f0b0:	9808      	ldr	r0, [sp, #32]
 801f0b2:	fbb5 f3f3 	udiv	r3, r5, r3
 801f0b6:	1ad3      	subs	r3, r2, r3
 801f0b8:	7800      	ldrb	r0, [r0, #0]
 801f0ba:	b29b      	uxth	r3, r3
 801f0bc:	9010      	str	r0, [sp, #64]	@ 0x40
 801f0be:	3001      	adds	r0, #1
 801f0c0:	9314      	str	r3, [sp, #80]	@ 0x50
 801f0c2:	9b08      	ldr	r3, [sp, #32]
 801f0c4:	9007      	str	r0, [sp, #28]
 801f0c6:	785a      	ldrb	r2, [r3, #1]
 801f0c8:	789b      	ldrb	r3, [r3, #2]
 801f0ca:	021b      	lsls	r3, r3, #8
 801f0cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f0d0:	9a08      	ldr	r2, [sp, #32]
 801f0d2:	78d2      	ldrb	r2, [r2, #3]
 801f0d4:	4313      	orrs	r3, r2
 801f0d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f0d8:	441a      	add	r2, r3
 801f0da:	1c50      	adds	r0, r2, #1
 801f0dc:	7852      	ldrb	r2, [r2, #1]
 801f0de:	9005      	str	r0, [sp, #20]
 801f0e0:	0212      	lsls	r2, r2, #8
 801f0e2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f0e4:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801f0e8:	5cc3      	ldrb	r3, [r0, r3]
 801f0ea:	431a      	orrs	r2, r3
 801f0ec:	b293      	uxth	r3, r2
 801f0ee:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 801f0f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f0f4:	2300      	movs	r3, #0
 801f0f6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f0f8:	2301      	movs	r3, #1
 801f0fa:	9301      	str	r3, [sp, #4]
 801f0fc:	9304      	str	r3, [sp, #16]
 801f0fe:	2300      	movs	r3, #0
 801f100:	9303      	str	r3, [sp, #12]
 801f102:	2d00      	cmp	r5, #0
 801f104:	d07d      	beq.n	801f202 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801f106:	45ae      	cmp	lr, r5
 801f108:	d26c      	bcs.n	801f1e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 801f10a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f10c:	eba5 050e 	sub.w	r5, r5, lr
 801f110:	460c      	mov	r4, r1
 801f112:	4543      	cmp	r3, r8
 801f114:	b2ad      	uxth	r5, r5
 801f116:	d802      	bhi.n	801f11e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801f118:	e071      	b.n	801f1fe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 801f11a:	2b00      	cmp	r3, #0
 801f11c:	d15d      	bne.n	801f1da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 801f11e:	9b05      	ldr	r3, [sp, #20]
 801f120:	9a04      	ldr	r2, [sp, #16]
 801f122:	785b      	ldrb	r3, [r3, #1]
 801f124:	f1c2 0207 	rsb	r2, r2, #7
 801f128:	9904      	ldr	r1, [sp, #16]
 801f12a:	4093      	lsls	r3, r2
 801f12c:	005b      	lsls	r3, r3, #1
 801f12e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801f132:	9b05      	ldr	r3, [sp, #20]
 801f134:	781b      	ldrb	r3, [r3, #0]
 801f136:	410b      	asrs	r3, r1
 801f138:	3101      	adds	r1, #1
 801f13a:	b2c9      	uxtb	r1, r1
 801f13c:	b2db      	uxtb	r3, r3
 801f13e:	2908      	cmp	r1, #8
 801f140:	9104      	str	r1, [sp, #16]
 801f142:	9905      	ldr	r1, [sp, #20]
 801f144:	ea43 0302 	orr.w	r3, r3, r2
 801f148:	bf0c      	ite	eq
 801f14a:	3102      	addeq	r1, #2
 801f14c:	3101      	addne	r1, #1
 801f14e:	b29a      	uxth	r2, r3
 801f150:	bf05      	ittet	eq
 801f152:	9105      	streq	r1, [sp, #20]
 801f154:	2100      	moveq	r1, #0
 801f156:	9105      	strne	r1, [sp, #20]
 801f158:	9104      	streq	r1, [sp, #16]
 801f15a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f15c:	4291      	cmp	r1, r2
 801f15e:	d30a      	bcc.n	801f176 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 801f160:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 801f164:	2301      	movs	r3, #1
 801f166:	9907      	ldr	r1, [sp, #28]
 801f168:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801f16c:	d30f      	bcc.n	801f18e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801f16e:	2100      	movs	r1, #0
 801f170:	9301      	str	r3, [sp, #4]
 801f172:	9103      	str	r1, [sp, #12]
 801f174:	e032      	b.n	801f1dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801f176:	9b07      	ldr	r3, [sp, #28]
 801f178:	429a      	cmp	r2, r3
 801f17a:	d318      	bcc.n	801f1ae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 801f17c:	9b01      	ldr	r3, [sp, #4]
 801f17e:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 801f182:	445b      	add	r3, fp
 801f184:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801f188:	9b01      	ldr	r3, [sp, #4]
 801f18a:	3301      	adds	r3, #1
 801f18c:	b29b      	uxth	r3, r3
 801f18e:	9907      	ldr	r1, [sp, #28]
 801f190:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 801f194:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801f198:	7108      	strb	r0, [r1, #4]
 801f19a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f19c:	80c8      	strh	r0, [r1, #6]
 801f19e:	9801      	ldr	r0, [sp, #4]
 801f1a0:	3001      	adds	r0, #1
 801f1a2:	7148      	strb	r0, [r1, #5]
 801f1a4:	9907      	ldr	r1, [sp, #28]
 801f1a6:	3101      	adds	r1, #1
 801f1a8:	b289      	uxth	r1, r1
 801f1aa:	9107      	str	r1, [sp, #28]
 801f1ac:	e7df      	b.n	801f16e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801f1ae:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801f1b2:	4611      	mov	r1, r2
 801f1b4:	795b      	ldrb	r3, [r3, #5]
 801f1b6:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 801f1ba:	4458      	add	r0, fp
 801f1bc:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801f1be:	4406      	add	r6, r0
 801f1c0:	2e00      	cmp	r6, #0
 801f1c2:	dd06      	ble.n	801f1d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801f1c4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801f1c8:	790e      	ldrb	r6, [r1, #4]
 801f1ca:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801f1ce:	88c9      	ldrh	r1, [r1, #6]
 801f1d0:	e7f4      	b.n	801f1bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 801f1d2:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 801f1d6:	b29b      	uxth	r3, r3
 801f1d8:	e7c5      	b.n	801f166 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801f1da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f1dc:	4621      	mov	r1, r4
 801f1de:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f1e0:	469e      	mov	lr, r3
 801f1e2:	e78e      	b.n	801f102 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 801f1e4:	9a03      	ldr	r2, [sp, #12]
 801f1e6:	ebae 0305 	sub.w	r3, lr, r5
 801f1ea:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801f1ee:	442a      	add	r2, r5
 801f1f0:	b29b      	uxth	r3, r3
 801f1f2:	b292      	uxth	r2, r2
 801f1f4:	9203      	str	r2, [sp, #12]
 801f1f6:	2500      	movs	r5, #0
 801f1f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f1fa:	4542      	cmp	r2, r8
 801f1fc:	d88d      	bhi.n	801f11a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 801f1fe:	4621      	mov	r1, r4
 801f200:	e74d      	b.n	801f09e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 801f202:	458e      	cmp	lr, r1
 801f204:	f04f 0900 	mov.w	r9, #0
 801f208:	bf2b      	itete	cs
 801f20a:	ebae 0301 	subcs.w	r3, lr, r1
 801f20e:	eba1 040e 	subcc.w	r4, r1, lr
 801f212:	462c      	movcs	r4, r5
 801f214:	462b      	movcc	r3, r5
 801f216:	bf27      	ittee	cs
 801f218:	b29b      	uxthcs	r3, r3
 801f21a:	910c      	strcs	r1, [sp, #48]	@ 0x30
 801f21c:	b2a4      	uxthcc	r4, r4
 801f21e:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 801f222:	9a03      	ldr	r2, [sp, #12]
 801f224:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801f226:	444a      	add	r2, r9
 801f228:	4548      	cmp	r0, r9
 801f22a:	b292      	uxth	r2, r2
 801f22c:	d074      	beq.n	801f318 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 801f22e:	2004      	movs	r0, #4
 801f230:	445a      	add	r2, fp
 801f232:	4605      	mov	r5, r0
 801f234:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801f238:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f23a:	fb15 0202 	smlabb	r2, r5, r2, r0
 801f23e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f240:	5880      	ldr	r0, [r0, r2]
 801f242:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801f246:	d014      	beq.n	801f272 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801f248:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801f24c:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801f250:	d112      	bne.n	801f278 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801f252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f254:	2aff      	cmp	r2, #255	@ 0xff
 801f256:	d10f      	bne.n	801f278 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801f258:	0942      	lsrs	r2, r0, #5
 801f25a:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801f25e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f262:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f266:	f025 0507 	bic.w	r5, r5, #7
 801f26a:	4315      	orrs	r5, r2
 801f26c:	4305      	orrs	r5, r0
 801f26e:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801f272:	f109 0901 	add.w	r9, r9, #1
 801f276:	e7d4      	b.n	801f222 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 801f278:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801f27c:	b2ed      	uxtb	r5, r5
 801f27e:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f282:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f286:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 801f28a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f28e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801f292:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f296:	9215      	str	r2, [sp, #84]	@ 0x54
 801f298:	fa5f fc8c 	uxtb.w	ip, ip
 801f29c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f29e:	b2c0      	uxtb	r0, r0
 801f2a0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801f2a4:	fb02 fa0a 	mul.w	sl, r2, sl
 801f2a8:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f2ac:	f10a 0201 	add.w	r2, sl, #1
 801f2b0:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801f2b4:	1212      	asrs	r2, r2, #8
 801f2b6:	fa1f fa82 	uxth.w	sl, r2
 801f2ba:	43d2      	mvns	r2, r2
 801f2bc:	fb16 f60a 	smulbb	r6, r6, sl
 801f2c0:	b2d2      	uxtb	r2, r2
 801f2c2:	fb10 f00a 	smulbb	r0, r0, sl
 801f2c6:	fb07 6702 	mla	r7, r7, r2, r6
 801f2ca:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f2cc:	fb0c 0002 	mla	r0, ip, r2, r0
 801f2d0:	fb15 f50a 	smulbb	r5, r5, sl
 801f2d4:	b2bf      	uxth	r7, r7
 801f2d6:	b280      	uxth	r0, r0
 801f2d8:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801f2dc:	fb06 5602 	mla	r6, r6, r2, r5
 801f2e0:	1c7a      	adds	r2, r7, #1
 801f2e2:	1c45      	adds	r5, r0, #1
 801f2e4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f2e8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f2ec:	b2b6      	uxth	r6, r6
 801f2ee:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f2f2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f2f6:	432f      	orrs	r7, r5
 801f2f8:	1c75      	adds	r5, r6, #1
 801f2fa:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801f2fe:	096d      	lsrs	r5, r5, #5
 801f300:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f304:	432f      	orrs	r7, r5
 801f306:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801f30a:	e7b2      	b.n	801f272 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801f30c:	24006600 	.word	0x24006600
 801f310:	240065fa 	.word	0x240065fa
 801f314:	fffff7fb 	.word	0xfffff7fb
 801f318:	9203      	str	r2, [sp, #12]
 801f31a:	458e      	cmp	lr, r1
 801f31c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f31e:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801f322:	f4ff af68 	bcc.w	801f1f6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801f326:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f328:	9906      	ldr	r1, [sp, #24]
 801f32a:	8812      	ldrh	r2, [r2, #0]
 801f32c:	1a52      	subs	r2, r2, r1
 801f32e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801f330:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801f334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f336:	3201      	adds	r2, #1
 801f338:	428a      	cmp	r2, r1
 801f33a:	9209      	str	r2, [sp, #36]	@ 0x24
 801f33c:	d111      	bne.n	801f362 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 801f33e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801f342:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 801f346:	9b06      	ldr	r3, [sp, #24]
 801f348:	eba5 0509 	sub.w	r5, r5, r9
 801f34c:	b2ad      	uxth	r5, r5
 801f34e:	2d00      	cmp	r5, #0
 801f350:	bf08      	it	eq
 801f352:	4619      	moveq	r1, r3
 801f354:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f356:	bf18      	it	ne
 801f358:	2100      	movne	r1, #0
 801f35a:	3301      	adds	r3, #1
 801f35c:	b289      	uxth	r1, r1
 801f35e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f360:	e694      	b.n	801f08c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 801f362:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801f366:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801f36a:	1b2d      	subs	r5, r5, r4
 801f36c:	b2ad      	uxth	r5, r5
 801f36e:	2d00      	cmp	r5, #0
 801f370:	bf18      	it	ne
 801f372:	2400      	movne	r4, #0
 801f374:	e740      	b.n	801f1f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 801f376:	4b04      	ldr	r3, [pc, #16]	@ (801f388 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 801f378:	6818      	ldr	r0, [r3, #0]
 801f37a:	6803      	ldr	r3, [r0, #0]
 801f37c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f37e:	4798      	blx	r3
 801f380:	b01d      	add	sp, #116	@ 0x74
 801f382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f386:	bf00      	nop
 801f388:	24006600 	.word	0x24006600

0801f38c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f390:	b09f      	sub	sp, #124	@ 0x7c
 801f392:	461d      	mov	r5, r3
 801f394:	4604      	mov	r4, r0
 801f396:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f398:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801f39c:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801f3a0:	920a      	str	r2, [sp, #40]	@ 0x28
 801f3a2:	2a00      	cmp	r2, #0
 801f3a4:	f000 81fe 	beq.w	801f7a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 801f3a8:	6828      	ldr	r0, [r5, #0]
 801f3aa:	aa1a      	add	r2, sp, #104	@ 0x68
 801f3ac:	6869      	ldr	r1, [r5, #4]
 801f3ae:	c203      	stmia	r2!, {r0, r1}
 801f3b0:	6818      	ldr	r0, [r3, #0]
 801f3b2:	aa1c      	add	r2, sp, #112	@ 0x70
 801f3b4:	6859      	ldr	r1, [r3, #4]
 801f3b6:	c203      	stmia	r2!, {r0, r1}
 801f3b8:	a81a      	add	r0, sp, #104	@ 0x68
 801f3ba:	f7f7 fd81 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f3be:	4629      	mov	r1, r5
 801f3c0:	a81c      	add	r0, sp, #112	@ 0x70
 801f3c2:	f7f7 fdc1 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f3c6:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801f3ca:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801f3ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801f3d2:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 801f3d6:	bfdb      	ittet	le
 801f3d8:	b29a      	uxthle	r2, r3
 801f3da:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801f3de:	2201      	movgt	r2, #1
 801f3e0:	fb91 f2f2 	sdivle	r2, r1, r2
 801f3e4:	9201      	str	r2, [sp, #4]
 801f3e6:	9801      	ldr	r0, [sp, #4]
 801f3e8:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801f3ec:	9901      	ldr	r1, [sp, #4]
 801f3ee:	fb92 f0f0 	sdiv	r0, r2, r0
 801f3f2:	b280      	uxth	r0, r0
 801f3f4:	440e      	add	r6, r1
 801f3f6:	9010      	str	r0, [sp, #64]	@ 0x40
 801f3f8:	3e01      	subs	r6, #1
 801f3fa:	9801      	ldr	r0, [sp, #4]
 801f3fc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801f3fe:	fb05 2510 	mls	r5, r5, r0, r2
 801f402:	fb96 f6f1 	sdiv	r6, r6, r1
 801f406:	fb15 f503 	smulbb	r5, r5, r3
 801f40a:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801f40e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801f412:	3601      	adds	r6, #1
 801f414:	440d      	add	r5, r1
 801f416:	4419      	add	r1, r3
 801f418:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801f41c:	b2b6      	uxth	r6, r6
 801f41e:	441a      	add	r2, r3
 801f420:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801f424:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801f428:	b2ad      	uxth	r5, r5
 801f42a:	9304      	str	r3, [sp, #16]
 801f42c:	4b96      	ldr	r3, [pc, #600]	@ (801f688 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801f42e:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801f432:	6818      	ldr	r0, [r3, #0]
 801f434:	6803      	ldr	r3, [r0, #0]
 801f436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f438:	4798      	blx	r3
 801f43a:	4b94      	ldr	r3, [pc, #592]	@ (801f68c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 801f43c:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801f440:	2d00      	cmp	r5, #0
 801f442:	881a      	ldrh	r2, [r3, #0]
 801f444:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 801f448:	fb02 f707 	mul.w	r7, r2, r7
 801f44c:	fb02 c101 	mla	r1, r2, r1, ip
 801f450:	9318      	str	r3, [sp, #96]	@ 0x60
 801f452:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801f456:	4b8e      	ldr	r3, [pc, #568]	@ (801f690 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801f458:	bf18      	it	ne
 801f45a:	2100      	movne	r1, #0
 801f45c:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801f460:	eba3 0304 	sub.w	r3, r3, r4
 801f464:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f466:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f468:	9319      	str	r3, [sp, #100]	@ 0x64
 801f46a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f46e:	f106 0204 	add.w	r2, r6, #4
 801f472:	9206      	str	r2, [sp, #24]
 801f474:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f476:	ea6f 0202 	mvn.w	r2, r2
 801f47a:	b2d2      	uxtb	r2, r2
 801f47c:	9215      	str	r2, [sp, #84]	@ 0x54
 801f47e:	9a04      	ldr	r2, [sp, #16]
 801f480:	bf08      	it	eq
 801f482:	4611      	moveq	r1, r2
 801f484:	2200      	movs	r2, #0
 801f486:	b289      	uxth	r1, r1
 801f488:	920d      	str	r2, [sp, #52]	@ 0x34
 801f48a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f48c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f48e:	fa12 f383 	uxtah	r3, r2, r3
 801f492:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f494:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f498:	3304      	adds	r3, #4
 801f49a:	9307      	str	r3, [sp, #28]
 801f49c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f49e:	455b      	cmp	r3, fp
 801f4a0:	f240 817b 	bls.w	801f79a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 801f4a4:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801f4a8:	f04f 0801 	mov.w	r8, #1
 801f4ac:	9a01      	ldr	r2, [sp, #4]
 801f4ae:	9807      	ldr	r0, [sp, #28]
 801f4b0:	46c4      	mov	ip, r8
 801f4b2:	f8cd 8008 	str.w	r8, [sp, #8]
 801f4b6:	7800      	ldrb	r0, [r0, #0]
 801f4b8:	fbb5 f3f3 	udiv	r3, r5, r3
 801f4bc:	1ad3      	subs	r3, r2, r3
 801f4be:	9011      	str	r0, [sp, #68]	@ 0x44
 801f4c0:	3001      	adds	r0, #1
 801f4c2:	b29b      	uxth	r3, r3
 801f4c4:	9005      	str	r0, [sp, #20]
 801f4c6:	9316      	str	r3, [sp, #88]	@ 0x58
 801f4c8:	9b07      	ldr	r3, [sp, #28]
 801f4ca:	785a      	ldrb	r2, [r3, #1]
 801f4cc:	789b      	ldrb	r3, [r3, #2]
 801f4ce:	021b      	lsls	r3, r3, #8
 801f4d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f4d4:	9a07      	ldr	r2, [sp, #28]
 801f4d6:	78d2      	ldrb	r2, [r2, #3]
 801f4d8:	4313      	orrs	r3, r2
 801f4da:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f4dc:	441a      	add	r2, r3
 801f4de:	1c50      	adds	r0, r2, #1
 801f4e0:	7852      	ldrb	r2, [r2, #1]
 801f4e2:	9003      	str	r0, [sp, #12]
 801f4e4:	0212      	lsls	r2, r2, #8
 801f4e6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f4e8:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801f4ec:	5cc3      	ldrb	r3, [r0, r3]
 801f4ee:	431a      	orrs	r2, r3
 801f4f0:	b293      	uxth	r3, r2
 801f4f2:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801f4f6:	930c      	str	r3, [sp, #48]	@ 0x30
 801f4f8:	2300      	movs	r3, #0
 801f4fa:	9308      	str	r3, [sp, #32]
 801f4fc:	461a      	mov	r2, r3
 801f4fe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f502:	930e      	str	r3, [sp, #56]	@ 0x38
 801f504:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801f508:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f50a:	2d00      	cmp	r5, #0
 801f50c:	d07d      	beq.n	801f60a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 801f50e:	45ac      	cmp	ip, r5
 801f510:	d26d      	bcs.n	801f5ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 801f512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f514:	eba5 050c 	sub.w	r5, r5, ip
 801f518:	4608      	mov	r0, r1
 801f51a:	455b      	cmp	r3, fp
 801f51c:	b2ad      	uxth	r5, r5
 801f51e:	d802      	bhi.n	801f526 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 801f520:	e071      	b.n	801f606 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 801f522:	2b00      	cmp	r3, #0
 801f524:	d15d      	bne.n	801f5e2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 801f526:	9b03      	ldr	r3, [sp, #12]
 801f528:	9a02      	ldr	r2, [sp, #8]
 801f52a:	785b      	ldrb	r3, [r3, #1]
 801f52c:	f1c2 0207 	rsb	r2, r2, #7
 801f530:	9902      	ldr	r1, [sp, #8]
 801f532:	4093      	lsls	r3, r2
 801f534:	005b      	lsls	r3, r3, #1
 801f536:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801f53a:	9b03      	ldr	r3, [sp, #12]
 801f53c:	781b      	ldrb	r3, [r3, #0]
 801f53e:	410b      	asrs	r3, r1
 801f540:	3101      	adds	r1, #1
 801f542:	b2c9      	uxtb	r1, r1
 801f544:	b2db      	uxtb	r3, r3
 801f546:	2908      	cmp	r1, #8
 801f548:	9102      	str	r1, [sp, #8]
 801f54a:	9903      	ldr	r1, [sp, #12]
 801f54c:	ea43 0302 	orr.w	r3, r3, r2
 801f550:	bf0c      	ite	eq
 801f552:	3102      	addeq	r1, #2
 801f554:	3101      	addne	r1, #1
 801f556:	b29a      	uxth	r2, r3
 801f558:	bf05      	ittet	eq
 801f55a:	9103      	streq	r1, [sp, #12]
 801f55c:	2100      	moveq	r1, #0
 801f55e:	9103      	strne	r1, [sp, #12]
 801f560:	9102      	streq	r1, [sp, #8]
 801f562:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f564:	4291      	cmp	r1, r2
 801f566:	d30a      	bcc.n	801f57e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801f568:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801f56c:	2301      	movs	r3, #1
 801f56e:	9905      	ldr	r1, [sp, #20]
 801f570:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801f574:	d30f      	bcc.n	801f596 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801f576:	2100      	movs	r1, #0
 801f578:	4698      	mov	r8, r3
 801f57a:	9100      	str	r1, [sp, #0]
 801f57c:	e032      	b.n	801f5e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 801f57e:	9b05      	ldr	r3, [sp, #20]
 801f580:	429a      	cmp	r2, r3
 801f582:	d318      	bcc.n	801f5b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801f584:	eb04 0308 	add.w	r3, r4, r8
 801f588:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801f58c:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801f590:	f108 0301 	add.w	r3, r8, #1
 801f594:	b29b      	uxth	r3, r3
 801f596:	9905      	ldr	r1, [sp, #20]
 801f598:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801f59c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f5a0:	710e      	strb	r6, [r1, #4]
 801f5a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f5a4:	80ce      	strh	r6, [r1, #6]
 801f5a6:	f108 0601 	add.w	r6, r8, #1
 801f5aa:	714e      	strb	r6, [r1, #5]
 801f5ac:	9905      	ldr	r1, [sp, #20]
 801f5ae:	3101      	adds	r1, #1
 801f5b0:	b289      	uxth	r1, r1
 801f5b2:	9105      	str	r1, [sp, #20]
 801f5b4:	e7df      	b.n	801f576 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801f5b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f5ba:	4611      	mov	r1, r2
 801f5bc:	795b      	ldrb	r3, [r3, #5]
 801f5be:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801f5c2:	4426      	add	r6, r4
 801f5c4:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801f5c6:	4437      	add	r7, r6
 801f5c8:	2f00      	cmp	r7, #0
 801f5ca:	dd06      	ble.n	801f5da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 801f5cc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f5d0:	790f      	ldrb	r7, [r1, #4]
 801f5d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f5d6:	88c9      	ldrh	r1, [r1, #6]
 801f5d8:	e7f4      	b.n	801f5c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801f5da:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801f5de:	b29b      	uxth	r3, r3
 801f5e0:	e7c5      	b.n	801f56e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 801f5e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f5e4:	920c      	str	r2, [sp, #48]	@ 0x30
 801f5e6:	4601      	mov	r1, r0
 801f5e8:	9a00      	ldr	r2, [sp, #0]
 801f5ea:	469c      	mov	ip, r3
 801f5ec:	e78d      	b.n	801f50a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801f5ee:	ebac 0305 	sub.w	r3, ip, r5
 801f5f2:	1957      	adds	r7, r2, r5
 801f5f4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801f5f8:	b2ba      	uxth	r2, r7
 801f5fa:	b29b      	uxth	r3, r3
 801f5fc:	9200      	str	r2, [sp, #0]
 801f5fe:	2500      	movs	r5, #0
 801f600:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f602:	455a      	cmp	r2, fp
 801f604:	d88d      	bhi.n	801f522 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 801f606:	4601      	mov	r1, r0
 801f608:	e748      	b.n	801f49c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 801f60a:	458c      	cmp	ip, r1
 801f60c:	bf27      	ittee	cs
 801f60e:	ebac 0301 	subcs.w	r3, ip, r1
 801f612:	4628      	movcs	r0, r5
 801f614:	eba1 000c 	subcc.w	r0, r1, ip
 801f618:	462b      	movcc	r3, r5
 801f61a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801f61c:	bf27      	ittee	cs
 801f61e:	b29b      	uxthcs	r3, r3
 801f620:	9109      	strcs	r1, [sp, #36]	@ 0x24
 801f622:	b280      	uxthcc	r0, r0
 801f624:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 801f628:	2dff      	cmp	r5, #255	@ 0xff
 801f62a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801f62c:	eb02 0705 	add.w	r7, r2, r5
 801f630:	b2bd      	uxth	r5, r7
 801f632:	9500      	str	r5, [sp, #0]
 801f634:	d12e      	bne.n	801f694 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 801f636:	465e      	mov	r6, fp
 801f638:	9d00      	ldr	r5, [sp, #0]
 801f63a:	42aa      	cmp	r2, r5
 801f63c:	f040 8083 	bne.w	801f746 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801f640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f642:	458c      	cmp	ip, r1
 801f644:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801f648:	d3d9      	bcc.n	801f5fe <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801f64a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f64c:	9904      	ldr	r1, [sp, #16]
 801f64e:	8812      	ldrh	r2, [r2, #0]
 801f650:	1a52      	subs	r2, r2, r1
 801f652:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f654:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801f658:	9a08      	ldr	r2, [sp, #32]
 801f65a:	3201      	adds	r2, #1
 801f65c:	428a      	cmp	r2, r1
 801f65e:	9208      	str	r2, [sp, #32]
 801f660:	f040 8091 	bne.w	801f786 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 801f664:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801f668:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 801f66c:	9b04      	ldr	r3, [sp, #16]
 801f66e:	eba5 050c 	sub.w	r5, r5, ip
 801f672:	b2ad      	uxth	r5, r5
 801f674:	2d00      	cmp	r5, #0
 801f676:	bf08      	it	eq
 801f678:	4619      	moveq	r1, r3
 801f67a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f67c:	bf18      	it	ne
 801f67e:	2100      	movne	r1, #0
 801f680:	3301      	adds	r3, #1
 801f682:	b289      	uxth	r1, r1
 801f684:	930d      	str	r3, [sp, #52]	@ 0x34
 801f686:	e700      	b.n	801f48a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 801f688:	24006600 	.word	0x24006600
 801f68c:	240065fa 	.word	0x240065fa
 801f690:	fffff7fb 	.word	0xfffff7fb
 801f694:	46d9      	mov	r9, fp
 801f696:	9d00      	ldr	r5, [sp, #0]
 801f698:	42aa      	cmp	r2, r5
 801f69a:	d0d1      	beq.n	801f640 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 801f69c:	1c55      	adds	r5, r2, #1
 801f69e:	4422      	add	r2, r4
 801f6a0:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 801f6a4:	9a06      	ldr	r2, [sp, #24]
 801f6a6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f6aa:	9517      	str	r5, [sp, #92]	@ 0x5c
 801f6ac:	4472      	add	r2, lr
 801f6ae:	9212      	str	r2, [sp, #72]	@ 0x48
 801f6b0:	f8b9 2000 	ldrh.w	r2, [r9]
 801f6b4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f6b6:	1216      	asrs	r6, r2, #8
 801f6b8:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f6bc:	10d5      	asrs	r5, r2, #3
 801f6be:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801f6c0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f6c4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f6c8:	00d2      	lsls	r2, r2, #3
 801f6ca:	fb1a fa07 	smulbb	sl, sl, r7
 801f6ce:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f6d2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f6d4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801f6d8:	b2d2      	uxtb	r2, r2
 801f6da:	fb06 a607 	mla	r6, r6, r7, sl
 801f6de:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f6e0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f6e4:	f897 a001 	ldrb.w	sl, [r7, #1]
 801f6e8:	b2b6      	uxth	r6, r6
 801f6ea:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801f6ec:	fb1a fa07 	smulbb	sl, sl, r7
 801f6f0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f6f2:	fb05 a507 	mla	r5, r5, r7, sl
 801f6f6:	9f06      	ldr	r7, [sp, #24]
 801f6f8:	f106 0a01 	add.w	sl, r6, #1
 801f6fc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f700:	b2ad      	uxth	r5, r5
 801f702:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801f704:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801f708:	f105 0a01 	add.w	sl, r5, #1
 801f70c:	fb1e fe07 	smulbb	lr, lr, r7
 801f710:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f712:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f716:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f71a:	fb02 e207 	mla	r2, r2, r7, lr
 801f71e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f722:	b292      	uxth	r2, r2
 801f724:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f728:	f102 0e01 	add.w	lr, r2, #1
 801f72c:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801f730:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801f734:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f738:	ea4e 0606 	orr.w	r6, lr, r6
 801f73c:	ea46 060a 	orr.w	r6, r6, sl
 801f740:	f829 6b02 	strh.w	r6, [r9], #2
 801f744:	e7a7      	b.n	801f696 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 801f746:	f102 0e01 	add.w	lr, r2, #1
 801f74a:	4422      	add	r2, r4
 801f74c:	9f06      	ldr	r7, [sp, #24]
 801f74e:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 801f752:	9a06      	ldr	r2, [sp, #24]
 801f754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f758:	eb02 0a05 	add.w	sl, r2, r5
 801f75c:	4a13      	ldr	r2, [pc, #76]	@ (801f7ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 801f75e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f762:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801f766:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f76a:	00d2      	lsls	r2, r2, #3
 801f76c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f770:	ea49 0202 	orr.w	r2, r9, r2
 801f774:	f817 9005 	ldrb.w	r9, [r7, r5]
 801f778:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801f77c:	f826 2b02 	strh.w	r2, [r6], #2
 801f780:	fa1f f28e 	uxth.w	r2, lr
 801f784:	e758      	b.n	801f638 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 801f786:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801f78a:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801f78e:	1a2d      	subs	r5, r5, r0
 801f790:	b2ad      	uxth	r5, r5
 801f792:	2d00      	cmp	r5, #0
 801f794:	bf18      	it	ne
 801f796:	2000      	movne	r0, #0
 801f798:	e732      	b.n	801f600 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 801f79a:	4b05      	ldr	r3, [pc, #20]	@ (801f7b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 801f79c:	6818      	ldr	r0, [r3, #0]
 801f79e:	6803      	ldr	r3, [r0, #0]
 801f7a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f7a2:	4798      	blx	r3
 801f7a4:	b01f      	add	sp, #124	@ 0x7c
 801f7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7aa:	bf00      	nop
 801f7ac:	fffff800 	.word	0xfffff800
 801f7b0:	24006600 	.word	0x24006600

0801f7b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801f7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7b8:	b091      	sub	sp, #68	@ 0x44
 801f7ba:	469b      	mov	fp, r3
 801f7bc:	4616      	mov	r6, r2
 801f7be:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f7c2:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 801f7c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f7ca:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 801f7ce:	4604      	mov	r4, r0
 801f7d0:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801f7d4:	4640      	mov	r0, r8
 801f7d6:	460d      	mov	r5, r1
 801f7d8:	4659      	mov	r1, fp
 801f7da:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801f7de:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801f7e2:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 801f7e6:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 801f7ea:	f7f3 fabb 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 801f7ee:	4631      	mov	r1, r6
 801f7f0:	4640      	mov	r0, r8
 801f7f2:	f7f3 fab7 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 801f7f6:	4b74      	ldr	r3, [pc, #464]	@ (801f9c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801f7f8:	8818      	ldrh	r0, [r3, #0]
 801f7fa:	4b74      	ldr	r3, [pc, #464]	@ (801f9cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801f7fc:	b202      	sxth	r2, r0
 801f7fe:	8819      	ldrh	r1, [r3, #0]
 801f800:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801f804:	b20e      	sxth	r6, r1
 801f806:	2b00      	cmp	r3, #0
 801f808:	da07      	bge.n	801f81a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801f80a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801f80e:	4463      	add	r3, ip
 801f810:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801f814:	2300      	movs	r3, #0
 801f816:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801f81a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801f81e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801f822:	1ad2      	subs	r2, r2, r3
 801f824:	4594      	cmp	ip, r2
 801f826:	bfc4      	itt	gt
 801f828:	1ac2      	subgt	r2, r0, r3
 801f82a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 801f82e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801f832:	2a00      	cmp	r2, #0
 801f834:	da07      	bge.n	801f846 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801f836:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 801f83a:	4462      	add	r2, ip
 801f83c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801f840:	2200      	movs	r2, #0
 801f842:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801f846:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 801f84a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801f84e:	eba6 060a 	sub.w	r6, r6, sl
 801f852:	42b2      	cmp	r2, r6
 801f854:	bfc4      	itt	gt
 801f856:	eba1 020a 	subgt.w	r2, r1, sl
 801f85a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 801f85e:	4a5c      	ldr	r2, [pc, #368]	@ (801f9d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801f860:	7812      	ldrb	r2, [r2, #0]
 801f862:	b9a2      	cbnz	r2, 801f88e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801f864:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801f868:	4286      	cmp	r6, r0
 801f86a:	4640      	mov	r0, r8
 801f86c:	9303      	str	r3, [sp, #12]
 801f86e:	bf14      	ite	ne
 801f870:	2600      	movne	r6, #0
 801f872:	2601      	moveq	r6, #1
 801f874:	f7f3 fab9 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 801f878:	9b03      	ldr	r3, [sp, #12]
 801f87a:	b160      	cbz	r0, 801f896 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801f87c:	2300      	movs	r3, #0
 801f87e:	8023      	strh	r3, [r4, #0]
 801f880:	8063      	strh	r3, [r4, #2]
 801f882:	80a3      	strh	r3, [r4, #4]
 801f884:	4620      	mov	r0, r4
 801f886:	80e3      	strh	r3, [r4, #6]
 801f888:	b011      	add	sp, #68	@ 0x44
 801f88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f88e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801f892:	428e      	cmp	r6, r1
 801f894:	e7e9      	b.n	801f86a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801f896:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801f89a:	a90e      	add	r1, sp, #56	@ 0x38
 801f89c:	900e      	str	r0, [sp, #56]	@ 0x38
 801f89e:	a80c      	add	r0, sp, #48	@ 0x30
 801f8a0:	9205      	str	r2, [sp, #20]
 801f8a2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801f8a6:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 801f8aa:	9206      	str	r2, [sp, #24]
 801f8ac:	f8bb 2000 	ldrh.w	r2, [fp]
 801f8b0:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 801f8b4:	1a9b      	subs	r3, r3, r2
 801f8b6:	b21b      	sxth	r3, r3
 801f8b8:	9303      	str	r3, [sp, #12]
 801f8ba:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801f8be:	f8df b118 	ldr.w	fp, [pc, #280]	@ 801f9d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801f8c2:	ebaa 0a03 	sub.w	sl, sl, r3
 801f8c6:	fa0f f38a 	sxth.w	r3, sl
 801f8ca:	9304      	str	r3, [sp, #16]
 801f8cc:	9b03      	ldr	r3, [sp, #12]
 801f8ce:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801f8d2:	9b04      	ldr	r3, [sp, #16]
 801f8d4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801f8d8:	9b05      	ldr	r3, [sp, #20]
 801f8da:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801f8de:	9b06      	ldr	r3, [sp, #24]
 801f8e0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801f8e4:	f7f7 fb30 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f8e8:	4640      	mov	r0, r8
 801f8ea:	f7f7 fae9 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f8ee:	a80e      	add	r0, sp, #56	@ 0x38
 801f8f0:	f7f7 fae6 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f8f4:	4b37      	ldr	r3, [pc, #220]	@ (801f9d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801f8f6:	4628      	mov	r0, r5
 801f8f8:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 801f8fc:	881b      	ldrh	r3, [r3, #0]
 801f8fe:	9307      	str	r3, [sp, #28]
 801f900:	682b      	ldr	r3, [r5, #0]
 801f902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f904:	4798      	blx	r3
 801f906:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 801f90a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801f90e:	4681      	mov	r9, r0
 801f910:	f8db 0000 	ldr.w	r0, [fp]
 801f914:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801f918:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801f91a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801f91e:	6803      	ldr	r3, [r0, #0]
 801f920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f922:	4798      	blx	r3
 801f924:	4607      	mov	r7, r0
 801f926:	f8db 0000 	ldr.w	r0, [fp]
 801f92a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801f92e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801f932:	6803      	ldr	r3, [r0, #0]
 801f934:	9109      	str	r1, [sp, #36]	@ 0x24
 801f936:	9208      	str	r2, [sp, #32]
 801f938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f93a:	4798      	blx	r3
 801f93c:	f010 0f01 	tst.w	r0, #1
 801f940:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f944:	d012      	beq.n	801f96c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801f946:	f8db 0000 	ldr.w	r0, [fp]
 801f94a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801f94e:	6803      	ldr	r3, [r0, #0]
 801f950:	9200      	str	r2, [sp, #0]
 801f952:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801f954:	462b      	mov	r3, r5
 801f956:	e898 0006 	ldmia.w	r8, {r1, r2}
 801f95a:	47b0      	blx	r6
 801f95c:	9b03      	ldr	r3, [sp, #12]
 801f95e:	8023      	strh	r3, [r4, #0]
 801f960:	9b04      	ldr	r3, [sp, #16]
 801f962:	8063      	strh	r3, [r4, #2]
 801f964:	9b05      	ldr	r3, [sp, #20]
 801f966:	80a3      	strh	r3, [r4, #4]
 801f968:	9b06      	ldr	r3, [sp, #24]
 801f96a:	e78b      	b.n	801f884 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801f96c:	fb09 f202 	mul.w	r2, r9, r2
 801f970:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801f974:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801f978:	440f      	add	r7, r1
 801f97a:	b166      	cbz	r6, 801f996 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801f97c:	9a07      	ldr	r2, [sp, #28]
 801f97e:	4592      	cmp	sl, r2
 801f980:	d109      	bne.n	801f996 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801f982:	f8db 0000 	ldr.w	r0, [fp]
 801f986:	fb09 f303 	mul.w	r3, r9, r3
 801f98a:	4629      	mov	r1, r5
 801f98c:	6802      	ldr	r2, [r0, #0]
 801f98e:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 801f990:	463a      	mov	r2, r7
 801f992:	47b0      	blx	r6
 801f994:	e7e2      	b.n	801f95c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801f996:	fb0a f303 	mul.w	r3, sl, r3
 801f99a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801f99e:	f8df b038 	ldr.w	fp, [pc, #56]	@ 801f9d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801f9a2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801f9a6:	4545      	cmp	r5, r8
 801f9a8:	d2d8      	bcs.n	801f95c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801f9aa:	f8db 0000 	ldr.w	r0, [fp]
 801f9ae:	4629      	mov	r1, r5
 801f9b0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801f9b4:	4435      	add	r5, r6
 801f9b6:	6802      	ldr	r2, [r0, #0]
 801f9b8:	005b      	lsls	r3, r3, #1
 801f9ba:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801f9be:	463a      	mov	r2, r7
 801f9c0:	47d0      	blx	sl
 801f9c2:	444f      	add	r7, r9
 801f9c4:	e7ef      	b.n	801f9a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801f9c6:	bf00      	nop
 801f9c8:	240065f4 	.word	0x240065f4
 801f9cc:	240065f6 	.word	0x240065f6
 801f9d0:	240065f8 	.word	0x240065f8
 801f9d4:	240065fa 	.word	0x240065fa
 801f9d8:	24006600 	.word	0x24006600

0801f9dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9de:	4606      	mov	r6, r0
 801f9e0:	b087      	sub	sp, #28
 801f9e2:	460c      	mov	r4, r1
 801f9e4:	4617      	mov	r7, r2
 801f9e6:	461d      	mov	r5, r3
 801f9e8:	b333      	cbz	r3, 801fa38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f9ea:	4608      	mov	r0, r1
 801f9ec:	f7f3 f9fd 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 801f9f0:	bb10      	cbnz	r0, 801fa38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f9f2:	6820      	ldr	r0, [r4, #0]
 801f9f4:	ab04      	add	r3, sp, #16
 801f9f6:	6861      	ldr	r1, [r4, #4]
 801f9f8:	4c1b      	ldr	r4, [pc, #108]	@ (801fa68 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801f9fa:	c303      	stmia	r3!, {r0, r1}
 801f9fc:	a804      	add	r0, sp, #16
 801f9fe:	f7f7 fa5f 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fa02:	6820      	ldr	r0, [r4, #0]
 801fa04:	6803      	ldr	r3, [r0, #0]
 801fa06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fa08:	4798      	blx	r3
 801fa0a:	2dff      	cmp	r5, #255	@ 0xff
 801fa0c:	d016      	beq.n	801fa3c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801fa0e:	f010 0f08 	tst.w	r0, #8
 801fa12:	6820      	ldr	r0, [r4, #0]
 801fa14:	d015      	beq.n	801fa42 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801fa16:	2400      	movs	r4, #0
 801fa18:	6801      	ldr	r1, [r0, #0]
 801fa1a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801fa1e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801fa22:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801fa26:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801fa2a:	9401      	str	r4, [sp, #4]
 801fa2c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801fa30:	9400      	str	r4, [sp, #0]
 801fa32:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 801fa34:	4639      	mov	r1, r7
 801fa36:	47a0      	blx	r4
 801fa38:	b007      	add	sp, #28
 801fa3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa3c:	f010 0f02 	tst.w	r0, #2
 801fa40:	e7e7      	b.n	801fa12 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801fa42:	6803      	ldr	r3, [r0, #0]
 801fa44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa46:	4798      	blx	r3
 801fa48:	4b08      	ldr	r3, [pc, #32]	@ (801fa6c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801fa4a:	4601      	mov	r1, r0
 801fa4c:	4630      	mov	r0, r6
 801fa4e:	881a      	ldrh	r2, [r3, #0]
 801fa50:	6833      	ldr	r3, [r6, #0]
 801fa52:	e9cd 7500 	strd	r7, r5, [sp]
 801fa56:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801fa58:	ab04      	add	r3, sp, #16
 801fa5a:	47a8      	blx	r5
 801fa5c:	6820      	ldr	r0, [r4, #0]
 801fa5e:	6803      	ldr	r3, [r0, #0]
 801fa60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fa62:	4798      	blx	r3
 801fa64:	e7e8      	b.n	801fa38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801fa66:	bf00      	nop
 801fa68:	24006600 	.word	0x24006600
 801fa6c:	240065fa 	.word	0x240065fa

0801fa70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801fa70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa74:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801fa78:	4688      	mov	r8, r1
 801fa7a:	4614      	mov	r4, r2
 801fa7c:	461d      	mov	r5, r3
 801fa7e:	9e08      	ldr	r6, [sp, #32]
 801fa80:	2f00      	cmp	r7, #0
 801fa82:	f000 80ab 	beq.w	801fbdc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fa86:	4618      	mov	r0, r3
 801fa88:	f7f3 f9af 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 801fa8c:	2800      	cmp	r0, #0
 801fa8e:	f040 80a5 	bne.w	801fbdc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fa92:	f9b5 1000 	ldrsh.w	r1, [r5]
 801fa96:	2fff      	cmp	r7, #255	@ 0xff
 801fa98:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801fa9c:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801faa0:	fb04 1303 	mla	r3, r4, r3, r1
 801faa4:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801faa8:	eba4 0200 	sub.w	r2, r4, r0
 801faac:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801fab0:	fb04 f505 	mul.w	r5, r4, r5
 801fab4:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801fab8:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801fabc:	d04a      	beq.n	801fb54 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801fabe:	b2bc      	uxth	r4, r7
 801fac0:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 801fac4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801fac8:	fa5f f788 	uxtb.w	r7, r8
 801facc:	b2f3      	uxtb	r3, r6
 801face:	0040      	lsls	r0, r0, #1
 801fad0:	fb0e fe04 	mul.w	lr, lr, r4
 801fad4:	4367      	muls	r7, r4
 801fad6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801fada:	4363      	muls	r3, r4
 801fadc:	fa1f fc8c 	uxth.w	ip, ip
 801fae0:	42a9      	cmp	r1, r5
 801fae2:	d27b      	bcs.n	801fbdc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fae4:	eb01 0900 	add.w	r9, r1, r0
 801fae8:	4549      	cmp	r1, r9
 801faea:	d231      	bcs.n	801fb50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801faec:	880a      	ldrh	r2, [r1, #0]
 801faee:	1214      	asrs	r4, r2, #8
 801faf0:	10d6      	asrs	r6, r2, #3
 801faf2:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801faf6:	00d2      	lsls	r2, r2, #3
 801faf8:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fafc:	b2d2      	uxtb	r2, r2
 801fafe:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801fb02:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fb06:	fb14 f40c 	smulbb	r4, r4, ip
 801fb0a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801fb0e:	fb12 f20c 	smulbb	r2, r2, ip
 801fb12:	fb16 f60c 	smulbb	r6, r6, ip
 801fb16:	4474      	add	r4, lr
 801fb18:	441a      	add	r2, r3
 801fb1a:	b2a4      	uxth	r4, r4
 801fb1c:	443e      	add	r6, r7
 801fb1e:	b292      	uxth	r2, r2
 801fb20:	f104 0a01 	add.w	sl, r4, #1
 801fb24:	b2b6      	uxth	r6, r6
 801fb26:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801fb2a:	f102 0a01 	add.w	sl, r2, #1
 801fb2e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801fb32:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801fb36:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fb3a:	4322      	orrs	r2, r4
 801fb3c:	1c74      	adds	r4, r6, #1
 801fb3e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801fb42:	0976      	lsrs	r6, r6, #5
 801fb44:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801fb48:	4332      	orrs	r2, r6
 801fb4a:	f821 2b02 	strh.w	r2, [r1], #2
 801fb4e:	e7cb      	b.n	801fae8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801fb50:	4441      	add	r1, r8
 801fb52:	e7c5      	b.n	801fae0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801fb54:	0973      	lsrs	r3, r6, #5
 801fb56:	4f22      	ldr	r7, [pc, #136]	@ (801fbe0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801fb58:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801fb5c:	ea08 0707 	and.w	r7, r8, r7
 801fb60:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801fb64:	433b      	orrs	r3, r7
 801fb66:	07e7      	lsls	r7, r4, #31
 801fb68:	ea43 0306 	orr.w	r3, r3, r6
 801fb6c:	b29b      	uxth	r3, r3
 801fb6e:	d50b      	bpl.n	801fb88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801fb70:	0040      	lsls	r0, r0, #1
 801fb72:	0052      	lsls	r2, r2, #1
 801fb74:	42a9      	cmp	r1, r5
 801fb76:	d231      	bcs.n	801fbdc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fb78:	180c      	adds	r4, r1, r0
 801fb7a:	42a1      	cmp	r1, r4
 801fb7c:	d202      	bcs.n	801fb84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801fb7e:	f821 3b02 	strh.w	r3, [r1], #2
 801fb82:	e7fa      	b.n	801fb7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801fb84:	4411      	add	r1, r2
 801fb86:	e7f5      	b.n	801fb74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801fb88:	078e      	lsls	r6, r1, #30
 801fb8a:	d008      	beq.n	801fb9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801fb8c:	0066      	lsls	r6, r4, #1
 801fb8e:	460a      	mov	r2, r1
 801fb90:	42aa      	cmp	r2, r5
 801fb92:	d202      	bcs.n	801fb9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801fb94:	8013      	strh	r3, [r2, #0]
 801fb96:	4432      	add	r2, r6
 801fb98:	e7fa      	b.n	801fb90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801fb9a:	3102      	adds	r1, #2
 801fb9c:	3801      	subs	r0, #1
 801fb9e:	07c2      	lsls	r2, r0, #31
 801fba0:	d50b      	bpl.n	801fbba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801fba2:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 801fba6:	0066      	lsls	r6, r4, #1
 801fba8:	3a01      	subs	r2, #1
 801fbaa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801fbae:	42aa      	cmp	r2, r5
 801fbb0:	d202      	bcs.n	801fbb8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801fbb2:	8013      	strh	r3, [r2, #0]
 801fbb4:	4432      	add	r2, r6
 801fbb6:	e7fa      	b.n	801fbae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801fbb8:	3801      	subs	r0, #1
 801fbba:	b178      	cbz	r0, 801fbdc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fbbc:	1040      	asrs	r0, r0, #1
 801fbbe:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801fbc2:	0080      	lsls	r0, r0, #2
 801fbc4:	0064      	lsls	r4, r4, #1
 801fbc6:	42a9      	cmp	r1, r5
 801fbc8:	d208      	bcs.n	801fbdc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fbca:	180e      	adds	r6, r1, r0
 801fbcc:	460a      	mov	r2, r1
 801fbce:	42b2      	cmp	r2, r6
 801fbd0:	d202      	bcs.n	801fbd8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801fbd2:	f842 3b04 	str.w	r3, [r2], #4
 801fbd6:	e7fa      	b.n	801fbce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801fbd8:	4421      	add	r1, r4
 801fbda:	e7f4      	b.n	801fbc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801fbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fbe0:	00fff800 	.word	0x00fff800

0801fbe4 <_ZN8touchgfx8LCD16bppC1Ev>:
 801fbe4:	2200      	movs	r2, #0
 801fbe6:	4912      	ldr	r1, [pc, #72]	@ (801fc30 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801fbe8:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801fbec:	6001      	str	r1, [r0, #0]
 801fbee:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801fbf2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801fbf6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801fbfa:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801fbfe:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801fc02:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801fc06:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801fc0a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801fc0e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801fc12:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801fc16:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801fc1a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801fc1e:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 801fc22:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 801fc26:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 801fc2a:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 801fc2e:	4770      	bx	lr
 801fc30:	0802c9c0 	.word	0x0802c9c0

0801fc34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801fc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc38:	b08d      	sub	sp, #52	@ 0x34
 801fc3a:	460d      	mov	r5, r1
 801fc3c:	4604      	mov	r4, r0
 801fc3e:	4699      	mov	r9, r3
 801fc40:	6808      	ldr	r0, [r1, #0]
 801fc42:	ab08      	add	r3, sp, #32
 801fc44:	6849      	ldr	r1, [r1, #4]
 801fc46:	c303      	stmia	r3!, {r0, r1}
 801fc48:	6810      	ldr	r0, [r2, #0]
 801fc4a:	ab0a      	add	r3, sp, #40	@ 0x28
 801fc4c:	6851      	ldr	r1, [r2, #4]
 801fc4e:	c303      	stmia	r3!, {r0, r1}
 801fc50:	a808      	add	r0, sp, #32
 801fc52:	f7f7 f935 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc56:	4629      	mov	r1, r5
 801fc58:	a80a      	add	r0, sp, #40	@ 0x28
 801fc5a:	4d67      	ldr	r5, [pc, #412]	@ (801fdf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801fc5c:	f7f7 f974 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fc60:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 801fc64:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 801fc68:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801fc6c:	6828      	ldr	r0, [r5, #0]
 801fc6e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fc72:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 801fc76:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801fc7a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fc7e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801fc82:	440a      	add	r2, r1
 801fc84:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801fc88:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801fc8c:	4413      	add	r3, r2
 801fc8e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801fc92:	6803      	ldr	r3, [r0, #0]
 801fc94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fc96:	4798      	blx	r3
 801fc98:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801fc9c:	d119      	bne.n	801fcd2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801fc9e:	f010 0f20 	tst.w	r0, #32
 801fca2:	6828      	ldr	r0, [r5, #0]
 801fca4:	d018      	beq.n	801fcd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801fca6:	2500      	movs	r5, #0
 801fca8:	6801      	ldr	r1, [r0, #0]
 801fcaa:	b2b6      	uxth	r6, r6
 801fcac:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801fcb0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801fcb4:	9601      	str	r6, [sp, #4]
 801fcb6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801fcba:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801fcbe:	9502      	str	r5, [sp, #8]
 801fcc0:	fa1f f588 	uxth.w	r5, r8
 801fcc4:	9500      	str	r5, [sp, #0]
 801fcc6:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801fcc8:	4621      	mov	r1, r4
 801fcca:	47a8      	blx	r5
 801fccc:	b00d      	add	sp, #52	@ 0x34
 801fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcd2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801fcd6:	e7e4      	b.n	801fca2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801fcd8:	6803      	ldr	r3, [r0, #0]
 801fcda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fcdc:	4798      	blx	r3
 801fcde:	4947      	ldr	r1, [pc, #284]	@ (801fdfc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801fce0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801fce4:	880b      	ldrh	r3, [r1, #0]
 801fce6:	468a      	mov	sl, r1
 801fce8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 801fcec:	fb03 5202 	mla	r2, r3, r2, r5
 801fcf0:	4373      	muls	r3, r6
 801fcf2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fcf6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fcfa:	9307      	str	r3, [sp, #28]
 801fcfc:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801fd00:	9306      	str	r3, [sp, #24]
 801fd02:	9b07      	ldr	r3, [sp, #28]
 801fd04:	4298      	cmp	r0, r3
 801fd06:	d270      	bcs.n	801fdea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801fd08:	9b06      	ldr	r3, [sp, #24]
 801fd0a:	4621      	mov	r1, r4
 801fd0c:	eb00 0b03 	add.w	fp, r0, r3
 801fd10:	4558      	cmp	r0, fp
 801fd12:	d25d      	bcs.n	801fdd0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801fd14:	f851 4b04 	ldr.w	r4, [r1], #4
 801fd18:	0e23      	lsrs	r3, r4, #24
 801fd1a:	d014      	beq.n	801fd46 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801fd1c:	2bff      	cmp	r3, #255	@ 0xff
 801fd1e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801fd22:	d112      	bne.n	801fd4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801fd24:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801fd28:	d10f      	bne.n	801fd4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801fd2a:	0963      	lsrs	r3, r4, #5
 801fd2c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 801fd30:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fd34:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801fd38:	f02c 0c07 	bic.w	ip, ip, #7
 801fd3c:	ea43 0c0c 	orr.w	ip, r3, ip
 801fd40:	ea4c 0404 	orr.w	r4, ip, r4
 801fd44:	8004      	strh	r4, [r0, #0]
 801fd46:	3002      	adds	r0, #2
 801fd48:	e7e2      	b.n	801fd10 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801fd4a:	fb09 f303 	mul.w	r3, r9, r3
 801fd4e:	8807      	ldrh	r7, [r0, #0]
 801fd50:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801fd54:	fa5f fc8c 	uxtb.w	ip, ip
 801fd58:	1c5a      	adds	r2, r3, #1
 801fd5a:	123e      	asrs	r6, r7, #8
 801fd5c:	10fd      	asrs	r5, r7, #3
 801fd5e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801fd62:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801fd66:	00ff      	lsls	r7, r7, #3
 801fd68:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801fd6c:	1212      	asrs	r2, r2, #8
 801fd6e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fd72:	b293      	uxth	r3, r2
 801fd74:	43d2      	mvns	r2, r2
 801fd76:	b2ff      	uxtb	r7, r7
 801fd78:	fb1e fe03 	smulbb	lr, lr, r3
 801fd7c:	b2d2      	uxtb	r2, r2
 801fd7e:	fb1c fc03 	smulbb	ip, ip, r3
 801fd82:	b2e4      	uxtb	r4, r4
 801fd84:	fb06 e602 	mla	r6, r6, r2, lr
 801fd88:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801fd8c:	fb14 f403 	smulbb	r4, r4, r3
 801fd90:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801fd94:	b2b6      	uxth	r6, r6
 801fd96:	fb05 c502 	mla	r5, r5, r2, ip
 801fd9a:	fb07 4702 	mla	r7, r7, r2, r4
 801fd9e:	f106 0e01 	add.w	lr, r6, #1
 801fda2:	b2ad      	uxth	r5, r5
 801fda4:	b2bf      	uxth	r7, r7
 801fda6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801fdaa:	f105 0c01 	add.w	ip, r5, #1
 801fdae:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801fdb2:	1c7e      	adds	r6, r7, #1
 801fdb4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fdb8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fdbc:	096d      	lsrs	r5, r5, #5
 801fdbe:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fdc2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fdc6:	ea46 060e 	orr.w	r6, r6, lr
 801fdca:	432e      	orrs	r6, r5
 801fdcc:	8006      	strh	r6, [r0, #0]
 801fdce:	e7ba      	b.n	801fd46 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801fdd0:	f8ba 3000 	ldrh.w	r3, [sl]
 801fdd4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 801fdd8:	eba3 0308 	sub.w	r3, r3, r8
 801fddc:	eba4 0408 	sub.w	r4, r4, r8
 801fde0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fde4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801fde8:	e78b      	b.n	801fd02 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801fdea:	4b03      	ldr	r3, [pc, #12]	@ (801fdf8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801fdec:	6818      	ldr	r0, [r3, #0]
 801fdee:	6803      	ldr	r3, [r0, #0]
 801fdf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fdf2:	4798      	blx	r3
 801fdf4:	e76a      	b.n	801fccc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801fdf6:	bf00      	nop
 801fdf8:	24006600 	.word	0x24006600
 801fdfc:	240065fa 	.word	0x240065fa

0801fe00 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801fe00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fe04:	b085      	sub	sp, #20
 801fe06:	6810      	ldr	r0, [r2, #0]
 801fe08:	460c      	mov	r4, r1
 801fe0a:	6851      	ldr	r1, [r2, #4]
 801fe0c:	466d      	mov	r5, sp
 801fe0e:	4616      	mov	r6, r2
 801fe10:	c503      	stmia	r5!, {r0, r1}
 801fe12:	6818      	ldr	r0, [r3, #0]
 801fe14:	6859      	ldr	r1, [r3, #4]
 801fe16:	c503      	stmia	r5!, {r0, r1}
 801fe18:	4668      	mov	r0, sp
 801fe1a:	4d2e      	ldr	r5, [pc, #184]	@ (801fed4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801fe1c:	f7f7 f850 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe20:	4631      	mov	r1, r6
 801fe22:	a802      	add	r0, sp, #8
 801fe24:	4e2c      	ldr	r6, [pc, #176]	@ (801fed8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801fe26:	f7f7 f88f 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fe2a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801fe2e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801fe32:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801fe36:	6828      	ldr	r0, [r5, #0]
 801fe38:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fe3c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801fe40:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801fe44:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fe48:	f8bd 1000 	ldrh.w	r1, [sp]
 801fe4c:	440a      	add	r2, r1
 801fe4e:	f8ad 2008 	strh.w	r2, [sp, #8]
 801fe52:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801fe56:	4413      	add	r3, r2
 801fe58:	f8ad 300a 	strh.w	r3, [sp, #10]
 801fe5c:	6803      	ldr	r3, [r0, #0]
 801fe5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fe60:	4798      	blx	r3
 801fe62:	8833      	ldrh	r3, [r6, #0]
 801fe64:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801fe68:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801fe6c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801fe70:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801fedc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801fe74:	fb03 1202 	mla	r2, r3, r2, r1
 801fe78:	fb08 f303 	mul.w	r3, r8, r3
 801fe7c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fe80:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fe84:	4298      	cmp	r0, r3
 801fe86:	d21d      	bcs.n	801fec4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801fe88:	eb00 080c 	add.w	r8, r0, ip
 801fe8c:	4540      	cmp	r0, r8
 801fe8e:	d20f      	bcs.n	801feb0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801fe90:	f854 1b04 	ldr.w	r1, [r4], #4
 801fe94:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801fe98:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801fe9c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801fea0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801fea4:	ea42 0209 	orr.w	r2, r2, r9
 801fea8:	430a      	orrs	r2, r1
 801feaa:	f820 2b02 	strh.w	r2, [r0], #2
 801feae:	e7ed      	b.n	801fe8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801feb0:	8832      	ldrh	r2, [r6, #0]
 801feb2:	1bd2      	subs	r2, r2, r7
 801feb4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801feb8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801febc:	1bd2      	subs	r2, r2, r7
 801febe:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801fec2:	e7df      	b.n	801fe84 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801fec4:	6828      	ldr	r0, [r5, #0]
 801fec6:	6803      	ldr	r3, [r0, #0]
 801fec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801feca:	4798      	blx	r3
 801fecc:	b005      	add	sp, #20
 801fece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fed2:	bf00      	nop
 801fed4:	24006600 	.word	0x24006600
 801fed8:	240065fa 	.word	0x240065fa
 801fedc:	fffff800 	.word	0xfffff800

0801fee0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801fee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fee4:	b08e      	sub	sp, #56	@ 0x38
 801fee6:	460e      	mov	r6, r1
 801fee8:	4604      	mov	r4, r0
 801feea:	461d      	mov	r5, r3
 801feec:	6808      	ldr	r0, [r1, #0]
 801feee:	ab0a      	add	r3, sp, #40	@ 0x28
 801fef0:	6849      	ldr	r1, [r1, #4]
 801fef2:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 80200c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801fef6:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 80200cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801fefa:	c303      	stmia	r3!, {r0, r1}
 801fefc:	6810      	ldr	r0, [r2, #0]
 801fefe:	ab0c      	add	r3, sp, #48	@ 0x30
 801ff00:	6851      	ldr	r1, [r2, #4]
 801ff02:	c303      	stmia	r3!, {r0, r1}
 801ff04:	a80a      	add	r0, sp, #40	@ 0x28
 801ff06:	f7f6 ffdb 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ff0a:	4631      	mov	r1, r6
 801ff0c:	a80c      	add	r0, sp, #48	@ 0x30
 801ff0e:	f7f7 f81b 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ff12:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801ff16:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801ff1a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801ff1e:	f8d8 0000 	ldr.w	r0, [r8]
 801ff22:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ff26:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801ff2a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801ff2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ff32:	440c      	add	r4, r1
 801ff34:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801ff38:	440a      	add	r2, r1
 801ff3a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801ff3e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801ff42:	4413      	add	r3, r2
 801ff44:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801ff48:	6803      	ldr	r3, [r0, #0]
 801ff4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ff4c:	4798      	blx	r3
 801ff4e:	2dff      	cmp	r5, #255	@ 0xff
 801ff50:	d124      	bne.n	801ff9c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801ff52:	f010 0f01 	tst.w	r0, #1
 801ff56:	f8d8 0000 	ldr.w	r0, [r8]
 801ff5a:	d022      	beq.n	801ffa2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801ff5c:	2100      	movs	r1, #0
 801ff5e:	f04f 0e01 	mov.w	lr, #1
 801ff62:	f8d0 c000 	ldr.w	ip, [r0]
 801ff66:	b2b6      	uxth	r6, r6
 801ff68:	f8cd e018 	str.w	lr, [sp, #24]
 801ff6c:	b2bf      	uxth	r7, r7
 801ff6e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801ff72:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801ff76:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801ff7a:	f8b9 e000 	ldrh.w	lr, [r9]
 801ff7e:	9503      	str	r5, [sp, #12]
 801ff80:	9601      	str	r6, [sp, #4]
 801ff82:	9700      	str	r7, [sp, #0]
 801ff84:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801ff88:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801ff8c:	9102      	str	r1, [sp, #8]
 801ff8e:	4621      	mov	r1, r4
 801ff90:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 801ff94:	47a8      	blx	r5
 801ff96:	b00e      	add	sp, #56	@ 0x38
 801ff98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff9c:	f010 0f04 	tst.w	r0, #4
 801ffa0:	e7d9      	b.n	801ff56 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801ffa2:	6803      	ldr	r3, [r0, #0]
 801ffa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ffa6:	4798      	blx	r3
 801ffa8:	f8b9 3000 	ldrh.w	r3, [r9]
 801ffac:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ffb0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801ffb4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801ffb8:	435e      	muls	r6, r3
 801ffba:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801ffbe:	2dff      	cmp	r5, #255	@ 0xff
 801ffc0:	fb03 1202 	mla	r2, r3, r2, r1
 801ffc4:	ebac 0c07 	sub.w	ip, ip, r7
 801ffc8:	eba3 0707 	sub.w	r7, r3, r7
 801ffcc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ffd0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ffd4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ffd8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801ffdc:	d049      	beq.n	8020072 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801ffde:	43eb      	mvns	r3, r5
 801ffe0:	fa1f f985 	uxth.w	r9, r5
 801ffe4:	b2db      	uxtb	r3, r3
 801ffe6:	42b0      	cmp	r0, r6
 801ffe8:	d266      	bcs.n	80200b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ffea:	eb00 0a0e 	add.w	sl, r0, lr
 801ffee:	4550      	cmp	r0, sl
 801fff0:	4621      	mov	r1, r4
 801fff2:	f104 0403 	add.w	r4, r4, #3
 801fff6:	d25b      	bcs.n	80200b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801fff8:	8802      	ldrh	r2, [r0, #0]
 801fffa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801fffe:	ea4f 2822 	mov.w	r8, r2, asr #8
 8020002:	fb11 f109 	smulbb	r1, r1, r9
 8020006:	10d5      	asrs	r5, r2, #3
 8020008:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 802000c:	00d2      	lsls	r2, r2, #3
 802000e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020012:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8020016:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802001a:	fb08 1803 	mla	r8, r8, r3, r1
 802001e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8020022:	b2d2      	uxtb	r2, r2
 8020024:	fb11 f109 	smulbb	r1, r1, r9
 8020028:	fa1f f888 	uxth.w	r8, r8
 802002c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020030:	fb05 1503 	mla	r5, r5, r3, r1
 8020034:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8020038:	fb11 f109 	smulbb	r1, r1, r9
 802003c:	b2ad      	uxth	r5, r5
 802003e:	fb02 1203 	mla	r2, r2, r3, r1
 8020042:	f108 0101 	add.w	r1, r8, #1
 8020046:	b292      	uxth	r2, r2
 8020048:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802004c:	1c51      	adds	r1, r2, #1
 802004e:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8020052:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020056:	1c69      	adds	r1, r5, #1
 8020058:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802005c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020060:	096d      	lsrs	r5, r5, #5
 8020062:	ea42 0208 	orr.w	r2, r2, r8
 8020066:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802006a:	432a      	orrs	r2, r5
 802006c:	f820 2b02 	strh.w	r2, [r0], #2
 8020070:	e7bd      	b.n	801ffee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8020072:	4a14      	ldr	r2, [pc, #80]	@ (80200c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8020074:	42b0      	cmp	r0, r6
 8020076:	d21f      	bcs.n	80200b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8020078:	eb00 050e 	add.w	r5, r0, lr
 802007c:	42a8      	cmp	r0, r5
 802007e:	4621      	mov	r1, r4
 8020080:	f104 0403 	add.w	r4, r4, #3
 8020084:	d210      	bcs.n	80200a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8020086:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802008a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802008e:	00db      	lsls	r3, r3, #3
 8020090:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8020094:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020098:	430b      	orrs	r3, r1
 802009a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802009e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80200a2:	f820 3b02 	strh.w	r3, [r0], #2
 80200a6:	e7e9      	b.n	802007c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80200a8:	4438      	add	r0, r7
 80200aa:	eb01 040c 	add.w	r4, r1, ip
 80200ae:	e7e1      	b.n	8020074 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80200b0:	4438      	add	r0, r7
 80200b2:	eb01 040c 	add.w	r4, r1, ip
 80200b6:	e796      	b.n	801ffe6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80200b8:	4b03      	ldr	r3, [pc, #12]	@ (80200c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80200ba:	6818      	ldr	r0, [r3, #0]
 80200bc:	6803      	ldr	r3, [r0, #0]
 80200be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80200c0:	4798      	blx	r3
 80200c2:	e768      	b.n	801ff96 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80200c4:	fffff800 	.word	0xfffff800
 80200c8:	24006600 	.word	0x24006600
 80200cc:	240065fa 	.word	0x240065fa

080200d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80200d0:	b4f0      	push	{r4, r5, r6, r7}
 80200d2:	4616      	mov	r6, r2
 80200d4:	461c      	mov	r4, r3
 80200d6:	460d      	mov	r5, r1
 80200d8:	9a04      	ldr	r2, [sp, #16]
 80200da:	2e01      	cmp	r6, #1
 80200dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80200e0:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80200e4:	d012      	beq.n	802010c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80200e6:	d303      	bcc.n	80200f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80200e8:	2e02      	cmp	r6, #2
 80200ea:	d00a      	beq.n	8020102 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80200ec:	bcf0      	pop	{r4, r5, r6, r7}
 80200ee:	4770      	bx	lr
 80200f0:	6805      	ldr	r5, [r0, #0]
 80200f2:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80200f6:	68ed      	ldr	r5, [r5, #12]
 80200f8:	4613      	mov	r3, r2
 80200fa:	4622      	mov	r2, r4
 80200fc:	46ac      	mov	ip, r5
 80200fe:	bcf0      	pop	{r4, r5, r6, r7}
 8020100:	4760      	bx	ip
 8020102:	4621      	mov	r1, r4
 8020104:	4628      	mov	r0, r5
 8020106:	bcf0      	pop	{r4, r5, r6, r7}
 8020108:	f7ff bd94 	b.w	801fc34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802010c:	4621      	mov	r1, r4
 802010e:	4628      	mov	r0, r5
 8020110:	bcf0      	pop	{r4, r5, r6, r7}
 8020112:	f7ff bee5 	b.w	801fee0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08020118 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8020118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802011c:	b093      	sub	sp, #76	@ 0x4c
 802011e:	4681      	mov	r9, r0
 8020120:	4688      	mov	r8, r1
 8020122:	6810      	ldr	r0, [r2, #0]
 8020124:	6851      	ldr	r1, [r2, #4]
 8020126:	ac0e      	add	r4, sp, #56	@ 0x38
 8020128:	4616      	mov	r6, r2
 802012a:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 802012e:	4f6b      	ldr	r7, [pc, #428]	@ (80202dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8020130:	c403      	stmia	r4!, {r0, r1}
 8020132:	6818      	ldr	r0, [r3, #0]
 8020134:	ac10      	add	r4, sp, #64	@ 0x40
 8020136:	6859      	ldr	r1, [r3, #4]
 8020138:	c403      	stmia	r4!, {r0, r1}
 802013a:	a80e      	add	r0, sp, #56	@ 0x38
 802013c:	f7f6 fec0 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020140:	4631      	mov	r1, r6
 8020142:	a810      	add	r0, sp, #64	@ 0x40
 8020144:	4e66      	ldr	r6, [pc, #408]	@ (80202e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8020146:	f7f6 feff 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802014a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802014e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8020152:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8020156:	6830      	ldr	r0, [r6, #0]
 8020158:	fb11 2103 	smlabb	r1, r1, r3, r2
 802015c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8020160:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8020164:	4489      	add	r9, r1
 8020166:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 802016a:	440a      	add	r2, r1
 802016c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8020170:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8020174:	4413      	add	r3, r2
 8020176:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 802017a:	6803      	ldr	r3, [r0, #0]
 802017c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802017e:	4798      	blx	r3
 8020180:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8020184:	6830      	ldr	r0, [r6, #0]
 8020186:	d01d      	beq.n	80201c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8020188:	2200      	movs	r2, #0
 802018a:	6801      	ldr	r1, [r0, #0]
 802018c:	b2a4      	uxth	r4, r4
 802018e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8020192:	b2ad      	uxth	r5, r5
 8020194:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8020198:	220b      	movs	r2, #11
 802019a:	9207      	str	r2, [sp, #28]
 802019c:	883a      	ldrh	r2, [r7, #0]
 802019e:	9502      	str	r5, [sp, #8]
 80201a0:	9206      	str	r2, [sp, #24]
 80201a2:	2201      	movs	r2, #1
 80201a4:	9401      	str	r4, [sp, #4]
 80201a6:	e9cd a204 	strd	sl, r2, [sp, #16]
 80201aa:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 80201ae:	9203      	str	r2, [sp, #12]
 80201b0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80201b4:	9200      	str	r2, [sp, #0]
 80201b6:	4642      	mov	r2, r8
 80201b8:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 80201ba:	4649      	mov	r1, r9
 80201bc:	47a0      	blx	r4
 80201be:	b013      	add	sp, #76	@ 0x4c
 80201c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201c4:	6803      	ldr	r3, [r0, #0]
 80201c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201c8:	4798      	blx	r3
 80201ca:	883b      	ldrh	r3, [r7, #0]
 80201cc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80201d0:	f04f 0e04 	mov.w	lr, #4
 80201d4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80201d8:	435d      	muls	r5, r3
 80201da:	fb03 1202 	mla	r2, r3, r2, r1
 80201de:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80201e2:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80201e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80201e8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80201ec:	1b12      	subs	r2, r2, r4
 80201ee:	920d      	str	r2, [sp, #52]	@ 0x34
 80201f0:	0062      	lsls	r2, r4, #1
 80201f2:	1b1c      	subs	r4, r3, r4
 80201f4:	920a      	str	r2, [sp, #40]	@ 0x28
 80201f6:	0063      	lsls	r3, r4, #1
 80201f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80201fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80201fc:	4298      	cmp	r0, r3
 80201fe:	d266      	bcs.n	80202ce <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8020200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020202:	eb00 0b03 	add.w	fp, r0, r3
 8020206:	4558      	cmp	r0, fp
 8020208:	d25c      	bcs.n	80202c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 802020a:	f819 3b01 	ldrb.w	r3, [r9], #1
 802020e:	fb1e e303 	smlabb	r3, lr, r3, lr
 8020212:	f858 2003 	ldr.w	r2, [r8, r3]
 8020216:	0e11      	lsrs	r1, r2, #24
 8020218:	d012      	beq.n	8020240 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802021a:	29ff      	cmp	r1, #255	@ 0xff
 802021c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8020220:	d110      	bne.n	8020244 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8020222:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8020226:	d10d      	bne.n	8020244 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8020228:	0953      	lsrs	r3, r2, #5
 802022a:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 802022e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020232:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020236:	f027 0707 	bic.w	r7, r7, #7
 802023a:	431f      	orrs	r7, r3
 802023c:	433a      	orrs	r2, r7
 802023e:	8002      	strh	r2, [r0, #0]
 8020240:	3002      	adds	r0, #2
 8020242:	e7e0      	b.n	8020206 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8020244:	fb0a f101 	mul.w	r1, sl, r1
 8020248:	8806      	ldrh	r6, [r0, #0]
 802024a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802024e:	b2d2      	uxtb	r2, r2
 8020250:	1c4b      	adds	r3, r1, #1
 8020252:	1235      	asrs	r5, r6, #8
 8020254:	10f4      	asrs	r4, r6, #3
 8020256:	eb03 2321 	add.w	r3, r3, r1, asr #8
 802025a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802025e:	00f6      	lsls	r6, r6, #3
 8020260:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8020264:	121b      	asrs	r3, r3, #8
 8020266:	b2f6      	uxtb	r6, r6
 8020268:	b299      	uxth	r1, r3
 802026a:	43db      	mvns	r3, r3
 802026c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020270:	fb1c fc01 	smulbb	ip, ip, r1
 8020274:	b2db      	uxtb	r3, r3
 8020276:	fb12 f201 	smulbb	r2, r2, r1
 802027a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802027e:	fb05 c503 	mla	r5, r5, r3, ip
 8020282:	b2ff      	uxtb	r7, r7
 8020284:	fb06 2203 	mla	r2, r6, r3, r2
 8020288:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802028c:	fb17 f701 	smulbb	r7, r7, r1
 8020290:	b2ad      	uxth	r5, r5
 8020292:	b292      	uxth	r2, r2
 8020294:	fb04 7403 	mla	r4, r4, r3, r7
 8020298:	f105 0c01 	add.w	ip, r5, #1
 802029c:	1c57      	adds	r7, r2, #1
 802029e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80202a2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80202a6:	b2a4      	uxth	r4, r4
 80202a8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80202ac:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80202b0:	433d      	orrs	r5, r7
 80202b2:	1c67      	adds	r7, r4, #1
 80202b4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80202b8:	0964      	lsrs	r4, r4, #5
 80202ba:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80202be:	4325      	orrs	r5, r4
 80202c0:	8005      	strh	r5, [r0, #0]
 80202c2:	e7bd      	b.n	8020240 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80202c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80202c6:	4418      	add	r0, r3
 80202c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80202ca:	4499      	add	r9, r3
 80202cc:	e795      	b.n	80201fa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80202ce:	4b04      	ldr	r3, [pc, #16]	@ (80202e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80202d0:	6818      	ldr	r0, [r3, #0]
 80202d2:	6803      	ldr	r3, [r0, #0]
 80202d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80202d6:	4798      	blx	r3
 80202d8:	e771      	b.n	80201be <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80202da:	bf00      	nop
 80202dc:	240065fa 	.word	0x240065fa
 80202e0:	24006600 	.word	0x24006600

080202e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80202e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202e8:	b087      	sub	sp, #28
 80202ea:	4680      	mov	r8, r0
 80202ec:	460d      	mov	r5, r1
 80202ee:	4614      	mov	r4, r2
 80202f0:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80202f4:	2e00      	cmp	r6, #0
 80202f6:	f000 80b9 	beq.w	802046c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80202fa:	6810      	ldr	r0, [r2, #0]
 80202fc:	af02      	add	r7, sp, #8
 80202fe:	6851      	ldr	r1, [r2, #4]
 8020300:	c703      	stmia	r7!, {r0, r1}
 8020302:	6818      	ldr	r0, [r3, #0]
 8020304:	af04      	add	r7, sp, #16
 8020306:	6859      	ldr	r1, [r3, #4]
 8020308:	c703      	stmia	r7!, {r0, r1}
 802030a:	a802      	add	r0, sp, #8
 802030c:	f7f6 fdd8 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020310:	4621      	mov	r1, r4
 8020312:	a804      	add	r0, sp, #16
 8020314:	f7f6 fe18 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020318:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802031c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020320:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8020324:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8020328:	fb14 2103 	smlabb	r1, r4, r3, r2
 802032c:	eb08 0401 	add.w	r4, r8, r1
 8020330:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020334:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8020338:	440a      	add	r2, r1
 802033a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802033e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020342:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020346:	4413      	add	r3, r2
 8020348:	f8ad 3012 	strh.w	r3, [sp, #18]
 802034c:	4b49      	ldr	r3, [pc, #292]	@ (8020474 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802034e:	6818      	ldr	r0, [r3, #0]
 8020350:	6803      	ldr	r3, [r0, #0]
 8020352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020354:	4798      	blx	r3
 8020356:	4b48      	ldr	r3, [pc, #288]	@ (8020478 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8020358:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802035c:	2eff      	cmp	r6, #255	@ 0xff
 802035e:	881a      	ldrh	r2, [r3, #0]
 8020360:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8020364:	fb02 c101 	mla	r1, r2, r1, ip
 8020368:	fb02 f207 	mul.w	r2, r2, r7
 802036c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020370:	f105 0104 	add.w	r1, r5, #4
 8020374:	461d      	mov	r5, r3
 8020376:	d05a      	beq.n	802042e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8020378:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 802037c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020380:	b2b6      	uxth	r6, r6
 8020382:	9301      	str	r3, [sp, #4]
 8020384:	fa1f fe8e 	uxth.w	lr, lr
 8020388:	4282      	cmp	r2, r0
 802038a:	d96a      	bls.n	8020462 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 802038c:	eb00 0b0a 	add.w	fp, r0, sl
 8020390:	4583      	cmp	fp, r0
 8020392:	d940      	bls.n	8020416 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8020394:	8805      	ldrh	r5, [r0, #0]
 8020396:	f814 3b01 	ldrb.w	r3, [r4], #1
 802039a:	122f      	asrs	r7, r5, #8
 802039c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80203a0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80203a4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80203a8:	00ed      	lsls	r5, r5, #3
 80203aa:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80203ae:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80203b2:	fb17 f70e 	smulbb	r7, r7, lr
 80203b6:	b2ed      	uxtb	r5, r5
 80203b8:	fb19 f90e 	smulbb	r9, r9, lr
 80203bc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80203c0:	fb15 f50e 	smulbb	r5, r5, lr
 80203c4:	fb0c 7c06 	mla	ip, ip, r6, r7
 80203c8:	10df      	asrs	r7, r3, #3
 80203ca:	00db      	lsls	r3, r3, #3
 80203cc:	fa1f fc8c 	uxth.w	ip, ip
 80203d0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80203d4:	b2db      	uxtb	r3, r3
 80203d6:	fb07 9706 	mla	r7, r7, r6, r9
 80203da:	f10c 0901 	add.w	r9, ip, #1
 80203de:	fb03 5306 	mla	r3, r3, r6, r5
 80203e2:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80203e6:	b29b      	uxth	r3, r3
 80203e8:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80203ec:	b2bf      	uxth	r7, r7
 80203ee:	f103 0c01 	add.w	ip, r3, #1
 80203f2:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80203f6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80203fa:	ea4c 0c09 	orr.w	ip, ip, r9
 80203fe:	f107 0901 	add.w	r9, r7, #1
 8020402:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8020406:	097f      	lsrs	r7, r7, #5
 8020408:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802040c:	ea4c 0c07 	orr.w	ip, ip, r7
 8020410:	f820 cb02 	strh.w	ip, [r0], #2
 8020414:	e7bc      	b.n	8020390 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8020416:	9b01      	ldr	r3, [sp, #4]
 8020418:	881b      	ldrh	r3, [r3, #0]
 802041a:	eba3 0308 	sub.w	r3, r3, r8
 802041e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020422:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020426:	eba3 0308 	sub.w	r3, r3, r8
 802042a:	441c      	add	r4, r3
 802042c:	e7ac      	b.n	8020388 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 802042e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020432:	4282      	cmp	r2, r0
 8020434:	d915      	bls.n	8020462 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8020436:	eb00 060a 	add.w	r6, r0, sl
 802043a:	4286      	cmp	r6, r0
 802043c:	d906      	bls.n	802044c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 802043e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020442:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020446:	f820 3b02 	strh.w	r3, [r0], #2
 802044a:	e7f6      	b.n	802043a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 802044c:	882b      	ldrh	r3, [r5, #0]
 802044e:	eba3 0308 	sub.w	r3, r3, r8
 8020452:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020456:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802045a:	eba3 0308 	sub.w	r3, r3, r8
 802045e:	441c      	add	r4, r3
 8020460:	e7e7      	b.n	8020432 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8020462:	4b04      	ldr	r3, [pc, #16]	@ (8020474 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8020464:	6818      	ldr	r0, [r3, #0]
 8020466:	6803      	ldr	r3, [r0, #0]
 8020468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802046a:	4798      	blx	r3
 802046c:	b007      	add	sp, #28
 802046e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020472:	bf00      	nop
 8020474:	24006600 	.word	0x24006600
 8020478:	240065fa 	.word	0x240065fa

0802047c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802047c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020480:	b091      	sub	sp, #68	@ 0x44
 8020482:	4680      	mov	r8, r0
 8020484:	460f      	mov	r7, r1
 8020486:	4614      	mov	r4, r2
 8020488:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 802048c:	2d00      	cmp	r5, #0
 802048e:	d051      	beq.n	8020534 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020490:	6810      	ldr	r0, [r2, #0]
 8020492:	ae0c      	add	r6, sp, #48	@ 0x30
 8020494:	6851      	ldr	r1, [r2, #4]
 8020496:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 8020698 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 802049a:	c603      	stmia	r6!, {r0, r1}
 802049c:	6818      	ldr	r0, [r3, #0]
 802049e:	ae0e      	add	r6, sp, #56	@ 0x38
 80204a0:	6859      	ldr	r1, [r3, #4]
 80204a2:	c603      	stmia	r6!, {r0, r1}
 80204a4:	a80c      	add	r0, sp, #48	@ 0x30
 80204a6:	f7f6 fd0b 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204aa:	4621      	mov	r1, r4
 80204ac:	a80e      	add	r0, sp, #56	@ 0x38
 80204ae:	f7f6 fd4b 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80204b2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80204b6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80204ba:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80204be:	f8d9 0000 	ldr.w	r0, [r9]
 80204c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80204c6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 80204ca:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 80204ce:	eb08 0401 	add.w	r4, r8, r1
 80204d2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80204d6:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 802069c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80204da:	440a      	add	r2, r1
 80204dc:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80204e0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80204e4:	4413      	add	r3, r2
 80204e6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80204ea:	6803      	ldr	r3, [r0, #0]
 80204ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80204ee:	4798      	blx	r3
 80204f0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80204f4:	f8d9 0000 	ldr.w	r0, [r9]
 80204f8:	d01f      	beq.n	802053a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80204fa:	2200      	movs	r2, #0
 80204fc:	6801      	ldr	r1, [r0, #0]
 80204fe:	b2b6      	uxth	r6, r6
 8020500:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8020504:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8020508:	220b      	movs	r2, #11
 802050a:	9207      	str	r2, [sp, #28]
 802050c:	f8b8 2000 	ldrh.w	r2, [r8]
 8020510:	9601      	str	r6, [sp, #4]
 8020512:	9206      	str	r2, [sp, #24]
 8020514:	2201      	movs	r2, #1
 8020516:	e9cd 5204 	strd	r5, r2, [sp, #16]
 802051a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 802051e:	9203      	str	r2, [sp, #12]
 8020520:	fa1f f28a 	uxth.w	r2, sl
 8020524:	9202      	str	r2, [sp, #8]
 8020526:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802052a:	9200      	str	r2, [sp, #0]
 802052c:	463a      	mov	r2, r7
 802052e:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 8020530:	4621      	mov	r1, r4
 8020532:	47a8      	blx	r5
 8020534:	b011      	add	sp, #68	@ 0x44
 8020536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802053a:	6803      	ldr	r3, [r0, #0]
 802053c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8020540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020542:	4798      	blx	r3
 8020544:	f8b8 2000 	ldrh.w	r2, [r8]
 8020548:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802054c:	2dff      	cmp	r5, #255	@ 0xff
 802054e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8020552:	fb0a fa02 	mul.w	sl, sl, r2
 8020556:	fb02 1303 	mla	r3, r2, r3, r1
 802055a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802055e:	d062      	beq.n	8020626 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8020560:	ea6f 0c05 	mvn.w	ip, r5
 8020564:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8020568:	b2ad      	uxth	r5, r5
 802056a:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 802056e:	fa5f fc8c 	uxtb.w	ip, ip
 8020572:	930a      	str	r3, [sp, #40]	@ 0x28
 8020574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020576:	4298      	cmp	r0, r3
 8020578:	f080 8085 	bcs.w	8020686 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 802057c:	eb00 0b09 	add.w	fp, r0, r9
 8020580:	4558      	cmp	r0, fp
 8020582:	d246      	bcs.n	8020612 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8020584:	f814 eb01 	ldrb.w	lr, [r4], #1
 8020588:	2303      	movs	r3, #3
 802058a:	2204      	movs	r2, #4
 802058c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8020590:	8803      	ldrh	r3, [r0, #0]
 8020592:	eb07 0a0e 	add.w	sl, r7, lr
 8020596:	1219      	asrs	r1, r3, #8
 8020598:	10da      	asrs	r2, r3, #3
 802059a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802059e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80205a2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80205a6:	00db      	lsls	r3, r3, #3
 80205a8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80205ac:	fb18 f805 	smulbb	r8, r8, r5
 80205b0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80205b4:	fb1e fe05 	smulbb	lr, lr, r5
 80205b8:	b2db      	uxtb	r3, r3
 80205ba:	fb01 810c 	mla	r1, r1, ip, r8
 80205be:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80205c2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80205c6:	fb18 f805 	smulbb	r8, r8, r5
 80205ca:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80205ce:	b289      	uxth	r1, r1
 80205d0:	fb02 820c 	mla	r2, r2, ip, r8
 80205d4:	fb03 e30c 	mla	r3, r3, ip, lr
 80205d8:	f101 0801 	add.w	r8, r1, #1
 80205dc:	b292      	uxth	r2, r2
 80205de:	b29b      	uxth	r3, r3
 80205e0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80205e4:	f102 0801 	add.w	r8, r2, #1
 80205e8:	f103 0e01 	add.w	lr, r3, #1
 80205ec:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80205f0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80205f4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80205f8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80205fc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020600:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8020604:	ea4e 0101 	orr.w	r1, lr, r1
 8020608:	ea41 0108 	orr.w	r1, r1, r8
 802060c:	f820 1b02 	strh.w	r1, [r0], #2
 8020610:	e7b6      	b.n	8020580 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8020612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020614:	881b      	ldrh	r3, [r3, #0]
 8020616:	1b9b      	subs	r3, r3, r6
 8020618:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802061c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020620:	1b9b      	subs	r3, r3, r6
 8020622:	441c      	add	r4, r3
 8020624:	e7a6      	b.n	8020574 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8020626:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 802062a:	2203      	movs	r2, #3
 802062c:	2504      	movs	r5, #4
 802062e:	4919      	ldr	r1, [pc, #100]	@ (8020694 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8020630:	4550      	cmp	r0, sl
 8020632:	d228      	bcs.n	8020686 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8020634:	eb00 0c09 	add.w	ip, r0, r9
 8020638:	4560      	cmp	r0, ip
 802063a:	4623      	mov	r3, r4
 802063c:	d219      	bcs.n	8020672 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 802063e:	f893 e000 	ldrb.w	lr, [r3]
 8020642:	3401      	adds	r4, #1
 8020644:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8020648:	eb07 0b0e 	add.w	fp, r7, lr
 802064c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020650:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020654:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020658:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 802065c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8020660:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8020664:	ea43 030b 	orr.w	r3, r3, fp
 8020668:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 802066c:	f820 3b02 	strh.w	r3, [r0], #2
 8020670:	e7e2      	b.n	8020638 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8020672:	f8b8 3000 	ldrh.w	r3, [r8]
 8020676:	1b9b      	subs	r3, r3, r6
 8020678:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802067c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020680:	1b9b      	subs	r3, r3, r6
 8020682:	441c      	add	r4, r3
 8020684:	e7d4      	b.n	8020630 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8020686:	4b04      	ldr	r3, [pc, #16]	@ (8020698 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8020688:	6818      	ldr	r0, [r3, #0]
 802068a:	6803      	ldr	r3, [r0, #0]
 802068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802068e:	4798      	blx	r3
 8020690:	e750      	b.n	8020534 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020692:	bf00      	nop
 8020694:	fffff800 	.word	0xfffff800
 8020698:	24006600 	.word	0x24006600
 802069c:	240065fa 	.word	0x240065fa

080206a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80206a0:	b4f0      	push	{r4, r5, r6, r7}
 80206a2:	460c      	mov	r4, r1
 80206a4:	4611      	mov	r1, r2
 80206a6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80206aa:	461a      	mov	r2, r3
 80206ac:	780f      	ldrb	r7, [r1, #0]
 80206ae:	9b04      	ldr	r3, [sp, #16]
 80206b0:	2f01      	cmp	r7, #1
 80206b2:	784e      	ldrb	r6, [r1, #1]
 80206b4:	d038      	beq.n	8020728 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 80206b6:	d31f      	bcc.n	80206f8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 80206b8:	2f02      	cmp	r7, #2
 80206ba:	d14d      	bne.n	8020758 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80206bc:	2e03      	cmp	r6, #3
 80206be:	d84b      	bhi.n	8020758 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80206c0:	e8df f006 	tbb	[pc, r6]
 80206c4:	17140702 	.word	0x17140702
 80206c8:	9504      	str	r5, [sp, #16]
 80206ca:	4620      	mov	r0, r4
 80206cc:	bcf0      	pop	{r4, r5, r6, r7}
 80206ce:	f7ff be09 	b.w	80202e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80206d2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80206d4:	2800      	cmp	r0, #0
 80206d6:	d03f      	beq.n	8020758 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80206d8:	6806      	ldr	r6, [r0, #0]
 80206da:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80206de:	68b5      	ldr	r5, [r6, #8]
 80206e0:	4613      	mov	r3, r2
 80206e2:	46ac      	mov	ip, r5
 80206e4:	460a      	mov	r2, r1
 80206e6:	4621      	mov	r1, r4
 80206e8:	bcf0      	pop	{r4, r5, r6, r7}
 80206ea:	4760      	bx	ip
 80206ec:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80206f0:	e7f0      	b.n	80206d4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80206f2:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80206f6:	e7ed      	b.n	80206d4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80206f8:	2e03      	cmp	r6, #3
 80206fa:	d82d      	bhi.n	8020758 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80206fc:	e8df f006 	tbb	[pc, r6]
 8020700:	110e0702 	.word	0x110e0702
 8020704:	9504      	str	r5, [sp, #16]
 8020706:	4620      	mov	r0, r4
 8020708:	bcf0      	pop	{r4, r5, r6, r7}
 802070a:	f7ff bd05 	b.w	8020118 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802070e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8020710:	b310      	cbz	r0, 8020758 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020712:	6806      	ldr	r6, [r0, #0]
 8020714:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020718:	68f5      	ldr	r5, [r6, #12]
 802071a:	e7e1      	b.n	80206e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 802071c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8020720:	e7f6      	b.n	8020710 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8020722:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8020726:	e7f3      	b.n	8020710 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8020728:	2e03      	cmp	r6, #3
 802072a:	d815      	bhi.n	8020758 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802072c:	e8df f006 	tbb	[pc, r6]
 8020730:	110e0702 	.word	0x110e0702
 8020734:	9504      	str	r5, [sp, #16]
 8020736:	4620      	mov	r0, r4
 8020738:	bcf0      	pop	{r4, r5, r6, r7}
 802073a:	f7ff be9f 	b.w	802047c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802073e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8020740:	b150      	cbz	r0, 8020758 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020742:	6806      	ldr	r6, [r0, #0]
 8020744:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020748:	6935      	ldr	r5, [r6, #16]
 802074a:	e7c9      	b.n	80206e0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 802074c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8020750:	e7f6      	b.n	8020740 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8020752:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8020756:	e7f3      	b.n	8020740 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8020758:	bcf0      	pop	{r4, r5, r6, r7}
 802075a:	4770      	bx	lr

0802075c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 802075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020760:	b087      	sub	sp, #28
 8020762:	4604      	mov	r4, r0
 8020764:	460e      	mov	r6, r1
 8020766:	6810      	ldr	r0, [r2, #0]
 8020768:	6851      	ldr	r1, [r2, #4]
 802076a:	ad02      	add	r5, sp, #8
 802076c:	4617      	mov	r7, r2
 802076e:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8020772:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 80209a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8020776:	c503      	stmia	r5!, {r0, r1}
 8020778:	6818      	ldr	r0, [r3, #0]
 802077a:	ad04      	add	r5, sp, #16
 802077c:	6859      	ldr	r1, [r3, #4]
 802077e:	c503      	stmia	r5!, {r0, r1}
 8020780:	a802      	add	r0, sp, #8
 8020782:	f7f6 fb9d 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020786:	4639      	mov	r1, r7
 8020788:	a804      	add	r0, sp, #16
 802078a:	f7f6 fbdd 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802078e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020792:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020796:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802079a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802079e:	fb11 2103 	smlabb	r1, r1, r3, r2
 80207a2:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80207a6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80207aa:	440e      	add	r6, r1
 80207ac:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80207b0:	440a      	add	r2, r1
 80207b2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80207b6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80207ba:	4413      	add	r3, r2
 80207bc:	f8ad 3012 	strh.w	r3, [sp, #18]
 80207c0:	4b77      	ldr	r3, [pc, #476]	@ (80209a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80207c2:	6818      	ldr	r0, [r3, #0]
 80207c4:	6803      	ldr	r3, [r0, #0]
 80207c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80207c8:	4798      	blx	r3
 80207ca:	f8b9 b000 	ldrh.w	fp, [r9]
 80207ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80207d2:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80207d6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80207da:	fb05 f50b 	mul.w	r5, r5, fp
 80207de:	fb0b 2303 	mla	r3, fp, r3, r2
 80207e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80207e6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80207ea:	9300      	str	r3, [sp, #0]
 80207ec:	d069      	beq.n	80208c2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80207ee:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80207f2:	4558      	cmp	r0, fp
 80207f4:	f080 80cc 	bcs.w	8020990 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80207f8:	9b00      	ldr	r3, [sp, #0]
 80207fa:	4631      	mov	r1, r6
 80207fc:	18c3      	adds	r3, r0, r3
 80207fe:	9301      	str	r3, [sp, #4]
 8020800:	9b01      	ldr	r3, [sp, #4]
 8020802:	4298      	cmp	r0, r3
 8020804:	d24f      	bcs.n	80208a6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8020806:	f811 2b01 	ldrb.w	r2, [r1], #1
 802080a:	2a00      	cmp	r2, #0
 802080c:	d048      	beq.n	80208a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802080e:	fb0a f202 	mul.w	r2, sl, r2
 8020812:	1c53      	adds	r3, r2, #1
 8020814:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020818:	121b      	asrs	r3, r3, #8
 802081a:	d041      	beq.n	80208a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802081c:	8802      	ldrh	r2, [r0, #0]
 802081e:	b29e      	uxth	r6, r3
 8020820:	f8b4 c000 	ldrh.w	ip, [r4]
 8020824:	43db      	mvns	r3, r3
 8020826:	1215      	asrs	r5, r2, #8
 8020828:	b2db      	uxtb	r3, r3
 802082a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802082e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020832:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8020836:	fb15 f503 	smulbb	r5, r5, r3
 802083a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802083e:	00d2      	lsls	r2, r2, #3
 8020840:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8020844:	fb07 5706 	mla	r7, r7, r6, r5
 8020848:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802084c:	b2d2      	uxtb	r2, r2
 802084e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020852:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020856:	fb1e fe03 	smulbb	lr, lr, r3
 802085a:	b2bf      	uxth	r7, r7
 802085c:	fb12 f203 	smulbb	r2, r2, r3
 8020860:	fa5f fc8c 	uxtb.w	ip, ip
 8020864:	fb05 e506 	mla	r5, r5, r6, lr
 8020868:	f107 0e01 	add.w	lr, r7, #1
 802086c:	fb0c 2c06 	mla	ip, ip, r6, r2
 8020870:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020874:	fa1f fc8c 	uxth.w	ip, ip
 8020878:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 802087c:	b2ad      	uxth	r5, r5
 802087e:	f10c 0701 	add.w	r7, ip, #1
 8020882:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020886:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802088a:	ea47 070e 	orr.w	r7, r7, lr
 802088e:	f105 0e01 	add.w	lr, r5, #1
 8020892:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8020896:	096d      	lsrs	r5, r5, #5
 8020898:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802089c:	432f      	orrs	r7, r5
 802089e:	8007      	strh	r7, [r0, #0]
 80208a0:	3002      	adds	r0, #2
 80208a2:	3402      	adds	r4, #2
 80208a4:	e7ac      	b.n	8020800 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80208a6:	f8b9 3000 	ldrh.w	r3, [r9]
 80208aa:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80208ae:	eba3 0308 	sub.w	r3, r3, r8
 80208b2:	eba6 0608 	sub.w	r6, r6, r8
 80208b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80208ba:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80208be:	440e      	add	r6, r1
 80208c0:	e797      	b.n	80207f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80208c2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80208c6:	42a8      	cmp	r0, r5
 80208c8:	d262      	bcs.n	8020990 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80208ca:	9b00      	ldr	r3, [sp, #0]
 80208cc:	4631      	mov	r1, r6
 80208ce:	eb00 0b03 	add.w	fp, r0, r3
 80208d2:	4558      	cmp	r0, fp
 80208d4:	d24e      	bcs.n	8020974 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80208d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80208da:	b12b      	cbz	r3, 80208e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80208dc:	2bff      	cmp	r3, #255	@ 0xff
 80208de:	f8b4 e000 	ldrh.w	lr, [r4]
 80208e2:	d104      	bne.n	80208ee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80208e4:	f8a0 e000 	strh.w	lr, [r0]
 80208e8:	3002      	adds	r0, #2
 80208ea:	3402      	adds	r4, #2
 80208ec:	e7f1      	b.n	80208d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80208ee:	8802      	ldrh	r2, [r0, #0]
 80208f0:	b29f      	uxth	r7, r3
 80208f2:	43db      	mvns	r3, r3
 80208f4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80208f8:	1216      	asrs	r6, r2, #8
 80208fa:	b2db      	uxtb	r3, r3
 80208fc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020900:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8020904:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8020908:	00d2      	lsls	r2, r2, #3
 802090a:	fb16 f603 	smulbb	r6, r6, r3
 802090e:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8020912:	b2d2      	uxtb	r2, r2
 8020914:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020918:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802091c:	fb1a fa03 	smulbb	sl, sl, r3
 8020920:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020924:	fa1f fc8c 	uxth.w	ip, ip
 8020928:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802092c:	fb12 f303 	smulbb	r3, r2, r3
 8020930:	fa5f fe8e 	uxtb.w	lr, lr
 8020934:	fb06 a607 	mla	r6, r6, r7, sl
 8020938:	f10c 0201 	add.w	r2, ip, #1
 802093c:	fb0e 3307 	mla	r3, lr, r7, r3
 8020940:	b2b6      	uxth	r6, r6
 8020942:	b29b      	uxth	r3, r3
 8020944:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020948:	f106 0a01 	add.w	sl, r6, #1
 802094c:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8020950:	f103 0c01 	add.w	ip, r3, #1
 8020954:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8020958:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802095c:	0976      	lsrs	r6, r6, #5
 802095e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020962:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020966:	ea4c 0c02 	orr.w	ip, ip, r2
 802096a:	ea4c 0c06 	orr.w	ip, ip, r6
 802096e:	f8a0 c000 	strh.w	ip, [r0]
 8020972:	e7b9      	b.n	80208e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8020974:	f8b9 3000 	ldrh.w	r3, [r9]
 8020978:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802097c:	eba3 0308 	sub.w	r3, r3, r8
 8020980:	eba6 0608 	sub.w	r6, r6, r8
 8020984:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020988:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802098c:	440e      	add	r6, r1
 802098e:	e79a      	b.n	80208c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8020990:	4b03      	ldr	r3, [pc, #12]	@ (80209a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020992:	6818      	ldr	r0, [r3, #0]
 8020994:	6803      	ldr	r3, [r0, #0]
 8020996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020998:	4798      	blx	r3
 802099a:	b007      	add	sp, #28
 802099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209a0:	24006600 	.word	0x24006600
 80209a4:	240065fa 	.word	0x240065fa

080209a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80209a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209ac:	b089      	sub	sp, #36	@ 0x24
 80209ae:	4607      	mov	r7, r0
 80209b0:	4688      	mov	r8, r1
 80209b2:	4692      	mov	sl, r2
 80209b4:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 80209b8:	4699      	mov	r9, r3
 80209ba:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80209bc:	2e00      	cmp	r6, #0
 80209be:	d048      	beq.n	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80209c0:	4608      	mov	r0, r1
 80209c2:	f7fa f81b 	bl	801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80209c6:	4605      	mov	r5, r0
 80209c8:	4640      	mov	r0, r8
 80209ca:	f7fa f84b 	bl	801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80209ce:	f8ad 000e 	strh.w	r0, [sp, #14]
 80209d2:	4640      	mov	r0, r8
 80209d4:	f8ad a008 	strh.w	sl, [sp, #8]
 80209d8:	f8ad 500c 	strh.w	r5, [sp, #12]
 80209dc:	f8ad 900a 	strh.w	r9, [sp, #10]
 80209e0:	f7fa f8fe 	bl	801abe0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80209e4:	4605      	mov	r5, r0
 80209e6:	4640      	mov	r0, r8
 80209e8:	f7fa f92a 	bl	801ac40 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80209ec:	4682      	mov	sl, r0
 80209ee:	4640      	mov	r0, r8
 80209f0:	f7fa f97a 	bl	801ace8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80209f4:	2810      	cmp	r0, #16
 80209f6:	d82c      	bhi.n	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80209f8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80209fc:	00ba00ca 	.word	0x00ba00ca
 8020a00:	002b0011 	.word	0x002b0011
 8020a04:	002b002b 	.word	0x002b002b
 8020a08:	002b002b 	.word	0x002b002b
 8020a0c:	002b002b 	.word	0x002b002b
 8020a10:	00c1002b 	.word	0x00c1002b
 8020a14:	002b002b 	.word	0x002b002b
 8020a18:	002b0180 	.word	0x002b0180
 8020a1c:	0173      	.short	0x0173
 8020a1e:	4bbc      	ldr	r3, [pc, #752]	@ (8020d10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8020a20:	6818      	ldr	r0, [r3, #0]
 8020a22:	6803      	ldr	r3, [r0, #0]
 8020a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020a26:	4798      	blx	r3
 8020a28:	2eff      	cmp	r6, #255	@ 0xff
 8020a2a:	d101      	bne.n	8020a30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8020a2c:	0683      	lsls	r3, r0, #26
 8020a2e:	d506      	bpl.n	8020a3e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8020a30:	4633      	mov	r3, r6
 8020a32:	4622      	mov	r2, r4
 8020a34:	a902      	add	r1, sp, #8
 8020a36:	4628      	mov	r0, r5
 8020a38:	f7ff f8fc 	bl	801fc34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020a3c:	e009      	b.n	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020a3e:	4640      	mov	r0, r8
 8020a40:	f7fa f896 	bl	801ab70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020a44:	b940      	cbnz	r0, 8020a58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8020a46:	4623      	mov	r3, r4
 8020a48:	aa02      	add	r2, sp, #8
 8020a4a:	4629      	mov	r1, r5
 8020a4c:	4638      	mov	r0, r7
 8020a4e:	f7ff f9d7 	bl	801fe00 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8020a52:	b009      	add	sp, #36	@ 0x24
 8020a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a58:	f10d 0918 	add.w	r9, sp, #24
 8020a5c:	4641      	mov	r1, r8
 8020a5e:	f10d 0810 	add.w	r8, sp, #16
 8020a62:	4648      	mov	r0, r9
 8020a64:	f7fa f832 	bl	801aacc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8020a68:	e899 0003 	ldmia.w	r9, {r0, r1}
 8020a6c:	e888 0003 	stmia.w	r8, {r0, r1}
 8020a70:	4640      	mov	r0, r8
 8020a72:	4621      	mov	r1, r4
 8020a74:	f7f2 f976 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8020a78:	4640      	mov	r0, r8
 8020a7a:	f7f2 f9b6 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8020a7e:	2800      	cmp	r0, #0
 8020a80:	d1d6      	bne.n	8020a30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8020a82:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020a86:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020a8a:	4293      	cmp	r3, r2
 8020a8c:	dd12      	ble.n	8020ab4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8020a8e:	1a9b      	subs	r3, r3, r2
 8020a90:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020a94:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020a98:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020a9c:	4628      	mov	r0, r5
 8020a9e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020aa2:	464a      	mov	r2, r9
 8020aa4:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020aa8:	a902      	add	r1, sp, #8
 8020aaa:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020aae:	4633      	mov	r3, r6
 8020ab0:	f7ff f8c0 	bl	801fc34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020ab4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020ab8:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020abc:	4293      	cmp	r3, r2
 8020abe:	dd12      	ble.n	8020ae6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8020ac0:	1a9b      	subs	r3, r3, r2
 8020ac2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8020ac6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8020aca:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020ace:	464a      	mov	r2, r9
 8020ad0:	f8ad 001a 	strh.w	r0, [sp, #26]
 8020ad4:	4628      	mov	r0, r5
 8020ad6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020ada:	23ff      	movs	r3, #255	@ 0xff
 8020adc:	f8ad 101e 	strh.w	r1, [sp, #30]
 8020ae0:	a902      	add	r1, sp, #8
 8020ae2:	f7ff f8a7 	bl	801fc34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020ae6:	4643      	mov	r3, r8
 8020ae8:	aa02      	add	r2, sp, #8
 8020aea:	4629      	mov	r1, r5
 8020aec:	4638      	mov	r0, r7
 8020aee:	f7ff f987 	bl	801fe00 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8020af2:	88a2      	ldrh	r2, [r4, #4]
 8020af4:	8823      	ldrh	r3, [r4, #0]
 8020af6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8020afa:	4413      	add	r3, r2
 8020afc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020b00:	440a      	add	r2, r1
 8020b02:	b29b      	uxth	r3, r3
 8020b04:	b292      	uxth	r2, r2
 8020b06:	b218      	sxth	r0, r3
 8020b08:	b211      	sxth	r1, r2
 8020b0a:	4288      	cmp	r0, r1
 8020b0c:	dd12      	ble.n	8020b34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8020b0e:	1a9b      	subs	r3, r3, r2
 8020b10:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8020b14:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8020b18:	464a      	mov	r2, r9
 8020b1a:	f8ad 1018 	strh.w	r1, [sp, #24]
 8020b1e:	a902      	add	r1, sp, #8
 8020b20:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020b24:	23ff      	movs	r3, #255	@ 0xff
 8020b26:	f8ad 001e 	strh.w	r0, [sp, #30]
 8020b2a:	4628      	mov	r0, r5
 8020b2c:	f8ad 601a 	strh.w	r6, [sp, #26]
 8020b30:	f7ff f880 	bl	801fc34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020b34:	88e2      	ldrh	r2, [r4, #6]
 8020b36:	8863      	ldrh	r3, [r4, #2]
 8020b38:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020b3c:	4413      	add	r3, r2
 8020b3e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8020b42:	440a      	add	r2, r1
 8020b44:	b29b      	uxth	r3, r3
 8020b46:	b292      	uxth	r2, r2
 8020b48:	b218      	sxth	r0, r3
 8020b4a:	b211      	sxth	r1, r2
 8020b4c:	4288      	cmp	r0, r1
 8020b4e:	dd80      	ble.n	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020b50:	1a9b      	subs	r3, r3, r2
 8020b52:	f9b4 6000 	ldrsh.w	r6, [r4]
 8020b56:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020b5a:	464a      	mov	r2, r9
 8020b5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020b60:	23ff      	movs	r3, #255	@ 0xff
 8020b62:	f8ad 6018 	strh.w	r6, [sp, #24]
 8020b66:	f8ad 101a 	strh.w	r1, [sp, #26]
 8020b6a:	f8ad 001c 	strh.w	r0, [sp, #28]
 8020b6e:	e761      	b.n	8020a34 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8020b70:	4633      	mov	r3, r6
 8020b72:	4622      	mov	r2, r4
 8020b74:	a902      	add	r1, sp, #8
 8020b76:	4628      	mov	r0, r5
 8020b78:	f7ff f9b2 	bl	801fee0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8020b7c:	e769      	b.n	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020b7e:	e9cd 4600 	strd	r4, r6, [sp]
 8020b82:	ab02      	add	r3, sp, #8
 8020b84:	4652      	mov	r2, sl
 8020b86:	4629      	mov	r1, r5
 8020b88:	4638      	mov	r0, r7
 8020b8a:	f7ff fd89 	bl	80206a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020b8e:	e760      	b.n	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020b90:	4640      	mov	r0, r8
 8020b92:	f7f9 ffed 	bl	801ab70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020b96:	b948      	cbnz	r0, 8020bac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8020b98:	683b      	ldr	r3, [r7, #0]
 8020b9a:	aa02      	add	r2, sp, #8
 8020b9c:	4629      	mov	r1, r5
 8020b9e:	e9cd 6000 	strd	r6, r0, [sp]
 8020ba2:	4638      	mov	r0, r7
 8020ba4:	68de      	ldr	r6, [r3, #12]
 8020ba6:	4623      	mov	r3, r4
 8020ba8:	47b0      	blx	r6
 8020baa:	e752      	b.n	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020bac:	f10d 0918 	add.w	r9, sp, #24
 8020bb0:	4641      	mov	r1, r8
 8020bb2:	f10d 0810 	add.w	r8, sp, #16
 8020bb6:	4648      	mov	r0, r9
 8020bb8:	f7f9 ff88 	bl	801aacc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8020bbc:	e899 0003 	ldmia.w	r9, {r0, r1}
 8020bc0:	e888 0003 	stmia.w	r8, {r0, r1}
 8020bc4:	4640      	mov	r0, r8
 8020bc6:	4621      	mov	r1, r4
 8020bc8:	f7f2 f8cc 	bl	8012d64 <_ZN8touchgfx4RectaNERKS0_>
 8020bcc:	4640      	mov	r0, r8
 8020bce:	f7f2 f90c 	bl	8012dea <_ZNK8touchgfx4Rect7isEmptyEv>
 8020bd2:	b138      	cbz	r0, 8020be4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8020bd4:	4623      	mov	r3, r4
 8020bd6:	9600      	str	r6, [sp, #0]
 8020bd8:	aa02      	add	r2, sp, #8
 8020bda:	4651      	mov	r1, sl
 8020bdc:	4628      	mov	r0, r5
 8020bde:	f7ff fdbd 	bl	802075c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020be2:	e736      	b.n	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020be4:	683b      	ldr	r3, [r7, #0]
 8020be6:	aa02      	add	r2, sp, #8
 8020be8:	4629      	mov	r1, r5
 8020bea:	e9cd 6000 	strd	r6, r0, [sp]
 8020bee:	4638      	mov	r0, r7
 8020bf0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8020bf4:	4643      	mov	r3, r8
 8020bf6:	47d8      	blx	fp
 8020bf8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020bfc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020c00:	4293      	cmp	r3, r2
 8020c02:	dd13      	ble.n	8020c2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8020c04:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020c08:	1a9b      	subs	r3, r3, r2
 8020c0a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020c0e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020c12:	4628      	mov	r0, r5
 8020c14:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020c18:	aa02      	add	r2, sp, #8
 8020c1a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020c1e:	4651      	mov	r1, sl
 8020c20:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020c24:	464b      	mov	r3, r9
 8020c26:	9600      	str	r6, [sp, #0]
 8020c28:	f7ff fd98 	bl	802075c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020c2c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020c30:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020c34:	4293      	cmp	r3, r2
 8020c36:	dd13      	ble.n	8020c60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8020c38:	1a9b      	subs	r3, r3, r2
 8020c3a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8020c3e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8020c42:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020c46:	aa02      	add	r2, sp, #8
 8020c48:	f8ad 001a 	strh.w	r0, [sp, #26]
 8020c4c:	4628      	mov	r0, r5
 8020c4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020c52:	464b      	mov	r3, r9
 8020c54:	f8ad 101e 	strh.w	r1, [sp, #30]
 8020c58:	4651      	mov	r1, sl
 8020c5a:	9600      	str	r6, [sp, #0]
 8020c5c:	f7ff fd7e 	bl	802075c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020c60:	88a2      	ldrh	r2, [r4, #4]
 8020c62:	8823      	ldrh	r3, [r4, #0]
 8020c64:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8020c68:	4413      	add	r3, r2
 8020c6a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020c6e:	440a      	add	r2, r1
 8020c70:	b29b      	uxth	r3, r3
 8020c72:	b292      	uxth	r2, r2
 8020c74:	b218      	sxth	r0, r3
 8020c76:	b211      	sxth	r1, r2
 8020c78:	4288      	cmp	r0, r1
 8020c7a:	dd13      	ble.n	8020ca4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8020c7c:	1a9b      	subs	r3, r3, r2
 8020c7e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8020c82:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8020c86:	aa02      	add	r2, sp, #8
 8020c88:	f8ad 1018 	strh.w	r1, [sp, #24]
 8020c8c:	4651      	mov	r1, sl
 8020c8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020c92:	464b      	mov	r3, r9
 8020c94:	f8ad 001e 	strh.w	r0, [sp, #30]
 8020c98:	4628      	mov	r0, r5
 8020c9a:	9600      	str	r6, [sp, #0]
 8020c9c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8020ca0:	f7ff fd5c 	bl	802075c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020ca4:	88e2      	ldrh	r2, [r4, #6]
 8020ca6:	8863      	ldrh	r3, [r4, #2]
 8020ca8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020cac:	4413      	add	r3, r2
 8020cae:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8020cb2:	440a      	add	r2, r1
 8020cb4:	b29b      	uxth	r3, r3
 8020cb6:	b292      	uxth	r2, r2
 8020cb8:	b218      	sxth	r0, r3
 8020cba:	b211      	sxth	r1, r2
 8020cbc:	4288      	cmp	r0, r1
 8020cbe:	f77f aec8 	ble.w	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020cc2:	f9b4 7000 	ldrsh.w	r7, [r4]
 8020cc6:	1a9b      	subs	r3, r3, r2
 8020cc8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020ccc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020cd0:	464b      	mov	r3, r9
 8020cd2:	f8ad 7018 	strh.w	r7, [sp, #24]
 8020cd6:	f8ad 101a 	strh.w	r1, [sp, #26]
 8020cda:	f8ad 001c 	strh.w	r0, [sp, #28]
 8020cde:	9600      	str	r6, [sp, #0]
 8020ce0:	e77a      	b.n	8020bd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8020ce2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8020ce6:	2800      	cmp	r0, #0
 8020ce8:	f43f aeb3 	beq.w	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020cec:	6803      	ldr	r3, [r0, #0]
 8020cee:	9600      	str	r6, [sp, #0]
 8020cf0:	68de      	ldr	r6, [r3, #12]
 8020cf2:	4623      	mov	r3, r4
 8020cf4:	aa02      	add	r2, sp, #8
 8020cf6:	4629      	mov	r1, r5
 8020cf8:	47b0      	blx	r6
 8020cfa:	e6aa      	b.n	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020cfc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8020d00:	2800      	cmp	r0, #0
 8020d02:	f43f aea6 	beq.w	8020a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020d06:	6803      	ldr	r3, [r0, #0]
 8020d08:	9600      	str	r6, [sp, #0]
 8020d0a:	689e      	ldr	r6, [r3, #8]
 8020d0c:	e7f1      	b.n	8020cf2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8020d0e:	bf00      	nop
 8020d10:	24006600 	.word	0x24006600

08020d14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8020d14:	b180      	cbz	r0, 8020d38 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8020d16:	2903      	cmp	r1, #3
 8020d18:	d81c      	bhi.n	8020d54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020d1a:	e8df f001 	tbb	[pc, r1]
 8020d1e:	1d02      	.short	0x1d02
 8020d20:	1f08      	.short	0x1f08
 8020d22:	4b10      	ldr	r3, [pc, #64]	@ (8020d64 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020d24:	8818      	ldrh	r0, [r3, #0]
 8020d26:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020d2a:	4240      	negs	r0, r0
 8020d2c:	4770      	bx	lr
 8020d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8020d64 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020d30:	8818      	ldrh	r0, [r3, #0]
 8020d32:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020d36:	4770      	bx	lr
 8020d38:	2903      	cmp	r1, #3
 8020d3a:	d80b      	bhi.n	8020d54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020d3c:	a301      	add	r3, pc, #4	@ (adr r3, 8020d44 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8020d3e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020d42:	bf00      	nop
 8020d44:	08020d59 	.word	0x08020d59
 8020d48:	08020d2f 	.word	0x08020d2f
 8020d4c:	08020d5d 	.word	0x08020d5d
 8020d50:	08020d23 	.word	0x08020d23
 8020d54:	2000      	movs	r0, #0
 8020d56:	4770      	bx	lr
 8020d58:	2001      	movs	r0, #1
 8020d5a:	4770      	bx	lr
 8020d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8020d60:	4770      	bx	lr
 8020d62:	bf00      	nop
 8020d64:	240065fa 	.word	0x240065fa

08020d68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8020d68:	b180      	cbz	r0, 8020d8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8020d6a:	2903      	cmp	r1, #3
 8020d6c:	d81c      	bhi.n	8020da8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8020d6e:	e8df f001 	tbb	[pc, r1]
 8020d72:	021d      	.short	0x021d
 8020d74:	071f      	.short	0x071f
 8020d76:	4b10      	ldr	r3, [pc, #64]	@ (8020db8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020d78:	8818      	ldrh	r0, [r3, #0]
 8020d7a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020d7e:	4770      	bx	lr
 8020d80:	4b0d      	ldr	r3, [pc, #52]	@ (8020db8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020d82:	8818      	ldrh	r0, [r3, #0]
 8020d84:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020d88:	4240      	negs	r0, r0
 8020d8a:	4770      	bx	lr
 8020d8c:	2903      	cmp	r1, #3
 8020d8e:	d80b      	bhi.n	8020da8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8020d90:	a301      	add	r3, pc, #4	@ (adr r3, 8020d98 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8020d92:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020d96:	bf00      	nop
 8020d98:	08020d77 	.word	0x08020d77
 8020d9c:	08020db1 	.word	0x08020db1
 8020da0:	08020d81 	.word	0x08020d81
 8020da4:	08020dad 	.word	0x08020dad
 8020da8:	2000      	movs	r0, #0
 8020daa:	4770      	bx	lr
 8020dac:	2001      	movs	r0, #1
 8020dae:	4770      	bx	lr
 8020db0:	f04f 30ff 	mov.w	r0, #4294967295
 8020db4:	4770      	bx	lr
 8020db6:	bf00      	nop
 8020db8:	240065fa 	.word	0x240065fa

08020dbc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dc0:	b099      	sub	sp, #100	@ 0x64
 8020dc2:	910d      	str	r1, [sp, #52]	@ 0x34
 8020dc4:	a914      	add	r1, sp, #80	@ 0x50
 8020dc6:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8020dca:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8020dce:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8020dd2:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8020dd4:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 8020dd8:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8020ddc:	e881 000c 	stmia.w	r1, {r2, r3}
 8020de0:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8020de4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020de6:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8020dea:	9310      	str	r3, [sp, #64]	@ 0x40
 8020dec:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8020df0:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8020df4:	9308      	str	r3, [sp, #32]
 8020df6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8020dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8020dfc:	7b4b      	ldrb	r3, [r1, #13]
 8020dfe:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8020e02:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 8020e06:	f891 8006 	ldrb.w	r8, [r1, #6]
 8020e0a:	ea58 0800 	orrs.w	r8, r8, r0
 8020e0e:	f000 81d0 	beq.w	80211b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8020e12:	011b      	lsls	r3, r3, #4
 8020e14:	79c8      	ldrb	r0, [r1, #7]
 8020e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020e1a:	4303      	orrs	r3, r0
 8020e1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e1e:	f000 81c8 	beq.w	80211b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8020e22:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020e26:	b29b      	uxth	r3, r3
 8020e28:	2d00      	cmp	r5, #0
 8020e2a:	f000 812d 	beq.w	8021088 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8020e2e:	1aed      	subs	r5, r5, r3
 8020e30:	b2ad      	uxth	r5, r5
 8020e32:	0429      	lsls	r1, r5, #16
 8020e34:	d502      	bpl.n	8020e3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8020e36:	1b64      	subs	r4, r4, r5
 8020e38:	2500      	movs	r5, #0
 8020e3a:	b224      	sxth	r4, r4
 8020e3c:	f9b2 0000 	ldrsh.w	r0, [r2]
 8020e40:	8891      	ldrh	r1, [r2, #4]
 8020e42:	4284      	cmp	r4, r0
 8020e44:	b283      	uxth	r3, r0
 8020e46:	bfb8      	it	lt
 8020e48:	18ed      	addlt	r5, r5, r3
 8020e4a:	440b      	add	r3, r1
 8020e4c:	b21b      	sxth	r3, r3
 8020e4e:	bfb8      	it	lt
 8020e50:	1b2c      	sublt	r4, r5, r4
 8020e52:	930a      	str	r3, [sp, #40]	@ 0x28
 8020e54:	bfb8      	it	lt
 8020e56:	b2a5      	uxthlt	r5, r4
 8020e58:	88d3      	ldrh	r3, [r2, #6]
 8020e5a:	bfb8      	it	lt
 8020e5c:	4604      	movlt	r4, r0
 8020e5e:	8852      	ldrh	r2, [r2, #2]
 8020e60:	a814      	add	r0, sp, #80	@ 0x50
 8020e62:	4621      	mov	r1, r4
 8020e64:	4413      	add	r3, r2
 8020e66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020e68:	b21b      	sxth	r3, r3
 8020e6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020e6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020e6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8020e70:	4bb2      	ldr	r3, [pc, #712]	@ (802113c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8020e72:	f893 b000 	ldrb.w	fp, [r3]
 8020e76:	4653      	mov	r3, sl
 8020e78:	f7f5 fe97 	bl	8016baa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020e7c:	4621      	mov	r1, r4
 8020e7e:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8020e82:	4653      	mov	r3, sl
 8020e84:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020e86:	a814      	add	r0, sp, #80	@ 0x50
 8020e88:	f7f5 feac 	bl	8016be4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020e8c:	a918      	add	r1, sp, #96	@ 0x60
 8020e8e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020e92:	a817      	add	r0, sp, #92	@ 0x5c
 8020e94:	f7f5 ffd2 	bl	8016e3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020e98:	f1ba 0f00 	cmp.w	sl, #0
 8020e9c:	f040 80f7 	bne.w	802108e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 8020ea0:	f1bb 0f01 	cmp.w	fp, #1
 8020ea4:	f040 80fb 	bne.w	802109e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8020ea8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020eaa:	2b00      	cmp	r3, #0
 8020eac:	f040 81a9 	bne.w	8021202 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x446>
 8020eb0:	fa1f f288 	uxth.w	r2, r8
 8020eb4:	b905      	cbnz	r5, 8020eb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8020eb6:	b15e      	cbz	r6, 8020ed0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x114>
 8020eb8:	fb06 5302 	mla	r3, r6, r2, r5
 8020ebc:	9808      	ldr	r0, [sp, #32]
 8020ebe:	4631      	mov	r1, r6
 8020ec0:	4343      	muls	r3, r0
 8020ec2:	f003 0607 	and.w	r6, r3, #7
 8020ec6:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 8020eca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020ecc:	1a5b      	subs	r3, r3, r1
 8020ece:	930e      	str	r3, [sp, #56]	@ 0x38
 8020ed0:	f10b 31ff 	add.w	r1, fp, #4294967295
 8020ed4:	424b      	negs	r3, r1
 8020ed6:	414b      	adcs	r3, r1
 8020ed8:	4651      	mov	r1, sl
 8020eda:	4618      	mov	r0, r3
 8020edc:	930c      	str	r3, [sp, #48]	@ 0x30
 8020ede:	f7ff ff19 	bl	8020d14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8020ee2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020ee4:	4683      	mov	fp, r0
 8020ee6:	4618      	mov	r0, r3
 8020ee8:	f7ff ff3e 	bl	8020d68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8020eec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020eee:	4603      	mov	r3, r0
 8020ef0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020ef2:	eba1 0a00 	sub.w	sl, r1, r0
 8020ef6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020ef8:	458a      	cmp	sl, r1
 8020efa:	bfa8      	it	ge
 8020efc:	468a      	movge	sl, r1
 8020efe:	f1ba 0f00 	cmp.w	sl, #0
 8020f02:	f340 8156 	ble.w	80211b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8020f06:	1b64      	subs	r4, r4, r5
 8020f08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020f0a:	1b0c      	subs	r4, r1, r4
 8020f0c:	4544      	cmp	r4, r8
 8020f0e:	bfd4      	ite	le
 8020f10:	ebc5 0504 	rsble	r5, r5, r4
 8020f14:	ebc5 0508 	rsbgt	r5, r5, r8
 8020f18:	2d00      	cmp	r5, #0
 8020f1a:	f340 814a 	ble.w	80211b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8020f1e:	1b52      	subs	r2, r2, r5
 8020f20:	9908      	ldr	r1, [sp, #32]
 8020f22:	434a      	muls	r2, r1
 8020f24:	920e      	str	r2, [sp, #56]	@ 0x38
 8020f26:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020f28:	2a00      	cmp	r2, #0
 8020f2a:	f040 8176 	bne.w	802121a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 8020f2e:	4a84      	ldr	r2, [pc, #528]	@ (8021140 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8020f30:	930a      	str	r3, [sp, #40]	@ 0x28
 8020f32:	6810      	ldr	r0, [r2, #0]
 8020f34:	6802      	ldr	r2, [r0, #0]
 8020f36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8020f38:	4790      	blx	r2
 8020f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020f3c:	9908      	ldr	r1, [sp, #32]
 8020f3e:	2201      	movs	r2, #1
 8020f40:	408a      	lsls	r2, r1
 8020f42:	4980      	ldr	r1, [pc, #512]	@ (8021144 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8020f44:	3a01      	subs	r2, #1
 8020f46:	880c      	ldrh	r4, [r1, #0]
 8020f48:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 8020f4c:	b2d2      	uxtb	r2, r2
 8020f4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8020f50:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 8020f54:	fb04 1202 	mla	r2, r4, r2, r1
 8020f58:	ea4f 2419 	mov.w	r4, r9, lsr #8
 8020f5c:	ea4f 1159 	mov.w	r1, r9, lsr #5
 8020f60:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020f64:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020f68:	920a      	str	r2, [sp, #40]	@ 0x28
 8020f6a:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8020f6e:	9212      	str	r2, [sp, #72]	@ 0x48
 8020f70:	b2e2      	uxtb	r2, r4
 8020f72:	9211      	str	r2, [sp, #68]	@ 0x44
 8020f74:	fa5f f289 	uxtb.w	r2, r9
 8020f78:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 8020f7c:	9210      	str	r2, [sp, #64]	@ 0x40
 8020f7e:	4a72      	ldr	r2, [pc, #456]	@ (8021148 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8020f80:	4022      	ands	r2, r4
 8020f82:	430a      	orrs	r2, r1
 8020f84:	ea4f 014b 	mov.w	r1, fp, lsl #1
 8020f88:	fb05 3b1b 	mls	fp, r5, fp, r3
 8020f8c:	ea42 0209 	orr.w	r2, r2, r9
 8020f90:	460b      	mov	r3, r1
 8020f92:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020f94:	b292      	uxth	r2, r2
 8020f96:	436b      	muls	r3, r5
 8020f98:	920f      	str	r2, [sp, #60]	@ 0x3c
 8020f9a:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 8020f9e:	783a      	ldrb	r2, [r7, #0]
 8020fa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020fa2:	4132      	asrs	r2, r6
 8020fa4:	b2d2      	uxtb	r2, r2
 8020fa6:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020faa:	f0c0 814a 	bcc.w	8021242 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x486>
 8020fae:	46a9      	mov	r9, r5
 8020fb0:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8020fb4:	f119 39ff 	adds.w	r9, r9, #4294967295
 8020fb8:	f0c0 8133 	bcc.w	8021222 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x466>
 8020fbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020fbe:	4013      	ands	r3, r2
 8020fc0:	d054      	beq.n	802106c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 8020fc2:	20ff      	movs	r0, #255	@ 0xff
 8020fc4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020fc6:	fb90 f1f1 	sdiv	r1, r0, r1
 8020fca:	434b      	muls	r3, r1
 8020fcc:	2bfe      	cmp	r3, #254	@ 0xfe
 8020fce:	dd03      	ble.n	8020fd8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21c>
 8020fd0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020fd2:	4281      	cmp	r1, r0
 8020fd4:	f000 8123 	beq.w	802121e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x462>
 8020fd8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020fda:	f8b8 4000 	ldrh.w	r4, [r8]
 8020fde:	fb11 f303 	smulbb	r3, r1, r3
 8020fe2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020fe4:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 8020fe8:	b29b      	uxth	r3, r3
 8020fea:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8020fee:	1c59      	adds	r1, r3, #1
 8020ff0:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 8020ff4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020ff8:	1221      	asrs	r1, r4, #8
 8020ffa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020ffe:	00e4      	lsls	r4, r4, #3
 8021000:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8021004:	fa1f fe83 	uxth.w	lr, r3
 8021008:	43db      	mvns	r3, r3
 802100a:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802100e:	fb10 fb0e 	smulbb	fp, r0, lr
 8021012:	b2db      	uxtb	r3, r3
 8021014:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021016:	b2e4      	uxtb	r4, r4
 8021018:	fb01 b103 	mla	r1, r1, r3, fp
 802101c:	fb10 fb0e 	smulbb	fp, r0, lr
 8021020:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021022:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021026:	fb10 fe0e 	smulbb	lr, r0, lr
 802102a:	b289      	uxth	r1, r1
 802102c:	fb0c bc03 	mla	ip, ip, r3, fp
 8021030:	fb04 e403 	mla	r4, r4, r3, lr
 8021034:	1c4b      	adds	r3, r1, #1
 8021036:	fa1f fc8c 	uxth.w	ip, ip
 802103a:	b2a4      	uxth	r4, r4
 802103c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021040:	f104 0b01 	add.w	fp, r4, #1
 8021044:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8021048:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 802104c:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8021050:	ea4b 0101 	orr.w	r1, fp, r1
 8021054:	f10c 0b01 	add.w	fp, ip, #1
 8021058:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 802105c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8021060:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8021064:	ea41 010b 	orr.w	r1, r1, fp
 8021068:	f8a8 1000 	strh.w	r1, [r8]
 802106c:	9b08      	ldr	r3, [sp, #32]
 802106e:	441e      	add	r6, r3
 8021070:	b2b6      	uxth	r6, r6
 8021072:	2e07      	cmp	r6, #7
 8021074:	bf98      	it	ls
 8021076:	411a      	asrls	r2, r3
 8021078:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802107a:	bf85      	ittet	hi
 802107c:	787a      	ldrbhi	r2, [r7, #1]
 802107e:	2600      	movhi	r6, #0
 8021080:	b2d2      	uxtbls	r2, r2
 8021082:	3701      	addhi	r7, #1
 8021084:	4498      	add	r8, r3
 8021086:	e795      	b.n	8020fb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 8021088:	441c      	add	r4, r3
 802108a:	b224      	sxth	r4, r4
 802108c:	e6d6      	b.n	8020e3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 802108e:	f1ba 0f01 	cmp.w	sl, #1
 8021092:	f47f af09 	bne.w	8020ea8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021096:	f1bb 0f01 	cmp.w	fp, #1
 802109a:	f47f af05 	bne.w	8020ea8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 802109e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80210a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80210a2:	1a99      	subs	r1, r3, r2
 80210a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80210a6:	1b9b      	subs	r3, r3, r6
 80210a8:	4299      	cmp	r1, r3
 80210aa:	bfa8      	it	ge
 80210ac:	4619      	movge	r1, r3
 80210ae:	2900      	cmp	r1, #0
 80210b0:	9112      	str	r1, [sp, #72]	@ 0x48
 80210b2:	dd7e      	ble.n	80211b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 80210b4:	4a22      	ldr	r2, [pc, #136]	@ (8021140 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80210b6:	6810      	ldr	r0, [r2, #0]
 80210b8:	9211      	str	r2, [sp, #68]	@ 0x44
 80210ba:	6803      	ldr	r3, [r0, #0]
 80210bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80210be:	4798      	blx	r3
 80210c0:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80210c4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80210c6:	d006      	beq.n	80210d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 80210c8:	9b08      	ldr	r3, [sp, #32]
 80210ca:	2b04      	cmp	r3, #4
 80210cc:	d133      	bne.n	8021136 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 80210ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80210d0:	3300      	adds	r3, #0
 80210d2:	bf18      	it	ne
 80210d4:	2301      	movne	r3, #1
 80210d6:	0582      	lsls	r2, r0, #22
 80210d8:	fa1f fc88 	uxth.w	ip, r8
 80210dc:	f140 80ba 	bpl.w	8021254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>
 80210e0:	9808      	ldr	r0, [sp, #32]
 80210e2:	2808      	cmp	r0, #8
 80210e4:	f040 80b6 	bne.w	8021254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>
 80210e8:	2b00      	cmp	r3, #0
 80210ea:	d065      	beq.n	80211b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3fc>
 80210ec:	f10c 0c01 	add.w	ip, ip, #1
 80210f0:	f02c 0301 	bic.w	r3, ip, #1
 80210f4:	b29b      	uxth	r3, r3
 80210f6:	bb4d      	cbnz	r5, 802114c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80210f8:	eb08 0004 	add.w	r0, r8, r4
 80210fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80210fe:	4290      	cmp	r0, r2
 8021100:	dc24      	bgt.n	802114c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8021102:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021104:	b289      	uxth	r1, r1
 8021106:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 802110a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 802110e:	6810      	ldr	r0, [r2, #0]
 8021110:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8021114:	6804      	ldr	r4, [r0, #0]
 8021116:	9506      	str	r5, [sp, #24]
 8021118:	f44f 7580 	mov.w	r5, #256	@ 0x100
 802111c:	9302      	str	r3, [sp, #8]
 802111e:	9505      	str	r5, [sp, #20]
 8021120:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021122:	e9cd 3100 	strd	r3, r1, [sp]
 8021126:	e9cd 9503 	strd	r9, r5, [sp, #12]
 802112a:	4673      	mov	r3, lr
 802112c:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 802112e:	fb06 710c 	mla	r1, r6, ip, r7
 8021132:	47a0      	blx	r4
 8021134:	e03d      	b.n	80211b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8021136:	2300      	movs	r3, #0
 8021138:	e7cd      	b.n	80210d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 802113a:	bf00      	nop
 802113c:	240065f8 	.word	0x240065f8
 8021140:	24006600 	.word	0x24006600
 8021144:	240065fa 	.word	0x240065fa
 8021148:	00fff800 	.word	0x00fff800
 802114c:	eba4 0e05 	sub.w	lr, r4, r5
 8021150:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021152:	eba2 0e0e 	sub.w	lr, r2, lr
 8021156:	45c6      	cmp	lr, r8
 8021158:	bfd4      	ite	le
 802115a:	ebc5 0e0e 	rsble	lr, r5, lr
 802115e:	ebc5 0e08 	rsbgt	lr, r5, r8
 8021162:	f1be 0f00 	cmp.w	lr, #0
 8021166:	d024      	beq.n	80211b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8021168:	07e8      	lsls	r0, r5, #31
 802116a:	f53f ae9d 	bmi.w	8020ea8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 802116e:	f01e 0001 	ands.w	r0, lr, #1
 8021172:	f47f ae99 	bne.w	8020ea8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021176:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021178:	086d      	lsrs	r5, r5, #1
 802117a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 802117e:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 8021182:	6814      	ldr	r4, [r2, #0]
 8021184:	b289      	uxth	r1, r1
 8021186:	fb06 560c 	mla	r6, r6, ip, r5
 802118a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 802118e:	6825      	ldr	r5, [r4, #0]
 8021190:	9006      	str	r0, [sp, #24]
 8021192:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8021196:	9302      	str	r3, [sp, #8]
 8021198:	fa1f f38e 	uxth.w	r3, lr
 802119c:	9005      	str	r0, [sp, #20]
 802119e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80211a0:	9101      	str	r1, [sp, #4]
 80211a2:	19b9      	adds	r1, r7, r6
 80211a4:	9300      	str	r3, [sp, #0]
 80211a6:	4643      	mov	r3, r8
 80211a8:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80211ac:	4620      	mov	r0, r4
 80211ae:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 80211b0:	47a8      	blx	r5
 80211b2:	b019      	add	sp, #100	@ 0x64
 80211b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211b8:	4a28      	ldr	r2, [pc, #160]	@ (802125c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4a0>)
 80211ba:	1b64      	subs	r4, r4, r5
 80211bc:	fb06 5608 	mla	r6, r6, r8, r5
 80211c0:	b289      	uxth	r1, r1
 80211c2:	6810      	ldr	r0, [r2, #0]
 80211c4:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 80211c8:	f8d0 a000 	ldr.w	sl, [r0]
 80211cc:	9306      	str	r3, [sp, #24]
 80211ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80211d2:	9101      	str	r1, [sp, #4]
 80211d4:	19b9      	adds	r1, r7, r6
 80211d6:	9305      	str	r3, [sp, #20]
 80211d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80211da:	f8cd c008 	str.w	ip, [sp, #8]
 80211de:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80211e2:	e9cd 9303 	strd	r9, r3, [sp, #12]
 80211e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80211e8:	1b1c      	subs	r4, r3, r4
 80211ea:	4673      	mov	r3, lr
 80211ec:	4544      	cmp	r4, r8
 80211ee:	bfd4      	ite	le
 80211f0:	ebc5 0504 	rsble	r5, r5, r4
 80211f4:	ebc5 0508 	rsbgt	r5, r5, r8
 80211f8:	b2ad      	uxth	r5, r5
 80211fa:	9500      	str	r5, [sp, #0]
 80211fc:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 8021200:	e797      	b.n	8021132 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021202:	2208      	movs	r2, #8
 8021204:	9b08      	ldr	r3, [sp, #32]
 8021206:	fb92 f3f3 	sdiv	r3, r2, r3
 802120a:	1e5a      	subs	r2, r3, #1
 802120c:	4442      	add	r2, r8
 802120e:	fb92 f2f3 	sdiv	r2, r2, r3
 8021212:	fb12 f203 	smulbb	r2, r2, r3
 8021216:	b292      	uxth	r2, r2
 8021218:	e64c      	b.n	8020eb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 802121a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802121c:	e68e      	b.n	8020f3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x180>
 802121e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021220:	e722      	b.n	8021068 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ac>
 8021222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021224:	b143      	cbz	r3, 8021238 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x47c>
 8021226:	441e      	add	r6, r3
 8021228:	b2b6      	uxth	r6, r6
 802122a:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 802122e:	f006 0607 	and.w	r6, r6, #7
 8021232:	783a      	ldrb	r2, [r7, #0]
 8021234:	4132      	asrs	r2, r6
 8021236:	b2d2      	uxtb	r2, r2
 8021238:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802123a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802123c:	4419      	add	r1, r3
 802123e:	910a      	str	r1, [sp, #40]	@ 0x28
 8021240:	e6b1      	b.n	8020fa6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 8021242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021244:	2b00      	cmp	r3, #0
 8021246:	d1b4      	bne.n	80211b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8021248:	4b04      	ldr	r3, [pc, #16]	@ (802125c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4a0>)
 802124a:	6818      	ldr	r0, [r3, #0]
 802124c:	6803      	ldr	r3, [r0, #0]
 802124e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021250:	4798      	blx	r3
 8021252:	e7ae      	b.n	80211b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8021254:	2b00      	cmp	r3, #0
 8021256:	f47f af49 	bne.w	80210ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x330>
 802125a:	e625      	b.n	8020ea8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 802125c:	24006600 	.word	0x24006600

08021260 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8021260:	b538      	push	{r3, r4, r5, lr}
 8021262:	4c15      	ldr	r4, [pc, #84]	@ (80212b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8021264:	4605      	mov	r5, r0
 8021266:	7823      	ldrb	r3, [r4, #0]
 8021268:	f3bf 8f5b 	dmb	ish
 802126c:	07da      	lsls	r2, r3, #31
 802126e:	d40b      	bmi.n	8021288 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021270:	4620      	mov	r0, r4
 8021272:	f7e1 fc6d 	bl	8002b50 <__cxa_guard_acquire>
 8021276:	b138      	cbz	r0, 8021288 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021278:	4620      	mov	r0, r4
 802127a:	f7e1 fcd1 	bl	8002c20 <__cxa_guard_release>
 802127e:	4a0f      	ldr	r2, [pc, #60]	@ (80212bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021280:	490f      	ldr	r1, [pc, #60]	@ (80212c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8021282:	4810      	ldr	r0, [pc, #64]	@ (80212c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021284:	f007 fef4 	bl	8029070 <__aeabi_atexit>
 8021288:	4c0f      	ldr	r4, [pc, #60]	@ (80212c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802128a:	7823      	ldrb	r3, [r4, #0]
 802128c:	f3bf 8f5b 	dmb	ish
 8021290:	07db      	lsls	r3, r3, #31
 8021292:	d40b      	bmi.n	80212ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021294:	4620      	mov	r0, r4
 8021296:	f7e1 fc5b 	bl	8002b50 <__cxa_guard_acquire>
 802129a:	b138      	cbz	r0, 80212ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 802129c:	4620      	mov	r0, r4
 802129e:	f7e1 fcbf 	bl	8002c20 <__cxa_guard_release>
 80212a2:	4a06      	ldr	r2, [pc, #24]	@ (80212bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80212a4:	4909      	ldr	r1, [pc, #36]	@ (80212cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80212a6:	480a      	ldr	r0, [pc, #40]	@ (80212d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80212a8:	f007 fee2 	bl	8029070 <__aeabi_atexit>
 80212ac:	4b05      	ldr	r3, [pc, #20]	@ (80212c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80212ae:	616b      	str	r3, [r5, #20]
 80212b0:	4b07      	ldr	r3, [pc, #28]	@ (80212d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80212b2:	61ab      	str	r3, [r5, #24]
 80212b4:	bd38      	pop	{r3, r4, r5, pc}
 80212b6:	bf00      	nop
 80212b8:	240066dc 	.word	0x240066dc
 80212bc:	24000000 	.word	0x24000000
 80212c0:	0801d35f 	.word	0x0801d35f
 80212c4:	2400006c 	.word	0x2400006c
 80212c8:	240066e0 	.word	0x240066e0
 80212cc:	0801d35d 	.word	0x0801d35d
 80212d0:	24000070 	.word	0x24000070

080212d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80212d4:	b538      	push	{r3, r4, r5, lr}
 80212d6:	4c15      	ldr	r4, [pc, #84]	@ (802132c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80212d8:	4605      	mov	r5, r0
 80212da:	7823      	ldrb	r3, [r4, #0]
 80212dc:	f3bf 8f5b 	dmb	ish
 80212e0:	07da      	lsls	r2, r3, #31
 80212e2:	d40b      	bmi.n	80212fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80212e4:	4620      	mov	r0, r4
 80212e6:	f7e1 fc33 	bl	8002b50 <__cxa_guard_acquire>
 80212ea:	b138      	cbz	r0, 80212fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80212ec:	4620      	mov	r0, r4
 80212ee:	f7e1 fc97 	bl	8002c20 <__cxa_guard_release>
 80212f2:	4a0f      	ldr	r2, [pc, #60]	@ (8021330 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80212f4:	490f      	ldr	r1, [pc, #60]	@ (8021334 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80212f6:	4810      	ldr	r0, [pc, #64]	@ (8021338 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80212f8:	f007 feba 	bl	8029070 <__aeabi_atexit>
 80212fc:	4c0f      	ldr	r4, [pc, #60]	@ (802133c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80212fe:	7823      	ldrb	r3, [r4, #0]
 8021300:	f3bf 8f5b 	dmb	ish
 8021304:	07db      	lsls	r3, r3, #31
 8021306:	d40b      	bmi.n	8021320 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021308:	4620      	mov	r0, r4
 802130a:	f7e1 fc21 	bl	8002b50 <__cxa_guard_acquire>
 802130e:	b138      	cbz	r0, 8021320 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021310:	4620      	mov	r0, r4
 8021312:	f7e1 fc85 	bl	8002c20 <__cxa_guard_release>
 8021316:	4a06      	ldr	r2, [pc, #24]	@ (8021330 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021318:	4909      	ldr	r1, [pc, #36]	@ (8021340 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802131a:	480a      	ldr	r0, [pc, #40]	@ (8021344 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802131c:	f007 fea8 	bl	8029070 <__aeabi_atexit>
 8021320:	4b05      	ldr	r3, [pc, #20]	@ (8021338 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021322:	60eb      	str	r3, [r5, #12]
 8021324:	4b07      	ldr	r3, [pc, #28]	@ (8021344 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021326:	612b      	str	r3, [r5, #16]
 8021328:	bd38      	pop	{r3, r4, r5, pc}
 802132a:	bf00      	nop
 802132c:	240066b4 	.word	0x240066b4
 8021330:	24000000 	.word	0x24000000
 8021334:	0801d363 	.word	0x0801d363
 8021338:	24000044 	.word	0x24000044
 802133c:	240066b8 	.word	0x240066b8
 8021340:	0801d361 	.word	0x0801d361
 8021344:	24000048 	.word	0x24000048

08021348 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8021348:	b510      	push	{r4, lr}
 802134a:	4604      	mov	r4, r0
 802134c:	f7ff ff88 	bl	8021260 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8021350:	4620      	mov	r0, r4
 8021352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021356:	f7ff bfbd 	b.w	80212d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0802135c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802135c:	b538      	push	{r3, r4, r5, lr}
 802135e:	4c15      	ldr	r4, [pc, #84]	@ (80213b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021360:	4605      	mov	r5, r0
 8021362:	7823      	ldrb	r3, [r4, #0]
 8021364:	f3bf 8f5b 	dmb	ish
 8021368:	07da      	lsls	r2, r3, #31
 802136a:	d40b      	bmi.n	8021384 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802136c:	4620      	mov	r0, r4
 802136e:	f7e1 fbef 	bl	8002b50 <__cxa_guard_acquire>
 8021372:	b138      	cbz	r0, 8021384 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021374:	4620      	mov	r0, r4
 8021376:	f7e1 fc53 	bl	8002c20 <__cxa_guard_release>
 802137a:	4a0f      	ldr	r2, [pc, #60]	@ (80213b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802137c:	490f      	ldr	r1, [pc, #60]	@ (80213bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802137e:	4810      	ldr	r0, [pc, #64]	@ (80213c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021380:	f007 fe76 	bl	8029070 <__aeabi_atexit>
 8021384:	4c0f      	ldr	r4, [pc, #60]	@ (80213c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021386:	7823      	ldrb	r3, [r4, #0]
 8021388:	f3bf 8f5b 	dmb	ish
 802138c:	07db      	lsls	r3, r3, #31
 802138e:	d40b      	bmi.n	80213a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021390:	4620      	mov	r0, r4
 8021392:	f7e1 fbdd 	bl	8002b50 <__cxa_guard_acquire>
 8021396:	b138      	cbz	r0, 80213a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021398:	4620      	mov	r0, r4
 802139a:	f7e1 fc41 	bl	8002c20 <__cxa_guard_release>
 802139e:	4a06      	ldr	r2, [pc, #24]	@ (80213b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80213a0:	4909      	ldr	r1, [pc, #36]	@ (80213c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80213a2:	480a      	ldr	r0, [pc, #40]	@ (80213cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80213a4:	f007 fe64 	bl	8029070 <__aeabi_atexit>
 80213a8:	4b05      	ldr	r3, [pc, #20]	@ (80213c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80213aa:	626b      	str	r3, [r5, #36]	@ 0x24
 80213ac:	4b07      	ldr	r3, [pc, #28]	@ (80213cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80213ae:	62ab      	str	r3, [r5, #40]	@ 0x28
 80213b0:	bd38      	pop	{r3, r4, r5, pc}
 80213b2:	bf00      	nop
 80213b4:	240066e4 	.word	0x240066e4
 80213b8:	24000000 	.word	0x24000000
 80213bc:	0801d357 	.word	0x0801d357
 80213c0:	24000074 	.word	0x24000074
 80213c4:	240066e8 	.word	0x240066e8
 80213c8:	0801d355 	.word	0x0801d355
 80213cc:	24000078 	.word	0x24000078

080213d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80213d0:	b538      	push	{r3, r4, r5, lr}
 80213d2:	4c15      	ldr	r4, [pc, #84]	@ (8021428 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80213d4:	4605      	mov	r5, r0
 80213d6:	7823      	ldrb	r3, [r4, #0]
 80213d8:	f3bf 8f5b 	dmb	ish
 80213dc:	07da      	lsls	r2, r3, #31
 80213de:	d40b      	bmi.n	80213f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80213e0:	4620      	mov	r0, r4
 80213e2:	f7e1 fbb5 	bl	8002b50 <__cxa_guard_acquire>
 80213e6:	b138      	cbz	r0, 80213f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80213e8:	4620      	mov	r0, r4
 80213ea:	f7e1 fc19 	bl	8002c20 <__cxa_guard_release>
 80213ee:	4a0f      	ldr	r2, [pc, #60]	@ (802142c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80213f0:	490f      	ldr	r1, [pc, #60]	@ (8021430 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80213f2:	4810      	ldr	r0, [pc, #64]	@ (8021434 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80213f4:	f007 fe3c 	bl	8029070 <__aeabi_atexit>
 80213f8:	4c0f      	ldr	r4, [pc, #60]	@ (8021438 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80213fa:	7823      	ldrb	r3, [r4, #0]
 80213fc:	f3bf 8f5b 	dmb	ish
 8021400:	07db      	lsls	r3, r3, #31
 8021402:	d40b      	bmi.n	802141c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021404:	4620      	mov	r0, r4
 8021406:	f7e1 fba3 	bl	8002b50 <__cxa_guard_acquire>
 802140a:	b138      	cbz	r0, 802141c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802140c:	4620      	mov	r0, r4
 802140e:	f7e1 fc07 	bl	8002c20 <__cxa_guard_release>
 8021412:	4a06      	ldr	r2, [pc, #24]	@ (802142c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021414:	4909      	ldr	r1, [pc, #36]	@ (802143c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021416:	480a      	ldr	r0, [pc, #40]	@ (8021440 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021418:	f007 fe2a 	bl	8029070 <__aeabi_atexit>
 802141c:	4b05      	ldr	r3, [pc, #20]	@ (8021434 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802141e:	61eb      	str	r3, [r5, #28]
 8021420:	4b07      	ldr	r3, [pc, #28]	@ (8021440 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021422:	622b      	str	r3, [r5, #32]
 8021424:	bd38      	pop	{r3, r4, r5, pc}
 8021426:	bf00      	nop
 8021428:	240066bc 	.word	0x240066bc
 802142c:	24000000 	.word	0x24000000
 8021430:	0801d35b 	.word	0x0801d35b
 8021434:	2400004c 	.word	0x2400004c
 8021438:	240066c0 	.word	0x240066c0
 802143c:	0801d359 	.word	0x0801d359
 8021440:	24000050 	.word	0x24000050

08021444 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8021444:	b510      	push	{r4, lr}
 8021446:	4604      	mov	r4, r0
 8021448:	f7ff ff88 	bl	802135c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802144c:	4620      	mov	r0, r4
 802144e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021452:	f7ff bfbd 	b.w	80213d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021458 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021458:	b538      	push	{r3, r4, r5, lr}
 802145a:	4c15      	ldr	r4, [pc, #84]	@ (80214b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802145c:	4605      	mov	r5, r0
 802145e:	7823      	ldrb	r3, [r4, #0]
 8021460:	f3bf 8f5b 	dmb	ish
 8021464:	07da      	lsls	r2, r3, #31
 8021466:	d40b      	bmi.n	8021480 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021468:	4620      	mov	r0, r4
 802146a:	f7e1 fb71 	bl	8002b50 <__cxa_guard_acquire>
 802146e:	b138      	cbz	r0, 8021480 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021470:	4620      	mov	r0, r4
 8021472:	f7e1 fbd5 	bl	8002c20 <__cxa_guard_release>
 8021476:	4a0f      	ldr	r2, [pc, #60]	@ (80214b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021478:	490f      	ldr	r1, [pc, #60]	@ (80214b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802147a:	4810      	ldr	r0, [pc, #64]	@ (80214bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802147c:	f007 fdf8 	bl	8029070 <__aeabi_atexit>
 8021480:	4c0f      	ldr	r4, [pc, #60]	@ (80214c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021482:	7823      	ldrb	r3, [r4, #0]
 8021484:	f3bf 8f5b 	dmb	ish
 8021488:	07db      	lsls	r3, r3, #31
 802148a:	d40b      	bmi.n	80214a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802148c:	4620      	mov	r0, r4
 802148e:	f7e1 fb5f 	bl	8002b50 <__cxa_guard_acquire>
 8021492:	b138      	cbz	r0, 80214a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021494:	4620      	mov	r0, r4
 8021496:	f7e1 fbc3 	bl	8002c20 <__cxa_guard_release>
 802149a:	4a06      	ldr	r2, [pc, #24]	@ (80214b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802149c:	4909      	ldr	r1, [pc, #36]	@ (80214c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802149e:	480a      	ldr	r0, [pc, #40]	@ (80214c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80214a0:	f007 fde6 	bl	8029070 <__aeabi_atexit>
 80214a4:	4b05      	ldr	r3, [pc, #20]	@ (80214bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80214a6:	636b      	str	r3, [r5, #52]	@ 0x34
 80214a8:	4b07      	ldr	r3, [pc, #28]	@ (80214c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80214aa:	63ab      	str	r3, [r5, #56]	@ 0x38
 80214ac:	bd38      	pop	{r3, r4, r5, pc}
 80214ae:	bf00      	nop
 80214b0:	240066f4 	.word	0x240066f4
 80214b4:	24000000 	.word	0x24000000
 80214b8:	0801d34f 	.word	0x0801d34f
 80214bc:	24000084 	.word	0x24000084
 80214c0:	240066f8 	.word	0x240066f8
 80214c4:	0801d34d 	.word	0x0801d34d
 80214c8:	24000088 	.word	0x24000088

080214cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80214cc:	b538      	push	{r3, r4, r5, lr}
 80214ce:	4c15      	ldr	r4, [pc, #84]	@ (8021524 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80214d0:	4605      	mov	r5, r0
 80214d2:	7823      	ldrb	r3, [r4, #0]
 80214d4:	f3bf 8f5b 	dmb	ish
 80214d8:	07da      	lsls	r2, r3, #31
 80214da:	d40b      	bmi.n	80214f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80214dc:	4620      	mov	r0, r4
 80214de:	f7e1 fb37 	bl	8002b50 <__cxa_guard_acquire>
 80214e2:	b138      	cbz	r0, 80214f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80214e4:	4620      	mov	r0, r4
 80214e6:	f7e1 fb9b 	bl	8002c20 <__cxa_guard_release>
 80214ea:	4a0f      	ldr	r2, [pc, #60]	@ (8021528 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80214ec:	490f      	ldr	r1, [pc, #60]	@ (802152c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80214ee:	4810      	ldr	r0, [pc, #64]	@ (8021530 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80214f0:	f007 fdbe 	bl	8029070 <__aeabi_atexit>
 80214f4:	4c0f      	ldr	r4, [pc, #60]	@ (8021534 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80214f6:	7823      	ldrb	r3, [r4, #0]
 80214f8:	f3bf 8f5b 	dmb	ish
 80214fc:	07db      	lsls	r3, r3, #31
 80214fe:	d40b      	bmi.n	8021518 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021500:	4620      	mov	r0, r4
 8021502:	f7e1 fb25 	bl	8002b50 <__cxa_guard_acquire>
 8021506:	b138      	cbz	r0, 8021518 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021508:	4620      	mov	r0, r4
 802150a:	f7e1 fb89 	bl	8002c20 <__cxa_guard_release>
 802150e:	4a06      	ldr	r2, [pc, #24]	@ (8021528 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021510:	4909      	ldr	r1, [pc, #36]	@ (8021538 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021512:	480a      	ldr	r0, [pc, #40]	@ (802153c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021514:	f007 fdac 	bl	8029070 <__aeabi_atexit>
 8021518:	4b05      	ldr	r3, [pc, #20]	@ (8021530 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802151a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 802151c:	4b07      	ldr	r3, [pc, #28]	@ (802153c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802151e:	632b      	str	r3, [r5, #48]	@ 0x30
 8021520:	bd38      	pop	{r3, r4, r5, pc}
 8021522:	bf00      	nop
 8021524:	240066c4 	.word	0x240066c4
 8021528:	24000000 	.word	0x24000000
 802152c:	0801d353 	.word	0x0801d353
 8021530:	24000054 	.word	0x24000054
 8021534:	240066c8 	.word	0x240066c8
 8021538:	0801d351 	.word	0x0801d351
 802153c:	24000058 	.word	0x24000058

08021540 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021540:	b510      	push	{r4, lr}
 8021542:	4604      	mov	r4, r0
 8021544:	f7ff ff88 	bl	8021458 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021548:	4620      	mov	r0, r4
 802154a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802154e:	f7ff bfbd 	b.w	80214cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021554 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021554:	b538      	push	{r3, r4, r5, lr}
 8021556:	4c15      	ldr	r4, [pc, #84]	@ (80215ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021558:	4605      	mov	r5, r0
 802155a:	7823      	ldrb	r3, [r4, #0]
 802155c:	f3bf 8f5b 	dmb	ish
 8021560:	07da      	lsls	r2, r3, #31
 8021562:	d40b      	bmi.n	802157c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021564:	4620      	mov	r0, r4
 8021566:	f7e1 faf3 	bl	8002b50 <__cxa_guard_acquire>
 802156a:	b138      	cbz	r0, 802157c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802156c:	4620      	mov	r0, r4
 802156e:	f7e1 fb57 	bl	8002c20 <__cxa_guard_release>
 8021572:	4a0f      	ldr	r2, [pc, #60]	@ (80215b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021574:	490f      	ldr	r1, [pc, #60]	@ (80215b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021576:	4810      	ldr	r0, [pc, #64]	@ (80215b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021578:	f007 fd7a 	bl	8029070 <__aeabi_atexit>
 802157c:	4c0f      	ldr	r4, [pc, #60]	@ (80215bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802157e:	7823      	ldrb	r3, [r4, #0]
 8021580:	f3bf 8f5b 	dmb	ish
 8021584:	07db      	lsls	r3, r3, #31
 8021586:	d40b      	bmi.n	80215a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021588:	4620      	mov	r0, r4
 802158a:	f7e1 fae1 	bl	8002b50 <__cxa_guard_acquire>
 802158e:	b138      	cbz	r0, 80215a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021590:	4620      	mov	r0, r4
 8021592:	f7e1 fb45 	bl	8002c20 <__cxa_guard_release>
 8021596:	4a06      	ldr	r2, [pc, #24]	@ (80215b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021598:	4909      	ldr	r1, [pc, #36]	@ (80215c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802159a:	480a      	ldr	r0, [pc, #40]	@ (80215c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802159c:	f007 fd68 	bl	8029070 <__aeabi_atexit>
 80215a0:	4b05      	ldr	r3, [pc, #20]	@ (80215b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80215a2:	656b      	str	r3, [r5, #84]	@ 0x54
 80215a4:	4b07      	ldr	r3, [pc, #28]	@ (80215c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80215a6:	65ab      	str	r3, [r5, #88]	@ 0x58
 80215a8:	bd38      	pop	{r3, r4, r5, pc}
 80215aa:	bf00      	nop
 80215ac:	240066fc 	.word	0x240066fc
 80215b0:	24000000 	.word	0x24000000
 80215b4:	0801d33f 	.word	0x0801d33f
 80215b8:	2400008c 	.word	0x2400008c
 80215bc:	24006700 	.word	0x24006700
 80215c0:	0801d33d 	.word	0x0801d33d
 80215c4:	24000090 	.word	0x24000090

080215c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80215c8:	b538      	push	{r3, r4, r5, lr}
 80215ca:	4c15      	ldr	r4, [pc, #84]	@ (8021620 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80215cc:	4605      	mov	r5, r0
 80215ce:	7823      	ldrb	r3, [r4, #0]
 80215d0:	f3bf 8f5b 	dmb	ish
 80215d4:	07da      	lsls	r2, r3, #31
 80215d6:	d40b      	bmi.n	80215f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80215d8:	4620      	mov	r0, r4
 80215da:	f7e1 fab9 	bl	8002b50 <__cxa_guard_acquire>
 80215de:	b138      	cbz	r0, 80215f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80215e0:	4620      	mov	r0, r4
 80215e2:	f7e1 fb1d 	bl	8002c20 <__cxa_guard_release>
 80215e6:	4a0f      	ldr	r2, [pc, #60]	@ (8021624 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80215e8:	490f      	ldr	r1, [pc, #60]	@ (8021628 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80215ea:	4810      	ldr	r0, [pc, #64]	@ (802162c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80215ec:	f007 fd40 	bl	8029070 <__aeabi_atexit>
 80215f0:	4c0f      	ldr	r4, [pc, #60]	@ (8021630 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80215f2:	7823      	ldrb	r3, [r4, #0]
 80215f4:	f3bf 8f5b 	dmb	ish
 80215f8:	07db      	lsls	r3, r3, #31
 80215fa:	d40b      	bmi.n	8021614 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80215fc:	4620      	mov	r0, r4
 80215fe:	f7e1 faa7 	bl	8002b50 <__cxa_guard_acquire>
 8021602:	b138      	cbz	r0, 8021614 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021604:	4620      	mov	r0, r4
 8021606:	f7e1 fb0b 	bl	8002c20 <__cxa_guard_release>
 802160a:	4a06      	ldr	r2, [pc, #24]	@ (8021624 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802160c:	4909      	ldr	r1, [pc, #36]	@ (8021634 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802160e:	480a      	ldr	r0, [pc, #40]	@ (8021638 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021610:	f007 fd2e 	bl	8029070 <__aeabi_atexit>
 8021614:	4b05      	ldr	r3, [pc, #20]	@ (802162c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021616:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8021618:	4b07      	ldr	r3, [pc, #28]	@ (8021638 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802161a:	652b      	str	r3, [r5, #80]	@ 0x50
 802161c:	bd38      	pop	{r3, r4, r5, pc}
 802161e:	bf00      	nop
 8021620:	24006704 	.word	0x24006704
 8021624:	24000000 	.word	0x24000000
 8021628:	0801d343 	.word	0x0801d343
 802162c:	24000094 	.word	0x24000094
 8021630:	24006708 	.word	0x24006708
 8021634:	0801d341 	.word	0x0801d341
 8021638:	24000098 	.word	0x24000098

0802163c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 802163c:	b538      	push	{r3, r4, r5, lr}
 802163e:	4c15      	ldr	r4, [pc, #84]	@ (8021694 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8021640:	4605      	mov	r5, r0
 8021642:	7823      	ldrb	r3, [r4, #0]
 8021644:	f3bf 8f5b 	dmb	ish
 8021648:	07da      	lsls	r2, r3, #31
 802164a:	d40b      	bmi.n	8021664 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802164c:	4620      	mov	r0, r4
 802164e:	f7e1 fa7f 	bl	8002b50 <__cxa_guard_acquire>
 8021652:	b138      	cbz	r0, 8021664 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021654:	4620      	mov	r0, r4
 8021656:	f7e1 fae3 	bl	8002c20 <__cxa_guard_release>
 802165a:	4a0f      	ldr	r2, [pc, #60]	@ (8021698 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802165c:	490f      	ldr	r1, [pc, #60]	@ (802169c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802165e:	4810      	ldr	r0, [pc, #64]	@ (80216a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021660:	f007 fd06 	bl	8029070 <__aeabi_atexit>
 8021664:	4c0f      	ldr	r4, [pc, #60]	@ (80216a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8021666:	7823      	ldrb	r3, [r4, #0]
 8021668:	f3bf 8f5b 	dmb	ish
 802166c:	07db      	lsls	r3, r3, #31
 802166e:	d40b      	bmi.n	8021688 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021670:	4620      	mov	r0, r4
 8021672:	f7e1 fa6d 	bl	8002b50 <__cxa_guard_acquire>
 8021676:	b138      	cbz	r0, 8021688 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021678:	4620      	mov	r0, r4
 802167a:	f7e1 fad1 	bl	8002c20 <__cxa_guard_release>
 802167e:	4a06      	ldr	r2, [pc, #24]	@ (8021698 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021680:	4909      	ldr	r1, [pc, #36]	@ (80216a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8021682:	480a      	ldr	r0, [pc, #40]	@ (80216ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021684:	f007 fcf4 	bl	8029070 <__aeabi_atexit>
 8021688:	4b05      	ldr	r3, [pc, #20]	@ (80216a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802168a:	646b      	str	r3, [r5, #68]	@ 0x44
 802168c:	4b07      	ldr	r3, [pc, #28]	@ (80216ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802168e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8021690:	bd38      	pop	{r3, r4, r5, pc}
 8021692:	bf00      	nop
 8021694:	240066cc 	.word	0x240066cc
 8021698:	24000000 	.word	0x24000000
 802169c:	0801d347 	.word	0x0801d347
 80216a0:	2400005c 	.word	0x2400005c
 80216a4:	240066d0 	.word	0x240066d0
 80216a8:	0801d345 	.word	0x0801d345
 80216ac:	24000060 	.word	0x24000060

080216b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80216b0:	b538      	push	{r3, r4, r5, lr}
 80216b2:	4c15      	ldr	r4, [pc, #84]	@ (8021708 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80216b4:	4605      	mov	r5, r0
 80216b6:	7823      	ldrb	r3, [r4, #0]
 80216b8:	f3bf 8f5b 	dmb	ish
 80216bc:	07da      	lsls	r2, r3, #31
 80216be:	d40b      	bmi.n	80216d8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80216c0:	4620      	mov	r0, r4
 80216c2:	f7e1 fa45 	bl	8002b50 <__cxa_guard_acquire>
 80216c6:	b138      	cbz	r0, 80216d8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80216c8:	4620      	mov	r0, r4
 80216ca:	f7e1 faa9 	bl	8002c20 <__cxa_guard_release>
 80216ce:	4a0f      	ldr	r2, [pc, #60]	@ (802170c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80216d0:	490f      	ldr	r1, [pc, #60]	@ (8021710 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80216d2:	4810      	ldr	r0, [pc, #64]	@ (8021714 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80216d4:	f007 fccc 	bl	8029070 <__aeabi_atexit>
 80216d8:	4c0f      	ldr	r4, [pc, #60]	@ (8021718 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80216da:	7823      	ldrb	r3, [r4, #0]
 80216dc:	f3bf 8f5b 	dmb	ish
 80216e0:	07db      	lsls	r3, r3, #31
 80216e2:	d40b      	bmi.n	80216fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80216e4:	4620      	mov	r0, r4
 80216e6:	f7e1 fa33 	bl	8002b50 <__cxa_guard_acquire>
 80216ea:	b138      	cbz	r0, 80216fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80216ec:	4620      	mov	r0, r4
 80216ee:	f7e1 fa97 	bl	8002c20 <__cxa_guard_release>
 80216f2:	4a06      	ldr	r2, [pc, #24]	@ (802170c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80216f4:	4909      	ldr	r1, [pc, #36]	@ (802171c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80216f6:	480a      	ldr	r0, [pc, #40]	@ (8021720 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80216f8:	f007 fcba 	bl	8029070 <__aeabi_atexit>
 80216fc:	4b05      	ldr	r3, [pc, #20]	@ (8021714 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80216fe:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8021700:	4b07      	ldr	r3, [pc, #28]	@ (8021720 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021702:	642b      	str	r3, [r5, #64]	@ 0x40
 8021704:	bd38      	pop	{r3, r4, r5, pc}
 8021706:	bf00      	nop
 8021708:	240066ec 	.word	0x240066ec
 802170c:	24000000 	.word	0x24000000
 8021710:	0801d34b 	.word	0x0801d34b
 8021714:	2400007c 	.word	0x2400007c
 8021718:	240066f0 	.word	0x240066f0
 802171c:	0801d349 	.word	0x0801d349
 8021720:	24000080 	.word	0x24000080

08021724 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8021724:	b510      	push	{r4, lr}
 8021726:	4604      	mov	r4, r0
 8021728:	f7ff ff14 	bl	8021554 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 802172c:	4620      	mov	r0, r4
 802172e:	f7ff ff85 	bl	802163c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8021732:	4620      	mov	r0, r4
 8021734:	f7ff ff48 	bl	80215c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8021738:	4620      	mov	r0, r4
 802173a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802173e:	f7ff bfb7 	b.w	80216b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08021744 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021744:	b538      	push	{r3, r4, r5, lr}
 8021746:	4c15      	ldr	r4, [pc, #84]	@ (802179c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021748:	4605      	mov	r5, r0
 802174a:	7823      	ldrb	r3, [r4, #0]
 802174c:	f3bf 8f5b 	dmb	ish
 8021750:	07da      	lsls	r2, r3, #31
 8021752:	d40b      	bmi.n	802176c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021754:	4620      	mov	r0, r4
 8021756:	f7e1 f9fb 	bl	8002b50 <__cxa_guard_acquire>
 802175a:	b138      	cbz	r0, 802176c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802175c:	4620      	mov	r0, r4
 802175e:	f7e1 fa5f 	bl	8002c20 <__cxa_guard_release>
 8021762:	4a0f      	ldr	r2, [pc, #60]	@ (80217a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021764:	490f      	ldr	r1, [pc, #60]	@ (80217a4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021766:	4810      	ldr	r0, [pc, #64]	@ (80217a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021768:	f007 fc82 	bl	8029070 <__aeabi_atexit>
 802176c:	4c0f      	ldr	r4, [pc, #60]	@ (80217ac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802176e:	7823      	ldrb	r3, [r4, #0]
 8021770:	f3bf 8f5b 	dmb	ish
 8021774:	07db      	lsls	r3, r3, #31
 8021776:	d40b      	bmi.n	8021790 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021778:	4620      	mov	r0, r4
 802177a:	f7e1 f9e9 	bl	8002b50 <__cxa_guard_acquire>
 802177e:	b138      	cbz	r0, 8021790 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021780:	4620      	mov	r0, r4
 8021782:	f7e1 fa4d 	bl	8002c20 <__cxa_guard_release>
 8021786:	4a06      	ldr	r2, [pc, #24]	@ (80217a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021788:	4909      	ldr	r1, [pc, #36]	@ (80217b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802178a:	480a      	ldr	r0, [pc, #40]	@ (80217b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802178c:	f007 fc70 	bl	8029070 <__aeabi_atexit>
 8021790:	4b05      	ldr	r3, [pc, #20]	@ (80217a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021792:	666b      	str	r3, [r5, #100]	@ 0x64
 8021794:	4b07      	ldr	r3, [pc, #28]	@ (80217b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021796:	66ab      	str	r3, [r5, #104]	@ 0x68
 8021798:	bd38      	pop	{r3, r4, r5, pc}
 802179a:	bf00      	nop
 802179c:	240066d4 	.word	0x240066d4
 80217a0:	24000000 	.word	0x24000000
 80217a4:	0801d337 	.word	0x0801d337
 80217a8:	24000064 	.word	0x24000064
 80217ac:	240066d8 	.word	0x240066d8
 80217b0:	0801d335 	.word	0x0801d335
 80217b4:	24000068 	.word	0x24000068

080217b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80217b8:	b538      	push	{r3, r4, r5, lr}
 80217ba:	4c15      	ldr	r4, [pc, #84]	@ (8021810 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80217bc:	4605      	mov	r5, r0
 80217be:	7823      	ldrb	r3, [r4, #0]
 80217c0:	f3bf 8f5b 	dmb	ish
 80217c4:	07da      	lsls	r2, r3, #31
 80217c6:	d40b      	bmi.n	80217e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80217c8:	4620      	mov	r0, r4
 80217ca:	f7e1 f9c1 	bl	8002b50 <__cxa_guard_acquire>
 80217ce:	b138      	cbz	r0, 80217e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80217d0:	4620      	mov	r0, r4
 80217d2:	f7e1 fa25 	bl	8002c20 <__cxa_guard_release>
 80217d6:	4a0f      	ldr	r2, [pc, #60]	@ (8021814 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80217d8:	490f      	ldr	r1, [pc, #60]	@ (8021818 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80217da:	4810      	ldr	r0, [pc, #64]	@ (802181c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80217dc:	f007 fc48 	bl	8029070 <__aeabi_atexit>
 80217e0:	4c0f      	ldr	r4, [pc, #60]	@ (8021820 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80217e2:	7823      	ldrb	r3, [r4, #0]
 80217e4:	f3bf 8f5b 	dmb	ish
 80217e8:	07db      	lsls	r3, r3, #31
 80217ea:	d40b      	bmi.n	8021804 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80217ec:	4620      	mov	r0, r4
 80217ee:	f7e1 f9af 	bl	8002b50 <__cxa_guard_acquire>
 80217f2:	b138      	cbz	r0, 8021804 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80217f4:	4620      	mov	r0, r4
 80217f6:	f7e1 fa13 	bl	8002c20 <__cxa_guard_release>
 80217fa:	4a06      	ldr	r2, [pc, #24]	@ (8021814 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80217fc:	4909      	ldr	r1, [pc, #36]	@ (8021824 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80217fe:	480a      	ldr	r0, [pc, #40]	@ (8021828 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021800:	f007 fc36 	bl	8029070 <__aeabi_atexit>
 8021804:	4b05      	ldr	r3, [pc, #20]	@ (802181c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021806:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8021808:	4b07      	ldr	r3, [pc, #28]	@ (8021828 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802180a:	662b      	str	r3, [r5, #96]	@ 0x60
 802180c:	bd38      	pop	{r3, r4, r5, pc}
 802180e:	bf00      	nop
 8021810:	240066ac 	.word	0x240066ac
 8021814:	24000000 	.word	0x24000000
 8021818:	0801d33b 	.word	0x0801d33b
 802181c:	2400003c 	.word	0x2400003c
 8021820:	240066b0 	.word	0x240066b0
 8021824:	0801d339 	.word	0x0801d339
 8021828:	24000040 	.word	0x24000040

0802182c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 802182c:	b510      	push	{r4, lr}
 802182e:	4604      	mov	r4, r0
 8021830:	f7ff ff88 	bl	8021744 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021834:	4620      	mov	r0, r4
 8021836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802183a:	f7ff bfbd 	b.w	80217b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021840 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021840:	b538      	push	{r3, r4, r5, lr}
 8021842:	4c15      	ldr	r4, [pc, #84]	@ (8021898 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021844:	4605      	mov	r5, r0
 8021846:	7823      	ldrb	r3, [r4, #0]
 8021848:	f3bf 8f5b 	dmb	ish
 802184c:	07da      	lsls	r2, r3, #31
 802184e:	d40b      	bmi.n	8021868 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021850:	4620      	mov	r0, r4
 8021852:	f7e1 f97d 	bl	8002b50 <__cxa_guard_acquire>
 8021856:	b138      	cbz	r0, 8021868 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021858:	4620      	mov	r0, r4
 802185a:	f7e1 f9e1 	bl	8002c20 <__cxa_guard_release>
 802185e:	4a0f      	ldr	r2, [pc, #60]	@ (802189c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021860:	490f      	ldr	r1, [pc, #60]	@ (80218a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021862:	4810      	ldr	r0, [pc, #64]	@ (80218a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021864:	f007 fc04 	bl	8029070 <__aeabi_atexit>
 8021868:	4c0f      	ldr	r4, [pc, #60]	@ (80218a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802186a:	7823      	ldrb	r3, [r4, #0]
 802186c:	f3bf 8f5b 	dmb	ish
 8021870:	07db      	lsls	r3, r3, #31
 8021872:	d40b      	bmi.n	802188c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021874:	4620      	mov	r0, r4
 8021876:	f7e1 f96b 	bl	8002b50 <__cxa_guard_acquire>
 802187a:	b138      	cbz	r0, 802188c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802187c:	4620      	mov	r0, r4
 802187e:	f7e1 f9cf 	bl	8002c20 <__cxa_guard_release>
 8021882:	4a06      	ldr	r2, [pc, #24]	@ (802189c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021884:	4909      	ldr	r1, [pc, #36]	@ (80218ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021886:	480a      	ldr	r0, [pc, #40]	@ (80218b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021888:	f007 fbf2 	bl	8029070 <__aeabi_atexit>
 802188c:	4b05      	ldr	r3, [pc, #20]	@ (80218a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802188e:	676b      	str	r3, [r5, #116]	@ 0x74
 8021890:	4b07      	ldr	r3, [pc, #28]	@ (80218b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021892:	67ab      	str	r3, [r5, #120]	@ 0x78
 8021894:	bd38      	pop	{r3, r4, r5, pc}
 8021896:	bf00      	nop
 8021898:	240066a4 	.word	0x240066a4
 802189c:	24000000 	.word	0x24000000
 80218a0:	0801d32f 	.word	0x0801d32f
 80218a4:	24000034 	.word	0x24000034
 80218a8:	240066a8 	.word	0x240066a8
 80218ac:	0801d32d 	.word	0x0801d32d
 80218b0:	24000038 	.word	0x24000038

080218b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80218b4:	b538      	push	{r3, r4, r5, lr}
 80218b6:	4c15      	ldr	r4, [pc, #84]	@ (802190c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80218b8:	4605      	mov	r5, r0
 80218ba:	7823      	ldrb	r3, [r4, #0]
 80218bc:	f3bf 8f5b 	dmb	ish
 80218c0:	07da      	lsls	r2, r3, #31
 80218c2:	d40b      	bmi.n	80218dc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80218c4:	4620      	mov	r0, r4
 80218c6:	f7e1 f943 	bl	8002b50 <__cxa_guard_acquire>
 80218ca:	b138      	cbz	r0, 80218dc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80218cc:	4620      	mov	r0, r4
 80218ce:	f7e1 f9a7 	bl	8002c20 <__cxa_guard_release>
 80218d2:	4a0f      	ldr	r2, [pc, #60]	@ (8021910 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80218d4:	490f      	ldr	r1, [pc, #60]	@ (8021914 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80218d6:	4810      	ldr	r0, [pc, #64]	@ (8021918 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80218d8:	f007 fbca 	bl	8029070 <__aeabi_atexit>
 80218dc:	4c0f      	ldr	r4, [pc, #60]	@ (802191c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80218de:	7823      	ldrb	r3, [r4, #0]
 80218e0:	f3bf 8f5b 	dmb	ish
 80218e4:	07db      	lsls	r3, r3, #31
 80218e6:	d40b      	bmi.n	8021900 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80218e8:	4620      	mov	r0, r4
 80218ea:	f7e1 f931 	bl	8002b50 <__cxa_guard_acquire>
 80218ee:	b138      	cbz	r0, 8021900 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80218f0:	4620      	mov	r0, r4
 80218f2:	f7e1 f995 	bl	8002c20 <__cxa_guard_release>
 80218f6:	4a06      	ldr	r2, [pc, #24]	@ (8021910 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80218f8:	4909      	ldr	r1, [pc, #36]	@ (8021920 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80218fa:	480a      	ldr	r0, [pc, #40]	@ (8021924 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80218fc:	f007 fbb8 	bl	8029070 <__aeabi_atexit>
 8021900:	4b05      	ldr	r3, [pc, #20]	@ (8021918 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021902:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8021904:	4b07      	ldr	r3, [pc, #28]	@ (8021924 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021906:	672b      	str	r3, [r5, #112]	@ 0x70
 8021908:	bd38      	pop	{r3, r4, r5, pc}
 802190a:	bf00      	nop
 802190c:	2400669c 	.word	0x2400669c
 8021910:	24000000 	.word	0x24000000
 8021914:	0801d333 	.word	0x0801d333
 8021918:	2400002c 	.word	0x2400002c
 802191c:	240066a0 	.word	0x240066a0
 8021920:	0801d331 	.word	0x0801d331
 8021924:	24000030 	.word	0x24000030

08021928 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8021928:	b510      	push	{r4, lr}
 802192a:	4604      	mov	r4, r0
 802192c:	f7ff ff88 	bl	8021840 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8021930:	4620      	mov	r0, r4
 8021932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021936:	f7ff bfbd 	b.w	80218b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0802193a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 802193a:	b510      	push	{r4, lr}
 802193c:	4604      	mov	r4, r0
 802193e:	f7ff fff3 	bl	8021928 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8021942:	4620      	mov	r0, r4
 8021944:	f7ff ff72 	bl	802182c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8021948:	4620      	mov	r0, r4
 802194a:	f7ff fdf9 	bl	8021540 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 802194e:	4620      	mov	r0, r4
 8021950:	f7ff fcfa 	bl	8021348 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8021954:	4620      	mov	r0, r4
 8021956:	f7ff fd75 	bl	8021444 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802195a:	4620      	mov	r0, r4
 802195c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021960:	f7ff bee0 	b.w	8021724 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08021964 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8021964:	b538      	push	{r3, r4, r5, lr}
 8021966:	4c0b      	ldr	r4, [pc, #44]	@ (8021994 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8021968:	4605      	mov	r5, r0
 802196a:	7823      	ldrb	r3, [r4, #0]
 802196c:	f3bf 8f5b 	dmb	ish
 8021970:	07db      	lsls	r3, r3, #31
 8021972:	d40b      	bmi.n	802198c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8021974:	4620      	mov	r0, r4
 8021976:	f7e1 f8eb 	bl	8002b50 <__cxa_guard_acquire>
 802197a:	b138      	cbz	r0, 802198c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 802197c:	4620      	mov	r0, r4
 802197e:	f7e1 f94f 	bl	8002c20 <__cxa_guard_release>
 8021982:	4a05      	ldr	r2, [pc, #20]	@ (8021998 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8021984:	4905      	ldr	r1, [pc, #20]	@ (802199c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8021986:	4806      	ldr	r0, [pc, #24]	@ (80219a0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8021988:	f007 fb72 	bl	8029070 <__aeabi_atexit>
 802198c:	4b04      	ldr	r3, [pc, #16]	@ (80219a0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 802198e:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8021990:	bd38      	pop	{r3, r4, r5, pc}
 8021992:	bf00      	nop
 8021994:	24006690 	.word	0x24006690
 8021998:	24000000 	.word	0x24000000
 802199c:	0801d32b 	.word	0x0801d32b
 80219a0:	24000024 	.word	0x24000024

080219a4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 80219a4:	b538      	push	{r3, r4, r5, lr}
 80219a6:	4c0b      	ldr	r4, [pc, #44]	@ (80219d4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 80219a8:	4605      	mov	r5, r0
 80219aa:	7823      	ldrb	r3, [r4, #0]
 80219ac:	f3bf 8f5b 	dmb	ish
 80219b0:	07db      	lsls	r3, r3, #31
 80219b2:	d40b      	bmi.n	80219cc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 80219b4:	4620      	mov	r0, r4
 80219b6:	f7e1 f8cb 	bl	8002b50 <__cxa_guard_acquire>
 80219ba:	b138      	cbz	r0, 80219cc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 80219bc:	4620      	mov	r0, r4
 80219be:	f7e1 f92f 	bl	8002c20 <__cxa_guard_release>
 80219c2:	4a05      	ldr	r2, [pc, #20]	@ (80219d8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 80219c4:	4905      	ldr	r1, [pc, #20]	@ (80219dc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 80219c6:	4806      	ldr	r0, [pc, #24]	@ (80219e0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 80219c8:	f007 fb52 	bl	8029070 <__aeabi_atexit>
 80219cc:	4b04      	ldr	r3, [pc, #16]	@ (80219e0 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 80219ce:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 80219d2:	bd38      	pop	{r3, r4, r5, pc}
 80219d4:	24006694 	.word	0x24006694
 80219d8:	24000000 	.word	0x24000000
 80219dc:	0801d329 	.word	0x0801d329
 80219e0:	24000028 	.word	0x24000028

080219e4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 80219e4:	b570      	push	{r4, r5, r6, lr}
 80219e6:	4d0d      	ldr	r5, [pc, #52]	@ (8021a1c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 80219e8:	4606      	mov	r6, r0
 80219ea:	4c0d      	ldr	r4, [pc, #52]	@ (8021a20 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 80219ec:	782b      	ldrb	r3, [r5, #0]
 80219ee:	f3bf 8f5b 	dmb	ish
 80219f2:	f013 0f01 	tst.w	r3, #1
 80219f6:	d10d      	bne.n	8021a14 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 80219f8:	4628      	mov	r0, r5
 80219fa:	f7e1 f8a9 	bl	8002b50 <__cxa_guard_acquire>
 80219fe:	b148      	cbz	r0, 8021a14 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8021a00:	4b08      	ldr	r3, [pc, #32]	@ (8021a24 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8021a02:	4628      	mov	r0, r5
 8021a04:	6023      	str	r3, [r4, #0]
 8021a06:	f7e1 f90b 	bl	8002c20 <__cxa_guard_release>
 8021a0a:	4a07      	ldr	r2, [pc, #28]	@ (8021a28 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8021a0c:	4620      	mov	r0, r4
 8021a0e:	4907      	ldr	r1, [pc, #28]	@ (8021a2c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 8021a10:	f007 fb2e 	bl	8029070 <__aeabi_atexit>
 8021a14:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8021a18:	bd70      	pop	{r4, r5, r6, pc}
 8021a1a:	bf00      	nop
 8021a1c:	24006698 	.word	0x24006698
 8021a20:	24006810 	.word	0x24006810
 8021a24:	0802c75c 	.word	0x0802c75c
 8021a28:	24000000 	.word	0x24000000
 8021a2c:	0801d327 	.word	0x0801d327

08021a30 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8021a30:	b510      	push	{r4, lr}
 8021a32:	4604      	mov	r4, r0
 8021a34:	f7ff ff96 	bl	8021964 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8021a38:	4620      	mov	r0, r4
 8021a3a:	f7ff ffb3 	bl	80219a4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8021a3e:	4620      	mov	r0, r4
 8021a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a44:	f7ff bfce 	b.w	80219e4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08021a48 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8021a48:	b570      	push	{r4, r5, r6, lr}
 8021a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8021a80 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8021a4c:	4606      	mov	r6, r0
 8021a4e:	4c0d      	ldr	r4, [pc, #52]	@ (8021a84 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8021a50:	782b      	ldrb	r3, [r5, #0]
 8021a52:	f3bf 8f5b 	dmb	ish
 8021a56:	f013 0f01 	tst.w	r3, #1
 8021a5a:	d10d      	bne.n	8021a78 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 8021a5c:	4628      	mov	r0, r5
 8021a5e:	f7e1 f877 	bl	8002b50 <__cxa_guard_acquire>
 8021a62:	b148      	cbz	r0, 8021a78 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 8021a64:	4b08      	ldr	r3, [pc, #32]	@ (8021a88 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8021a66:	4628      	mov	r0, r5
 8021a68:	6023      	str	r3, [r4, #0]
 8021a6a:	f7e1 f8d9 	bl	8002c20 <__cxa_guard_release>
 8021a6e:	4a07      	ldr	r2, [pc, #28]	@ (8021a8c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8021a70:	4620      	mov	r0, r4
 8021a72:	4907      	ldr	r1, [pc, #28]	@ (8021a90 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x48>)
 8021a74:	f007 fafc 	bl	8029070 <__aeabi_atexit>
 8021a78:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8021a7c:	bd70      	pop	{r4, r5, r6, pc}
 8021a7e:	bf00      	nop
 8021a80:	2400668c 	.word	0x2400668c
 8021a84:	2400670c 	.word	0x2400670c
 8021a88:	0802c778 	.word	0x0802c778
 8021a8c:	24000000 	.word	0x24000000
 8021a90:	0801d325 	.word	0x0801d325

08021a94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8021a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a98:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8021a9c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8021aa0:	2d00      	cmp	r5, #0
 8021aa2:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8021aa6:	fb05 4c0e 	mla	ip, r5, lr, r4
 8021aaa:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8021aae:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8021ab2:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8021ab6:	eb02 0a0c 	add.w	sl, r2, ip
 8021aba:	8808      	ldrh	r0, [r1, #0]
 8021abc:	f2c0 80b0 	blt.w	8021c20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8021ac0:	45ab      	cmp	fp, r5
 8021ac2:	f340 80ad 	ble.w	8021c20 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8021ac6:	2c00      	cmp	r4, #0
 8021ac8:	f2c0 80a8 	blt.w	8021c1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8021acc:	45a6      	cmp	lr, r4
 8021ace:	f340 80a5 	ble.w	8021c1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8021ad2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8021ad6:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8021ada:	1c62      	adds	r2, r4, #1
 8021adc:	f100 80a3 	bmi.w	8021c26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8021ae0:	4596      	cmp	lr, r2
 8021ae2:	f340 80a0 	ble.w	8021c26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8021ae6:	f1b9 0f00 	cmp.w	r9, #0
 8021aea:	f000 809c 	beq.w	8021c26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8021aee:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021af2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8021af6:	3501      	adds	r5, #1
 8021af8:	f100 8099 	bmi.w	8021c2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8021afc:	45ab      	cmp	fp, r5
 8021afe:	f340 8096 	ble.w	8021c2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8021b02:	2f00      	cmp	r7, #0
 8021b04:	f000 8093 	beq.w	8021c2e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8021b08:	2c00      	cmp	r4, #0
 8021b0a:	f2c0 808e 	blt.w	8021c2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8021b0e:	45a6      	cmp	lr, r4
 8021b10:	f340 808b 	ble.w	8021c2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8021b14:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8021b18:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8021b1c:	3401      	adds	r4, #1
 8021b1e:	f100 8089 	bmi.w	8021c34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021b22:	45a6      	cmp	lr, r4
 8021b24:	f340 8086 	ble.w	8021c34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021b28:	f1b9 0f00 	cmp.w	r9, #0
 8021b2c:	f000 8082 	beq.w	8021c34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021b30:	44d6      	add	lr, sl
 8021b32:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021b36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021b3a:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8021b3e:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8021b42:	fb19 fe07 	smulbb	lr, r9, r7
 8021b46:	f1c7 0210 	rsb	r2, r7, #16
 8021b4a:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8021b4e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8021b52:	eba2 0209 	sub.w	r2, r2, r9
 8021b56:	ea44 0808 	orr.w	r8, r4, r8
 8021b5a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8021b5e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8021b62:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8021b66:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8021b6a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8021b6e:	ea44 0c0c 	orr.w	ip, r4, ip
 8021b72:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8021b76:	fb04 f40c 	mul.w	r4, r4, ip
 8021b7a:	fb02 4808 	mla	r8, r2, r8, r4
 8021b7e:	041a      	lsls	r2, r3, #16
 8021b80:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021b84:	b2b4      	uxth	r4, r6
 8021b86:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8021b8a:	43f6      	mvns	r6, r6
 8021b8c:	4313      	orrs	r3, r2
 8021b8e:	042a      	lsls	r2, r5, #16
 8021b90:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8021b94:	b2f6      	uxtb	r6, r6
 8021b96:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8021b9a:	fb0e 8303 	mla	r3, lr, r3, r8
 8021b9e:	432a      	orrs	r2, r5
 8021ba0:	fb07 3202 	mla	r2, r7, r2, r3
 8021ba4:	10c7      	asrs	r7, r0, #3
 8021ba6:	0d53      	lsrs	r3, r2, #21
 8021ba8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8021bac:	0952      	lsrs	r2, r2, #5
 8021bae:	fb17 f706 	smulbb	r7, r7, r6
 8021bb2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021bb6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021bba:	431a      	orrs	r2, r3
 8021bbc:	b293      	uxth	r3, r2
 8021bbe:	1202      	asrs	r2, r0, #8
 8021bc0:	121d      	asrs	r5, r3, #8
 8021bc2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8021bc6:	00c0      	lsls	r0, r0, #3
 8021bc8:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021bcc:	fb12 f206 	smulbb	r2, r2, r6
 8021bd0:	b2c0      	uxtb	r0, r0
 8021bd2:	fb05 2504 	mla	r5, r5, r4, r2
 8021bd6:	10da      	asrs	r2, r3, #3
 8021bd8:	fb10 f006 	smulbb	r0, r0, r6
 8021bdc:	00db      	lsls	r3, r3, #3
 8021bde:	b2ad      	uxth	r5, r5
 8021be0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8021be4:	b2db      	uxtb	r3, r3
 8021be6:	fb02 7204 	mla	r2, r2, r4, r7
 8021bea:	fb03 0004 	mla	r0, r3, r4, r0
 8021bee:	1c6b      	adds	r3, r5, #1
 8021bf0:	b292      	uxth	r2, r2
 8021bf2:	b280      	uxth	r0, r0
 8021bf4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021bf8:	1c43      	adds	r3, r0, #1
 8021bfa:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8021bfe:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021c02:	1c50      	adds	r0, r2, #1
 8021c04:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021c08:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021c0c:	0952      	lsrs	r2, r2, #5
 8021c0e:	432b      	orrs	r3, r5
 8021c10:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021c14:	4313      	orrs	r3, r2
 8021c16:	800b      	strh	r3, [r1, #0]
 8021c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c1c:	4680      	mov	r8, r0
 8021c1e:	e75c      	b.n	8021ada <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8021c20:	4684      	mov	ip, r0
 8021c22:	4680      	mov	r8, r0
 8021c24:	e767      	b.n	8021af6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8021c26:	4684      	mov	ip, r0
 8021c28:	e765      	b.n	8021af6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8021c2a:	4605      	mov	r5, r0
 8021c2c:	e776      	b.n	8021b1c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8021c2e:	4603      	mov	r3, r0
 8021c30:	4605      	mov	r5, r0
 8021c32:	e782      	b.n	8021b3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8021c34:	4603      	mov	r3, r0
 8021c36:	e780      	b.n	8021b3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08021c38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c3c:	b099      	sub	sp, #100	@ 0x64
 8021c3e:	9215      	str	r2, [sp, #84]	@ 0x54
 8021c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c42:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8021c44:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8021c48:	9016      	str	r0, [sp, #88]	@ 0x58
 8021c4a:	930d      	str	r3, [sp, #52]	@ 0x34
 8021c4c:	6850      	ldr	r0, [r2, #4]
 8021c4e:	910c      	str	r1, [sp, #48]	@ 0x30
 8021c50:	6812      	ldr	r2, [r2, #0]
 8021c52:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8021c56:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8021c5a:	fb00 1303 	mla	r3, r0, r3, r1
 8021c5e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8021c62:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021c64:	681b      	ldr	r3, [r3, #0]
 8021c66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c68:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021c6a:	685e      	ldr	r6, [r3, #4]
 8021c6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c6e:	3604      	adds	r6, #4
 8021c70:	43db      	mvns	r3, r3
 8021c72:	b2db      	uxtb	r3, r3
 8021c74:	930a      	str	r3, [sp, #40]	@ 0x28
 8021c76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	dc03      	bgt.n	8021c84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021c7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	f340 8225 	ble.w	80220ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8021c84:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021c86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c8a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c8e:	1e48      	subs	r0, r1, #1
 8021c90:	1e57      	subs	r7, r2, #1
 8021c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	f340 80e3 	ble.w	8021e60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8021c9a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8021c9e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021ca2:	d406      	bmi.n	8021cb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021ca4:	4584      	cmp	ip, r0
 8021ca6:	da04      	bge.n	8021cb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	db02      	blt.n	8021cb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021cac:	42bb      	cmp	r3, r7
 8021cae:	f2c0 80d8 	blt.w	8021e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021cb2:	f11c 0c01 	adds.w	ip, ip, #1
 8021cb6:	f100 80c9 	bmi.w	8021e4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021cba:	4561      	cmp	r1, ip
 8021cbc:	f2c0 80c6 	blt.w	8021e4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021cc0:	3301      	adds	r3, #1
 8021cc2:	f100 80c3 	bmi.w	8021e4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021cc6:	429a      	cmp	r2, r3
 8021cc8:	f2c0 80c0 	blt.w	8021e4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021ccc:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8021cd0:	4647      	mov	r7, r8
 8021cd2:	f1bb 0f00 	cmp.w	fp, #0
 8021cd6:	f340 80e3 	ble.w	8021ea0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8021cda:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8021cdc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021ce0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021ce2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8021ce6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021cea:	ea5f 422a 	movs.w	r2, sl, asr #16
 8021cee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021cf2:	689b      	ldr	r3, [r3, #8]
 8021cf4:	f100 8121 	bmi.w	8021f3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021cf8:	f103 39ff 	add.w	r9, r3, #4294967295
 8021cfc:	454a      	cmp	r2, r9
 8021cfe:	f280 811c 	bge.w	8021f3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021d02:	f1bc 0f00 	cmp.w	ip, #0
 8021d06:	f2c0 8118 	blt.w	8021f3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021d0a:	f10e 39ff 	add.w	r9, lr, #4294967295
 8021d0e:	45cc      	cmp	ip, r9
 8021d10:	f280 8113 	bge.w	8021f3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021d14:	b21b      	sxth	r3, r3
 8021d16:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021d18:	fb0c 2203 	mla	r2, ip, r3, r2
 8021d1c:	eb04 0902 	add.w	r9, r4, r2
 8021d20:	5ca2      	ldrb	r2, [r4, r2]
 8021d22:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8021d26:	2800      	cmp	r0, #0
 8021d28:	f000 80fe 	beq.w	8021f28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021d2c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021d30:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8021d34:	9211      	str	r2, [sp, #68]	@ 0x44
 8021d36:	b151      	cbz	r1, 8021d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021d38:	eb09 0203 	add.w	r2, r9, r3
 8021d3c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021d40:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021d44:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021d46:	7853      	ldrb	r3, [r2, #1]
 8021d48:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021d4c:	9312      	str	r3, [sp, #72]	@ 0x48
 8021d4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021d50:	fb10 f201 	smulbb	r2, r0, r1
 8021d54:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021d56:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021d5a:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021d5e:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8021d62:	10d2      	asrs	r2, r2, #3
 8021d64:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8021d68:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8021d6c:	ea4c 0c03 	orr.w	ip, ip, r3
 8021d70:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021d72:	041b      	lsls	r3, r3, #16
 8021d74:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8021d78:	4323      	orrs	r3, r4
 8021d7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021d7c:	4353      	muls	r3, r2
 8021d7e:	fb09 330c 	mla	r3, r9, ip, r3
 8021d82:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021d86:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8021d8a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8021d8e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021d92:	f1c1 0c10 	rsb	ip, r1, #16
 8021d96:	ebac 0c00 	sub.w	ip, ip, r0
 8021d9a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021d9e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021da2:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021da6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021da8:	0418      	lsls	r0, r3, #16
 8021daa:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021dae:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8021db2:	4318      	orrs	r0, r3
 8021db4:	fb02 c200 	mla	r2, r2, r0, ip
 8021db8:	8838      	ldrh	r0, [r7, #0]
 8021dba:	0d53      	lsrs	r3, r2, #21
 8021dbc:	0952      	lsrs	r2, r2, #5
 8021dbe:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021dc2:	1201      	asrs	r1, r0, #8
 8021dc4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021dc8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8021dcc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8021dd0:	00c0      	lsls	r0, r0, #3
 8021dd2:	431a      	orrs	r2, r3
 8021dd4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8021dd8:	fb11 f104 	smulbb	r1, r1, r4
 8021ddc:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8021de0:	b292      	uxth	r2, r2
 8021de2:	fb1e fe04 	smulbb	lr, lr, r4
 8021de6:	b2c0      	uxtb	r0, r0
 8021de8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8021dec:	fb10 f004 	smulbb	r0, r0, r4
 8021df0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8021df4:	fb0c 1c03 	mla	ip, ip, r3, r1
 8021df8:	10d1      	asrs	r1, r2, #3
 8021dfa:	00d2      	lsls	r2, r2, #3
 8021dfc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8021e00:	fa1f fc8c 	uxth.w	ip, ip
 8021e04:	b2d2      	uxtb	r2, r2
 8021e06:	fb01 e103 	mla	r1, r1, r3, lr
 8021e0a:	fb02 0303 	mla	r3, r2, r3, r0
 8021e0e:	b289      	uxth	r1, r1
 8021e10:	b29a      	uxth	r2, r3
 8021e12:	f10c 0301 	add.w	r3, ip, #1
 8021e16:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021e1a:	1c53      	adds	r3, r2, #1
 8021e1c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021e20:	1c4a      	adds	r2, r1, #1
 8021e22:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8021e26:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021e2a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021e2e:	0949      	lsrs	r1, r1, #5
 8021e30:	ea43 030c 	orr.w	r3, r3, ip
 8021e34:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021e38:	430b      	orrs	r3, r1
 8021e3a:	803b      	strh	r3, [r7, #0]
 8021e3c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021e3e:	3702      	adds	r7, #2
 8021e40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021e44:	449a      	add	sl, r3
 8021e46:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021e48:	441d      	add	r5, r3
 8021e4a:	e742      	b.n	8021cd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021e4c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021e4e:	f108 0802 	add.w	r8, r8, #2
 8021e52:	449a      	add	sl, r3
 8021e54:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021e56:	441d      	add	r5, r3
 8021e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e5a:	3b01      	subs	r3, #1
 8021e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021e5e:	e718      	b.n	8021c92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021e60:	d023      	beq.n	8021eaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8021e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e64:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8021e66:	3b01      	subs	r3, #1
 8021e68:	fb00 a003 	mla	r0, r0, r3, sl
 8021e6c:	1400      	asrs	r0, r0, #16
 8021e6e:	f53f af2d 	bmi.w	8021ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021e72:	3901      	subs	r1, #1
 8021e74:	4288      	cmp	r0, r1
 8021e76:	f6bf af29 	bge.w	8021ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021e7a:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8021e7c:	fb01 5303 	mla	r3, r1, r3, r5
 8021e80:	141b      	asrs	r3, r3, #16
 8021e82:	f53f af23 	bmi.w	8021ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021e86:	3a01      	subs	r2, #1
 8021e88:	4293      	cmp	r3, r2
 8021e8a:	f6bf af1f 	bge.w	8021ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021e8e:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8021e92:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8021e96:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8021e9a:	f1be 0f00 	cmp.w	lr, #0
 8021e9e:	dc6c      	bgt.n	8021f7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ea2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021ea6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8021eaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	f340 810e 	ble.w	80220ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8021eb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021eb6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021eb8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021ebc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021ec0:	eef0 6a62 	vmov.f32	s13, s5
 8021ec4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021ec8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ecc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ed0:	ee16 aa90 	vmov	sl, s13
 8021ed4:	eef0 6a43 	vmov.f32	s13, s6
 8021ed8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021edc:	ee16 5a90 	vmov	r5, s13
 8021ee0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ee4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021ee8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021eec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021ef0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021ef4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021ef8:	ee12 2a90 	vmov	r2, s5
 8021efc:	eef0 2a47 	vmov.f32	s5, s14
 8021f00:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f04:	ee13 2a10 	vmov	r2, s6
 8021f08:	9325      	str	r3, [sp, #148]	@ 0x94
 8021f0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021f0c:	eeb0 3a67 	vmov.f32	s6, s15
 8021f10:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f14:	9326      	str	r3, [sp, #152]	@ 0x98
 8021f16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021f18:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021f1a:	3b01      	subs	r3, #1
 8021f1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8021f1e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021f20:	bf08      	it	eq
 8021f22:	4613      	moveq	r3, r2
 8021f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8021f26:	e6a6      	b.n	8021c76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021f28:	2900      	cmp	r1, #0
 8021f2a:	f43f af10 	beq.w	8021d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021f2e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021f32:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021f36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021f38:	e709      	b.n	8021d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021f3a:	f112 0901 	adds.w	r9, r2, #1
 8021f3e:	f53f af7d 	bmi.w	8021e3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021f42:	454b      	cmp	r3, r9
 8021f44:	f6ff af7a 	blt.w	8021e3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021f48:	f11c 0901 	adds.w	r9, ip, #1
 8021f4c:	f53f af76 	bmi.w	8021e3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021f50:	45ce      	cmp	lr, r9
 8021f52:	f6ff af73 	blt.w	8021e3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021f56:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021f58:	b21b      	sxth	r3, r3
 8021f5a:	9202      	str	r2, [sp, #8]
 8021f5c:	fa0f f28e 	sxth.w	r2, lr
 8021f60:	9300      	str	r3, [sp, #0]
 8021f62:	4633      	mov	r3, r6
 8021f64:	9201      	str	r2, [sp, #4]
 8021f66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021f68:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021f6c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8021f70:	4639      	mov	r1, r7
 8021f72:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021f74:	f7ff fd8e 	bl	8021a94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8021f78:	e760      	b.n	8021e3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021f7a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021f7c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8021f80:	1429      	asrs	r1, r5, #16
 8021f82:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021f84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021f88:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8021f8c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021f90:	fb03 2101 	mla	r1, r3, r1, r2
 8021f94:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021f96:	440a      	add	r2, r1
 8021f98:	5c61      	ldrb	r1, [r4, r1]
 8021f9a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8021f9e:	f1bc 0f00 	cmp.w	ip, #0
 8021fa2:	f000 808c 	beq.w	80220be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8021fa6:	7857      	ldrb	r7, [r2, #1]
 8021fa8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8021fac:	9413      	str	r4, [sp, #76]	@ 0x4c
 8021fae:	b140      	cbz	r0, 8021fc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021fb0:	18d7      	adds	r7, r2, r3
 8021fb2:	5cd3      	ldrb	r3, [r2, r3]
 8021fb4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021fb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8021fba:	787b      	ldrb	r3, [r7, #1]
 8021fbc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021fc0:	9314      	str	r3, [sp, #80]	@ 0x50
 8021fc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021fc4:	fb1c f200 	smulbb	r2, ip, r0
 8021fc8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021fca:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021fce:	041f      	lsls	r7, r3, #16
 8021fd0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021fd4:	10d2      	asrs	r2, r2, #3
 8021fd6:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 8021fda:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 8021fde:	431f      	orrs	r7, r3
 8021fe0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8021fe4:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021fe6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021fe8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021fea:	041b      	lsls	r3, r3, #16
 8021fec:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8021ff0:	ea43 030b 	orr.w	r3, r3, fp
 8021ff4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021ff8:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8021ffc:	4353      	muls	r3, r2
 8021ffe:	fb04 3707 	mla	r7, r4, r7, r3
 8022002:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8022006:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022008:	ea43 0b01 	orr.w	fp, r3, r1
 802200c:	f1c0 0110 	rsb	r1, r0, #16
 8022010:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022012:	eba1 0c0c 	sub.w	ip, r1, ip
 8022016:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802201a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802201e:	fb0c 770b 	mla	r7, ip, fp, r7
 8022022:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022026:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 802202a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802202e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8022032:	fb02 770c 	mla	r7, r2, ip, r7
 8022036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022038:	0d79      	lsrs	r1, r7, #21
 802203a:	8812      	ldrh	r2, [r2, #0]
 802203c:	097f      	lsrs	r7, r7, #5
 802203e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022042:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8022046:	430f      	orrs	r7, r1
 8022048:	1211      	asrs	r1, r2, #8
 802204a:	b2bb      	uxth	r3, r7
 802204c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022050:	10d7      	asrs	r7, r2, #3
 8022052:	fb11 f104 	smulbb	r1, r1, r4
 8022056:	1218      	asrs	r0, r3, #8
 8022058:	00d2      	lsls	r2, r2, #3
 802205a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802205e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8022062:	fb17 f704 	smulbb	r7, r7, r4
 8022066:	b2d2      	uxtb	r2, r2
 8022068:	fb00 1009 	mla	r0, r0, r9, r1
 802206c:	10d9      	asrs	r1, r3, #3
 802206e:	fb12 f204 	smulbb	r2, r2, r4
 8022072:	00db      	lsls	r3, r3, #3
 8022074:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8022078:	b280      	uxth	r0, r0
 802207a:	b2db      	uxtb	r3, r3
 802207c:	fb01 7109 	mla	r1, r1, r9, r7
 8022080:	fb03 2309 	mla	r3, r3, r9, r2
 8022084:	1c42      	adds	r2, r0, #1
 8022086:	b289      	uxth	r1, r1
 8022088:	b29b      	uxth	r3, r3
 802208a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802208e:	1c4f      	adds	r7, r1, #1
 8022090:	1c5a      	adds	r2, r3, #1
 8022092:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8022096:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802209a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802209e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80220a0:	0949      	lsrs	r1, r1, #5
 80220a2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80220a6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80220aa:	4310      	orrs	r0, r2
 80220ac:	4308      	orrs	r0, r1
 80220ae:	f823 0b02 	strh.w	r0, [r3], #2
 80220b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80220b4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80220b6:	449a      	add	sl, r3
 80220b8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80220ba:	441d      	add	r5, r3
 80220bc:	e6ed      	b.n	8021e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80220be:	2800      	cmp	r0, #0
 80220c0:	f43f af7f 	beq.w	8021fc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80220c4:	5cd3      	ldrb	r3, [r2, r3]
 80220c6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80220ca:	9310      	str	r3, [sp, #64]	@ 0x40
 80220cc:	e779      	b.n	8021fc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80220ce:	b019      	add	sp, #100	@ 0x64
 80220d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080220d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80220d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220d8:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 80220dc:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80220e0:	f1b8 0f00 	cmp.w	r8, #0
 80220e4:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 80220e8:	fb08 470e 	mla	r7, r8, lr, r4
 80220ec:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 80220f0:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80220f4:	eb02 0907 	add.w	r9, r2, r7
 80220f8:	8808      	ldrh	r0, [r1, #0]
 80220fa:	db67      	blt.n	80221cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80220fc:	45c2      	cmp	sl, r8
 80220fe:	dd65      	ble.n	80221cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8022100:	2c00      	cmp	r4, #0
 8022102:	db61      	blt.n	80221c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8022104:	45a6      	cmp	lr, r4
 8022106:	dd5f      	ble.n	80221c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8022108:	5dd2      	ldrb	r2, [r2, r7]
 802210a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802210e:	1c62      	adds	r2, r4, #1
 8022110:	d45f      	bmi.n	80221d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022112:	4596      	cmp	lr, r2
 8022114:	dd5d      	ble.n	80221d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8022116:	2d00      	cmp	r5, #0
 8022118:	d05b      	beq.n	80221d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802211a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802211e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022122:	f118 0801 	adds.w	r8, r8, #1
 8022126:	d458      	bmi.n	80221da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022128:	45c2      	cmp	sl, r8
 802212a:	dd56      	ble.n	80221da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802212c:	2e00      	cmp	r6, #0
 802212e:	d054      	beq.n	80221da <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8022130:	2c00      	cmp	r4, #0
 8022132:	db50      	blt.n	80221d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8022134:	45a6      	cmp	lr, r4
 8022136:	dd4e      	ble.n	80221d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8022138:	f819 200e 	ldrb.w	r2, [r9, lr]
 802213c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8022140:	3401      	adds	r4, #1
 8022142:	d407      	bmi.n	8022154 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022144:	45a6      	cmp	lr, r4
 8022146:	dd05      	ble.n	8022154 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8022148:	b125      	cbz	r5, 8022154 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802214a:	44ce      	add	lr, r9
 802214c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022150:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8022154:	fb15 f406 	smulbb	r4, r5, r6
 8022158:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802215c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022160:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022164:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022168:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802216c:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8022170:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8022174:	ea43 0c0c 	orr.w	ip, r3, ip
 8022178:	f1c6 0310 	rsb	r3, r6, #16
 802217c:	ea4e 0707 	orr.w	r7, lr, r7
 8022180:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8022184:	1b5b      	subs	r3, r3, r5
 8022186:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802218a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802218e:	437d      	muls	r5, r7
 8022190:	fb03 5c0c 	mla	ip, r3, ip, r5
 8022194:	0403      	lsls	r3, r0, #16
 8022196:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802219a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802219e:	4318      	orrs	r0, r3
 80221a0:	0413      	lsls	r3, r2, #16
 80221a2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80221a6:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80221aa:	fb04 c000 	mla	r0, r4, r0, ip
 80221ae:	4313      	orrs	r3, r2
 80221b0:	fb06 0003 	mla	r0, r6, r3, r0
 80221b4:	0d43      	lsrs	r3, r0, #21
 80221b6:	0940      	lsrs	r0, r0, #5
 80221b8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80221bc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80221c0:	4318      	orrs	r0, r3
 80221c2:	8008      	strh	r0, [r1, #0]
 80221c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80221c8:	4684      	mov	ip, r0
 80221ca:	e7a0      	b.n	802210e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80221cc:	4607      	mov	r7, r0
 80221ce:	4684      	mov	ip, r0
 80221d0:	e7a7      	b.n	8022122 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80221d2:	4607      	mov	r7, r0
 80221d4:	e7a5      	b.n	8022122 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80221d6:	4602      	mov	r2, r0
 80221d8:	e7b2      	b.n	8022140 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 80221da:	4602      	mov	r2, r0
 80221dc:	e7ba      	b.n	8022154 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

080221de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80221de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221e2:	b093      	sub	sp, #76	@ 0x4c
 80221e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80221e8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80221ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80221ec:	9010      	str	r0, [sp, #64]	@ 0x40
 80221ee:	9108      	str	r1, [sp, #32]
 80221f0:	6850      	ldr	r0, [r2, #4]
 80221f2:	9306      	str	r3, [sp, #24]
 80221f4:	6812      	ldr	r2, [r2, #0]
 80221f6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80221fa:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 80221fe:	fb00 1303 	mla	r3, r0, r3, r1
 8022202:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022206:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	9307      	str	r3, [sp, #28]
 802220c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802220e:	685f      	ldr	r7, [r3, #4]
 8022210:	3704      	adds	r7, #4
 8022212:	9b08      	ldr	r3, [sp, #32]
 8022214:	2b00      	cmp	r3, #0
 8022216:	dc03      	bgt.n	8022220 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802221a:	2b00      	cmp	r3, #0
 802221c:	f340 81b2 	ble.w	8022584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8022220:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022222:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022226:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802222a:	1e48      	subs	r0, r1, #1
 802222c:	f102 3cff 	add.w	ip, r2, #4294967295
 8022230:	9b06      	ldr	r3, [sp, #24]
 8022232:	2b00      	cmp	r3, #0
 8022234:	f340 80a9 	ble.w	802238a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022238:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802223c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022240:	d406      	bmi.n	8022250 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022242:	4586      	cmp	lr, r0
 8022244:	da04      	bge.n	8022250 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022246:	2b00      	cmp	r3, #0
 8022248:	db02      	blt.n	8022250 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802224a:	4563      	cmp	r3, ip
 802224c:	f2c0 809e 	blt.w	802238c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8022250:	f11e 0e01 	adds.w	lr, lr, #1
 8022254:	f100 808f 	bmi.w	8022376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022258:	4571      	cmp	r1, lr
 802225a:	f2c0 808c 	blt.w	8022376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802225e:	3301      	adds	r3, #1
 8022260:	f100 8089 	bmi.w	8022376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022264:	429a      	cmp	r2, r3
 8022266:	f2c0 8086 	blt.w	8022376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802226a:	f8dd b018 	ldr.w	fp, [sp, #24]
 802226e:	46c8      	mov	r8, r9
 8022270:	f1bb 0f00 	cmp.w	fp, #0
 8022274:	f340 80a6 	ble.w	80223c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022278:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802227a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802227e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022280:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022284:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022288:	1422      	asrs	r2, r4, #16
 802228a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802228e:	689b      	ldr	r3, [r3, #8]
 8022290:	f100 80e3 	bmi.w	802245a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022294:	f103 3aff 	add.w	sl, r3, #4294967295
 8022298:	4552      	cmp	r2, sl
 802229a:	f280 80de 	bge.w	802245a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802229e:	f1bc 0f00 	cmp.w	ip, #0
 80222a2:	f2c0 80da 	blt.w	802245a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80222a6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80222aa:	45d4      	cmp	ip, sl
 80222ac:	f280 80d5 	bge.w	802245a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80222b0:	b21b      	sxth	r3, r3
 80222b2:	9d07      	ldr	r5, [sp, #28]
 80222b4:	fb0c 2203 	mla	r2, ip, r3, r2
 80222b8:	eb05 0a02 	add.w	sl, r5, r2
 80222bc:	5caa      	ldrb	r2, [r5, r2]
 80222be:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80222c2:	2800      	cmp	r0, #0
 80222c4:	f000 80c0 	beq.w	8022448 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80222c8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80222cc:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80222d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80222d2:	b151      	cbz	r1, 80222ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80222d4:	eb0a 0203 	add.w	r2, sl, r3
 80222d8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80222dc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80222e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80222e2:	7853      	ldrb	r3, [r2, #1]
 80222e4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80222e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80222ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80222ec:	fb10 f201 	smulbb	r2, r0, r1
 80222f0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80222f2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80222f6:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80222fa:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80222fe:	10d2      	asrs	r2, r2, #3
 8022300:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022304:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8022308:	ea4c 0c03 	orr.w	ip, ip, r3
 802230c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802230e:	041b      	lsls	r3, r3, #16
 8022310:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022314:	432b      	orrs	r3, r5
 8022316:	4353      	muls	r3, r2
 8022318:	fb0a 330c 	mla	r3, sl, ip, r3
 802231c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022320:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8022324:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8022328:	ea4c 0e0e 	orr.w	lr, ip, lr
 802232c:	f1c1 0c10 	rsb	ip, r1, #16
 8022330:	ebac 0c00 	sub.w	ip, ip, r0
 8022334:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022338:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802233c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022342:	0418      	lsls	r0, r3, #16
 8022344:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8022348:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802234c:	4318      	orrs	r0, r3
 802234e:	fb02 c200 	mla	r2, r2, r0, ip
 8022352:	0d53      	lsrs	r3, r2, #21
 8022354:	0952      	lsrs	r2, r2, #5
 8022356:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802235a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802235e:	431a      	orrs	r2, r3
 8022360:	f8a8 2000 	strh.w	r2, [r8]
 8022364:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022366:	f108 0802 	add.w	r8, r8, #2
 802236a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802236e:	441c      	add	r4, r3
 8022370:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022372:	441e      	add	r6, r3
 8022374:	e77c      	b.n	8022270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022376:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022378:	f109 0902 	add.w	r9, r9, #2
 802237c:	441c      	add	r4, r3
 802237e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022380:	441e      	add	r6, r3
 8022382:	9b06      	ldr	r3, [sp, #24]
 8022384:	3b01      	subs	r3, #1
 8022386:	9306      	str	r3, [sp, #24]
 8022388:	e752      	b.n	8022230 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802238a:	d020      	beq.n	80223ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802238c:	9b06      	ldr	r3, [sp, #24]
 802238e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022390:	3b01      	subs	r3, #1
 8022392:	fb00 4003 	mla	r0, r0, r3, r4
 8022396:	1400      	asrs	r0, r0, #16
 8022398:	f53f af67 	bmi.w	802226a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802239c:	3901      	subs	r1, #1
 802239e:	4288      	cmp	r0, r1
 80223a0:	f6bf af63 	bge.w	802226a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80223a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80223a6:	fb01 6303 	mla	r3, r1, r3, r6
 80223aa:	141b      	asrs	r3, r3, #16
 80223ac:	f53f af5d 	bmi.w	802226a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80223b0:	3a01      	subs	r2, #1
 80223b2:	4293      	cmp	r3, r2
 80223b4:	f6bf af59 	bge.w	802226a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80223b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80223bc:	46ca      	mov	sl, r9
 80223be:	f1b8 0f00 	cmp.w	r8, #0
 80223c2:	dc67      	bgt.n	8022494 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80223c4:	9b06      	ldr	r3, [sp, #24]
 80223c6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80223ca:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80223ce:	9b08      	ldr	r3, [sp, #32]
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	f340 80d7 	ble.w	8022584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80223d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80223da:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80223dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80223e0:	eeb0 6a62 	vmov.f32	s12, s5
 80223e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80223e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80223ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80223f0:	ee16 4a10 	vmov	r4, s12
 80223f4:	eeb0 6a43 	vmov.f32	s12, s6
 80223f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80223fc:	ee16 6a10 	vmov	r6, s12
 8022400:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022404:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022408:	ee77 2a62 	vsub.f32	s5, s14, s5
 802240c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022410:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022414:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022418:	ee12 2a90 	vmov	r2, s5
 802241c:	eef0 2a47 	vmov.f32	s5, s14
 8022420:	fb92 f3f3 	sdiv	r3, r2, r3
 8022424:	ee13 2a10 	vmov	r2, s6
 8022428:	931f      	str	r3, [sp, #124]	@ 0x7c
 802242a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802242c:	eeb0 3a67 	vmov.f32	s6, s15
 8022430:	fb92 f3f3 	sdiv	r3, r2, r3
 8022434:	9320      	str	r3, [sp, #128]	@ 0x80
 8022436:	9b08      	ldr	r3, [sp, #32]
 8022438:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802243a:	3b01      	subs	r3, #1
 802243c:	9308      	str	r3, [sp, #32]
 802243e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022440:	bf08      	it	eq
 8022442:	4613      	moveq	r3, r2
 8022444:	9306      	str	r3, [sp, #24]
 8022446:	e6e4      	b.n	8022212 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022448:	2900      	cmp	r1, #0
 802244a:	f43f af4e 	beq.w	80222ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802244e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022452:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022456:	9309      	str	r3, [sp, #36]	@ 0x24
 8022458:	e747      	b.n	80222ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802245a:	f112 0a01 	adds.w	sl, r2, #1
 802245e:	d481      	bmi.n	8022364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022460:	4553      	cmp	r3, sl
 8022462:	f6ff af7f 	blt.w	8022364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022466:	f11c 0a01 	adds.w	sl, ip, #1
 802246a:	f53f af7b 	bmi.w	8022364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802246e:	45d6      	cmp	lr, sl
 8022470:	f6ff af78 	blt.w	8022364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022474:	b21b      	sxth	r3, r3
 8022476:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802247a:	fa0f f28e 	sxth.w	r2, lr
 802247e:	9300      	str	r3, [sp, #0]
 8022480:	463b      	mov	r3, r7
 8022482:	9201      	str	r2, [sp, #4]
 8022484:	9a07      	ldr	r2, [sp, #28]
 8022486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802248a:	4641      	mov	r1, r8
 802248c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802248e:	f7ff fe21 	bl	80220d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022492:	e767      	b.n	8022364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022494:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022496:	1422      	asrs	r2, r4, #16
 8022498:	1431      	asrs	r1, r6, #16
 802249a:	9d07      	ldr	r5, [sp, #28]
 802249c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80224a0:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80224a4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80224a8:	fb03 2101 	mla	r1, r3, r1, r2
 80224ac:	9a07      	ldr	r2, [sp, #28]
 80224ae:	440a      	add	r2, r1
 80224b0:	5c69      	ldrb	r1, [r5, r1]
 80224b2:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80224b6:	f1be 0f00 	cmp.w	lr, #0
 80224ba:	d05c      	beq.n	8022576 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80224bc:	f892 c001 	ldrb.w	ip, [r2, #1]
 80224c0:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80224c4:	950d      	str	r5, [sp, #52]	@ 0x34
 80224c6:	b150      	cbz	r0, 80224de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80224c8:	eb02 0c03 	add.w	ip, r2, r3
 80224cc:	5cd3      	ldrb	r3, [r2, r3]
 80224ce:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80224d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80224d4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80224d8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80224dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80224de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80224e0:	fb1e f200 	smulbb	r2, lr, r0
 80224e4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80224e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80224ea:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80224ee:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80224f2:	10d2      	asrs	r2, r2, #3
 80224f4:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 80224f8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80224fc:	ea4c 0c03 	orr.w	ip, ip, r3
 8022500:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8022504:	9311      	str	r3, [sp, #68]	@ 0x44
 8022506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022508:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802250a:	041b      	lsls	r3, r3, #16
 802250c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022510:	ea43 030b 	orr.w	r3, r3, fp
 8022514:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022518:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802251c:	4353      	muls	r3, r2
 802251e:	fb05 3c0c 	mla	ip, r5, ip, r3
 8022522:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8022526:	ea43 0b01 	orr.w	fp, r3, r1
 802252a:	f1c0 0110 	rsb	r1, r0, #16
 802252e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022530:	eba1 0e0e 	sub.w	lr, r1, lr
 8022534:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022538:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802253c:	fb0e cc0b 	mla	ip, lr, fp, ip
 8022540:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8022544:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 8022548:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802254c:	ea4b 0e0e 	orr.w	lr, fp, lr
 8022550:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022554:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8022558:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802255c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022560:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022564:	ea43 0c0c 	orr.w	ip, r3, ip
 8022568:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802256a:	441c      	add	r4, r3
 802256c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802256e:	f82a cb02 	strh.w	ip, [sl], #2
 8022572:	441e      	add	r6, r3
 8022574:	e723      	b.n	80223be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8022576:	2800      	cmp	r0, #0
 8022578:	d0b1      	beq.n	80224de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802257a:	5cd3      	ldrb	r3, [r2, r3]
 802257c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022580:	930a      	str	r3, [sp, #40]	@ 0x28
 8022582:	e7ac      	b.n	80224de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022584:	b013      	add	sp, #76	@ 0x4c
 8022586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802258a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802258a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802258e:	880d      	ldrh	r5, [r1, #0]
 8022590:	b087      	sub	sp, #28
 8022592:	10ef      	asrs	r7, r5, #3
 8022594:	9103      	str	r1, [sp, #12]
 8022596:	ea4f 2a25 	mov.w	sl, r5, asr #8
 802259a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 802259e:	00ed      	lsls	r5, r5, #3
 80225a0:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80225a4:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 80225a8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80225ac:	b2ed      	uxtb	r5, r5
 80225ae:	9701      	str	r7, [sp, #4]
 80225b0:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 80225b4:	9502      	str	r5, [sp, #8]
 80225b6:	9d01      	ldr	r5, [sp, #4]
 80225b8:	9902      	ldr	r1, [sp, #8]
 80225ba:	022d      	lsls	r5, r5, #8
 80225bc:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 80225c0:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 80225c4:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80225c8:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 80225cc:	430d      	orrs	r5, r1
 80225ce:	fb06 0709 	mla	r7, r6, r9, r0
 80225d2:	2e00      	cmp	r6, #0
 80225d4:	9505      	str	r5, [sp, #20]
 80225d6:	eb02 0c07 	add.w	ip, r2, r7
 80225da:	f2c0 80b6 	blt.w	802274a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80225de:	45b3      	cmp	fp, r6
 80225e0:	f340 80b3 	ble.w	802274a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80225e4:	2800      	cmp	r0, #0
 80225e6:	f2c0 80ae 	blt.w	8022746 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80225ea:	4581      	cmp	r9, r0
 80225ec:	f340 80ab 	ble.w	8022746 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80225f0:	5dd7      	ldrb	r7, [r2, r7]
 80225f2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80225f6:	441f      	add	r7, r3
 80225f8:	1c42      	adds	r2, r0, #1
 80225fa:	f100 80a9 	bmi.w	8022750 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80225fe:	4591      	cmp	r9, r2
 8022600:	f340 80a6 	ble.w	8022750 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8022604:	2c00      	cmp	r4, #0
 8022606:	f000 80a3 	beq.w	8022750 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802260a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802260e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022612:	441d      	add	r5, r3
 8022614:	3601      	adds	r6, #1
 8022616:	f100 809f 	bmi.w	8022758 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802261a:	45b3      	cmp	fp, r6
 802261c:	f340 809c 	ble.w	8022758 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022620:	f1be 0f00 	cmp.w	lr, #0
 8022624:	f000 8098 	beq.w	8022758 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022628:	2800      	cmp	r0, #0
 802262a:	f2c0 8093 	blt.w	8022754 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802262e:	4581      	cmp	r9, r0
 8022630:	f340 8090 	ble.w	8022754 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8022634:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8022638:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802263c:	441e      	add	r6, r3
 802263e:	3001      	adds	r0, #1
 8022640:	f100 808d 	bmi.w	802275e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022644:	4581      	cmp	r9, r0
 8022646:	f340 808a 	ble.w	802275e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802264a:	2c00      	cmp	r4, #0
 802264c:	f000 8087 	beq.w	802275e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022650:	44e1      	add	r9, ip
 8022652:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022656:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802265a:	4413      	add	r3, r2
 802265c:	b2a4      	uxth	r4, r4
 802265e:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022662:	fa1f fe8e 	uxth.w	lr, lr
 8022666:	9901      	ldr	r1, [sp, #4]
 8022668:	fb04 fb0e 	mul.w	fp, r4, lr
 802266c:	0124      	lsls	r4, r4, #4
 802266e:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8022672:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 8022676:	eba4 040b 	sub.w	r4, r4, fp
 802267a:	fa1f f08e 	uxth.w	r0, lr
 802267e:	b2a2      	uxth	r2, r4
 8022680:	78ac      	ldrb	r4, [r5, #2]
 8022682:	eba9 0900 	sub.w	r9, r9, r0
 8022686:	fa1f fe88 	uxth.w	lr, r8
 802268a:	4354      	muls	r4, r2
 802268c:	ea6f 0808 	mvn.w	r8, r8
 8022690:	fa1f f989 	uxth.w	r9, r9
 8022694:	fa5f f888 	uxtb.w	r8, r8
 8022698:	fb09 440c 	mla	r4, r9, ip, r4
 802269c:	f896 c002 	ldrb.w	ip, [r6, #2]
 80226a0:	fb1a fa08 	smulbb	sl, sl, r8
 80226a4:	fb00 440c 	mla	r4, r0, ip, r4
 80226a8:	f893 c002 	ldrb.w	ip, [r3, #2]
 80226ac:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80226b0:	787c      	ldrb	r4, [r7, #1]
 80226b2:	783f      	ldrb	r7, [r7, #0]
 80226b4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80226b8:	fb0c ac0e 	mla	ip, ip, lr, sl
 80226bc:	f895 a001 	ldrb.w	sl, [r5, #1]
 80226c0:	782d      	ldrb	r5, [r5, #0]
 80226c2:	fb02 fa0a 	mul.w	sl, r2, sl
 80226c6:	fa1f fc8c 	uxth.w	ip, ip
 80226ca:	436a      	muls	r2, r5
 80226cc:	7835      	ldrb	r5, [r6, #0]
 80226ce:	fb09 aa04 	mla	sl, r9, r4, sl
 80226d2:	7874      	ldrb	r4, [r6, #1]
 80226d4:	fb09 2207 	mla	r2, r9, r7, r2
 80226d8:	fb00 aa04 	mla	sl, r0, r4, sl
 80226dc:	785c      	ldrb	r4, [r3, #1]
 80226de:	fb00 2005 	mla	r0, r0, r5, r2
 80226e2:	781b      	ldrb	r3, [r3, #0]
 80226e4:	fb0b a404 	mla	r4, fp, r4, sl
 80226e8:	fb11 fa08 	smulbb	sl, r1, r8
 80226ec:	fb0b 0b03 	mla	fp, fp, r3, r0
 80226f0:	9b02      	ldr	r3, [sp, #8]
 80226f2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80226f6:	fb13 f808 	smulbb	r8, r3, r8
 80226fa:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80226fe:	fb04 a40e 	mla	r4, r4, lr, sl
 8022702:	f10c 0301 	add.w	r3, ip, #1
 8022706:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802270a:	b2a4      	uxth	r4, r4
 802270c:	fa1f fe8e 	uxth.w	lr, lr
 8022710:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022714:	f104 0a01 	add.w	sl, r4, #1
 8022718:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 802271c:	f10e 0c01 	add.w	ip, lr, #1
 8022720:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022724:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022728:	0964      	lsrs	r4, r4, #5
 802272a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802272e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8022732:	ea4c 0c03 	orr.w	ip, ip, r3
 8022736:	9b03      	ldr	r3, [sp, #12]
 8022738:	ea4c 0c04 	orr.w	ip, ip, r4
 802273c:	f8a3 c000 	strh.w	ip, [r3]
 8022740:	b007      	add	sp, #28
 8022742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022746:	af05      	add	r7, sp, #20
 8022748:	e756      	b.n	80225f8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802274a:	ad05      	add	r5, sp, #20
 802274c:	462f      	mov	r7, r5
 802274e:	e761      	b.n	8022614 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022750:	ad05      	add	r5, sp, #20
 8022752:	e75f      	b.n	8022614 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022754:	ae05      	add	r6, sp, #20
 8022756:	e772      	b.n	802263e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8022758:	ab05      	add	r3, sp, #20
 802275a:	461e      	mov	r6, r3
 802275c:	e77e      	b.n	802265c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 802275e:	ab05      	add	r3, sp, #20
 8022760:	e77c      	b.n	802265c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08022762 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022766:	b095      	sub	sp, #84	@ 0x54
 8022768:	9212      	str	r2, [sp, #72]	@ 0x48
 802276a:	9309      	str	r3, [sp, #36]	@ 0x24
 802276c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802276e:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8022772:	9013      	str	r0, [sp, #76]	@ 0x4c
 8022774:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022776:	6850      	ldr	r0, [r2, #4]
 8022778:	910e      	str	r1, [sp, #56]	@ 0x38
 802277a:	6812      	ldr	r2, [r2, #0]
 802277c:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 8022780:	fb00 1303 	mla	r3, r0, r3, r1
 8022784:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022788:	930a      	str	r3, [sp, #40]	@ 0x28
 802278a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802278c:	681b      	ldr	r3, [r3, #0]
 802278e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022790:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022792:	685c      	ldr	r4, [r3, #4]
 8022794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022796:	3404      	adds	r4, #4
 8022798:	43db      	mvns	r3, r3
 802279a:	b2db      	uxtb	r3, r3
 802279c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802279e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80227a0:	2b00      	cmp	r3, #0
 80227a2:	dc03      	bgt.n	80227ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80227a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80227a6:	2b00      	cmp	r3, #0
 80227a8:	f340 8255 	ble.w	8022c56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80227ac:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80227ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80227b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80227b6:	1e48      	subs	r0, r1, #1
 80227b8:	1e55      	subs	r5, r2, #1
 80227ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80227bc:	2b00      	cmp	r3, #0
 80227be:	f340 80f9 	ble.w	80229b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80227c2:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80227c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80227c6:	1436      	asrs	r6, r6, #16
 80227c8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80227cc:	d406      	bmi.n	80227dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80227ce:	4286      	cmp	r6, r0
 80227d0:	da04      	bge.n	80227dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80227d2:	2b00      	cmp	r3, #0
 80227d4:	db02      	blt.n	80227dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80227d6:	42ab      	cmp	r3, r5
 80227d8:	f2c0 80ed 	blt.w	80229b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80227dc:	3601      	adds	r6, #1
 80227de:	f100 80da 	bmi.w	8022996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80227e2:	42b1      	cmp	r1, r6
 80227e4:	f2c0 80d7 	blt.w	8022996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80227e8:	3301      	adds	r3, #1
 80227ea:	f100 80d4 	bmi.w	8022996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80227ee:	429a      	cmp	r2, r3
 80227f0:	f2c0 80d1 	blt.w	8022996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80227f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80227f6:	9311      	str	r3, [sp, #68]	@ 0x44
 80227f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80227fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80227fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80227fe:	2b00      	cmp	r3, #0
 8022800:	f340 80fa 	ble.w	80229f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022804:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8022806:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022808:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802280a:	68c6      	ldr	r6, [r0, #12]
 802280c:	141d      	asrs	r5, r3, #16
 802280e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022810:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022814:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022816:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022818:	1400      	asrs	r0, r0, #16
 802281a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802281e:	6892      	ldr	r2, [r2, #8]
 8022820:	f100 813e 	bmi.w	8022aa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022824:	1e57      	subs	r7, r2, #1
 8022826:	42b8      	cmp	r0, r7
 8022828:	f280 813a 	bge.w	8022aa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802282c:	2d00      	cmp	r5, #0
 802282e:	f2c0 8137 	blt.w	8022aa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022832:	1e77      	subs	r7, r6, #1
 8022834:	42bd      	cmp	r5, r7
 8022836:	f280 8133 	bge.w	8022aa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802283a:	b212      	sxth	r2, r2
 802283c:	fb05 0002 	mla	r0, r5, r2, r0
 8022840:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022842:	f815 a000 	ldrb.w	sl, [r5, r0]
 8022846:	182e      	adds	r6, r5, r0
 8022848:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802284c:	eb04 050a 	add.w	r5, r4, sl
 8022850:	2b00      	cmp	r3, #0
 8022852:	f000 8117 	beq.w	8022a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022856:	f896 c001 	ldrb.w	ip, [r6, #1]
 802285a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802285e:	44a4      	add	ip, r4
 8022860:	2900      	cmp	r1, #0
 8022862:	f000 8117 	beq.w	8022a94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022866:	18b0      	adds	r0, r6, r2
 8022868:	5cb2      	ldrb	r2, [r6, r2]
 802286a:	7840      	ldrb	r0, [r0, #1]
 802286c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022870:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022874:	4422      	add	r2, r4
 8022876:	4420      	add	r0, r4
 8022878:	b29b      	uxth	r3, r3
 802287a:	f89c 7002 	ldrb.w	r7, [ip, #2]
 802287e:	b289      	uxth	r1, r1
 8022880:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022884:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022886:	fb03 f901 	mul.w	r9, r3, r1
 802288a:	011b      	lsls	r3, r3, #4
 802288c:	f8b6 e000 	ldrh.w	lr, [r6]
 8022890:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022894:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8022898:	eba3 0309 	sub.w	r3, r3, r9
 802289c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 80228a0:	b289      	uxth	r1, r1
 80228a2:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80228a6:	b29b      	uxth	r3, r3
 80228a8:	eba8 0801 	sub.w	r8, r8, r1
 80228ac:	435f      	muls	r7, r3
 80228ae:	fa1f f888 	uxth.w	r8, r8
 80228b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80228b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80228b6:	fb08 770b 	mla	r7, r8, fp, r7
 80228ba:	f892 b002 	ldrb.w	fp, [r2, #2]
 80228be:	fb01 770b 	mla	r7, r1, fp, r7
 80228c2:	f890 b002 	ldrb.w	fp, [r0, #2]
 80228c6:	fb09 770b 	mla	r7, r9, fp, r7
 80228ca:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80228ce:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 80228d2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80228d6:	fb1b fb03 	smulbb	fp, fp, r3
 80228da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80228dc:	fb07 b706 	mla	r7, r7, r6, fp
 80228e0:	f895 b001 	ldrb.w	fp, [r5, #1]
 80228e4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80228e8:	f89c c000 	ldrb.w	ip, [ip]
 80228ec:	b2bf      	uxth	r7, r7
 80228ee:	435d      	muls	r5, r3
 80228f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80228f2:	fb08 550b 	mla	r5, r8, fp, r5
 80228f6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80228fa:	fb01 550b 	mla	r5, r1, fp, r5
 80228fe:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022902:	fb09 550b 	mla	r5, r9, fp, r5
 8022906:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802290a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802290e:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8022912:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022916:	fa5f fe8e 	uxtb.w	lr, lr
 802291a:	fb1b fb03 	smulbb	fp, fp, r3
 802291e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022920:	fb03 f30c 	mul.w	r3, r3, ip
 8022924:	f892 c000 	ldrb.w	ip, [r2]
 8022928:	fb05 b506 	mla	r5, r5, r6, fp
 802292c:	fb08 330a 	mla	r3, r8, sl, r3
 8022930:	b2ad      	uxth	r5, r5
 8022932:	fb01 330c 	mla	r3, r1, ip, r3
 8022936:	f890 c000 	ldrb.w	ip, [r0]
 802293a:	f105 0b01 	add.w	fp, r5, #1
 802293e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022942:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022944:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022948:	fb1e fe03 	smulbb	lr, lr, r3
 802294c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022950:	1c7b      	adds	r3, r7, #1
 8022952:	096d      	lsrs	r5, r5, #5
 8022954:	fb0c e606 	mla	r6, ip, r6, lr
 8022958:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802295c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022960:	b2b6      	uxth	r6, r6
 8022962:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8022966:	1c77      	adds	r7, r6, #1
 8022968:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802296c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022970:	431f      	orrs	r7, r3
 8022972:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022974:	433d      	orrs	r5, r7
 8022976:	801d      	strh	r5, [r3, #0]
 8022978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802297a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802297c:	3302      	adds	r3, #2
 802297e:	930c      	str	r3, [sp, #48]	@ 0x30
 8022980:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022982:	4413      	add	r3, r2
 8022984:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022986:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022988:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802298a:	4413      	add	r3, r2
 802298c:	9320      	str	r3, [sp, #128]	@ 0x80
 802298e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022990:	3b01      	subs	r3, #1
 8022992:	9311      	str	r3, [sp, #68]	@ 0x44
 8022994:	e732      	b.n	80227fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022996:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022998:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 802299a:	4433      	add	r3, r6
 802299c:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802299e:	931f      	str	r3, [sp, #124]	@ 0x7c
 80229a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80229a2:	4433      	add	r3, r6
 80229a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80229a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80229a8:	3b01      	subs	r3, #1
 80229aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80229ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80229ae:	3302      	adds	r3, #2
 80229b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80229b2:	e702      	b.n	80227ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80229b4:	d027      	beq.n	8022a06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80229b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80229b8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80229ba:	3b01      	subs	r3, #1
 80229bc:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 80229be:	fb00 5003 	mla	r0, r0, r3, r5
 80229c2:	1400      	asrs	r0, r0, #16
 80229c4:	f53f af16 	bmi.w	80227f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80229c8:	3901      	subs	r1, #1
 80229ca:	4288      	cmp	r0, r1
 80229cc:	f6bf af12 	bge.w	80227f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80229d0:	9922      	ldr	r1, [sp, #136]	@ 0x88
 80229d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80229d4:	fb01 0303 	mla	r3, r1, r3, r0
 80229d8:	141b      	asrs	r3, r3, #16
 80229da:	f53f af0b 	bmi.w	80227f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80229de:	3a01      	subs	r2, #1
 80229e0:	4293      	cmp	r3, r2
 80229e2:	f6bf af07 	bge.w	80227f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80229e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80229e8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 80229ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80229ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80229f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80229f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	dc70      	bgt.n	8022ada <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80229f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80229fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80229fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022a00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022a04:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a08:	2b00      	cmp	r3, #0
 8022a0a:	f340 8124 	ble.w	8022c56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8022a0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022a12:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022a14:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a1c:	eef0 6a62 	vmov.f32	s13, s5
 8022a20:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022a24:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a2c:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8022a30:	eef0 6a43 	vmov.f32	s13, s6
 8022a34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a38:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8022a3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a40:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a44:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a54:	ee12 2a90 	vmov	r2, s5
 8022a58:	eef0 2a47 	vmov.f32	s5, s14
 8022a5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a60:	ee13 2a10 	vmov	r2, s6
 8022a64:	9321      	str	r3, [sp, #132]	@ 0x84
 8022a66:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022a68:	eeb0 3a67 	vmov.f32	s6, s15
 8022a6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a70:	9322      	str	r3, [sp, #136]	@ 0x88
 8022a72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022a76:	3b01      	subs	r3, #1
 8022a78:	930e      	str	r3, [sp, #56]	@ 0x38
 8022a7a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022a7c:	bf08      	it	eq
 8022a7e:	4613      	moveq	r3, r2
 8022a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8022a82:	e68c      	b.n	802279e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022a84:	b149      	cbz	r1, 8022a9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8022a86:	5cb2      	ldrb	r2, [r6, r2]
 8022a88:	4628      	mov	r0, r5
 8022a8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022a8e:	4422      	add	r2, r4
 8022a90:	46ac      	mov	ip, r5
 8022a92:	e6f1      	b.n	8022878 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022a94:	4628      	mov	r0, r5
 8022a96:	462a      	mov	r2, r5
 8022a98:	e6ee      	b.n	8022878 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022a9a:	4628      	mov	r0, r5
 8022a9c:	462a      	mov	r2, r5
 8022a9e:	e7f7      	b.n	8022a90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8022aa0:	1c47      	adds	r7, r0, #1
 8022aa2:	f53f af69 	bmi.w	8022978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022aa6:	42ba      	cmp	r2, r7
 8022aa8:	f6ff af66 	blt.w	8022978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022aac:	1c6f      	adds	r7, r5, #1
 8022aae:	f53f af63 	bmi.w	8022978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022ab2:	42be      	cmp	r6, r7
 8022ab4:	f6ff af60 	blt.w	8022978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022ab8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8022aba:	b236      	sxth	r6, r6
 8022abc:	b212      	sxth	r2, r2
 8022abe:	9002      	str	r0, [sp, #8]
 8022ac0:	9601      	str	r6, [sp, #4]
 8022ac2:	9200      	str	r2, [sp, #0]
 8022ac4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022ac6:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8022aca:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8022ace:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8022ad2:	4623      	mov	r3, r4
 8022ad4:	f7ff fd59 	bl	802258a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8022ad8:	e74e      	b.n	8022978 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022ada:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022adc:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8022ade:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022ae2:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8022ae4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022ae6:	1400      	asrs	r0, r0, #16
 8022ae8:	142d      	asrs	r5, r5, #16
 8022aea:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022aec:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022af0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022af4:	fb02 5000 	mla	r0, r2, r0, r5
 8022af8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022afa:	f815 9000 	ldrb.w	r9, [r5, r0]
 8022afe:	182e      	adds	r6, r5, r0
 8022b00:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8022b04:	eb04 0509 	add.w	r5, r4, r9
 8022b08:	2b00      	cmp	r3, #0
 8022b0a:	f000 8096 	beq.w	8022c3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8022b0e:	7877      	ldrb	r7, [r6, #1]
 8022b10:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022b14:	4427      	add	r7, r4
 8022b16:	2900      	cmp	r1, #0
 8022b18:	f000 8097 	beq.w	8022c4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8022b1c:	18b0      	adds	r0, r6, r2
 8022b1e:	5cb2      	ldrb	r2, [r6, r2]
 8022b20:	7840      	ldrb	r0, [r0, #1]
 8022b22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022b26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022b2a:	4422      	add	r2, r4
 8022b2c:	4420      	add	r0, r4
 8022b2e:	b29b      	uxth	r3, r3
 8022b30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022b32:	b289      	uxth	r1, r1
 8022b34:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022b38:	f8b6 c000 	ldrh.w	ip, [r6]
 8022b3c:	fb03 f801 	mul.w	r8, r3, r1
 8022b40:	011b      	lsls	r3, r3, #4
 8022b42:	78be      	ldrb	r6, [r7, #2]
 8022b44:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8022b48:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022b4c:	eba3 0308 	sub.w	r3, r3, r8
 8022b50:	f814 9009 	ldrb.w	r9, [r4, r9]
 8022b54:	b289      	uxth	r1, r1
 8022b56:	b29b      	uxth	r3, r3
 8022b58:	ebae 0e01 	sub.w	lr, lr, r1
 8022b5c:	435e      	muls	r6, r3
 8022b5e:	fa1f fe8e 	uxth.w	lr, lr
 8022b62:	9310      	str	r3, [sp, #64]	@ 0x40
 8022b64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b66:	fb0e 660b 	mla	r6, lr, fp, r6
 8022b6a:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022b6e:	fb01 660b 	mla	r6, r1, fp, r6
 8022b72:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022b76:	fb08 660b 	mla	r6, r8, fp, r6
 8022b7a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8022b7e:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8022b82:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022b86:	fb1b fb03 	smulbb	fp, fp, r3
 8022b8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022b8c:	fb06 b60a 	mla	r6, r6, sl, fp
 8022b90:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022b94:	787d      	ldrb	r5, [r7, #1]
 8022b96:	783f      	ldrb	r7, [r7, #0]
 8022b98:	b2b6      	uxth	r6, r6
 8022b9a:	435d      	muls	r5, r3
 8022b9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b9e:	fb0e 550b 	mla	r5, lr, fp, r5
 8022ba2:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022ba6:	fb01 550b 	mla	r5, r1, fp, r5
 8022baa:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022bae:	fb08 550b 	mla	r5, r8, fp, r5
 8022bb2:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8022bb6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022bba:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8022bbe:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022bc2:	fa5f fc8c 	uxtb.w	ip, ip
 8022bc6:	fb1b fb03 	smulbb	fp, fp, r3
 8022bca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022bcc:	437b      	muls	r3, r7
 8022bce:	7817      	ldrb	r7, [r2, #0]
 8022bd0:	fb05 b50a 	mla	r5, r5, sl, fp
 8022bd4:	fb0e 3309 	mla	r3, lr, r9, r3
 8022bd8:	b2ad      	uxth	r5, r5
 8022bda:	fb01 3307 	mla	r3, r1, r7, r3
 8022bde:	7807      	ldrb	r7, [r0, #0]
 8022be0:	f105 0b01 	add.w	fp, r5, #1
 8022be4:	fb08 3707 	mla	r7, r8, r7, r3
 8022be8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022bea:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022bee:	fb1c fc03 	smulbb	ip, ip, r3
 8022bf2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022bf6:	1c73      	adds	r3, r6, #1
 8022bf8:	096d      	lsrs	r5, r5, #5
 8022bfa:	fb07 c70a 	mla	r7, r7, sl, ip
 8022bfe:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022c02:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022c06:	b2bf      	uxth	r7, r7
 8022c08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022c0a:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8022c0e:	1c7a      	adds	r2, r7, #1
 8022c10:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8022c14:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022c18:	4316      	orrs	r6, r2
 8022c1a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022c1c:	432e      	orrs	r6, r5
 8022c1e:	f823 6b02 	strh.w	r6, [r3], #2
 8022c22:	930c      	str	r3, [sp, #48]	@ 0x30
 8022c24:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022c26:	4413      	add	r3, r2
 8022c28:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022c2a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022c2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c2e:	4413      	add	r3, r2
 8022c30:	9320      	str	r3, [sp, #128]	@ 0x80
 8022c32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022c34:	3b01      	subs	r3, #1
 8022c36:	9311      	str	r3, [sp, #68]	@ 0x44
 8022c38:	e6db      	b.n	80229f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8022c3a:	b149      	cbz	r1, 8022c50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8022c3c:	5cb2      	ldrb	r2, [r6, r2]
 8022c3e:	4628      	mov	r0, r5
 8022c40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c44:	4422      	add	r2, r4
 8022c46:	462f      	mov	r7, r5
 8022c48:	e771      	b.n	8022b2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022c4a:	4628      	mov	r0, r5
 8022c4c:	462a      	mov	r2, r5
 8022c4e:	e76e      	b.n	8022b2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022c50:	4628      	mov	r0, r5
 8022c52:	462a      	mov	r2, r5
 8022c54:	e7f7      	b.n	8022c46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8022c56:	b015      	add	sp, #84	@ 0x54
 8022c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c5c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8022c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c60:	880f      	ldrh	r7, [r1, #0]
 8022c62:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8022c66:	023c      	lsls	r4, r7, #8
 8022c68:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8022c6c:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8022c70:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8022c74:	017c      	lsls	r4, r7, #5
 8022c76:	00ff      	lsls	r7, r7, #3
 8022c78:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8022c7c:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8022c80:	b2ff      	uxtb	r7, r7
 8022c82:	ea4b 0404 	orr.w	r4, fp, r4
 8022c86:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8022c8a:	4327      	orrs	r7, r4
 8022c8c:	fb05 ca0e 	mla	sl, r5, lr, ip
 8022c90:	2d00      	cmp	r5, #0
 8022c92:	9701      	str	r7, [sp, #4]
 8022c94:	eb02 080a 	add.w	r8, r2, sl
 8022c98:	db7e      	blt.n	8022d98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8022c9a:	45a9      	cmp	r9, r5
 8022c9c:	dd7c      	ble.n	8022d98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8022c9e:	f1bc 0f00 	cmp.w	ip, #0
 8022ca2:	db77      	blt.n	8022d94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022ca4:	45e6      	cmp	lr, ip
 8022ca6:	dd75      	ble.n	8022d94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022ca8:	f812 700a 	ldrb.w	r7, [r2, sl]
 8022cac:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022cb0:	441f      	add	r7, r3
 8022cb2:	f11c 0201 	adds.w	r2, ip, #1
 8022cb6:	d472      	bmi.n	8022d9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022cb8:	4596      	cmp	lr, r2
 8022cba:	dd70      	ble.n	8022d9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022cbc:	2800      	cmp	r0, #0
 8022cbe:	d06e      	beq.n	8022d9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022cc0:	f898 4001 	ldrb.w	r4, [r8, #1]
 8022cc4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022cc8:	441c      	add	r4, r3
 8022cca:	3501      	adds	r5, #1
 8022ccc:	d46b      	bmi.n	8022da6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022cce:	45a9      	cmp	r9, r5
 8022cd0:	dd69      	ble.n	8022da6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022cd2:	2e00      	cmp	r6, #0
 8022cd4:	d067      	beq.n	8022da6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022cd6:	f1bc 0f00 	cmp.w	ip, #0
 8022cda:	db62      	blt.n	8022da2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8022cdc:	45e6      	cmp	lr, ip
 8022cde:	dd60      	ble.n	8022da2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8022ce0:	f818 500e 	ldrb.w	r5, [r8, lr]
 8022ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022ce8:	441d      	add	r5, r3
 8022cea:	f11c 0201 	adds.w	r2, ip, #1
 8022cee:	d45d      	bmi.n	8022dac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022cf0:	4596      	cmp	lr, r2
 8022cf2:	dd5b      	ble.n	8022dac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022cf4:	2800      	cmp	r0, #0
 8022cf6:	d059      	beq.n	8022dac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022cf8:	44c6      	add	lr, r8
 8022cfa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022cfe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022d02:	4413      	add	r3, r2
 8022d04:	b280      	uxth	r0, r0
 8022d06:	f897 e002 	ldrb.w	lr, [r7, #2]
 8022d0a:	b2b2      	uxth	r2, r6
 8022d0c:	f897 9000 	ldrb.w	r9, [r7]
 8022d10:	787f      	ldrb	r7, [r7, #1]
 8022d12:	fb00 f602 	mul.w	r6, r0, r2
 8022d16:	0100      	lsls	r0, r0, #4
 8022d18:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8022d1c:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8022d20:	1b80      	subs	r0, r0, r6
 8022d22:	fa1f fc82 	uxth.w	ip, r2
 8022d26:	b282      	uxth	r2, r0
 8022d28:	78a0      	ldrb	r0, [r4, #2]
 8022d2a:	eba8 080c 	sub.w	r8, r8, ip
 8022d2e:	4350      	muls	r0, r2
 8022d30:	fa1f f888 	uxth.w	r8, r8
 8022d34:	fb08 0e0e 	mla	lr, r8, lr, r0
 8022d38:	78a8      	ldrb	r0, [r5, #2]
 8022d3a:	fb0c e000 	mla	r0, ip, r0, lr
 8022d3e:	f893 e002 	ldrb.w	lr, [r3, #2]
 8022d42:	fb06 0e0e 	mla	lr, r6, lr, r0
 8022d46:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 8022d4a:	f894 e000 	ldrb.w	lr, [r4]
 8022d4e:	fb02 fe0e 	mul.w	lr, r2, lr
 8022d52:	fb08 e909 	mla	r9, r8, r9, lr
 8022d56:	f895 e000 	ldrb.w	lr, [r5]
 8022d5a:	fb0c 990e 	mla	r9, ip, lr, r9
 8022d5e:	f893 e000 	ldrb.w	lr, [r3]
 8022d62:	785b      	ldrb	r3, [r3, #1]
 8022d64:	fb06 9e0e 	mla	lr, r6, lr, r9
 8022d68:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022d6c:	ea4e 0e00 	orr.w	lr, lr, r0
 8022d70:	7860      	ldrb	r0, [r4, #1]
 8022d72:	4350      	muls	r0, r2
 8022d74:	786a      	ldrb	r2, [r5, #1]
 8022d76:	fb08 0007 	mla	r0, r8, r7, r0
 8022d7a:	fb0c 0202 	mla	r2, ip, r2, r0
 8022d7e:	fb06 2303 	mla	r3, r6, r3, r2
 8022d82:	095b      	lsrs	r3, r3, #5
 8022d84:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022d88:	ea4e 0303 	orr.w	r3, lr, r3
 8022d8c:	800b      	strh	r3, [r1, #0]
 8022d8e:	b003      	add	sp, #12
 8022d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d94:	af01      	add	r7, sp, #4
 8022d96:	e78c      	b.n	8022cb2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8022d98:	ac01      	add	r4, sp, #4
 8022d9a:	4627      	mov	r7, r4
 8022d9c:	e795      	b.n	8022cca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022d9e:	ac01      	add	r4, sp, #4
 8022da0:	e793      	b.n	8022cca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022da2:	ad01      	add	r5, sp, #4
 8022da4:	e7a1      	b.n	8022cea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8022da6:	ab01      	add	r3, sp, #4
 8022da8:	461d      	mov	r5, r3
 8022daa:	e7ab      	b.n	8022d04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8022dac:	ab01      	add	r3, sp, #4
 8022dae:	e7a9      	b.n	8022d04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08022db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022db4:	b08f      	sub	sp, #60	@ 0x3c
 8022db6:	920c      	str	r2, [sp, #48]	@ 0x30
 8022db8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8022dba:	900d      	str	r0, [sp, #52]	@ 0x34
 8022dbc:	910a      	str	r1, [sp, #40]	@ 0x28
 8022dbe:	6850      	ldr	r0, [r2, #4]
 8022dc0:	9306      	str	r3, [sp, #24]
 8022dc2:	6812      	ldr	r2, [r2, #0]
 8022dc4:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8022dc8:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 8022dcc:	fb00 1303 	mla	r3, r0, r3, r1
 8022dd0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022dd4:	9307      	str	r3, [sp, #28]
 8022dd6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022dd8:	681b      	ldr	r3, [r3, #0]
 8022dda:	9308      	str	r3, [sp, #32]
 8022ddc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022dde:	685c      	ldr	r4, [r3, #4]
 8022de0:	3404      	adds	r4, #4
 8022de2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022de4:	2b00      	cmp	r3, #0
 8022de6:	dc03      	bgt.n	8022df0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8022de8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022dea:	2b00      	cmp	r3, #0
 8022dec:	f340 81d5 	ble.w	802319a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022df0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022df2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022df6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022dfa:	1e48      	subs	r0, r1, #1
 8022dfc:	1e56      	subs	r6, r2, #1
 8022dfe:	9b06      	ldr	r3, [sp, #24]
 8022e00:	2b00      	cmp	r3, #0
 8022e02:	f340 80b6 	ble.w	8022f72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022e06:	ea5f 472b 	movs.w	r7, fp, asr #16
 8022e0a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022e0e:	d406      	bmi.n	8022e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022e10:	4287      	cmp	r7, r0
 8022e12:	da04      	bge.n	8022e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022e14:	2b00      	cmp	r3, #0
 8022e16:	db02      	blt.n	8022e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022e18:	42b3      	cmp	r3, r6
 8022e1a:	f2c0 80ab 	blt.w	8022f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8022e1e:	3701      	adds	r7, #1
 8022e20:	f100 809c 	bmi.w	8022f5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022e24:	42b9      	cmp	r1, r7
 8022e26:	f2c0 8099 	blt.w	8022f5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022e2a:	3301      	adds	r3, #1
 8022e2c:	f100 8096 	bmi.w	8022f5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022e30:	429a      	cmp	r2, r3
 8022e32:	f2c0 8093 	blt.w	8022f5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022e36:	9b06      	ldr	r3, [sp, #24]
 8022e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e3a:	9b07      	ldr	r3, [sp, #28]
 8022e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8022e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	f340 80b4 	ble.w	8022fae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8022e46:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8022e48:	142e      	asrs	r6, r5, #16
 8022e4a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022e4c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022e50:	68c7      	ldr	r7, [r0, #12]
 8022e52:	ea5f 402b 	movs.w	r0, fp, asr #16
 8022e56:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022e5a:	6892      	ldr	r2, [r2, #8]
 8022e5c:	f100 80fb 	bmi.w	8023056 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022e60:	f102 3cff 	add.w	ip, r2, #4294967295
 8022e64:	4560      	cmp	r0, ip
 8022e66:	f280 80f6 	bge.w	8023056 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022e6a:	2e00      	cmp	r6, #0
 8022e6c:	f2c0 80f3 	blt.w	8023056 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022e70:	f107 3cff 	add.w	ip, r7, #4294967295
 8022e74:	4566      	cmp	r6, ip
 8022e76:	f280 80ee 	bge.w	8023056 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022e7a:	b212      	sxth	r2, r2
 8022e7c:	fb06 0002 	mla	r0, r6, r2, r0
 8022e80:	9e08      	ldr	r6, [sp, #32]
 8022e82:	1837      	adds	r7, r6, r0
 8022e84:	5c30      	ldrb	r0, [r6, r0]
 8022e86:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8022e8a:	eb04 0c08 	add.w	ip, r4, r8
 8022e8e:	2b00      	cmp	r3, #0
 8022e90:	f000 80d3 	beq.w	802303a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022e94:	787e      	ldrb	r6, [r7, #1]
 8022e96:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022e9a:	4426      	add	r6, r4
 8022e9c:	2900      	cmp	r1, #0
 8022e9e:	f000 80d4 	beq.w	802304a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022ea2:	18b8      	adds	r0, r7, r2
 8022ea4:	5cba      	ldrb	r2, [r7, r2]
 8022ea6:	7840      	ldrb	r0, [r0, #1]
 8022ea8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022eac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022eb0:	4422      	add	r2, r4
 8022eb2:	4420      	add	r0, r4
 8022eb4:	b29b      	uxth	r3, r3
 8022eb6:	78b7      	ldrb	r7, [r6, #2]
 8022eb8:	b289      	uxth	r1, r1
 8022eba:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022ebe:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022ec2:	fb03 f901 	mul.w	r9, r3, r1
 8022ec6:	011b      	lsls	r3, r3, #4
 8022ec8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022ecc:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022ed0:	eba3 0309 	sub.w	r3, r3, r9
 8022ed4:	b289      	uxth	r1, r1
 8022ed6:	b29b      	uxth	r3, r3
 8022ed8:	ebae 0e01 	sub.w	lr, lr, r1
 8022edc:	435f      	muls	r7, r3
 8022ede:	fa1f fe8e 	uxth.w	lr, lr
 8022ee2:	fb0e 770a 	mla	r7, lr, sl, r7
 8022ee6:	f892 a002 	ldrb.w	sl, [r2, #2]
 8022eea:	fb01 770a 	mla	r7, r1, sl, r7
 8022eee:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022ef2:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022ef6:	f814 7008 	ldrb.w	r7, [r4, r8]
 8022efa:	f896 8000 	ldrb.w	r8, [r6]
 8022efe:	7876      	ldrb	r6, [r6, #1]
 8022f00:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8022f04:	fb03 f808 	mul.w	r8, r3, r8
 8022f08:	4373      	muls	r3, r6
 8022f0a:	fb0e 8807 	mla	r8, lr, r7, r8
 8022f0e:	7817      	ldrb	r7, [r2, #0]
 8022f10:	fb0e 330c 	mla	r3, lr, ip, r3
 8022f14:	fb01 8807 	mla	r8, r1, r7, r8
 8022f18:	7807      	ldrb	r7, [r0, #0]
 8022f1a:	fb09 8707 	mla	r7, r9, r7, r8
 8022f1e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022f22:	ea47 070a 	orr.w	r7, r7, sl
 8022f26:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022f2a:	fb01 310a 	mla	r1, r1, sl, r3
 8022f2e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f34:	fb09 1a0a 	mla	sl, r9, sl, r1
 8022f38:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022f3c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8022f40:	ea47 070a 	orr.w	r7, r7, sl
 8022f44:	801f      	strh	r7, [r3, #0]
 8022f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f48:	3302      	adds	r3, #2
 8022f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f4c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022f4e:	449b      	add	fp, r3
 8022f50:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022f52:	441d      	add	r5, r3
 8022f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022f56:	3b01      	subs	r3, #1
 8022f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022f5a:	e770      	b.n	8022e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022f5c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022f5e:	449b      	add	fp, r3
 8022f60:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022f62:	441d      	add	r5, r3
 8022f64:	9b06      	ldr	r3, [sp, #24]
 8022f66:	3b01      	subs	r3, #1
 8022f68:	9306      	str	r3, [sp, #24]
 8022f6a:	9b07      	ldr	r3, [sp, #28]
 8022f6c:	3302      	adds	r3, #2
 8022f6e:	9307      	str	r3, [sp, #28]
 8022f70:	e745      	b.n	8022dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8022f72:	d023      	beq.n	8022fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022f74:	9b06      	ldr	r3, [sp, #24]
 8022f76:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8022f78:	3b01      	subs	r3, #1
 8022f7a:	fb00 b003 	mla	r0, r0, r3, fp
 8022f7e:	1400      	asrs	r0, r0, #16
 8022f80:	f53f af59 	bmi.w	8022e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022f84:	3901      	subs	r1, #1
 8022f86:	4288      	cmp	r0, r1
 8022f88:	f6bf af55 	bge.w	8022e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022f8c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8022f8e:	fb01 5303 	mla	r3, r1, r3, r5
 8022f92:	141b      	asrs	r3, r3, #16
 8022f94:	f53f af4f 	bmi.w	8022e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022f98:	3a01      	subs	r2, #1
 8022f9a:	4293      	cmp	r3, r2
 8022f9c:	f6bf af4b 	bge.w	8022e36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022fa0:	9b06      	ldr	r3, [sp, #24]
 8022fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8022fa4:	9b07      	ldr	r3, [sp, #28]
 8022fa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022faa:	2b00      	cmp	r3, #0
 8022fac:	dc70      	bgt.n	8023090 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022fae:	9b06      	ldr	r3, [sp, #24]
 8022fb0:	9a07      	ldr	r2, [sp, #28]
 8022fb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022fb6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022fba:	9307      	str	r3, [sp, #28]
 8022fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022fbe:	2b00      	cmp	r3, #0
 8022fc0:	f340 80eb 	ble.w	802319a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022fc8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022fca:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022fce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022fd2:	eef0 6a62 	vmov.f32	s13, s5
 8022fd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022fda:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022fde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fe2:	ee16 ba90 	vmov	fp, s13
 8022fe6:	eef0 6a43 	vmov.f32	s13, s6
 8022fea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fee:	ee16 5a90 	vmov	r5, s13
 8022ff2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022ff6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022ffa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022ffe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023002:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023006:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802300a:	ee12 2a90 	vmov	r2, s5
 802300e:	eef0 2a47 	vmov.f32	s5, s14
 8023012:	fb92 f3f3 	sdiv	r3, r2, r3
 8023016:	ee13 2a10 	vmov	r2, s6
 802301a:	931b      	str	r3, [sp, #108]	@ 0x6c
 802301c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802301e:	eeb0 3a67 	vmov.f32	s6, s15
 8023022:	fb92 f3f3 	sdiv	r3, r2, r3
 8023026:	931c      	str	r3, [sp, #112]	@ 0x70
 8023028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802302a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802302c:	3b01      	subs	r3, #1
 802302e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023030:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023032:	bf08      	it	eq
 8023034:	4613      	moveq	r3, r2
 8023036:	9306      	str	r3, [sp, #24]
 8023038:	e6d3      	b.n	8022de2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802303a:	b149      	cbz	r1, 8023050 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802303c:	5cba      	ldrb	r2, [r7, r2]
 802303e:	4660      	mov	r0, ip
 8023040:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023044:	4422      	add	r2, r4
 8023046:	4666      	mov	r6, ip
 8023048:	e734      	b.n	8022eb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 802304a:	4660      	mov	r0, ip
 802304c:	4662      	mov	r2, ip
 802304e:	e731      	b.n	8022eb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8023050:	4660      	mov	r0, ip
 8023052:	4662      	mov	r2, ip
 8023054:	e7f7      	b.n	8023046 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8023056:	f110 0c01 	adds.w	ip, r0, #1
 802305a:	f53f af74 	bmi.w	8022f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802305e:	4562      	cmp	r2, ip
 8023060:	f6ff af71 	blt.w	8022f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023064:	f116 0c01 	adds.w	ip, r6, #1
 8023068:	f53f af6d 	bmi.w	8022f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802306c:	4567      	cmp	r7, ip
 802306e:	f6ff af6a 	blt.w	8022f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023072:	b23f      	sxth	r7, r7
 8023074:	b212      	sxth	r2, r2
 8023076:	9701      	str	r7, [sp, #4]
 8023078:	9200      	str	r2, [sp, #0]
 802307a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802307e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8023082:	4623      	mov	r3, r4
 8023084:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023086:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802308a:	f7ff fde7 	bl	8022c5c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802308e:	e75a      	b.n	8022f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023090:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023092:	ea4f 462b 	mov.w	r6, fp, asr #16
 8023096:	1428      	asrs	r0, r5, #16
 8023098:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802309c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80230a0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80230a4:	fb02 6000 	mla	r0, r2, r0, r6
 80230a8:	9e08      	ldr	r6, [sp, #32]
 80230aa:	f816 8000 	ldrb.w	r8, [r6, r0]
 80230ae:	1837      	adds	r7, r6, r0
 80230b0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80230b4:	eb04 0c08 	add.w	ip, r4, r8
 80230b8:	2b00      	cmp	r3, #0
 80230ba:	d060      	beq.n	802317e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80230bc:	787e      	ldrb	r6, [r7, #1]
 80230be:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80230c2:	4426      	add	r6, r4
 80230c4:	2900      	cmp	r1, #0
 80230c6:	d062      	beq.n	802318e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80230c8:	18b8      	adds	r0, r7, r2
 80230ca:	5cba      	ldrb	r2, [r7, r2]
 80230cc:	7840      	ldrb	r0, [r0, #1]
 80230ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80230d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80230d6:	4422      	add	r2, r4
 80230d8:	4420      	add	r0, r4
 80230da:	b29b      	uxth	r3, r3
 80230dc:	78b7      	ldrb	r7, [r6, #2]
 80230de:	b289      	uxth	r1, r1
 80230e0:	f89c a002 	ldrb.w	sl, [ip, #2]
 80230e4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80230e8:	fb03 f901 	mul.w	r9, r3, r1
 80230ec:	011b      	lsls	r3, r3, #4
 80230ee:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80230f2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80230f6:	eba3 0309 	sub.w	r3, r3, r9
 80230fa:	b289      	uxth	r1, r1
 80230fc:	b29b      	uxth	r3, r3
 80230fe:	ebae 0e01 	sub.w	lr, lr, r1
 8023102:	435f      	muls	r7, r3
 8023104:	fa1f fe8e 	uxth.w	lr, lr
 8023108:	fb0e 770a 	mla	r7, lr, sl, r7
 802310c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023110:	fb01 770a 	mla	r7, r1, sl, r7
 8023114:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023118:	fb09 7a0a 	mla	sl, r9, sl, r7
 802311c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023120:	f896 8000 	ldrb.w	r8, [r6]
 8023124:	7876      	ldrb	r6, [r6, #1]
 8023126:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 802312a:	fb03 f808 	mul.w	r8, r3, r8
 802312e:	4373      	muls	r3, r6
 8023130:	7856      	ldrb	r6, [r2, #1]
 8023132:	fb0e 8807 	mla	r8, lr, r7, r8
 8023136:	7817      	ldrb	r7, [r2, #0]
 8023138:	fb0e 330c 	mla	r3, lr, ip, r3
 802313c:	fb01 8807 	mla	r8, r1, r7, r8
 8023140:	7807      	ldrb	r7, [r0, #0]
 8023142:	fb01 3306 	mla	r3, r1, r6, r3
 8023146:	fb09 8707 	mla	r7, r9, r7, r8
 802314a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802314e:	ea47 070a 	orr.w	r7, r7, sl
 8023152:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023156:	fb09 3a0a 	mla	sl, r9, sl, r3
 802315a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802315c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023160:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8023164:	ea47 070a 	orr.w	r7, r7, sl
 8023168:	f823 7b02 	strh.w	r7, [r3], #2
 802316c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802316e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023170:	449b      	add	fp, r3
 8023172:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023174:	441d      	add	r5, r3
 8023176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023178:	3b01      	subs	r3, #1
 802317a:	9309      	str	r3, [sp, #36]	@ 0x24
 802317c:	e714      	b.n	8022fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802317e:	b149      	cbz	r1, 8023194 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8023180:	5cba      	ldrb	r2, [r7, r2]
 8023182:	4660      	mov	r0, ip
 8023184:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023188:	4422      	add	r2, r4
 802318a:	4666      	mov	r6, ip
 802318c:	e7a5      	b.n	80230da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802318e:	4660      	mov	r0, ip
 8023190:	4662      	mov	r2, ip
 8023192:	e7a2      	b.n	80230da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8023194:	4660      	mov	r0, ip
 8023196:	4662      	mov	r2, ip
 8023198:	e7f7      	b.n	802318a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 802319a:	b00f      	add	sp, #60	@ 0x3c
 802319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080231a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80231a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231a4:	b085      	sub	sp, #20
 80231a6:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 80231aa:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 80231ae:	9102      	str	r1, [sp, #8]
 80231b0:	2c00      	cmp	r4, #0
 80231b2:	fb04 710c 	mla	r1, r4, ip, r7
 80231b6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 80231ba:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80231be:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80231c2:	eb02 0e01 	add.w	lr, r2, r1
 80231c6:	f2c0 8122 	blt.w	802340e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80231ca:	45a0      	cmp	r8, r4
 80231cc:	f340 811f 	ble.w	802340e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80231d0:	2f00      	cmp	r7, #0
 80231d2:	f2c0 811a 	blt.w	802340a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80231d6:	45bc      	cmp	ip, r7
 80231d8:	f340 8117 	ble.w	802340a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80231dc:	5c52      	ldrb	r2, [r2, r1]
 80231de:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80231e2:	1c7a      	adds	r2, r7, #1
 80231e4:	f100 8116 	bmi.w	8023414 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80231e8:	4594      	cmp	ip, r2
 80231ea:	f340 8113 	ble.w	8023414 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80231ee:	2e00      	cmp	r6, #0
 80231f0:	f000 8112 	beq.w	8023418 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80231f4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80231f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80231fc:	3401      	adds	r4, #1
 80231fe:	f100 810f 	bmi.w	8023420 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8023202:	45a0      	cmp	r8, r4
 8023204:	f340 810c 	ble.w	8023420 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8023208:	2800      	cmp	r0, #0
 802320a:	f000 810c 	beq.w	8023426 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 802320e:	2f00      	cmp	r7, #0
 8023210:	f2c0 8104 	blt.w	802341c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8023214:	45bc      	cmp	ip, r7
 8023216:	f340 8101 	ble.w	802341c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802321a:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802321e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8023222:	3701      	adds	r7, #1
 8023224:	f100 8102 	bmi.w	802342c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8023228:	45bc      	cmp	ip, r7
 802322a:	f340 80ff 	ble.w	802342c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802322e:	2e00      	cmp	r6, #0
 8023230:	f000 80fe 	beq.w	8023430 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8023234:	44f4      	add	ip, lr
 8023236:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802323a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802323e:	b2b6      	uxth	r6, r6
 8023240:	b280      	uxth	r0, r0
 8023242:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8023246:	fb00 fe06 	mul.w	lr, r0, r6
 802324a:	0136      	lsls	r6, r6, #4
 802324c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023250:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023254:	eba6 070e 	sub.w	r7, r6, lr
 8023258:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 802325c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023260:	b280      	uxth	r0, r0
 8023262:	b2bf      	uxth	r7, r7
 8023264:	1a1b      	subs	r3, r3, r0
 8023266:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802326a:	fb0a f607 	mul.w	r6, sl, r7
 802326e:	b29b      	uxth	r3, r3
 8023270:	fb0b 6603 	mla	r6, fp, r3, r6
 8023274:	fb00 6609 	mla	r6, r0, r9, r6
 8023278:	fb0e 6608 	mla	r6, lr, r8, r6
 802327c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023280:	9600      	str	r6, [sp, #0]
 8023282:	2e00      	cmp	r6, #0
 8023284:	f000 80be 	beq.w	8023404 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8023288:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802328c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8023290:	9e02      	ldr	r6, [sp, #8]
 8023292:	fb0b fc0c 	mul.w	ip, fp, ip
 8023296:	fb0b f505 	mul.w	r5, fp, r5
 802329a:	8836      	ldrh	r6, [r6, #0]
 802329c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80232a0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80232a4:	9501      	str	r5, [sp, #4]
 80232a6:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80232aa:	44dc      	add	ip, fp
 80232ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232b0:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80232b4:	9503      	str	r5, [sp, #12]
 80232b6:	9d01      	ldr	r5, [sp, #4]
 80232b8:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80232bc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80232c0:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80232c4:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80232c8:	fb0a fc0c 	mul.w	ip, sl, ip
 80232cc:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80232d0:	fb0a fa01 	mul.w	sl, sl, r1
 80232d4:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80232d8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80232dc:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80232e0:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80232e4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80232e8:	4465      	add	r5, ip
 80232ea:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80232ee:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80232f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80232f6:	fb09 fc0c 	mul.w	ip, r9, ip
 80232fa:	0a2d      	lsrs	r5, r5, #8
 80232fc:	fb09 f904 	mul.w	r9, r9, r4
 8023300:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023304:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8023308:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802330c:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8023310:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023314:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8023318:	437d      	muls	r5, r7
 802331a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802331e:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8023322:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023326:	4461      	add	r1, ip
 8023328:	fb08 f404 	mul.w	r4, r8, r4
 802332c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023330:	fb08 f802 	mul.w	r8, r8, r2
 8023334:	0a09      	lsrs	r1, r1, #8
 8023336:	0a22      	lsrs	r2, r4, #8
 8023338:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802333c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8023340:	fb07 f70a 	mul.w	r7, r7, sl
 8023344:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023348:	4414      	add	r4, r2
 802334a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802334e:	0a24      	lsrs	r4, r4, #8
 8023350:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023354:	9a03      	ldr	r2, [sp, #12]
 8023356:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802335a:	fb02 5503 	mla	r5, r2, r3, r5
 802335e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023362:	9a00      	ldr	r2, [sp, #0]
 8023364:	fb04 540e 	mla	r4, r4, lr, r5
 8023368:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802336c:	1235      	asrs	r5, r6, #8
 802336e:	fb01 4100 	mla	r1, r1, r0, r4
 8023372:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023376:	0a09      	lsrs	r1, r1, #8
 8023378:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802337c:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8023380:	fb03 7101 	mla	r1, r3, r1, r7
 8023384:	fb0e 1e08 	mla	lr, lr, r8, r1
 8023388:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802338c:	fb00 e101 	mla	r1, r0, r1, lr
 8023390:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8023394:	b287      	uxth	r7, r0
 8023396:	0a09      	lsrs	r1, r1, #8
 8023398:	437a      	muls	r2, r7
 802339a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802339e:	1c53      	adds	r3, r2, #1
 80233a0:	4321      	orrs	r1, r4
 80233a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80233a6:	0c0a      	lsrs	r2, r1, #16
 80233a8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80233ac:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80233b0:	b2c8      	uxtb	r0, r1
 80233b2:	fb12 f207 	smulbb	r2, r2, r7
 80233b6:	fb14 f407 	smulbb	r4, r4, r7
 80233ba:	b2db      	uxtb	r3, r3
 80233bc:	fb10 f007 	smulbb	r0, r0, r7
 80233c0:	fb05 2503 	mla	r5, r5, r3, r2
 80233c4:	10f2      	asrs	r2, r6, #3
 80233c6:	00f6      	lsls	r6, r6, #3
 80233c8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80233cc:	b2ad      	uxth	r5, r5
 80233ce:	b2f6      	uxtb	r6, r6
 80233d0:	fb02 4203 	mla	r2, r2, r3, r4
 80233d4:	fb06 0303 	mla	r3, r6, r3, r0
 80233d8:	b294      	uxth	r4, r2
 80233da:	b299      	uxth	r1, r3
 80233dc:	1c6b      	adds	r3, r5, #1
 80233de:	1c62      	adds	r2, r4, #1
 80233e0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80233e4:	1c4b      	adds	r3, r1, #1
 80233e6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80233ea:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80233ee:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80233f2:	0952      	lsrs	r2, r2, #5
 80233f4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80233f8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80233fc:	432b      	orrs	r3, r5
 80233fe:	4313      	orrs	r3, r2
 8023400:	9a02      	ldr	r2, [sp, #8]
 8023402:	8013      	strh	r3, [r2, #0]
 8023404:	b005      	add	sp, #20
 8023406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802340a:	2500      	movs	r5, #0
 802340c:	e6e9      	b.n	80231e2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 802340e:	2100      	movs	r1, #0
 8023410:	460d      	mov	r5, r1
 8023412:	e6f3      	b.n	80231fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8023414:	2100      	movs	r1, #0
 8023416:	e6f1      	b.n	80231fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8023418:	4631      	mov	r1, r6
 802341a:	e6ef      	b.n	80231fc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802341c:	2400      	movs	r4, #0
 802341e:	e700      	b.n	8023222 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8023420:	2200      	movs	r2, #0
 8023422:	4614      	mov	r4, r2
 8023424:	e70b      	b.n	802323e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023426:	4602      	mov	r2, r0
 8023428:	4604      	mov	r4, r0
 802342a:	e708      	b.n	802323e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802342c:	2200      	movs	r2, #0
 802342e:	e706      	b.n	802323e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023430:	4632      	mov	r2, r6
 8023432:	e704      	b.n	802323e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08023434 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023438:	b09f      	sub	sp, #124	@ 0x7c
 802343a:	921b      	str	r2, [sp, #108]	@ 0x6c
 802343c:	9309      	str	r3, [sp, #36]	@ 0x24
 802343e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8023440:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8023444:	901d      	str	r0, [sp, #116]	@ 0x74
 8023446:	931c      	str	r3, [sp, #112]	@ 0x70
 8023448:	6850      	ldr	r0, [r2, #4]
 802344a:	9119      	str	r1, [sp, #100]	@ 0x64
 802344c:	6812      	ldr	r2, [r2, #0]
 802344e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8023450:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8023454:	fb00 1303 	mla	r3, r0, r3, r1
 8023458:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802345c:	930c      	str	r3, [sp, #48]	@ 0x30
 802345e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023460:	681b      	ldr	r3, [r3, #0]
 8023462:	9312      	str	r3, [sp, #72]	@ 0x48
 8023464:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023466:	685e      	ldr	r6, [r3, #4]
 8023468:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 802346c:	3604      	adds	r6, #4
 802346e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023470:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023472:	2b00      	cmp	r3, #0
 8023474:	dc03      	bgt.n	802347e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023476:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023478:	2b00      	cmp	r3, #0
 802347a:	f340 8387 	ble.w	8023b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 802347e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023480:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023484:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023488:	1e48      	subs	r0, r1, #1
 802348a:	1e57      	subs	r7, r2, #1
 802348c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802348e:	2b00      	cmp	r3, #0
 8023490:	f340 8194 	ble.w	80237bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023494:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023496:	142b      	asrs	r3, r5, #16
 8023498:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802349c:	d406      	bmi.n	80234ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802349e:	4584      	cmp	ip, r0
 80234a0:	da04      	bge.n	80234ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	db02      	blt.n	80234ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80234a6:	42bb      	cmp	r3, r7
 80234a8:	f2c0 8189 	blt.w	80237be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80234ac:	f11c 0c01 	adds.w	ip, ip, #1
 80234b0:	f100 8177 	bmi.w	80237a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80234b4:	4561      	cmp	r1, ip
 80234b6:	f2c0 8174 	blt.w	80237a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80234ba:	3301      	adds	r3, #1
 80234bc:	f100 8171 	bmi.w	80237a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80234c0:	429a      	cmp	r2, r3
 80234c2:	f2c0 816e 	blt.w	80237a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80234c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80234c8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80234ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80234cc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80234ce:	2b00      	cmp	r3, #0
 80234d0:	f340 8193 	ble.w	80237fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80234d4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80234d6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80234da:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80234de:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80234e2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80234e4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80234e8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80234ea:	141b      	asrs	r3, r3, #16
 80234ec:	f100 81d6 	bmi.w	802389c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80234f0:	f100 38ff 	add.w	r8, r0, #4294967295
 80234f4:	4543      	cmp	r3, r8
 80234f6:	f280 81d1 	bge.w	802389c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80234fa:	f1bc 0f00 	cmp.w	ip, #0
 80234fe:	f2c0 81cd 	blt.w	802389c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023502:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023506:	45c4      	cmp	ip, r8
 8023508:	f280 81c8 	bge.w	802389c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802350c:	b200      	sxth	r0, r0
 802350e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023510:	fb0c 3300 	mla	r3, ip, r0, r3
 8023514:	eb04 0803 	add.w	r8, r4, r3
 8023518:	5ce3      	ldrb	r3, [r4, r3]
 802351a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802351e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023522:	2a00      	cmp	r2, #0
 8023524:	f000 81af 	beq.w	8023886 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023528:	f898 c001 	ldrb.w	ip, [r8, #1]
 802352c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023530:	940e      	str	r4, [sp, #56]	@ 0x38
 8023532:	0e24      	lsrs	r4, r4, #24
 8023534:	9415      	str	r4, [sp, #84]	@ 0x54
 8023536:	b179      	cbz	r1, 8023558 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023538:	eb08 0c00 	add.w	ip, r8, r0
 802353c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023540:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023544:	900a      	str	r0, [sp, #40]	@ 0x28
 8023546:	0e00      	lsrs	r0, r0, #24
 8023548:	9013      	str	r0, [sp, #76]	@ 0x4c
 802354a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802354e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023552:	900f      	str	r0, [sp, #60]	@ 0x3c
 8023554:	0e00      	lsrs	r0, r0, #24
 8023556:	9016      	str	r0, [sp, #88]	@ 0x58
 8023558:	b292      	uxth	r2, r2
 802355a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802355c:	b289      	uxth	r1, r1
 802355e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023560:	fb02 f901 	mul.w	r9, r2, r1
 8023564:	0112      	lsls	r2, r2, #4
 8023566:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802356a:	eba2 0809 	sub.w	r8, r2, r9
 802356e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023572:	b289      	uxth	r1, r1
 8023574:	fa1f f888 	uxth.w	r8, r8
 8023578:	1a52      	subs	r2, r2, r1
 802357a:	fb08 f000 	mul.w	r0, r8, r0
 802357e:	b292      	uxth	r2, r2
 8023580:	fb02 000e 	mla	r0, r2, lr, r0
 8023584:	fb01 0004 	mla	r0, r1, r4, r0
 8023588:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802358a:	fb09 0004 	mla	r0, r9, r4, r0
 802358e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023592:	2800      	cmp	r0, #0
 8023594:	f000 80fa 	beq.w	802378c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023598:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802359c:	d01b      	beq.n	80235d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802359e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80235a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80235a6:	fb0e fa0a 	mul.w	sl, lr, sl
 80235aa:	fb0e fe03 	mul.w	lr, lr, r3
 80235ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80235b2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80235b6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80235ba:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80235be:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80235c2:	4453      	add	r3, sl
 80235c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80235c8:	0a1b      	lsrs	r3, r3, #8
 80235ca:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80235ce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80235d2:	ea43 030c 	orr.w	r3, r3, ip
 80235d6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80235d8:	2cff      	cmp	r4, #255	@ 0xff
 80235da:	d021      	beq.n	8023620 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80235dc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80235de:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80235e2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80235e4:	fb04 fb0b 	mul.w	fp, r4, fp
 80235e8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80235ea:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80235ee:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80235f0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80235f4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80235f8:	fb04 fa0a 	mul.w	sl, r4, sl
 80235fc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023600:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023604:	44de      	add	lr, fp
 8023606:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802360a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802360e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023612:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023616:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802361a:	ea4e 040a 	orr.w	r4, lr, sl
 802361e:	940e      	str	r4, [sp, #56]	@ 0x38
 8023620:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023622:	2cff      	cmp	r4, #255	@ 0xff
 8023624:	d021      	beq.n	802366a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8023626:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023628:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802362c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802362e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023632:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023634:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023638:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802363a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802363e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023642:	fb04 fa0a 	mul.w	sl, r4, sl
 8023646:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802364a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802364e:	44de      	add	lr, fp
 8023650:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023654:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023658:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802365c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023660:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023664:	ea4e 040a 	orr.w	r4, lr, sl
 8023668:	940a      	str	r4, [sp, #40]	@ 0x28
 802366a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802366c:	2cff      	cmp	r4, #255	@ 0xff
 802366e:	d021      	beq.n	80236b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8023670:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023672:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023676:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023678:	fb04 fb0b 	mul.w	fp, r4, fp
 802367c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802367e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023682:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023684:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023688:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802368c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023690:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023694:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023698:	44de      	add	lr, fp
 802369a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802369e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80236a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80236a6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80236aa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80236ae:	ea4e 040a 	orr.w	r4, lr, sl
 80236b2:	940f      	str	r4, [sp, #60]	@ 0x3c
 80236b4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80236b6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80236ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80236be:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80236c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80236c4:	fb08 fc0c 	mul.w	ip, r8, ip
 80236c8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80236cc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80236d0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80236d2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80236d6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80236da:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80236dc:	fb09 cc0e 	mla	ip, r9, lr, ip
 80236e0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80236e4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80236e6:	fb08 f80e 	mul.w	r8, r8, lr
 80236ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80236ee:	fb02 8303 	mla	r3, r2, r3, r8
 80236f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80236f4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80236f8:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80236fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80236fe:	fb01 330a 	mla	r3, r1, sl, r3
 8023702:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8023706:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023708:	fb09 3901 	mla	r9, r9, r1, r3
 802370c:	883b      	ldrh	r3, [r7, #0]
 802370e:	4342      	muls	r2, r0
 8023710:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023714:	1c50      	adds	r0, r2, #1
 8023716:	1219      	asrs	r1, r3, #8
 8023718:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802371c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023720:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8023724:	ea4c 0c09 	orr.w	ip, ip, r9
 8023728:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802372c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023730:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023734:	b2c0      	uxtb	r0, r0
 8023736:	fb12 f204 	smulbb	r2, r2, r4
 802373a:	fa5f fc8c 	uxtb.w	ip, ip
 802373e:	fb1e fe04 	smulbb	lr, lr, r4
 8023742:	fb01 2100 	mla	r1, r1, r0, r2
 8023746:	10da      	asrs	r2, r3, #3
 8023748:	fb1c fc04 	smulbb	ip, ip, r4
 802374c:	00db      	lsls	r3, r3, #3
 802374e:	b289      	uxth	r1, r1
 8023750:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023754:	b2db      	uxtb	r3, r3
 8023756:	fb02 e200 	mla	r2, r2, r0, lr
 802375a:	fb03 c300 	mla	r3, r3, r0, ip
 802375e:	b292      	uxth	r2, r2
 8023760:	fa1f fc83 	uxth.w	ip, r3
 8023764:	1c4b      	adds	r3, r1, #1
 8023766:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802376a:	f10c 0301 	add.w	r3, ip, #1
 802376e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023772:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8023776:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802377a:	430b      	orrs	r3, r1
 802377c:	1c51      	adds	r1, r2, #1
 802377e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023782:	0952      	lsrs	r2, r2, #5
 8023784:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023788:	4313      	orrs	r3, r2
 802378a:	803b      	strh	r3, [r7, #0]
 802378c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802378e:	3702      	adds	r7, #2
 8023790:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023792:	441a      	add	r2, r3
 8023794:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023796:	441d      	add	r5, r3
 8023798:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802379a:	9229      	str	r2, [sp, #164]	@ 0xa4
 802379c:	3b01      	subs	r3, #1
 802379e:	931a      	str	r3, [sp, #104]	@ 0x68
 80237a0:	e694      	b.n	80234cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80237a2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80237a4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80237a6:	441c      	add	r4, r3
 80237a8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80237aa:	441d      	add	r5, r3
 80237ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237ae:	9429      	str	r4, [sp, #164]	@ 0xa4
 80237b0:	3b01      	subs	r3, #1
 80237b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80237b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80237b6:	3302      	adds	r3, #2
 80237b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80237ba:	e667      	b.n	802348c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80237bc:	d024      	beq.n	8023808 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80237be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237c0:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80237c2:	3b01      	subs	r3, #1
 80237c4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80237c6:	fb00 4003 	mla	r0, r0, r3, r4
 80237ca:	1400      	asrs	r0, r0, #16
 80237cc:	f53f ae7b 	bmi.w	80234c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80237d0:	3901      	subs	r1, #1
 80237d2:	4288      	cmp	r0, r1
 80237d4:	f6bf ae77 	bge.w	80234c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80237d8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80237da:	fb01 5303 	mla	r3, r1, r3, r5
 80237de:	141b      	asrs	r3, r3, #16
 80237e0:	f53f ae71 	bmi.w	80234c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80237e4:	3a01      	subs	r2, #1
 80237e6:	4293      	cmp	r3, r2
 80237e8:	f6bf ae6d 	bge.w	80234c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80237ec:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80237f0:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80237f4:	f1bb 0f00 	cmp.w	fp, #0
 80237f8:	dc70      	bgt.n	80238dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80237fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023802:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023806:	930c      	str	r3, [sp, #48]	@ 0x30
 8023808:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802380a:	2b00      	cmp	r3, #0
 802380c:	f340 81be 	ble.w	8023b8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8023810:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023814:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023816:	ee30 0a04 	vadd.f32	s0, s0, s8
 802381a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802381e:	eef0 6a62 	vmov.f32	s13, s5
 8023822:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023826:	ee31 1a05 	vadd.f32	s2, s2, s10
 802382a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802382e:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8023832:	eef0 6a43 	vmov.f32	s13, s6
 8023836:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802383a:	ee16 5a90 	vmov	r5, s13
 802383e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023842:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023846:	ee77 2a62 	vsub.f32	s5, s14, s5
 802384a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802384e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023852:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023856:	ee12 2a90 	vmov	r2, s5
 802385a:	eef0 2a47 	vmov.f32	s5, s14
 802385e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023862:	ee13 2a10 	vmov	r2, s6
 8023866:	932b      	str	r3, [sp, #172]	@ 0xac
 8023868:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802386a:	eeb0 3a67 	vmov.f32	s6, s15
 802386e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023872:	932c      	str	r3, [sp, #176]	@ 0xb0
 8023874:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023876:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023878:	3b01      	subs	r3, #1
 802387a:	9319      	str	r3, [sp, #100]	@ 0x64
 802387c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802387e:	bf08      	it	eq
 8023880:	4613      	moveq	r3, r2
 8023882:	9309      	str	r3, [sp, #36]	@ 0x24
 8023884:	e5f4      	b.n	8023470 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023886:	2900      	cmp	r1, #0
 8023888:	f43f ae66 	beq.w	8023558 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802388c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023890:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023894:	900a      	str	r0, [sp, #40]	@ 0x28
 8023896:	0e00      	lsrs	r0, r0, #24
 8023898:	9013      	str	r0, [sp, #76]	@ 0x4c
 802389a:	e65d      	b.n	8023558 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802389c:	f113 0801 	adds.w	r8, r3, #1
 80238a0:	f53f af74 	bmi.w	802378c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80238a4:	4540      	cmp	r0, r8
 80238a6:	f6ff af71 	blt.w	802378c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80238aa:	f11c 0801 	adds.w	r8, ip, #1
 80238ae:	f53f af6d 	bmi.w	802378c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80238b2:	45c6      	cmp	lr, r8
 80238b4:	f6ff af6a 	blt.w	802378c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80238b8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80238ba:	b200      	sxth	r0, r0
 80238bc:	9302      	str	r3, [sp, #8]
 80238be:	fa0f f38e 	sxth.w	r3, lr
 80238c2:	9000      	str	r0, [sp, #0]
 80238c4:	9301      	str	r3, [sp, #4]
 80238c6:	4633      	mov	r3, r6
 80238c8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80238ca:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80238ce:	e9cd c203 	strd	ip, r2, [sp, #12]
 80238d2:	4639      	mov	r1, r7
 80238d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80238d6:	f7ff fc63 	bl	80231a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80238da:	e757      	b.n	802378c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80238dc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80238de:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80238e2:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80238e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80238e8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80238ea:	1427      	asrs	r7, r4, #16
 80238ec:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80238ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80238f2:	142b      	asrs	r3, r5, #16
 80238f4:	fb01 7303 	mla	r3, r1, r3, r7
 80238f8:	18e7      	adds	r7, r4, r3
 80238fa:	5ce3      	ldrb	r3, [r4, r3]
 80238fc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023900:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023904:	2a00      	cmp	r2, #0
 8023906:	f000 8137 	beq.w	8023b78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 802390a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802390e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023912:	9410      	str	r4, [sp, #64]	@ 0x40
 8023914:	0e24      	lsrs	r4, r4, #24
 8023916:	9417      	str	r4, [sp, #92]	@ 0x5c
 8023918:	b170      	cbz	r0, 8023938 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802391a:	eb07 0e01 	add.w	lr, r7, r1
 802391e:	5c79      	ldrb	r1, [r7, r1]
 8023920:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023924:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023926:	0e09      	lsrs	r1, r1, #24
 8023928:	9114      	str	r1, [sp, #80]	@ 0x50
 802392a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802392e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023932:	9111      	str	r1, [sp, #68]	@ 0x44
 8023934:	0e09      	lsrs	r1, r1, #24
 8023936:	9118      	str	r1, [sp, #96]	@ 0x60
 8023938:	b292      	uxth	r2, r2
 802393a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802393c:	b280      	uxth	r0, r0
 802393e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023940:	fb02 f800 	mul.w	r8, r2, r0
 8023944:	0112      	lsls	r2, r2, #4
 8023946:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802394a:	eba2 0e08 	sub.w	lr, r2, r8
 802394e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023952:	b280      	uxth	r0, r0
 8023954:	fa1f fe8e 	uxth.w	lr, lr
 8023958:	1a12      	subs	r2, r2, r0
 802395a:	fb0e f101 	mul.w	r1, lr, r1
 802395e:	b292      	uxth	r2, r2
 8023960:	fb02 110c 	mla	r1, r2, ip, r1
 8023964:	fb00 1104 	mla	r1, r0, r4, r1
 8023968:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802396a:	fb08 1104 	mla	r1, r8, r4, r1
 802396e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023972:	2900      	cmp	r1, #0
 8023974:	f000 80f5 	beq.w	8023b62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8023978:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802397c:	d019      	beq.n	80239b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 802397e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023982:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023986:	fb0c fa0a 	mul.w	sl, ip, sl
 802398a:	fb0c fc03 	mul.w	ip, ip, r3
 802398e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023992:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023996:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802399a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802399e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80239a2:	4453      	add	r3, sl
 80239a4:	0a3f      	lsrs	r7, r7, #8
 80239a6:	0a1b      	lsrs	r3, r3, #8
 80239a8:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80239ac:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80239b0:	433b      	orrs	r3, r7
 80239b2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80239b4:	2cff      	cmp	r4, #255	@ 0xff
 80239b6:	d020      	beq.n	80239fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80239b8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80239ba:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80239be:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80239c0:	4367      	muls	r7, r4
 80239c2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80239c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80239c8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80239cc:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80239ce:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80239d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80239d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80239da:	44bc      	add	ip, r7
 80239dc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80239e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80239e8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80239ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80239f4:	ea4c 040a 	orr.w	r4, ip, sl
 80239f8:	9410      	str	r4, [sp, #64]	@ 0x40
 80239fa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80239fc:	2cff      	cmp	r4, #255	@ 0xff
 80239fe:	d020      	beq.n	8023a42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8023a00:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023a02:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023a06:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023a08:	4367      	muls	r7, r4
 8023a0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023a0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023a10:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023a14:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023a16:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023a1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023a1e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023a22:	44bc      	add	ip, r7
 8023a24:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023a28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023a30:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023a34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a38:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023a3c:	ea4c 040a 	orr.w	r4, ip, sl
 8023a40:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023a42:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8023a44:	2cff      	cmp	r4, #255	@ 0xff
 8023a46:	d020      	beq.n	8023a8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8023a48:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023a4a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023a4e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8023a50:	4367      	muls	r7, r4
 8023a52:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023a54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023a58:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023a5c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8023a5e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023a62:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023a66:	fb04 fa0a 	mul.w	sl, r4, sl
 8023a6a:	44bc      	add	ip, r7
 8023a6c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023a70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023a78:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023a7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a80:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023a84:	ea4c 040a 	orr.w	r4, ip, sl
 8023a88:	9411      	str	r4, [sp, #68]	@ 0x44
 8023a8a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023a8c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8023a90:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023a94:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023a98:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023a9a:	fb0e f707 	mul.w	r7, lr, r7
 8023a9e:	fb02 770c 	mla	r7, r2, ip, r7
 8023aa2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023aa6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023aa8:	fb00 770c 	mla	r7, r0, ip, r7
 8023aac:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023ab0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023ab2:	fb08 770c 	mla	r7, r8, ip, r7
 8023ab6:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8023aba:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023abc:	fb0e fe0c 	mul.w	lr, lr, ip
 8023ac0:	0a3f      	lsrs	r7, r7, #8
 8023ac2:	fb02 e303 	mla	r3, r2, r3, lr
 8023ac6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023ac8:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8023acc:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8023ad0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023ad2:	fb00 330a 	mla	r3, r0, sl, r3
 8023ad6:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8023ada:	f8b9 0000 	ldrh.w	r0, [r9]
 8023ade:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023ae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023ae4:	1202      	asrs	r2, r0, #8
 8023ae6:	434b      	muls	r3, r1
 8023ae8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023aec:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023af0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023af4:	1c59      	adds	r1, r3, #1
 8023af6:	ea47 070c 	orr.w	r7, r7, ip
 8023afa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023afe:	0c3b      	lsrs	r3, r7, #16
 8023b00:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023b04:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8023b08:	b2ff      	uxtb	r7, r7
 8023b0a:	fb13 f304 	smulbb	r3, r3, r4
 8023b0e:	b2c9      	uxtb	r1, r1
 8023b10:	fb1c fc04 	smulbb	ip, ip, r4
 8023b14:	fb02 3201 	mla	r2, r2, r1, r3
 8023b18:	10c3      	asrs	r3, r0, #3
 8023b1a:	fb17 f704 	smulbb	r7, r7, r4
 8023b1e:	00c0      	lsls	r0, r0, #3
 8023b20:	b292      	uxth	r2, r2
 8023b22:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8023b26:	b2c0      	uxtb	r0, r0
 8023b28:	fb03 c301 	mla	r3, r3, r1, ip
 8023b2c:	f102 0c01 	add.w	ip, r2, #1
 8023b30:	fb00 7001 	mla	r0, r0, r1, r7
 8023b34:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023b38:	b280      	uxth	r0, r0
 8023b3a:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8023b3e:	b29b      	uxth	r3, r3
 8023b40:	1c42      	adds	r2, r0, #1
 8023b42:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023b46:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023b4a:	ea42 020c 	orr.w	r2, r2, ip
 8023b4e:	f103 0c01 	add.w	ip, r3, #1
 8023b52:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8023b56:	095b      	lsrs	r3, r3, #5
 8023b58:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023b5c:	431a      	orrs	r2, r3
 8023b5e:	f8a9 2000 	strh.w	r2, [r9]
 8023b62:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8023b64:	f109 0902 	add.w	r9, r9, #2
 8023b68:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023b6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023b6e:	441a      	add	r2, r3
 8023b70:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023b72:	9229      	str	r2, [sp, #164]	@ 0xa4
 8023b74:	441d      	add	r5, r3
 8023b76:	e63d      	b.n	80237f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023b78:	2800      	cmp	r0, #0
 8023b7a:	f43f aedd 	beq.w	8023938 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023b7e:	5c79      	ldrb	r1, [r7, r1]
 8023b80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023b84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023b86:	0e09      	lsrs	r1, r1, #24
 8023b88:	9114      	str	r1, [sp, #80]	@ 0x50
 8023b8a:	e6d5      	b.n	8023938 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023b8c:	b01f      	add	sp, #124	@ 0x7c
 8023b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023b92 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8023b92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b96:	b089      	sub	sp, #36	@ 0x24
 8023b98:	9101      	str	r1, [sp, #4]
 8023b9a:	9801      	ldr	r0, [sp, #4]
 8023b9c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8023ba0:	8800      	ldrh	r0, [r0, #0]
 8023ba2:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8023ba6:	1206      	asrs	r6, r0, #8
 8023ba8:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8023bac:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8023bb0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8023bb4:	9602      	str	r6, [sp, #8]
 8023bb6:	10c6      	asrs	r6, r0, #3
 8023bb8:	00c0      	lsls	r0, r0, #3
 8023bba:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8023bbe:	b2c0      	uxtb	r0, r0
 8023bc0:	9603      	str	r6, [sp, #12]
 8023bc2:	9004      	str	r0, [sp, #16]
 8023bc4:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8023bc8:	fb07 100c 	mla	r0, r7, ip, r1
 8023bcc:	2f00      	cmp	r7, #0
 8023bce:	eb02 0e00 	add.w	lr, r2, r0
 8023bd2:	f2c0 810a 	blt.w	8023dea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8023bd6:	45b8      	cmp	r8, r7
 8023bd8:	f340 8107 	ble.w	8023dea <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8023bdc:	2900      	cmp	r1, #0
 8023bde:	f2c0 8102 	blt.w	8023de6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8023be2:	458c      	cmp	ip, r1
 8023be4:	f340 80ff 	ble.w	8023de6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8023be8:	5c12      	ldrb	r2, [r2, r0]
 8023bea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023bee:	1c4a      	adds	r2, r1, #1
 8023bf0:	f100 80fe 	bmi.w	8023df0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8023bf4:	4594      	cmp	ip, r2
 8023bf6:	f340 80fb 	ble.w	8023df0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8023bfa:	2d00      	cmp	r5, #0
 8023bfc:	f000 80fa 	beq.w	8023df4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8023c00:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023c04:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023c08:	3701      	adds	r7, #1
 8023c0a:	f100 80f7 	bmi.w	8023dfc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8023c0e:	45b8      	cmp	r8, r7
 8023c10:	f340 80f4 	ble.w	8023dfc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8023c14:	2c00      	cmp	r4, #0
 8023c16:	f000 80f4 	beq.w	8023e02 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8023c1a:	2900      	cmp	r1, #0
 8023c1c:	eb0e 020c 	add.w	r2, lr, ip
 8023c20:	f2c0 80ea 	blt.w	8023df8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8023c24:	458c      	cmp	ip, r1
 8023c26:	f340 80e7 	ble.w	8023df8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8023c2a:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8023c2e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8023c32:	3101      	adds	r1, #1
 8023c34:	f100 80e8 	bmi.w	8023e08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8023c38:	458c      	cmp	ip, r1
 8023c3a:	f340 80e5 	ble.w	8023e08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8023c3e:	2d00      	cmp	r5, #0
 8023c40:	f000 80e4 	beq.w	8023e0c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8023c44:	7852      	ldrb	r2, [r2, #1]
 8023c46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023c4a:	0e0b      	lsrs	r3, r1, #24
 8023c4c:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8023c50:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023c54:	9300      	str	r3, [sp, #0]
 8023c56:	b2a4      	uxth	r4, r4
 8023c58:	b2ab      	uxth	r3, r5
 8023c5a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8023c5e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8023c62:	fb03 f904 	mul.w	r9, r3, r4
 8023c66:	011b      	lsls	r3, r3, #4
 8023c68:	fb0a f505 	mul.w	r5, sl, r5
 8023c6c:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8023c70:	eba3 0e09 	sub.w	lr, r3, r9
 8023c74:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8023c78:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8023c7c:	0a28      	lsrs	r0, r5, #8
 8023c7e:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8023c82:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8023c86:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023c8a:	fb0a f303 	mul.w	r3, sl, r3
 8023c8e:	fb08 f707 	mul.w	r7, r8, r7
 8023c92:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8023c96:	4405      	add	r5, r0
 8023c98:	fb08 fc0c 	mul.w	ip, r8, ip
 8023c9c:	b2a4      	uxth	r4, r4
 8023c9e:	0a2d      	lsrs	r5, r5, #8
 8023ca0:	fa1f fe8e 	uxth.w	lr, lr
 8023ca4:	1b12      	subs	r2, r2, r4
 8023ca6:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8023caa:	b292      	uxth	r2, r2
 8023cac:	9005      	str	r0, [sp, #20]
 8023cae:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8023cb2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023cb6:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8023cba:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023cbe:	0a1b      	lsrs	r3, r3, #8
 8023cc0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023cc4:	9306      	str	r3, [sp, #24]
 8023cc6:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8023cca:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023cce:	4460      	add	r0, ip
 8023cd0:	fb0b f303 	mul.w	r3, fp, r3
 8023cd4:	fb0b f606 	mul.w	r6, fp, r6
 8023cd8:	0a00      	lsrs	r0, r0, #8
 8023cda:	0a1d      	lsrs	r5, r3, #8
 8023cdc:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8023ce0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023ce4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023ce8:	441d      	add	r5, r3
 8023cea:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8023cee:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023cf2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8023cf6:	0a2d      	lsrs	r5, r5, #8
 8023cf8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023cfc:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8023d00:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023d04:	0a36      	lsrs	r6, r6, #8
 8023d06:	0a1b      	lsrs	r3, r3, #8
 8023d08:	fb05 f50e 	mul.w	r5, r5, lr
 8023d0c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023d10:	9307      	str	r3, [sp, #28]
 8023d12:	0e0b      	lsrs	r3, r1, #24
 8023d14:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023d18:	fb0e f606 	mul.w	r6, lr, r6
 8023d1c:	435f      	muls	r7, r3
 8023d1e:	4359      	muls	r1, r3
 8023d20:	9b05      	ldr	r3, [sp, #20]
 8023d22:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023d26:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023d2a:	fb03 5502 	mla	r5, r3, r2, r5
 8023d2e:	9b06      	ldr	r3, [sp, #24]
 8023d30:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023d34:	fb0e fe0b 	mul.w	lr, lr, fp
 8023d38:	44bc      	add	ip, r7
 8023d3a:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8023d3e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d42:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023d46:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023d4a:	0a09      	lsrs	r1, r1, #8
 8023d4c:	fb0c 5509 	mla	r5, ip, r9, r5
 8023d50:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023d54:	fb00 5504 	mla	r5, r0, r4, r5
 8023d58:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8023d5c:	9b07      	ldr	r3, [sp, #28]
 8023d5e:	fb02 6000 	mla	r0, r2, r0, r6
 8023d62:	0a2d      	lsrs	r5, r5, #8
 8023d64:	fb02 e20a 	mla	r2, r2, sl, lr
 8023d68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023d6c:	fb09 0001 	mla	r0, r9, r1, r0
 8023d70:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023d74:	fb04 0003 	mla	r0, r4, r3, r0
 8023d78:	9b00      	ldr	r3, [sp, #0]
 8023d7a:	fb04 2408 	mla	r4, r4, r8, r2
 8023d7e:	9a04      	ldr	r2, [sp, #16]
 8023d80:	0a00      	lsrs	r0, r0, #8
 8023d82:	fb09 4903 	mla	r9, r9, r3, r4
 8023d86:	9b02      	ldr	r3, [sp, #8]
 8023d88:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023d8c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8023d90:	4305      	orrs	r5, r0
 8023d92:	fa5f f989 	uxtb.w	r9, r9
 8023d96:	fb03 f109 	mul.w	r1, r3, r9
 8023d9a:	9b03      	ldr	r3, [sp, #12]
 8023d9c:	fb03 f309 	mul.w	r3, r3, r9
 8023da0:	fb02 f909 	mul.w	r9, r2, r9
 8023da4:	1c4a      	adds	r2, r1, #1
 8023da6:	1c58      	adds	r0, r3, #1
 8023da8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023dac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023db0:	0c2a      	lsrs	r2, r5, #16
 8023db2:	0a2b      	lsrs	r3, r5, #8
 8023db4:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023db8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023dbc:	0212      	lsls	r2, r2, #8
 8023dbe:	00db      	lsls	r3, r3, #3
 8023dc0:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8023dc4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023dc8:	4313      	orrs	r3, r2
 8023dca:	f109 0201 	add.w	r2, r9, #1
 8023dce:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8023dd2:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8023dd6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8023dda:	431d      	orrs	r5, r3
 8023ddc:	9b01      	ldr	r3, [sp, #4]
 8023dde:	801d      	strh	r5, [r3, #0]
 8023de0:	b009      	add	sp, #36	@ 0x24
 8023de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023de6:	2000      	movs	r0, #0
 8023de8:	e701      	b.n	8023bee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8023dea:	2600      	movs	r6, #0
 8023dec:	4630      	mov	r0, r6
 8023dee:	e70b      	b.n	8023c08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8023df0:	2600      	movs	r6, #0
 8023df2:	e709      	b.n	8023c08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8023df4:	462e      	mov	r6, r5
 8023df6:	e707      	b.n	8023c08 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8023df8:	2700      	movs	r7, #0
 8023dfa:	e71a      	b.n	8023c32 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8023dfc:	2100      	movs	r1, #0
 8023dfe:	460f      	mov	r7, r1
 8023e00:	e723      	b.n	8023c4a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8023e02:	4621      	mov	r1, r4
 8023e04:	4627      	mov	r7, r4
 8023e06:	e720      	b.n	8023c4a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8023e08:	2100      	movs	r1, #0
 8023e0a:	e71e      	b.n	8023c4a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8023e0c:	4629      	mov	r1, r5
 8023e0e:	e71c      	b.n	8023c4a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08023e10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e14:	b09b      	sub	sp, #108	@ 0x6c
 8023e16:	9218      	str	r2, [sp, #96]	@ 0x60
 8023e18:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023e1a:	9019      	str	r0, [sp, #100]	@ 0x64
 8023e1c:	9116      	str	r1, [sp, #88]	@ 0x58
 8023e1e:	6850      	ldr	r0, [r2, #4]
 8023e20:	9307      	str	r3, [sp, #28]
 8023e22:	6812      	ldr	r2, [r2, #0]
 8023e24:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8023e26:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8023e2a:	fb00 1303 	mla	r3, r0, r3, r1
 8023e2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8023e34:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023e36:	681b      	ldr	r3, [r3, #0]
 8023e38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023e3a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023e3c:	685e      	ldr	r6, [r3, #4]
 8023e3e:	3604      	adds	r6, #4
 8023e40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023e42:	2b00      	cmp	r3, #0
 8023e44:	dc03      	bgt.n	8023e4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023e46:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023e48:	2b00      	cmp	r3, #0
 8023e4a:	f340 8373 	ble.w	8024534 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8023e4e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023e50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023e58:	1e48      	subs	r0, r1, #1
 8023e5a:	1e57      	subs	r7, r2, #1
 8023e5c:	9b07      	ldr	r3, [sp, #28]
 8023e5e:	2b00      	cmp	r3, #0
 8023e60:	f340 818f 	ble.w	8024182 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023e64:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8023e66:	142b      	asrs	r3, r5, #16
 8023e68:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023e6c:	d406      	bmi.n	8023e7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023e6e:	4584      	cmp	ip, r0
 8023e70:	da04      	bge.n	8023e7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023e72:	2b00      	cmp	r3, #0
 8023e74:	db02      	blt.n	8023e7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023e76:	42bb      	cmp	r3, r7
 8023e78:	f2c0 8184 	blt.w	8024184 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023e7c:	f11c 0c01 	adds.w	ip, ip, #1
 8023e80:	f100 8172 	bmi.w	8024168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023e84:	4561      	cmp	r1, ip
 8023e86:	f2c0 816f 	blt.w	8024168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023e8a:	3301      	adds	r3, #1
 8023e8c:	f100 816c 	bmi.w	8024168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023e90:	429a      	cmp	r2, r3
 8023e92:	f2c0 8169 	blt.w	8024168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023e96:	9b07      	ldr	r3, [sp, #28]
 8023e98:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8023e9a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023e9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023e9e:	2b00      	cmp	r3, #0
 8023ea0:	f340 818e 	ble.w	80241c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8023ea4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023ea6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023eaa:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023eae:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023eb2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023eb4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8023eb8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023eba:	141b      	asrs	r3, r3, #16
 8023ebc:	f100 81d1 	bmi.w	8024262 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023ec0:	f101 38ff 	add.w	r8, r1, #4294967295
 8023ec4:	4543      	cmp	r3, r8
 8023ec6:	f280 81cc 	bge.w	8024262 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023eca:	f1bc 0f00 	cmp.w	ip, #0
 8023ece:	f2c0 81c8 	blt.w	8024262 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023ed2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023ed6:	45c4      	cmp	ip, r8
 8023ed8:	f280 81c3 	bge.w	8024262 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023edc:	b209      	sxth	r1, r1
 8023ede:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023ee0:	fb0c 3301 	mla	r3, ip, r1, r3
 8023ee4:	eb04 0803 	add.w	r8, r4, r3
 8023ee8:	5ce3      	ldrb	r3, [r4, r3]
 8023eea:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023eee:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023ef2:	2a00      	cmp	r2, #0
 8023ef4:	f000 81aa 	beq.w	802424c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8023ef8:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023efc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023f00:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023f02:	0e24      	lsrs	r4, r4, #24
 8023f04:	9412      	str	r4, [sp, #72]	@ 0x48
 8023f06:	b178      	cbz	r0, 8023f28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023f08:	eb08 0c01 	add.w	ip, r8, r1
 8023f0c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023f10:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f14:	9108      	str	r1, [sp, #32]
 8023f16:	0e09      	lsrs	r1, r1, #24
 8023f18:	9110      	str	r1, [sp, #64]	@ 0x40
 8023f1a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023f1e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023f22:	910c      	str	r1, [sp, #48]	@ 0x30
 8023f24:	0e09      	lsrs	r1, r1, #24
 8023f26:	9113      	str	r1, [sp, #76]	@ 0x4c
 8023f28:	b292      	uxth	r2, r2
 8023f2a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023f2c:	b280      	uxth	r0, r0
 8023f2e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023f30:	fb02 f900 	mul.w	r9, r2, r0
 8023f34:	0112      	lsls	r2, r2, #4
 8023f36:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023f3a:	eba2 0809 	sub.w	r8, r2, r9
 8023f3e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023f42:	b280      	uxth	r0, r0
 8023f44:	fa1f f888 	uxth.w	r8, r8
 8023f48:	1a12      	subs	r2, r2, r0
 8023f4a:	fb08 f101 	mul.w	r1, r8, r1
 8023f4e:	b292      	uxth	r2, r2
 8023f50:	fb02 110e 	mla	r1, r2, lr, r1
 8023f54:	fb00 1104 	mla	r1, r0, r4, r1
 8023f58:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023f5a:	fb09 1104 	mla	r1, r9, r4, r1
 8023f5e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023f62:	2900      	cmp	r1, #0
 8023f64:	f000 80f5 	beq.w	8024152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023f68:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023f6c:	d01b      	beq.n	8023fa6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023f6e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023f72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023f76:	fb0e fa0a 	mul.w	sl, lr, sl
 8023f7a:	fb0e fe03 	mul.w	lr, lr, r3
 8023f7e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023f82:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023f86:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023f8a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023f8e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023f92:	4453      	add	r3, sl
 8023f94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f98:	0a1b      	lsrs	r3, r3, #8
 8023f9a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023f9e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023fa2:	ea43 030c 	orr.w	r3, r3, ip
 8023fa6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023fa8:	2cff      	cmp	r4, #255	@ 0xff
 8023faa:	d021      	beq.n	8023ff0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8023fac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023fae:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023fb2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023fb4:	fb04 fb0b 	mul.w	fp, r4, fp
 8023fb8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023fba:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023fbe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023fc0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023fc4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023fc8:	fb04 fa0a 	mul.w	sl, r4, sl
 8023fcc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023fd0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023fd4:	44de      	add	lr, fp
 8023fd6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023fda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023fde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023fe2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023fe6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023fea:	ea4e 040a 	orr.w	r4, lr, sl
 8023fee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023ff0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023ff2:	2cff      	cmp	r4, #255	@ 0xff
 8023ff4:	d021      	beq.n	802403a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023ff6:	9c08      	ldr	r4, [sp, #32]
 8023ff8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023ffc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023ffe:	fb04 fb0b 	mul.w	fp, r4, fp
 8024002:	9c08      	ldr	r4, [sp, #32]
 8024004:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024008:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802400a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802400e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8024012:	fb04 fa0a 	mul.w	sl, r4, sl
 8024016:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802401a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802401e:	44de      	add	lr, fp
 8024020:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024024:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024028:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802402c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024030:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024034:	ea4e 040a 	orr.w	r4, lr, sl
 8024038:	9408      	str	r4, [sp, #32]
 802403a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802403c:	2cff      	cmp	r4, #255	@ 0xff
 802403e:	d021      	beq.n	8024084 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8024040:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024042:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8024046:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024048:	fb04 fb0b 	mul.w	fp, r4, fp
 802404c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802404e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024052:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024054:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024058:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802405c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024060:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8024064:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8024068:	44de      	add	lr, fp
 802406a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802406e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024072:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024076:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802407a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802407e:	ea4e 040a 	orr.w	r4, lr, sl
 8024082:	940c      	str	r4, [sp, #48]	@ 0x30
 8024084:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024086:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802408a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802408e:	43c9      	mvns	r1, r1
 8024090:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024094:	9c08      	ldr	r4, [sp, #32]
 8024096:	fb08 fc0c 	mul.w	ip, r8, ip
 802409a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802409e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80240a2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80240a4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80240a8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80240ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80240ae:	fb09 cc0e 	mla	ip, r9, lr, ip
 80240b2:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80240b6:	fb08 f80e 	mul.w	r8, r8, lr
 80240ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80240be:	fa5f fe81 	uxtb.w	lr, r1
 80240c2:	fb02 8303 	mla	r3, r2, r3, r8
 80240c6:	9a08      	ldr	r2, [sp, #32]
 80240c8:	f8b7 8000 	ldrh.w	r8, [r7]
 80240cc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80240d0:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80240d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80240d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80240da:	fb00 330a 	mla	r3, r0, sl, r3
 80240de:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 80240e2:	ea4f 2228 	mov.w	r2, r8, asr #8
 80240e6:	fb09 3900 	mla	r9, r9, r0, r3
 80240ea:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80240ee:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80240f2:	b2c9      	uxtb	r1, r1
 80240f4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80240f8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80240fc:	fb02 f20e 	mul.w	r2, r2, lr
 8024100:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8024104:	fb00 f00e 	mul.w	r0, r0, lr
 8024108:	1c53      	adds	r3, r2, #1
 802410a:	fb01 f10e 	mul.w	r1, r1, lr
 802410e:	ea4c 0c09 	orr.w	ip, ip, r9
 8024112:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024116:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802411a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802411e:	4a60      	ldr	r2, [pc, #384]	@ (80242a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8024120:	b2db      	uxtb	r3, r3
 8024122:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8024126:	1c43      	adds	r3, r0, #1
 8024128:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802412c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024130:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024134:	00db      	lsls	r3, r3, #3
 8024136:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802413a:	4313      	orrs	r3, r2
 802413c:	1c4a      	adds	r2, r1, #1
 802413e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024142:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8024146:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802414a:	ea4c 0c03 	orr.w	ip, ip, r3
 802414e:	f8a7 c000 	strh.w	ip, [r7]
 8024152:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024154:	3702      	adds	r7, #2
 8024156:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024158:	441a      	add	r2, r3
 802415a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802415c:	441d      	add	r5, r3
 802415e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024160:	9225      	str	r2, [sp, #148]	@ 0x94
 8024162:	3b01      	subs	r3, #1
 8024164:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024166:	e699      	b.n	8023e9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8024168:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802416a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802416c:	441c      	add	r4, r3
 802416e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024170:	441d      	add	r5, r3
 8024172:	9b07      	ldr	r3, [sp, #28]
 8024174:	9425      	str	r4, [sp, #148]	@ 0x94
 8024176:	3b01      	subs	r3, #1
 8024178:	9307      	str	r3, [sp, #28]
 802417a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802417c:	3302      	adds	r3, #2
 802417e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024180:	e66c      	b.n	8023e5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024182:	d024      	beq.n	80241ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8024184:	9b07      	ldr	r3, [sp, #28]
 8024186:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8024188:	3b01      	subs	r3, #1
 802418a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802418c:	fb00 4003 	mla	r0, r0, r3, r4
 8024190:	1400      	asrs	r0, r0, #16
 8024192:	f53f ae80 	bmi.w	8023e96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024196:	3901      	subs	r1, #1
 8024198:	4288      	cmp	r0, r1
 802419a:	f6bf ae7c 	bge.w	8023e96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802419e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80241a0:	fb01 5303 	mla	r3, r1, r3, r5
 80241a4:	141b      	asrs	r3, r3, #16
 80241a6:	f53f ae76 	bmi.w	8023e96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80241aa:	3a01      	subs	r2, #1
 80241ac:	4293      	cmp	r3, r2
 80241ae:	f6bf ae72 	bge.w	8023e96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80241b2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80241b6:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80241ba:	f1bb 0f00 	cmp.w	fp, #0
 80241be:	dc71      	bgt.n	80242a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80241c0:	9b07      	ldr	r3, [sp, #28]
 80241c2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80241c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80241c8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80241cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80241ce:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80241d0:	2b00      	cmp	r3, #0
 80241d2:	f340 81af 	ble.w	8024534 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80241d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80241da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80241dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80241e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80241e4:	eef0 6a62 	vmov.f32	s13, s5
 80241e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80241ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80241f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80241f4:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 80241f8:	eef0 6a43 	vmov.f32	s13, s6
 80241fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024200:	ee16 5a90 	vmov	r5, s13
 8024204:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024208:	ee61 7a27 	vmul.f32	s15, s2, s15
 802420c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024210:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024214:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024218:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802421c:	ee12 2a90 	vmov	r2, s5
 8024220:	eef0 2a47 	vmov.f32	s5, s14
 8024224:	fb92 f3f3 	sdiv	r3, r2, r3
 8024228:	ee13 2a10 	vmov	r2, s6
 802422c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802422e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024230:	eeb0 3a67 	vmov.f32	s6, s15
 8024234:	fb92 f3f3 	sdiv	r3, r2, r3
 8024238:	9328      	str	r3, [sp, #160]	@ 0xa0
 802423a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802423c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802423e:	3b01      	subs	r3, #1
 8024240:	9316      	str	r3, [sp, #88]	@ 0x58
 8024242:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024244:	bf08      	it	eq
 8024246:	4613      	moveq	r3, r2
 8024248:	9307      	str	r3, [sp, #28]
 802424a:	e5f9      	b.n	8023e40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802424c:	2800      	cmp	r0, #0
 802424e:	f43f ae6b 	beq.w	8023f28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024252:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024256:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802425a:	9108      	str	r1, [sp, #32]
 802425c:	0e09      	lsrs	r1, r1, #24
 802425e:	9110      	str	r1, [sp, #64]	@ 0x40
 8024260:	e662      	b.n	8023f28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024262:	f113 0801 	adds.w	r8, r3, #1
 8024266:	f53f af74 	bmi.w	8024152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802426a:	4541      	cmp	r1, r8
 802426c:	f6ff af71 	blt.w	8024152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024270:	f11c 0801 	adds.w	r8, ip, #1
 8024274:	f53f af6d 	bmi.w	8024152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024278:	45c6      	cmp	lr, r8
 802427a:	f6ff af6a 	blt.w	8024152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802427e:	b209      	sxth	r1, r1
 8024280:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024284:	fa0f f38e 	sxth.w	r3, lr
 8024288:	9100      	str	r1, [sp, #0]
 802428a:	4639      	mov	r1, r7
 802428c:	9301      	str	r3, [sp, #4]
 802428e:	4633      	mov	r3, r6
 8024290:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8024294:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024296:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8024298:	f7ff fc7b 	bl	8023b92 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802429c:	e759      	b.n	8024152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802429e:	bf00      	nop
 80242a0:	fffff800 	.word	0xfffff800
 80242a4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80242a6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80242aa:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80242ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80242b0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80242b2:	1427      	asrs	r7, r4, #16
 80242b4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80242b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80242ba:	142b      	asrs	r3, r5, #16
 80242bc:	fb01 7303 	mla	r3, r1, r3, r7
 80242c0:	18e7      	adds	r7, r4, r3
 80242c2:	5ce3      	ldrb	r3, [r4, r3]
 80242c4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80242c8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80242cc:	2a00      	cmp	r2, #0
 80242ce:	f000 8127 	beq.w	8024520 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80242d2:	f897 e001 	ldrb.w	lr, [r7, #1]
 80242d6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80242da:	940d      	str	r4, [sp, #52]	@ 0x34
 80242dc:	0e24      	lsrs	r4, r4, #24
 80242de:	9414      	str	r4, [sp, #80]	@ 0x50
 80242e0:	b170      	cbz	r0, 8024300 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80242e2:	eb07 0e01 	add.w	lr, r7, r1
 80242e6:	5c79      	ldrb	r1, [r7, r1]
 80242e8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80242ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80242ee:	0e09      	lsrs	r1, r1, #24
 80242f0:	9111      	str	r1, [sp, #68]	@ 0x44
 80242f2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80242f6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80242fa:	910e      	str	r1, [sp, #56]	@ 0x38
 80242fc:	0e09      	lsrs	r1, r1, #24
 80242fe:	9115      	str	r1, [sp, #84]	@ 0x54
 8024300:	b292      	uxth	r2, r2
 8024302:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024304:	b280      	uxth	r0, r0
 8024306:	fb02 f800 	mul.w	r8, r2, r0
 802430a:	0112      	lsls	r2, r2, #4
 802430c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024310:	eba2 0e08 	sub.w	lr, r2, r8
 8024314:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8024318:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802431a:	b280      	uxth	r0, r0
 802431c:	fa1f fe8e 	uxth.w	lr, lr
 8024320:	1a09      	subs	r1, r1, r0
 8024322:	fb0e f202 	mul.w	r2, lr, r2
 8024326:	b289      	uxth	r1, r1
 8024328:	fb01 220c 	mla	r2, r1, ip, r2
 802432c:	fb00 2204 	mla	r2, r0, r4, r2
 8024330:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024332:	fb08 2204 	mla	r2, r8, r4, r2
 8024336:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802433a:	2a00      	cmp	r2, #0
 802433c:	f000 80e5 	beq.w	802450a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8024340:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8024344:	d019      	beq.n	802437a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8024346:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802434a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802434e:	fb0c fa0a 	mul.w	sl, ip, sl
 8024352:	fb0c fc03 	mul.w	ip, ip, r3
 8024356:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802435a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802435e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8024362:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024366:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802436a:	4453      	add	r3, sl
 802436c:	0a3f      	lsrs	r7, r7, #8
 802436e:	0a1b      	lsrs	r3, r3, #8
 8024370:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024374:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8024378:	433b      	orrs	r3, r7
 802437a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802437c:	2cff      	cmp	r4, #255	@ 0xff
 802437e:	d020      	beq.n	80243c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8024380:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024382:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024386:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024388:	4367      	muls	r7, r4
 802438a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802438c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024390:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024394:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024396:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802439a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802439e:	fb04 fa0a 	mul.w	sl, r4, sl
 80243a2:	44bc      	add	ip, r7
 80243a4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80243a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80243ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80243b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80243b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80243b8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80243bc:	ea4c 040a 	orr.w	r4, ip, sl
 80243c0:	940d      	str	r4, [sp, #52]	@ 0x34
 80243c2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80243c4:	2cff      	cmp	r4, #255	@ 0xff
 80243c6:	d020      	beq.n	802440a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80243c8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80243ca:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80243ce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80243d0:	4367      	muls	r7, r4
 80243d2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80243d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80243d8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80243dc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80243de:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80243e2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80243e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80243ea:	44bc      	add	ip, r7
 80243ec:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80243f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80243f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80243f8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80243fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024400:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024404:	ea4c 040a 	orr.w	r4, ip, sl
 8024408:	9409      	str	r4, [sp, #36]	@ 0x24
 802440a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802440c:	2cff      	cmp	r4, #255	@ 0xff
 802440e:	d020      	beq.n	8024452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8024410:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024412:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024416:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024418:	4367      	muls	r7, r4
 802441a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802441c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024420:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024424:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8024426:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802442a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802442e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024432:	44bc      	add	ip, r7
 8024434:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8024438:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802443c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024440:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024444:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024448:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802444c:	ea4c 040a 	orr.w	r4, ip, sl
 8024450:	940e      	str	r4, [sp, #56]	@ 0x38
 8024452:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024454:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8024458:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802445c:	43d2      	mvns	r2, r2
 802445e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024462:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024464:	b2d2      	uxtb	r2, r2
 8024466:	fb0e f707 	mul.w	r7, lr, r7
 802446a:	fb01 770c 	mla	r7, r1, ip, r7
 802446e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024472:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024474:	fb00 770c 	mla	r7, r0, ip, r7
 8024478:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802447c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802447e:	fb08 770c 	mla	r7, r8, ip, r7
 8024482:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8024486:	fb0e fe0c 	mul.w	lr, lr, ip
 802448a:	0a3f      	lsrs	r7, r7, #8
 802448c:	fb01 e303 	mla	r3, r1, r3, lr
 8024490:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024492:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8024496:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802449a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802449c:	fb00 330a 	mla	r3, r0, sl, r3
 80244a0:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 80244a4:	fb08 3c0c 	mla	ip, r8, ip, r3
 80244a8:	f8b9 3000 	ldrh.w	r3, [r9]
 80244ac:	1218      	asrs	r0, r3, #8
 80244ae:	10d9      	asrs	r1, r3, #3
 80244b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80244b4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80244b8:	00db      	lsls	r3, r3, #3
 80244ba:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80244be:	4350      	muls	r0, r2
 80244c0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80244c4:	b2db      	uxtb	r3, r3
 80244c6:	4351      	muls	r1, r2
 80244c8:	ea47 070c 	orr.w	r7, r7, ip
 80244cc:	4353      	muls	r3, r2
 80244ce:	1c42      	adds	r2, r0, #1
 80244d0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80244d4:	0c3a      	lsrs	r2, r7, #16
 80244d6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80244da:	4a18      	ldr	r2, [pc, #96]	@ (802453c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80244dc:	b2c0      	uxtb	r0, r0
 80244de:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80244e2:	1c4a      	adds	r2, r1, #1
 80244e4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80244e8:	0a3a      	lsrs	r2, r7, #8
 80244ea:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80244ee:	00c9      	lsls	r1, r1, #3
 80244f0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80244f4:	4301      	orrs	r1, r0
 80244f6:	1c58      	adds	r0, r3, #1
 80244f8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80244fc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024500:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8024504:	4308      	orrs	r0, r1
 8024506:	f8a9 0000 	strh.w	r0, [r9]
 802450a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802450c:	f109 0902 	add.w	r9, r9, #2
 8024510:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024512:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024516:	441a      	add	r2, r3
 8024518:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802451a:	9225      	str	r2, [sp, #148]	@ 0x94
 802451c:	441d      	add	r5, r3
 802451e:	e64c      	b.n	80241ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024520:	2800      	cmp	r0, #0
 8024522:	f43f aeed 	beq.w	8024300 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024526:	5c79      	ldrb	r1, [r7, r1]
 8024528:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802452c:	9109      	str	r1, [sp, #36]	@ 0x24
 802452e:	0e09      	lsrs	r1, r1, #24
 8024530:	9111      	str	r1, [sp, #68]	@ 0x44
 8024532:	e6e5      	b.n	8024300 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024534:	b01b      	add	sp, #108	@ 0x6c
 8024536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802453a:	bf00      	nop
 802453c:	fffff800 	.word	0xfffff800

08024540 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8024540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024544:	b085      	sub	sp, #20
 8024546:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 802454a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 802454e:	2800      	cmp	r0, #0
 8024550:	9103      	str	r1, [sp, #12]
 8024552:	fb00 7406 	mla	r4, r0, r6, r7
 8024556:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 802455a:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 802455e:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8024562:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8024566:	eb03 0904 	add.w	r9, r3, r4
 802456a:	9501      	str	r5, [sp, #4]
 802456c:	f2c0 8150 	blt.w	8024810 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024570:	4583      	cmp	fp, r0
 8024572:	f340 814d 	ble.w	8024810 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024576:	2f00      	cmp	r7, #0
 8024578:	f2c0 8146 	blt.w	8024808 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802457c:	42be      	cmp	r6, r7
 802457e:	f340 8143 	ble.w	8024808 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024582:	f813 c004 	ldrb.w	ip, [r3, r4]
 8024586:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802458a:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 802458e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024592:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8024596:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802459a:	4355      	muls	r5, r2
 802459c:	fb0c f203 	mul.w	r2, ip, r3
 80245a0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80245a4:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 80245a8:	441d      	add	r5, r3
 80245aa:	f102 0320 	add.w	r3, r2, #32
 80245ae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80245b2:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80245b6:	0a1b      	lsrs	r3, r3, #8
 80245b8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80245bc:	431c      	orrs	r4, r3
 80245be:	1c7b      	adds	r3, r7, #1
 80245c0:	f100 812b 	bmi.w	802481a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80245c4:	429e      	cmp	r6, r3
 80245c6:	f340 8128 	ble.w	802481a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80245ca:	2900      	cmp	r1, #0
 80245cc:	f000 8128 	beq.w	8024820 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 80245d0:	9a01      	ldr	r2, [sp, #4]
 80245d2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80245d6:	8855      	ldrh	r5, [r2, #2]
 80245d8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80245dc:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 80245e0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80245e4:	fb08 f802 	mul.w	r8, r8, r2
 80245e8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80245ec:	435d      	muls	r5, r3
 80245ee:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80245f2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80245f6:	44d0      	add	r8, sl
 80245f8:	f105 0a20 	add.w	sl, r5, #32
 80245fc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8024600:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024604:	0a2d      	lsrs	r5, r5, #8
 8024606:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802460a:	432a      	orrs	r2, r5
 802460c:	3001      	adds	r0, #1
 802460e:	f100 810d 	bmi.w	802482c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8024612:	4583      	cmp	fp, r0
 8024614:	f340 810a 	ble.w	802482c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8024618:	f1be 0f00 	cmp.w	lr, #0
 802461c:	f000 810b 	beq.w	8024836 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8024620:	2f00      	cmp	r7, #0
 8024622:	f2c0 8100 	blt.w	8024826 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8024626:	42be      	cmp	r6, r7
 8024628:	f340 80fd 	ble.w	8024826 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802462c:	9801      	ldr	r0, [sp, #4]
 802462e:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8024632:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024636:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802463a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802463e:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8024642:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8024646:	fb0a fa00 	mul.w	sl, sl, r0
 802464a:	fb05 f808 	mul.w	r8, r5, r8
 802464e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8024652:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8024656:	4482      	add	sl, r0
 8024658:	f108 0020 	add.w	r0, r8, #32
 802465c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024660:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8024664:	0a00      	lsrs	r0, r0, #8
 8024666:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802466a:	ea4b 0b00 	orr.w	fp, fp, r0
 802466e:	3701      	adds	r7, #1
 8024670:	f100 80e6 	bmi.w	8024840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8024674:	42be      	cmp	r6, r7
 8024676:	f340 80e3 	ble.w	8024840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802467a:	2900      	cmp	r1, #0
 802467c:	f000 80e3 	beq.w	8024846 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8024680:	3601      	adds	r6, #1
 8024682:	9801      	ldr	r0, [sp, #4]
 8024684:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024688:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802468c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024690:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8024694:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024698:	fb09 f906 	mul.w	r9, r9, r6
 802469c:	fb07 f800 	mul.w	r8, r7, r0
 80246a0:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80246a4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80246a8:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 80246ac:	44d1      	add	r9, sl
 80246ae:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80246b2:	f108 0020 	add.w	r0, r8, #32
 80246b6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80246ba:	0a00      	lsrs	r0, r0, #8
 80246bc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80246c0:	4330      	orrs	r0, r6
 80246c2:	b28e      	uxth	r6, r1
 80246c4:	fa1f f98e 	uxth.w	r9, lr
 80246c8:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80246cc:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 80246d0:	fb06 f809 	mul.w	r8, r6, r9
 80246d4:	0136      	lsls	r6, r6, #4
 80246d6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80246da:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80246de:	9601      	str	r6, [sp, #4]
 80246e0:	ea4a 0404 	orr.w	r4, sl, r4
 80246e4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80246e8:	fa1f f689 	uxth.w	r6, r9
 80246ec:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80246f0:	fb11 f90e 	smulbb	r9, r1, lr
 80246f4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80246f8:	9602      	str	r6, [sp, #8]
 80246fa:	4626      	mov	r6, r4
 80246fc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8024700:	f1ce 0410 	rsb	r4, lr, #16
 8024704:	ea4a 0202 	orr.w	r2, sl, r2
 8024708:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802470c:	1a64      	subs	r4, r4, r1
 802470e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8024712:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024716:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802471a:	434a      	muls	r2, r1
 802471c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8024720:	ea4a 0000 	orr.w	r0, sl, r0
 8024724:	9903      	ldr	r1, [sp, #12]
 8024726:	fb04 2406 	mla	r4, r4, r6, r2
 802472a:	9e02      	ldr	r6, [sp, #8]
 802472c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024730:	fb09 4200 	mla	r2, r9, r0, r4
 8024734:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8024738:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802473c:	8808      	ldrh	r0, [r1, #0]
 802473e:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8024742:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 8024746:	ea44 0b0b 	orr.w	fp, r4, fp
 802474a:	9c01      	ldr	r4, [sp, #4]
 802474c:	b289      	uxth	r1, r1
 802474e:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8024752:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8024756:	1ba4      	subs	r4, r4, r6
 8024758:	9e01      	ldr	r6, [sp, #4]
 802475a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802475e:	eba6 0608 	sub.w	r6, r6, r8
 8024762:	b2a4      	uxth	r4, r4
 8024764:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024768:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802476c:	b2b6      	uxth	r6, r6
 802476e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8024772:	4373      	muls	r3, r6
 8024774:	ea42 0e0e 	orr.w	lr, r2, lr
 8024778:	fb0c 3304 	mla	r3, ip, r4, r3
 802477c:	9c02      	ldr	r4, [sp, #8]
 802477e:	fa1f f28e 	uxth.w	r2, lr
 8024782:	fb04 3505 	mla	r5, r4, r5, r3
 8024786:	10d4      	asrs	r4, r2, #3
 8024788:	fb08 5707 	mla	r7, r8, r7, r5
 802478c:	1215      	asrs	r5, r2, #8
 802478e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8024792:	00d2      	lsls	r2, r2, #3
 8024794:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024798:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802479c:	b2d2      	uxtb	r2, r2
 802479e:	434f      	muls	r7, r1
 80247a0:	1c7b      	adds	r3, r7, #1
 80247a2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80247a6:	1203      	asrs	r3, r0, #8
 80247a8:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80247ac:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80247b0:	b2ff      	uxtb	r7, r7
 80247b2:	fb13 f307 	smulbb	r3, r3, r7
 80247b6:	fb05 3501 	mla	r5, r5, r1, r3
 80247ba:	10c3      	asrs	r3, r0, #3
 80247bc:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80247c0:	b2ad      	uxth	r5, r5
 80247c2:	fb13 f307 	smulbb	r3, r3, r7
 80247c6:	fb04 3401 	mla	r4, r4, r1, r3
 80247ca:	00c3      	lsls	r3, r0, #3
 80247cc:	b2db      	uxtb	r3, r3
 80247ce:	b2a4      	uxth	r4, r4
 80247d0:	fb13 f307 	smulbb	r3, r3, r7
 80247d4:	fb02 3101 	mla	r1, r2, r1, r3
 80247d8:	1c6b      	adds	r3, r5, #1
 80247da:	1c62      	adds	r2, r4, #1
 80247dc:	b289      	uxth	r1, r1
 80247de:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80247e2:	1c4b      	adds	r3, r1, #1
 80247e4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80247e8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80247ec:	9a03      	ldr	r2, [sp, #12]
 80247ee:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80247f2:	0964      	lsrs	r4, r4, #5
 80247f4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80247f8:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80247fc:	432b      	orrs	r3, r5
 80247fe:	4323      	orrs	r3, r4
 8024800:	8013      	strh	r3, [r2, #0]
 8024802:	b005      	add	sp, #20
 8024804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024808:	f04f 0c00 	mov.w	ip, #0
 802480c:	4664      	mov	r4, ip
 802480e:	e6d6      	b.n	80245be <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8024810:	2300      	movs	r3, #0
 8024812:	469c      	mov	ip, r3
 8024814:	461a      	mov	r2, r3
 8024816:	461c      	mov	r4, r3
 8024818:	e6f8      	b.n	802460c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802481a:	2300      	movs	r3, #0
 802481c:	461a      	mov	r2, r3
 802481e:	e6f5      	b.n	802460c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024820:	460b      	mov	r3, r1
 8024822:	460a      	mov	r2, r1
 8024824:	e6f2      	b.n	802460c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024826:	2500      	movs	r5, #0
 8024828:	46ab      	mov	fp, r5
 802482a:	e720      	b.n	802466e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 802482c:	2700      	movs	r7, #0
 802482e:	463d      	mov	r5, r7
 8024830:	4638      	mov	r0, r7
 8024832:	46bb      	mov	fp, r7
 8024834:	e745      	b.n	80246c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024836:	4677      	mov	r7, lr
 8024838:	4675      	mov	r5, lr
 802483a:	4670      	mov	r0, lr
 802483c:	46f3      	mov	fp, lr
 802483e:	e740      	b.n	80246c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024840:	2700      	movs	r7, #0
 8024842:	4638      	mov	r0, r7
 8024844:	e73d      	b.n	80246c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024846:	460f      	mov	r7, r1
 8024848:	4608      	mov	r0, r1
 802484a:	e73a      	b.n	80246c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0802484c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024850:	b097      	sub	sp, #92	@ 0x5c
 8024852:	9214      	str	r2, [sp, #80]	@ 0x50
 8024854:	9308      	str	r3, [sp, #32]
 8024856:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8024858:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802485c:	9015      	str	r0, [sp, #84]	@ 0x54
 802485e:	9312      	str	r3, [sp, #72]	@ 0x48
 8024860:	6850      	ldr	r0, [r2, #4]
 8024862:	9111      	str	r1, [sp, #68]	@ 0x44
 8024864:	6812      	ldr	r2, [r2, #0]
 8024866:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802486a:	fb00 1303 	mla	r3, r0, r3, r1
 802486e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024872:	9309      	str	r3, [sp, #36]	@ 0x24
 8024874:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024876:	681b      	ldr	r3, [r3, #0]
 8024878:	930b      	str	r3, [sp, #44]	@ 0x2c
 802487a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802487c:	685b      	ldr	r3, [r3, #4]
 802487e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024880:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8024884:	930a      	str	r3, [sp, #40]	@ 0x28
 8024886:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024888:	2b00      	cmp	r3, #0
 802488a:	dc03      	bgt.n	8024894 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802488c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802488e:	2b00      	cmp	r3, #0
 8024890:	f340 83cd 	ble.w	802502e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024894:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024896:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802489a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802489e:	1e48      	subs	r0, r1, #1
 80248a0:	1e55      	subs	r5, r2, #1
 80248a2:	9b08      	ldr	r3, [sp, #32]
 80248a4:	2b00      	cmp	r3, #0
 80248a6:	f340 81a5 	ble.w	8024bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80248aa:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 80248ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80248ae:	1436      	asrs	r6, r6, #16
 80248b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80248b4:	d406      	bmi.n	80248c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80248b6:	4286      	cmp	r6, r0
 80248b8:	da04      	bge.n	80248c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80248ba:	2b00      	cmp	r3, #0
 80248bc:	db02      	blt.n	80248c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80248be:	42ab      	cmp	r3, r5
 80248c0:	f2c0 8199 	blt.w	8024bf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80248c4:	3601      	adds	r6, #1
 80248c6:	f100 8186 	bmi.w	8024bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80248ca:	42b1      	cmp	r1, r6
 80248cc:	f2c0 8183 	blt.w	8024bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80248d0:	3301      	adds	r3, #1
 80248d2:	f100 8180 	bmi.w	8024bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80248d6:	429a      	cmp	r2, r3
 80248d8:	f2c0 817d 	blt.w	8024bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80248dc:	9b08      	ldr	r3, [sp, #32]
 80248de:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80248e2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80248e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80248e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80248e8:	2b00      	cmp	r3, #0
 80248ea:	f340 81a6 	ble.w	8024c3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80248ee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80248f0:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 80248f2:	1418      	asrs	r0, r3, #16
 80248f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80248f6:	142d      	asrs	r5, r5, #16
 80248f8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80248fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80248fe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024902:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024904:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024908:	f100 81fa 	bmi.w	8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802490c:	f102 3eff 	add.w	lr, r2, #4294967295
 8024910:	4575      	cmp	r5, lr
 8024912:	f280 81f5 	bge.w	8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024916:	2800      	cmp	r0, #0
 8024918:	f2c0 81f2 	blt.w	8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802491c:	f103 3eff 	add.w	lr, r3, #4294967295
 8024920:	4570      	cmp	r0, lr
 8024922:	f280 81ed 	bge.w	8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024926:	b212      	sxth	r2, r2
 8024928:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802492a:	fa1f fe81 	uxth.w	lr, r1
 802492e:	fb00 5002 	mla	r0, r0, r2, r5
 8024932:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024936:	eb03 0a00 	add.w	sl, r3, r0
 802493a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802493e:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8024942:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024946:	b29b      	uxth	r3, r3
 8024948:	f1bc 0f00 	cmp.w	ip, #0
 802494c:	f000 81bb 	beq.w	8024cc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8024950:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024954:	eb0a 0b02 	add.w	fp, sl, r2
 8024958:	fa1f fa8c 	uxth.w	sl, ip
 802495c:	940d      	str	r4, [sp, #52]	@ 0x34
 802495e:	fb0a fe0e 	mul.w	lr, sl, lr
 8024962:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024966:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802496a:	eba5 050e 	sub.w	r5, r5, lr
 802496e:	940e      	str	r4, [sp, #56]	@ 0x38
 8024970:	fa1f fa8a 	uxth.w	sl, sl
 8024974:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024976:	b2ad      	uxth	r5, r5
 8024978:	eba3 030a 	sub.w	r3, r3, sl
 802497c:	fb08 f505 	mul.w	r5, r8, r5
 8024980:	b29b      	uxth	r3, r3
 8024982:	fb09 5303 	mla	r3, r9, r3, r5
 8024986:	fb0a 3304 	mla	r3, sl, r4, r3
 802498a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802498c:	fb0e 3304 	mla	r3, lr, r4, r3
 8024990:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024994:	2b00      	cmp	r3, #0
 8024996:	f000 8111 	beq.w	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802499a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802499c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80249a0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80249a4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80249a8:	f000 8192 	beq.w	8024cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80249ac:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80249b0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80249b4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80249b8:	fb0a fe0e 	mul.w	lr, sl, lr
 80249bc:	fb09 f000 	mul.w	r0, r9, r0
 80249c0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80249c4:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80249c8:	f100 0b20 	add.w	fp, r0, #32
 80249cc:	44ce      	add	lr, r9
 80249ce:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80249d2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80249d6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80249da:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80249de:	ea4e 0909 	orr.w	r9, lr, r9
 80249e2:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80249e6:	8868      	ldrh	r0, [r5, #2]
 80249e8:	d019      	beq.n	8024a1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80249ea:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80249ee:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80249f2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80249f6:	fb0a fe0e 	mul.w	lr, sl, lr
 80249fa:	fb08 f800 	mul.w	r8, r8, r0
 80249fe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8024a02:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8024a06:	f108 0b20 	add.w	fp, r8, #32
 8024a0a:	4486      	add	lr, r0
 8024a0c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8024a10:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024a14:	0a00      	lsrs	r0, r0, #8
 8024a16:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024a1a:	ea4e 0000 	orr.w	r0, lr, r0
 8024a1e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024a22:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8024a26:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024a2a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024a2e:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8024a32:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024a36:	ea4e 0909 	orr.w	r9, lr, r9
 8024a3a:	ea4a 0000 	orr.w	r0, sl, r0
 8024a3e:	f1bc 0f00 	cmp.w	ip, #0
 8024a42:	f000 8147 	beq.w	8024cd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024a46:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8024a4a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024a4c:	3a01      	subs	r2, #1
 8024a4e:	2cff      	cmp	r4, #255	@ 0xff
 8024a50:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024a54:	f102 0202 	add.w	r2, r2, #2
 8024a58:	eb05 0e02 	add.w	lr, r5, r2
 8024a5c:	5aaa      	ldrh	r2, [r5, r2]
 8024a5e:	d018      	beq.n	8024a92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8024a60:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8024a64:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024a68:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024a6c:	fb04 fa02 	mul.w	sl, r4, r2
 8024a70:	fb08 f805 	mul.w	r8, r8, r5
 8024a74:	f10a 0520 	add.w	r5, sl, #32
 8024a78:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8024a7c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024a80:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8024a84:	4442      	add	r2, r8
 8024a86:	0a2d      	lsrs	r5, r5, #8
 8024a88:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8024a8c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024a90:	432a      	orrs	r2, r5
 8024a92:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024a94:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024a98:	2cff      	cmp	r4, #255	@ 0xff
 8024a9a:	d01a      	beq.n	8024ad2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8024a9c:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8024aa0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024aa4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024aa8:	fb04 fa05 	mul.w	sl, r4, r5
 8024aac:	fb08 f80e 	mul.w	r8, r8, lr
 8024ab0:	f10a 0e20 	add.w	lr, sl, #32
 8024ab4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8024ab8:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024abc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024ac0:	4445      	add	r5, r8
 8024ac2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ac6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8024aca:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8024ace:	ea45 050e 	orr.w	r5, r5, lr
 8024ad2:	fb1c fe01 	smulbb	lr, ip, r1
 8024ad6:	f1cc 0810 	rsb	r8, ip, #16
 8024ada:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024ade:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024ae2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024ae6:	eba8 0801 	sub.w	r8, r8, r1
 8024aea:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8024aee:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024af2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8024af6:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8024afa:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8024afe:	ea4a 0202 	orr.w	r2, sl, r2
 8024b02:	4341      	muls	r1, r0
 8024b04:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8024b08:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8024b0c:	fb09 1108 	mla	r1, r9, r8, r1
 8024b10:	ea4b 0505 	orr.w	r5, fp, r5
 8024b14:	fb0c 1102 	mla	r1, ip, r2, r1
 8024b18:	fb0e 1e05 	mla	lr, lr, r5, r1
 8024b1c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024b20:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024b24:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024b28:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8024b2c:	ea42 0e0e 	orr.w	lr, r2, lr
 8024b30:	fa1f f28e 	uxth.w	r2, lr
 8024b34:	2bff      	cmp	r3, #255	@ 0xff
 8024b36:	d103      	bne.n	8024b40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024b38:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024b3a:	29ff      	cmp	r1, #255	@ 0xff
 8024b3c:	f000 80de 	beq.w	8024cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8024b40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024b42:	1215      	asrs	r5, r2, #8
 8024b44:	8838      	ldrh	r0, [r7, #0]
 8024b46:	434b      	muls	r3, r1
 8024b48:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024b4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024b4e:	f103 0c01 	add.w	ip, r3, #1
 8024b52:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8024b56:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8024b5a:	fa5f fc83 	uxtb.w	ip, r3
 8024b5e:	1203      	asrs	r3, r0, #8
 8024b60:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8024b64:	fb13 f30c 	smulbb	r3, r3, ip
 8024b68:	fb05 3501 	mla	r5, r5, r1, r3
 8024b6c:	10c3      	asrs	r3, r0, #3
 8024b6e:	10d1      	asrs	r1, r2, #3
 8024b70:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8024b74:	00d2      	lsls	r2, r2, #3
 8024b76:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024b7a:	b2ad      	uxth	r5, r5
 8024b7c:	fb13 f30c 	smulbb	r3, r3, ip
 8024b80:	b2d2      	uxtb	r2, r2
 8024b82:	fb01 3104 	mla	r1, r1, r4, r3
 8024b86:	00c3      	lsls	r3, r0, #3
 8024b88:	b2db      	uxtb	r3, r3
 8024b8a:	b289      	uxth	r1, r1
 8024b8c:	fb13 f30c 	smulbb	r3, r3, ip
 8024b90:	fb02 3304 	mla	r3, r2, r4, r3
 8024b94:	b29a      	uxth	r2, r3
 8024b96:	1c6b      	adds	r3, r5, #1
 8024b98:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024b9c:	1c53      	adds	r3, r2, #1
 8024b9e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024ba2:	1c4a      	adds	r2, r1, #1
 8024ba4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024ba8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024bac:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024bb0:	0949      	lsrs	r1, r1, #5
 8024bb2:	432b      	orrs	r3, r5
 8024bb4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024bb8:	430b      	orrs	r3, r1
 8024bba:	803b      	strh	r3, [r7, #0]
 8024bbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024bbe:	3702      	adds	r7, #2
 8024bc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024bc2:	4413      	add	r3, r2
 8024bc4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024bc6:	9321      	str	r3, [sp, #132]	@ 0x84
 8024bc8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024bca:	441a      	add	r2, r3
 8024bcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024bce:	3b01      	subs	r3, #1
 8024bd0:	9222      	str	r2, [sp, #136]	@ 0x88
 8024bd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024bd4:	e687      	b.n	80248e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024bd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024bd8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8024bda:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8024bdc:	4433      	add	r3, r6
 8024bde:	9321      	str	r3, [sp, #132]	@ 0x84
 8024be0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024be2:	441c      	add	r4, r3
 8024be4:	9b08      	ldr	r3, [sp, #32]
 8024be6:	3b01      	subs	r3, #1
 8024be8:	9422      	str	r4, [sp, #136]	@ 0x88
 8024bea:	9308      	str	r3, [sp, #32]
 8024bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bee:	3302      	adds	r3, #2
 8024bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8024bf2:	e656      	b.n	80248a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8024bf4:	d028      	beq.n	8024c48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8024bf6:	9b08      	ldr	r3, [sp, #32]
 8024bf8:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024bfa:	3b01      	subs	r3, #1
 8024bfc:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8024bfe:	fb00 5003 	mla	r0, r0, r3, r5
 8024c02:	1400      	asrs	r0, r0, #16
 8024c04:	f53f ae6a 	bmi.w	80248dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024c08:	3901      	subs	r1, #1
 8024c0a:	4288      	cmp	r0, r1
 8024c0c:	f6bf ae66 	bge.w	80248dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024c10:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8024c12:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8024c14:	fb01 0303 	mla	r3, r1, r3, r0
 8024c18:	141b      	asrs	r3, r3, #16
 8024c1a:	f53f ae5f 	bmi.w	80248dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024c1e:	3a01      	subs	r2, #1
 8024c20:	4293      	cmp	r3, r2
 8024c22:	f6bf ae5b 	bge.w	80248dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024c26:	9b08      	ldr	r3, [sp, #32]
 8024c28:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8024c2c:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8024c30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024c32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	f300 8082 	bgt.w	8024d3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8024c3a:	9b08      	ldr	r3, [sp, #32]
 8024c3c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c42:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024c4a:	2b00      	cmp	r3, #0
 8024c4c:	f340 81ef 	ble.w	802502e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024c50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024c54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024c56:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024c5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024c5e:	eef0 6a62 	vmov.f32	s13, s5
 8024c62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024c66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024c6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c6e:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8024c72:	eef0 6a43 	vmov.f32	s13, s6
 8024c76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c7a:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8024c7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024c82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024c86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024c8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024c8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024c92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024c96:	ee12 2a90 	vmov	r2, s5
 8024c9a:	eef0 2a47 	vmov.f32	s5, s14
 8024c9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ca2:	ee13 2a10 	vmov	r2, s6
 8024ca6:	9323      	str	r3, [sp, #140]	@ 0x8c
 8024ca8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024caa:	eeb0 3a67 	vmov.f32	s6, s15
 8024cae:	fb92 f3f3 	sdiv	r3, r2, r3
 8024cb2:	9324      	str	r3, [sp, #144]	@ 0x90
 8024cb4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024cb6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024cb8:	3b01      	subs	r3, #1
 8024cba:	9311      	str	r3, [sp, #68]	@ 0x44
 8024cbc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024cbe:	bf08      	it	eq
 8024cc0:	4613      	moveq	r3, r2
 8024cc2:	9308      	str	r3, [sp, #32]
 8024cc4:	e5df      	b.n	8024886 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024cc6:	fb08 f505 	mul.w	r5, r8, r5
 8024cca:	fb09 5303 	mla	r3, r9, r3, r5
 8024cce:	e65f      	b.n	8024990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8024cd0:	4681      	mov	r9, r0
 8024cd2:	e686      	b.n	80249e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024cd4:	f1c1 0210 	rsb	r2, r1, #16
 8024cd8:	4341      	muls	r1, r0
 8024cda:	fb09 1902 	mla	r9, r9, r2, r1
 8024cde:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024ce2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8024ce6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8024cea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024cee:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8024cf2:	ea42 0909 	orr.w	r9, r2, r9
 8024cf6:	fa1f f289 	uxth.w	r2, r9
 8024cfa:	e71b      	b.n	8024b34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8024cfc:	803a      	strh	r2, [r7, #0]
 8024cfe:	e75d      	b.n	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024d00:	f115 0e01 	adds.w	lr, r5, #1
 8024d04:	f53f af5a 	bmi.w	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024d08:	4572      	cmp	r2, lr
 8024d0a:	f6ff af57 	blt.w	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024d0e:	f110 0e01 	adds.w	lr, r0, #1
 8024d12:	f53f af53 	bmi.w	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024d16:	4573      	cmp	r3, lr
 8024d18:	f6ff af50 	blt.w	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024d1c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024d1e:	b21b      	sxth	r3, r3
 8024d20:	b212      	sxth	r2, r2
 8024d22:	9502      	str	r5, [sp, #8]
 8024d24:	9301      	str	r3, [sp, #4]
 8024d26:	9200      	str	r2, [sp, #0]
 8024d28:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8024d2c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8024d30:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8024d34:	4639      	mov	r1, r7
 8024d36:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8024d38:	f7ff fc02 	bl	8024540 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8024d3c:	e73e      	b.n	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024d3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024d40:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024d44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024d46:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8024d4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024d4c:	fa1f fc82 	uxth.w	ip, r2
 8024d50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024d54:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024d56:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8024d5a:	141f      	asrs	r7, r3, #16
 8024d5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024d5e:	141b      	asrs	r3, r3, #16
 8024d60:	fb01 3707 	mla	r7, r1, r7, r3
 8024d64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d66:	eb03 0a07 	add.w	sl, r3, r7
 8024d6a:	f813 9007 	ldrb.w	r9, [r3, r7]
 8024d6e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8024d72:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024d76:	b29b      	uxth	r3, r3
 8024d78:	2d00      	cmp	r5, #0
 8024d7a:	f000 813d 	beq.w	8024ff8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8024d7e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8024d82:	eb0a 0b01 	add.w	fp, sl, r1
 8024d86:	fa1f fa85 	uxth.w	sl, r5
 8024d8a:	940f      	str	r4, [sp, #60]	@ 0x3c
 8024d8c:	fb0a fc0c 	mul.w	ip, sl, ip
 8024d90:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024d94:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8024d98:	eba0 000c 	sub.w	r0, r0, ip
 8024d9c:	9410      	str	r4, [sp, #64]	@ 0x40
 8024d9e:	fa1f fa8a 	uxth.w	sl, sl
 8024da2:	b280      	uxth	r0, r0
 8024da4:	eba3 030a 	sub.w	r3, r3, sl
 8024da8:	fb08 f000 	mul.w	r0, r8, r0
 8024dac:	b29b      	uxth	r3, r3
 8024dae:	fb09 0303 	mla	r3, r9, r3, r0
 8024db2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024db4:	fb0a 3300 	mla	r3, sl, r0, r3
 8024db8:	fb0c 3304 	mla	r3, ip, r4, r3
 8024dbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024dc0:	2b00      	cmp	r3, #0
 8024dc2:	f000 810b 	beq.w	8024fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8024dc6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8024dc8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024dcc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024dce:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8024dd2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8024dd6:	f000 8114 	beq.w	8025002 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8024dda:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8024dde:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024de2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024de6:	fb0a fc0c 	mul.w	ip, sl, ip
 8024dea:	fb09 f707 	mul.w	r7, r9, r7
 8024dee:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8024df2:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8024df6:	f107 0b20 	add.w	fp, r7, #32
 8024dfa:	44cc      	add	ip, r9
 8024dfc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8024e00:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024e04:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024e08:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8024e0c:	ea4c 0909 	orr.w	r9, ip, r9
 8024e10:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8024e14:	8847      	ldrh	r7, [r0, #2]
 8024e16:	d019      	beq.n	8024e4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8024e18:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8024e1c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024e20:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024e24:	fb0a fc0c 	mul.w	ip, sl, ip
 8024e28:	fb08 f807 	mul.w	r8, r8, r7
 8024e2c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8024e30:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8024e34:	f108 0b20 	add.w	fp, r8, #32
 8024e38:	44bc      	add	ip, r7
 8024e3a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8024e3e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024e42:	0a3f      	lsrs	r7, r7, #8
 8024e44:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024e48:	ea4c 0707 	orr.w	r7, ip, r7
 8024e4c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8024e50:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8024e54:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024e58:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8024e5c:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024e60:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024e64:	ea4c 0909 	orr.w	r9, ip, r9
 8024e68:	ea4a 0707 	orr.w	r7, sl, r7
 8024e6c:	2d00      	cmp	r5, #0
 8024e6e:	f000 80ca 	beq.w	8025006 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8024e72:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8024e76:	3901      	subs	r1, #1
 8024e78:	0049      	lsls	r1, r1, #1
 8024e7a:	3102      	adds	r1, #2
 8024e7c:	eb00 0c01 	add.w	ip, r0, r1
 8024e80:	5a41      	ldrh	r1, [r0, r1]
 8024e82:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024e84:	28ff      	cmp	r0, #255	@ 0xff
 8024e86:	d019      	beq.n	8024ebc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8024e88:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8024e8c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024e8e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024e92:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024e96:	fb04 fa01 	mul.w	sl, r4, r1
 8024e9a:	fb08 f800 	mul.w	r8, r8, r0
 8024e9e:	f10a 0020 	add.w	r0, sl, #32
 8024ea2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8024ea6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024eaa:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024eae:	4441      	add	r1, r8
 8024eb0:	0a00      	lsrs	r0, r0, #8
 8024eb2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8024eb6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024eba:	4301      	orrs	r1, r0
 8024ebc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024ebe:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024ec2:	2cff      	cmp	r4, #255	@ 0xff
 8024ec4:	d01a      	beq.n	8024efc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8024ec6:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8024eca:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024ece:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024ed2:	fb04 fa00 	mul.w	sl, r4, r0
 8024ed6:	fb08 f80c 	mul.w	r8, r8, ip
 8024eda:	f10a 0c20 	add.w	ip, sl, #32
 8024ede:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8024ee2:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024ee6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8024eea:	4440      	add	r0, r8
 8024eec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ef0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8024ef4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8024ef8:	ea40 000c 	orr.w	r0, r0, ip
 8024efc:	fb15 fc02 	smulbb	ip, r5, r2
 8024f00:	f1c5 0810 	rsb	r8, r5, #16
 8024f04:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024f08:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8024f0c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8024f10:	eba8 0802 	sub.w	r8, r8, r2
 8024f14:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024f18:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024f1c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8024f20:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024f24:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8024f28:	ea4a 0101 	orr.w	r1, sl, r1
 8024f2c:	437a      	muls	r2, r7
 8024f2e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8024f32:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8024f36:	fb09 2208 	mla	r2, r9, r8, r2
 8024f3a:	ea4b 0000 	orr.w	r0, fp, r0
 8024f3e:	fb05 2201 	mla	r2, r5, r1, r2
 8024f42:	fb0c 2200 	mla	r2, ip, r0, r2
 8024f46:	0d57      	lsrs	r7, r2, #21
 8024f48:	0952      	lsrs	r2, r2, #5
 8024f4a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024f4e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024f52:	433a      	orrs	r2, r7
 8024f54:	2bff      	cmp	r3, #255	@ 0xff
 8024f56:	b292      	uxth	r2, r2
 8024f58:	d102      	bne.n	8024f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8024f5a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024f5c:	29ff      	cmp	r1, #255	@ 0xff
 8024f5e:	d063      	beq.n	8025028 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8024f60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024f62:	1215      	asrs	r5, r2, #8
 8024f64:	f8be 1000 	ldrh.w	r1, [lr]
 8024f68:	4343      	muls	r3, r0
 8024f6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024f6c:	10cf      	asrs	r7, r1, #3
 8024f6e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024f72:	1c58      	adds	r0, r3, #1
 8024f74:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8024f78:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8024f7c:	1208      	asrs	r0, r1, #8
 8024f7e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8024f82:	00c9      	lsls	r1, r1, #3
 8024f84:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024f88:	b2db      	uxtb	r3, r3
 8024f8a:	b2c9      	uxtb	r1, r1
 8024f8c:	fb10 f003 	smulbb	r0, r0, r3
 8024f90:	fb11 f103 	smulbb	r1, r1, r3
 8024f94:	fb05 0504 	mla	r5, r5, r4, r0
 8024f98:	10d0      	asrs	r0, r2, #3
 8024f9a:	fb17 f703 	smulbb	r7, r7, r3
 8024f9e:	00d2      	lsls	r2, r2, #3
 8024fa0:	b2ad      	uxth	r5, r5
 8024fa2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8024fa6:	b2d2      	uxtb	r2, r2
 8024fa8:	fb00 7004 	mla	r0, r0, r4, r7
 8024fac:	1c6b      	adds	r3, r5, #1
 8024fae:	fb02 1204 	mla	r2, r2, r4, r1
 8024fb2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024fb6:	b292      	uxth	r2, r2
 8024fb8:	b280      	uxth	r0, r0
 8024fba:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024fbe:	1c57      	adds	r7, r2, #1
 8024fc0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024fc4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024fc8:	433d      	orrs	r5, r7
 8024fca:	1c47      	adds	r7, r0, #1
 8024fcc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024fd0:	097f      	lsrs	r7, r7, #5
 8024fd2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024fd6:	433d      	orrs	r5, r7
 8024fd8:	f8ae 5000 	strh.w	r5, [lr]
 8024fdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024fde:	f10e 0e02 	add.w	lr, lr, #2
 8024fe2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024fe4:	4413      	add	r3, r2
 8024fe6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024fe8:	9321      	str	r3, [sp, #132]	@ 0x84
 8024fea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024fec:	441a      	add	r2, r3
 8024fee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024ff0:	3b01      	subs	r3, #1
 8024ff2:	9222      	str	r2, [sp, #136]	@ 0x88
 8024ff4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024ff6:	e61c      	b.n	8024c32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8024ff8:	fb08 f000 	mul.w	r0, r8, r0
 8024ffc:	fb09 0303 	mla	r3, r9, r3, r0
 8025000:	e6dc      	b.n	8024dbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8025002:	46b9      	mov	r9, r7
 8025004:	e704      	b.n	8024e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8025006:	f1c2 0110 	rsb	r1, r2, #16
 802500a:	437a      	muls	r2, r7
 802500c:	fb09 2901 	mla	r9, r9, r1, r2
 8025010:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025014:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025018:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802501c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025020:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025024:	4302      	orrs	r2, r0
 8025026:	e795      	b.n	8024f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8025028:	f8ae 2000 	strh.w	r2, [lr]
 802502c:	e7d6      	b.n	8024fdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 802502e:	b017      	add	sp, #92	@ 0x5c
 8025030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025034 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025038:	b085      	sub	sp, #20
 802503a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 802503e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8025042:	2800      	cmp	r0, #0
 8025044:	9103      	str	r1, [sp, #12]
 8025046:	fb00 7406 	mla	r4, r0, r6, r7
 802504a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 802504e:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8025052:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8025056:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802505a:	eb02 0904 	add.w	r9, r2, r4
 802505e:	9501      	str	r5, [sp, #4]
 8025060:	f2c0 8141 	blt.w	80252e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8025064:	4583      	cmp	fp, r0
 8025066:	f340 813e 	ble.w	80252e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802506a:	2f00      	cmp	r7, #0
 802506c:	f2c0 8137 	blt.w	80252de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8025070:	42be      	cmp	r6, r7
 8025072:	f340 8134 	ble.w	80252de <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8025076:	f812 c004 	ldrb.w	ip, [r2, r4]
 802507a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 802507e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8025082:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025086:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802508a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802508e:	4355      	muls	r5, r2
 8025090:	fb0c f203 	mul.w	r2, ip, r3
 8025094:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8025098:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 802509c:	441d      	add	r5, r3
 802509e:	f102 0320 	add.w	r3, r2, #32
 80250a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80250a6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80250aa:	0a1b      	lsrs	r3, r3, #8
 80250ac:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80250b0:	431c      	orrs	r4, r3
 80250b2:	1c7b      	adds	r3, r7, #1
 80250b4:	f100 811c 	bmi.w	80252f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80250b8:	429e      	cmp	r6, r3
 80250ba:	f340 8119 	ble.w	80252f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80250be:	2900      	cmp	r1, #0
 80250c0:	f000 8119 	beq.w	80252f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80250c4:	9a01      	ldr	r2, [sp, #4]
 80250c6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80250ca:	8855      	ldrh	r5, [r2, #2]
 80250cc:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80250d0:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 80250d4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80250d8:	fb08 f802 	mul.w	r8, r8, r2
 80250dc:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80250e0:	435d      	muls	r5, r3
 80250e2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80250e6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80250ea:	44d0      	add	r8, sl
 80250ec:	f105 0a20 	add.w	sl, r5, #32
 80250f0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80250f4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80250f8:	0a2d      	lsrs	r5, r5, #8
 80250fa:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80250fe:	432a      	orrs	r2, r5
 8025100:	3001      	adds	r0, #1
 8025102:	f100 80fe 	bmi.w	8025302 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8025106:	4583      	cmp	fp, r0
 8025108:	f340 80fb 	ble.w	8025302 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802510c:	f1be 0f00 	cmp.w	lr, #0
 8025110:	f000 80fc 	beq.w	802530c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8025114:	2f00      	cmp	r7, #0
 8025116:	f2c0 80f1 	blt.w	80252fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802511a:	42be      	cmp	r6, r7
 802511c:	f340 80ee 	ble.w	80252fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8025120:	9801      	ldr	r0, [sp, #4]
 8025122:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8025126:	f819 5006 	ldrb.w	r5, [r9, r6]
 802512a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802512e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8025132:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8025136:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802513a:	fb0a fa00 	mul.w	sl, sl, r0
 802513e:	fb05 f808 	mul.w	r8, r5, r8
 8025142:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8025146:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802514a:	4482      	add	sl, r0
 802514c:	f108 0020 	add.w	r0, r8, #32
 8025150:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025154:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8025158:	0a00      	lsrs	r0, r0, #8
 802515a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802515e:	ea4b 0b00 	orr.w	fp, fp, r0
 8025162:	3701      	adds	r7, #1
 8025164:	f100 80d7 	bmi.w	8025316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8025168:	42be      	cmp	r6, r7
 802516a:	f340 80d4 	ble.w	8025316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802516e:	2900      	cmp	r1, #0
 8025170:	f000 80d4 	beq.w	802531c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8025174:	3601      	adds	r6, #1
 8025176:	9801      	ldr	r0, [sp, #4]
 8025178:	f819 7006 	ldrb.w	r7, [r9, r6]
 802517c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8025180:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8025184:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8025188:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802518c:	fb09 f906 	mul.w	r9, r9, r6
 8025190:	fb07 f800 	mul.w	r8, r7, r0
 8025194:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8025198:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802519c:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 80251a0:	44d1      	add	r9, sl
 80251a2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80251a6:	f108 0020 	add.w	r0, r8, #32
 80251aa:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80251ae:	0a00      	lsrs	r0, r0, #8
 80251b0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80251b4:	4330      	orrs	r0, r6
 80251b6:	b28e      	uxth	r6, r1
 80251b8:	fa1f f98e 	uxth.w	r9, lr
 80251bc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80251c0:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 80251c4:	fb06 f809 	mul.w	r8, r6, r9
 80251c8:	0136      	lsls	r6, r6, #4
 80251ca:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80251ce:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80251d2:	9601      	str	r6, [sp, #4]
 80251d4:	ea4a 0404 	orr.w	r4, sl, r4
 80251d8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80251dc:	fa1f f689 	uxth.w	r6, r9
 80251e0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80251e4:	fb11 f90e 	smulbb	r9, r1, lr
 80251e8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80251ec:	9602      	str	r6, [sp, #8]
 80251ee:	4626      	mov	r6, r4
 80251f0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80251f4:	f1ce 0410 	rsb	r4, lr, #16
 80251f8:	ea4a 0202 	orr.w	r2, sl, r2
 80251fc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025200:	1a64      	subs	r4, r4, r1
 8025202:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8025206:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802520a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802520e:	434a      	muls	r2, r1
 8025210:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8025214:	ea4a 0000 	orr.w	r0, sl, r0
 8025218:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802521c:	fb04 2406 	mla	r4, r4, r6, r2
 8025220:	9903      	ldr	r1, [sp, #12]
 8025222:	fb09 4200 	mla	r2, r9, r0, r4
 8025226:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802522a:	9801      	ldr	r0, [sp, #4]
 802522c:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8025230:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8025234:	8809      	ldrh	r1, [r1, #0]
 8025236:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 802523a:	ea44 0b0b 	orr.w	fp, r4, fp
 802523e:	9c02      	ldr	r4, [sp, #8]
 8025240:	1b00      	subs	r0, r0, r4
 8025242:	9c01      	ldr	r4, [sp, #4]
 8025244:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8025248:	eba4 0608 	sub.w	r6, r4, r8
 802524c:	b280      	uxth	r0, r0
 802524e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025252:	b2b6      	uxth	r6, r6
 8025254:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025258:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802525c:	4373      	muls	r3, r6
 802525e:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025262:	fb0c 3300 	mla	r3, ip, r0, r3
 8025266:	9802      	ldr	r0, [sp, #8]
 8025268:	ea42 0e0e 	orr.w	lr, r2, lr
 802526c:	fb00 3505 	mla	r5, r0, r5, r3
 8025270:	120b      	asrs	r3, r1, #8
 8025272:	10c8      	asrs	r0, r1, #3
 8025274:	fb08 5707 	mla	r7, r8, r7, r5
 8025278:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802527c:	00c9      	lsls	r1, r1, #3
 802527e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8025282:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8025286:	fa1f f28e 	uxth.w	r2, lr
 802528a:	b2c9      	uxtb	r1, r1
 802528c:	b2ff      	uxtb	r7, r7
 802528e:	437b      	muls	r3, r7
 8025290:	4378      	muls	r0, r7
 8025292:	434f      	muls	r7, r1
 8025294:	1c59      	adds	r1, r3, #1
 8025296:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802529a:	1213      	asrs	r3, r2, #8
 802529c:	f023 0307 	bic.w	r3, r3, #7
 80252a0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80252a4:	1c41      	adds	r1, r0, #1
 80252a6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80252aa:	10d1      	asrs	r1, r2, #3
 80252ac:	021b      	lsls	r3, r3, #8
 80252ae:	f021 0103 	bic.w	r1, r1, #3
 80252b2:	00d2      	lsls	r2, r2, #3
 80252b4:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80252b8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80252bc:	00c9      	lsls	r1, r1, #3
 80252be:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80252c2:	430b      	orrs	r3, r1
 80252c4:	1c79      	adds	r1, r7, #1
 80252c6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80252ca:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80252ce:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80252d2:	431a      	orrs	r2, r3
 80252d4:	9b03      	ldr	r3, [sp, #12]
 80252d6:	801a      	strh	r2, [r3, #0]
 80252d8:	b005      	add	sp, #20
 80252da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252de:	f04f 0c00 	mov.w	ip, #0
 80252e2:	4664      	mov	r4, ip
 80252e4:	e6e5      	b.n	80250b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80252e6:	2300      	movs	r3, #0
 80252e8:	469c      	mov	ip, r3
 80252ea:	461a      	mov	r2, r3
 80252ec:	461c      	mov	r4, r3
 80252ee:	e707      	b.n	8025100 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80252f0:	2300      	movs	r3, #0
 80252f2:	461a      	mov	r2, r3
 80252f4:	e704      	b.n	8025100 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80252f6:	460b      	mov	r3, r1
 80252f8:	460a      	mov	r2, r1
 80252fa:	e701      	b.n	8025100 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80252fc:	2500      	movs	r5, #0
 80252fe:	46ab      	mov	fp, r5
 8025300:	e72f      	b.n	8025162 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8025302:	2700      	movs	r7, #0
 8025304:	463d      	mov	r5, r7
 8025306:	4638      	mov	r0, r7
 8025308:	46bb      	mov	fp, r7
 802530a:	e754      	b.n	80251b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802530c:	4677      	mov	r7, lr
 802530e:	4675      	mov	r5, lr
 8025310:	4670      	mov	r0, lr
 8025312:	46f3      	mov	fp, lr
 8025314:	e74f      	b.n	80251b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8025316:	2700      	movs	r7, #0
 8025318:	4638      	mov	r0, r7
 802531a:	e74c      	b.n	80251b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802531c:	460f      	mov	r7, r1
 802531e:	4608      	mov	r0, r1
 8025320:	e749      	b.n	80251b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08025324 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025328:	b093      	sub	sp, #76	@ 0x4c
 802532a:	9210      	str	r2, [sp, #64]	@ 0x40
 802532c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802532e:	9011      	str	r0, [sp, #68]	@ 0x44
 8025330:	910e      	str	r1, [sp, #56]	@ 0x38
 8025332:	6850      	ldr	r0, [r2, #4]
 8025334:	9306      	str	r3, [sp, #24]
 8025336:	6812      	ldr	r2, [r2, #0]
 8025338:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802533c:	fb00 1303 	mla	r3, r0, r3, r1
 8025340:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025344:	9307      	str	r3, [sp, #28]
 8025346:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025348:	681b      	ldr	r3, [r3, #0]
 802534a:	9308      	str	r3, [sp, #32]
 802534c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802534e:	685b      	ldr	r3, [r3, #4]
 8025350:	9309      	str	r3, [sp, #36]	@ 0x24
 8025352:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025354:	2b00      	cmp	r3, #0
 8025356:	dc03      	bgt.n	8025360 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025358:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802535a:	2b00      	cmp	r3, #0
 802535c:	f340 83b6 	ble.w	8025acc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025360:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025362:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025366:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802536a:	1e48      	subs	r0, r1, #1
 802536c:	1e55      	subs	r5, r2, #1
 802536e:	9b06      	ldr	r3, [sp, #24]
 8025370:	2b00      	cmp	r3, #0
 8025372:	f340 8165 	ble.w	8025640 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8025376:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8025378:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802537a:	1436      	asrs	r6, r6, #16
 802537c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025380:	d406      	bmi.n	8025390 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025382:	4286      	cmp	r6, r0
 8025384:	da04      	bge.n	8025390 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025386:	2b00      	cmp	r3, #0
 8025388:	db02      	blt.n	8025390 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802538a:	42ab      	cmp	r3, r5
 802538c:	f2c0 8159 	blt.w	8025642 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8025390:	3601      	adds	r6, #1
 8025392:	f100 8146 	bmi.w	8025622 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025396:	42b1      	cmp	r1, r6
 8025398:	f2c0 8143 	blt.w	8025622 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802539c:	3301      	adds	r3, #1
 802539e:	f100 8140 	bmi.w	8025622 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80253a2:	429a      	cmp	r2, r3
 80253a4:	f2c0 813d 	blt.w	8025622 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80253a8:	9b06      	ldr	r3, [sp, #24]
 80253aa:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80253ae:	9f07      	ldr	r7, [sp, #28]
 80253b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80253b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80253b4:	2b00      	cmp	r3, #0
 80253b6:	f340 8166 	ble.w	8025686 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80253ba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80253bc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80253be:	1418      	asrs	r0, r3, #16
 80253c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80253c2:	142d      	asrs	r5, r5, #16
 80253c4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80253c8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80253ca:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80253ce:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80253d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80253d4:	f100 81f0 	bmi.w	80257b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80253d8:	f102 3eff 	add.w	lr, r2, #4294967295
 80253dc:	4575      	cmp	r5, lr
 80253de:	f280 81eb 	bge.w	80257b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80253e2:	2800      	cmp	r0, #0
 80253e4:	f2c0 81e8 	blt.w	80257b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80253e8:	f103 3eff 	add.w	lr, r3, #4294967295
 80253ec:	4570      	cmp	r0, lr
 80253ee:	f280 81e3 	bge.w	80257b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80253f2:	b212      	sxth	r2, r2
 80253f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80253f6:	fa1f fe81 	uxth.w	lr, r1
 80253fa:	fb00 5002 	mla	r0, r0, r2, r5
 80253fe:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025402:	eb03 0a00 	add.w	sl, r3, r0
 8025406:	f813 9000 	ldrb.w	r9, [r3, r0]
 802540a:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 802540e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025412:	b29b      	uxth	r3, r3
 8025414:	f1bc 0f00 	cmp.w	ip, #0
 8025418:	f000 817b 	beq.w	8025712 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802541c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025420:	eb0a 0b02 	add.w	fp, sl, r2
 8025424:	fa1f fa8c 	uxth.w	sl, ip
 8025428:	940a      	str	r4, [sp, #40]	@ 0x28
 802542a:	fb0a fe0e 	mul.w	lr, sl, lr
 802542e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025432:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025436:	eba5 050e 	sub.w	r5, r5, lr
 802543a:	940b      	str	r4, [sp, #44]	@ 0x2c
 802543c:	fa1f fa8a 	uxth.w	sl, sl
 8025440:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025442:	b2ad      	uxth	r5, r5
 8025444:	eba3 030a 	sub.w	r3, r3, sl
 8025448:	fb08 f505 	mul.w	r5, r8, r5
 802544c:	b29b      	uxth	r3, r3
 802544e:	fb09 5303 	mla	r3, r9, r3, r5
 8025452:	fb0a 3304 	mla	r3, sl, r4, r3
 8025456:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025458:	fb0e 3304 	mla	r3, lr, r4, r3
 802545c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025460:	2b00      	cmp	r3, #0
 8025462:	f000 80d1 	beq.w	8025608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025466:	9c08      	ldr	r4, [sp, #32]
 8025468:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802546c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025470:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025474:	f000 8152 	beq.w	802571c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025478:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802547c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025480:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025484:	fb0a fe0e 	mul.w	lr, sl, lr
 8025488:	fb09 f000 	mul.w	r0, r9, r0
 802548c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025490:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025494:	f100 0b20 	add.w	fp, r0, #32
 8025498:	44ce      	add	lr, r9
 802549a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802549e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80254a2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80254a6:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80254aa:	ea4e 0909 	orr.w	r9, lr, r9
 80254ae:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80254b2:	8868      	ldrh	r0, [r5, #2]
 80254b4:	d019      	beq.n	80254ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80254b6:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80254ba:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80254be:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80254c2:	fb0a fe0e 	mul.w	lr, sl, lr
 80254c6:	fb08 f800 	mul.w	r8, r8, r0
 80254ca:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80254ce:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80254d2:	f108 0b20 	add.w	fp, r8, #32
 80254d6:	4486      	add	lr, r0
 80254d8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80254dc:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80254e0:	0a00      	lsrs	r0, r0, #8
 80254e2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80254e6:	ea4e 0000 	orr.w	r0, lr, r0
 80254ea:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80254ee:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80254f2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80254f6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80254fa:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80254fe:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025502:	ea4e 0909 	orr.w	r9, lr, r9
 8025506:	ea4a 0000 	orr.w	r0, sl, r0
 802550a:	f1bc 0f00 	cmp.w	ip, #0
 802550e:	f000 8107 	beq.w	8025720 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8025512:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8025516:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025518:	3a01      	subs	r2, #1
 802551a:	2cff      	cmp	r4, #255	@ 0xff
 802551c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025520:	f102 0202 	add.w	r2, r2, #2
 8025524:	eb05 0e02 	add.w	lr, r5, r2
 8025528:	5aaa      	ldrh	r2, [r5, r2]
 802552a:	d018      	beq.n	802555e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802552c:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8025530:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025534:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025538:	fb04 fa02 	mul.w	sl, r4, r2
 802553c:	fb08 f805 	mul.w	r8, r8, r5
 8025540:	f10a 0520 	add.w	r5, sl, #32
 8025544:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025548:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802554c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025550:	4442      	add	r2, r8
 8025552:	0a2d      	lsrs	r5, r5, #8
 8025554:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025558:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802555c:	432a      	orrs	r2, r5
 802555e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025560:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025564:	2cff      	cmp	r4, #255	@ 0xff
 8025566:	d01a      	beq.n	802559e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025568:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 802556c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025570:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025574:	fb04 fa05 	mul.w	sl, r4, r5
 8025578:	fb08 f80e 	mul.w	r8, r8, lr
 802557c:	f10a 0e20 	add.w	lr, sl, #32
 8025580:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025584:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025588:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802558c:	4445      	add	r5, r8
 802558e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025592:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025596:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802559a:	ea45 050e 	orr.w	r5, r5, lr
 802559e:	fb1c fe01 	smulbb	lr, ip, r1
 80255a2:	f1cc 0810 	rsb	r8, ip, #16
 80255a6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80255aa:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80255ae:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80255b2:	eba8 0801 	sub.w	r8, r8, r1
 80255b6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80255ba:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80255be:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80255c2:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80255c6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80255ca:	ea4a 0202 	orr.w	r2, sl, r2
 80255ce:	4341      	muls	r1, r0
 80255d0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80255d4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80255d8:	fb09 1108 	mla	r1, r9, r8, r1
 80255dc:	ea4b 0505 	orr.w	r5, fp, r5
 80255e0:	fb0c 1102 	mla	r1, ip, r2, r1
 80255e4:	fb0e 1e05 	mla	lr, lr, r5, r1
 80255e8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80255ec:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80255f0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80255f4:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80255f8:	ea42 0e0e 	orr.w	lr, r2, lr
 80255fc:	fa1f f28e 	uxth.w	r2, lr
 8025600:	2bff      	cmp	r3, #255	@ 0xff
 8025602:	f040 80a1 	bne.w	8025748 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8025606:	803a      	strh	r2, [r7, #0]
 8025608:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802560a:	3702      	adds	r7, #2
 802560c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802560e:	4413      	add	r3, r2
 8025610:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8025612:	931d      	str	r3, [sp, #116]	@ 0x74
 8025614:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025616:	441a      	add	r2, r3
 8025618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802561a:	3b01      	subs	r3, #1
 802561c:	921e      	str	r2, [sp, #120]	@ 0x78
 802561e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025620:	e6c7      	b.n	80253b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025622:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025624:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8025626:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8025628:	4433      	add	r3, r6
 802562a:	931d      	str	r3, [sp, #116]	@ 0x74
 802562c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802562e:	441c      	add	r4, r3
 8025630:	9b06      	ldr	r3, [sp, #24]
 8025632:	3b01      	subs	r3, #1
 8025634:	941e      	str	r4, [sp, #120]	@ 0x78
 8025636:	9306      	str	r3, [sp, #24]
 8025638:	9b07      	ldr	r3, [sp, #28]
 802563a:	3302      	adds	r3, #2
 802563c:	9307      	str	r3, [sp, #28]
 802563e:	e696      	b.n	802536e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025640:	d028      	beq.n	8025694 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025642:	9b06      	ldr	r3, [sp, #24]
 8025644:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8025646:	3b01      	subs	r3, #1
 8025648:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802564a:	fb00 5003 	mla	r0, r0, r3, r5
 802564e:	1400      	asrs	r0, r0, #16
 8025650:	f53f aeaa 	bmi.w	80253a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025654:	3901      	subs	r1, #1
 8025656:	4288      	cmp	r0, r1
 8025658:	f6bf aea6 	bge.w	80253a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802565c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802565e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8025660:	fb01 0303 	mla	r3, r1, r3, r0
 8025664:	141b      	asrs	r3, r3, #16
 8025666:	f53f ae9f 	bmi.w	80253a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802566a:	3a01      	subs	r2, #1
 802566c:	4293      	cmp	r3, r2
 802566e:	f6bf ae9b 	bge.w	80253a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025672:	9b06      	ldr	r3, [sp, #24]
 8025674:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8025678:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802567c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802567e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025680:	2b00      	cmp	r3, #0
 8025682:	f300 80b6 	bgt.w	80257f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8025686:	9b06      	ldr	r3, [sp, #24]
 8025688:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802568c:	9b07      	ldr	r3, [sp, #28]
 802568e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025692:	9307      	str	r3, [sp, #28]
 8025694:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025696:	2b00      	cmp	r3, #0
 8025698:	f340 8218 	ble.w	8025acc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802569c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80256a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80256a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80256a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80256aa:	eef0 6a62 	vmov.f32	s13, s5
 80256ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80256b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80256b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80256ba:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 80256be:	eef0 6a43 	vmov.f32	s13, s6
 80256c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80256c6:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 80256ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80256ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80256d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80256d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80256da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80256de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80256e2:	ee12 2a90 	vmov	r2, s5
 80256e6:	eef0 2a47 	vmov.f32	s5, s14
 80256ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80256ee:	ee13 2a10 	vmov	r2, s6
 80256f2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80256f4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80256f6:	eeb0 3a67 	vmov.f32	s6, s15
 80256fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80256fe:	9320      	str	r3, [sp, #128]	@ 0x80
 8025700:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025702:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025704:	3b01      	subs	r3, #1
 8025706:	930e      	str	r3, [sp, #56]	@ 0x38
 8025708:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802570a:	bf08      	it	eq
 802570c:	4613      	moveq	r3, r2
 802570e:	9306      	str	r3, [sp, #24]
 8025710:	e61f      	b.n	8025352 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025712:	fb08 f505 	mul.w	r5, r8, r5
 8025716:	fb09 5303 	mla	r3, r9, r3, r5
 802571a:	e69f      	b.n	802545c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802571c:	4681      	mov	r9, r0
 802571e:	e6c6      	b.n	80254ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8025720:	f1c1 0210 	rsb	r2, r1, #16
 8025724:	4341      	muls	r1, r0
 8025726:	fb09 1902 	mla	r9, r9, r2, r1
 802572a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802572e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025732:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025736:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802573a:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802573e:	ea42 0909 	orr.w	r9, r2, r9
 8025742:	fa1f f289 	uxth.w	r2, r9
 8025746:	e75b      	b.n	8025600 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8025748:	f8b7 c000 	ldrh.w	ip, [r7]
 802574c:	43db      	mvns	r3, r3
 802574e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025752:	fa5f fe83 	uxtb.w	lr, r3
 8025756:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802575a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802575e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8025762:	fb00 f00e 	mul.w	r0, r0, lr
 8025766:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802576a:	b2db      	uxtb	r3, r3
 802576c:	1c41      	adds	r1, r0, #1
 802576e:	fb05 f50e 	mul.w	r5, r5, lr
 8025772:	fb03 f30e 	mul.w	r3, r3, lr
 8025776:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802577a:	1211      	asrs	r1, r2, #8
 802577c:	f021 0107 	bic.w	r1, r1, #7
 8025780:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025784:	48d3      	ldr	r0, [pc, #844]	@ (8025ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8025786:	b2c9      	uxtb	r1, r1
 8025788:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802578c:	1c69      	adds	r1, r5, #1
 802578e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025792:	10d1      	asrs	r1, r2, #3
 8025794:	00d2      	lsls	r2, r2, #3
 8025796:	f021 0103 	bic.w	r1, r1, #3
 802579a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802579e:	00c9      	lsls	r1, r1, #3
 80257a0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80257a4:	4301      	orrs	r1, r0
 80257a6:	1c58      	adds	r0, r3, #1
 80257a8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80257ac:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80257b0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80257b4:	430a      	orrs	r2, r1
 80257b6:	e726      	b.n	8025606 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80257b8:	f115 0e01 	adds.w	lr, r5, #1
 80257bc:	f53f af24 	bmi.w	8025608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80257c0:	4572      	cmp	r2, lr
 80257c2:	f6ff af21 	blt.w	8025608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80257c6:	f110 0e01 	adds.w	lr, r0, #1
 80257ca:	f53f af1d 	bmi.w	8025608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80257ce:	4573      	cmp	r3, lr
 80257d0:	f6ff af1a 	blt.w	8025608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80257d4:	b21b      	sxth	r3, r3
 80257d6:	b212      	sxth	r2, r2
 80257d8:	9301      	str	r3, [sp, #4]
 80257da:	9200      	str	r2, [sp, #0]
 80257dc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80257e0:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80257e4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80257e8:	4639      	mov	r1, r7
 80257ea:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80257ec:	f7ff fc22 	bl	8025034 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80257f0:	e70a      	b.n	8025608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80257f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80257f4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80257f8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80257fa:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80257fe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025800:	fa1f fc82 	uxth.w	ip, r2
 8025804:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025808:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802580a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802580e:	141f      	asrs	r7, r3, #16
 8025810:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025812:	141b      	asrs	r3, r3, #16
 8025814:	fb01 3707 	mla	r7, r1, r7, r3
 8025818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802581a:	eb03 0a07 	add.w	sl, r3, r7
 802581e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025822:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8025826:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802582a:	b29b      	uxth	r3, r3
 802582c:	2d00      	cmp	r5, #0
 802582e:	f000 80fe 	beq.w	8025a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8025832:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025836:	eb0a 0b01 	add.w	fp, sl, r1
 802583a:	fa1f fa85 	uxth.w	sl, r5
 802583e:	940c      	str	r4, [sp, #48]	@ 0x30
 8025840:	fb0a fc0c 	mul.w	ip, sl, ip
 8025844:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025848:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802584c:	eba0 000c 	sub.w	r0, r0, ip
 8025850:	940d      	str	r4, [sp, #52]	@ 0x34
 8025852:	fa1f fa8a 	uxth.w	sl, sl
 8025856:	b280      	uxth	r0, r0
 8025858:	eba3 030a 	sub.w	r3, r3, sl
 802585c:	fb08 f000 	mul.w	r0, r8, r0
 8025860:	b29b      	uxth	r3, r3
 8025862:	fb09 0303 	mla	r3, r9, r3, r0
 8025866:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025868:	fb0a 3300 	mla	r3, sl, r0, r3
 802586c:	fb0c 3304 	mla	r3, ip, r4, r3
 8025870:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025874:	2b00      	cmp	r3, #0
 8025876:	f000 80cc 	beq.w	8025a12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802587a:	9808      	ldr	r0, [sp, #32]
 802587c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025880:	9c08      	ldr	r4, [sp, #32]
 8025882:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025886:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802588a:	f000 80d5 	beq.w	8025a38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802588e:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8025892:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025896:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802589a:	fb0a fc0c 	mul.w	ip, sl, ip
 802589e:	fb09 f707 	mul.w	r7, r9, r7
 80258a2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80258a6:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80258aa:	f107 0b20 	add.w	fp, r7, #32
 80258ae:	44cc      	add	ip, r9
 80258b0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80258b4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80258b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80258bc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80258c0:	ea4c 0909 	orr.w	r9, ip, r9
 80258c4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80258c8:	8847      	ldrh	r7, [r0, #2]
 80258ca:	d019      	beq.n	8025900 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 80258cc:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80258d0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80258d4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80258d8:	fb0a fc0c 	mul.w	ip, sl, ip
 80258dc:	fb08 f807 	mul.w	r8, r8, r7
 80258e0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80258e4:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80258e8:	f108 0b20 	add.w	fp, r8, #32
 80258ec:	44bc      	add	ip, r7
 80258ee:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80258f2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80258f6:	0a3f      	lsrs	r7, r7, #8
 80258f8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80258fc:	ea4c 0707 	orr.w	r7, ip, r7
 8025900:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025904:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8025908:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802590c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8025910:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025914:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025918:	ea4c 0909 	orr.w	r9, ip, r9
 802591c:	ea4a 0707 	orr.w	r7, sl, r7
 8025920:	2d00      	cmp	r5, #0
 8025922:	f000 808b 	beq.w	8025a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025926:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802592a:	3901      	subs	r1, #1
 802592c:	0049      	lsls	r1, r1, #1
 802592e:	3102      	adds	r1, #2
 8025930:	eb00 0c01 	add.w	ip, r0, r1
 8025934:	5a41      	ldrh	r1, [r0, r1]
 8025936:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025938:	28ff      	cmp	r0, #255	@ 0xff
 802593a:	d019      	beq.n	8025970 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 802593c:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8025940:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025942:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025946:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802594a:	fb04 fa01 	mul.w	sl, r4, r1
 802594e:	fb08 f800 	mul.w	r8, r8, r0
 8025952:	f10a 0020 	add.w	r0, sl, #32
 8025956:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802595a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802595e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025962:	4441      	add	r1, r8
 8025964:	0a00      	lsrs	r0, r0, #8
 8025966:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802596a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802596e:	4301      	orrs	r1, r0
 8025970:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025972:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025976:	2cff      	cmp	r4, #255	@ 0xff
 8025978:	d01a      	beq.n	80259b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 802597a:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 802597e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025982:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025986:	fb04 fa00 	mul.w	sl, r4, r0
 802598a:	fb08 f80c 	mul.w	r8, r8, ip
 802598e:	f10a 0c20 	add.w	ip, sl, #32
 8025992:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025996:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802599a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802599e:	4440      	add	r0, r8
 80259a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80259a4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80259a8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80259ac:	ea40 000c 	orr.w	r0, r0, ip
 80259b0:	fb15 fc02 	smulbb	ip, r5, r2
 80259b4:	f1c5 0810 	rsb	r8, r5, #16
 80259b8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80259bc:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80259c0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80259c4:	eba8 0802 	sub.w	r8, r8, r2
 80259c8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80259cc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80259d0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80259d4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80259d8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80259dc:	ea4a 0101 	orr.w	r1, sl, r1
 80259e0:	437a      	muls	r2, r7
 80259e2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80259e6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80259ea:	fb09 2208 	mla	r2, r9, r8, r2
 80259ee:	ea4b 0000 	orr.w	r0, fp, r0
 80259f2:	fb05 2201 	mla	r2, r5, r1, r2
 80259f6:	fb0c 2200 	mla	r2, ip, r0, r2
 80259fa:	0d57      	lsrs	r7, r2, #21
 80259fc:	0952      	lsrs	r2, r2, #5
 80259fe:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8025a02:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025a06:	433a      	orrs	r2, r7
 8025a08:	2bff      	cmp	r3, #255	@ 0xff
 8025a0a:	b292      	uxth	r2, r2
 8025a0c:	d127      	bne.n	8025a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8025a0e:	f8ae 2000 	strh.w	r2, [lr]
 8025a12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025a14:	f10e 0e02 	add.w	lr, lr, #2
 8025a18:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8025a1a:	4413      	add	r3, r2
 8025a1c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8025a1e:	931d      	str	r3, [sp, #116]	@ 0x74
 8025a20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025a22:	441a      	add	r2, r3
 8025a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025a26:	3b01      	subs	r3, #1
 8025a28:	921e      	str	r2, [sp, #120]	@ 0x78
 8025a2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025a2c:	e627      	b.n	802567e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8025a2e:	fb08 f000 	mul.w	r0, r8, r0
 8025a32:	fb09 0303 	mla	r3, r9, r3, r0
 8025a36:	e71b      	b.n	8025870 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8025a38:	46b9      	mov	r9, r7
 8025a3a:	e743      	b.n	80258c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8025a3c:	f1c2 0110 	rsb	r1, r2, #16
 8025a40:	437a      	muls	r2, r7
 8025a42:	fb09 2901 	mla	r9, r9, r1, r2
 8025a46:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025a4a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025a4e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025a52:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025a56:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025a5a:	4302      	orrs	r2, r0
 8025a5c:	e7d4      	b.n	8025a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8025a5e:	f8be 7000 	ldrh.w	r7, [lr]
 8025a62:	43db      	mvns	r3, r3
 8025a64:	4c1b      	ldr	r4, [pc, #108]	@ (8025ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8025a66:	1238      	asrs	r0, r7, #8
 8025a68:	fa5f fc83 	uxtb.w	ip, r3
 8025a6c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025a70:	10fd      	asrs	r5, r7, #3
 8025a72:	00fb      	lsls	r3, r7, #3
 8025a74:	fb00 f00c 	mul.w	r0, r0, ip
 8025a78:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8025a7c:	b2db      	uxtb	r3, r3
 8025a7e:	fb05 f10c 	mul.w	r1, r5, ip
 8025a82:	1c45      	adds	r5, r0, #1
 8025a84:	fb03 f30c 	mul.w	r3, r3, ip
 8025a88:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025a8c:	1215      	asrs	r5, r2, #8
 8025a8e:	f025 0507 	bic.w	r5, r5, #7
 8025a92:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025a96:	1c4d      	adds	r5, r1, #1
 8025a98:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025a9c:	10d1      	asrs	r1, r2, #3
 8025a9e:	b2c0      	uxtb	r0, r0
 8025aa0:	f021 0103 	bic.w	r1, r1, #3
 8025aa4:	00d2      	lsls	r2, r2, #3
 8025aa6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8025aaa:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025aae:	00c9      	lsls	r1, r1, #3
 8025ab0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025ab4:	4308      	orrs	r0, r1
 8025ab6:	1c59      	adds	r1, r3, #1
 8025ab8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025abc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025ac0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8025ac4:	4318      	orrs	r0, r3
 8025ac6:	f8ae 0000 	strh.w	r0, [lr]
 8025aca:	e7a2      	b.n	8025a12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8025acc:	b013      	add	sp, #76	@ 0x4c
 8025ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ad2:	bf00      	nop
 8025ad4:	fffff800 	.word	0xfffff800

08025ad8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8025ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025adc:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8025ae0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8025ae4:	fb05 4c03 	mla	ip, r5, r3, r4
 8025ae8:	2d00      	cmp	r5, #0
 8025aea:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8025aee:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8025af2:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8025af6:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8025afa:	8808      	ldrh	r0, [r1, #0]
 8025afc:	f2c0 80a7 	blt.w	8025c4e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8025b00:	45aa      	cmp	sl, r5
 8025b02:	f340 80a4 	ble.w	8025c4e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8025b06:	2c00      	cmp	r4, #0
 8025b08:	f2c0 809f 	blt.w	8025c4a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8025b0c:	42a3      	cmp	r3, r4
 8025b0e:	f340 809c 	ble.w	8025c4a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8025b12:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8025b16:	1c62      	adds	r2, r4, #1
 8025b18:	f100 809c 	bmi.w	8025c54 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8025b1c:	4293      	cmp	r3, r2
 8025b1e:	f340 8099 	ble.w	8025c54 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8025b22:	f1b9 0f00 	cmp.w	r9, #0
 8025b26:	f000 8095 	beq.w	8025c54 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8025b2a:	f8be c002 	ldrh.w	ip, [lr, #2]
 8025b2e:	3501      	adds	r5, #1
 8025b30:	f100 8094 	bmi.w	8025c5c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8025b34:	45aa      	cmp	sl, r5
 8025b36:	f340 8091 	ble.w	8025c5c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8025b3a:	2f00      	cmp	r7, #0
 8025b3c:	f000 808e 	beq.w	8025c5c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8025b40:	2c00      	cmp	r4, #0
 8025b42:	f2c0 8089 	blt.w	8025c58 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8025b46:	42a3      	cmp	r3, r4
 8025b48:	f340 8086 	ble.w	8025c58 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8025b4c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8025b50:	3401      	adds	r4, #1
 8025b52:	f100 8086 	bmi.w	8025c62 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025b56:	42a3      	cmp	r3, r4
 8025b58:	f340 8083 	ble.w	8025c62 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025b5c:	f1b9 0f00 	cmp.w	r9, #0
 8025b60:	d07f      	beq.n	8025c62 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025b62:	3301      	adds	r3, #1
 8025b64:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8025b68:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8025b6c:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8025b70:	fb19 fe07 	smulbb	lr, r9, r7
 8025b74:	f1c7 0210 	rsb	r2, r7, #16
 8025b78:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8025b7c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8025b80:	eba2 0209 	sub.w	r2, r2, r9
 8025b84:	ea44 0808 	orr.w	r8, r4, r8
 8025b88:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8025b8c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025b90:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8025b94:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8025b98:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8025b9c:	ea44 0c0c 	orr.w	ip, r4, ip
 8025ba0:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8025ba4:	fb04 f40c 	mul.w	r4, r4, ip
 8025ba8:	fb02 4808 	mla	r8, r2, r8, r4
 8025bac:	041a      	lsls	r2, r3, #16
 8025bae:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025bb2:	b2b4      	uxth	r4, r6
 8025bb4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025bb8:	43f6      	mvns	r6, r6
 8025bba:	4313      	orrs	r3, r2
 8025bbc:	042a      	lsls	r2, r5, #16
 8025bbe:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025bc2:	b2f6      	uxtb	r6, r6
 8025bc4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025bc8:	fb0e 8303 	mla	r3, lr, r3, r8
 8025bcc:	432a      	orrs	r2, r5
 8025bce:	fb07 3202 	mla	r2, r7, r2, r3
 8025bd2:	10c7      	asrs	r7, r0, #3
 8025bd4:	0d53      	lsrs	r3, r2, #21
 8025bd6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8025bda:	0952      	lsrs	r2, r2, #5
 8025bdc:	fb17 f706 	smulbb	r7, r7, r6
 8025be0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025be4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025be8:	431a      	orrs	r2, r3
 8025bea:	b293      	uxth	r3, r2
 8025bec:	1202      	asrs	r2, r0, #8
 8025bee:	121d      	asrs	r5, r3, #8
 8025bf0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025bf4:	00c0      	lsls	r0, r0, #3
 8025bf6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025bfa:	fb12 f206 	smulbb	r2, r2, r6
 8025bfe:	b2c0      	uxtb	r0, r0
 8025c00:	fb05 2504 	mla	r5, r5, r4, r2
 8025c04:	10da      	asrs	r2, r3, #3
 8025c06:	fb10 f006 	smulbb	r0, r0, r6
 8025c0a:	00db      	lsls	r3, r3, #3
 8025c0c:	b2ad      	uxth	r5, r5
 8025c0e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025c12:	b2db      	uxtb	r3, r3
 8025c14:	fb02 7204 	mla	r2, r2, r4, r7
 8025c18:	fb03 0004 	mla	r0, r3, r4, r0
 8025c1c:	1c6b      	adds	r3, r5, #1
 8025c1e:	b292      	uxth	r2, r2
 8025c20:	b280      	uxth	r0, r0
 8025c22:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025c26:	1c43      	adds	r3, r0, #1
 8025c28:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025c2c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025c30:	1c50      	adds	r0, r2, #1
 8025c32:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025c36:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025c3a:	0952      	lsrs	r2, r2, #5
 8025c3c:	432b      	orrs	r3, r5
 8025c3e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025c42:	4313      	orrs	r3, r2
 8025c44:	800b      	strh	r3, [r1, #0]
 8025c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025c4a:	4680      	mov	r8, r0
 8025c4c:	e763      	b.n	8025b16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8025c4e:	4684      	mov	ip, r0
 8025c50:	4680      	mov	r8, r0
 8025c52:	e76c      	b.n	8025b2e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8025c54:	4684      	mov	ip, r0
 8025c56:	e76a      	b.n	8025b2e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8025c58:	4605      	mov	r5, r0
 8025c5a:	e779      	b.n	8025b50 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8025c5c:	4603      	mov	r3, r0
 8025c5e:	4605      	mov	r5, r0
 8025c60:	e782      	b.n	8025b68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8025c62:	4603      	mov	r3, r0
 8025c64:	e780      	b.n	8025b68 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08025c66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025c66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c6a:	b093      	sub	sp, #76	@ 0x4c
 8025c6c:	461d      	mov	r5, r3
 8025c6e:	9210      	str	r2, [sp, #64]	@ 0x40
 8025c70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025c72:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8025c76:	910a      	str	r1, [sp, #40]	@ 0x28
 8025c78:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025c7a:	6859      	ldr	r1, [r3, #4]
 8025c7c:	681b      	ldr	r3, [r3, #0]
 8025c7e:	9011      	str	r0, [sp, #68]	@ 0x44
 8025c80:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8025c84:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8025c88:	fb01 2707 	mla	r7, r1, r7, r2
 8025c8c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8025c90:	9307      	str	r3, [sp, #28]
 8025c92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025c94:	681b      	ldr	r3, [r3, #0]
 8025c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025c9a:	43db      	mvns	r3, r3
 8025c9c:	b2db      	uxtb	r3, r3
 8025c9e:	9308      	str	r3, [sp, #32]
 8025ca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	dc03      	bgt.n	8025cae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025ca6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025ca8:	2b00      	cmp	r3, #0
 8025caa:	f340 8205 	ble.w	80260b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025cae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025cb0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025cb4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025cb8:	1e48      	subs	r0, r1, #1
 8025cba:	f102 3cff 	add.w	ip, r2, #4294967295
 8025cbe:	2d00      	cmp	r5, #0
 8025cc0:	f340 80da 	ble.w	8025e78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025cc4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025cc8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025ccc:	d406      	bmi.n	8025cdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025cce:	4586      	cmp	lr, r0
 8025cd0:	da04      	bge.n	8025cdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025cd2:	2b00      	cmp	r3, #0
 8025cd4:	db02      	blt.n	8025cdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025cd6:	4563      	cmp	r3, ip
 8025cd8:	f2c0 80cf 	blt.w	8025e7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8025cdc:	f11e 0e01 	adds.w	lr, lr, #1
 8025ce0:	f100 80c1 	bmi.w	8025e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025ce4:	4571      	cmp	r1, lr
 8025ce6:	f2c0 80be 	blt.w	8025e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025cea:	3301      	adds	r3, #1
 8025cec:	f100 80bb 	bmi.w	8025e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025cf0:	429a      	cmp	r2, r3
 8025cf2:	f2c0 80b8 	blt.w	8025e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025cf6:	46a9      	mov	r9, r5
 8025cf8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8025cfc:	f1b9 0f00 	cmp.w	r9, #0
 8025d00:	f340 80d8 	ble.w	8025eb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8025d04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025d06:	1421      	asrs	r1, r4, #16
 8025d08:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025d0c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025d10:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025d14:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025d18:	f100 8112 	bmi.w	8025f40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025d1c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8025d20:	4551      	cmp	r1, sl
 8025d22:	f280 810d 	bge.w	8025f40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025d26:	2800      	cmp	r0, #0
 8025d28:	f2c0 810a 	blt.w	8025f40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025d2c:	f103 3aff 	add.w	sl, r3, #4294967295
 8025d30:	4550      	cmp	r0, sl
 8025d32:	f280 8105 	bge.w	8025f40 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025d36:	fa0f f38e 	sxth.w	r3, lr
 8025d3a:	fb00 1103 	mla	r1, r0, r3, r1
 8025d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d40:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8025d44:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8025d48:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8025d4c:	f1bc 0f00 	cmp.w	ip, #0
 8025d50:	d007      	beq.n	8025d62 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8025d52:	005b      	lsls	r3, r3, #1
 8025d54:	eb0a 0003 	add.w	r0, sl, r3
 8025d58:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8025d5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8025d5e:	8843      	ldrh	r3, [r0, #2]
 8025d60:	930d      	str	r3, [sp, #52]	@ 0x34
 8025d62:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8025d66:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025d6a:	fb12 f30c 	smulbb	r3, r2, ip
 8025d6e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025d72:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8025d76:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8025d7a:	10db      	asrs	r3, r3, #3
 8025d7c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025d80:	ea40 000e 	orr.w	r0, r0, lr
 8025d84:	f1cc 0e10 	rsb	lr, ip, #16
 8025d88:	ea4a 0101 	orr.w	r1, sl, r1
 8025d8c:	9f08      	ldr	r7, [sp, #32]
 8025d8e:	ebae 0e02 	sub.w	lr, lr, r2
 8025d92:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025d96:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025d9a:	4351      	muls	r1, r2
 8025d9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025d9e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025da2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025da4:	0410      	lsls	r0, r2, #16
 8025da6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025daa:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8025dae:	4310      	orrs	r0, r2
 8025db0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025db2:	0412      	lsls	r2, r2, #16
 8025db4:	fb03 e000 	mla	r0, r3, r0, lr
 8025db8:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8025dbc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025dc0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025dc4:	ea42 020e 	orr.w	r2, r2, lr
 8025dc8:	fb03 0302 	mla	r3, r3, r2, r0
 8025dcc:	f8b8 0000 	ldrh.w	r0, [r8]
 8025dd0:	0d5a      	lsrs	r2, r3, #21
 8025dd2:	095b      	lsrs	r3, r3, #5
 8025dd4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025dd8:	1201      	asrs	r1, r0, #8
 8025dda:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025dde:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8025de2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025de6:	00c0      	lsls	r0, r0, #3
 8025de8:	4313      	orrs	r3, r2
 8025dea:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8025dee:	fb11 f107 	smulbb	r1, r1, r7
 8025df2:	b2c0      	uxtb	r0, r0
 8025df4:	b29b      	uxth	r3, r3
 8025df6:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8025dfa:	fb10 f007 	smulbb	r0, r0, r7
 8025dfe:	fb1e fe07 	smulbb	lr, lr, r7
 8025e02:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8025e06:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8025e0a:	fb0c 1c02 	mla	ip, ip, r2, r1
 8025e0e:	10d9      	asrs	r1, r3, #3
 8025e10:	00db      	lsls	r3, r3, #3
 8025e12:	fa1f fc8c 	uxth.w	ip, ip
 8025e16:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8025e1a:	b2db      	uxtb	r3, r3
 8025e1c:	fb01 e102 	mla	r1, r1, r2, lr
 8025e20:	fb03 0302 	mla	r3, r3, r2, r0
 8025e24:	b289      	uxth	r1, r1
 8025e26:	b29a      	uxth	r2, r3
 8025e28:	f10c 0301 	add.w	r3, ip, #1
 8025e2c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025e30:	1c53      	adds	r3, r2, #1
 8025e32:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025e36:	1c4a      	adds	r2, r1, #1
 8025e38:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8025e3c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025e40:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025e44:	0949      	lsrs	r1, r1, #5
 8025e46:	ea43 030c 	orr.w	r3, r3, ip
 8025e4a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025e4e:	430b      	orrs	r3, r1
 8025e50:	f8a8 3000 	strh.w	r3, [r8]
 8025e54:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025e56:	f108 0802 	add.w	r8, r8, #2
 8025e5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8025e5e:	441c      	add	r4, r3
 8025e60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025e62:	441e      	add	r6, r3
 8025e64:	e74a      	b.n	8025cfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025e66:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025e68:	3d01      	subs	r5, #1
 8025e6a:	441c      	add	r4, r3
 8025e6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025e6e:	441e      	add	r6, r3
 8025e70:	9b07      	ldr	r3, [sp, #28]
 8025e72:	3302      	adds	r3, #2
 8025e74:	9307      	str	r3, [sp, #28]
 8025e76:	e722      	b.n	8025cbe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025e78:	d022      	beq.n	8025ec0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8025e7a:	1e6b      	subs	r3, r5, #1
 8025e7c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8025e7e:	fb00 4003 	mla	r0, r0, r3, r4
 8025e82:	1400      	asrs	r0, r0, #16
 8025e84:	f53f af37 	bmi.w	8025cf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025e88:	3901      	subs	r1, #1
 8025e8a:	4288      	cmp	r0, r1
 8025e8c:	f6bf af33 	bge.w	8025cf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025e90:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8025e92:	fb01 6303 	mla	r3, r1, r3, r6
 8025e96:	141b      	asrs	r3, r3, #16
 8025e98:	f53f af2d 	bmi.w	8025cf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025e9c:	3a01      	subs	r2, #1
 8025e9e:	4293      	cmp	r3, r2
 8025ea0:	f6bf af29 	bge.w	8025cf6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025ea4:	46a8      	mov	r8, r5
 8025ea6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8025eaa:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8025eae:	f1b8 0f00 	cmp.w	r8, #0
 8025eb2:	dc60      	bgt.n	8025f76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8025eb4:	9b07      	ldr	r3, [sp, #28]
 8025eb6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025eba:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025ebe:	9307      	str	r3, [sp, #28]
 8025ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ec2:	2b00      	cmp	r3, #0
 8025ec4:	f340 80f8 	ble.w	80260b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025ec8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025ecc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025ece:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025ed2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025ed6:	eef0 6a62 	vmov.f32	s13, s5
 8025eda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025ede:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025ee2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ee6:	ee16 4a90 	vmov	r4, s13
 8025eea:	eef0 6a43 	vmov.f32	s13, s6
 8025eee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ef2:	ee16 6a90 	vmov	r6, s13
 8025ef6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025efa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025efe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025f02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025f06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025f0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025f0e:	ee12 2a90 	vmov	r2, s5
 8025f12:	eef0 2a47 	vmov.f32	s5, s14
 8025f16:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f1a:	ee13 2a10 	vmov	r2, s6
 8025f1e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8025f20:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025f22:	eeb0 3a67 	vmov.f32	s6, s15
 8025f26:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f2a:	9320      	str	r3, [sp, #128]	@ 0x80
 8025f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025f2e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025f30:	3b01      	subs	r3, #1
 8025f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8025f34:	bf08      	it	eq
 8025f36:	4615      	moveq	r5, r2
 8025f38:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025f3a:	bf18      	it	ne
 8025f3c:	461d      	movne	r5, r3
 8025f3e:	e6af      	b.n	8025ca0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025f40:	f111 0a01 	adds.w	sl, r1, #1
 8025f44:	d486      	bmi.n	8025e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025f46:	45d6      	cmp	lr, sl
 8025f48:	db84      	blt.n	8025e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025f4a:	f110 0a01 	adds.w	sl, r0, #1
 8025f4e:	d481      	bmi.n	8025e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025f50:	4553      	cmp	r3, sl
 8025f52:	f6ff af7f 	blt.w	8025e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025f56:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025f58:	b21b      	sxth	r3, r3
 8025f5a:	9101      	str	r1, [sp, #4]
 8025f5c:	4641      	mov	r1, r8
 8025f5e:	9300      	str	r3, [sp, #0]
 8025f60:	fa0f f38e 	sxth.w	r3, lr
 8025f64:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8025f68:	e9cd c704 	strd	ip, r7, [sp, #16]
 8025f6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025f6e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8025f70:	f7ff fdb2 	bl	8025ad8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8025f74:	e76e      	b.n	8025e54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025f76:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025f78:	1430      	asrs	r0, r6, #16
 8025f7a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8025f7c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8025f80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025f84:	1423      	asrs	r3, r4, #16
 8025f86:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025f8a:	fb01 3000 	mla	r0, r1, r0, r3
 8025f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f90:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8025f94:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8025f98:	8858      	ldrh	r0, [r3, #2]
 8025f9a:	f1be 0f00 	cmp.w	lr, #0
 8025f9e:	d00b      	beq.n	8025fb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8025fa0:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8025fa4:	3901      	subs	r1, #1
 8025fa6:	0049      	lsls	r1, r1, #1
 8025fa8:	3102      	adds	r1, #2
 8025faa:	eb03 0b01 	add.w	fp, r3, r1
 8025fae:	5a5b      	ldrh	r3, [r3, r1]
 8025fb0:	930e      	str	r3, [sp, #56]	@ 0x38
 8025fb2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8025fb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025fb8:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8025fbc:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025fc0:	fb12 f30e 	smulbb	r3, r2, lr
 8025fc4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025fc8:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8025fcc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025fd0:	10db      	asrs	r3, r3, #3
 8025fd2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025fd6:	ea41 010c 	orr.w	r1, r1, ip
 8025fda:	f1ce 0c10 	rsb	ip, lr, #16
 8025fde:	ea4b 0000 	orr.w	r0, fp, r0
 8025fe2:	9f08      	ldr	r7, [sp, #32]
 8025fe4:	ebac 0c02 	sub.w	ip, ip, r2
 8025fe8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025fec:	f108 38ff 	add.w	r8, r8, #4294967295
 8025ff0:	4350      	muls	r0, r2
 8025ff2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8025ff6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025ff8:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025ffc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025ffe:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026002:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 8026006:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026008:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802600c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026010:	0412      	lsls	r2, r2, #16
 8026012:	ea4b 0101 	orr.w	r1, fp, r1
 8026016:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802601a:	fb03 c101 	mla	r1, r3, r1, ip
 802601e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026022:	4302      	orrs	r2, r0
 8026024:	fb03 1202 	mla	r2, r3, r2, r1
 8026028:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802602c:	0952      	lsrs	r2, r2, #5
 802602e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8026032:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 8026036:	f8b9 2000 	ldrh.w	r2, [r9]
 802603a:	ea4b 0303 	orr.w	r3, fp, r3
 802603e:	1211      	asrs	r1, r2, #8
 8026040:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8026044:	b29b      	uxth	r3, r3
 8026046:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802604a:	00d2      	lsls	r2, r2, #3
 802604c:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8026050:	fb11 f107 	smulbb	r1, r1, r7
 8026054:	1218      	asrs	r0, r3, #8
 8026056:	fb1c fc07 	smulbb	ip, ip, r7
 802605a:	b2d2      	uxtb	r2, r2
 802605c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026060:	fb12 f207 	smulbb	r2, r2, r7
 8026064:	fb00 100a 	mla	r0, r0, sl, r1
 8026068:	10d9      	asrs	r1, r3, #3
 802606a:	00db      	lsls	r3, r3, #3
 802606c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026070:	b280      	uxth	r0, r0
 8026072:	b2db      	uxtb	r3, r3
 8026074:	fb01 c10a 	mla	r1, r1, sl, ip
 8026078:	fb03 230a 	mla	r3, r3, sl, r2
 802607c:	1c42      	adds	r2, r0, #1
 802607e:	b289      	uxth	r1, r1
 8026080:	b29b      	uxth	r3, r3
 8026082:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026086:	f101 0c01 	add.w	ip, r1, #1
 802608a:	1c5a      	adds	r2, r3, #1
 802608c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026090:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8026094:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026098:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802609a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802609e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80260a2:	441c      	add	r4, r3
 80260a4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80260a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80260aa:	4310      	orrs	r0, r2
 80260ac:	441e      	add	r6, r3
 80260ae:	ea40 000c 	orr.w	r0, r0, ip
 80260b2:	f829 0b02 	strh.w	r0, [r9], #2
 80260b6:	e6fa      	b.n	8025eae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80260b8:	b013      	add	sp, #76	@ 0x4c
 80260ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080260be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80260be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80260c2:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80260c6:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80260ca:	fb0e 4703 	mla	r7, lr, r3, r4
 80260ce:	f1be 0f00 	cmp.w	lr, #0
 80260d2:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 80260d6:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 80260da:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 80260de:	8808      	ldrh	r0, [r1, #0]
 80260e0:	db60      	blt.n	80261a4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80260e2:	45f1      	cmp	r9, lr
 80260e4:	dd5e      	ble.n	80261a4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80260e6:	2c00      	cmp	r4, #0
 80260e8:	db5a      	blt.n	80261a0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80260ea:	42a3      	cmp	r3, r4
 80260ec:	dd58      	ble.n	80261a0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80260ee:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80260f2:	1c62      	adds	r2, r4, #1
 80260f4:	d459      	bmi.n	80261aa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80260f6:	4293      	cmp	r3, r2
 80260f8:	dd57      	ble.n	80261aa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80260fa:	2d00      	cmp	r5, #0
 80260fc:	d055      	beq.n	80261aa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80260fe:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8026102:	f11e 0e01 	adds.w	lr, lr, #1
 8026106:	d454      	bmi.n	80261b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026108:	45f1      	cmp	r9, lr
 802610a:	dd52      	ble.n	80261b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802610c:	2e00      	cmp	r6, #0
 802610e:	d050      	beq.n	80261b2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8026110:	2c00      	cmp	r4, #0
 8026112:	db4c      	blt.n	80261ae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8026114:	42a3      	cmp	r3, r4
 8026116:	dd4a      	ble.n	80261ae <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8026118:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 802611c:	3401      	adds	r4, #1
 802611e:	d405      	bmi.n	802612c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026120:	42a3      	cmp	r3, r4
 8026122:	dd03      	ble.n	802612c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026124:	b115      	cbz	r5, 802612c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8026126:	3301      	adds	r3, #1
 8026128:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 802612c:	fb15 f406 	smulbb	r4, r5, r6
 8026130:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8026134:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8026138:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802613c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026140:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8026144:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8026148:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802614c:	ea43 0c0c 	orr.w	ip, r3, ip
 8026150:	f1c6 0310 	rsb	r3, r6, #16
 8026154:	ea4e 0707 	orr.w	r7, lr, r7
 8026158:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802615c:	1b5b      	subs	r3, r3, r5
 802615e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8026162:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026166:	437d      	muls	r5, r7
 8026168:	fb03 5c0c 	mla	ip, r3, ip, r5
 802616c:	0403      	lsls	r3, r0, #16
 802616e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026172:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026176:	4318      	orrs	r0, r3
 8026178:	0413      	lsls	r3, r2, #16
 802617a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802617e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026182:	fb04 c000 	mla	r0, r4, r0, ip
 8026186:	4313      	orrs	r3, r2
 8026188:	fb06 0003 	mla	r0, r6, r3, r0
 802618c:	0d43      	lsrs	r3, r0, #21
 802618e:	0940      	lsrs	r0, r0, #5
 8026190:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026194:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026198:	4318      	orrs	r0, r3
 802619a:	8008      	strh	r0, [r1, #0]
 802619c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80261a0:	4684      	mov	ip, r0
 80261a2:	e7a6      	b.n	80260f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80261a4:	4607      	mov	r7, r0
 80261a6:	4684      	mov	ip, r0
 80261a8:	e7ab      	b.n	8026102 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80261aa:	4607      	mov	r7, r0
 80261ac:	e7a9      	b.n	8026102 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80261ae:	4602      	mov	r2, r0
 80261b0:	e7b4      	b.n	802611c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80261b2:	4602      	mov	r2, r0
 80261b4:	e7ba      	b.n	802612c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080261b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80261b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261ba:	b08f      	sub	sp, #60	@ 0x3c
 80261bc:	461d      	mov	r5, r3
 80261be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80261c0:	9107      	str	r1, [sp, #28]
 80261c2:	920c      	str	r2, [sp, #48]	@ 0x30
 80261c4:	6859      	ldr	r1, [r3, #4]
 80261c6:	681b      	ldr	r3, [r3, #0]
 80261c8:	900d      	str	r0, [sp, #52]	@ 0x34
 80261ca:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 80261ce:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 80261d2:	fb01 2707 	mla	r7, r1, r7, r2
 80261d6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80261da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80261dc:	f8d3 8000 	ldr.w	r8, [r3]
 80261e0:	9b07      	ldr	r3, [sp, #28]
 80261e2:	2b00      	cmp	r3, #0
 80261e4:	dc03      	bgt.n	80261ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80261e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	f340 8182 	ble.w	80264f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80261ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80261f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80261f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80261f8:	1e48      	subs	r0, r1, #1
 80261fa:	f102 3cff 	add.w	ip, r2, #4294967295
 80261fe:	2d00      	cmp	r5, #0
 8026200:	f340 809b 	ble.w	802633a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8026204:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026208:	ea4f 4326 	mov.w	r3, r6, asr #16
 802620c:	d406      	bmi.n	802621c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802620e:	4586      	cmp	lr, r0
 8026210:	da04      	bge.n	802621c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026212:	2b00      	cmp	r3, #0
 8026214:	db02      	blt.n	802621c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026216:	4563      	cmp	r3, ip
 8026218:	f2c0 8090 	blt.w	802633c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802621c:	f11e 0e01 	adds.w	lr, lr, #1
 8026220:	f100 8084 	bmi.w	802632c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026224:	4571      	cmp	r1, lr
 8026226:	f2c0 8081 	blt.w	802632c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802622a:	3301      	adds	r3, #1
 802622c:	d47e      	bmi.n	802632c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802622e:	429a      	cmp	r2, r3
 8026230:	db7c      	blt.n	802632c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8026232:	46aa      	mov	sl, r5
 8026234:	46b9      	mov	r9, r7
 8026236:	f1ba 0f00 	cmp.w	sl, #0
 802623a:	f340 8099 	ble.w	8026370 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802623e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026240:	1421      	asrs	r1, r4, #16
 8026242:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026246:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802624a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802624e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026252:	f100 80d1 	bmi.w	80263f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026256:	f10e 3bff 	add.w	fp, lr, #4294967295
 802625a:	4559      	cmp	r1, fp
 802625c:	f280 80cc 	bge.w	80263f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026260:	2800      	cmp	r0, #0
 8026262:	f2c0 80c9 	blt.w	80263f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026266:	f103 3bff 	add.w	fp, r3, #4294967295
 802626a:	4558      	cmp	r0, fp
 802626c:	f280 80c4 	bge.w	80263f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026270:	fa0f fe8e 	sxth.w	lr, lr
 8026274:	fb00 110e 	mla	r1, r0, lr, r1
 8026278:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802627c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8026280:	8841      	ldrh	r1, [r0, #2]
 8026282:	f1bc 0f00 	cmp.w	ip, #0
 8026286:	d00b      	beq.n	80262a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8026288:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 802628c:	3b01      	subs	r3, #1
 802628e:	005b      	lsls	r3, r3, #1
 8026290:	3302      	adds	r3, #2
 8026292:	eb00 0e03 	add.w	lr, r0, r3
 8026296:	5ac3      	ldrh	r3, [r0, r3]
 8026298:	9308      	str	r3, [sp, #32]
 802629a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802629e:	9309      	str	r3, [sp, #36]	@ 0x24
 80262a0:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80262a4:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80262a8:	fb12 f30c 	smulbb	r3, r2, ip
 80262ac:	f1cc 0e10 	rsb	lr, ip, #16
 80262b0:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80262b4:	10db      	asrs	r3, r3, #3
 80262b6:	ebae 0e02 	sub.w	lr, lr, r2
 80262ba:	ea40 000b 	orr.w	r0, r0, fp
 80262be:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80262c2:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80262c6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80262ca:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80262ce:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80262d2:	ea4b 0101 	orr.w	r1, fp, r1
 80262d6:	4351      	muls	r1, r2
 80262d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80262da:	fb0e 1e00 	mla	lr, lr, r0, r1
 80262de:	0410      	lsls	r0, r2, #16
 80262e0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80262e4:	9908      	ldr	r1, [sp, #32]
 80262e6:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80262ea:	4310      	orrs	r0, r2
 80262ec:	9a08      	ldr	r2, [sp, #32]
 80262ee:	0412      	lsls	r2, r2, #16
 80262f0:	fb03 e000 	mla	r0, r3, r0, lr
 80262f4:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80262f8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80262fc:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8026300:	ea42 020e 	orr.w	r2, r2, lr
 8026304:	fb03 0302 	mla	r3, r3, r2, r0
 8026308:	0d5a      	lsrs	r2, r3, #21
 802630a:	095b      	lsrs	r3, r3, #5
 802630c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026310:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8026314:	4313      	orrs	r3, r2
 8026316:	f8a9 3000 	strh.w	r3, [r9]
 802631a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802631c:	f109 0902 	add.w	r9, r9, #2
 8026320:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026324:	441c      	add	r4, r3
 8026326:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026328:	441e      	add	r6, r3
 802632a:	e784      	b.n	8026236 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802632c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802632e:	3d01      	subs	r5, #1
 8026330:	3702      	adds	r7, #2
 8026332:	441c      	add	r4, r3
 8026334:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8026336:	441e      	add	r6, r3
 8026338:	e761      	b.n	80261fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802633a:	d01d      	beq.n	8026378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802633c:	1e6b      	subs	r3, r5, #1
 802633e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026340:	fb00 4003 	mla	r0, r0, r3, r4
 8026344:	1400      	asrs	r0, r0, #16
 8026346:	f53f af74 	bmi.w	8026232 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802634a:	3901      	subs	r1, #1
 802634c:	4288      	cmp	r0, r1
 802634e:	f6bf af70 	bge.w	8026232 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026352:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026354:	fb01 6303 	mla	r3, r1, r3, r6
 8026358:	141b      	asrs	r3, r3, #16
 802635a:	f53f af6a 	bmi.w	8026232 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802635e:	3a01      	subs	r2, #1
 8026360:	4293      	cmp	r3, r2
 8026362:	f6bf af66 	bge.w	8026232 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026366:	46a9      	mov	r9, r5
 8026368:	46ba      	mov	sl, r7
 802636a:	f1b9 0f00 	cmp.w	r9, #0
 802636e:	dc5b      	bgt.n	8026428 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8026370:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026374:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8026378:	9b07      	ldr	r3, [sp, #28]
 802637a:	2b00      	cmp	r3, #0
 802637c:	f340 80b9 	ble.w	80264f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8026380:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026384:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026386:	ee30 0a04 	vadd.f32	s0, s0, s8
 802638a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802638e:	eef0 6a62 	vmov.f32	s13, s5
 8026392:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026396:	ee31 1a05 	vadd.f32	s2, s2, s10
 802639a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802639e:	ee16 4a90 	vmov	r4, s13
 80263a2:	eef0 6a43 	vmov.f32	s13, s6
 80263a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80263aa:	ee16 6a90 	vmov	r6, s13
 80263ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80263b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80263b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80263ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80263be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80263c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80263c6:	ee12 2a90 	vmov	r2, s5
 80263ca:	eef0 2a47 	vmov.f32	s5, s14
 80263ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80263d2:	ee13 2a10 	vmov	r2, s6
 80263d6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80263d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80263da:	eeb0 3a67 	vmov.f32	s6, s15
 80263de:	fb92 f3f3 	sdiv	r3, r2, r3
 80263e2:	931c      	str	r3, [sp, #112]	@ 0x70
 80263e4:	9b07      	ldr	r3, [sp, #28]
 80263e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80263e8:	3b01      	subs	r3, #1
 80263ea:	9307      	str	r3, [sp, #28]
 80263ec:	bf08      	it	eq
 80263ee:	4615      	moveq	r5, r2
 80263f0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80263f2:	bf18      	it	ne
 80263f4:	461d      	movne	r5, r3
 80263f6:	e6f3      	b.n	80261e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80263f8:	f111 0b01 	adds.w	fp, r1, #1
 80263fc:	d48d      	bmi.n	802631a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80263fe:	45de      	cmp	lr, fp
 8026400:	db8b      	blt.n	802631a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026402:	f110 0b01 	adds.w	fp, r0, #1
 8026406:	d488      	bmi.n	802631a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026408:	455b      	cmp	r3, fp
 802640a:	db86      	blt.n	802631a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802640c:	b21b      	sxth	r3, r3
 802640e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8026412:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8026416:	9300      	str	r3, [sp, #0]
 8026418:	4642      	mov	r2, r8
 802641a:	fa0f f38e 	sxth.w	r3, lr
 802641e:	4649      	mov	r1, r9
 8026420:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8026422:	f7ff fe4c 	bl	80260be <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8026426:	e778      	b.n	802631a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026428:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802642a:	1420      	asrs	r0, r4, #16
 802642c:	1431      	asrs	r1, r6, #16
 802642e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026432:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8026436:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802643a:	fb03 0101 	mla	r1, r3, r1, r0
 802643e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026442:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8026446:	8841      	ldrh	r1, [r0, #2]
 8026448:	f1be 0f00 	cmp.w	lr, #0
 802644c:	d00b      	beq.n	8026466 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802644e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8026452:	3b01      	subs	r3, #1
 8026454:	005b      	lsls	r3, r3, #1
 8026456:	3302      	adds	r3, #2
 8026458:	eb00 0b03 	add.w	fp, r0, r3
 802645c:	5ac3      	ldrh	r3, [r0, r3]
 802645e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026460:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026464:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026466:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802646a:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802646e:	fb12 f30e 	smulbb	r3, r2, lr
 8026472:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026476:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802647a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802647e:	10db      	asrs	r3, r3, #3
 8026480:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026484:	ea40 000c 	orr.w	r0, r0, ip
 8026488:	f1ce 0c10 	rsb	ip, lr, #16
 802648c:	ea4b 0101 	orr.w	r1, fp, r1
 8026490:	f109 39ff 	add.w	r9, r9, #4294967295
 8026494:	ebac 0c02 	sub.w	ip, ip, r2
 8026498:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802649c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80264a0:	4351      	muls	r1, r2
 80264a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80264a4:	fb0c 1c00 	mla	ip, ip, r0, r1
 80264a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80264aa:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80264ae:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 80264b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80264b4:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80264b8:	0412      	lsls	r2, r2, #16
 80264ba:	ea4b 0000 	orr.w	r0, fp, r0
 80264be:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 80264c2:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80264c6:	fb03 c000 	mla	r0, r3, r0, ip
 80264ca:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80264ce:	ea42 0b0b 	orr.w	fp, r2, fp
 80264d2:	fb03 000b 	mla	r0, r3, fp, r0
 80264d6:	0d43      	lsrs	r3, r0, #21
 80264d8:	0940      	lsrs	r0, r0, #5
 80264da:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80264de:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80264e2:	4318      	orrs	r0, r3
 80264e4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80264e6:	441c      	add	r4, r3
 80264e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80264ea:	f82a 0b02 	strh.w	r0, [sl], #2
 80264ee:	441e      	add	r6, r3
 80264f0:	e73b      	b.n	802636a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80264f2:	b00f      	add	sp, #60	@ 0x3c
 80264f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080264f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80264f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264fc:	b085      	sub	sp, #20
 80264fe:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8026502:	9102      	str	r1, [sp, #8]
 8026504:	2c00      	cmp	r4, #0
 8026506:	fb04 7103 	mla	r1, r4, r3, r7
 802650a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 802650e:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8026512:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8026516:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802651a:	f2c0 811b 	blt.w	8026754 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802651e:	45a6      	cmp	lr, r4
 8026520:	f340 8118 	ble.w	8026754 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8026524:	2f00      	cmp	r7, #0
 8026526:	f2c0 8113 	blt.w	8026750 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802652a:	42bb      	cmp	r3, r7
 802652c:	f340 8110 	ble.w	8026750 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8026530:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8026534:	1c7a      	adds	r2, r7, #1
 8026536:	f100 8110 	bmi.w	802675a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802653a:	4293      	cmp	r3, r2
 802653c:	f340 810d 	ble.w	802675a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8026540:	2e00      	cmp	r6, #0
 8026542:	f000 810c 	beq.w	802675e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8026546:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802654a:	3401      	adds	r4, #1
 802654c:	f100 810b 	bmi.w	8026766 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026550:	45a6      	cmp	lr, r4
 8026552:	f340 8108 	ble.w	8026766 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026556:	2800      	cmp	r0, #0
 8026558:	f000 8108 	beq.w	802676c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 802655c:	2f00      	cmp	r7, #0
 802655e:	f2c0 8100 	blt.w	8026762 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026562:	42bb      	cmp	r3, r7
 8026564:	f340 80fd 	ble.w	8026762 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026568:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802656c:	3701      	adds	r7, #1
 802656e:	f100 8100 	bmi.w	8026772 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026572:	42bb      	cmp	r3, r7
 8026574:	f340 80fd 	ble.w	8026772 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026578:	2e00      	cmp	r6, #0
 802657a:	f000 80fc 	beq.w	8026776 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802657e:	3301      	adds	r3, #1
 8026580:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026584:	b2b6      	uxth	r6, r6
 8026586:	b280      	uxth	r0, r0
 8026588:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802658c:	fb00 fe06 	mul.w	lr, r0, r6
 8026590:	0136      	lsls	r6, r6, #4
 8026592:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026596:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802659a:	eba6 070e 	sub.w	r7, r6, lr
 802659e:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 80265a2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80265a6:	b280      	uxth	r0, r0
 80265a8:	b2bf      	uxth	r7, r7
 80265aa:	1a1b      	subs	r3, r3, r0
 80265ac:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80265b0:	fb0a f607 	mul.w	r6, sl, r7
 80265b4:	b29b      	uxth	r3, r3
 80265b6:	fb0b 6603 	mla	r6, fp, r3, r6
 80265ba:	fb00 6609 	mla	r6, r0, r9, r6
 80265be:	fb0e 6608 	mla	r6, lr, r8, r6
 80265c2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80265c6:	9600      	str	r6, [sp, #0]
 80265c8:	2e00      	cmp	r6, #0
 80265ca:	f000 80be 	beq.w	802674a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80265ce:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80265d2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80265d6:	9e02      	ldr	r6, [sp, #8]
 80265d8:	fb0b fc0c 	mul.w	ip, fp, ip
 80265dc:	fb0b f505 	mul.w	r5, fp, r5
 80265e0:	8836      	ldrh	r6, [r6, #0]
 80265e2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80265e6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80265ea:	9501      	str	r5, [sp, #4]
 80265ec:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80265f0:	44dc      	add	ip, fp
 80265f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265f6:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80265fa:	9503      	str	r5, [sp, #12]
 80265fc:	9d01      	ldr	r5, [sp, #4]
 80265fe:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8026602:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026606:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802660a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802660e:	fb0a fc0c 	mul.w	ip, sl, ip
 8026612:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026616:	fb0a fa01 	mul.w	sl, sl, r1
 802661a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802661e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026622:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8026626:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802662a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802662e:	4465      	add	r5, ip
 8026630:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026634:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026638:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802663c:	fb09 fc0c 	mul.w	ip, r9, ip
 8026640:	0a2d      	lsrs	r5, r5, #8
 8026642:	fb09 f904 	mul.w	r9, r9, r4
 8026646:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802664a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802664e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026652:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8026656:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802665a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802665e:	437d      	muls	r5, r7
 8026660:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026664:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8026668:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802666c:	4461      	add	r1, ip
 802666e:	fb08 f404 	mul.w	r4, r8, r4
 8026672:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026676:	fb08 f802 	mul.w	r8, r8, r2
 802667a:	0a09      	lsrs	r1, r1, #8
 802667c:	0a22      	lsrs	r2, r4, #8
 802667e:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8026682:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8026686:	fb07 f70a 	mul.w	r7, r7, sl
 802668a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802668e:	4414      	add	r4, r2
 8026690:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8026694:	0a24      	lsrs	r4, r4, #8
 8026696:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802669a:	9a03      	ldr	r2, [sp, #12]
 802669c:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80266a0:	fb02 5503 	mla	r5, r2, r3, r5
 80266a4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80266a8:	9a00      	ldr	r2, [sp, #0]
 80266aa:	fb04 540e 	mla	r4, r4, lr, r5
 80266ae:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80266b2:	1235      	asrs	r5, r6, #8
 80266b4:	fb01 4100 	mla	r1, r1, r0, r4
 80266b8:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80266bc:	0a09      	lsrs	r1, r1, #8
 80266be:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 80266c2:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 80266c6:	fb03 7101 	mla	r1, r3, r1, r7
 80266ca:	fb0e 1e08 	mla	lr, lr, r8, r1
 80266ce:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 80266d2:	fb00 e101 	mla	r1, r0, r1, lr
 80266d6:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80266da:	b287      	uxth	r7, r0
 80266dc:	0a09      	lsrs	r1, r1, #8
 80266de:	437a      	muls	r2, r7
 80266e0:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80266e4:	1c53      	adds	r3, r2, #1
 80266e6:	4321      	orrs	r1, r4
 80266e8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80266ec:	0c0a      	lsrs	r2, r1, #16
 80266ee:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80266f2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80266f6:	b2c8      	uxtb	r0, r1
 80266f8:	fb12 f207 	smulbb	r2, r2, r7
 80266fc:	fb14 f407 	smulbb	r4, r4, r7
 8026700:	b2db      	uxtb	r3, r3
 8026702:	fb10 f007 	smulbb	r0, r0, r7
 8026706:	fb05 2503 	mla	r5, r5, r3, r2
 802670a:	10f2      	asrs	r2, r6, #3
 802670c:	00f6      	lsls	r6, r6, #3
 802670e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8026712:	b2ad      	uxth	r5, r5
 8026714:	b2f6      	uxtb	r6, r6
 8026716:	fb02 4203 	mla	r2, r2, r3, r4
 802671a:	fb06 0303 	mla	r3, r6, r3, r0
 802671e:	b294      	uxth	r4, r2
 8026720:	b299      	uxth	r1, r3
 8026722:	1c6b      	adds	r3, r5, #1
 8026724:	1c62      	adds	r2, r4, #1
 8026726:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802672a:	1c4b      	adds	r3, r1, #1
 802672c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026730:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026734:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026738:	0952      	lsrs	r2, r2, #5
 802673a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802673e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026742:	432b      	orrs	r3, r5
 8026744:	4313      	orrs	r3, r2
 8026746:	9a02      	ldr	r2, [sp, #8]
 8026748:	8013      	strh	r3, [r2, #0]
 802674a:	b005      	add	sp, #20
 802674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026750:	2500      	movs	r5, #0
 8026752:	e6ef      	b.n	8026534 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8026754:	2100      	movs	r1, #0
 8026756:	460d      	mov	r5, r1
 8026758:	e6f7      	b.n	802654a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802675a:	2100      	movs	r1, #0
 802675c:	e6f5      	b.n	802654a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802675e:	4631      	mov	r1, r6
 8026760:	e6f3      	b.n	802654a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026762:	2400      	movs	r4, #0
 8026764:	e702      	b.n	802656c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8026766:	2200      	movs	r2, #0
 8026768:	4614      	mov	r4, r2
 802676a:	e70b      	b.n	8026584 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802676c:	4602      	mov	r2, r0
 802676e:	4604      	mov	r4, r0
 8026770:	e708      	b.n	8026584 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026772:	2200      	movs	r2, #0
 8026774:	e706      	b.n	8026584 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026776:	4632      	mov	r2, r6
 8026778:	e704      	b.n	8026584 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802677a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802677a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802677e:	b09d      	sub	sp, #116	@ 0x74
 8026780:	9219      	str	r2, [sp, #100]	@ 0x64
 8026782:	9307      	str	r3, [sp, #28]
 8026784:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8026786:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 802678a:	901b      	str	r0, [sp, #108]	@ 0x6c
 802678c:	931a      	str	r3, [sp, #104]	@ 0x68
 802678e:	6850      	ldr	r0, [r2, #4]
 8026790:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026792:	6812      	ldr	r2, [r2, #0]
 8026794:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8026798:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 802679c:	fb00 1303 	mla	r3, r0, r3, r1
 80267a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80267a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80267a6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80267a8:	681b      	ldr	r3, [r3, #0]
 80267aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80267ac:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80267b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80267b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80267b4:	2b00      	cmp	r3, #0
 80267b6:	dc03      	bgt.n	80267c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80267b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80267ba:	2b00      	cmp	r3, #0
 80267bc:	f340 8375 	ble.w	8026eaa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80267c0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80267c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80267c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80267ca:	1e48      	subs	r0, r1, #1
 80267cc:	1e57      	subs	r7, r2, #1
 80267ce:	9b07      	ldr	r3, [sp, #28]
 80267d0:	2b00      	cmp	r3, #0
 80267d2:	f340 818e 	ble.w	8026af2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80267d6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80267da:	ea4f 4326 	mov.w	r3, r6, asr #16
 80267de:	d406      	bmi.n	80267ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80267e0:	4584      	cmp	ip, r0
 80267e2:	da04      	bge.n	80267ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80267e4:	2b00      	cmp	r3, #0
 80267e6:	db02      	blt.n	80267ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80267e8:	42bb      	cmp	r3, r7
 80267ea:	f2c0 8183 	blt.w	8026af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80267ee:	f11c 0c01 	adds.w	ip, ip, #1
 80267f2:	f100 8173 	bmi.w	8026adc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80267f6:	4561      	cmp	r1, ip
 80267f8:	f2c0 8170 	blt.w	8026adc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80267fc:	3301      	adds	r3, #1
 80267fe:	f100 816d 	bmi.w	8026adc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026802:	429a      	cmp	r2, r3
 8026804:	f2c0 816a 	blt.w	8026adc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026808:	9b07      	ldr	r3, [sp, #28]
 802680a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802680c:	9318      	str	r3, [sp, #96]	@ 0x60
 802680e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026810:	2b00      	cmp	r3, #0
 8026812:	f340 818c 	ble.w	8026b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8026816:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8026818:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802681c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802681e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026822:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026826:	1422      	asrs	r2, r4, #16
 8026828:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802682c:	689b      	ldr	r3, [r3, #8]
 802682e:	f100 81cd 	bmi.w	8026bcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026832:	f103 38ff 	add.w	r8, r3, #4294967295
 8026836:	4542      	cmp	r2, r8
 8026838:	f280 81c8 	bge.w	8026bcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802683c:	f1bc 0f00 	cmp.w	ip, #0
 8026840:	f2c0 81c4 	blt.w	8026bcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026844:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026848:	45c4      	cmp	ip, r8
 802684a:	f280 81bf 	bge.w	8026bcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802684e:	b21b      	sxth	r3, r3
 8026850:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8026852:	fb0c 2203 	mla	r2, ip, r3, r2
 8026856:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802685a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802685e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026862:	2800      	cmp	r0, #0
 8026864:	f000 81a9 	beq.w	8026bba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8026868:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802686c:	950c      	str	r5, [sp, #48]	@ 0x30
 802686e:	0e2d      	lsrs	r5, r5, #24
 8026870:	9513      	str	r5, [sp, #76]	@ 0x4c
 8026872:	b181      	cbz	r1, 8026896 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8026878:	3b01      	subs	r3, #1
 802687a:	009b      	lsls	r3, r3, #2
 802687c:	3304      	adds	r3, #4
 802687e:	eb08 0c03 	add.w	ip, r8, r3
 8026882:	f858 3003 	ldr.w	r3, [r8, r3]
 8026886:	9308      	str	r3, [sp, #32]
 8026888:	0e1b      	lsrs	r3, r3, #24
 802688a:	9311      	str	r3, [sp, #68]	@ 0x44
 802688c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026890:	930d      	str	r3, [sp, #52]	@ 0x34
 8026892:	0e1b      	lsrs	r3, r3, #24
 8026894:	9314      	str	r3, [sp, #80]	@ 0x50
 8026896:	b280      	uxth	r0, r0
 8026898:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802689a:	b289      	uxth	r1, r1
 802689c:	fb00 f901 	mul.w	r9, r0, r1
 80268a0:	0100      	lsls	r0, r0, #4
 80268a2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80268a6:	eba0 0809 	sub.w	r8, r0, r9
 80268aa:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80268ae:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80268b0:	b289      	uxth	r1, r1
 80268b2:	fa1f f888 	uxth.w	r8, r8
 80268b6:	1a5b      	subs	r3, r3, r1
 80268b8:	fb08 f000 	mul.w	r0, r8, r0
 80268bc:	b29b      	uxth	r3, r3
 80268be:	fb03 000e 	mla	r0, r3, lr, r0
 80268c2:	fb01 0005 	mla	r0, r1, r5, r0
 80268c6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80268c8:	fb09 0005 	mla	r0, r9, r5, r0
 80268cc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80268d0:	2800      	cmp	r0, #0
 80268d2:	f000 80fa 	beq.w	8026aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80268d6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80268da:	d01b      	beq.n	8026914 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80268dc:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80268e0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80268e4:	fb0e fa0a 	mul.w	sl, lr, sl
 80268e8:	fb0e fe02 	mul.w	lr, lr, r2
 80268ec:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80268f0:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80268f4:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80268f8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80268fc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026900:	4452      	add	r2, sl
 8026902:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026906:	0a12      	lsrs	r2, r2, #8
 8026908:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802690c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026910:	ea42 020c 	orr.w	r2, r2, ip
 8026914:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026916:	2dff      	cmp	r5, #255	@ 0xff
 8026918:	d021      	beq.n	802695e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802691a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802691c:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8026920:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8026922:	fb05 fb0b 	mul.w	fp, r5, fp
 8026926:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8026928:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802692c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802692e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026932:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026936:	fb05 fa0a 	mul.w	sl, r5, sl
 802693a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802693e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026942:	44de      	add	lr, fp
 8026944:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026948:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802694c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026950:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026954:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026958:	ea4e 050a 	orr.w	r5, lr, sl
 802695c:	950c      	str	r5, [sp, #48]	@ 0x30
 802695e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026960:	2dff      	cmp	r5, #255	@ 0xff
 8026962:	d021      	beq.n	80269a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026964:	9d08      	ldr	r5, [sp, #32]
 8026966:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802696a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802696c:	fb05 fb0b 	mul.w	fp, r5, fp
 8026970:	9d08      	ldr	r5, [sp, #32]
 8026972:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026976:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026978:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802697c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026980:	fb05 fa0a 	mul.w	sl, r5, sl
 8026984:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026988:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802698c:	44de      	add	lr, fp
 802698e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026992:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026996:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802699a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802699e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80269a2:	ea4e 050a 	orr.w	r5, lr, sl
 80269a6:	9508      	str	r5, [sp, #32]
 80269a8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80269aa:	2dff      	cmp	r5, #255	@ 0xff
 80269ac:	d021      	beq.n	80269f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80269ae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80269b0:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80269b4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80269b6:	fb05 fb0b 	mul.w	fp, r5, fp
 80269ba:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80269bc:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80269c0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80269c2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80269c6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80269ca:	fb05 fa0a 	mul.w	sl, r5, sl
 80269ce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80269d2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80269d6:	44de      	add	lr, fp
 80269d8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80269dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80269e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80269e4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80269e8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80269ec:	ea4e 050a 	orr.w	r5, lr, sl
 80269f0:	950d      	str	r5, [sp, #52]	@ 0x34
 80269f2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80269f4:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80269f8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80269fc:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026a00:	9d08      	ldr	r5, [sp, #32]
 8026a02:	fb08 fc0c 	mul.w	ip, r8, ip
 8026a06:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026a0a:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8026a0e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026a10:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026a14:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8026a18:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8026a1a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026a1e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8026a22:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8026a24:	fb08 f80e 	mul.w	r8, r8, lr
 8026a28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a2c:	fb03 8202 	mla	r2, r3, r2, r8
 8026a30:	9b08      	ldr	r3, [sp, #32]
 8026a32:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026a36:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8026a3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026a3c:	fb01 220a 	mla	r2, r1, sl, r2
 8026a40:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8026a44:	883b      	ldrh	r3, [r7, #0]
 8026a46:	fb09 2901 	mla	r9, r9, r1, r2
 8026a4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026a4c:	1219      	asrs	r1, r3, #8
 8026a4e:	4342      	muls	r2, r0
 8026a50:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026a54:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8026a58:	1c50      	adds	r0, r2, #1
 8026a5a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026a5e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026a62:	ea4c 0c09 	orr.w	ip, ip, r9
 8026a66:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026a6a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8026a6e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026a72:	fa5f fc8c 	uxtb.w	ip, ip
 8026a76:	fb12 f205 	smulbb	r2, r2, r5
 8026a7a:	b2c0      	uxtb	r0, r0
 8026a7c:	fb1c fc05 	smulbb	ip, ip, r5
 8026a80:	fb01 2100 	mla	r1, r1, r0, r2
 8026a84:	10da      	asrs	r2, r3, #3
 8026a86:	fb1e fe05 	smulbb	lr, lr, r5
 8026a8a:	00db      	lsls	r3, r3, #3
 8026a8c:	b289      	uxth	r1, r1
 8026a8e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8026a92:	b2db      	uxtb	r3, r3
 8026a94:	fb02 e200 	mla	r2, r2, r0, lr
 8026a98:	fb03 c300 	mla	r3, r3, r0, ip
 8026a9c:	b292      	uxth	r2, r2
 8026a9e:	fa1f fc83 	uxth.w	ip, r3
 8026aa2:	1c4b      	adds	r3, r1, #1
 8026aa4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026aa8:	f10c 0301 	add.w	r3, ip, #1
 8026aac:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026ab0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8026ab4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026ab8:	430b      	orrs	r3, r1
 8026aba:	1c51      	adds	r1, r2, #1
 8026abc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026ac0:	0952      	lsrs	r2, r2, #5
 8026ac2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026ac6:	4313      	orrs	r3, r2
 8026ac8:	803b      	strh	r3, [r7, #0]
 8026aca:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026acc:	3702      	adds	r7, #2
 8026ace:	441c      	add	r4, r3
 8026ad0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026ad2:	441e      	add	r6, r3
 8026ad4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026ad6:	3b01      	subs	r3, #1
 8026ad8:	9318      	str	r3, [sp, #96]	@ 0x60
 8026ada:	e698      	b.n	802680e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026adc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026ade:	441c      	add	r4, r3
 8026ae0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026ae2:	441e      	add	r6, r3
 8026ae4:	9b07      	ldr	r3, [sp, #28]
 8026ae6:	3b01      	subs	r3, #1
 8026ae8:	9307      	str	r3, [sp, #28]
 8026aea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026aec:	3302      	adds	r3, #2
 8026aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8026af0:	e66d      	b.n	80267ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8026af2:	d023      	beq.n	8026b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8026af4:	9b07      	ldr	r3, [sp, #28]
 8026af6:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8026af8:	3b01      	subs	r3, #1
 8026afa:	fb00 4003 	mla	r0, r0, r3, r4
 8026afe:	1400      	asrs	r0, r0, #16
 8026b00:	f53f ae82 	bmi.w	8026808 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026b04:	3901      	subs	r1, #1
 8026b06:	4288      	cmp	r0, r1
 8026b08:	f6bf ae7e 	bge.w	8026808 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026b0c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8026b0e:	fb01 6303 	mla	r3, r1, r3, r6
 8026b12:	141b      	asrs	r3, r3, #16
 8026b14:	f53f ae78 	bmi.w	8026808 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026b18:	3a01      	subs	r2, #1
 8026b1a:	4293      	cmp	r3, r2
 8026b1c:	f6bf ae74 	bge.w	8026808 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026b20:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026b24:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8026b28:	f1bb 0f00 	cmp.w	fp, #0
 8026b2c:	dc6c      	bgt.n	8026c08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8026b2e:	9b07      	ldr	r3, [sp, #28]
 8026b30:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026b36:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026b3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8026b3c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026b3e:	2b00      	cmp	r3, #0
 8026b40:	f340 81b3 	ble.w	8026eaa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8026b44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026b48:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026b4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026b4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026b52:	eef0 6a62 	vmov.f32	s13, s5
 8026b56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026b5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026b5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b62:	ee16 4a90 	vmov	r4, s13
 8026b66:	eef0 6a43 	vmov.f32	s13, s6
 8026b6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b6e:	ee16 6a90 	vmov	r6, s13
 8026b72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026b76:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026b7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026b7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026b82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026b86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026b8a:	ee12 2a90 	vmov	r2, s5
 8026b8e:	eef0 2a47 	vmov.f32	s5, s14
 8026b92:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b96:	ee13 2a10 	vmov	r2, s6
 8026b9a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8026b9c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026b9e:	eeb0 3a67 	vmov.f32	s6, s15
 8026ba2:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ba6:	932a      	str	r3, [sp, #168]	@ 0xa8
 8026ba8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026baa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8026bac:	3b01      	subs	r3, #1
 8026bae:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026bb0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026bb2:	bf08      	it	eq
 8026bb4:	4613      	moveq	r3, r2
 8026bb6:	9307      	str	r3, [sp, #28]
 8026bb8:	e5fb      	b.n	80267b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8026bba:	2900      	cmp	r1, #0
 8026bbc:	f43f ae6b 	beq.w	8026896 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026bc0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026bc4:	9308      	str	r3, [sp, #32]
 8026bc6:	0e1b      	lsrs	r3, r3, #24
 8026bc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8026bca:	e664      	b.n	8026896 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026bcc:	f112 0801 	adds.w	r8, r2, #1
 8026bd0:	f53f af7b 	bmi.w	8026aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026bd4:	4543      	cmp	r3, r8
 8026bd6:	f6ff af78 	blt.w	8026aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026bda:	f11c 0801 	adds.w	r8, ip, #1
 8026bde:	f53f af74 	bmi.w	8026aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026be2:	45c6      	cmp	lr, r8
 8026be4:	f6ff af71 	blt.w	8026aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026be8:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8026bea:	b21b      	sxth	r3, r3
 8026bec:	9201      	str	r2, [sp, #4]
 8026bee:	fa0f f28e 	sxth.w	r2, lr
 8026bf2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8026bf6:	e9cd c002 	strd	ip, r0, [sp, #8]
 8026bfa:	9200      	str	r2, [sp, #0]
 8026bfc:	4639      	mov	r1, r7
 8026bfe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026c00:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026c02:	f7ff fc79 	bl	80264f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8026c06:	e760      	b.n	8026aca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026c08:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026c0a:	1427      	asrs	r7, r4, #16
 8026c0c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8026c0e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026c12:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c16:	1433      	asrs	r3, r6, #16
 8026c18:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026c1c:	fb01 7303 	mla	r3, r1, r3, r7
 8026c20:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8026c24:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8026c28:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026c2c:	2a00      	cmp	r2, #0
 8026c2e:	f000 8133 	beq.w	8026e98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8026c32:	687d      	ldr	r5, [r7, #4]
 8026c34:	950e      	str	r5, [sp, #56]	@ 0x38
 8026c36:	0e2d      	lsrs	r5, r5, #24
 8026c38:	9515      	str	r5, [sp, #84]	@ 0x54
 8026c3a:	b178      	cbz	r0, 8026c5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026c3c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8026c40:	3901      	subs	r1, #1
 8026c42:	0089      	lsls	r1, r1, #2
 8026c44:	3104      	adds	r1, #4
 8026c46:	eb07 0e01 	add.w	lr, r7, r1
 8026c4a:	5879      	ldr	r1, [r7, r1]
 8026c4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8026c4e:	0e09      	lsrs	r1, r1, #24
 8026c50:	9112      	str	r1, [sp, #72]	@ 0x48
 8026c52:	f8de 1004 	ldr.w	r1, [lr, #4]
 8026c56:	910f      	str	r1, [sp, #60]	@ 0x3c
 8026c58:	0e09      	lsrs	r1, r1, #24
 8026c5a:	9116      	str	r1, [sp, #88]	@ 0x58
 8026c5c:	b292      	uxth	r2, r2
 8026c5e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8026c60:	b280      	uxth	r0, r0
 8026c62:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026c64:	fb02 f800 	mul.w	r8, r2, r0
 8026c68:	0112      	lsls	r2, r2, #4
 8026c6a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026c6e:	eba2 0e08 	sub.w	lr, r2, r8
 8026c72:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8026c76:	b280      	uxth	r0, r0
 8026c78:	fa1f fe8e 	uxth.w	lr, lr
 8026c7c:	1a12      	subs	r2, r2, r0
 8026c7e:	fb0e f101 	mul.w	r1, lr, r1
 8026c82:	b292      	uxth	r2, r2
 8026c84:	fb02 110c 	mla	r1, r2, ip, r1
 8026c88:	fb00 1105 	mla	r1, r0, r5, r1
 8026c8c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026c8e:	fb08 1105 	mla	r1, r8, r5, r1
 8026c92:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026c96:	2900      	cmp	r1, #0
 8026c98:	f000 80f5 	beq.w	8026e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8026c9c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026ca0:	d019      	beq.n	8026cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8026ca2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026ca6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026caa:	fb0c fa0a 	mul.w	sl, ip, sl
 8026cae:	fb0c fc03 	mul.w	ip, ip, r3
 8026cb2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026cb6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026cba:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026cbe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026cc2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026cc6:	4453      	add	r3, sl
 8026cc8:	0a3f      	lsrs	r7, r7, #8
 8026cca:	0a1b      	lsrs	r3, r3, #8
 8026ccc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026cd0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026cd4:	433b      	orrs	r3, r7
 8026cd6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026cd8:	2dff      	cmp	r5, #255	@ 0xff
 8026cda:	d020      	beq.n	8026d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8026cdc:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026cde:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026ce2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026ce4:	436f      	muls	r7, r5
 8026ce6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026ce8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026cec:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026cf0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026cf2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026cf6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026cfa:	fb05 fa0a 	mul.w	sl, r5, sl
 8026cfe:	44bc      	add	ip, r7
 8026d00:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026d04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d08:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026d0c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026d10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026d14:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026d18:	ea4c 050a 	orr.w	r5, ip, sl
 8026d1c:	950e      	str	r5, [sp, #56]	@ 0x38
 8026d1e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026d20:	2dff      	cmp	r5, #255	@ 0xff
 8026d22:	d020      	beq.n	8026d66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8026d24:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026d26:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026d2a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026d2c:	436f      	muls	r7, r5
 8026d2e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026d30:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026d34:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026d38:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026d3a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026d3e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026d42:	fb05 fa0a 	mul.w	sl, r5, sl
 8026d46:	44bc      	add	ip, r7
 8026d48:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026d4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d50:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026d54:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026d58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026d5c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026d60:	ea4c 050a 	orr.w	r5, ip, sl
 8026d64:	9509      	str	r5, [sp, #36]	@ 0x24
 8026d66:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026d68:	2dff      	cmp	r5, #255	@ 0xff
 8026d6a:	d020      	beq.n	8026dae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8026d6c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026d6e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026d72:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026d74:	436f      	muls	r7, r5
 8026d76:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026d78:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026d7c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026d80:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026d82:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026d86:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026d8a:	fb05 fa0a 	mul.w	sl, r5, sl
 8026d8e:	44bc      	add	ip, r7
 8026d90:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026d94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d98:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026d9c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026da0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026da4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026da8:	ea4c 050a 	orr.w	r5, ip, sl
 8026dac:	950f      	str	r5, [sp, #60]	@ 0x3c
 8026dae:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026db0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026db4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026db8:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026dbc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026dbe:	fb0e f707 	mul.w	r7, lr, r7
 8026dc2:	fb02 770c 	mla	r7, r2, ip, r7
 8026dc6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026dca:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026dcc:	fb00 770c 	mla	r7, r0, ip, r7
 8026dd0:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026dd4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026dd6:	fb08 770c 	mla	r7, r8, ip, r7
 8026dda:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8026dde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8026de0:	fb0e fe0c 	mul.w	lr, lr, ip
 8026de4:	0a3f      	lsrs	r7, r7, #8
 8026de6:	fb02 e303 	mla	r3, r2, r3, lr
 8026dea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026dec:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026df0:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8026df4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026df6:	fb00 330a 	mla	r3, r0, sl, r3
 8026dfa:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8026dfe:	f8b9 0000 	ldrh.w	r0, [r9]
 8026e02:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026e08:	1202      	asrs	r2, r0, #8
 8026e0a:	4359      	muls	r1, r3
 8026e0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e10:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8026e14:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026e18:	1c4b      	adds	r3, r1, #1
 8026e1a:	ea47 070c 	orr.w	r7, r7, ip
 8026e1e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026e22:	0c3b      	lsrs	r3, r7, #16
 8026e24:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026e28:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026e2c:	b2ff      	uxtb	r7, r7
 8026e2e:	fb13 f305 	smulbb	r3, r3, r5
 8026e32:	b2c9      	uxtb	r1, r1
 8026e34:	fb17 f705 	smulbb	r7, r7, r5
 8026e38:	fb02 3201 	mla	r2, r2, r1, r3
 8026e3c:	10c3      	asrs	r3, r0, #3
 8026e3e:	fb1c fc05 	smulbb	ip, ip, r5
 8026e42:	00c0      	lsls	r0, r0, #3
 8026e44:	b292      	uxth	r2, r2
 8026e46:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026e4a:	b2c0      	uxtb	r0, r0
 8026e4c:	fb03 c301 	mla	r3, r3, r1, ip
 8026e50:	fb00 7001 	mla	r0, r0, r1, r7
 8026e54:	1c51      	adds	r1, r2, #1
 8026e56:	b29b      	uxth	r3, r3
 8026e58:	b280      	uxth	r0, r0
 8026e5a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026e5e:	f100 0c01 	add.w	ip, r0, #1
 8026e62:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8026e66:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8026e6a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8026e6e:	ea4c 0202 	orr.w	r2, ip, r2
 8026e72:	f103 0c01 	add.w	ip, r3, #1
 8026e76:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026e7a:	095b      	lsrs	r3, r3, #5
 8026e7c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026e80:	431a      	orrs	r2, r3
 8026e82:	f8a9 2000 	strh.w	r2, [r9]
 8026e86:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026e88:	f109 0902 	add.w	r9, r9, #2
 8026e8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026e90:	441c      	add	r4, r3
 8026e92:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026e94:	441e      	add	r6, r3
 8026e96:	e647      	b.n	8026b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026e98:	2800      	cmp	r0, #0
 8026e9a:	f43f aedf 	beq.w	8026c5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026e9e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8026ea2:	9109      	str	r1, [sp, #36]	@ 0x24
 8026ea4:	0e09      	lsrs	r1, r1, #24
 8026ea6:	9112      	str	r1, [sp, #72]	@ 0x48
 8026ea8:	e6d8      	b.n	8026c5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026eaa:	b01d      	add	sp, #116	@ 0x74
 8026eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026eb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8026eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026eb4:	b085      	sub	sp, #20
 8026eb6:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8026eba:	9102      	str	r1, [sp, #8]
 8026ebc:	2c00      	cmp	r4, #0
 8026ebe:	fb04 7103 	mla	r1, r4, r3, r7
 8026ec2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8026ec6:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8026eca:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8026ece:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8026ed2:	f2c0 810c 	blt.w	80270ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8026ed6:	45a6      	cmp	lr, r4
 8026ed8:	f340 8109 	ble.w	80270ee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8026edc:	2f00      	cmp	r7, #0
 8026ede:	f2c0 8104 	blt.w	80270ea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8026ee2:	42bb      	cmp	r3, r7
 8026ee4:	f340 8101 	ble.w	80270ea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8026ee8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8026eec:	1c7a      	adds	r2, r7, #1
 8026eee:	f100 8101 	bmi.w	80270f4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8026ef2:	4293      	cmp	r3, r2
 8026ef4:	f340 80fe 	ble.w	80270f4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8026ef8:	2e00      	cmp	r6, #0
 8026efa:	f000 80fd 	beq.w	80270f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8026efe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8026f02:	3401      	adds	r4, #1
 8026f04:	f100 80fc 	bmi.w	8027100 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8026f08:	45a6      	cmp	lr, r4
 8026f0a:	f340 80f9 	ble.w	8027100 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8026f0e:	2800      	cmp	r0, #0
 8026f10:	f000 80f9 	beq.w	8027106 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8026f14:	2f00      	cmp	r7, #0
 8026f16:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8026f1a:	f2c0 80ef 	blt.w	80270fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8026f1e:	42bb      	cmp	r3, r7
 8026f20:	f340 80ec 	ble.w	80270fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8026f24:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026f28:	3701      	adds	r7, #1
 8026f2a:	f100 80ef 	bmi.w	802710c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8026f2e:	42bb      	cmp	r3, r7
 8026f30:	f340 80ec 	ble.w	802710c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8026f34:	2e00      	cmp	r6, #0
 8026f36:	f000 80eb 	beq.w	8027110 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8026f3a:	6852      	ldr	r2, [r2, #4]
 8026f3c:	b2b6      	uxth	r6, r6
 8026f3e:	b280      	uxth	r0, r0
 8026f40:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026f44:	fb00 fe06 	mul.w	lr, r0, r6
 8026f48:	0136      	lsls	r6, r6, #4
 8026f4a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026f4e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8026f52:	eba6 070e 	sub.w	r7, r6, lr
 8026f56:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8026f5a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026f5e:	b280      	uxth	r0, r0
 8026f60:	b2bf      	uxth	r7, r7
 8026f62:	1a1b      	subs	r3, r3, r0
 8026f64:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026f68:	fb07 f60a 	mul.w	r6, r7, sl
 8026f6c:	b29b      	uxth	r3, r3
 8026f6e:	fb0b 6603 	mla	r6, fp, r3, r6
 8026f72:	fb00 6609 	mla	r6, r0, r9, r6
 8026f76:	fb0e 6608 	mla	r6, lr, r8, r6
 8026f7a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026f7e:	9600      	str	r6, [sp, #0]
 8026f80:	2e00      	cmp	r6, #0
 8026f82:	f000 80af 	beq.w	80270e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8026f86:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026f8a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026f8e:	9e02      	ldr	r6, [sp, #8]
 8026f90:	fb0b fc0c 	mul.w	ip, fp, ip
 8026f94:	fb0b f505 	mul.w	r5, fp, r5
 8026f98:	8836      	ldrh	r6, [r6, #0]
 8026f9a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026f9e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026fa2:	9501      	str	r5, [sp, #4]
 8026fa4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8026fa8:	44dc      	add	ip, fp
 8026faa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026fae:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8026fb2:	9503      	str	r5, [sp, #12]
 8026fb4:	9d01      	ldr	r5, [sp, #4]
 8026fb6:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8026fba:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026fbe:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8026fc2:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026fc6:	fb0a fc0c 	mul.w	ip, sl, ip
 8026fca:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026fce:	fb0a fa01 	mul.w	sl, sl, r1
 8026fd2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026fd6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026fda:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8026fde:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026fe2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8026fe6:	4465      	add	r5, ip
 8026fe8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026fec:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026ff0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ff4:	fb09 fc0c 	mul.w	ip, r9, ip
 8026ff8:	0a2d      	lsrs	r5, r5, #8
 8026ffa:	fb09 f904 	mul.w	r9, r9, r4
 8026ffe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027002:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8027006:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802700a:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802700e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8027012:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027016:	437d      	muls	r5, r7
 8027018:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802701c:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8027020:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027024:	4461      	add	r1, ip
 8027026:	fb08 f404 	mul.w	r4, r8, r4
 802702a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802702e:	fb08 f802 	mul.w	r8, r8, r2
 8027032:	0a09      	lsrs	r1, r1, #8
 8027034:	0a22      	lsrs	r2, r4, #8
 8027036:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802703a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802703e:	fb07 f70a 	mul.w	r7, r7, sl
 8027042:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027046:	4414      	add	r4, r2
 8027048:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802704c:	0a24      	lsrs	r4, r4, #8
 802704e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027052:	9a03      	ldr	r2, [sp, #12]
 8027054:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027058:	fb02 5503 	mla	r5, r2, r3, r5
 802705c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027060:	fb04 540e 	mla	r4, r4, lr, r5
 8027064:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8027068:	fb01 4100 	mla	r1, r1, r0, r4
 802706c:	0a09      	lsrs	r1, r1, #8
 802706e:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8027072:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8027076:	fb03 7101 	mla	r1, r3, r1, r7
 802707a:	9b00      	ldr	r3, [sp, #0]
 802707c:	fb0e 1e08 	mla	lr, lr, r8, r1
 8027080:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8027084:	43da      	mvns	r2, r3
 8027086:	1233      	asrs	r3, r6, #8
 8027088:	fb00 e101 	mla	r1, r0, r1, lr
 802708c:	10f0      	asrs	r0, r6, #3
 802708e:	b2d2      	uxtb	r2, r2
 8027090:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8027094:	0a09      	lsrs	r1, r1, #8
 8027096:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802709a:	00f6      	lsls	r6, r6, #3
 802709c:	4353      	muls	r3, r2
 802709e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80270a2:	4350      	muls	r0, r2
 80270a4:	b2f6      	uxtb	r6, r6
 80270a6:	4321      	orrs	r1, r4
 80270a8:	4356      	muls	r6, r2
 80270aa:	1c5a      	adds	r2, r3, #1
 80270ac:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80270b0:	0c0b      	lsrs	r3, r1, #16
 80270b2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80270b6:	1c42      	adds	r2, r0, #1
 80270b8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80270bc:	0a0a      	lsrs	r2, r1, #8
 80270be:	021b      	lsls	r3, r3, #8
 80270c0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80270c4:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80270c8:	00d2      	lsls	r2, r2, #3
 80270ca:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80270ce:	4313      	orrs	r3, r2
 80270d0:	1c72      	adds	r2, r6, #1
 80270d2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80270d6:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80270da:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80270de:	4319      	orrs	r1, r3
 80270e0:	9b02      	ldr	r3, [sp, #8]
 80270e2:	8019      	strh	r1, [r3, #0]
 80270e4:	b005      	add	sp, #20
 80270e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270ea:	2500      	movs	r5, #0
 80270ec:	e6fe      	b.n	8026eec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 80270ee:	2100      	movs	r1, #0
 80270f0:	460d      	mov	r5, r1
 80270f2:	e706      	b.n	8026f02 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80270f4:	2100      	movs	r1, #0
 80270f6:	e704      	b.n	8026f02 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80270f8:	4631      	mov	r1, r6
 80270fa:	e702      	b.n	8026f02 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 80270fc:	2400      	movs	r4, #0
 80270fe:	e713      	b.n	8026f28 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8027100:	2200      	movs	r2, #0
 8027102:	4614      	mov	r4, r2
 8027104:	e71a      	b.n	8026f3c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027106:	4602      	mov	r2, r0
 8027108:	4604      	mov	r4, r0
 802710a:	e717      	b.n	8026f3c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802710c:	2200      	movs	r2, #0
 802710e:	e715      	b.n	8026f3c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8027110:	4632      	mov	r2, r6
 8027112:	e713      	b.n	8026f3c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08027114 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027118:	b09b      	sub	sp, #108	@ 0x6c
 802711a:	9218      	str	r2, [sp, #96]	@ 0x60
 802711c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802711e:	9019      	str	r0, [sp, #100]	@ 0x64
 8027120:	9116      	str	r1, [sp, #88]	@ 0x58
 8027122:	6850      	ldr	r0, [r2, #4]
 8027124:	9307      	str	r3, [sp, #28]
 8027126:	6812      	ldr	r2, [r2, #0]
 8027128:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802712c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8027130:	fb00 1303 	mla	r3, r0, r3, r1
 8027134:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027138:	930a      	str	r3, [sp, #40]	@ 0x28
 802713a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802713c:	681b      	ldr	r3, [r3, #0]
 802713e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027140:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027142:	2b00      	cmp	r3, #0
 8027144:	dc03      	bgt.n	802714e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027146:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8027148:	2b00      	cmp	r3, #0
 802714a:	f340 8387 	ble.w	802785c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802714e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027150:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027154:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027158:	1e48      	subs	r0, r1, #1
 802715a:	1e57      	subs	r7, r2, #1
 802715c:	9b07      	ldr	r3, [sp, #28]
 802715e:	2b00      	cmp	r3, #0
 8027160:	f340 8166 	ble.w	8027430 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8027164:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027168:	ea4f 4326 	mov.w	r3, r6, asr #16
 802716c:	d406      	bmi.n	802717c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802716e:	4584      	cmp	ip, r0
 8027170:	da04      	bge.n	802717c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8027172:	2b00      	cmp	r3, #0
 8027174:	db02      	blt.n	802717c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8027176:	42bb      	cmp	r3, r7
 8027178:	f2c0 815b 	blt.w	8027432 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802717c:	f11c 0c01 	adds.w	ip, ip, #1
 8027180:	f100 814b 	bmi.w	802741a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027184:	4561      	cmp	r1, ip
 8027186:	f2c0 8148 	blt.w	802741a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802718a:	3301      	adds	r3, #1
 802718c:	f100 8145 	bmi.w	802741a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027190:	429a      	cmp	r2, r3
 8027192:	f2c0 8142 	blt.w	802741a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027196:	9b07      	ldr	r3, [sp, #28]
 8027198:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802719a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802719c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802719e:	2b00      	cmp	r3, #0
 80271a0:	f340 8165 	ble.w	802746e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80271a4:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 80271a6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80271aa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80271ac:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80271b0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80271b4:	1422      	asrs	r2, r4, #16
 80271b6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80271ba:	689b      	ldr	r3, [r3, #8]
 80271bc:	f100 81d5 	bmi.w	802756a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80271c0:	f103 38ff 	add.w	r8, r3, #4294967295
 80271c4:	4542      	cmp	r2, r8
 80271c6:	f280 81d0 	bge.w	802756a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80271ca:	f1bc 0f00 	cmp.w	ip, #0
 80271ce:	f2c0 81cc 	blt.w	802756a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80271d2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80271d6:	45c4      	cmp	ip, r8
 80271d8:	f280 81c7 	bge.w	802756a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 80271dc:	b21b      	sxth	r3, r3
 80271de:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80271e0:	fb0c 2203 	mla	r2, ip, r3, r2
 80271e4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80271e8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80271ec:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80271f0:	2900      	cmp	r1, #0
 80271f2:	f000 8182 	beq.w	80274fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80271f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80271fa:	950b      	str	r5, [sp, #44]	@ 0x2c
 80271fc:	0e2d      	lsrs	r5, r5, #24
 80271fe:	9512      	str	r5, [sp, #72]	@ 0x48
 8027200:	b180      	cbz	r0, 8027224 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027202:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8027206:	3b01      	subs	r3, #1
 8027208:	009b      	lsls	r3, r3, #2
 802720a:	3304      	adds	r3, #4
 802720c:	eb08 0c03 	add.w	ip, r8, r3
 8027210:	f858 3003 	ldr.w	r3, [r8, r3]
 8027214:	9308      	str	r3, [sp, #32]
 8027216:	0e1b      	lsrs	r3, r3, #24
 8027218:	9310      	str	r3, [sp, #64]	@ 0x40
 802721a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802721e:	930c      	str	r3, [sp, #48]	@ 0x30
 8027220:	0e1b      	lsrs	r3, r3, #24
 8027222:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027224:	b289      	uxth	r1, r1
 8027226:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027228:	b280      	uxth	r0, r0
 802722a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802722c:	fb01 f900 	mul.w	r9, r1, r0
 8027230:	0109      	lsls	r1, r1, #4
 8027232:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027236:	eba1 0809 	sub.w	r8, r1, r9
 802723a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802723e:	b280      	uxth	r0, r0
 8027240:	fa1f f888 	uxth.w	r8, r8
 8027244:	1a09      	subs	r1, r1, r0
 8027246:	fb08 f303 	mul.w	r3, r8, r3
 802724a:	b289      	uxth	r1, r1
 802724c:	fb01 330e 	mla	r3, r1, lr, r3
 8027250:	fb00 3305 	mla	r3, r0, r5, r3
 8027254:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027256:	fb09 3305 	mla	r3, r9, r5, r3
 802725a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802725e:	2b00      	cmp	r3, #0
 8027260:	f000 80d2 	beq.w	8027408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027264:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8027268:	d01b      	beq.n	80272a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802726a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802726e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027272:	fb0e fa0a 	mul.w	sl, lr, sl
 8027276:	fb0e fe02 	mul.w	lr, lr, r2
 802727a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802727e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027282:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8027286:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802728a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802728e:	4452      	add	r2, sl
 8027290:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027294:	0a12      	lsrs	r2, r2, #8
 8027296:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802729a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802729e:	ea42 020c 	orr.w	r2, r2, ip
 80272a2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80272a4:	2dff      	cmp	r5, #255	@ 0xff
 80272a6:	d021      	beq.n	80272ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80272a8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80272aa:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80272ae:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80272b0:	fb05 fb0b 	mul.w	fp, r5, fp
 80272b4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80272b6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80272ba:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80272bc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80272c0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80272c4:	fb05 fa0a 	mul.w	sl, r5, sl
 80272c8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80272cc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80272d0:	44de      	add	lr, fp
 80272d2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80272d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80272da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80272de:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80272e2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80272e6:	ea4e 050a 	orr.w	r5, lr, sl
 80272ea:	950b      	str	r5, [sp, #44]	@ 0x2c
 80272ec:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80272ee:	2dff      	cmp	r5, #255	@ 0xff
 80272f0:	d021      	beq.n	8027336 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80272f2:	9d08      	ldr	r5, [sp, #32]
 80272f4:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80272f8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80272fa:	fb05 fb0b 	mul.w	fp, r5, fp
 80272fe:	9d08      	ldr	r5, [sp, #32]
 8027300:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8027304:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027306:	fb05 fa0e 	mul.w	sl, r5, lr
 802730a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802730e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027312:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027316:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802731a:	44de      	add	lr, fp
 802731c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027320:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027324:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027328:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802732c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027330:	ea4e 050a 	orr.w	r5, lr, sl
 8027334:	9508      	str	r5, [sp, #32]
 8027336:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027338:	2dff      	cmp	r5, #255	@ 0xff
 802733a:	d021      	beq.n	8027380 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802733c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802733e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027342:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027344:	fb05 fb0b 	mul.w	fp, r5, fp
 8027348:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802734a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802734e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027350:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027354:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027358:	fb05 fa0a 	mul.w	sl, r5, sl
 802735c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027360:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027364:	44de      	add	lr, fp
 8027366:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802736a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802736e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027372:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027376:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802737a:	ea4e 050a 	orr.w	r5, lr, sl
 802737e:	950c      	str	r5, [sp, #48]	@ 0x30
 8027380:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027382:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8027386:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802738a:	2bff      	cmp	r3, #255	@ 0xff
 802738c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027390:	9d08      	ldr	r5, [sp, #32]
 8027392:	fb08 fc0c 	mul.w	ip, r8, ip
 8027396:	fb01 cc0e 	mla	ip, r1, lr, ip
 802739a:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802739e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80273a0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80273a4:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80273a8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80273aa:	fb09 cc0e 	mla	ip, r9, lr, ip
 80273ae:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80273b2:	fb08 f80e 	mul.w	r8, r8, lr
 80273b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273ba:	fb01 8202 	mla	r2, r1, r2, r8
 80273be:	9908      	ldr	r1, [sp, #32]
 80273c0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80273c4:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80273c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80273ca:	fb00 220a 	mla	r2, r0, sl, r2
 80273ce:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 80273d2:	fb09 2900 	mla	r9, r9, r0, r2
 80273d6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80273da:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80273de:	ea4c 0c09 	orr.w	ip, ip, r9
 80273e2:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80273e6:	f040 8091 	bne.w	802750c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80273ea:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80273ee:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80273f2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80273f6:	f022 0207 	bic.w	r2, r2, #7
 80273fa:	431a      	orrs	r2, r3
 80273fc:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8027400:	ea4c 0c02 	orr.w	ip, ip, r2
 8027404:	f8a7 c000 	strh.w	ip, [r7]
 8027408:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802740a:	3702      	adds	r7, #2
 802740c:	441c      	add	r4, r3
 802740e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027410:	441e      	add	r6, r3
 8027412:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027414:	3b01      	subs	r3, #1
 8027416:	9317      	str	r3, [sp, #92]	@ 0x5c
 8027418:	e6c0      	b.n	802719c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802741a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802741c:	441c      	add	r4, r3
 802741e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027420:	441e      	add	r6, r3
 8027422:	9b07      	ldr	r3, [sp, #28]
 8027424:	3b01      	subs	r3, #1
 8027426:	9307      	str	r3, [sp, #28]
 8027428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802742a:	3302      	adds	r3, #2
 802742c:	930a      	str	r3, [sp, #40]	@ 0x28
 802742e:	e695      	b.n	802715c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027430:	d024      	beq.n	802747c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027432:	9b07      	ldr	r3, [sp, #28]
 8027434:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8027436:	3b01      	subs	r3, #1
 8027438:	fb00 4003 	mla	r0, r0, r3, r4
 802743c:	1400      	asrs	r0, r0, #16
 802743e:	f53f aeaa 	bmi.w	8027196 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027442:	3901      	subs	r1, #1
 8027444:	4288      	cmp	r0, r1
 8027446:	f6bf aea6 	bge.w	8027196 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802744a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802744c:	fb01 6303 	mla	r3, r1, r3, r6
 8027450:	141b      	asrs	r3, r3, #16
 8027452:	f53f aea0 	bmi.w	8027196 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027456:	3a01      	subs	r2, #1
 8027458:	4293      	cmp	r3, r2
 802745a:	f6bf ae9c 	bge.w	8027196 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802745e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027462:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8027466:	f1bb 0f00 	cmp.w	fp, #0
 802746a:	f300 809a 	bgt.w	80275a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802746e:	9b07      	ldr	r3, [sp, #28]
 8027470:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027476:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802747a:	930a      	str	r3, [sp, #40]	@ 0x28
 802747c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802747e:	2b00      	cmp	r3, #0
 8027480:	f340 81ec 	ble.w	802785c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8027484:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027488:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802748a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802748e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027492:	eef0 6a62 	vmov.f32	s13, s5
 8027496:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802749a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802749e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80274a2:	ee16 4a90 	vmov	r4, s13
 80274a6:	eef0 6a43 	vmov.f32	s13, s6
 80274aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80274ae:	ee16 6a90 	vmov	r6, s13
 80274b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80274b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80274ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80274be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80274c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80274c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80274ca:	ee12 2a90 	vmov	r2, s5
 80274ce:	eef0 2a47 	vmov.f32	s5, s14
 80274d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80274d6:	ee13 2a10 	vmov	r2, s6
 80274da:	9327      	str	r3, [sp, #156]	@ 0x9c
 80274dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80274de:	eeb0 3a67 	vmov.f32	s6, s15
 80274e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80274e6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80274e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80274ea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80274ec:	3b01      	subs	r3, #1
 80274ee:	9316      	str	r3, [sp, #88]	@ 0x58
 80274f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80274f2:	bf08      	it	eq
 80274f4:	4613      	moveq	r3, r2
 80274f6:	9307      	str	r3, [sp, #28]
 80274f8:	e622      	b.n	8027140 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80274fa:	2800      	cmp	r0, #0
 80274fc:	f43f ae92 	beq.w	8027224 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027500:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027504:	9308      	str	r3, [sp, #32]
 8027506:	0e1b      	lsrs	r3, r3, #24
 8027508:	9310      	str	r3, [sp, #64]	@ 0x40
 802750a:	e68b      	b.n	8027224 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802750c:	8839      	ldrh	r1, [r7, #0]
 802750e:	43db      	mvns	r3, r3
 8027510:	4dd4      	ldr	r5, [pc, #848]	@ (8027864 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8027512:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8027516:	fa5f f883 	uxtb.w	r8, r3
 802751a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802751e:	10c8      	asrs	r0, r1, #3
 8027520:	00cb      	lsls	r3, r1, #3
 8027522:	fb0e fe08 	mul.w	lr, lr, r8
 8027526:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802752a:	b2db      	uxtb	r3, r3
 802752c:	f10e 0101 	add.w	r1, lr, #1
 8027530:	fb00 f008 	mul.w	r0, r0, r8
 8027534:	fb03 f308 	mul.w	r3, r3, r8
 8027538:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802753c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8027540:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8027544:	f100 0e01 	add.w	lr, r0, #1
 8027548:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802754c:	b2c9      	uxtb	r1, r1
 802754e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027552:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8027556:	00d2      	lsls	r2, r2, #3
 8027558:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802755c:	430a      	orrs	r2, r1
 802755e:	1c59      	adds	r1, r3, #1
 8027560:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027564:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027568:	e748      	b.n	80273fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802756a:	f112 0801 	adds.w	r8, r2, #1
 802756e:	f53f af4b 	bmi.w	8027408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027572:	4543      	cmp	r3, r8
 8027574:	f6ff af48 	blt.w	8027408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027578:	f11c 0801 	adds.w	r8, ip, #1
 802757c:	f53f af44 	bmi.w	8027408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027580:	45c6      	cmp	lr, r8
 8027582:	f6ff af41 	blt.w	8027408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027586:	b21b      	sxth	r3, r3
 8027588:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802758c:	fa0f f28e 	sxth.w	r2, lr
 8027590:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027594:	9200      	str	r2, [sp, #0]
 8027596:	4639      	mov	r1, r7
 8027598:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802759a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802759c:	f7ff fc88 	bl	8026eb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80275a0:	e732      	b.n	8027408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80275a2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80275a4:	1421      	asrs	r1, r4, #16
 80275a6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80275a8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80275ac:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80275b0:	1433      	asrs	r3, r6, #16
 80275b2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80275b6:	fb07 1303 	mla	r3, r7, r3, r1
 80275ba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80275bc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80275c0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80275c4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80275c8:	2a00      	cmp	r2, #0
 80275ca:	f000 8108 	beq.w	80277de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80275ce:	684d      	ldr	r5, [r1, #4]
 80275d0:	950d      	str	r5, [sp, #52]	@ 0x34
 80275d2:	0e2d      	lsrs	r5, r5, #24
 80275d4:	9514      	str	r5, [sp, #80]	@ 0x50
 80275d6:	b178      	cbz	r0, 80275f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80275d8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80275dc:	3f01      	subs	r7, #1
 80275de:	00bf      	lsls	r7, r7, #2
 80275e0:	3704      	adds	r7, #4
 80275e2:	eb01 0e07 	add.w	lr, r1, r7
 80275e6:	59c9      	ldr	r1, [r1, r7]
 80275e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80275ea:	0e09      	lsrs	r1, r1, #24
 80275ec:	9111      	str	r1, [sp, #68]	@ 0x44
 80275ee:	f8de 1004 	ldr.w	r1, [lr, #4]
 80275f2:	910e      	str	r1, [sp, #56]	@ 0x38
 80275f4:	0e09      	lsrs	r1, r1, #24
 80275f6:	9115      	str	r1, [sp, #84]	@ 0x54
 80275f8:	b292      	uxth	r2, r2
 80275fa:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80275fc:	b280      	uxth	r0, r0
 80275fe:	fb02 f900 	mul.w	r9, r2, r0
 8027602:	0112      	lsls	r2, r2, #4
 8027604:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8027608:	eba2 0e09 	sub.w	lr, r2, r9
 802760c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8027610:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027612:	b280      	uxth	r0, r0
 8027614:	fa1f fe8e 	uxth.w	lr, lr
 8027618:	1a09      	subs	r1, r1, r0
 802761a:	fb0e f202 	mul.w	r2, lr, r2
 802761e:	b289      	uxth	r1, r1
 8027620:	fb01 220c 	mla	r2, r1, ip, r2
 8027624:	fb00 2205 	mla	r2, r0, r5, r2
 8027628:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802762a:	fb09 2205 	mla	r2, r9, r5, r2
 802762e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027632:	2a00      	cmp	r2, #0
 8027634:	f000 80ca 	beq.w	80277cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027638:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802763c:	d019      	beq.n	8027672 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802763e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8027642:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027646:	fb0c fa0a 	mul.w	sl, ip, sl
 802764a:	fb0c fc03 	mul.w	ip, ip, r3
 802764e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027652:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027656:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802765a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802765e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027662:	4453      	add	r3, sl
 8027664:	0a3f      	lsrs	r7, r7, #8
 8027666:	0a1b      	lsrs	r3, r3, #8
 8027668:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802766c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027670:	433b      	orrs	r3, r7
 8027672:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027674:	2dff      	cmp	r5, #255	@ 0xff
 8027676:	d020      	beq.n	80276ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8027678:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802767a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802767e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027680:	436f      	muls	r7, r5
 8027682:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027684:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027688:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802768c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802768e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027692:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027696:	fb05 fa0a 	mul.w	sl, r5, sl
 802769a:	44bc      	add	ip, r7
 802769c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80276a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80276a8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80276ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80276b0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80276b4:	ea4c 050a 	orr.w	r5, ip, sl
 80276b8:	950d      	str	r5, [sp, #52]	@ 0x34
 80276ba:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80276bc:	2dff      	cmp	r5, #255	@ 0xff
 80276be:	d020      	beq.n	8027702 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80276c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80276c2:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80276c6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80276c8:	436f      	muls	r7, r5
 80276ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80276cc:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 80276d0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80276d2:	fb05 fa0c 	mul.w	sl, r5, ip
 80276d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80276da:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80276de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80276e2:	44bc      	add	ip, r7
 80276e4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80276e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80276ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80276f4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80276f8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80276fc:	ea4c 050a 	orr.w	r5, ip, sl
 8027700:	9509      	str	r5, [sp, #36]	@ 0x24
 8027702:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8027704:	2dff      	cmp	r5, #255	@ 0xff
 8027706:	d020      	beq.n	802774a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8027708:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802770a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802770e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8027710:	436f      	muls	r7, r5
 8027712:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027714:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027718:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802771c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802771e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027722:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027726:	fb05 fa0a 	mul.w	sl, r5, sl
 802772a:	44bc      	add	ip, r7
 802772c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027730:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027734:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027738:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802773c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027740:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027744:	ea4c 050a 	orr.w	r5, ip, sl
 8027748:	950e      	str	r5, [sp, #56]	@ 0x38
 802774a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802774c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8027750:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027754:	2aff      	cmp	r2, #255	@ 0xff
 8027756:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802775a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802775c:	fb0e f707 	mul.w	r7, lr, r7
 8027760:	fb01 770c 	mla	r7, r1, ip, r7
 8027764:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027768:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802776a:	fb00 770c 	mla	r7, r0, ip, r7
 802776e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027772:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027774:	fb09 770c 	mla	r7, r9, ip, r7
 8027778:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802777c:	fb0e fe0c 	mul.w	lr, lr, ip
 8027780:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8027784:	fb01 e303 	mla	r3, r1, r3, lr
 8027788:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802778a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802778e:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027792:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8027794:	fb00 330a 	mla	r3, r0, sl, r3
 8027798:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 802779c:	fb09 3c0c 	mla	ip, r9, ip, r3
 80277a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80277a4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80277a8:	ea47 070c 	orr.w	r7, r7, ip
 80277ac:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80277b0:	d11e      	bne.n	80277f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80277b2:	097a      	lsrs	r2, r7, #5
 80277b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80277b8:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80277bc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80277c0:	f023 0307 	bic.w	r3, r3, #7
 80277c4:	4313      	orrs	r3, r2
 80277c6:	431f      	orrs	r7, r3
 80277c8:	f8a8 7000 	strh.w	r7, [r8]
 80277cc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80277ce:	f108 0802 	add.w	r8, r8, #2
 80277d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80277d6:	441c      	add	r4, r3
 80277d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80277da:	441e      	add	r6, r3
 80277dc:	e643      	b.n	8027466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80277de:	2800      	cmp	r0, #0
 80277e0:	f43f af0a 	beq.w	80275f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80277e4:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80277e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80277ea:	0e09      	lsrs	r1, r1, #24
 80277ec:	9111      	str	r1, [sp, #68]	@ 0x44
 80277ee:	e703      	b.n	80275f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80277f0:	f8b8 1000 	ldrh.w	r1, [r8]
 80277f4:	43d2      	mvns	r2, r2
 80277f6:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80277fa:	fa5f fe82 	uxtb.w	lr, r2
 80277fe:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8027802:	10c8      	asrs	r0, r1, #3
 8027804:	00ca      	lsls	r2, r1, #3
 8027806:	fb0c fc0e 	mul.w	ip, ip, lr
 802780a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802780e:	b2d2      	uxtb	r2, r2
 8027810:	f10c 0101 	add.w	r1, ip, #1
 8027814:	fb00 f00e 	mul.w	r0, r0, lr
 8027818:	fb02 f20e 	mul.w	r2, r2, lr
 802781c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027820:	0c39      	lsrs	r1, r7, #16
 8027822:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027826:	490f      	ldr	r1, [pc, #60]	@ (8027864 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8027828:	fa5f fc8c 	uxtb.w	ip, ip
 802782c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8027830:	1c41      	adds	r1, r0, #1
 8027832:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027836:	1c51      	adds	r1, r2, #1
 8027838:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802783c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027840:	00c0      	lsls	r0, r0, #3
 8027842:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027846:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802784a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802784e:	ea4c 0c00 	orr.w	ip, ip, r0
 8027852:	ea47 0c0c 	orr.w	ip, r7, ip
 8027856:	f8a8 c000 	strh.w	ip, [r8]
 802785a:	e7b7      	b.n	80277cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802785c:	b01b      	add	sp, #108	@ 0x6c
 802785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027862:	bf00      	nop
 8027864:	fffff800 	.word	0xfffff800

08027868 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8027868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802786c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8027870:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027874:	2d00      	cmp	r5, #0
 8027876:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802787a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802787e:	fb05 0e03 	mla	lr, r5, r3, r0
 8027882:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8027886:	f2c0 808c 	blt.w	80279a2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802788a:	45a9      	cmp	r9, r5
 802788c:	f340 8089 	ble.w	80279a2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8027890:	2800      	cmp	r0, #0
 8027892:	f2c0 8084 	blt.w	802799e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8027896:	4580      	cmp	r8, r0
 8027898:	f340 8081 	ble.w	802799e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802789c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80278a0:	f01e 0f01 	tst.w	lr, #1
 80278a4:	5d16      	ldrb	r6, [r2, r4]
 80278a6:	bf0c      	ite	eq
 80278a8:	f006 060f 	andeq.w	r6, r6, #15
 80278ac:	1136      	asrne	r6, r6, #4
 80278ae:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80278b2:	b2f6      	uxtb	r6, r6
 80278b4:	1c44      	adds	r4, r0, #1
 80278b6:	d477      	bmi.n	80279a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80278b8:	45a0      	cmp	r8, r4
 80278ba:	dd75      	ble.n	80279a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80278bc:	2f00      	cmp	r7, #0
 80278be:	d075      	beq.n	80279ac <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80278c0:	f10e 0a01 	add.w	sl, lr, #1
 80278c4:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80278c8:	f01a 0f01 	tst.w	sl, #1
 80278cc:	5d14      	ldrb	r4, [r2, r4]
 80278ce:	bf0c      	ite	eq
 80278d0:	f004 040f 	andeq.w	r4, r4, #15
 80278d4:	1124      	asrne	r4, r4, #4
 80278d6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80278da:	b2e4      	uxtb	r4, r4
 80278dc:	3501      	adds	r5, #1
 80278de:	d469      	bmi.n	80279b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80278e0:	45a9      	cmp	r9, r5
 80278e2:	dd67      	ble.n	80279b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80278e4:	f1bc 0f00 	cmp.w	ip, #0
 80278e8:	d067      	beq.n	80279ba <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80278ea:	2800      	cmp	r0, #0
 80278ec:	db60      	blt.n	80279b0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80278ee:	4580      	cmp	r8, r0
 80278f0:	dd5e      	ble.n	80279b0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80278f2:	eb03 090e 	add.w	r9, r3, lr
 80278f6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80278fa:	f019 0f01 	tst.w	r9, #1
 80278fe:	5d55      	ldrb	r5, [r2, r5]
 8027900:	bf0c      	ite	eq
 8027902:	f005 050f 	andeq.w	r5, r5, #15
 8027906:	112d      	asrne	r5, r5, #4
 8027908:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802790c:	b2ed      	uxtb	r5, r5
 802790e:	3001      	adds	r0, #1
 8027910:	d456      	bmi.n	80279c0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8027912:	4580      	cmp	r8, r0
 8027914:	dd54      	ble.n	80279c0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8027916:	2f00      	cmp	r7, #0
 8027918:	d054      	beq.n	80279c4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802791a:	3301      	adds	r3, #1
 802791c:	449e      	add	lr, r3
 802791e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027922:	f01e 0f01 	tst.w	lr, #1
 8027926:	5cd0      	ldrb	r0, [r2, r3]
 8027928:	bf0c      	ite	eq
 802792a:	f000 000f 	andeq.w	r0, r0, #15
 802792e:	1100      	asrne	r0, r0, #4
 8027930:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027934:	b2c3      	uxtb	r3, r0
 8027936:	b2ba      	uxth	r2, r7
 8027938:	fa1f fc8c 	uxth.w	ip, ip
 802793c:	fb02 f00c 	mul.w	r0, r2, ip
 8027940:	0112      	lsls	r2, r2, #4
 8027942:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027946:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802794a:	1a12      	subs	r2, r2, r0
 802794c:	fa1f fc8c 	uxth.w	ip, ip
 8027950:	b292      	uxth	r2, r2
 8027952:	eba7 070c 	sub.w	r7, r7, ip
 8027956:	4362      	muls	r2, r4
 8027958:	b2bf      	uxth	r7, r7
 802795a:	fb06 2207 	mla	r2, r6, r7, r2
 802795e:	fb0c 2505 	mla	r5, ip, r5, r2
 8027962:	fb00 5303 	mla	r3, r0, r3, r5
 8027966:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802796a:	b1b3      	cbz	r3, 802799a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802796c:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8027970:	435a      	muls	r2, r3
 8027972:	1c53      	adds	r3, r2, #1
 8027974:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027978:	4a2d      	ldr	r2, [pc, #180]	@ (8027a30 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802797a:	121b      	asrs	r3, r3, #8
 802797c:	6812      	ldr	r2, [r2, #0]
 802797e:	2bff      	cmp	r3, #255	@ 0xff
 8027980:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8027984:	d120      	bne.n	80279c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8027986:	0950      	lsrs	r0, r2, #5
 8027988:	4b2a      	ldr	r3, [pc, #168]	@ (8027a34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802798a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802798e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027992:	4033      	ands	r3, r6
 8027994:	4318      	orrs	r0, r3
 8027996:	4302      	orrs	r2, r0
 8027998:	800a      	strh	r2, [r1, #0]
 802799a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802799e:	2600      	movs	r6, #0
 80279a0:	e788      	b.n	80278b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 80279a2:	2400      	movs	r4, #0
 80279a4:	4626      	mov	r6, r4
 80279a6:	e799      	b.n	80278dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80279a8:	2400      	movs	r4, #0
 80279aa:	e797      	b.n	80278dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80279ac:	463c      	mov	r4, r7
 80279ae:	e795      	b.n	80278dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80279b0:	2500      	movs	r5, #0
 80279b2:	e7ac      	b.n	802790e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 80279b4:	2300      	movs	r3, #0
 80279b6:	461d      	mov	r5, r3
 80279b8:	e7bd      	b.n	8027936 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80279ba:	4663      	mov	r3, ip
 80279bc:	4665      	mov	r5, ip
 80279be:	e7ba      	b.n	8027936 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80279c0:	2300      	movs	r3, #0
 80279c2:	e7b8      	b.n	8027936 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80279c4:	463b      	mov	r3, r7
 80279c6:	e7b6      	b.n	8027936 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80279c8:	880d      	ldrh	r5, [r1, #0]
 80279ca:	b29f      	uxth	r7, r3
 80279cc:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80279d0:	43db      	mvns	r3, r3
 80279d2:	122c      	asrs	r4, r5, #8
 80279d4:	fb10 f007 	smulbb	r0, r0, r7
 80279d8:	b2db      	uxtb	r3, r3
 80279da:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80279de:	b2f6      	uxtb	r6, r6
 80279e0:	b2d2      	uxtb	r2, r2
 80279e2:	fb04 0403 	mla	r4, r4, r3, r0
 80279e6:	10e8      	asrs	r0, r5, #3
 80279e8:	fb12 f207 	smulbb	r2, r2, r7
 80279ec:	00ed      	lsls	r5, r5, #3
 80279ee:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80279f2:	b2a4      	uxth	r4, r4
 80279f4:	fb16 f607 	smulbb	r6, r6, r7
 80279f8:	b2ed      	uxtb	r5, r5
 80279fa:	fb00 6603 	mla	r6, r0, r3, r6
 80279fe:	fb05 2303 	mla	r3, r5, r3, r2
 8027a02:	b2b0      	uxth	r0, r6
 8027a04:	b29a      	uxth	r2, r3
 8027a06:	1c63      	adds	r3, r4, #1
 8027a08:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027a0c:	1c53      	adds	r3, r2, #1
 8027a0e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027a12:	1c42      	adds	r2, r0, #1
 8027a14:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8027a18:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027a1c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027a20:	0940      	lsrs	r0, r0, #5
 8027a22:	4323      	orrs	r3, r4
 8027a24:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027a28:	4303      	orrs	r3, r0
 8027a2a:	800b      	strh	r3, [r1, #0]
 8027a2c:	e7b5      	b.n	802799a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8027a2e:	bf00      	nop
 8027a30:	24006608 	.word	0x24006608
 8027a34:	00fff800 	.word	0x00fff800

08027a38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a3c:	b097      	sub	sp, #92	@ 0x5c
 8027a3e:	9214      	str	r2, [sp, #80]	@ 0x50
 8027a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8027a42:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027a44:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8027a48:	9015      	str	r0, [sp, #84]	@ 0x54
 8027a4a:	910d      	str	r1, [sp, #52]	@ 0x34
 8027a4c:	6850      	ldr	r0, [r2, #4]
 8027a4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027a50:	6812      	ldr	r2, [r2, #0]
 8027a52:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8027a56:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8027a5a:	fb00 1303 	mla	r3, r0, r3, r1
 8027a5e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8027a62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027a64:	689b      	ldr	r3, [r3, #8]
 8027a66:	3301      	adds	r3, #1
 8027a68:	f023 0301 	bic.w	r3, r3, #1
 8027a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8027a6e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027a70:	681f      	ldr	r7, [r3, #0]
 8027a72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027a74:	2b00      	cmp	r3, #0
 8027a76:	dc03      	bgt.n	8027a80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027a78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027a7a:	2b00      	cmp	r3, #0
 8027a7c:	f340 8289 	ble.w	8027f92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8027a80:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027a82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027a86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027a8a:	1e48      	subs	r0, r1, #1
 8027a8c:	f102 3cff 	add.w	ip, r2, #4294967295
 8027a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027a92:	2b00      	cmp	r3, #0
 8027a94:	f340 80c5 	ble.w	8027c22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027a98:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027a9c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027aa0:	d406      	bmi.n	8027ab0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027aa2:	4586      	cmp	lr, r0
 8027aa4:	da04      	bge.n	8027ab0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027aa6:	2b00      	cmp	r3, #0
 8027aa8:	db02      	blt.n	8027ab0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027aaa:	4563      	cmp	r3, ip
 8027aac:	f2c0 80ba 	blt.w	8027c24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8027ab0:	f11e 0e01 	adds.w	lr, lr, #1
 8027ab4:	f100 80ab 	bmi.w	8027c0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027ab8:	4571      	cmp	r1, lr
 8027aba:	f2c0 80a8 	blt.w	8027c0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027abe:	3301      	adds	r3, #1
 8027ac0:	f100 80a5 	bmi.w	8027c0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027ac4:	429a      	cmp	r2, r3
 8027ac6:	f2c0 80a2 	blt.w	8027c0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027acc:	46c8      	mov	r8, r9
 8027ace:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8027ad2:	930e      	str	r3, [sp, #56]	@ 0x38
 8027ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027ad6:	2b00      	cmp	r3, #0
 8027ad8:	f340 80c4 	ble.w	8027c64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8027adc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027ade:	1430      	asrs	r0, r6, #16
 8027ae0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027ae4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027ae8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027aec:	1423      	asrs	r3, r4, #16
 8027aee:	f100 814f 	bmi.w	8027d90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027af2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027af6:	455b      	cmp	r3, fp
 8027af8:	f280 814a 	bge.w	8027d90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027afc:	2800      	cmp	r0, #0
 8027afe:	f2c0 8147 	blt.w	8027d90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027b02:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027b06:	4558      	cmp	r0, fp
 8027b08:	f280 8142 	bge.w	8027d90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027b0c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8027b0e:	fb00 3305 	mla	r3, r0, r5, r3
 8027b12:	0858      	lsrs	r0, r3, #1
 8027b14:	07dd      	lsls	r5, r3, #31
 8027b16:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027b1a:	bf54      	ite	pl
 8027b1c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027b20:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027b24:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027b28:	fa5f fc8c 	uxtb.w	ip, ip
 8027b2c:	2a00      	cmp	r2, #0
 8027b2e:	f000 80dd 	beq.w	8027cec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8027b32:	1c58      	adds	r0, r3, #1
 8027b34:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027b38:	07c0      	lsls	r0, r0, #31
 8027b3a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8027b3e:	bf54      	ite	pl
 8027b40:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027b44:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027b48:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027b4c:	fa5f f08e 	uxtb.w	r0, lr
 8027b50:	9010      	str	r0, [sp, #64]	@ 0x40
 8027b52:	b1d9      	cbz	r1, 8027b8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027b54:	4453      	add	r3, sl
 8027b56:	0858      	lsrs	r0, r3, #1
 8027b58:	07dd      	lsls	r5, r3, #31
 8027b5a:	f103 0301 	add.w	r3, r3, #1
 8027b5e:	5c38      	ldrb	r0, [r7, r0]
 8027b60:	bf54      	ite	pl
 8027b62:	f000 000f 	andpl.w	r0, r0, #15
 8027b66:	1100      	asrmi	r0, r0, #4
 8027b68:	07dd      	lsls	r5, r3, #31
 8027b6a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027b6e:	b2c0      	uxtb	r0, r0
 8027b70:	900b      	str	r0, [sp, #44]	@ 0x2c
 8027b72:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027b76:	f817 e000 	ldrb.w	lr, [r7, r0]
 8027b7a:	bf54      	ite	pl
 8027b7c:	f00e 030f 	andpl.w	r3, lr, #15
 8027b80:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027b84:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027b88:	b2db      	uxtb	r3, r3
 8027b8a:	9311      	str	r3, [sp, #68]	@ 0x44
 8027b8c:	b292      	uxth	r2, r2
 8027b8e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027b90:	b289      	uxth	r1, r1
 8027b92:	fb02 f301 	mul.w	r3, r2, r1
 8027b96:	0112      	lsls	r2, r2, #4
 8027b98:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027b9c:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8027ba0:	1ad2      	subs	r2, r2, r3
 8027ba2:	b289      	uxth	r1, r1
 8027ba4:	b292      	uxth	r2, r2
 8027ba6:	1a40      	subs	r0, r0, r1
 8027ba8:	436a      	muls	r2, r5
 8027baa:	b280      	uxth	r0, r0
 8027bac:	fb0c 2c00 	mla	ip, ip, r0, r2
 8027bb0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027bb2:	fb01 c102 	mla	r1, r1, r2, ip
 8027bb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027bb8:	fb03 1302 	mla	r3, r3, r2, r1
 8027bbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027bc0:	b1db      	cbz	r3, 8027bfa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027bc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027bc4:	4353      	muls	r3, r2
 8027bc6:	1c5a      	adds	r2, r3, #1
 8027bc8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027bcc:	4ac6      	ldr	r2, [pc, #792]	@ (8027ee8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027bce:	121b      	asrs	r3, r3, #8
 8027bd0:	6812      	ldr	r2, [r2, #0]
 8027bd2:	2bff      	cmp	r3, #255	@ 0xff
 8027bd4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8027bd8:	f040 8099 	bne.w	8027d0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8027bdc:	0953      	lsrs	r3, r2, #5
 8027bde:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8027be2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027be6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027bea:	f02c 0c07 	bic.w	ip, ip, #7
 8027bee:	ea43 0c0c 	orr.w	ip, r3, ip
 8027bf2:	ea4c 0202 	orr.w	r2, ip, r2
 8027bf6:	f8a8 2000 	strh.w	r2, [r8]
 8027bfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027bfc:	f108 0802 	add.w	r8, r8, #2
 8027c00:	441c      	add	r4, r3
 8027c02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027c04:	441e      	add	r6, r3
 8027c06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027c08:	3b01      	subs	r3, #1
 8027c0a:	930e      	str	r3, [sp, #56]	@ 0x38
 8027c0c:	e762      	b.n	8027ad4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027c0e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027c10:	f109 0902 	add.w	r9, r9, #2
 8027c14:	441c      	add	r4, r3
 8027c16:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027c18:	441e      	add	r6, r3
 8027c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c1c:	3b01      	subs	r3, #1
 8027c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8027c20:	e736      	b.n	8027a90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027c22:	d024      	beq.n	8027c6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c26:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8027c28:	3b01      	subs	r3, #1
 8027c2a:	fb00 4003 	mla	r0, r0, r3, r4
 8027c2e:	1400      	asrs	r0, r0, #16
 8027c30:	f53f af4b 	bmi.w	8027aca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027c34:	3901      	subs	r1, #1
 8027c36:	4288      	cmp	r0, r1
 8027c38:	f6bf af47 	bge.w	8027aca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027c3c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8027c3e:	fb01 6303 	mla	r3, r1, r3, r6
 8027c42:	141b      	asrs	r3, r3, #16
 8027c44:	f53f af41 	bmi.w	8027aca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027c48:	3a01      	subs	r2, #1
 8027c4a:	4293      	cmp	r3, r2
 8027c4c:	f6bf af3d 	bge.w	8027aca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027c50:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8027c54:	46c8      	mov	r8, r9
 8027c56:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8027c5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8027c5c:	f1bb 0f00 	cmp.w	fp, #0
 8027c60:	f300 80b7 	bgt.w	8027dd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8027c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c66:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027c6a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8027c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027c70:	2b00      	cmp	r3, #0
 8027c72:	f340 818e 	ble.w	8027f92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8027c76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027c7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027c7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027c80:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027c84:	eef0 6a62 	vmov.f32	s13, s5
 8027c88:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027c8c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027c90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027c94:	ee16 4a90 	vmov	r4, s13
 8027c98:	eef0 6a43 	vmov.f32	s13, s6
 8027c9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ca0:	ee16 6a90 	vmov	r6, s13
 8027ca4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027ca8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027cac:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027cb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027cb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027cb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027cbc:	ee12 2a90 	vmov	r2, s5
 8027cc0:	eef0 2a47 	vmov.f32	s5, s14
 8027cc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8027cc8:	ee13 2a10 	vmov	r2, s6
 8027ccc:	9323      	str	r3, [sp, #140]	@ 0x8c
 8027cce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027cd0:	eeb0 3a67 	vmov.f32	s6, s15
 8027cd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8027cd8:	9324      	str	r3, [sp, #144]	@ 0x90
 8027cda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027cdc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027cde:	3b01      	subs	r3, #1
 8027ce0:	930d      	str	r3, [sp, #52]	@ 0x34
 8027ce2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027ce4:	bf08      	it	eq
 8027ce6:	4613      	moveq	r3, r2
 8027ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8027cea:	e6c2      	b.n	8027a72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027cec:	2900      	cmp	r1, #0
 8027cee:	f43f af4d 	beq.w	8027b8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027cf2:	eb0a 0003 	add.w	r0, sl, r3
 8027cf6:	0843      	lsrs	r3, r0, #1
 8027cf8:	07c0      	lsls	r0, r0, #31
 8027cfa:	5cfb      	ldrb	r3, [r7, r3]
 8027cfc:	bf54      	ite	pl
 8027cfe:	f003 030f 	andpl.w	r3, r3, #15
 8027d02:	111b      	asrmi	r3, r3, #4
 8027d04:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027d08:	b2db      	uxtb	r3, r3
 8027d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027d0c:	e73e      	b.n	8027b8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027d0e:	f8b8 e000 	ldrh.w	lr, [r8]
 8027d12:	fa1f fb83 	uxth.w	fp, r3
 8027d16:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8027d1a:	43db      	mvns	r3, r3
 8027d1c:	ea4f 202e 	mov.w	r0, lr, asr #8
 8027d20:	fb11 f10b 	smulbb	r1, r1, fp
 8027d24:	b2db      	uxtb	r3, r3
 8027d26:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027d2a:	fa5f fc8c 	uxtb.w	ip, ip
 8027d2e:	b2d2      	uxtb	r2, r2
 8027d30:	fb00 1003 	mla	r0, r0, r3, r1
 8027d34:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8027d38:	fb1c fc0b 	smulbb	ip, ip, fp
 8027d3c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027d40:	b280      	uxth	r0, r0
 8027d42:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027d46:	fb12 fb0b 	smulbb	fp, r2, fp
 8027d4a:	fa5f fe8e 	uxtb.w	lr, lr
 8027d4e:	fb01 cc03 	mla	ip, r1, r3, ip
 8027d52:	fb0e bb03 	mla	fp, lr, r3, fp
 8027d56:	1c43      	adds	r3, r0, #1
 8027d58:	fa1f fc8c 	uxth.w	ip, ip
 8027d5c:	fa1f fb8b 	uxth.w	fp, fp
 8027d60:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027d64:	f10c 0101 	add.w	r1, ip, #1
 8027d68:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 8027d6c:	f10b 0001 	add.w	r0, fp, #1
 8027d70:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027d74:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027d78:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027d7c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027d80:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027d84:	4318      	orrs	r0, r3
 8027d86:	ea40 000c 	orr.w	r0, r0, ip
 8027d8a:	f8a8 0000 	strh.w	r0, [r8]
 8027d8e:	e734      	b.n	8027bfa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027d90:	f113 0b01 	adds.w	fp, r3, #1
 8027d94:	f53f af31 	bmi.w	8027bfa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027d98:	45dc      	cmp	ip, fp
 8027d9a:	f6ff af2e 	blt.w	8027bfa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027d9e:	f110 0b01 	adds.w	fp, r0, #1
 8027da2:	f53f af2a 	bmi.w	8027bfa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027da6:	45de      	cmp	lr, fp
 8027da8:	f6ff af27 	blt.w	8027bfa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027dac:	9302      	str	r3, [sp, #8]
 8027dae:	fa0f f38e 	sxth.w	r3, lr
 8027db2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027db4:	9301      	str	r3, [sp, #4]
 8027db6:	fa0f f38c 	sxth.w	r3, ip
 8027dba:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027dbe:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8027dc2:	9300      	str	r3, [sp, #0]
 8027dc4:	463a      	mov	r2, r7
 8027dc6:	4653      	mov	r3, sl
 8027dc8:	4641      	mov	r1, r8
 8027dca:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8027dcc:	f7ff fd4c 	bl	8027868 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8027dd0:	e713      	b.n	8027bfa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027dd2:	1422      	asrs	r2, r4, #16
 8027dd4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8027dd6:	1433      	asrs	r3, r6, #16
 8027dd8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027ddc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027de0:	fb05 2303 	mla	r3, r5, r3, r2
 8027de4:	085a      	lsrs	r2, r3, #1
 8027de6:	07dd      	lsls	r5, r3, #31
 8027de8:	5cba      	ldrb	r2, [r7, r2]
 8027dea:	bf54      	ite	pl
 8027dec:	f002 020f 	andpl.w	r2, r2, #15
 8027df0:	1112      	asrmi	r2, r2, #4
 8027df2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027df6:	b2d2      	uxtb	r2, r2
 8027df8:	2900      	cmp	r1, #0
 8027dfa:	d077      	beq.n	8027eec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8027dfc:	f103 0e01 	add.w	lr, r3, #1
 8027e00:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8027e04:	f01e 0f01 	tst.w	lr, #1
 8027e08:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027e0c:	bf0c      	ite	eq
 8027e0e:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027e12:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8027e16:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027e1a:	fa5f f58c 	uxtb.w	r5, ip
 8027e1e:	9512      	str	r5, [sp, #72]	@ 0x48
 8027e20:	b308      	cbz	r0, 8027e66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027e22:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027e24:	442b      	add	r3, r5
 8027e26:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027e2a:	07dd      	lsls	r5, r3, #31
 8027e2c:	f103 0301 	add.w	r3, r3, #1
 8027e30:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027e34:	bf54      	ite	pl
 8027e36:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027e3a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027e3e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027e42:	fa5f f58c 	uxtb.w	r5, ip
 8027e46:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027e4a:	950c      	str	r5, [sp, #48]	@ 0x30
 8027e4c:	07dd      	lsls	r5, r3, #31
 8027e4e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027e52:	bf54      	ite	pl
 8027e54:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027e58:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027e5c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027e60:	fa5f f38c 	uxtb.w	r3, ip
 8027e64:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027e66:	b289      	uxth	r1, r1
 8027e68:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027e6a:	b280      	uxth	r0, r0
 8027e6c:	fb01 f300 	mul.w	r3, r1, r0
 8027e70:	0109      	lsls	r1, r1, #4
 8027e72:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8027e76:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8027e7a:	1ac9      	subs	r1, r1, r3
 8027e7c:	b280      	uxth	r0, r0
 8027e7e:	b289      	uxth	r1, r1
 8027e80:	ebac 0c00 	sub.w	ip, ip, r0
 8027e84:	4369      	muls	r1, r5
 8027e86:	fa1f fc8c 	uxth.w	ip, ip
 8027e8a:	fb02 120c 	mla	r2, r2, ip, r1
 8027e8e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027e90:	fb00 2001 	mla	r0, r0, r1, r2
 8027e94:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027e96:	fb03 0302 	mla	r3, r3, r2, r0
 8027e9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027e9e:	b1d3      	cbz	r3, 8027ed6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027ea0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027ea2:	4353      	muls	r3, r2
 8027ea4:	1c5a      	adds	r2, r3, #1
 8027ea6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8027ee8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027eac:	121b      	asrs	r3, r3, #8
 8027eae:	6812      	ldr	r2, [r2, #0]
 8027eb0:	2bff      	cmp	r3, #255	@ 0xff
 8027eb2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8027eb6:	d12d      	bne.n	8027f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8027eb8:	0953      	lsrs	r3, r2, #5
 8027eba:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8027ebe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027ec2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027ec6:	f02c 0c07 	bic.w	ip, ip, #7
 8027eca:	ea43 0c0c 	orr.w	ip, r3, ip
 8027ece:	ea4c 0202 	orr.w	r2, ip, r2
 8027ed2:	f8a8 2000 	strh.w	r2, [r8]
 8027ed6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027ed8:	f108 0802 	add.w	r8, r8, #2
 8027edc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027ee0:	441c      	add	r4, r3
 8027ee2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027ee4:	441e      	add	r6, r3
 8027ee6:	e6b9      	b.n	8027c5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027ee8:	24006608 	.word	0x24006608
 8027eec:	2800      	cmp	r0, #0
 8027eee:	d0ba      	beq.n	8027e66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027ef0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027ef2:	442b      	add	r3, r5
 8027ef4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027ef8:	07db      	lsls	r3, r3, #31
 8027efa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027efe:	bf54      	ite	pl
 8027f00:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027f04:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027f08:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027f0c:	fa5f f38c 	uxtb.w	r3, ip
 8027f10:	930c      	str	r3, [sp, #48]	@ 0x30
 8027f12:	e7a8      	b.n	8027e66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027f14:	f8b8 e000 	ldrh.w	lr, [r8]
 8027f18:	fa1f fa83 	uxth.w	sl, r3
 8027f1c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8027f20:	43db      	mvns	r3, r3
 8027f22:	ea4f 202e 	mov.w	r0, lr, asr #8
 8027f26:	fb11 f10a 	smulbb	r1, r1, sl
 8027f2a:	b2db      	uxtb	r3, r3
 8027f2c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027f30:	b2d2      	uxtb	r2, r2
 8027f32:	fa5f fc8c 	uxtb.w	ip, ip
 8027f36:	fb00 1003 	mla	r0, r0, r3, r1
 8027f3a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8027f3e:	fb12 f20a 	smulbb	r2, r2, sl
 8027f42:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027f46:	b280      	uxth	r0, r0
 8027f48:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027f4c:	fb1c fc0a 	smulbb	ip, ip, sl
 8027f50:	fa5f fe8e 	uxtb.w	lr, lr
 8027f54:	fb0e 2203 	mla	r2, lr, r3, r2
 8027f58:	fb01 cc03 	mla	ip, r1, r3, ip
 8027f5c:	1c43      	adds	r3, r0, #1
 8027f5e:	b292      	uxth	r2, r2
 8027f60:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027f64:	1c51      	adds	r1, r2, #1
 8027f66:	fa1f fc8c 	uxth.w	ip, ip
 8027f6a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8027f6e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8027f72:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8027f76:	4308      	orrs	r0, r1
 8027f78:	f10c 0101 	add.w	r1, ip, #1
 8027f7c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027f80:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027f84:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027f88:	ea40 000c 	orr.w	r0, r0, ip
 8027f8c:	f8a8 0000 	strh.w	r0, [r8]
 8027f90:	e7a1      	b.n	8027ed6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027f92:	b017      	add	sp, #92	@ 0x5c
 8027f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027f98 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8027f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027f9c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8027fa0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027fa4:	2d00      	cmp	r5, #0
 8027fa6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027faa:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8027fae:	fb05 0e03 	mla	lr, r5, r3, r0
 8027fb2:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8027fb6:	f2c0 80b0 	blt.w	802811a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8027fba:	45a9      	cmp	r9, r5
 8027fbc:	f340 80ad 	ble.w	802811a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8027fc0:	2800      	cmp	r0, #0
 8027fc2:	f2c0 80a8 	blt.w	8028116 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8027fc6:	4580      	cmp	r8, r0
 8027fc8:	f340 80a5 	ble.w	8028116 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8027fcc:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027fd0:	f01e 0f01 	tst.w	lr, #1
 8027fd4:	5d16      	ldrb	r6, [r2, r4]
 8027fd6:	bf0c      	ite	eq
 8027fd8:	f006 060f 	andeq.w	r6, r6, #15
 8027fdc:	1136      	asrne	r6, r6, #4
 8027fde:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027fe2:	b2f6      	uxtb	r6, r6
 8027fe4:	1c44      	adds	r4, r0, #1
 8027fe6:	f100 809b 	bmi.w	8028120 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8027fea:	45a0      	cmp	r8, r4
 8027fec:	f340 8098 	ble.w	8028120 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8027ff0:	2f00      	cmp	r7, #0
 8027ff2:	f000 8097 	beq.w	8028124 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8027ff6:	f10e 0a01 	add.w	sl, lr, #1
 8027ffa:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8027ffe:	f01a 0f01 	tst.w	sl, #1
 8028002:	5d14      	ldrb	r4, [r2, r4]
 8028004:	bf0c      	ite	eq
 8028006:	f004 040f 	andeq.w	r4, r4, #15
 802800a:	1124      	asrne	r4, r4, #4
 802800c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028010:	b2e4      	uxtb	r4, r4
 8028012:	3501      	adds	r5, #1
 8028014:	f100 808a 	bmi.w	802812c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8028018:	45a9      	cmp	r9, r5
 802801a:	f340 8087 	ble.w	802812c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802801e:	f1bc 0f00 	cmp.w	ip, #0
 8028022:	f000 8086 	beq.w	8028132 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8028026:	2800      	cmp	r0, #0
 8028028:	db7e      	blt.n	8028128 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802802a:	4580      	cmp	r8, r0
 802802c:	dd7c      	ble.n	8028128 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802802e:	eb03 090e 	add.w	r9, r3, lr
 8028032:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8028036:	f019 0f01 	tst.w	r9, #1
 802803a:	5d55      	ldrb	r5, [r2, r5]
 802803c:	bf0c      	ite	eq
 802803e:	f005 050f 	andeq.w	r5, r5, #15
 8028042:	112d      	asrne	r5, r5, #4
 8028044:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028048:	b2ed      	uxtb	r5, r5
 802804a:	3001      	adds	r0, #1
 802804c:	d474      	bmi.n	8028138 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802804e:	4580      	cmp	r8, r0
 8028050:	dd72      	ble.n	8028138 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8028052:	2f00      	cmp	r7, #0
 8028054:	d072      	beq.n	802813c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8028056:	3301      	adds	r3, #1
 8028058:	449e      	add	lr, r3
 802805a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802805e:	f01e 0f01 	tst.w	lr, #1
 8028062:	5cd0      	ldrb	r0, [r2, r3]
 8028064:	bf0c      	ite	eq
 8028066:	f000 000f 	andeq.w	r0, r0, #15
 802806a:	1100      	asrne	r0, r0, #4
 802806c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028070:	b2c3      	uxtb	r3, r0
 8028072:	b2ba      	uxth	r2, r7
 8028074:	fa1f fc8c 	uxth.w	ip, ip
 8028078:	fb02 f00c 	mul.w	r0, r2, ip
 802807c:	0112      	lsls	r2, r2, #4
 802807e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8028082:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8028086:	1a12      	subs	r2, r2, r0
 8028088:	fa1f fc8c 	uxth.w	ip, ip
 802808c:	b292      	uxth	r2, r2
 802808e:	eba7 070c 	sub.w	r7, r7, ip
 8028092:	4362      	muls	r2, r4
 8028094:	b2bf      	uxth	r7, r7
 8028096:	fb06 2207 	mla	r2, r6, r7, r2
 802809a:	fb0c 2505 	mla	r5, ip, r5, r2
 802809e:	fb00 5303 	mla	r3, r0, r3, r5
 80280a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80280a6:	b3a3      	cbz	r3, 8028112 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80280a8:	4a25      	ldr	r2, [pc, #148]	@ (8028140 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80280aa:	880e      	ldrh	r6, [r1, #0]
 80280ac:	6815      	ldr	r5, [r2, #0]
 80280ae:	b29a      	uxth	r2, r3
 80280b0:	1234      	asrs	r4, r6, #8
 80280b2:	43db      	mvns	r3, r3
 80280b4:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80280b8:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80280bc:	b2db      	uxtb	r3, r3
 80280be:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80280c2:	fb10 f002 	smulbb	r0, r0, r2
 80280c6:	b2ed      	uxtb	r5, r5
 80280c8:	fb17 f702 	smulbb	r7, r7, r2
 80280cc:	fb04 0403 	mla	r4, r4, r3, r0
 80280d0:	10f0      	asrs	r0, r6, #3
 80280d2:	fb15 f202 	smulbb	r2, r5, r2
 80280d6:	00f6      	lsls	r6, r6, #3
 80280d8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80280dc:	b2a4      	uxth	r4, r4
 80280de:	b2f6      	uxtb	r6, r6
 80280e0:	fb00 7003 	mla	r0, r0, r3, r7
 80280e4:	fb06 2303 	mla	r3, r6, r3, r2
 80280e8:	b280      	uxth	r0, r0
 80280ea:	b29a      	uxth	r2, r3
 80280ec:	1c63      	adds	r3, r4, #1
 80280ee:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80280f2:	1c53      	adds	r3, r2, #1
 80280f4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80280f8:	1c42      	adds	r2, r0, #1
 80280fa:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80280fe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028102:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028106:	0940      	lsrs	r0, r0, #5
 8028108:	4323      	orrs	r3, r4
 802810a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802810e:	4303      	orrs	r3, r0
 8028110:	800b      	strh	r3, [r1, #0]
 8028112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028116:	2600      	movs	r6, #0
 8028118:	e764      	b.n	8027fe4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802811a:	2400      	movs	r4, #0
 802811c:	4626      	mov	r6, r4
 802811e:	e778      	b.n	8028012 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028120:	2400      	movs	r4, #0
 8028122:	e776      	b.n	8028012 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028124:	463c      	mov	r4, r7
 8028126:	e774      	b.n	8028012 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8028128:	2500      	movs	r5, #0
 802812a:	e78e      	b.n	802804a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802812c:	2300      	movs	r3, #0
 802812e:	461d      	mov	r5, r3
 8028130:	e79f      	b.n	8028072 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028132:	4663      	mov	r3, ip
 8028134:	4665      	mov	r5, ip
 8028136:	e79c      	b.n	8028072 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028138:	2300      	movs	r3, #0
 802813a:	e79a      	b.n	8028072 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802813c:	463b      	mov	r3, r7
 802813e:	e798      	b.n	8028072 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8028140:	24006608 	.word	0x24006608

08028144 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028148:	b093      	sub	sp, #76	@ 0x4c
 802814a:	461d      	mov	r5, r3
 802814c:	920c      	str	r2, [sp, #48]	@ 0x30
 802814e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8028150:	9011      	str	r0, [sp, #68]	@ 0x44
 8028152:	9107      	str	r1, [sp, #28]
 8028154:	6850      	ldr	r0, [r2, #4]
 8028156:	6812      	ldr	r2, [r2, #0]
 8028158:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802815c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8028160:	fb00 1303 	mla	r3, r0, r3, r1
 8028164:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028168:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802816a:	689b      	ldr	r3, [r3, #8]
 802816c:	3301      	adds	r3, #1
 802816e:	f023 0301 	bic.w	r3, r3, #1
 8028172:	9306      	str	r3, [sp, #24]
 8028174:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028176:	681f      	ldr	r7, [r3, #0]
 8028178:	9b07      	ldr	r3, [sp, #28]
 802817a:	2b00      	cmp	r3, #0
 802817c:	dc03      	bgt.n	8028186 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802817e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028180:	2b00      	cmp	r3, #0
 8028182:	f340 8267 	ble.w	8028654 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8028186:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028188:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802818c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028190:	1e48      	subs	r0, r1, #1
 8028192:	f102 3cff 	add.w	ip, r2, #4294967295
 8028196:	2d00      	cmp	r5, #0
 8028198:	f340 80b7 	ble.w	802830a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802819c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80281a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80281a4:	d406      	bmi.n	80281b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80281a6:	4586      	cmp	lr, r0
 80281a8:	da04      	bge.n	80281b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80281aa:	2b00      	cmp	r3, #0
 80281ac:	db02      	blt.n	80281b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80281ae:	4563      	cmp	r3, ip
 80281b0:	f2c0 80ac 	blt.w	802830c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80281b4:	f11e 0e01 	adds.w	lr, lr, #1
 80281b8:	f100 809f 	bmi.w	80282fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80281bc:	4571      	cmp	r1, lr
 80281be:	f2c0 809c 	blt.w	80282fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80281c2:	3301      	adds	r3, #1
 80281c4:	f100 8099 	bmi.w	80282fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80281c8:	429a      	cmp	r2, r3
 80281ca:	f2c0 8096 	blt.w	80282fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80281ce:	46c8      	mov	r8, r9
 80281d0:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80281d4:	9509      	str	r5, [sp, #36]	@ 0x24
 80281d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80281d8:	2b00      	cmp	r3, #0
 80281da:	f340 80b5 	ble.w	8028348 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80281de:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80281e2:	1430      	asrs	r0, r6, #16
 80281e4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80281e8:	9308      	str	r3, [sp, #32]
 80281ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80281ec:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80281f0:	1423      	asrs	r3, r4, #16
 80281f2:	f100 813f 	bmi.w	8028474 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80281f6:	f10c 3bff 	add.w	fp, ip, #4294967295
 80281fa:	455b      	cmp	r3, fp
 80281fc:	f280 813a 	bge.w	8028474 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028200:	2800      	cmp	r0, #0
 8028202:	f2c0 8137 	blt.w	8028474 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028206:	f10e 3bff 	add.w	fp, lr, #4294967295
 802820a:	4558      	cmp	r0, fp
 802820c:	f280 8132 	bge.w	8028474 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028210:	9a06      	ldr	r2, [sp, #24]
 8028212:	fb00 3302 	mla	r3, r0, r2, r3
 8028216:	0858      	lsrs	r0, r3, #1
 8028218:	07da      	lsls	r2, r3, #31
 802821a:	9a08      	ldr	r2, [sp, #32]
 802821c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028220:	bf54      	ite	pl
 8028222:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028226:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802822a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802822e:	fa5f fc8c 	uxtb.w	ip, ip
 8028232:	2a00      	cmp	r2, #0
 8028234:	f000 80cc 	beq.w	80283d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8028238:	1c58      	adds	r0, r3, #1
 802823a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802823e:	07c0      	lsls	r0, r0, #31
 8028240:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028244:	bf54      	ite	pl
 8028246:	f00e 0e0f 	andpl.w	lr, lr, #15
 802824a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802824e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028252:	fa5f fe8e 	uxtb.w	lr, lr
 8028256:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802825a:	b1b9      	cbz	r1, 802828c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802825c:	4453      	add	r3, sl
 802825e:	0858      	lsrs	r0, r3, #1
 8028260:	07da      	lsls	r2, r3, #31
 8028262:	5c38      	ldrb	r0, [r7, r0]
 8028264:	bf54      	ite	pl
 8028266:	f000 000f 	andpl.w	r0, r0, #15
 802826a:	1100      	asrmi	r0, r0, #4
 802826c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028270:	b2c0      	uxtb	r0, r0
 8028272:	900a      	str	r0, [sp, #40]	@ 0x28
 8028274:	1c58      	adds	r0, r3, #1
 8028276:	0843      	lsrs	r3, r0, #1
 8028278:	07c2      	lsls	r2, r0, #31
 802827a:	5cfb      	ldrb	r3, [r7, r3]
 802827c:	bf54      	ite	pl
 802827e:	f003 030f 	andpl.w	r3, r3, #15
 8028282:	111b      	asrmi	r3, r3, #4
 8028284:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028288:	b2db      	uxtb	r3, r3
 802828a:	930e      	str	r3, [sp, #56]	@ 0x38
 802828c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028290:	b289      	uxth	r1, r1
 8028292:	fb02 f301 	mul.w	r3, r2, r1
 8028296:	0112      	lsls	r2, r2, #4
 8028298:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802829c:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80282a0:	1ad2      	subs	r2, r2, r3
 80282a2:	b289      	uxth	r1, r1
 80282a4:	b292      	uxth	r2, r2
 80282a6:	1a40      	subs	r0, r0, r1
 80282a8:	fa1f fe80 	uxth.w	lr, r0
 80282ac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80282ae:	4342      	muls	r2, r0
 80282b0:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80282b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80282b6:	fb01 c102 	mla	r1, r1, r2, ip
 80282ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80282bc:	fb03 1302 	mla	r3, r3, r2, r1
 80282c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80282c4:	2bff      	cmp	r3, #255	@ 0xff
 80282c6:	f040 8094 	bne.w	80283f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80282ca:	4bbf      	ldr	r3, [pc, #764]	@ (80285c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80282cc:	681a      	ldr	r2, [r3, #0]
 80282ce:	4bbf      	ldr	r3, [pc, #764]	@ (80285cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80282d0:	0951      	lsrs	r1, r2, #5
 80282d2:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80282d6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80282da:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80282de:	430b      	orrs	r3, r1
 80282e0:	4313      	orrs	r3, r2
 80282e2:	f8a8 3000 	strh.w	r3, [r8]
 80282e6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80282e8:	f108 0802 	add.w	r8, r8, #2
 80282ec:	441c      	add	r4, r3
 80282ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80282f0:	441e      	add	r6, r3
 80282f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80282f4:	3b01      	subs	r3, #1
 80282f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80282f8:	e76d      	b.n	80281d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80282fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80282fc:	3d01      	subs	r5, #1
 80282fe:	f109 0902 	add.w	r9, r9, #2
 8028302:	441c      	add	r4, r3
 8028304:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028306:	441e      	add	r6, r3
 8028308:	e745      	b.n	8028196 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802830a:	d021      	beq.n	8028350 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802830c:	1e6b      	subs	r3, r5, #1
 802830e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028310:	fb00 4003 	mla	r0, r0, r3, r4
 8028314:	1400      	asrs	r0, r0, #16
 8028316:	f53f af5a 	bmi.w	80281ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802831a:	3901      	subs	r1, #1
 802831c:	4288      	cmp	r0, r1
 802831e:	f6bf af56 	bge.w	80281ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028322:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8028324:	fb01 6303 	mla	r3, r1, r3, r6
 8028328:	141b      	asrs	r3, r3, #16
 802832a:	f53f af50 	bmi.w	80281ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802832e:	3a01      	subs	r2, #1
 8028330:	4293      	cmp	r3, r2
 8028332:	f6bf af4c 	bge.w	80281ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028336:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802833a:	46a8      	mov	r8, r5
 802833c:	46ce      	mov	lr, r9
 802833e:	9308      	str	r3, [sp, #32]
 8028340:	f1b8 0f00 	cmp.w	r8, #0
 8028344:	f300 80b6 	bgt.w	80284b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8028348:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802834c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028350:	9b07      	ldr	r3, [sp, #28]
 8028352:	2b00      	cmp	r3, #0
 8028354:	f340 817e 	ble.w	8028654 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8028358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802835c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802835e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028362:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028366:	eef0 6a62 	vmov.f32	s13, s5
 802836a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802836e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028372:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028376:	ee16 4a90 	vmov	r4, s13
 802837a:	eef0 6a43 	vmov.f32	s13, s6
 802837e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028382:	ee16 6a90 	vmov	r6, s13
 8028386:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802838a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802838e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028392:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028396:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802839a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802839e:	ee12 2a90 	vmov	r2, s5
 80283a2:	eef0 2a47 	vmov.f32	s5, s14
 80283a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80283aa:	ee13 2a10 	vmov	r2, s6
 80283ae:	931f      	str	r3, [sp, #124]	@ 0x7c
 80283b0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80283b2:	eeb0 3a67 	vmov.f32	s6, s15
 80283b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80283ba:	9320      	str	r3, [sp, #128]	@ 0x80
 80283bc:	9b07      	ldr	r3, [sp, #28]
 80283be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80283c0:	3b01      	subs	r3, #1
 80283c2:	9307      	str	r3, [sp, #28]
 80283c4:	bf08      	it	eq
 80283c6:	4615      	moveq	r5, r2
 80283c8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80283ca:	bf18      	it	ne
 80283cc:	461d      	movne	r5, r3
 80283ce:	e6d3      	b.n	8028178 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80283d0:	2900      	cmp	r1, #0
 80283d2:	f43f af5b 	beq.w	802828c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80283d6:	eb0a 0003 	add.w	r0, sl, r3
 80283da:	0843      	lsrs	r3, r0, #1
 80283dc:	07c0      	lsls	r0, r0, #31
 80283de:	5cfb      	ldrb	r3, [r7, r3]
 80283e0:	bf54      	ite	pl
 80283e2:	f003 030f 	andpl.w	r3, r3, #15
 80283e6:	111b      	asrmi	r3, r3, #4
 80283e8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80283ec:	b2db      	uxtb	r3, r3
 80283ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80283f0:	e74c      	b.n	802828c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80283f2:	2b00      	cmp	r3, #0
 80283f4:	f43f af77 	beq.w	80282e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80283f8:	4a73      	ldr	r2, [pc, #460]	@ (80285c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80283fa:	fa1f fe83 	uxth.w	lr, r3
 80283fe:	f8b8 c000 	ldrh.w	ip, [r8]
 8028402:	43db      	mvns	r3, r3
 8028404:	6810      	ldr	r0, [r2, #0]
 8028406:	ea4f 212c 	mov.w	r1, ip, asr #8
 802840a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802840e:	b2db      	uxtb	r3, r3
 8028410:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028414:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8028418:	fb12 f20e 	smulbb	r2, r2, lr
 802841c:	b2c0      	uxtb	r0, r0
 802841e:	fb1b fb0e 	smulbb	fp, fp, lr
 8028422:	fb01 2103 	mla	r1, r1, r3, r2
 8028426:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802842a:	fb10 fe0e 	smulbb	lr, r0, lr
 802842e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028432:	b289      	uxth	r1, r1
 8028434:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028438:	fa5f fc8c 	uxtb.w	ip, ip
 802843c:	fb02 b203 	mla	r2, r2, r3, fp
 8028440:	1c48      	adds	r0, r1, #1
 8028442:	fb0c e303 	mla	r3, ip, r3, lr
 8028446:	b292      	uxth	r2, r2
 8028448:	b29b      	uxth	r3, r3
 802844a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802844e:	f102 0b01 	add.w	fp, r2, #1
 8028452:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 8028456:	1c59      	adds	r1, r3, #1
 8028458:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802845c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028460:	0952      	lsrs	r2, r2, #5
 8028462:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028466:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802846a:	4301      	orrs	r1, r0
 802846c:	4311      	orrs	r1, r2
 802846e:	f8a8 1000 	strh.w	r1, [r8]
 8028472:	e738      	b.n	80282e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028474:	f113 0b01 	adds.w	fp, r3, #1
 8028478:	f53f af35 	bmi.w	80282e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802847c:	45dc      	cmp	ip, fp
 802847e:	f6ff af32 	blt.w	80282e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028482:	f110 0b01 	adds.w	fp, r0, #1
 8028486:	f53f af2e 	bmi.w	80282e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802848a:	45de      	cmp	lr, fp
 802848c:	f6ff af2b 	blt.w	80282e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028490:	9302      	str	r3, [sp, #8]
 8028492:	fa0f f38e 	sxth.w	r3, lr
 8028496:	9a08      	ldr	r2, [sp, #32]
 8028498:	9301      	str	r3, [sp, #4]
 802849a:	fa0f f38c 	sxth.w	r3, ip
 802849e:	9105      	str	r1, [sp, #20]
 80284a0:	4641      	mov	r1, r8
 80284a2:	9300      	str	r3, [sp, #0]
 80284a4:	4653      	mov	r3, sl
 80284a6:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80284aa:	463a      	mov	r2, r7
 80284ac:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80284ae:	f7ff fd73 	bl	8027f98 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80284b2:	e718      	b.n	80282e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80284b4:	1422      	asrs	r2, r4, #16
 80284b6:	9906      	ldr	r1, [sp, #24]
 80284b8:	1433      	asrs	r3, r6, #16
 80284ba:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80284be:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80284c2:	fb01 2303 	mla	r3, r1, r3, r2
 80284c6:	085a      	lsrs	r2, r3, #1
 80284c8:	07d9      	lsls	r1, r3, #31
 80284ca:	5cba      	ldrb	r2, [r7, r2]
 80284cc:	bf54      	ite	pl
 80284ce:	f002 020f 	andpl.w	r2, r2, #15
 80284d2:	1112      	asrmi	r2, r2, #4
 80284d4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80284d8:	b2d2      	uxtb	r2, r2
 80284da:	2800      	cmp	r0, #0
 80284dc:	d063      	beq.n	80285a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80284de:	f103 0a01 	add.w	sl, r3, #1
 80284e2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80284e6:	f01a 0f01 	tst.w	sl, #1
 80284ea:	5c79      	ldrb	r1, [r7, r1]
 80284ec:	bf0c      	ite	eq
 80284ee:	f001 010f 	andeq.w	r1, r1, #15
 80284f2:	1109      	asrne	r1, r1, #4
 80284f4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80284f8:	b2c9      	uxtb	r1, r1
 80284fa:	910f      	str	r1, [sp, #60]	@ 0x3c
 80284fc:	f1bc 0f00 	cmp.w	ip, #0
 8028500:	d01a      	beq.n	8028538 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028502:	9908      	ldr	r1, [sp, #32]
 8028504:	440b      	add	r3, r1
 8028506:	0859      	lsrs	r1, r3, #1
 8028508:	f013 0f01 	tst.w	r3, #1
 802850c:	f103 0301 	add.w	r3, r3, #1
 8028510:	5c79      	ldrb	r1, [r7, r1]
 8028512:	bf0c      	ite	eq
 8028514:	f001 010f 	andeq.w	r1, r1, #15
 8028518:	1109      	asrne	r1, r1, #4
 802851a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802851e:	b2c9      	uxtb	r1, r1
 8028520:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028522:	0859      	lsrs	r1, r3, #1
 8028524:	07db      	lsls	r3, r3, #31
 8028526:	5c79      	ldrb	r1, [r7, r1]
 8028528:	bf54      	ite	pl
 802852a:	f001 010f 	andpl.w	r1, r1, #15
 802852e:	1109      	asrmi	r1, r1, #4
 8028530:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028534:	b2c9      	uxtb	r1, r1
 8028536:	9110      	str	r1, [sp, #64]	@ 0x40
 8028538:	b280      	uxth	r0, r0
 802853a:	fa1f fc8c 	uxth.w	ip, ip
 802853e:	fb00 f30c 	mul.w	r3, r0, ip
 8028542:	0100      	lsls	r0, r0, #4
 8028544:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8028548:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802854c:	1ac0      	subs	r0, r0, r3
 802854e:	fa1f fc8c 	uxth.w	ip, ip
 8028552:	b280      	uxth	r0, r0
 8028554:	eba1 010c 	sub.w	r1, r1, ip
 8028558:	fa1f fa81 	uxth.w	sl, r1
 802855c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802855e:	4348      	muls	r0, r1
 8028560:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028562:	fb02 020a 	mla	r2, r2, sl, r0
 8028566:	fb0c 2c01 	mla	ip, ip, r1, r2
 802856a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802856c:	fb03 c302 	mla	r3, r3, r2, ip
 8028570:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028574:	2bff      	cmp	r3, #255	@ 0xff
 8028576:	d12b      	bne.n	80285d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8028578:	4b13      	ldr	r3, [pc, #76]	@ (80285c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802857a:	681a      	ldr	r2, [r3, #0]
 802857c:	4b13      	ldr	r3, [pc, #76]	@ (80285cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802857e:	0951      	lsrs	r1, r2, #5
 8028580:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8028584:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028588:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802858c:	430b      	orrs	r3, r1
 802858e:	4313      	orrs	r3, r2
 8028590:	f8ae 3000 	strh.w	r3, [lr]
 8028594:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028596:	f10e 0e02 	add.w	lr, lr, #2
 802859a:	f108 38ff 	add.w	r8, r8, #4294967295
 802859e:	441c      	add	r4, r3
 80285a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80285a2:	441e      	add	r6, r3
 80285a4:	e6cc      	b.n	8028340 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80285a6:	f1bc 0f00 	cmp.w	ip, #0
 80285aa:	d0c5      	beq.n	8028538 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80285ac:	9908      	ldr	r1, [sp, #32]
 80285ae:	440b      	add	r3, r1
 80285b0:	0859      	lsrs	r1, r3, #1
 80285b2:	07db      	lsls	r3, r3, #31
 80285b4:	5c79      	ldrb	r1, [r7, r1]
 80285b6:	bf54      	ite	pl
 80285b8:	f001 010f 	andpl.w	r1, r1, #15
 80285bc:	1109      	asrmi	r1, r1, #4
 80285be:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80285c2:	b2c9      	uxtb	r1, r1
 80285c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80285c6:	e7b7      	b.n	8028538 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80285c8:	24006608 	.word	0x24006608
 80285cc:	fffff800 	.word	0xfffff800
 80285d0:	2b00      	cmp	r3, #0
 80285d2:	d0df      	beq.n	8028594 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80285d4:	4a21      	ldr	r2, [pc, #132]	@ (802865c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 80285d6:	fa1f fa83 	uxth.w	sl, r3
 80285da:	f8be c000 	ldrh.w	ip, [lr]
 80285de:	43db      	mvns	r3, r3
 80285e0:	6810      	ldr	r0, [r2, #0]
 80285e2:	ea4f 212c 	mov.w	r1, ip, asr #8
 80285e6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80285ea:	b2db      	uxtb	r3, r3
 80285ec:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80285f0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80285f4:	fb12 f20a 	smulbb	r2, r2, sl
 80285f8:	b2c0      	uxtb	r0, r0
 80285fa:	fb1b fb0a 	smulbb	fp, fp, sl
 80285fe:	fb01 2103 	mla	r1, r1, r3, r2
 8028602:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028606:	fb10 f00a 	smulbb	r0, r0, sl
 802860a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802860e:	b289      	uxth	r1, r1
 8028610:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028614:	fa5f fc8c 	uxtb.w	ip, ip
 8028618:	fb02 b203 	mla	r2, r2, r3, fp
 802861c:	fb0c 0003 	mla	r0, ip, r3, r0
 8028620:	1c4b      	adds	r3, r1, #1
 8028622:	b292      	uxth	r2, r2
 8028624:	b280      	uxth	r0, r0
 8028626:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802862a:	f100 0b01 	add.w	fp, r0, #1
 802862e:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8028632:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8028636:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802863a:	ea4b 0101 	orr.w	r1, fp, r1
 802863e:	f102 0b01 	add.w	fp, r2, #1
 8028642:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8028646:	0952      	lsrs	r2, r2, #5
 8028648:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802864c:	4311      	orrs	r1, r2
 802864e:	f8ae 1000 	strh.w	r1, [lr]
 8028652:	e79f      	b.n	8028594 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028654:	b013      	add	sp, #76	@ 0x4c
 8028656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802865a:	bf00      	nop
 802865c:	24006608 	.word	0x24006608

08028660 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8028660:	b570      	push	{r4, r5, r6, lr}
 8028662:	1208      	asrs	r0, r1, #8
 8028664:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8028668:	b29e      	uxth	r6, r3
 802866a:	1213      	asrs	r3, r2, #8
 802866c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028670:	10cc      	asrs	r4, r1, #3
 8028672:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8028676:	00c9      	lsls	r1, r1, #3
 8028678:	fb10 f006 	smulbb	r0, r0, r6
 802867c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8028680:	fb13 f305 	smulbb	r3, r3, r5
 8028684:	fb14 f406 	smulbb	r4, r4, r6
 8028688:	4418      	add	r0, r3
 802868a:	10d3      	asrs	r3, r2, #3
 802868c:	00d2      	lsls	r2, r2, #3
 802868e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8028692:	b280      	uxth	r0, r0
 8028694:	b2d2      	uxtb	r2, r2
 8028696:	fb13 f305 	smulbb	r3, r3, r5
 802869a:	fb12 f205 	smulbb	r2, r2, r5
 802869e:	441c      	add	r4, r3
 80286a0:	b2cb      	uxtb	r3, r1
 80286a2:	fb13 f306 	smulbb	r3, r3, r6
 80286a6:	b2a4      	uxth	r4, r4
 80286a8:	4413      	add	r3, r2
 80286aa:	1c42      	adds	r2, r0, #1
 80286ac:	b29b      	uxth	r3, r3
 80286ae:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80286b2:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 80286b6:	1c58      	adds	r0, r3, #1
 80286b8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80286bc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80286c0:	4310      	orrs	r0, r2
 80286c2:	1c62      	adds	r2, r4, #1
 80286c4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80286c8:	0964      	lsrs	r4, r4, #5
 80286ca:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80286ce:	4320      	orrs	r0, r4
 80286d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080286d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80286d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286d8:	b08f      	sub	sp, #60	@ 0x3c
 80286da:	461c      	mov	r4, r3
 80286dc:	460d      	mov	r5, r1
 80286de:	4616      	mov	r6, r2
 80286e0:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80286e4:	9004      	str	r0, [sp, #16]
 80286e6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80286e8:	2f00      	cmp	r7, #0
 80286ea:	f000 80f6 	beq.w	80288da <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 80286ee:	6820      	ldr	r0, [r4, #0]
 80286f0:	aa0a      	add	r2, sp, #40	@ 0x28
 80286f2:	6861      	ldr	r1, [r4, #4]
 80286f4:	f04f 0802 	mov.w	r8, #2
 80286f8:	3604      	adds	r6, #4
 80286fa:	c203      	stmia	r2!, {r0, r1}
 80286fc:	6818      	ldr	r0, [r3, #0]
 80286fe:	aa0c      	add	r2, sp, #48	@ 0x30
 8028700:	6859      	ldr	r1, [r3, #4]
 8028702:	c203      	stmia	r2!, {r0, r1}
 8028704:	a80a      	add	r0, sp, #40	@ 0x28
 8028706:	f7ee fbdb 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802870a:	4621      	mov	r1, r4
 802870c:	a80c      	add	r0, sp, #48	@ 0x30
 802870e:	f7ee fc1b 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028712:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8028716:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802871a:	f002 0301 	and.w	r3, r2, #1
 802871e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8028722:	9306      	str	r3, [sp, #24]
 8028724:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028728:	f003 0101 	and.w	r1, r3, #1
 802872c:	9105      	str	r1, [sp, #20]
 802872e:	9805      	ldr	r0, [sp, #20]
 8028730:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8028734:	4403      	add	r3, r0
 8028736:	fb01 2303 	mla	r3, r1, r3, r2
 802873a:	fb93 f3f8 	sdiv	r3, r3, r8
 802873e:	441d      	add	r5, r3
 8028740:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8028744:	441a      	add	r2, r3
 8028746:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802874a:	4419      	add	r1, r3
 802874c:	4b64      	ldr	r3, [pc, #400]	@ (80288e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802874e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8028752:	6818      	ldr	r0, [r3, #0]
 8028754:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8028758:	6803      	ldr	r3, [r0, #0]
 802875a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802875c:	4798      	blx	r3
 802875e:	4a61      	ldr	r2, [pc, #388]	@ (80288e4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8028760:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8028764:	2fff      	cmp	r7, #255	@ 0xff
 8028766:	8813      	ldrh	r3, [r2, #0]
 8028768:	4611      	mov	r1, r2
 802876a:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 802876e:	fb03 fb0b 	mul.w	fp, r3, fp
 8028772:	fb03 a404 	mla	r4, r3, r4, sl
 8028776:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802877a:	d06b      	beq.n	8028854 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 802877c:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 8028780:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8028784:	9303      	str	r3, [sp, #12]
 8028786:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802878a:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802878e:	9b07      	ldr	r3, [sp, #28]
 8028790:	42a3      	cmp	r3, r4
 8028792:	f240 809d 	bls.w	80288d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8028796:	9b06      	ldr	r3, [sp, #24]
 8028798:	2b00      	cmp	r3, #0
 802879a:	d039      	beq.n	8028810 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802879c:	782b      	ldrb	r3, [r5, #0]
 802879e:	f105 0801 	add.w	r8, r5, #1
 80287a2:	f109 3bff 	add.w	fp, r9, #4294967295
 80287a6:	8822      	ldrh	r2, [r4, #0]
 80287a8:	f003 030f 	and.w	r3, r3, #15
 80287ac:	9804      	ldr	r0, [sp, #16]
 80287ae:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80287b2:	9b03      	ldr	r3, [sp, #12]
 80287b4:	9300      	str	r3, [sp, #0]
 80287b6:	463b      	mov	r3, r7
 80287b8:	f7ff ff52 	bl	8028660 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80287bc:	f824 0b02 	strh.w	r0, [r4], #2
 80287c0:	f1bb 0f01 	cmp.w	fp, #1
 80287c4:	46a2      	mov	sl, r4
 80287c6:	f104 0404 	add.w	r4, r4, #4
 80287ca:	dd24      	ble.n	8028816 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 80287cc:	f898 3000 	ldrb.w	r3, [r8]
 80287d0:	f1ab 0b02 	sub.w	fp, fp, #2
 80287d4:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80287d8:	091b      	lsrs	r3, r3, #4
 80287da:	9804      	ldr	r0, [sp, #16]
 80287dc:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80287e0:	9b03      	ldr	r3, [sp, #12]
 80287e2:	9300      	str	r3, [sp, #0]
 80287e4:	463b      	mov	r3, r7
 80287e6:	f7ff ff3b 	bl	8028660 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80287ea:	f824 0c04 	strh.w	r0, [r4, #-4]
 80287ee:	f818 3b01 	ldrb.w	r3, [r8], #1
 80287f2:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80287f6:	f003 030f 	and.w	r3, r3, #15
 80287fa:	9804      	ldr	r0, [sp, #16]
 80287fc:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028800:	9b03      	ldr	r3, [sp, #12]
 8028802:	9300      	str	r3, [sp, #0]
 8028804:	463b      	mov	r3, r7
 8028806:	f7ff ff2b 	bl	8028660 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802880a:	f824 0c02 	strh.w	r0, [r4, #-2]
 802880e:	e7d7      	b.n	80287c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8028810:	46a8      	mov	r8, r5
 8028812:	46cb      	mov	fp, r9
 8028814:	e7d4      	b.n	80287c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 8028816:	d10e      	bne.n	8028836 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 8028818:	f898 3000 	ldrb.w	r3, [r8]
 802881c:	f8ba 2000 	ldrh.w	r2, [sl]
 8028820:	091b      	lsrs	r3, r3, #4
 8028822:	9804      	ldr	r0, [sp, #16]
 8028824:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028828:	9b03      	ldr	r3, [sp, #12]
 802882a:	9300      	str	r3, [sp, #0]
 802882c:	463b      	mov	r3, r7
 802882e:	f7ff ff17 	bl	8028660 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028832:	f82a 0b02 	strh.w	r0, [sl], #2
 8028836:	9b08      	ldr	r3, [sp, #32]
 8028838:	9a05      	ldr	r2, [sp, #20]
 802883a:	881c      	ldrh	r4, [r3, #0]
 802883c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028840:	eba4 0409 	sub.w	r4, r4, r9
 8028844:	4413      	add	r3, r2
 8028846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028848:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802884c:	fb93 f3f2 	sdiv	r3, r3, r2
 8028850:	441d      	add	r5, r3
 8028852:	e79c      	b.n	802878e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 8028854:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8028858:	45a3      	cmp	fp, r4
 802885a:	d939      	bls.n	80288d0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802885c:	9b06      	ldr	r3, [sp, #24]
 802885e:	b1fb      	cbz	r3, 80288a0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8028860:	782b      	ldrb	r3, [r5, #0]
 8028862:	1c6a      	adds	r2, r5, #1
 8028864:	f109 30ff 	add.w	r0, r9, #4294967295
 8028868:	3402      	adds	r4, #2
 802886a:	f003 030f 	and.w	r3, r3, #15
 802886e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028872:	f824 3c02 	strh.w	r3, [r4, #-2]
 8028876:	2801      	cmp	r0, #1
 8028878:	4623      	mov	r3, r4
 802887a:	f104 0404 	add.w	r4, r4, #4
 802887e:	dd12      	ble.n	80288a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8028880:	7813      	ldrb	r3, [r2, #0]
 8028882:	3802      	subs	r0, #2
 8028884:	091b      	lsrs	r3, r3, #4
 8028886:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802888a:	f824 3c04 	strh.w	r3, [r4, #-4]
 802888e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028892:	f003 030f 	and.w	r3, r3, #15
 8028896:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802889a:	f824 3c02 	strh.w	r3, [r4, #-2]
 802889e:	e7ea      	b.n	8028876 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 80288a0:	462a      	mov	r2, r5
 80288a2:	4648      	mov	r0, r9
 80288a4:	e7e7      	b.n	8028876 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 80288a6:	d106      	bne.n	80288b6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 80288a8:	7812      	ldrb	r2, [r2, #0]
 80288aa:	3302      	adds	r3, #2
 80288ac:	0912      	lsrs	r2, r2, #4
 80288ae:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80288b2:	f823 2c02 	strh.w	r2, [r3, #-2]
 80288b6:	880c      	ldrh	r4, [r1, #0]
 80288b8:	9a05      	ldr	r2, [sp, #20]
 80288ba:	eba4 0409 	sub.w	r4, r4, r9
 80288be:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80288c2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80288c6:	4413      	add	r3, r2
 80288c8:	fb93 f3f8 	sdiv	r3, r3, r8
 80288cc:	441d      	add	r5, r3
 80288ce:	e7c3      	b.n	8028858 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 80288d0:	4b03      	ldr	r3, [pc, #12]	@ (80288e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80288d2:	6818      	ldr	r0, [r3, #0]
 80288d4:	6803      	ldr	r3, [r0, #0]
 80288d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80288d8:	4798      	blx	r3
 80288da:	b00f      	add	sp, #60	@ 0x3c
 80288dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288e0:	24006600 	.word	0x24006600
 80288e4:	240065fa 	.word	0x240065fa

080288e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 80288e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80288ea:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80288ee:	0a0f      	lsrs	r7, r1, #8
 80288f0:	2dff      	cmp	r5, #255	@ 0xff
 80288f2:	d10c      	bne.n	802890e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80288f4:	2bff      	cmp	r3, #255	@ 0xff
 80288f6:	d10a      	bne.n	802890e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80288f8:	0948      	lsrs	r0, r1, #5
 80288fa:	4b25      	ldr	r3, [pc, #148]	@ (8028990 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 80288fc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8028900:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028904:	403b      	ands	r3, r7
 8028906:	4318      	orrs	r0, r3
 8028908:	4308      	orrs	r0, r1
 802890a:	b280      	uxth	r0, r0
 802890c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802890e:	fb15 f503 	smulbb	r5, r5, r3
 8028912:	1214      	asrs	r4, r2, #8
 8028914:	10d6      	asrs	r6, r2, #3
 8028916:	b2ab      	uxth	r3, r5
 8028918:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802891c:	00d0      	lsls	r0, r2, #3
 802891e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8028922:	1c5d      	adds	r5, r3, #1
 8028924:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8028928:	b2c0      	uxtb	r0, r0
 802892a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802892e:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8028932:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8028936:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802893a:	fa1f fc85 	uxth.w	ip, r5
 802893e:	43ed      	mvns	r5, r5
 8028940:	fb12 f20c 	smulbb	r2, r2, ip
 8028944:	b2eb      	uxtb	r3, r5
 8028946:	b2fd      	uxtb	r5, r7
 8028948:	fb04 2403 	mla	r4, r4, r3, r2
 802894c:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8028950:	fb15 f50c 	smulbb	r5, r5, ip
 8028954:	b2c8      	uxtb	r0, r1
 8028956:	b2a4      	uxth	r4, r4
 8028958:	fb10 f00c 	smulbb	r0, r0, ip
 802895c:	fb06 5503 	mla	r5, r6, r3, r5
 8028960:	fb02 0003 	mla	r0, r2, r3, r0
 8028964:	b2ad      	uxth	r5, r5
 8028966:	b283      	uxth	r3, r0
 8028968:	1c60      	adds	r0, r4, #1
 802896a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802896e:	1c58      	adds	r0, r3, #1
 8028970:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028974:	1c6b      	adds	r3, r5, #1
 8028976:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802897a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802897e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028982:	096d      	lsrs	r5, r5, #5
 8028984:	4320      	orrs	r0, r4
 8028986:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802898a:	4328      	orrs	r0, r5
 802898c:	e7be      	b.n	802890c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802898e:	bf00      	nop
 8028990:	00fff800 	.word	0x00fff800

08028994 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8028994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028998:	461c      	mov	r4, r3
 802899a:	b08d      	sub	sp, #52	@ 0x34
 802899c:	460d      	mov	r5, r1
 802899e:	4616      	mov	r6, r2
 80289a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80289a2:	4680      	mov	r8, r0
 80289a4:	6861      	ldr	r1, [r4, #4]
 80289a6:	aa08      	add	r2, sp, #32
 80289a8:	6820      	ldr	r0, [r4, #0]
 80289aa:	f04f 0a02 	mov.w	sl, #2
 80289ae:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 80289b2:	3604      	adds	r6, #4
 80289b4:	c203      	stmia	r2!, {r0, r1}
 80289b6:	6818      	ldr	r0, [r3, #0]
 80289b8:	aa0a      	add	r2, sp, #40	@ 0x28
 80289ba:	6859      	ldr	r1, [r3, #4]
 80289bc:	c203      	stmia	r2!, {r0, r1}
 80289be:	a808      	add	r0, sp, #32
 80289c0:	f7ee fa7e 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80289c4:	4621      	mov	r1, r4
 80289c6:	a80a      	add	r0, sp, #40	@ 0x28
 80289c8:	f7ee fabe 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80289cc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 80289d0:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 80289d4:	f002 0301 	and.w	r3, r2, #1
 80289d8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 80289dc:	9303      	str	r3, [sp, #12]
 80289de:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80289e2:	f003 0101 	and.w	r1, r3, #1
 80289e6:	9102      	str	r1, [sp, #8]
 80289e8:	9802      	ldr	r0, [sp, #8]
 80289ea:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80289ee:	4403      	add	r3, r0
 80289f0:	fb01 2303 	mla	r3, r1, r3, r2
 80289f4:	fb93 f3fa 	sdiv	r3, r3, sl
 80289f8:	441d      	add	r5, r3
 80289fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80289fe:	441a      	add	r2, r3
 8028a00:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8028a04:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8028a08:	4419      	add	r1, r3
 8028a0a:	4a3e      	ldr	r2, [pc, #248]	@ (8028b04 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8028a0c:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 8028a10:	6810      	ldr	r0, [r2, #0]
 8028a12:	9205      	str	r2, [sp, #20]
 8028a14:	6803      	ldr	r3, [r0, #0]
 8028a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028a18:	4798      	blx	r3
 8028a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8028b08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8028a1c:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8028a20:	8819      	ldrh	r1, [r3, #0]
 8028a22:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8028a26:	434f      	muls	r7, r1
 8028a28:	fb01 c404 	mla	r4, r1, r4, ip
 8028a2c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028a30:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8028a34:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8028a38:	9204      	str	r2, [sp, #16]
 8028a3a:	9b04      	ldr	r3, [sp, #16]
 8028a3c:	429c      	cmp	r4, r3
 8028a3e:	d258      	bcs.n	8028af2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8028a40:	9b03      	ldr	r3, [sp, #12]
 8028a42:	2b00      	cmp	r3, #0
 8028a44:	d034      	beq.n	8028ab0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8028a46:	782b      	ldrb	r3, [r5, #0]
 8028a48:	1c6f      	adds	r7, r5, #1
 8028a4a:	f003 030f 	and.w	r3, r3, #15
 8028a4e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028a52:	0e0b      	lsrs	r3, r1, #24
 8028a54:	d006      	beq.n	8028a64 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8028a56:	8822      	ldrh	r2, [r4, #0]
 8028a58:	4640      	mov	r0, r8
 8028a5a:	9300      	str	r3, [sp, #0]
 8028a5c:	464b      	mov	r3, r9
 8028a5e:	f7ff ff43 	bl	80288e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028a62:	8020      	strh	r0, [r4, #0]
 8028a64:	3402      	adds	r4, #2
 8028a66:	f10b 3aff 	add.w	sl, fp, #4294967295
 8028a6a:	f1ba 0f01 	cmp.w	sl, #1
 8028a6e:	dd22      	ble.n	8028ab6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8028a70:	783b      	ldrb	r3, [r7, #0]
 8028a72:	091b      	lsrs	r3, r3, #4
 8028a74:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028a78:	0e0b      	lsrs	r3, r1, #24
 8028a7a:	d006      	beq.n	8028a8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8028a7c:	8822      	ldrh	r2, [r4, #0]
 8028a7e:	4640      	mov	r0, r8
 8028a80:	9300      	str	r3, [sp, #0]
 8028a82:	464b      	mov	r3, r9
 8028a84:	f7ff ff30 	bl	80288e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028a88:	8020      	strh	r0, [r4, #0]
 8028a8a:	f817 3b01 	ldrb.w	r3, [r7], #1
 8028a8e:	f003 030f 	and.w	r3, r3, #15
 8028a92:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028a96:	0e0b      	lsrs	r3, r1, #24
 8028a98:	d006      	beq.n	8028aa8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8028a9a:	8862      	ldrh	r2, [r4, #2]
 8028a9c:	4640      	mov	r0, r8
 8028a9e:	9300      	str	r3, [sp, #0]
 8028aa0:	464b      	mov	r3, r9
 8028aa2:	f7ff ff21 	bl	80288e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028aa6:	8060      	strh	r0, [r4, #2]
 8028aa8:	3404      	adds	r4, #4
 8028aaa:	f1aa 0a02 	sub.w	sl, sl, #2
 8028aae:	e7dc      	b.n	8028a6a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8028ab0:	462f      	mov	r7, r5
 8028ab2:	46da      	mov	sl, fp
 8028ab4:	e7d9      	b.n	8028a6a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8028ab6:	d10d      	bne.n	8028ad4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8028ab8:	783b      	ldrb	r3, [r7, #0]
 8028aba:	091b      	lsrs	r3, r3, #4
 8028abc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028ac0:	0e0b      	lsrs	r3, r1, #24
 8028ac2:	d006      	beq.n	8028ad2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8028ac4:	8822      	ldrh	r2, [r4, #0]
 8028ac6:	4640      	mov	r0, r8
 8028ac8:	9300      	str	r3, [sp, #0]
 8028aca:	464b      	mov	r3, r9
 8028acc:	f7ff ff0c 	bl	80288e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028ad0:	8020      	strh	r0, [r4, #0]
 8028ad2:	3402      	adds	r4, #2
 8028ad4:	9b06      	ldr	r3, [sp, #24]
 8028ad6:	9a02      	ldr	r2, [sp, #8]
 8028ad8:	881b      	ldrh	r3, [r3, #0]
 8028ada:	eba3 030b 	sub.w	r3, r3, fp
 8028ade:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8028ae2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8028ae6:	4413      	add	r3, r2
 8028ae8:	9a07      	ldr	r2, [sp, #28]
 8028aea:	fb93 f3f2 	sdiv	r3, r3, r2
 8028aee:	441d      	add	r5, r3
 8028af0:	e7a3      	b.n	8028a3a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8028af2:	9b05      	ldr	r3, [sp, #20]
 8028af4:	6818      	ldr	r0, [r3, #0]
 8028af6:	6803      	ldr	r3, [r0, #0]
 8028af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028afa:	4798      	blx	r3
 8028afc:	b00d      	add	sp, #52	@ 0x34
 8028afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b02:	bf00      	nop
 8028b04:	24006600 	.word	0x24006600
 8028b08:	240065fa 	.word	0x240065fa

08028b0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8028b0c:	b570      	push	{r4, r5, r6, lr}
 8028b0e:	1214      	asrs	r4, r2, #8
 8028b10:	788d      	ldrb	r5, [r1, #2]
 8028b12:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8028b16:	10d0      	asrs	r0, r2, #3
 8028b18:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8028b1c:	00d2      	lsls	r2, r2, #3
 8028b1e:	fb15 f503 	smulbb	r5, r5, r3
 8028b22:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8028b26:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8028b2a:	b2d2      	uxtb	r2, r2
 8028b2c:	fb04 5506 	mla	r5, r4, r6, r5
 8028b30:	784c      	ldrb	r4, [r1, #1]
 8028b32:	7809      	ldrb	r1, [r1, #0]
 8028b34:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8028b38:	fb14 f403 	smulbb	r4, r4, r3
 8028b3c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8028b40:	fb11 f303 	smulbb	r3, r1, r3
 8028b44:	b2ad      	uxth	r5, r5
 8028b46:	fb00 4406 	mla	r4, r0, r6, r4
 8028b4a:	fb02 3306 	mla	r3, r2, r6, r3
 8028b4e:	1c68      	adds	r0, r5, #1
 8028b50:	b2a4      	uxth	r4, r4
 8028b52:	b29b      	uxth	r3, r3
 8028b54:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8028b58:	1c62      	adds	r2, r4, #1
 8028b5a:	1c58      	adds	r0, r3, #1
 8028b5c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028b60:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028b64:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028b68:	0964      	lsrs	r4, r4, #5
 8028b6a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028b6e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8028b72:	4328      	orrs	r0, r5
 8028b74:	4320      	orrs	r0, r4
 8028b76:	bd70      	pop	{r4, r5, r6, pc}

08028b78 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8028b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b7c:	b08f      	sub	sp, #60	@ 0x3c
 8028b7e:	461c      	mov	r4, r3
 8028b80:	4682      	mov	sl, r0
 8028b82:	460e      	mov	r6, r1
 8028b84:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8028b88:	4615      	mov	r5, r2
 8028b8a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028b8c:	2f00      	cmp	r7, #0
 8028b8e:	f000 8141 	beq.w	8028e14 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 8028b92:	6820      	ldr	r0, [r4, #0]
 8028b94:	aa0a      	add	r2, sp, #40	@ 0x28
 8028b96:	6861      	ldr	r1, [r4, #4]
 8028b98:	f04f 0802 	mov.w	r8, #2
 8028b9c:	3504      	adds	r5, #4
 8028b9e:	c203      	stmia	r2!, {r0, r1}
 8028ba0:	6818      	ldr	r0, [r3, #0]
 8028ba2:	aa0c      	add	r2, sp, #48	@ 0x30
 8028ba4:	6859      	ldr	r1, [r3, #4]
 8028ba6:	c203      	stmia	r2!, {r0, r1}
 8028ba8:	a80a      	add	r0, sp, #40	@ 0x28
 8028baa:	f7ee f989 	bl	8016ec0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028bae:	4621      	mov	r1, r4
 8028bb0:	a80c      	add	r0, sp, #48	@ 0x30
 8028bb2:	f7ee f9c9 	bl	8016f48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028bb6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8028bba:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8028bbe:	f002 0301 	and.w	r3, r2, #1
 8028bc2:	9306      	str	r3, [sp, #24]
 8028bc4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028bc8:	f003 0101 	and.w	r1, r3, #1
 8028bcc:	9105      	str	r1, [sp, #20]
 8028bce:	9805      	ldr	r0, [sp, #20]
 8028bd0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8028bd4:	4403      	add	r3, r0
 8028bd6:	fb01 2303 	mla	r3, r1, r3, r2
 8028bda:	fb93 f3f8 	sdiv	r3, r3, r8
 8028bde:	441e      	add	r6, r3
 8028be0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8028be4:	441a      	add	r2, r3
 8028be6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8028bea:	4419      	add	r1, r3
 8028bec:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8028bf0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8028bf4:	9303      	str	r3, [sp, #12]
 8028bf6:	4b89      	ldr	r3, [pc, #548]	@ (8028e1c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8028bf8:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8028bfc:	6818      	ldr	r0, [r3, #0]
 8028bfe:	6803      	ldr	r3, [r0, #0]
 8028c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028c02:	4798      	blx	r3
 8028c04:	4a86      	ldr	r2, [pc, #536]	@ (8028e20 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8028c06:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8028c0a:	2fff      	cmp	r7, #255	@ 0xff
 8028c0c:	8813      	ldrh	r3, [r2, #0]
 8028c0e:	4694      	mov	ip, r2
 8028c10:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8028c14:	fb03 9404 	mla	r4, r3, r4, r9
 8028c18:	fb03 f30b 	mul.w	r3, r3, fp
 8028c1c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028c20:	d071      	beq.n	8028d06 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8028c22:	43f9      	mvns	r1, r7
 8028c24:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8028c28:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8028c2c:	b2c9      	uxtb	r1, r1
 8028c2e:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8028c32:	9104      	str	r1, [sp, #16]
 8028c34:	9b07      	ldr	r3, [sp, #28]
 8028c36:	42a3      	cmp	r3, r4
 8028c38:	f240 80e7 	bls.w	8028e0a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8028c3c:	9b06      	ldr	r3, [sp, #24]
 8028c3e:	2b00      	cmp	r3, #0
 8028c40:	d03d      	beq.n	8028cbe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 8028c42:	7831      	ldrb	r1, [r6, #0]
 8028c44:	4650      	mov	r0, sl
 8028c46:	9b04      	ldr	r3, [sp, #16]
 8028c48:	f106 0801 	add.w	r8, r6, #1
 8028c4c:	f001 010f 	and.w	r1, r1, #15
 8028c50:	8822      	ldrh	r2, [r4, #0]
 8028c52:	9300      	str	r3, [sp, #0]
 8028c54:	463b      	mov	r3, r7
 8028c56:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028c5a:	4429      	add	r1, r5
 8028c5c:	f7ff ff56 	bl	8028b0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028c60:	9b03      	ldr	r3, [sp, #12]
 8028c62:	f824 0b02 	strh.w	r0, [r4], #2
 8028c66:	f103 3bff 	add.w	fp, r3, #4294967295
 8028c6a:	f1bb 0f01 	cmp.w	fp, #1
 8028c6e:	46a1      	mov	r9, r4
 8028c70:	f104 0404 	add.w	r4, r4, #4
 8028c74:	dd27      	ble.n	8028cc6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 8028c76:	f898 1000 	ldrb.w	r1, [r8]
 8028c7a:	4650      	mov	r0, sl
 8028c7c:	9b04      	ldr	r3, [sp, #16]
 8028c7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8028c82:	0909      	lsrs	r1, r1, #4
 8028c84:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8028c88:	9300      	str	r3, [sp, #0]
 8028c8a:	463b      	mov	r3, r7
 8028c8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028c90:	4429      	add	r1, r5
 8028c92:	f7ff ff3b 	bl	8028b0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028c96:	f824 0c04 	strh.w	r0, [r4, #-4]
 8028c9a:	f818 1b01 	ldrb.w	r1, [r8], #1
 8028c9e:	4650      	mov	r0, sl
 8028ca0:	9b04      	ldr	r3, [sp, #16]
 8028ca2:	f001 010f 	and.w	r1, r1, #15
 8028ca6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8028caa:	9300      	str	r3, [sp, #0]
 8028cac:	463b      	mov	r3, r7
 8028cae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028cb2:	4429      	add	r1, r5
 8028cb4:	f7ff ff2a 	bl	8028b0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028cb8:	f824 0c02 	strh.w	r0, [r4, #-2]
 8028cbc:	e7d5      	b.n	8028c6a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8028cbe:	46b0      	mov	r8, r6
 8028cc0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8028cc4:	e7d1      	b.n	8028c6a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8028cc6:	d10f      	bne.n	8028ce8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 8028cc8:	f898 1000 	ldrb.w	r1, [r8]
 8028ccc:	4650      	mov	r0, sl
 8028cce:	9b04      	ldr	r3, [sp, #16]
 8028cd0:	0909      	lsrs	r1, r1, #4
 8028cd2:	f8b9 2000 	ldrh.w	r2, [r9]
 8028cd6:	9300      	str	r3, [sp, #0]
 8028cd8:	463b      	mov	r3, r7
 8028cda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028cde:	4429      	add	r1, r5
 8028ce0:	f7ff ff14 	bl	8028b0c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028ce4:	f829 0b02 	strh.w	r0, [r9], #2
 8028ce8:	9b08      	ldr	r3, [sp, #32]
 8028cea:	9a05      	ldr	r2, [sp, #20]
 8028cec:	881c      	ldrh	r4, [r3, #0]
 8028cee:	9b03      	ldr	r3, [sp, #12]
 8028cf0:	1ae4      	subs	r4, r4, r3
 8028cf2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028cf6:	4413      	add	r3, r2
 8028cf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028cfa:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8028cfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8028d02:	441e      	add	r6, r3
 8028d04:	e796      	b.n	8028c34 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 8028d06:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8028d0a:	4f46      	ldr	r7, [pc, #280]	@ (8028e24 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8028d0c:	42a3      	cmp	r3, r4
 8028d0e:	d97c      	bls.n	8028e0a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8028d10:	9a06      	ldr	r2, [sp, #24]
 8028d12:	2a00      	cmp	r2, #0
 8028d14:	d054      	beq.n	8028dc0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8028d16:	7830      	ldrb	r0, [r6, #0]
 8028d18:	1c71      	adds	r1, r6, #1
 8028d1a:	f000 000f 	and.w	r0, r0, #15
 8028d1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028d22:	eb05 0e00 	add.w	lr, r5, r0
 8028d26:	5c28      	ldrb	r0, [r5, r0]
 8028d28:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8028d2c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8028d30:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8028d34:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028d38:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8028d3c:	ea42 020e 	orr.w	r2, r2, lr
 8028d40:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8028d44:	f824 2b02 	strh.w	r2, [r4], #2
 8028d48:	9a03      	ldr	r2, [sp, #12]
 8028d4a:	f102 3eff 	add.w	lr, r2, #4294967295
 8028d4e:	f1be 0f01 	cmp.w	lr, #1
 8028d52:	4620      	mov	r0, r4
 8028d54:	f104 0404 	add.w	r4, r4, #4
 8028d58:	dd36      	ble.n	8028dc8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 8028d5a:	7808      	ldrb	r0, [r1, #0]
 8028d5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8028d60:	0900      	lsrs	r0, r0, #4
 8028d62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028d66:	eb05 0a00 	add.w	sl, r5, r0
 8028d6a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8028d6e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8028d72:	00d2      	lsls	r2, r2, #3
 8028d74:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8028d78:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028d7c:	ea49 0202 	orr.w	r2, r9, r2
 8028d80:	f815 9000 	ldrb.w	r9, [r5, r0]
 8028d84:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8028d88:	f824 2c04 	strh.w	r2, [r4, #-4]
 8028d8c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8028d90:	f000 000f 	and.w	r0, r0, #15
 8028d94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028d98:	eb05 0a00 	add.w	sl, r5, r0
 8028d9c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8028da0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8028da4:	00d2      	lsls	r2, r2, #3
 8028da6:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8028daa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028dae:	ea49 0202 	orr.w	r2, r9, r2
 8028db2:	f815 9000 	ldrb.w	r9, [r5, r0]
 8028db6:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8028dba:	f824 2c02 	strh.w	r2, [r4, #-2]
 8028dbe:	e7c6      	b.n	8028d4e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8028dc0:	4631      	mov	r1, r6
 8028dc2:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8028dc6:	e7c2      	b.n	8028d4e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8028dc8:	d111      	bne.n	8028dee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 8028dca:	7809      	ldrb	r1, [r1, #0]
 8028dcc:	0909      	lsrs	r1, r1, #4
 8028dce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028dd2:	186c      	adds	r4, r5, r1
 8028dd4:	5c69      	ldrb	r1, [r5, r1]
 8028dd6:	78a2      	ldrb	r2, [r4, #2]
 8028dd8:	7864      	ldrb	r4, [r4, #1]
 8028dda:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8028dde:	00e4      	lsls	r4, r4, #3
 8028de0:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8028de4:	4322      	orrs	r2, r4
 8028de6:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8028dea:	f820 2b02 	strh.w	r2, [r0], #2
 8028dee:	9a03      	ldr	r2, [sp, #12]
 8028df0:	f8bc 4000 	ldrh.w	r4, [ip]
 8028df4:	9905      	ldr	r1, [sp, #20]
 8028df6:	1aa4      	subs	r4, r4, r2
 8028df8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8028dfc:	440a      	add	r2, r1
 8028dfe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028e02:	fb92 f2f8 	sdiv	r2, r2, r8
 8028e06:	4416      	add	r6, r2
 8028e08:	e780      	b.n	8028d0c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 8028e0a:	4b04      	ldr	r3, [pc, #16]	@ (8028e1c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8028e0c:	6818      	ldr	r0, [r3, #0]
 8028e0e:	6803      	ldr	r3, [r0, #0]
 8028e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028e12:	4798      	blx	r3
 8028e14:	b00f      	add	sp, #60	@ 0x3c
 8028e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e1a:	bf00      	nop
 8028e1c:	24006600 	.word	0x24006600
 8028e20:	240065fa 	.word	0x240065fa
 8028e24:	fffff800 	.word	0xfffff800

08028e28 <CRC_Lock>:
 8028e28:	4a2d      	ldr	r2, [pc, #180]	@ (8028ee0 <CRC_Lock+0xb8>)
 8028e2a:	b530      	push	{r4, r5, lr}
 8028e2c:	6813      	ldr	r3, [r2, #0]
 8028e2e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8028e32:	f023 0301 	bic.w	r3, r3, #1
 8028e36:	6013      	str	r3, [r2, #0]
 8028e38:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8028e3c:	4b29      	ldr	r3, [pc, #164]	@ (8028ee4 <CRC_Lock+0xbc>)
 8028e3e:	681c      	ldr	r4, [r3, #0]
 8028e40:	4014      	ands	r4, r2
 8028e42:	42ac      	cmp	r4, r5
 8028e44:	d005      	beq.n	8028e52 <CRC_Lock+0x2a>
 8028e46:	681c      	ldr	r4, [r3, #0]
 8028e48:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8028e4c:	4014      	ands	r4, r2
 8028e4e:	42ac      	cmp	r4, r5
 8028e50:	d125      	bne.n	8028e9e <CRC_Lock+0x76>
 8028e52:	4b25      	ldr	r3, [pc, #148]	@ (8028ee8 <CRC_Lock+0xc0>)
 8028e54:	681b      	ldr	r3, [r3, #0]
 8028e56:	2b00      	cmp	r3, #0
 8028e58:	d139      	bne.n	8028ece <CRC_Lock+0xa6>
 8028e5a:	4b24      	ldr	r3, [pc, #144]	@ (8028eec <CRC_Lock+0xc4>)
 8028e5c:	681a      	ldr	r2, [r3, #0]
 8028e5e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028e62:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8028e66:	d00d      	beq.n	8028e84 <CRC_Lock+0x5c>
 8028e68:	681a      	ldr	r2, [r3, #0]
 8028e6a:	f240 4483 	movw	r4, #1155	@ 0x483
 8028e6e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028e72:	42a2      	cmp	r2, r4
 8028e74:	d006      	beq.n	8028e84 <CRC_Lock+0x5c>
 8028e76:	681b      	ldr	r3, [r3, #0]
 8028e78:	f240 4285 	movw	r2, #1157	@ 0x485
 8028e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028e80:	4293      	cmp	r3, r2
 8028e82:	d124      	bne.n	8028ece <CRC_Lock+0xa6>
 8028e84:	4b1a      	ldr	r3, [pc, #104]	@ (8028ef0 <CRC_Lock+0xc8>)
 8028e86:	2201      	movs	r2, #1
 8028e88:	601a      	str	r2, [r3, #0]
 8028e8a:	681a      	ldr	r2, [r3, #0]
 8028e8c:	2a00      	cmp	r2, #0
 8028e8e:	d1fc      	bne.n	8028e8a <CRC_Lock+0x62>
 8028e90:	4b18      	ldr	r3, [pc, #96]	@ (8028ef4 <CRC_Lock+0xcc>)
 8028e92:	6018      	str	r0, [r3, #0]
 8028e94:	6818      	ldr	r0, [r3, #0]
 8028e96:	1a43      	subs	r3, r0, r1
 8028e98:	4258      	negs	r0, r3
 8028e9a:	4158      	adcs	r0, r3
 8028e9c:	e00e      	b.n	8028ebc <CRC_Lock+0x94>
 8028e9e:	681b      	ldr	r3, [r3, #0]
 8028ea0:	4013      	ands	r3, r2
 8028ea2:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8028ea6:	4293      	cmp	r3, r2
 8028ea8:	d111      	bne.n	8028ece <CRC_Lock+0xa6>
 8028eaa:	4b13      	ldr	r3, [pc, #76]	@ (8028ef8 <CRC_Lock+0xd0>)
 8028eac:	f240 4286 	movw	r2, #1158	@ 0x486
 8028eb0:	681b      	ldr	r3, [r3, #0]
 8028eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028eb6:	4293      	cmp	r3, r2
 8028eb8:	d001      	beq.n	8028ebe <CRC_Lock+0x96>
 8028eba:	2000      	movs	r0, #0
 8028ebc:	bd30      	pop	{r4, r5, pc}
 8028ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8028efc <CRC_Lock+0xd4>)
 8028ec0:	2201      	movs	r2, #1
 8028ec2:	601a      	str	r2, [r3, #0]
 8028ec4:	681a      	ldr	r2, [r3, #0]
 8028ec6:	2a00      	cmp	r2, #0
 8028ec8:	d1fc      	bne.n	8028ec4 <CRC_Lock+0x9c>
 8028eca:	4b0d      	ldr	r3, [pc, #52]	@ (8028f00 <CRC_Lock+0xd8>)
 8028ecc:	e7e1      	b.n	8028e92 <CRC_Lock+0x6a>
 8028ece:	4b0d      	ldr	r3, [pc, #52]	@ (8028f04 <CRC_Lock+0xdc>)
 8028ed0:	2201      	movs	r2, #1
 8028ed2:	601a      	str	r2, [r3, #0]
 8028ed4:	681a      	ldr	r2, [r3, #0]
 8028ed6:	2a00      	cmp	r2, #0
 8028ed8:	d1fc      	bne.n	8028ed4 <CRC_Lock+0xac>
 8028eda:	4b0b      	ldr	r3, [pc, #44]	@ (8028f08 <CRC_Lock+0xe0>)
 8028edc:	e7d9      	b.n	8028e92 <CRC_Lock+0x6a>
 8028ede:	bf00      	nop
 8028ee0:	e0002000 	.word	0xe0002000
 8028ee4:	e000ed00 	.word	0xe000ed00
 8028ee8:	e0042000 	.word	0xe0042000
 8028eec:	5c001000 	.word	0x5c001000
 8028ef0:	58024c08 	.word	0x58024c08
 8028ef4:	58024c00 	.word	0x58024c00
 8028ef8:	46008ff0 	.word	0x46008ff0
 8028efc:	46024c08 	.word	0x46024c08
 8028f00:	46024c00 	.word	0x46024c00
 8028f04:	40023008 	.word	0x40023008
 8028f08:	40023000 	.word	0x40023000

08028f0c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028f0c:	6101      	str	r1, [r0, #16]
 8028f0e:	4770      	bx	lr

08028f10 <_ZN8touchgfx8Gestures4tickEv>:
 8028f10:	7b83      	ldrb	r3, [r0, #14]
 8028f12:	b14b      	cbz	r3, 8028f28 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028f14:	8903      	ldrh	r3, [r0, #8]
 8028f16:	3301      	adds	r3, #1
 8028f18:	b29b      	uxth	r3, r3
 8028f1a:	2b07      	cmp	r3, #7
 8028f1c:	8103      	strh	r3, [r0, #8]
 8028f1e:	bf81      	itttt	hi
 8028f20:	2300      	movhi	r3, #0
 8028f22:	8143      	strhhi	r3, [r0, #10]
 8028f24:	8183      	strhhi	r3, [r0, #12]
 8028f26:	7383      	strbhi	r3, [r0, #14]
 8028f28:	4770      	bx	lr
	...

08028f2c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028f2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028f30:	4698      	mov	r8, r3
 8028f32:	8883      	ldrh	r3, [r0, #4]
 8028f34:	4604      	mov	r4, r0
 8028f36:	4617      	mov	r7, r2
 8028f38:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028f3c:	eba8 0303 	sub.w	r3, r8, r3
 8028f40:	4a19      	ldr	r2, [pc, #100]	@ (8028fa8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028f42:	460e      	mov	r6, r1
 8028f44:	b21b      	sxth	r3, r3
 8028f46:	88c1      	ldrh	r1, [r0, #6]
 8028f48:	9200      	str	r2, [sp, #0]
 8028f4a:	2000      	movs	r0, #0
 8028f4c:	2b00      	cmp	r3, #0
 8028f4e:	8aa2      	ldrh	r2, [r4, #20]
 8028f50:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8028f54:	bfb8      	it	lt
 8028f56:	425b      	neglt	r3, r3
 8028f58:	f88d 0004 	strb.w	r0, [sp, #4]
 8028f5c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028f60:	b21b      	sxth	r3, r3
 8028f62:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028f66:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028f6a:	4293      	cmp	r3, r2
 8028f6c:	dc07      	bgt.n	8028f7e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028f6e:	1a69      	subs	r1, r5, r1
 8028f70:	b209      	sxth	r1, r1
 8028f72:	2900      	cmp	r1, #0
 8028f74:	bfb8      	it	lt
 8028f76:	4249      	neglt	r1, r1
 8028f78:	b209      	sxth	r1, r1
 8028f7a:	428a      	cmp	r2, r1
 8028f7c:	da10      	bge.n	8028fa0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028f7e:	6920      	ldr	r0, [r4, #16]
 8028f80:	4669      	mov	r1, sp
 8028f82:	eba8 0606 	sub.w	r6, r8, r6
 8028f86:	1bef      	subs	r7, r5, r7
 8028f88:	6803      	ldr	r3, [r0, #0]
 8028f8a:	685b      	ldr	r3, [r3, #4]
 8028f8c:	4798      	blx	r3
 8028f8e:	2300      	movs	r3, #0
 8028f90:	2001      	movs	r0, #1
 8028f92:	8166      	strh	r6, [r4, #10]
 8028f94:	8123      	strh	r3, [r4, #8]
 8028f96:	81a7      	strh	r7, [r4, #12]
 8028f98:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028f9c:	80e5      	strh	r5, [r4, #6]
 8028f9e:	73a0      	strb	r0, [r4, #14]
 8028fa0:	b004      	add	sp, #16
 8028fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028fa6:	bf00      	nop
 8028fa8:	0802c6c8 	.word	0x0802c6c8

08028fac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028fae:	461e      	mov	r6, r3
 8028fb0:	1e4b      	subs	r3, r1, #1
 8028fb2:	b085      	sub	sp, #20
 8028fb4:	4604      	mov	r4, r0
 8028fb6:	2b01      	cmp	r3, #1
 8028fb8:	460d      	mov	r5, r1
 8028fba:	4617      	mov	r7, r2
 8028fbc:	d84b      	bhi.n	8029056 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028fbe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028fc2:	1cd3      	adds	r3, r2, #3
 8028fc4:	b29b      	uxth	r3, r3
 8028fc6:	2b06      	cmp	r3, #6
 8028fc8:	d916      	bls.n	8028ff8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028fca:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802906c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028fce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028fd2:	f8cd c004 	str.w	ip, [sp, #4]
 8028fd6:	f04f 0c00 	mov.w	ip, #0
 8028fda:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028fde:	6900      	ldr	r0, [r0, #16]
 8028fe0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028fe4:	a901      	add	r1, sp, #4
 8028fe6:	f88d c008 	strb.w	ip, [sp, #8]
 8028fea:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028fee:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028ff2:	6803      	ldr	r3, [r0, #0]
 8028ff4:	689b      	ldr	r3, [r3, #8]
 8028ff6:	4798      	blx	r3
 8028ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028ffc:	1cd3      	adds	r3, r2, #3
 8028ffe:	b29b      	uxth	r3, r3
 8029000:	2b06      	cmp	r3, #6
 8029002:	d916      	bls.n	8029032 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029004:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802906c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029008:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802900c:	f8cd c004 	str.w	ip, [sp, #4]
 8029010:	f04f 0c01 	mov.w	ip, #1
 8029014:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029018:	6920      	ldr	r0, [r4, #16]
 802901a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802901e:	a901      	add	r1, sp, #4
 8029020:	f88d c008 	strb.w	ip, [sp, #8]
 8029024:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029028:	f8ad 300e 	strh.w	r3, [sp, #14]
 802902c:	6803      	ldr	r3, [r0, #0]
 802902e:	689b      	ldr	r3, [r3, #8]
 8029030:	4798      	blx	r3
 8029032:	4b0d      	ldr	r3, [pc, #52]	@ (8029068 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029034:	a901      	add	r1, sp, #4
 8029036:	6920      	ldr	r0, [r4, #16]
 8029038:	9301      	str	r3, [sp, #4]
 802903a:	2300      	movs	r3, #0
 802903c:	f88d 5008 	strb.w	r5, [sp, #8]
 8029040:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029044:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029048:	f8ad 300e 	strh.w	r3, [sp, #14]
 802904c:	6803      	ldr	r3, [r0, #0]
 802904e:	681b      	ldr	r3, [r3, #0]
 8029050:	4798      	blx	r3
 8029052:	b005      	add	sp, #20
 8029054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029056:	2900      	cmp	r1, #0
 8029058:	d1eb      	bne.n	8029032 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802905a:	80a2      	strh	r2, [r4, #4]
 802905c:	80c6      	strh	r6, [r0, #6]
 802905e:	60a1      	str	r1, [r4, #8]
 8029060:	81a1      	strh	r1, [r4, #12]
 8029062:	73a1      	strb	r1, [r4, #14]
 8029064:	e7e5      	b.n	8029032 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029066:	bf00      	nop
 8029068:	0802c6b4 	.word	0x0802c6b4
 802906c:	0802c6dc 	.word	0x0802c6dc

08029070 <__aeabi_atexit>:
 8029070:	460b      	mov	r3, r1
 8029072:	4601      	mov	r1, r0
 8029074:	4618      	mov	r0, r3
 8029076:	f000 baad 	b.w	80295d4 <__cxa_atexit>

0802907a <_ZdlPvj>:
 802907a:	f000 b803 	b.w	8029084 <_ZdlPv>

0802907e <__cxa_pure_virtual>:
 802907e:	b508      	push	{r3, lr}
 8029080:	f000 f80e 	bl	80290a0 <_ZSt9terminatev>

08029084 <_ZdlPv>:
 8029084:	f000 b9f0 	b.w	8029468 <free>

08029088 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029088:	b508      	push	{r3, lr}
 802908a:	4780      	blx	r0
 802908c:	f000 f9b9 	bl	8029402 <abort>

08029090 <_ZSt13get_terminatev>:
 8029090:	4b02      	ldr	r3, [pc, #8]	@ (802909c <_ZSt13get_terminatev+0xc>)
 8029092:	6818      	ldr	r0, [r3, #0]
 8029094:	f3bf 8f5b 	dmb	ish
 8029098:	4770      	bx	lr
 802909a:	bf00      	nop
 802909c:	2400009c 	.word	0x2400009c

080290a0 <_ZSt9terminatev>:
 80290a0:	b508      	push	{r3, lr}
 80290a2:	f7ff fff5 	bl	8029090 <_ZSt13get_terminatev>
 80290a6:	f7ff ffef 	bl	8029088 <_ZN10__cxxabiv111__terminateEPFvvE>

080290aa <sinf_poly>:
 80290aa:	07cb      	lsls	r3, r1, #31
 80290ac:	d412      	bmi.n	80290d4 <sinf_poly+0x2a>
 80290ae:	ee21 5b00 	vmul.f64	d5, d1, d0
 80290b2:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80290b6:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80290ba:	eea6 7b01 	vfma.f64	d7, d6, d1
 80290be:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80290c2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80290c6:	eea6 0b05 	vfma.f64	d0, d6, d5
 80290ca:	eea7 0b01 	vfma.f64	d0, d7, d1
 80290ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80290d2:	4770      	bx	lr
 80290d4:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80290d8:	ee21 5b01 	vmul.f64	d5, d1, d1
 80290dc:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80290e0:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80290e4:	eea1 7b06 	vfma.f64	d7, d1, d6
 80290e8:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80290ec:	eea1 0b06 	vfma.f64	d0, d1, d6
 80290f0:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80290f4:	ee21 1b05 	vmul.f64	d1, d1, d5
 80290f8:	eea5 0b06 	vfma.f64	d0, d5, d6
 80290fc:	e7e5      	b.n	80290ca <sinf_poly+0x20>
	...

08029100 <sinf>:
 8029100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029102:	ee10 4a10 	vmov	r4, s0
 8029106:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802910a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802910e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8029112:	eef0 7a40 	vmov.f32	s15, s0
 8029116:	d218      	bcs.n	802914a <sinf+0x4a>
 8029118:	ee26 1b06 	vmul.f64	d1, d6, d6
 802911c:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8029120:	d20a      	bcs.n	8029138 <sinf+0x38>
 8029122:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8029126:	d103      	bne.n	8029130 <sinf+0x30>
 8029128:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 802912c:	ed8d 1a01 	vstr	s2, [sp, #4]
 8029130:	eeb0 0a67 	vmov.f32	s0, s15
 8029134:	b003      	add	sp, #12
 8029136:	bd30      	pop	{r4, r5, pc}
 8029138:	483b      	ldr	r0, [pc, #236]	@ (8029228 <sinf+0x128>)
 802913a:	eeb0 0b46 	vmov.f64	d0, d6
 802913e:	2100      	movs	r1, #0
 8029140:	b003      	add	sp, #12
 8029142:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029146:	f7ff bfb0 	b.w	80290aa <sinf_poly>
 802914a:	f240 422e 	movw	r2, #1070	@ 0x42e
 802914e:	4293      	cmp	r3, r2
 8029150:	d824      	bhi.n	802919c <sinf+0x9c>
 8029152:	4b35      	ldr	r3, [pc, #212]	@ (8029228 <sinf+0x128>)
 8029154:	ed93 7b08 	vldr	d7, [r3, #32]
 8029158:	ee26 7b07 	vmul.f64	d7, d6, d7
 802915c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8029160:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029164:	ee17 1a90 	vmov	r1, s15
 8029168:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802916c:	1609      	asrs	r1, r1, #24
 802916e:	ee07 1a90 	vmov	s15, r1
 8029172:	f001 0203 	and.w	r2, r1, #3
 8029176:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802917a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802917e:	ed92 0b00 	vldr	d0, [r2]
 8029182:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8029186:	f011 0f02 	tst.w	r1, #2
 802918a:	eea5 6b47 	vfms.f64	d6, d5, d7
 802918e:	bf08      	it	eq
 8029190:	4618      	moveq	r0, r3
 8029192:	ee26 1b06 	vmul.f64	d1, d6, d6
 8029196:	ee20 0b06 	vmul.f64	d0, d0, d6
 802919a:	e7d1      	b.n	8029140 <sinf+0x40>
 802919c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80291a0:	d237      	bcs.n	8029212 <sinf+0x112>
 80291a2:	4922      	ldr	r1, [pc, #136]	@ (802922c <sinf+0x12c>)
 80291a4:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80291a8:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80291ac:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80291b0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80291b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80291b8:	6a10      	ldr	r0, [r2, #32]
 80291ba:	6912      	ldr	r2, [r2, #16]
 80291bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80291c0:	40ab      	lsls	r3, r5
 80291c2:	fba0 5003 	umull	r5, r0, r0, r3
 80291c6:	4359      	muls	r1, r3
 80291c8:	fbe3 0102 	umlal	r0, r1, r3, r2
 80291cc:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80291d0:	0f9d      	lsrs	r5, r3, #30
 80291d2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80291d6:	1ac9      	subs	r1, r1, r3
 80291d8:	f7d7 fa60 	bl	800069c <__aeabi_l2d>
 80291dc:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80291e0:	4b11      	ldr	r3, [pc, #68]	@ (8029228 <sinf+0x128>)
 80291e2:	f004 0203 	and.w	r2, r4, #3
 80291e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80291ea:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8029220 <sinf+0x120>
 80291ee:	ed92 0b00 	vldr	d0, [r2]
 80291f2:	ec41 0b17 	vmov	d7, r0, r1
 80291f6:	f014 0f02 	tst.w	r4, #2
 80291fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80291fe:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029202:	4629      	mov	r1, r5
 8029204:	bf08      	it	eq
 8029206:	4618      	moveq	r0, r3
 8029208:	ee27 1b07 	vmul.f64	d1, d7, d7
 802920c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029210:	e796      	b.n	8029140 <sinf+0x40>
 8029212:	b003      	add	sp, #12
 8029214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029218:	f000 b8e4 	b.w	80293e4 <__math_invalidf>
 802921c:	f3af 8000 	nop.w
 8029220:	54442d18 	.word	0x54442d18
 8029224:	3c1921fb 	.word	0x3c1921fb
 8029228:	0802ca70 	.word	0x0802ca70
 802922c:	0802ca10 	.word	0x0802ca10

08029230 <sinf_poly>:
 8029230:	07cb      	lsls	r3, r1, #31
 8029232:	d412      	bmi.n	802925a <sinf_poly+0x2a>
 8029234:	ee21 5b00 	vmul.f64	d5, d1, d0
 8029238:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802923c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8029240:	eea6 7b01 	vfma.f64	d7, d6, d1
 8029244:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029248:	ee21 1b05 	vmul.f64	d1, d1, d5
 802924c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029250:	eea7 0b01 	vfma.f64	d0, d7, d1
 8029254:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029258:	4770      	bx	lr
 802925a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802925e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8029262:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8029266:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802926a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802926e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8029272:	eea1 0b06 	vfma.f64	d0, d1, d6
 8029276:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802927a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802927e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8029282:	e7e5      	b.n	8029250 <sinf_poly+0x20>
 8029284:	0000      	movs	r0, r0
	...

08029288 <cosf>:
 8029288:	b538      	push	{r3, r4, r5, lr}
 802928a:	ee10 4a10 	vmov	r4, s0
 802928e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8029292:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8029296:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802929a:	d21f      	bcs.n	80292dc <cosf+0x54>
 802929c:	ee27 7b07 	vmul.f64	d7, d7, d7
 80292a0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80292a4:	f0c0 8082 	bcc.w	80293ac <cosf+0x124>
 80292a8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80292ac:	4b44      	ldr	r3, [pc, #272]	@ (80293c0 <cosf+0x138>)
 80292ae:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 80292b2:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80292b6:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80292ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80292be:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80292c2:	eea7 0b05 	vfma.f64	d0, d7, d5
 80292c6:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80292ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80292ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 80292d2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80292d6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80292da:	bd38      	pop	{r3, r4, r5, pc}
 80292dc:	f240 422e 	movw	r2, #1070	@ 0x42e
 80292e0:	4293      	cmp	r3, r2
 80292e2:	d829      	bhi.n	8029338 <cosf+0xb0>
 80292e4:	4b36      	ldr	r3, [pc, #216]	@ (80293c0 <cosf+0x138>)
 80292e6:	ed93 6b08 	vldr	d6, [r3, #32]
 80292ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80292ee:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80292f2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80292f6:	ee16 1a90 	vmov	r1, s13
 80292fa:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80292fe:	1609      	asrs	r1, r1, #24
 8029300:	ee06 1a90 	vmov	s13, r1
 8029304:	f001 0203 	and.w	r2, r1, #3
 8029308:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802930c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8029310:	ed92 0b00 	vldr	d0, [r2]
 8029314:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8029318:	f011 0f02 	tst.w	r1, #2
 802931c:	f081 0101 	eor.w	r1, r1, #1
 8029320:	eea5 7b46 	vfms.f64	d7, d5, d6
 8029324:	bf08      	it	eq
 8029326:	4618      	moveq	r0, r3
 8029328:	ee27 1b07 	vmul.f64	d1, d7, d7
 802932c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029330:	ee20 0b07 	vmul.f64	d0, d0, d7
 8029334:	f7ff bf7c 	b.w	8029230 <sinf_poly>
 8029338:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802933c:	d232      	bcs.n	80293a4 <cosf+0x11c>
 802933e:	4921      	ldr	r1, [pc, #132]	@ (80293c4 <cosf+0x13c>)
 8029340:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8029344:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029348:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802934c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029350:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029354:	6a10      	ldr	r0, [r2, #32]
 8029356:	6912      	ldr	r2, [r2, #16]
 8029358:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802935c:	40ab      	lsls	r3, r5
 802935e:	fba0 5003 	umull	r5, r0, r0, r3
 8029362:	4359      	muls	r1, r3
 8029364:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029368:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802936c:	0f9d      	lsrs	r5, r3, #30
 802936e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8029372:	1ac9      	subs	r1, r1, r3
 8029374:	f7d7 f992 	bl	800069c <__aeabi_l2d>
 8029378:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802937c:	4b10      	ldr	r3, [pc, #64]	@ (80293c0 <cosf+0x138>)
 802937e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80293b8 <cosf+0x130>
 8029382:	ec41 0b17 	vmov	d7, r0, r1
 8029386:	f004 0203 	and.w	r2, r4, #3
 802938a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802938e:	ed92 0b00 	vldr	d0, [r2]
 8029392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8029396:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802939a:	f014 0f02 	tst.w	r4, #2
 802939e:	f085 0101 	eor.w	r1, r5, #1
 80293a2:	e7bf      	b.n	8029324 <cosf+0x9c>
 80293a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80293a8:	f000 b81c 	b.w	80293e4 <__math_invalidf>
 80293ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80293b0:	e793      	b.n	80292da <cosf+0x52>
 80293b2:	bf00      	nop
 80293b4:	f3af 8000 	nop.w
 80293b8:	54442d18 	.word	0x54442d18
 80293bc:	3c1921fb 	.word	0x3c1921fb
 80293c0:	0802ca70 	.word	0x0802ca70
 80293c4:	0802ca10 	.word	0x0802ca10

080293c8 <with_errnof>:
 80293c8:	b510      	push	{r4, lr}
 80293ca:	ed2d 8b02 	vpush	{d8}
 80293ce:	eeb0 8a40 	vmov.f32	s16, s0
 80293d2:	4604      	mov	r4, r0
 80293d4:	f000 fb36 	bl	8029a44 <__errno>
 80293d8:	eeb0 0a48 	vmov.f32	s0, s16
 80293dc:	ecbd 8b02 	vpop	{d8}
 80293e0:	6004      	str	r4, [r0, #0]
 80293e2:	bd10      	pop	{r4, pc}

080293e4 <__math_invalidf>:
 80293e4:	eef0 7a40 	vmov.f32	s15, s0
 80293e8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80293ec:	eef4 7a67 	vcmp.f32	s15, s15
 80293f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80293f4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80293f8:	d602      	bvs.n	8029400 <__math_invalidf+0x1c>
 80293fa:	2021      	movs	r0, #33	@ 0x21
 80293fc:	f7ff bfe4 	b.w	80293c8 <with_errnof>
 8029400:	4770      	bx	lr

08029402 <abort>:
 8029402:	b508      	push	{r3, lr}
 8029404:	2006      	movs	r0, #6
 8029406:	f000 fa4d 	bl	80298a4 <raise>
 802940a:	2001      	movs	r0, #1
 802940c:	f7d9 f804 	bl	8002418 <_exit>

08029410 <__assert_func>:
 8029410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029412:	4614      	mov	r4, r2
 8029414:	461a      	mov	r2, r3
 8029416:	4b09      	ldr	r3, [pc, #36]	@ (802943c <__assert_func+0x2c>)
 8029418:	681b      	ldr	r3, [r3, #0]
 802941a:	4605      	mov	r5, r0
 802941c:	68d8      	ldr	r0, [r3, #12]
 802941e:	b14c      	cbz	r4, 8029434 <__assert_func+0x24>
 8029420:	4b07      	ldr	r3, [pc, #28]	@ (8029440 <__assert_func+0x30>)
 8029422:	9100      	str	r1, [sp, #0]
 8029424:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029428:	4906      	ldr	r1, [pc, #24]	@ (8029444 <__assert_func+0x34>)
 802942a:	462b      	mov	r3, r5
 802942c:	f000 f984 	bl	8029738 <fiprintf>
 8029430:	f7ff ffe7 	bl	8029402 <abort>
 8029434:	4b04      	ldr	r3, [pc, #16]	@ (8029448 <__assert_func+0x38>)
 8029436:	461c      	mov	r4, r3
 8029438:	e7f3      	b.n	8029422 <__assert_func+0x12>
 802943a:	bf00      	nop
 802943c:	240000ac 	.word	0x240000ac
 8029440:	0802ba84 	.word	0x0802ba84
 8029444:	0802ba91 	.word	0x0802ba91
 8029448:	0802babf 	.word	0x0802babf

0802944c <atexit>:
 802944c:	2300      	movs	r3, #0
 802944e:	4601      	mov	r1, r0
 8029450:	461a      	mov	r2, r3
 8029452:	4618      	mov	r0, r3
 8029454:	f000 bb2e 	b.w	8029ab4 <__register_exitproc>

08029458 <malloc>:
 8029458:	4b02      	ldr	r3, [pc, #8]	@ (8029464 <malloc+0xc>)
 802945a:	4601      	mov	r1, r0
 802945c:	6818      	ldr	r0, [r3, #0]
 802945e:	f000 b82d 	b.w	80294bc <_malloc_r>
 8029462:	bf00      	nop
 8029464:	240000ac 	.word	0x240000ac

08029468 <free>:
 8029468:	4b02      	ldr	r3, [pc, #8]	@ (8029474 <free+0xc>)
 802946a:	4601      	mov	r1, r0
 802946c:	6818      	ldr	r0, [r3, #0]
 802946e:	f000 bb7d 	b.w	8029b6c <_free_r>
 8029472:	bf00      	nop
 8029474:	240000ac 	.word	0x240000ac

08029478 <sbrk_aligned>:
 8029478:	b570      	push	{r4, r5, r6, lr}
 802947a:	4e0f      	ldr	r6, [pc, #60]	@ (80294b8 <sbrk_aligned+0x40>)
 802947c:	460c      	mov	r4, r1
 802947e:	6831      	ldr	r1, [r6, #0]
 8029480:	4605      	mov	r5, r0
 8029482:	b911      	cbnz	r1, 802948a <sbrk_aligned+0x12>
 8029484:	f000 fabc 	bl	8029a00 <_sbrk_r>
 8029488:	6030      	str	r0, [r6, #0]
 802948a:	4621      	mov	r1, r4
 802948c:	4628      	mov	r0, r5
 802948e:	f000 fab7 	bl	8029a00 <_sbrk_r>
 8029492:	1c43      	adds	r3, r0, #1
 8029494:	d103      	bne.n	802949e <sbrk_aligned+0x26>
 8029496:	f04f 34ff 	mov.w	r4, #4294967295
 802949a:	4620      	mov	r0, r4
 802949c:	bd70      	pop	{r4, r5, r6, pc}
 802949e:	1cc4      	adds	r4, r0, #3
 80294a0:	f024 0403 	bic.w	r4, r4, #3
 80294a4:	42a0      	cmp	r0, r4
 80294a6:	d0f8      	beq.n	802949a <sbrk_aligned+0x22>
 80294a8:	1a21      	subs	r1, r4, r0
 80294aa:	4628      	mov	r0, r5
 80294ac:	f000 faa8 	bl	8029a00 <_sbrk_r>
 80294b0:	3001      	adds	r0, #1
 80294b2:	d1f2      	bne.n	802949a <sbrk_aligned+0x22>
 80294b4:	e7ef      	b.n	8029496 <sbrk_aligned+0x1e>
 80294b6:	bf00      	nop
 80294b8:	24007054 	.word	0x24007054

080294bc <_malloc_r>:
 80294bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80294c0:	1ccd      	adds	r5, r1, #3
 80294c2:	f025 0503 	bic.w	r5, r5, #3
 80294c6:	3508      	adds	r5, #8
 80294c8:	2d0c      	cmp	r5, #12
 80294ca:	bf38      	it	cc
 80294cc:	250c      	movcc	r5, #12
 80294ce:	2d00      	cmp	r5, #0
 80294d0:	4606      	mov	r6, r0
 80294d2:	db01      	blt.n	80294d8 <_malloc_r+0x1c>
 80294d4:	42a9      	cmp	r1, r5
 80294d6:	d904      	bls.n	80294e2 <_malloc_r+0x26>
 80294d8:	230c      	movs	r3, #12
 80294da:	6033      	str	r3, [r6, #0]
 80294dc:	2000      	movs	r0, #0
 80294de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80294e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80295b8 <_malloc_r+0xfc>
 80294e6:	f000 f869 	bl	80295bc <__malloc_lock>
 80294ea:	f8d8 3000 	ldr.w	r3, [r8]
 80294ee:	461c      	mov	r4, r3
 80294f0:	bb44      	cbnz	r4, 8029544 <_malloc_r+0x88>
 80294f2:	4629      	mov	r1, r5
 80294f4:	4630      	mov	r0, r6
 80294f6:	f7ff ffbf 	bl	8029478 <sbrk_aligned>
 80294fa:	1c43      	adds	r3, r0, #1
 80294fc:	4604      	mov	r4, r0
 80294fe:	d158      	bne.n	80295b2 <_malloc_r+0xf6>
 8029500:	f8d8 4000 	ldr.w	r4, [r8]
 8029504:	4627      	mov	r7, r4
 8029506:	2f00      	cmp	r7, #0
 8029508:	d143      	bne.n	8029592 <_malloc_r+0xd6>
 802950a:	2c00      	cmp	r4, #0
 802950c:	d04b      	beq.n	80295a6 <_malloc_r+0xea>
 802950e:	6823      	ldr	r3, [r4, #0]
 8029510:	4639      	mov	r1, r7
 8029512:	4630      	mov	r0, r6
 8029514:	eb04 0903 	add.w	r9, r4, r3
 8029518:	f000 fa72 	bl	8029a00 <_sbrk_r>
 802951c:	4581      	cmp	r9, r0
 802951e:	d142      	bne.n	80295a6 <_malloc_r+0xea>
 8029520:	6821      	ldr	r1, [r4, #0]
 8029522:	1a6d      	subs	r5, r5, r1
 8029524:	4629      	mov	r1, r5
 8029526:	4630      	mov	r0, r6
 8029528:	f7ff ffa6 	bl	8029478 <sbrk_aligned>
 802952c:	3001      	adds	r0, #1
 802952e:	d03a      	beq.n	80295a6 <_malloc_r+0xea>
 8029530:	6823      	ldr	r3, [r4, #0]
 8029532:	442b      	add	r3, r5
 8029534:	6023      	str	r3, [r4, #0]
 8029536:	f8d8 3000 	ldr.w	r3, [r8]
 802953a:	685a      	ldr	r2, [r3, #4]
 802953c:	bb62      	cbnz	r2, 8029598 <_malloc_r+0xdc>
 802953e:	f8c8 7000 	str.w	r7, [r8]
 8029542:	e00f      	b.n	8029564 <_malloc_r+0xa8>
 8029544:	6822      	ldr	r2, [r4, #0]
 8029546:	1b52      	subs	r2, r2, r5
 8029548:	d420      	bmi.n	802958c <_malloc_r+0xd0>
 802954a:	2a0b      	cmp	r2, #11
 802954c:	d917      	bls.n	802957e <_malloc_r+0xc2>
 802954e:	1961      	adds	r1, r4, r5
 8029550:	42a3      	cmp	r3, r4
 8029552:	6025      	str	r5, [r4, #0]
 8029554:	bf18      	it	ne
 8029556:	6059      	strne	r1, [r3, #4]
 8029558:	6863      	ldr	r3, [r4, #4]
 802955a:	bf08      	it	eq
 802955c:	f8c8 1000 	streq.w	r1, [r8]
 8029560:	5162      	str	r2, [r4, r5]
 8029562:	604b      	str	r3, [r1, #4]
 8029564:	4630      	mov	r0, r6
 8029566:	f000 f82f 	bl	80295c8 <__malloc_unlock>
 802956a:	f104 000b 	add.w	r0, r4, #11
 802956e:	1d23      	adds	r3, r4, #4
 8029570:	f020 0007 	bic.w	r0, r0, #7
 8029574:	1ac2      	subs	r2, r0, r3
 8029576:	bf1c      	itt	ne
 8029578:	1a1b      	subne	r3, r3, r0
 802957a:	50a3      	strne	r3, [r4, r2]
 802957c:	e7af      	b.n	80294de <_malloc_r+0x22>
 802957e:	6862      	ldr	r2, [r4, #4]
 8029580:	42a3      	cmp	r3, r4
 8029582:	bf0c      	ite	eq
 8029584:	f8c8 2000 	streq.w	r2, [r8]
 8029588:	605a      	strne	r2, [r3, #4]
 802958a:	e7eb      	b.n	8029564 <_malloc_r+0xa8>
 802958c:	4623      	mov	r3, r4
 802958e:	6864      	ldr	r4, [r4, #4]
 8029590:	e7ae      	b.n	80294f0 <_malloc_r+0x34>
 8029592:	463c      	mov	r4, r7
 8029594:	687f      	ldr	r7, [r7, #4]
 8029596:	e7b6      	b.n	8029506 <_malloc_r+0x4a>
 8029598:	461a      	mov	r2, r3
 802959a:	685b      	ldr	r3, [r3, #4]
 802959c:	42a3      	cmp	r3, r4
 802959e:	d1fb      	bne.n	8029598 <_malloc_r+0xdc>
 80295a0:	2300      	movs	r3, #0
 80295a2:	6053      	str	r3, [r2, #4]
 80295a4:	e7de      	b.n	8029564 <_malloc_r+0xa8>
 80295a6:	230c      	movs	r3, #12
 80295a8:	6033      	str	r3, [r6, #0]
 80295aa:	4630      	mov	r0, r6
 80295ac:	f000 f80c 	bl	80295c8 <__malloc_unlock>
 80295b0:	e794      	b.n	80294dc <_malloc_r+0x20>
 80295b2:	6005      	str	r5, [r0, #0]
 80295b4:	e7d6      	b.n	8029564 <_malloc_r+0xa8>
 80295b6:	bf00      	nop
 80295b8:	24007058 	.word	0x24007058

080295bc <__malloc_lock>:
 80295bc:	4801      	ldr	r0, [pc, #4]	@ (80295c4 <__malloc_lock+0x8>)
 80295be:	f7d9 ba9d 	b.w	8002afc <__retarget_lock_acquire_recursive>
 80295c2:	bf00      	nop
 80295c4:	24000640 	.word	0x24000640

080295c8 <__malloc_unlock>:
 80295c8:	4801      	ldr	r0, [pc, #4]	@ (80295d0 <__malloc_unlock+0x8>)
 80295ca:	f7d9 baac 	b.w	8002b26 <__retarget_lock_release_recursive>
 80295ce:	bf00      	nop
 80295d0:	24000640 	.word	0x24000640

080295d4 <__cxa_atexit>:
 80295d4:	b510      	push	{r4, lr}
 80295d6:	4604      	mov	r4, r0
 80295d8:	4804      	ldr	r0, [pc, #16]	@ (80295ec <__cxa_atexit+0x18>)
 80295da:	4613      	mov	r3, r2
 80295dc:	b120      	cbz	r0, 80295e8 <__cxa_atexit+0x14>
 80295de:	460a      	mov	r2, r1
 80295e0:	2002      	movs	r0, #2
 80295e2:	4621      	mov	r1, r4
 80295e4:	f000 fa66 	bl	8029ab4 <__register_exitproc>
 80295e8:	bd10      	pop	{r4, pc}
 80295ea:	bf00      	nop
 80295ec:	08029ab5 	.word	0x08029ab5

080295f0 <std>:
 80295f0:	2300      	movs	r3, #0
 80295f2:	b510      	push	{r4, lr}
 80295f4:	4604      	mov	r4, r0
 80295f6:	e9c0 3300 	strd	r3, r3, [r0]
 80295fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80295fe:	6083      	str	r3, [r0, #8]
 8029600:	8181      	strh	r1, [r0, #12]
 8029602:	6643      	str	r3, [r0, #100]	@ 0x64
 8029604:	81c2      	strh	r2, [r0, #14]
 8029606:	6183      	str	r3, [r0, #24]
 8029608:	4619      	mov	r1, r3
 802960a:	2208      	movs	r2, #8
 802960c:	305c      	adds	r0, #92	@ 0x5c
 802960e:	f000 f918 	bl	8029842 <memset>
 8029612:	4b0d      	ldr	r3, [pc, #52]	@ (8029648 <std+0x58>)
 8029614:	6263      	str	r3, [r4, #36]	@ 0x24
 8029616:	4b0d      	ldr	r3, [pc, #52]	@ (802964c <std+0x5c>)
 8029618:	62a3      	str	r3, [r4, #40]	@ 0x28
 802961a:	4b0d      	ldr	r3, [pc, #52]	@ (8029650 <std+0x60>)
 802961c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802961e:	4b0d      	ldr	r3, [pc, #52]	@ (8029654 <std+0x64>)
 8029620:	6323      	str	r3, [r4, #48]	@ 0x30
 8029622:	4b0d      	ldr	r3, [pc, #52]	@ (8029658 <std+0x68>)
 8029624:	6224      	str	r4, [r4, #32]
 8029626:	429c      	cmp	r4, r3
 8029628:	d006      	beq.n	8029638 <std+0x48>
 802962a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802962e:	4294      	cmp	r4, r2
 8029630:	d002      	beq.n	8029638 <std+0x48>
 8029632:	33d0      	adds	r3, #208	@ 0xd0
 8029634:	429c      	cmp	r4, r3
 8029636:	d105      	bne.n	8029644 <std+0x54>
 8029638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029640:	f7d9 ba35 	b.w	8002aae <__retarget_lock_init_recursive>
 8029644:	bd10      	pop	{r4, pc}
 8029646:	bf00      	nop
 8029648:	080297bd 	.word	0x080297bd
 802964c:	080297df 	.word	0x080297df
 8029650:	08029817 	.word	0x08029817
 8029654:	0802983b 	.word	0x0802983b
 8029658:	2400705c 	.word	0x2400705c

0802965c <stdio_exit_handler>:
 802965c:	4a02      	ldr	r2, [pc, #8]	@ (8029668 <stdio_exit_handler+0xc>)
 802965e:	4903      	ldr	r1, [pc, #12]	@ (802966c <stdio_exit_handler+0x10>)
 8029660:	4803      	ldr	r0, [pc, #12]	@ (8029670 <stdio_exit_handler+0x14>)
 8029662:	f000 b87b 	b.w	802975c <_fwalk_sglue>
 8029666:	bf00      	nop
 8029668:	240000a0 	.word	0x240000a0
 802966c:	0802a2a5 	.word	0x0802a2a5
 8029670:	240000b0 	.word	0x240000b0

08029674 <cleanup_stdio>:
 8029674:	6841      	ldr	r1, [r0, #4]
 8029676:	4b0c      	ldr	r3, [pc, #48]	@ (80296a8 <cleanup_stdio+0x34>)
 8029678:	4299      	cmp	r1, r3
 802967a:	b510      	push	{r4, lr}
 802967c:	4604      	mov	r4, r0
 802967e:	d001      	beq.n	8029684 <cleanup_stdio+0x10>
 8029680:	f000 fe10 	bl	802a2a4 <_fflush_r>
 8029684:	68a1      	ldr	r1, [r4, #8]
 8029686:	4b09      	ldr	r3, [pc, #36]	@ (80296ac <cleanup_stdio+0x38>)
 8029688:	4299      	cmp	r1, r3
 802968a:	d002      	beq.n	8029692 <cleanup_stdio+0x1e>
 802968c:	4620      	mov	r0, r4
 802968e:	f000 fe09 	bl	802a2a4 <_fflush_r>
 8029692:	68e1      	ldr	r1, [r4, #12]
 8029694:	4b06      	ldr	r3, [pc, #24]	@ (80296b0 <cleanup_stdio+0x3c>)
 8029696:	4299      	cmp	r1, r3
 8029698:	d004      	beq.n	80296a4 <cleanup_stdio+0x30>
 802969a:	4620      	mov	r0, r4
 802969c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80296a0:	f000 be00 	b.w	802a2a4 <_fflush_r>
 80296a4:	bd10      	pop	{r4, pc}
 80296a6:	bf00      	nop
 80296a8:	2400705c 	.word	0x2400705c
 80296ac:	240070c4 	.word	0x240070c4
 80296b0:	2400712c 	.word	0x2400712c

080296b4 <global_stdio_init.part.0>:
 80296b4:	b510      	push	{r4, lr}
 80296b6:	4b0b      	ldr	r3, [pc, #44]	@ (80296e4 <global_stdio_init.part.0+0x30>)
 80296b8:	4c0b      	ldr	r4, [pc, #44]	@ (80296e8 <global_stdio_init.part.0+0x34>)
 80296ba:	4a0c      	ldr	r2, [pc, #48]	@ (80296ec <global_stdio_init.part.0+0x38>)
 80296bc:	601a      	str	r2, [r3, #0]
 80296be:	4620      	mov	r0, r4
 80296c0:	2200      	movs	r2, #0
 80296c2:	2104      	movs	r1, #4
 80296c4:	f7ff ff94 	bl	80295f0 <std>
 80296c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80296cc:	2201      	movs	r2, #1
 80296ce:	2109      	movs	r1, #9
 80296d0:	f7ff ff8e 	bl	80295f0 <std>
 80296d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80296d8:	2202      	movs	r2, #2
 80296da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80296de:	2112      	movs	r1, #18
 80296e0:	f7ff bf86 	b.w	80295f0 <std>
 80296e4:	24007194 	.word	0x24007194
 80296e8:	2400705c 	.word	0x2400705c
 80296ec:	0802965d 	.word	0x0802965d

080296f0 <__sfp_lock_acquire>:
 80296f0:	4801      	ldr	r0, [pc, #4]	@ (80296f8 <__sfp_lock_acquire+0x8>)
 80296f2:	f7d9 ba03 	b.w	8002afc <__retarget_lock_acquire_recursive>
 80296f6:	bf00      	nop
 80296f8:	24000628 	.word	0x24000628

080296fc <__sfp_lock_release>:
 80296fc:	4801      	ldr	r0, [pc, #4]	@ (8029704 <__sfp_lock_release+0x8>)
 80296fe:	f7d9 ba12 	b.w	8002b26 <__retarget_lock_release_recursive>
 8029702:	bf00      	nop
 8029704:	24000628 	.word	0x24000628

08029708 <__sinit>:
 8029708:	b510      	push	{r4, lr}
 802970a:	4604      	mov	r4, r0
 802970c:	f7ff fff0 	bl	80296f0 <__sfp_lock_acquire>
 8029710:	6a23      	ldr	r3, [r4, #32]
 8029712:	b11b      	cbz	r3, 802971c <__sinit+0x14>
 8029714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029718:	f7ff bff0 	b.w	80296fc <__sfp_lock_release>
 802971c:	4b04      	ldr	r3, [pc, #16]	@ (8029730 <__sinit+0x28>)
 802971e:	6223      	str	r3, [r4, #32]
 8029720:	4b04      	ldr	r3, [pc, #16]	@ (8029734 <__sinit+0x2c>)
 8029722:	681b      	ldr	r3, [r3, #0]
 8029724:	2b00      	cmp	r3, #0
 8029726:	d1f5      	bne.n	8029714 <__sinit+0xc>
 8029728:	f7ff ffc4 	bl	80296b4 <global_stdio_init.part.0>
 802972c:	e7f2      	b.n	8029714 <__sinit+0xc>
 802972e:	bf00      	nop
 8029730:	08029675 	.word	0x08029675
 8029734:	24007194 	.word	0x24007194

08029738 <fiprintf>:
 8029738:	b40e      	push	{r1, r2, r3}
 802973a:	b503      	push	{r0, r1, lr}
 802973c:	4601      	mov	r1, r0
 802973e:	ab03      	add	r3, sp, #12
 8029740:	4805      	ldr	r0, [pc, #20]	@ (8029758 <fiprintf+0x20>)
 8029742:	f853 2b04 	ldr.w	r2, [r3], #4
 8029746:	6800      	ldr	r0, [r0, #0]
 8029748:	9301      	str	r3, [sp, #4]
 802974a:	f000 fa83 	bl	8029c54 <_vfiprintf_r>
 802974e:	b002      	add	sp, #8
 8029750:	f85d eb04 	ldr.w	lr, [sp], #4
 8029754:	b003      	add	sp, #12
 8029756:	4770      	bx	lr
 8029758:	240000ac 	.word	0x240000ac

0802975c <_fwalk_sglue>:
 802975c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029760:	4607      	mov	r7, r0
 8029762:	4688      	mov	r8, r1
 8029764:	4614      	mov	r4, r2
 8029766:	2600      	movs	r6, #0
 8029768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802976c:	f1b9 0901 	subs.w	r9, r9, #1
 8029770:	d505      	bpl.n	802977e <_fwalk_sglue+0x22>
 8029772:	6824      	ldr	r4, [r4, #0]
 8029774:	2c00      	cmp	r4, #0
 8029776:	d1f7      	bne.n	8029768 <_fwalk_sglue+0xc>
 8029778:	4630      	mov	r0, r6
 802977a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802977e:	89ab      	ldrh	r3, [r5, #12]
 8029780:	2b01      	cmp	r3, #1
 8029782:	d907      	bls.n	8029794 <_fwalk_sglue+0x38>
 8029784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029788:	3301      	adds	r3, #1
 802978a:	d003      	beq.n	8029794 <_fwalk_sglue+0x38>
 802978c:	4629      	mov	r1, r5
 802978e:	4638      	mov	r0, r7
 8029790:	47c0      	blx	r8
 8029792:	4306      	orrs	r6, r0
 8029794:	3568      	adds	r5, #104	@ 0x68
 8029796:	e7e9      	b.n	802976c <_fwalk_sglue+0x10>

08029798 <iprintf>:
 8029798:	b40f      	push	{r0, r1, r2, r3}
 802979a:	b507      	push	{r0, r1, r2, lr}
 802979c:	4906      	ldr	r1, [pc, #24]	@ (80297b8 <iprintf+0x20>)
 802979e:	ab04      	add	r3, sp, #16
 80297a0:	6808      	ldr	r0, [r1, #0]
 80297a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80297a6:	6881      	ldr	r1, [r0, #8]
 80297a8:	9301      	str	r3, [sp, #4]
 80297aa:	f000 fa53 	bl	8029c54 <_vfiprintf_r>
 80297ae:	b003      	add	sp, #12
 80297b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80297b4:	b004      	add	sp, #16
 80297b6:	4770      	bx	lr
 80297b8:	240000ac 	.word	0x240000ac

080297bc <__sread>:
 80297bc:	b510      	push	{r4, lr}
 80297be:	460c      	mov	r4, r1
 80297c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80297c4:	f000 f8f6 	bl	80299b4 <_read_r>
 80297c8:	2800      	cmp	r0, #0
 80297ca:	bfab      	itete	ge
 80297cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80297ce:	89a3      	ldrhlt	r3, [r4, #12]
 80297d0:	181b      	addge	r3, r3, r0
 80297d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80297d6:	bfac      	ite	ge
 80297d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80297da:	81a3      	strhlt	r3, [r4, #12]
 80297dc:	bd10      	pop	{r4, pc}

080297de <__swrite>:
 80297de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80297e2:	461f      	mov	r7, r3
 80297e4:	898b      	ldrh	r3, [r1, #12]
 80297e6:	05db      	lsls	r3, r3, #23
 80297e8:	4605      	mov	r5, r0
 80297ea:	460c      	mov	r4, r1
 80297ec:	4616      	mov	r6, r2
 80297ee:	d505      	bpl.n	80297fc <__swrite+0x1e>
 80297f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80297f4:	2302      	movs	r3, #2
 80297f6:	2200      	movs	r2, #0
 80297f8:	f000 f8ca 	bl	8029990 <_lseek_r>
 80297fc:	89a3      	ldrh	r3, [r4, #12]
 80297fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8029806:	81a3      	strh	r3, [r4, #12]
 8029808:	4632      	mov	r2, r6
 802980a:	463b      	mov	r3, r7
 802980c:	4628      	mov	r0, r5
 802980e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029812:	f000 b905 	b.w	8029a20 <_write_r>

08029816 <__sseek>:
 8029816:	b510      	push	{r4, lr}
 8029818:	460c      	mov	r4, r1
 802981a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802981e:	f000 f8b7 	bl	8029990 <_lseek_r>
 8029822:	1c43      	adds	r3, r0, #1
 8029824:	89a3      	ldrh	r3, [r4, #12]
 8029826:	bf15      	itete	ne
 8029828:	6560      	strne	r0, [r4, #84]	@ 0x54
 802982a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802982e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8029832:	81a3      	strheq	r3, [r4, #12]
 8029834:	bf18      	it	ne
 8029836:	81a3      	strhne	r3, [r4, #12]
 8029838:	bd10      	pop	{r4, pc}

0802983a <__sclose>:
 802983a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802983e:	f000 b839 	b.w	80298b4 <_close_r>

08029842 <memset>:
 8029842:	4402      	add	r2, r0
 8029844:	4603      	mov	r3, r0
 8029846:	4293      	cmp	r3, r2
 8029848:	d100      	bne.n	802984c <memset+0xa>
 802984a:	4770      	bx	lr
 802984c:	f803 1b01 	strb.w	r1, [r3], #1
 8029850:	e7f9      	b.n	8029846 <memset+0x4>

08029852 <_raise_r>:
 8029852:	291f      	cmp	r1, #31
 8029854:	b538      	push	{r3, r4, r5, lr}
 8029856:	4605      	mov	r5, r0
 8029858:	460c      	mov	r4, r1
 802985a:	d904      	bls.n	8029866 <_raise_r+0x14>
 802985c:	2316      	movs	r3, #22
 802985e:	6003      	str	r3, [r0, #0]
 8029860:	f04f 30ff 	mov.w	r0, #4294967295
 8029864:	bd38      	pop	{r3, r4, r5, pc}
 8029866:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8029868:	b112      	cbz	r2, 8029870 <_raise_r+0x1e>
 802986a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802986e:	b94b      	cbnz	r3, 8029884 <_raise_r+0x32>
 8029870:	4628      	mov	r0, r5
 8029872:	f000 f8c3 	bl	80299fc <_getpid_r>
 8029876:	4622      	mov	r2, r4
 8029878:	4601      	mov	r1, r0
 802987a:	4628      	mov	r0, r5
 802987c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029880:	f000 b8aa 	b.w	80299d8 <_kill_r>
 8029884:	2b01      	cmp	r3, #1
 8029886:	d00a      	beq.n	802989e <_raise_r+0x4c>
 8029888:	1c59      	adds	r1, r3, #1
 802988a:	d103      	bne.n	8029894 <_raise_r+0x42>
 802988c:	2316      	movs	r3, #22
 802988e:	6003      	str	r3, [r0, #0]
 8029890:	2001      	movs	r0, #1
 8029892:	e7e7      	b.n	8029864 <_raise_r+0x12>
 8029894:	2100      	movs	r1, #0
 8029896:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802989a:	4620      	mov	r0, r4
 802989c:	4798      	blx	r3
 802989e:	2000      	movs	r0, #0
 80298a0:	e7e0      	b.n	8029864 <_raise_r+0x12>
	...

080298a4 <raise>:
 80298a4:	4b02      	ldr	r3, [pc, #8]	@ (80298b0 <raise+0xc>)
 80298a6:	4601      	mov	r1, r0
 80298a8:	6818      	ldr	r0, [r3, #0]
 80298aa:	f7ff bfd2 	b.w	8029852 <_raise_r>
 80298ae:	bf00      	nop
 80298b0:	240000ac 	.word	0x240000ac

080298b4 <_close_r>:
 80298b4:	b538      	push	{r3, r4, r5, lr}
 80298b6:	4d06      	ldr	r5, [pc, #24]	@ (80298d0 <_close_r+0x1c>)
 80298b8:	2300      	movs	r3, #0
 80298ba:	4604      	mov	r4, r0
 80298bc:	4608      	mov	r0, r1
 80298be:	602b      	str	r3, [r5, #0]
 80298c0:	f7d8 fdee 	bl	80024a0 <_close>
 80298c4:	1c43      	adds	r3, r0, #1
 80298c6:	d102      	bne.n	80298ce <_close_r+0x1a>
 80298c8:	682b      	ldr	r3, [r5, #0]
 80298ca:	b103      	cbz	r3, 80298ce <_close_r+0x1a>
 80298cc:	6023      	str	r3, [r4, #0]
 80298ce:	bd38      	pop	{r3, r4, r5, pc}
 80298d0:	24007198 	.word	0x24007198

080298d4 <_reclaim_reent>:
 80298d4:	4b2d      	ldr	r3, [pc, #180]	@ (802998c <_reclaim_reent+0xb8>)
 80298d6:	681b      	ldr	r3, [r3, #0]
 80298d8:	4283      	cmp	r3, r0
 80298da:	b570      	push	{r4, r5, r6, lr}
 80298dc:	4604      	mov	r4, r0
 80298de:	d053      	beq.n	8029988 <_reclaim_reent+0xb4>
 80298e0:	69c3      	ldr	r3, [r0, #28]
 80298e2:	b31b      	cbz	r3, 802992c <_reclaim_reent+0x58>
 80298e4:	68db      	ldr	r3, [r3, #12]
 80298e6:	b163      	cbz	r3, 8029902 <_reclaim_reent+0x2e>
 80298e8:	2500      	movs	r5, #0
 80298ea:	69e3      	ldr	r3, [r4, #28]
 80298ec:	68db      	ldr	r3, [r3, #12]
 80298ee:	5959      	ldr	r1, [r3, r5]
 80298f0:	b9b1      	cbnz	r1, 8029920 <_reclaim_reent+0x4c>
 80298f2:	3504      	adds	r5, #4
 80298f4:	2d80      	cmp	r5, #128	@ 0x80
 80298f6:	d1f8      	bne.n	80298ea <_reclaim_reent+0x16>
 80298f8:	69e3      	ldr	r3, [r4, #28]
 80298fa:	4620      	mov	r0, r4
 80298fc:	68d9      	ldr	r1, [r3, #12]
 80298fe:	f000 f935 	bl	8029b6c <_free_r>
 8029902:	69e3      	ldr	r3, [r4, #28]
 8029904:	6819      	ldr	r1, [r3, #0]
 8029906:	b111      	cbz	r1, 802990e <_reclaim_reent+0x3a>
 8029908:	4620      	mov	r0, r4
 802990a:	f000 f92f 	bl	8029b6c <_free_r>
 802990e:	69e3      	ldr	r3, [r4, #28]
 8029910:	689d      	ldr	r5, [r3, #8]
 8029912:	b15d      	cbz	r5, 802992c <_reclaim_reent+0x58>
 8029914:	4629      	mov	r1, r5
 8029916:	4620      	mov	r0, r4
 8029918:	682d      	ldr	r5, [r5, #0]
 802991a:	f000 f927 	bl	8029b6c <_free_r>
 802991e:	e7f8      	b.n	8029912 <_reclaim_reent+0x3e>
 8029920:	680e      	ldr	r6, [r1, #0]
 8029922:	4620      	mov	r0, r4
 8029924:	f000 f922 	bl	8029b6c <_free_r>
 8029928:	4631      	mov	r1, r6
 802992a:	e7e1      	b.n	80298f0 <_reclaim_reent+0x1c>
 802992c:	6961      	ldr	r1, [r4, #20]
 802992e:	b111      	cbz	r1, 8029936 <_reclaim_reent+0x62>
 8029930:	4620      	mov	r0, r4
 8029932:	f000 f91b 	bl	8029b6c <_free_r>
 8029936:	69e1      	ldr	r1, [r4, #28]
 8029938:	b111      	cbz	r1, 8029940 <_reclaim_reent+0x6c>
 802993a:	4620      	mov	r0, r4
 802993c:	f000 f916 	bl	8029b6c <_free_r>
 8029940:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8029942:	b111      	cbz	r1, 802994a <_reclaim_reent+0x76>
 8029944:	4620      	mov	r0, r4
 8029946:	f000 f911 	bl	8029b6c <_free_r>
 802994a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802994c:	b111      	cbz	r1, 8029954 <_reclaim_reent+0x80>
 802994e:	4620      	mov	r0, r4
 8029950:	f000 f90c 	bl	8029b6c <_free_r>
 8029954:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8029956:	b111      	cbz	r1, 802995e <_reclaim_reent+0x8a>
 8029958:	4620      	mov	r0, r4
 802995a:	f000 f907 	bl	8029b6c <_free_r>
 802995e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8029960:	b111      	cbz	r1, 8029968 <_reclaim_reent+0x94>
 8029962:	4620      	mov	r0, r4
 8029964:	f000 f902 	bl	8029b6c <_free_r>
 8029968:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802996a:	b111      	cbz	r1, 8029972 <_reclaim_reent+0x9e>
 802996c:	4620      	mov	r0, r4
 802996e:	f000 f8fd 	bl	8029b6c <_free_r>
 8029972:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8029974:	b111      	cbz	r1, 802997c <_reclaim_reent+0xa8>
 8029976:	4620      	mov	r0, r4
 8029978:	f000 f8f8 	bl	8029b6c <_free_r>
 802997c:	6a23      	ldr	r3, [r4, #32]
 802997e:	b11b      	cbz	r3, 8029988 <_reclaim_reent+0xb4>
 8029980:	4620      	mov	r0, r4
 8029982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8029986:	4718      	bx	r3
 8029988:	bd70      	pop	{r4, r5, r6, pc}
 802998a:	bf00      	nop
 802998c:	240000ac 	.word	0x240000ac

08029990 <_lseek_r>:
 8029990:	b538      	push	{r3, r4, r5, lr}
 8029992:	4d07      	ldr	r5, [pc, #28]	@ (80299b0 <_lseek_r+0x20>)
 8029994:	4604      	mov	r4, r0
 8029996:	4608      	mov	r0, r1
 8029998:	4611      	mov	r1, r2
 802999a:	2200      	movs	r2, #0
 802999c:	602a      	str	r2, [r5, #0]
 802999e:	461a      	mov	r2, r3
 80299a0:	f7d8 fda5 	bl	80024ee <_lseek>
 80299a4:	1c43      	adds	r3, r0, #1
 80299a6:	d102      	bne.n	80299ae <_lseek_r+0x1e>
 80299a8:	682b      	ldr	r3, [r5, #0]
 80299aa:	b103      	cbz	r3, 80299ae <_lseek_r+0x1e>
 80299ac:	6023      	str	r3, [r4, #0]
 80299ae:	bd38      	pop	{r3, r4, r5, pc}
 80299b0:	24007198 	.word	0x24007198

080299b4 <_read_r>:
 80299b4:	b538      	push	{r3, r4, r5, lr}
 80299b6:	4d07      	ldr	r5, [pc, #28]	@ (80299d4 <_read_r+0x20>)
 80299b8:	4604      	mov	r4, r0
 80299ba:	4608      	mov	r0, r1
 80299bc:	4611      	mov	r1, r2
 80299be:	2200      	movs	r2, #0
 80299c0:	602a      	str	r2, [r5, #0]
 80299c2:	461a      	mov	r2, r3
 80299c4:	f7d8 fd33 	bl	800242e <_read>
 80299c8:	1c43      	adds	r3, r0, #1
 80299ca:	d102      	bne.n	80299d2 <_read_r+0x1e>
 80299cc:	682b      	ldr	r3, [r5, #0]
 80299ce:	b103      	cbz	r3, 80299d2 <_read_r+0x1e>
 80299d0:	6023      	str	r3, [r4, #0]
 80299d2:	bd38      	pop	{r3, r4, r5, pc}
 80299d4:	24007198 	.word	0x24007198

080299d8 <_kill_r>:
 80299d8:	b538      	push	{r3, r4, r5, lr}
 80299da:	4d07      	ldr	r5, [pc, #28]	@ (80299f8 <_kill_r+0x20>)
 80299dc:	2300      	movs	r3, #0
 80299de:	4604      	mov	r4, r0
 80299e0:	4608      	mov	r0, r1
 80299e2:	4611      	mov	r1, r2
 80299e4:	602b      	str	r3, [r5, #0]
 80299e6:	f7d8 fd07 	bl	80023f8 <_kill>
 80299ea:	1c43      	adds	r3, r0, #1
 80299ec:	d102      	bne.n	80299f4 <_kill_r+0x1c>
 80299ee:	682b      	ldr	r3, [r5, #0]
 80299f0:	b103      	cbz	r3, 80299f4 <_kill_r+0x1c>
 80299f2:	6023      	str	r3, [r4, #0]
 80299f4:	bd38      	pop	{r3, r4, r5, pc}
 80299f6:	bf00      	nop
 80299f8:	24007198 	.word	0x24007198

080299fc <_getpid_r>:
 80299fc:	f7d8 bcf4 	b.w	80023e8 <_getpid>

08029a00 <_sbrk_r>:
 8029a00:	b538      	push	{r3, r4, r5, lr}
 8029a02:	4d06      	ldr	r5, [pc, #24]	@ (8029a1c <_sbrk_r+0x1c>)
 8029a04:	2300      	movs	r3, #0
 8029a06:	4604      	mov	r4, r0
 8029a08:	4608      	mov	r0, r1
 8029a0a:	602b      	str	r3, [r5, #0]
 8029a0c:	f7d8 fd7c 	bl	8002508 <_sbrk>
 8029a10:	1c43      	adds	r3, r0, #1
 8029a12:	d102      	bne.n	8029a1a <_sbrk_r+0x1a>
 8029a14:	682b      	ldr	r3, [r5, #0]
 8029a16:	b103      	cbz	r3, 8029a1a <_sbrk_r+0x1a>
 8029a18:	6023      	str	r3, [r4, #0]
 8029a1a:	bd38      	pop	{r3, r4, r5, pc}
 8029a1c:	24007198 	.word	0x24007198

08029a20 <_write_r>:
 8029a20:	b538      	push	{r3, r4, r5, lr}
 8029a22:	4d07      	ldr	r5, [pc, #28]	@ (8029a40 <_write_r+0x20>)
 8029a24:	4604      	mov	r4, r0
 8029a26:	4608      	mov	r0, r1
 8029a28:	4611      	mov	r1, r2
 8029a2a:	2200      	movs	r2, #0
 8029a2c:	602a      	str	r2, [r5, #0]
 8029a2e:	461a      	mov	r2, r3
 8029a30:	f7d8 fd1a 	bl	8002468 <_write>
 8029a34:	1c43      	adds	r3, r0, #1
 8029a36:	d102      	bne.n	8029a3e <_write_r+0x1e>
 8029a38:	682b      	ldr	r3, [r5, #0]
 8029a3a:	b103      	cbz	r3, 8029a3e <_write_r+0x1e>
 8029a3c:	6023      	str	r3, [r4, #0]
 8029a3e:	bd38      	pop	{r3, r4, r5, pc}
 8029a40:	24007198 	.word	0x24007198

08029a44 <__errno>:
 8029a44:	4b01      	ldr	r3, [pc, #4]	@ (8029a4c <__errno+0x8>)
 8029a46:	6818      	ldr	r0, [r3, #0]
 8029a48:	4770      	bx	lr
 8029a4a:	bf00      	nop
 8029a4c:	240000ac 	.word	0x240000ac

08029a50 <__libc_init_array>:
 8029a50:	b570      	push	{r4, r5, r6, lr}
 8029a52:	4d0d      	ldr	r5, [pc, #52]	@ (8029a88 <__libc_init_array+0x38>)
 8029a54:	4c0d      	ldr	r4, [pc, #52]	@ (8029a8c <__libc_init_array+0x3c>)
 8029a56:	1b64      	subs	r4, r4, r5
 8029a58:	10a4      	asrs	r4, r4, #2
 8029a5a:	2600      	movs	r6, #0
 8029a5c:	42a6      	cmp	r6, r4
 8029a5e:	d109      	bne.n	8029a74 <__libc_init_array+0x24>
 8029a60:	4d0b      	ldr	r5, [pc, #44]	@ (8029a90 <__libc_init_array+0x40>)
 8029a62:	4c0c      	ldr	r4, [pc, #48]	@ (8029a94 <__libc_init_array+0x44>)
 8029a64:	f000 fd5e 	bl	802a524 <_init>
 8029a68:	1b64      	subs	r4, r4, r5
 8029a6a:	10a4      	asrs	r4, r4, #2
 8029a6c:	2600      	movs	r6, #0
 8029a6e:	42a6      	cmp	r6, r4
 8029a70:	d105      	bne.n	8029a7e <__libc_init_array+0x2e>
 8029a72:	bd70      	pop	{r4, r5, r6, pc}
 8029a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8029a78:	4798      	blx	r3
 8029a7a:	3601      	adds	r6, #1
 8029a7c:	e7ee      	b.n	8029a5c <__libc_init_array+0xc>
 8029a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8029a82:	4798      	blx	r3
 8029a84:	3601      	adds	r6, #1
 8029a86:	e7f2      	b.n	8029a6e <__libc_init_array+0x1e>
 8029a88:	0802cb64 	.word	0x0802cb64
 8029a8c:	0802cb64 	.word	0x0802cb64
 8029a90:	0802cb64 	.word	0x0802cb64
 8029a94:	0802cb78 	.word	0x0802cb78

08029a98 <memcpy>:
 8029a98:	440a      	add	r2, r1
 8029a9a:	4291      	cmp	r1, r2
 8029a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8029aa0:	d100      	bne.n	8029aa4 <memcpy+0xc>
 8029aa2:	4770      	bx	lr
 8029aa4:	b510      	push	{r4, lr}
 8029aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029aae:	4291      	cmp	r1, r2
 8029ab0:	d1f9      	bne.n	8029aa6 <memcpy+0xe>
 8029ab2:	bd10      	pop	{r4, pc}

08029ab4 <__register_exitproc>:
 8029ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029ab8:	4d27      	ldr	r5, [pc, #156]	@ (8029b58 <__register_exitproc+0xa4>)
 8029aba:	4607      	mov	r7, r0
 8029abc:	6828      	ldr	r0, [r5, #0]
 8029abe:	4691      	mov	r9, r2
 8029ac0:	460e      	mov	r6, r1
 8029ac2:	4698      	mov	r8, r3
 8029ac4:	f7d9 f81a 	bl	8002afc <__retarget_lock_acquire_recursive>
 8029ac8:	4a24      	ldr	r2, [pc, #144]	@ (8029b5c <__register_exitproc+0xa8>)
 8029aca:	6814      	ldr	r4, [r2, #0]
 8029acc:	b93c      	cbnz	r4, 8029ade <__register_exitproc+0x2a>
 8029ace:	4b24      	ldr	r3, [pc, #144]	@ (8029b60 <__register_exitproc+0xac>)
 8029ad0:	6013      	str	r3, [r2, #0]
 8029ad2:	4a24      	ldr	r2, [pc, #144]	@ (8029b64 <__register_exitproc+0xb0>)
 8029ad4:	b112      	cbz	r2, 8029adc <__register_exitproc+0x28>
 8029ad6:	6812      	ldr	r2, [r2, #0]
 8029ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8029adc:	4c20      	ldr	r4, [pc, #128]	@ (8029b60 <__register_exitproc+0xac>)
 8029ade:	6863      	ldr	r3, [r4, #4]
 8029ae0:	2b1f      	cmp	r3, #31
 8029ae2:	dd06      	ble.n	8029af2 <__register_exitproc+0x3e>
 8029ae4:	6828      	ldr	r0, [r5, #0]
 8029ae6:	f7d9 f81e 	bl	8002b26 <__retarget_lock_release_recursive>
 8029aea:	f04f 30ff 	mov.w	r0, #4294967295
 8029aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029af2:	b32f      	cbz	r7, 8029b40 <__register_exitproc+0x8c>
 8029af4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8029af8:	b968      	cbnz	r0, 8029b16 <__register_exitproc+0x62>
 8029afa:	4b1b      	ldr	r3, [pc, #108]	@ (8029b68 <__register_exitproc+0xb4>)
 8029afc:	2b00      	cmp	r3, #0
 8029afe:	d0f1      	beq.n	8029ae4 <__register_exitproc+0x30>
 8029b00:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8029b04:	f7ff fca8 	bl	8029458 <malloc>
 8029b08:	2800      	cmp	r0, #0
 8029b0a:	d0eb      	beq.n	8029ae4 <__register_exitproc+0x30>
 8029b0c:	2300      	movs	r3, #0
 8029b0e:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8029b12:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8029b16:	6863      	ldr	r3, [r4, #4]
 8029b18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029b1c:	2201      	movs	r2, #1
 8029b1e:	409a      	lsls	r2, r3
 8029b20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029b24:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8029b28:	4313      	orrs	r3, r2
 8029b2a:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8029b2e:	2f02      	cmp	r7, #2
 8029b30:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8029b34:	bf02      	ittt	eq
 8029b36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8029b3a:	4313      	orreq	r3, r2
 8029b3c:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8029b40:	6863      	ldr	r3, [r4, #4]
 8029b42:	6828      	ldr	r0, [r5, #0]
 8029b44:	1c5a      	adds	r2, r3, #1
 8029b46:	3302      	adds	r3, #2
 8029b48:	6062      	str	r2, [r4, #4]
 8029b4a:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8029b4e:	f7d8 ffea 	bl	8002b26 <__retarget_lock_release_recursive>
 8029b52:	2000      	movs	r0, #0
 8029b54:	e7cb      	b.n	8029aee <__register_exitproc+0x3a>
 8029b56:	bf00      	nop
 8029b58:	240000fc 	.word	0x240000fc
 8029b5c:	24007228 	.word	0x24007228
 8029b60:	2400719c 	.word	0x2400719c
 8029b64:	0802cb50 	.word	0x0802cb50
 8029b68:	08029459 	.word	0x08029459

08029b6c <_free_r>:
 8029b6c:	b538      	push	{r3, r4, r5, lr}
 8029b6e:	4605      	mov	r5, r0
 8029b70:	2900      	cmp	r1, #0
 8029b72:	d041      	beq.n	8029bf8 <_free_r+0x8c>
 8029b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029b78:	1f0c      	subs	r4, r1, #4
 8029b7a:	2b00      	cmp	r3, #0
 8029b7c:	bfb8      	it	lt
 8029b7e:	18e4      	addlt	r4, r4, r3
 8029b80:	f7ff fd1c 	bl	80295bc <__malloc_lock>
 8029b84:	4a1d      	ldr	r2, [pc, #116]	@ (8029bfc <_free_r+0x90>)
 8029b86:	6813      	ldr	r3, [r2, #0]
 8029b88:	b933      	cbnz	r3, 8029b98 <_free_r+0x2c>
 8029b8a:	6063      	str	r3, [r4, #4]
 8029b8c:	6014      	str	r4, [r2, #0]
 8029b8e:	4628      	mov	r0, r5
 8029b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029b94:	f7ff bd18 	b.w	80295c8 <__malloc_unlock>
 8029b98:	42a3      	cmp	r3, r4
 8029b9a:	d908      	bls.n	8029bae <_free_r+0x42>
 8029b9c:	6820      	ldr	r0, [r4, #0]
 8029b9e:	1821      	adds	r1, r4, r0
 8029ba0:	428b      	cmp	r3, r1
 8029ba2:	bf01      	itttt	eq
 8029ba4:	6819      	ldreq	r1, [r3, #0]
 8029ba6:	685b      	ldreq	r3, [r3, #4]
 8029ba8:	1809      	addeq	r1, r1, r0
 8029baa:	6021      	streq	r1, [r4, #0]
 8029bac:	e7ed      	b.n	8029b8a <_free_r+0x1e>
 8029bae:	461a      	mov	r2, r3
 8029bb0:	685b      	ldr	r3, [r3, #4]
 8029bb2:	b10b      	cbz	r3, 8029bb8 <_free_r+0x4c>
 8029bb4:	42a3      	cmp	r3, r4
 8029bb6:	d9fa      	bls.n	8029bae <_free_r+0x42>
 8029bb8:	6811      	ldr	r1, [r2, #0]
 8029bba:	1850      	adds	r0, r2, r1
 8029bbc:	42a0      	cmp	r0, r4
 8029bbe:	d10b      	bne.n	8029bd8 <_free_r+0x6c>
 8029bc0:	6820      	ldr	r0, [r4, #0]
 8029bc2:	4401      	add	r1, r0
 8029bc4:	1850      	adds	r0, r2, r1
 8029bc6:	4283      	cmp	r3, r0
 8029bc8:	6011      	str	r1, [r2, #0]
 8029bca:	d1e0      	bne.n	8029b8e <_free_r+0x22>
 8029bcc:	6818      	ldr	r0, [r3, #0]
 8029bce:	685b      	ldr	r3, [r3, #4]
 8029bd0:	6053      	str	r3, [r2, #4]
 8029bd2:	4408      	add	r0, r1
 8029bd4:	6010      	str	r0, [r2, #0]
 8029bd6:	e7da      	b.n	8029b8e <_free_r+0x22>
 8029bd8:	d902      	bls.n	8029be0 <_free_r+0x74>
 8029bda:	230c      	movs	r3, #12
 8029bdc:	602b      	str	r3, [r5, #0]
 8029bde:	e7d6      	b.n	8029b8e <_free_r+0x22>
 8029be0:	6820      	ldr	r0, [r4, #0]
 8029be2:	1821      	adds	r1, r4, r0
 8029be4:	428b      	cmp	r3, r1
 8029be6:	bf04      	itt	eq
 8029be8:	6819      	ldreq	r1, [r3, #0]
 8029bea:	685b      	ldreq	r3, [r3, #4]
 8029bec:	6063      	str	r3, [r4, #4]
 8029bee:	bf04      	itt	eq
 8029bf0:	1809      	addeq	r1, r1, r0
 8029bf2:	6021      	streq	r1, [r4, #0]
 8029bf4:	6054      	str	r4, [r2, #4]
 8029bf6:	e7ca      	b.n	8029b8e <_free_r+0x22>
 8029bf8:	bd38      	pop	{r3, r4, r5, pc}
 8029bfa:	bf00      	nop
 8029bfc:	24007058 	.word	0x24007058

08029c00 <__sfputc_r>:
 8029c00:	6893      	ldr	r3, [r2, #8]
 8029c02:	3b01      	subs	r3, #1
 8029c04:	2b00      	cmp	r3, #0
 8029c06:	b410      	push	{r4}
 8029c08:	6093      	str	r3, [r2, #8]
 8029c0a:	da08      	bge.n	8029c1e <__sfputc_r+0x1e>
 8029c0c:	6994      	ldr	r4, [r2, #24]
 8029c0e:	42a3      	cmp	r3, r4
 8029c10:	db01      	blt.n	8029c16 <__sfputc_r+0x16>
 8029c12:	290a      	cmp	r1, #10
 8029c14:	d103      	bne.n	8029c1e <__sfputc_r+0x1e>
 8029c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029c1a:	f000 bb6b 	b.w	802a2f4 <__swbuf_r>
 8029c1e:	6813      	ldr	r3, [r2, #0]
 8029c20:	1c58      	adds	r0, r3, #1
 8029c22:	6010      	str	r0, [r2, #0]
 8029c24:	7019      	strb	r1, [r3, #0]
 8029c26:	4608      	mov	r0, r1
 8029c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029c2c:	4770      	bx	lr

08029c2e <__sfputs_r>:
 8029c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029c30:	4606      	mov	r6, r0
 8029c32:	460f      	mov	r7, r1
 8029c34:	4614      	mov	r4, r2
 8029c36:	18d5      	adds	r5, r2, r3
 8029c38:	42ac      	cmp	r4, r5
 8029c3a:	d101      	bne.n	8029c40 <__sfputs_r+0x12>
 8029c3c:	2000      	movs	r0, #0
 8029c3e:	e007      	b.n	8029c50 <__sfputs_r+0x22>
 8029c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029c44:	463a      	mov	r2, r7
 8029c46:	4630      	mov	r0, r6
 8029c48:	f7ff ffda 	bl	8029c00 <__sfputc_r>
 8029c4c:	1c43      	adds	r3, r0, #1
 8029c4e:	d1f3      	bne.n	8029c38 <__sfputs_r+0xa>
 8029c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029c54 <_vfiprintf_r>:
 8029c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c58:	460d      	mov	r5, r1
 8029c5a:	b09d      	sub	sp, #116	@ 0x74
 8029c5c:	4614      	mov	r4, r2
 8029c5e:	4698      	mov	r8, r3
 8029c60:	4606      	mov	r6, r0
 8029c62:	b118      	cbz	r0, 8029c6c <_vfiprintf_r+0x18>
 8029c64:	6a03      	ldr	r3, [r0, #32]
 8029c66:	b90b      	cbnz	r3, 8029c6c <_vfiprintf_r+0x18>
 8029c68:	f7ff fd4e 	bl	8029708 <__sinit>
 8029c6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029c6e:	07d9      	lsls	r1, r3, #31
 8029c70:	d405      	bmi.n	8029c7e <_vfiprintf_r+0x2a>
 8029c72:	89ab      	ldrh	r3, [r5, #12]
 8029c74:	059a      	lsls	r2, r3, #22
 8029c76:	d402      	bmi.n	8029c7e <_vfiprintf_r+0x2a>
 8029c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029c7a:	f7d8 ff3f 	bl	8002afc <__retarget_lock_acquire_recursive>
 8029c7e:	89ab      	ldrh	r3, [r5, #12]
 8029c80:	071b      	lsls	r3, r3, #28
 8029c82:	d501      	bpl.n	8029c88 <_vfiprintf_r+0x34>
 8029c84:	692b      	ldr	r3, [r5, #16]
 8029c86:	b99b      	cbnz	r3, 8029cb0 <_vfiprintf_r+0x5c>
 8029c88:	4629      	mov	r1, r5
 8029c8a:	4630      	mov	r0, r6
 8029c8c:	f000 fb70 	bl	802a370 <__swsetup_r>
 8029c90:	b170      	cbz	r0, 8029cb0 <_vfiprintf_r+0x5c>
 8029c92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029c94:	07dc      	lsls	r4, r3, #31
 8029c96:	d504      	bpl.n	8029ca2 <_vfiprintf_r+0x4e>
 8029c98:	f04f 30ff 	mov.w	r0, #4294967295
 8029c9c:	b01d      	add	sp, #116	@ 0x74
 8029c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029ca2:	89ab      	ldrh	r3, [r5, #12]
 8029ca4:	0598      	lsls	r0, r3, #22
 8029ca6:	d4f7      	bmi.n	8029c98 <_vfiprintf_r+0x44>
 8029ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029caa:	f7d8 ff3c 	bl	8002b26 <__retarget_lock_release_recursive>
 8029cae:	e7f3      	b.n	8029c98 <_vfiprintf_r+0x44>
 8029cb0:	2300      	movs	r3, #0
 8029cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8029cb4:	2320      	movs	r3, #32
 8029cb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8029cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8029cbe:	2330      	movs	r3, #48	@ 0x30
 8029cc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8029e70 <_vfiprintf_r+0x21c>
 8029cc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8029cc8:	f04f 0901 	mov.w	r9, #1
 8029ccc:	4623      	mov	r3, r4
 8029cce:	469a      	mov	sl, r3
 8029cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029cd4:	b10a      	cbz	r2, 8029cda <_vfiprintf_r+0x86>
 8029cd6:	2a25      	cmp	r2, #37	@ 0x25
 8029cd8:	d1f9      	bne.n	8029cce <_vfiprintf_r+0x7a>
 8029cda:	ebba 0b04 	subs.w	fp, sl, r4
 8029cde:	d00b      	beq.n	8029cf8 <_vfiprintf_r+0xa4>
 8029ce0:	465b      	mov	r3, fp
 8029ce2:	4622      	mov	r2, r4
 8029ce4:	4629      	mov	r1, r5
 8029ce6:	4630      	mov	r0, r6
 8029ce8:	f7ff ffa1 	bl	8029c2e <__sfputs_r>
 8029cec:	3001      	adds	r0, #1
 8029cee:	f000 80a7 	beq.w	8029e40 <_vfiprintf_r+0x1ec>
 8029cf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029cf4:	445a      	add	r2, fp
 8029cf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8029cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8029cfc:	2b00      	cmp	r3, #0
 8029cfe:	f000 809f 	beq.w	8029e40 <_vfiprintf_r+0x1ec>
 8029d02:	2300      	movs	r3, #0
 8029d04:	f04f 32ff 	mov.w	r2, #4294967295
 8029d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029d0c:	f10a 0a01 	add.w	sl, sl, #1
 8029d10:	9304      	str	r3, [sp, #16]
 8029d12:	9307      	str	r3, [sp, #28]
 8029d14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8029d18:	931a      	str	r3, [sp, #104]	@ 0x68
 8029d1a:	4654      	mov	r4, sl
 8029d1c:	2205      	movs	r2, #5
 8029d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029d22:	4853      	ldr	r0, [pc, #332]	@ (8029e70 <_vfiprintf_r+0x21c>)
 8029d24:	f7d6 fadc 	bl	80002e0 <memchr>
 8029d28:	9a04      	ldr	r2, [sp, #16]
 8029d2a:	b9d8      	cbnz	r0, 8029d64 <_vfiprintf_r+0x110>
 8029d2c:	06d1      	lsls	r1, r2, #27
 8029d2e:	bf44      	itt	mi
 8029d30:	2320      	movmi	r3, #32
 8029d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029d36:	0713      	lsls	r3, r2, #28
 8029d38:	bf44      	itt	mi
 8029d3a:	232b      	movmi	r3, #43	@ 0x2b
 8029d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029d40:	f89a 3000 	ldrb.w	r3, [sl]
 8029d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8029d46:	d015      	beq.n	8029d74 <_vfiprintf_r+0x120>
 8029d48:	9a07      	ldr	r2, [sp, #28]
 8029d4a:	4654      	mov	r4, sl
 8029d4c:	2000      	movs	r0, #0
 8029d4e:	f04f 0c0a 	mov.w	ip, #10
 8029d52:	4621      	mov	r1, r4
 8029d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029d58:	3b30      	subs	r3, #48	@ 0x30
 8029d5a:	2b09      	cmp	r3, #9
 8029d5c:	d94b      	bls.n	8029df6 <_vfiprintf_r+0x1a2>
 8029d5e:	b1b0      	cbz	r0, 8029d8e <_vfiprintf_r+0x13a>
 8029d60:	9207      	str	r2, [sp, #28]
 8029d62:	e014      	b.n	8029d8e <_vfiprintf_r+0x13a>
 8029d64:	eba0 0308 	sub.w	r3, r0, r8
 8029d68:	fa09 f303 	lsl.w	r3, r9, r3
 8029d6c:	4313      	orrs	r3, r2
 8029d6e:	9304      	str	r3, [sp, #16]
 8029d70:	46a2      	mov	sl, r4
 8029d72:	e7d2      	b.n	8029d1a <_vfiprintf_r+0xc6>
 8029d74:	9b03      	ldr	r3, [sp, #12]
 8029d76:	1d19      	adds	r1, r3, #4
 8029d78:	681b      	ldr	r3, [r3, #0]
 8029d7a:	9103      	str	r1, [sp, #12]
 8029d7c:	2b00      	cmp	r3, #0
 8029d7e:	bfbb      	ittet	lt
 8029d80:	425b      	neglt	r3, r3
 8029d82:	f042 0202 	orrlt.w	r2, r2, #2
 8029d86:	9307      	strge	r3, [sp, #28]
 8029d88:	9307      	strlt	r3, [sp, #28]
 8029d8a:	bfb8      	it	lt
 8029d8c:	9204      	strlt	r2, [sp, #16]
 8029d8e:	7823      	ldrb	r3, [r4, #0]
 8029d90:	2b2e      	cmp	r3, #46	@ 0x2e
 8029d92:	d10a      	bne.n	8029daa <_vfiprintf_r+0x156>
 8029d94:	7863      	ldrb	r3, [r4, #1]
 8029d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8029d98:	d132      	bne.n	8029e00 <_vfiprintf_r+0x1ac>
 8029d9a:	9b03      	ldr	r3, [sp, #12]
 8029d9c:	1d1a      	adds	r2, r3, #4
 8029d9e:	681b      	ldr	r3, [r3, #0]
 8029da0:	9203      	str	r2, [sp, #12]
 8029da2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8029da6:	3402      	adds	r4, #2
 8029da8:	9305      	str	r3, [sp, #20]
 8029daa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8029e80 <_vfiprintf_r+0x22c>
 8029dae:	7821      	ldrb	r1, [r4, #0]
 8029db0:	2203      	movs	r2, #3
 8029db2:	4650      	mov	r0, sl
 8029db4:	f7d6 fa94 	bl	80002e0 <memchr>
 8029db8:	b138      	cbz	r0, 8029dca <_vfiprintf_r+0x176>
 8029dba:	9b04      	ldr	r3, [sp, #16]
 8029dbc:	eba0 000a 	sub.w	r0, r0, sl
 8029dc0:	2240      	movs	r2, #64	@ 0x40
 8029dc2:	4082      	lsls	r2, r0
 8029dc4:	4313      	orrs	r3, r2
 8029dc6:	3401      	adds	r4, #1
 8029dc8:	9304      	str	r3, [sp, #16]
 8029dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029dce:	4829      	ldr	r0, [pc, #164]	@ (8029e74 <_vfiprintf_r+0x220>)
 8029dd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8029dd4:	2206      	movs	r2, #6
 8029dd6:	f7d6 fa83 	bl	80002e0 <memchr>
 8029dda:	2800      	cmp	r0, #0
 8029ddc:	d03f      	beq.n	8029e5e <_vfiprintf_r+0x20a>
 8029dde:	4b26      	ldr	r3, [pc, #152]	@ (8029e78 <_vfiprintf_r+0x224>)
 8029de0:	bb1b      	cbnz	r3, 8029e2a <_vfiprintf_r+0x1d6>
 8029de2:	9b03      	ldr	r3, [sp, #12]
 8029de4:	3307      	adds	r3, #7
 8029de6:	f023 0307 	bic.w	r3, r3, #7
 8029dea:	3308      	adds	r3, #8
 8029dec:	9303      	str	r3, [sp, #12]
 8029dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029df0:	443b      	add	r3, r7
 8029df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8029df4:	e76a      	b.n	8029ccc <_vfiprintf_r+0x78>
 8029df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8029dfa:	460c      	mov	r4, r1
 8029dfc:	2001      	movs	r0, #1
 8029dfe:	e7a8      	b.n	8029d52 <_vfiprintf_r+0xfe>
 8029e00:	2300      	movs	r3, #0
 8029e02:	3401      	adds	r4, #1
 8029e04:	9305      	str	r3, [sp, #20]
 8029e06:	4619      	mov	r1, r3
 8029e08:	f04f 0c0a 	mov.w	ip, #10
 8029e0c:	4620      	mov	r0, r4
 8029e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029e12:	3a30      	subs	r2, #48	@ 0x30
 8029e14:	2a09      	cmp	r2, #9
 8029e16:	d903      	bls.n	8029e20 <_vfiprintf_r+0x1cc>
 8029e18:	2b00      	cmp	r3, #0
 8029e1a:	d0c6      	beq.n	8029daa <_vfiprintf_r+0x156>
 8029e1c:	9105      	str	r1, [sp, #20]
 8029e1e:	e7c4      	b.n	8029daa <_vfiprintf_r+0x156>
 8029e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8029e24:	4604      	mov	r4, r0
 8029e26:	2301      	movs	r3, #1
 8029e28:	e7f0      	b.n	8029e0c <_vfiprintf_r+0x1b8>
 8029e2a:	ab03      	add	r3, sp, #12
 8029e2c:	9300      	str	r3, [sp, #0]
 8029e2e:	462a      	mov	r2, r5
 8029e30:	4b12      	ldr	r3, [pc, #72]	@ (8029e7c <_vfiprintf_r+0x228>)
 8029e32:	a904      	add	r1, sp, #16
 8029e34:	4630      	mov	r0, r6
 8029e36:	f3af 8000 	nop.w
 8029e3a:	4607      	mov	r7, r0
 8029e3c:	1c78      	adds	r0, r7, #1
 8029e3e:	d1d6      	bne.n	8029dee <_vfiprintf_r+0x19a>
 8029e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029e42:	07d9      	lsls	r1, r3, #31
 8029e44:	d405      	bmi.n	8029e52 <_vfiprintf_r+0x1fe>
 8029e46:	89ab      	ldrh	r3, [r5, #12]
 8029e48:	059a      	lsls	r2, r3, #22
 8029e4a:	d402      	bmi.n	8029e52 <_vfiprintf_r+0x1fe>
 8029e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029e4e:	f7d8 fe6a 	bl	8002b26 <__retarget_lock_release_recursive>
 8029e52:	89ab      	ldrh	r3, [r5, #12]
 8029e54:	065b      	lsls	r3, r3, #25
 8029e56:	f53f af1f 	bmi.w	8029c98 <_vfiprintf_r+0x44>
 8029e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029e5c:	e71e      	b.n	8029c9c <_vfiprintf_r+0x48>
 8029e5e:	ab03      	add	r3, sp, #12
 8029e60:	9300      	str	r3, [sp, #0]
 8029e62:	462a      	mov	r2, r5
 8029e64:	4b05      	ldr	r3, [pc, #20]	@ (8029e7c <_vfiprintf_r+0x228>)
 8029e66:	a904      	add	r1, sp, #16
 8029e68:	4630      	mov	r0, r6
 8029e6a:	f000 f879 	bl	8029f60 <_printf_i>
 8029e6e:	e7e4      	b.n	8029e3a <_vfiprintf_r+0x1e6>
 8029e70:	0802bac0 	.word	0x0802bac0
 8029e74:	0802baca 	.word	0x0802baca
 8029e78:	00000000 	.word	0x00000000
 8029e7c:	08029c2f 	.word	0x08029c2f
 8029e80:	0802bac6 	.word	0x0802bac6

08029e84 <_printf_common>:
 8029e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029e88:	4616      	mov	r6, r2
 8029e8a:	4698      	mov	r8, r3
 8029e8c:	688a      	ldr	r2, [r1, #8]
 8029e8e:	690b      	ldr	r3, [r1, #16]
 8029e90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8029e94:	4293      	cmp	r3, r2
 8029e96:	bfb8      	it	lt
 8029e98:	4613      	movlt	r3, r2
 8029e9a:	6033      	str	r3, [r6, #0]
 8029e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8029ea0:	4607      	mov	r7, r0
 8029ea2:	460c      	mov	r4, r1
 8029ea4:	b10a      	cbz	r2, 8029eaa <_printf_common+0x26>
 8029ea6:	3301      	adds	r3, #1
 8029ea8:	6033      	str	r3, [r6, #0]
 8029eaa:	6823      	ldr	r3, [r4, #0]
 8029eac:	0699      	lsls	r1, r3, #26
 8029eae:	bf42      	ittt	mi
 8029eb0:	6833      	ldrmi	r3, [r6, #0]
 8029eb2:	3302      	addmi	r3, #2
 8029eb4:	6033      	strmi	r3, [r6, #0]
 8029eb6:	6825      	ldr	r5, [r4, #0]
 8029eb8:	f015 0506 	ands.w	r5, r5, #6
 8029ebc:	d106      	bne.n	8029ecc <_printf_common+0x48>
 8029ebe:	f104 0a19 	add.w	sl, r4, #25
 8029ec2:	68e3      	ldr	r3, [r4, #12]
 8029ec4:	6832      	ldr	r2, [r6, #0]
 8029ec6:	1a9b      	subs	r3, r3, r2
 8029ec8:	42ab      	cmp	r3, r5
 8029eca:	dc26      	bgt.n	8029f1a <_printf_common+0x96>
 8029ecc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8029ed0:	6822      	ldr	r2, [r4, #0]
 8029ed2:	3b00      	subs	r3, #0
 8029ed4:	bf18      	it	ne
 8029ed6:	2301      	movne	r3, #1
 8029ed8:	0692      	lsls	r2, r2, #26
 8029eda:	d42b      	bmi.n	8029f34 <_printf_common+0xb0>
 8029edc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8029ee0:	4641      	mov	r1, r8
 8029ee2:	4638      	mov	r0, r7
 8029ee4:	47c8      	blx	r9
 8029ee6:	3001      	adds	r0, #1
 8029ee8:	d01e      	beq.n	8029f28 <_printf_common+0xa4>
 8029eea:	6823      	ldr	r3, [r4, #0]
 8029eec:	6922      	ldr	r2, [r4, #16]
 8029eee:	f003 0306 	and.w	r3, r3, #6
 8029ef2:	2b04      	cmp	r3, #4
 8029ef4:	bf02      	ittt	eq
 8029ef6:	68e5      	ldreq	r5, [r4, #12]
 8029ef8:	6833      	ldreq	r3, [r6, #0]
 8029efa:	1aed      	subeq	r5, r5, r3
 8029efc:	68a3      	ldr	r3, [r4, #8]
 8029efe:	bf0c      	ite	eq
 8029f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029f04:	2500      	movne	r5, #0
 8029f06:	4293      	cmp	r3, r2
 8029f08:	bfc4      	itt	gt
 8029f0a:	1a9b      	subgt	r3, r3, r2
 8029f0c:	18ed      	addgt	r5, r5, r3
 8029f0e:	2600      	movs	r6, #0
 8029f10:	341a      	adds	r4, #26
 8029f12:	42b5      	cmp	r5, r6
 8029f14:	d11a      	bne.n	8029f4c <_printf_common+0xc8>
 8029f16:	2000      	movs	r0, #0
 8029f18:	e008      	b.n	8029f2c <_printf_common+0xa8>
 8029f1a:	2301      	movs	r3, #1
 8029f1c:	4652      	mov	r2, sl
 8029f1e:	4641      	mov	r1, r8
 8029f20:	4638      	mov	r0, r7
 8029f22:	47c8      	blx	r9
 8029f24:	3001      	adds	r0, #1
 8029f26:	d103      	bne.n	8029f30 <_printf_common+0xac>
 8029f28:	f04f 30ff 	mov.w	r0, #4294967295
 8029f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029f30:	3501      	adds	r5, #1
 8029f32:	e7c6      	b.n	8029ec2 <_printf_common+0x3e>
 8029f34:	18e1      	adds	r1, r4, r3
 8029f36:	1c5a      	adds	r2, r3, #1
 8029f38:	2030      	movs	r0, #48	@ 0x30
 8029f3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8029f3e:	4422      	add	r2, r4
 8029f40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8029f44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8029f48:	3302      	adds	r3, #2
 8029f4a:	e7c7      	b.n	8029edc <_printf_common+0x58>
 8029f4c:	2301      	movs	r3, #1
 8029f4e:	4622      	mov	r2, r4
 8029f50:	4641      	mov	r1, r8
 8029f52:	4638      	mov	r0, r7
 8029f54:	47c8      	blx	r9
 8029f56:	3001      	adds	r0, #1
 8029f58:	d0e6      	beq.n	8029f28 <_printf_common+0xa4>
 8029f5a:	3601      	adds	r6, #1
 8029f5c:	e7d9      	b.n	8029f12 <_printf_common+0x8e>
	...

08029f60 <_printf_i>:
 8029f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029f64:	7e0f      	ldrb	r7, [r1, #24]
 8029f66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8029f68:	2f78      	cmp	r7, #120	@ 0x78
 8029f6a:	4691      	mov	r9, r2
 8029f6c:	4680      	mov	r8, r0
 8029f6e:	460c      	mov	r4, r1
 8029f70:	469a      	mov	sl, r3
 8029f72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8029f76:	d807      	bhi.n	8029f88 <_printf_i+0x28>
 8029f78:	2f62      	cmp	r7, #98	@ 0x62
 8029f7a:	d80a      	bhi.n	8029f92 <_printf_i+0x32>
 8029f7c:	2f00      	cmp	r7, #0
 8029f7e:	f000 80d1 	beq.w	802a124 <_printf_i+0x1c4>
 8029f82:	2f58      	cmp	r7, #88	@ 0x58
 8029f84:	f000 80b8 	beq.w	802a0f8 <_printf_i+0x198>
 8029f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029f8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8029f90:	e03a      	b.n	802a008 <_printf_i+0xa8>
 8029f92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8029f96:	2b15      	cmp	r3, #21
 8029f98:	d8f6      	bhi.n	8029f88 <_printf_i+0x28>
 8029f9a:	a101      	add	r1, pc, #4	@ (adr r1, 8029fa0 <_printf_i+0x40>)
 8029f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8029fa0:	08029ff9 	.word	0x08029ff9
 8029fa4:	0802a00d 	.word	0x0802a00d
 8029fa8:	08029f89 	.word	0x08029f89
 8029fac:	08029f89 	.word	0x08029f89
 8029fb0:	08029f89 	.word	0x08029f89
 8029fb4:	08029f89 	.word	0x08029f89
 8029fb8:	0802a00d 	.word	0x0802a00d
 8029fbc:	08029f89 	.word	0x08029f89
 8029fc0:	08029f89 	.word	0x08029f89
 8029fc4:	08029f89 	.word	0x08029f89
 8029fc8:	08029f89 	.word	0x08029f89
 8029fcc:	0802a10b 	.word	0x0802a10b
 8029fd0:	0802a037 	.word	0x0802a037
 8029fd4:	0802a0c5 	.word	0x0802a0c5
 8029fd8:	08029f89 	.word	0x08029f89
 8029fdc:	08029f89 	.word	0x08029f89
 8029fe0:	0802a12d 	.word	0x0802a12d
 8029fe4:	08029f89 	.word	0x08029f89
 8029fe8:	0802a037 	.word	0x0802a037
 8029fec:	08029f89 	.word	0x08029f89
 8029ff0:	08029f89 	.word	0x08029f89
 8029ff4:	0802a0cd 	.word	0x0802a0cd
 8029ff8:	6833      	ldr	r3, [r6, #0]
 8029ffa:	1d1a      	adds	r2, r3, #4
 8029ffc:	681b      	ldr	r3, [r3, #0]
 8029ffe:	6032      	str	r2, [r6, #0]
 802a000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802a004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802a008:	2301      	movs	r3, #1
 802a00a:	e09c      	b.n	802a146 <_printf_i+0x1e6>
 802a00c:	6833      	ldr	r3, [r6, #0]
 802a00e:	6820      	ldr	r0, [r4, #0]
 802a010:	1d19      	adds	r1, r3, #4
 802a012:	6031      	str	r1, [r6, #0]
 802a014:	0606      	lsls	r6, r0, #24
 802a016:	d501      	bpl.n	802a01c <_printf_i+0xbc>
 802a018:	681d      	ldr	r5, [r3, #0]
 802a01a:	e003      	b.n	802a024 <_printf_i+0xc4>
 802a01c:	0645      	lsls	r5, r0, #25
 802a01e:	d5fb      	bpl.n	802a018 <_printf_i+0xb8>
 802a020:	f9b3 5000 	ldrsh.w	r5, [r3]
 802a024:	2d00      	cmp	r5, #0
 802a026:	da03      	bge.n	802a030 <_printf_i+0xd0>
 802a028:	232d      	movs	r3, #45	@ 0x2d
 802a02a:	426d      	negs	r5, r5
 802a02c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a030:	4858      	ldr	r0, [pc, #352]	@ (802a194 <_printf_i+0x234>)
 802a032:	230a      	movs	r3, #10
 802a034:	e011      	b.n	802a05a <_printf_i+0xfa>
 802a036:	6821      	ldr	r1, [r4, #0]
 802a038:	6833      	ldr	r3, [r6, #0]
 802a03a:	0608      	lsls	r0, r1, #24
 802a03c:	f853 5b04 	ldr.w	r5, [r3], #4
 802a040:	d402      	bmi.n	802a048 <_printf_i+0xe8>
 802a042:	0649      	lsls	r1, r1, #25
 802a044:	bf48      	it	mi
 802a046:	b2ad      	uxthmi	r5, r5
 802a048:	2f6f      	cmp	r7, #111	@ 0x6f
 802a04a:	4852      	ldr	r0, [pc, #328]	@ (802a194 <_printf_i+0x234>)
 802a04c:	6033      	str	r3, [r6, #0]
 802a04e:	bf14      	ite	ne
 802a050:	230a      	movne	r3, #10
 802a052:	2308      	moveq	r3, #8
 802a054:	2100      	movs	r1, #0
 802a056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802a05a:	6866      	ldr	r6, [r4, #4]
 802a05c:	60a6      	str	r6, [r4, #8]
 802a05e:	2e00      	cmp	r6, #0
 802a060:	db05      	blt.n	802a06e <_printf_i+0x10e>
 802a062:	6821      	ldr	r1, [r4, #0]
 802a064:	432e      	orrs	r6, r5
 802a066:	f021 0104 	bic.w	r1, r1, #4
 802a06a:	6021      	str	r1, [r4, #0]
 802a06c:	d04b      	beq.n	802a106 <_printf_i+0x1a6>
 802a06e:	4616      	mov	r6, r2
 802a070:	fbb5 f1f3 	udiv	r1, r5, r3
 802a074:	fb03 5711 	mls	r7, r3, r1, r5
 802a078:	5dc7      	ldrb	r7, [r0, r7]
 802a07a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802a07e:	462f      	mov	r7, r5
 802a080:	42bb      	cmp	r3, r7
 802a082:	460d      	mov	r5, r1
 802a084:	d9f4      	bls.n	802a070 <_printf_i+0x110>
 802a086:	2b08      	cmp	r3, #8
 802a088:	d10b      	bne.n	802a0a2 <_printf_i+0x142>
 802a08a:	6823      	ldr	r3, [r4, #0]
 802a08c:	07df      	lsls	r7, r3, #31
 802a08e:	d508      	bpl.n	802a0a2 <_printf_i+0x142>
 802a090:	6923      	ldr	r3, [r4, #16]
 802a092:	6861      	ldr	r1, [r4, #4]
 802a094:	4299      	cmp	r1, r3
 802a096:	bfde      	ittt	le
 802a098:	2330      	movle	r3, #48	@ 0x30
 802a09a:	f806 3c01 	strble.w	r3, [r6, #-1]
 802a09e:	f106 36ff 	addle.w	r6, r6, #4294967295
 802a0a2:	1b92      	subs	r2, r2, r6
 802a0a4:	6122      	str	r2, [r4, #16]
 802a0a6:	f8cd a000 	str.w	sl, [sp]
 802a0aa:	464b      	mov	r3, r9
 802a0ac:	aa03      	add	r2, sp, #12
 802a0ae:	4621      	mov	r1, r4
 802a0b0:	4640      	mov	r0, r8
 802a0b2:	f7ff fee7 	bl	8029e84 <_printf_common>
 802a0b6:	3001      	adds	r0, #1
 802a0b8:	d14a      	bne.n	802a150 <_printf_i+0x1f0>
 802a0ba:	f04f 30ff 	mov.w	r0, #4294967295
 802a0be:	b004      	add	sp, #16
 802a0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a0c4:	6823      	ldr	r3, [r4, #0]
 802a0c6:	f043 0320 	orr.w	r3, r3, #32
 802a0ca:	6023      	str	r3, [r4, #0]
 802a0cc:	4832      	ldr	r0, [pc, #200]	@ (802a198 <_printf_i+0x238>)
 802a0ce:	2778      	movs	r7, #120	@ 0x78
 802a0d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802a0d4:	6823      	ldr	r3, [r4, #0]
 802a0d6:	6831      	ldr	r1, [r6, #0]
 802a0d8:	061f      	lsls	r7, r3, #24
 802a0da:	f851 5b04 	ldr.w	r5, [r1], #4
 802a0de:	d402      	bmi.n	802a0e6 <_printf_i+0x186>
 802a0e0:	065f      	lsls	r7, r3, #25
 802a0e2:	bf48      	it	mi
 802a0e4:	b2ad      	uxthmi	r5, r5
 802a0e6:	6031      	str	r1, [r6, #0]
 802a0e8:	07d9      	lsls	r1, r3, #31
 802a0ea:	bf44      	itt	mi
 802a0ec:	f043 0320 	orrmi.w	r3, r3, #32
 802a0f0:	6023      	strmi	r3, [r4, #0]
 802a0f2:	b11d      	cbz	r5, 802a0fc <_printf_i+0x19c>
 802a0f4:	2310      	movs	r3, #16
 802a0f6:	e7ad      	b.n	802a054 <_printf_i+0xf4>
 802a0f8:	4826      	ldr	r0, [pc, #152]	@ (802a194 <_printf_i+0x234>)
 802a0fa:	e7e9      	b.n	802a0d0 <_printf_i+0x170>
 802a0fc:	6823      	ldr	r3, [r4, #0]
 802a0fe:	f023 0320 	bic.w	r3, r3, #32
 802a102:	6023      	str	r3, [r4, #0]
 802a104:	e7f6      	b.n	802a0f4 <_printf_i+0x194>
 802a106:	4616      	mov	r6, r2
 802a108:	e7bd      	b.n	802a086 <_printf_i+0x126>
 802a10a:	6833      	ldr	r3, [r6, #0]
 802a10c:	6825      	ldr	r5, [r4, #0]
 802a10e:	6961      	ldr	r1, [r4, #20]
 802a110:	1d18      	adds	r0, r3, #4
 802a112:	6030      	str	r0, [r6, #0]
 802a114:	062e      	lsls	r6, r5, #24
 802a116:	681b      	ldr	r3, [r3, #0]
 802a118:	d501      	bpl.n	802a11e <_printf_i+0x1be>
 802a11a:	6019      	str	r1, [r3, #0]
 802a11c:	e002      	b.n	802a124 <_printf_i+0x1c4>
 802a11e:	0668      	lsls	r0, r5, #25
 802a120:	d5fb      	bpl.n	802a11a <_printf_i+0x1ba>
 802a122:	8019      	strh	r1, [r3, #0]
 802a124:	2300      	movs	r3, #0
 802a126:	6123      	str	r3, [r4, #16]
 802a128:	4616      	mov	r6, r2
 802a12a:	e7bc      	b.n	802a0a6 <_printf_i+0x146>
 802a12c:	6833      	ldr	r3, [r6, #0]
 802a12e:	1d1a      	adds	r2, r3, #4
 802a130:	6032      	str	r2, [r6, #0]
 802a132:	681e      	ldr	r6, [r3, #0]
 802a134:	6862      	ldr	r2, [r4, #4]
 802a136:	2100      	movs	r1, #0
 802a138:	4630      	mov	r0, r6
 802a13a:	f7d6 f8d1 	bl	80002e0 <memchr>
 802a13e:	b108      	cbz	r0, 802a144 <_printf_i+0x1e4>
 802a140:	1b80      	subs	r0, r0, r6
 802a142:	6060      	str	r0, [r4, #4]
 802a144:	6863      	ldr	r3, [r4, #4]
 802a146:	6123      	str	r3, [r4, #16]
 802a148:	2300      	movs	r3, #0
 802a14a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a14e:	e7aa      	b.n	802a0a6 <_printf_i+0x146>
 802a150:	6923      	ldr	r3, [r4, #16]
 802a152:	4632      	mov	r2, r6
 802a154:	4649      	mov	r1, r9
 802a156:	4640      	mov	r0, r8
 802a158:	47d0      	blx	sl
 802a15a:	3001      	adds	r0, #1
 802a15c:	d0ad      	beq.n	802a0ba <_printf_i+0x15a>
 802a15e:	6823      	ldr	r3, [r4, #0]
 802a160:	079b      	lsls	r3, r3, #30
 802a162:	d413      	bmi.n	802a18c <_printf_i+0x22c>
 802a164:	68e0      	ldr	r0, [r4, #12]
 802a166:	9b03      	ldr	r3, [sp, #12]
 802a168:	4298      	cmp	r0, r3
 802a16a:	bfb8      	it	lt
 802a16c:	4618      	movlt	r0, r3
 802a16e:	e7a6      	b.n	802a0be <_printf_i+0x15e>
 802a170:	2301      	movs	r3, #1
 802a172:	4632      	mov	r2, r6
 802a174:	4649      	mov	r1, r9
 802a176:	4640      	mov	r0, r8
 802a178:	47d0      	blx	sl
 802a17a:	3001      	adds	r0, #1
 802a17c:	d09d      	beq.n	802a0ba <_printf_i+0x15a>
 802a17e:	3501      	adds	r5, #1
 802a180:	68e3      	ldr	r3, [r4, #12]
 802a182:	9903      	ldr	r1, [sp, #12]
 802a184:	1a5b      	subs	r3, r3, r1
 802a186:	42ab      	cmp	r3, r5
 802a188:	dcf2      	bgt.n	802a170 <_printf_i+0x210>
 802a18a:	e7eb      	b.n	802a164 <_printf_i+0x204>
 802a18c:	2500      	movs	r5, #0
 802a18e:	f104 0619 	add.w	r6, r4, #25
 802a192:	e7f5      	b.n	802a180 <_printf_i+0x220>
 802a194:	0802bad1 	.word	0x0802bad1
 802a198:	0802bae2 	.word	0x0802bae2

0802a19c <__sflush_r>:
 802a19c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a1a4:	0716      	lsls	r6, r2, #28
 802a1a6:	4605      	mov	r5, r0
 802a1a8:	460c      	mov	r4, r1
 802a1aa:	d454      	bmi.n	802a256 <__sflush_r+0xba>
 802a1ac:	684b      	ldr	r3, [r1, #4]
 802a1ae:	2b00      	cmp	r3, #0
 802a1b0:	dc02      	bgt.n	802a1b8 <__sflush_r+0x1c>
 802a1b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802a1b4:	2b00      	cmp	r3, #0
 802a1b6:	dd48      	ble.n	802a24a <__sflush_r+0xae>
 802a1b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802a1ba:	2e00      	cmp	r6, #0
 802a1bc:	d045      	beq.n	802a24a <__sflush_r+0xae>
 802a1be:	2300      	movs	r3, #0
 802a1c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802a1c4:	682f      	ldr	r7, [r5, #0]
 802a1c6:	6a21      	ldr	r1, [r4, #32]
 802a1c8:	602b      	str	r3, [r5, #0]
 802a1ca:	d030      	beq.n	802a22e <__sflush_r+0x92>
 802a1cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802a1ce:	89a3      	ldrh	r3, [r4, #12]
 802a1d0:	0759      	lsls	r1, r3, #29
 802a1d2:	d505      	bpl.n	802a1e0 <__sflush_r+0x44>
 802a1d4:	6863      	ldr	r3, [r4, #4]
 802a1d6:	1ad2      	subs	r2, r2, r3
 802a1d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802a1da:	b10b      	cbz	r3, 802a1e0 <__sflush_r+0x44>
 802a1dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802a1de:	1ad2      	subs	r2, r2, r3
 802a1e0:	2300      	movs	r3, #0
 802a1e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802a1e4:	6a21      	ldr	r1, [r4, #32]
 802a1e6:	4628      	mov	r0, r5
 802a1e8:	47b0      	blx	r6
 802a1ea:	1c43      	adds	r3, r0, #1
 802a1ec:	89a3      	ldrh	r3, [r4, #12]
 802a1ee:	d106      	bne.n	802a1fe <__sflush_r+0x62>
 802a1f0:	6829      	ldr	r1, [r5, #0]
 802a1f2:	291d      	cmp	r1, #29
 802a1f4:	d82b      	bhi.n	802a24e <__sflush_r+0xb2>
 802a1f6:	4a2a      	ldr	r2, [pc, #168]	@ (802a2a0 <__sflush_r+0x104>)
 802a1f8:	40ca      	lsrs	r2, r1
 802a1fa:	07d6      	lsls	r6, r2, #31
 802a1fc:	d527      	bpl.n	802a24e <__sflush_r+0xb2>
 802a1fe:	2200      	movs	r2, #0
 802a200:	6062      	str	r2, [r4, #4]
 802a202:	04d9      	lsls	r1, r3, #19
 802a204:	6922      	ldr	r2, [r4, #16]
 802a206:	6022      	str	r2, [r4, #0]
 802a208:	d504      	bpl.n	802a214 <__sflush_r+0x78>
 802a20a:	1c42      	adds	r2, r0, #1
 802a20c:	d101      	bne.n	802a212 <__sflush_r+0x76>
 802a20e:	682b      	ldr	r3, [r5, #0]
 802a210:	b903      	cbnz	r3, 802a214 <__sflush_r+0x78>
 802a212:	6560      	str	r0, [r4, #84]	@ 0x54
 802a214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a216:	602f      	str	r7, [r5, #0]
 802a218:	b1b9      	cbz	r1, 802a24a <__sflush_r+0xae>
 802a21a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a21e:	4299      	cmp	r1, r3
 802a220:	d002      	beq.n	802a228 <__sflush_r+0x8c>
 802a222:	4628      	mov	r0, r5
 802a224:	f7ff fca2 	bl	8029b6c <_free_r>
 802a228:	2300      	movs	r3, #0
 802a22a:	6363      	str	r3, [r4, #52]	@ 0x34
 802a22c:	e00d      	b.n	802a24a <__sflush_r+0xae>
 802a22e:	2301      	movs	r3, #1
 802a230:	4628      	mov	r0, r5
 802a232:	47b0      	blx	r6
 802a234:	4602      	mov	r2, r0
 802a236:	1c50      	adds	r0, r2, #1
 802a238:	d1c9      	bne.n	802a1ce <__sflush_r+0x32>
 802a23a:	682b      	ldr	r3, [r5, #0]
 802a23c:	2b00      	cmp	r3, #0
 802a23e:	d0c6      	beq.n	802a1ce <__sflush_r+0x32>
 802a240:	2b1d      	cmp	r3, #29
 802a242:	d001      	beq.n	802a248 <__sflush_r+0xac>
 802a244:	2b16      	cmp	r3, #22
 802a246:	d11e      	bne.n	802a286 <__sflush_r+0xea>
 802a248:	602f      	str	r7, [r5, #0]
 802a24a:	2000      	movs	r0, #0
 802a24c:	e022      	b.n	802a294 <__sflush_r+0xf8>
 802a24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a252:	b21b      	sxth	r3, r3
 802a254:	e01b      	b.n	802a28e <__sflush_r+0xf2>
 802a256:	690f      	ldr	r7, [r1, #16]
 802a258:	2f00      	cmp	r7, #0
 802a25a:	d0f6      	beq.n	802a24a <__sflush_r+0xae>
 802a25c:	0793      	lsls	r3, r2, #30
 802a25e:	680e      	ldr	r6, [r1, #0]
 802a260:	bf08      	it	eq
 802a262:	694b      	ldreq	r3, [r1, #20]
 802a264:	600f      	str	r7, [r1, #0]
 802a266:	bf18      	it	ne
 802a268:	2300      	movne	r3, #0
 802a26a:	eba6 0807 	sub.w	r8, r6, r7
 802a26e:	608b      	str	r3, [r1, #8]
 802a270:	f1b8 0f00 	cmp.w	r8, #0
 802a274:	dde9      	ble.n	802a24a <__sflush_r+0xae>
 802a276:	6a21      	ldr	r1, [r4, #32]
 802a278:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802a27a:	4643      	mov	r3, r8
 802a27c:	463a      	mov	r2, r7
 802a27e:	4628      	mov	r0, r5
 802a280:	47b0      	blx	r6
 802a282:	2800      	cmp	r0, #0
 802a284:	dc08      	bgt.n	802a298 <__sflush_r+0xfc>
 802a286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a28a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a28e:	81a3      	strh	r3, [r4, #12]
 802a290:	f04f 30ff 	mov.w	r0, #4294967295
 802a294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a298:	4407      	add	r7, r0
 802a29a:	eba8 0800 	sub.w	r8, r8, r0
 802a29e:	e7e7      	b.n	802a270 <__sflush_r+0xd4>
 802a2a0:	20400001 	.word	0x20400001

0802a2a4 <_fflush_r>:
 802a2a4:	b538      	push	{r3, r4, r5, lr}
 802a2a6:	690b      	ldr	r3, [r1, #16]
 802a2a8:	4605      	mov	r5, r0
 802a2aa:	460c      	mov	r4, r1
 802a2ac:	b913      	cbnz	r3, 802a2b4 <_fflush_r+0x10>
 802a2ae:	2500      	movs	r5, #0
 802a2b0:	4628      	mov	r0, r5
 802a2b2:	bd38      	pop	{r3, r4, r5, pc}
 802a2b4:	b118      	cbz	r0, 802a2be <_fflush_r+0x1a>
 802a2b6:	6a03      	ldr	r3, [r0, #32]
 802a2b8:	b90b      	cbnz	r3, 802a2be <_fflush_r+0x1a>
 802a2ba:	f7ff fa25 	bl	8029708 <__sinit>
 802a2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a2c2:	2b00      	cmp	r3, #0
 802a2c4:	d0f3      	beq.n	802a2ae <_fflush_r+0xa>
 802a2c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802a2c8:	07d0      	lsls	r0, r2, #31
 802a2ca:	d404      	bmi.n	802a2d6 <_fflush_r+0x32>
 802a2cc:	0599      	lsls	r1, r3, #22
 802a2ce:	d402      	bmi.n	802a2d6 <_fflush_r+0x32>
 802a2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a2d2:	f7d8 fc13 	bl	8002afc <__retarget_lock_acquire_recursive>
 802a2d6:	4628      	mov	r0, r5
 802a2d8:	4621      	mov	r1, r4
 802a2da:	f7ff ff5f 	bl	802a19c <__sflush_r>
 802a2de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a2e0:	07da      	lsls	r2, r3, #31
 802a2e2:	4605      	mov	r5, r0
 802a2e4:	d4e4      	bmi.n	802a2b0 <_fflush_r+0xc>
 802a2e6:	89a3      	ldrh	r3, [r4, #12]
 802a2e8:	059b      	lsls	r3, r3, #22
 802a2ea:	d4e1      	bmi.n	802a2b0 <_fflush_r+0xc>
 802a2ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a2ee:	f7d8 fc1a 	bl	8002b26 <__retarget_lock_release_recursive>
 802a2f2:	e7dd      	b.n	802a2b0 <_fflush_r+0xc>

0802a2f4 <__swbuf_r>:
 802a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a2f6:	460e      	mov	r6, r1
 802a2f8:	4614      	mov	r4, r2
 802a2fa:	4605      	mov	r5, r0
 802a2fc:	b118      	cbz	r0, 802a306 <__swbuf_r+0x12>
 802a2fe:	6a03      	ldr	r3, [r0, #32]
 802a300:	b90b      	cbnz	r3, 802a306 <__swbuf_r+0x12>
 802a302:	f7ff fa01 	bl	8029708 <__sinit>
 802a306:	69a3      	ldr	r3, [r4, #24]
 802a308:	60a3      	str	r3, [r4, #8]
 802a30a:	89a3      	ldrh	r3, [r4, #12]
 802a30c:	071a      	lsls	r2, r3, #28
 802a30e:	d501      	bpl.n	802a314 <__swbuf_r+0x20>
 802a310:	6923      	ldr	r3, [r4, #16]
 802a312:	b943      	cbnz	r3, 802a326 <__swbuf_r+0x32>
 802a314:	4621      	mov	r1, r4
 802a316:	4628      	mov	r0, r5
 802a318:	f000 f82a 	bl	802a370 <__swsetup_r>
 802a31c:	b118      	cbz	r0, 802a326 <__swbuf_r+0x32>
 802a31e:	f04f 37ff 	mov.w	r7, #4294967295
 802a322:	4638      	mov	r0, r7
 802a324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a326:	6823      	ldr	r3, [r4, #0]
 802a328:	6922      	ldr	r2, [r4, #16]
 802a32a:	1a98      	subs	r0, r3, r2
 802a32c:	6963      	ldr	r3, [r4, #20]
 802a32e:	b2f6      	uxtb	r6, r6
 802a330:	4283      	cmp	r3, r0
 802a332:	4637      	mov	r7, r6
 802a334:	dc05      	bgt.n	802a342 <__swbuf_r+0x4e>
 802a336:	4621      	mov	r1, r4
 802a338:	4628      	mov	r0, r5
 802a33a:	f7ff ffb3 	bl	802a2a4 <_fflush_r>
 802a33e:	2800      	cmp	r0, #0
 802a340:	d1ed      	bne.n	802a31e <__swbuf_r+0x2a>
 802a342:	68a3      	ldr	r3, [r4, #8]
 802a344:	3b01      	subs	r3, #1
 802a346:	60a3      	str	r3, [r4, #8]
 802a348:	6823      	ldr	r3, [r4, #0]
 802a34a:	1c5a      	adds	r2, r3, #1
 802a34c:	6022      	str	r2, [r4, #0]
 802a34e:	701e      	strb	r6, [r3, #0]
 802a350:	6962      	ldr	r2, [r4, #20]
 802a352:	1c43      	adds	r3, r0, #1
 802a354:	429a      	cmp	r2, r3
 802a356:	d004      	beq.n	802a362 <__swbuf_r+0x6e>
 802a358:	89a3      	ldrh	r3, [r4, #12]
 802a35a:	07db      	lsls	r3, r3, #31
 802a35c:	d5e1      	bpl.n	802a322 <__swbuf_r+0x2e>
 802a35e:	2e0a      	cmp	r6, #10
 802a360:	d1df      	bne.n	802a322 <__swbuf_r+0x2e>
 802a362:	4621      	mov	r1, r4
 802a364:	4628      	mov	r0, r5
 802a366:	f7ff ff9d 	bl	802a2a4 <_fflush_r>
 802a36a:	2800      	cmp	r0, #0
 802a36c:	d0d9      	beq.n	802a322 <__swbuf_r+0x2e>
 802a36e:	e7d6      	b.n	802a31e <__swbuf_r+0x2a>

0802a370 <__swsetup_r>:
 802a370:	b538      	push	{r3, r4, r5, lr}
 802a372:	4b29      	ldr	r3, [pc, #164]	@ (802a418 <__swsetup_r+0xa8>)
 802a374:	4605      	mov	r5, r0
 802a376:	6818      	ldr	r0, [r3, #0]
 802a378:	460c      	mov	r4, r1
 802a37a:	b118      	cbz	r0, 802a384 <__swsetup_r+0x14>
 802a37c:	6a03      	ldr	r3, [r0, #32]
 802a37e:	b90b      	cbnz	r3, 802a384 <__swsetup_r+0x14>
 802a380:	f7ff f9c2 	bl	8029708 <__sinit>
 802a384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a388:	0719      	lsls	r1, r3, #28
 802a38a:	d422      	bmi.n	802a3d2 <__swsetup_r+0x62>
 802a38c:	06da      	lsls	r2, r3, #27
 802a38e:	d407      	bmi.n	802a3a0 <__swsetup_r+0x30>
 802a390:	2209      	movs	r2, #9
 802a392:	602a      	str	r2, [r5, #0]
 802a394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a398:	81a3      	strh	r3, [r4, #12]
 802a39a:	f04f 30ff 	mov.w	r0, #4294967295
 802a39e:	e033      	b.n	802a408 <__swsetup_r+0x98>
 802a3a0:	0758      	lsls	r0, r3, #29
 802a3a2:	d512      	bpl.n	802a3ca <__swsetup_r+0x5a>
 802a3a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a3a6:	b141      	cbz	r1, 802a3ba <__swsetup_r+0x4a>
 802a3a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a3ac:	4299      	cmp	r1, r3
 802a3ae:	d002      	beq.n	802a3b6 <__swsetup_r+0x46>
 802a3b0:	4628      	mov	r0, r5
 802a3b2:	f7ff fbdb 	bl	8029b6c <_free_r>
 802a3b6:	2300      	movs	r3, #0
 802a3b8:	6363      	str	r3, [r4, #52]	@ 0x34
 802a3ba:	89a3      	ldrh	r3, [r4, #12]
 802a3bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802a3c0:	81a3      	strh	r3, [r4, #12]
 802a3c2:	2300      	movs	r3, #0
 802a3c4:	6063      	str	r3, [r4, #4]
 802a3c6:	6923      	ldr	r3, [r4, #16]
 802a3c8:	6023      	str	r3, [r4, #0]
 802a3ca:	89a3      	ldrh	r3, [r4, #12]
 802a3cc:	f043 0308 	orr.w	r3, r3, #8
 802a3d0:	81a3      	strh	r3, [r4, #12]
 802a3d2:	6923      	ldr	r3, [r4, #16]
 802a3d4:	b94b      	cbnz	r3, 802a3ea <__swsetup_r+0x7a>
 802a3d6:	89a3      	ldrh	r3, [r4, #12]
 802a3d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802a3dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802a3e0:	d003      	beq.n	802a3ea <__swsetup_r+0x7a>
 802a3e2:	4621      	mov	r1, r4
 802a3e4:	4628      	mov	r0, r5
 802a3e6:	f000 f83f 	bl	802a468 <__smakebuf_r>
 802a3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a3ee:	f013 0201 	ands.w	r2, r3, #1
 802a3f2:	d00a      	beq.n	802a40a <__swsetup_r+0x9a>
 802a3f4:	2200      	movs	r2, #0
 802a3f6:	60a2      	str	r2, [r4, #8]
 802a3f8:	6962      	ldr	r2, [r4, #20]
 802a3fa:	4252      	negs	r2, r2
 802a3fc:	61a2      	str	r2, [r4, #24]
 802a3fe:	6922      	ldr	r2, [r4, #16]
 802a400:	b942      	cbnz	r2, 802a414 <__swsetup_r+0xa4>
 802a402:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802a406:	d1c5      	bne.n	802a394 <__swsetup_r+0x24>
 802a408:	bd38      	pop	{r3, r4, r5, pc}
 802a40a:	0799      	lsls	r1, r3, #30
 802a40c:	bf58      	it	pl
 802a40e:	6962      	ldrpl	r2, [r4, #20]
 802a410:	60a2      	str	r2, [r4, #8]
 802a412:	e7f4      	b.n	802a3fe <__swsetup_r+0x8e>
 802a414:	2000      	movs	r0, #0
 802a416:	e7f7      	b.n	802a408 <__swsetup_r+0x98>
 802a418:	240000ac 	.word	0x240000ac

0802a41c <__swhatbuf_r>:
 802a41c:	b570      	push	{r4, r5, r6, lr}
 802a41e:	460c      	mov	r4, r1
 802a420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a424:	2900      	cmp	r1, #0
 802a426:	b096      	sub	sp, #88	@ 0x58
 802a428:	4615      	mov	r5, r2
 802a42a:	461e      	mov	r6, r3
 802a42c:	da0d      	bge.n	802a44a <__swhatbuf_r+0x2e>
 802a42e:	89a3      	ldrh	r3, [r4, #12]
 802a430:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802a434:	f04f 0100 	mov.w	r1, #0
 802a438:	bf14      	ite	ne
 802a43a:	2340      	movne	r3, #64	@ 0x40
 802a43c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802a440:	2000      	movs	r0, #0
 802a442:	6031      	str	r1, [r6, #0]
 802a444:	602b      	str	r3, [r5, #0]
 802a446:	b016      	add	sp, #88	@ 0x58
 802a448:	bd70      	pop	{r4, r5, r6, pc}
 802a44a:	466a      	mov	r2, sp
 802a44c:	f000 f848 	bl	802a4e0 <_fstat_r>
 802a450:	2800      	cmp	r0, #0
 802a452:	dbec      	blt.n	802a42e <__swhatbuf_r+0x12>
 802a454:	9901      	ldr	r1, [sp, #4]
 802a456:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802a45a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802a45e:	4259      	negs	r1, r3
 802a460:	4159      	adcs	r1, r3
 802a462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802a466:	e7eb      	b.n	802a440 <__swhatbuf_r+0x24>

0802a468 <__smakebuf_r>:
 802a468:	898b      	ldrh	r3, [r1, #12]
 802a46a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a46c:	079d      	lsls	r5, r3, #30
 802a46e:	4606      	mov	r6, r0
 802a470:	460c      	mov	r4, r1
 802a472:	d507      	bpl.n	802a484 <__smakebuf_r+0x1c>
 802a474:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802a478:	6023      	str	r3, [r4, #0]
 802a47a:	6123      	str	r3, [r4, #16]
 802a47c:	2301      	movs	r3, #1
 802a47e:	6163      	str	r3, [r4, #20]
 802a480:	b003      	add	sp, #12
 802a482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a484:	ab01      	add	r3, sp, #4
 802a486:	466a      	mov	r2, sp
 802a488:	f7ff ffc8 	bl	802a41c <__swhatbuf_r>
 802a48c:	9f00      	ldr	r7, [sp, #0]
 802a48e:	4605      	mov	r5, r0
 802a490:	4639      	mov	r1, r7
 802a492:	4630      	mov	r0, r6
 802a494:	f7ff f812 	bl	80294bc <_malloc_r>
 802a498:	b948      	cbnz	r0, 802a4ae <__smakebuf_r+0x46>
 802a49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a49e:	059a      	lsls	r2, r3, #22
 802a4a0:	d4ee      	bmi.n	802a480 <__smakebuf_r+0x18>
 802a4a2:	f023 0303 	bic.w	r3, r3, #3
 802a4a6:	f043 0302 	orr.w	r3, r3, #2
 802a4aa:	81a3      	strh	r3, [r4, #12]
 802a4ac:	e7e2      	b.n	802a474 <__smakebuf_r+0xc>
 802a4ae:	89a3      	ldrh	r3, [r4, #12]
 802a4b0:	6020      	str	r0, [r4, #0]
 802a4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a4b6:	81a3      	strh	r3, [r4, #12]
 802a4b8:	9b01      	ldr	r3, [sp, #4]
 802a4ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802a4be:	b15b      	cbz	r3, 802a4d8 <__smakebuf_r+0x70>
 802a4c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a4c4:	4630      	mov	r0, r6
 802a4c6:	f000 f81d 	bl	802a504 <_isatty_r>
 802a4ca:	b128      	cbz	r0, 802a4d8 <__smakebuf_r+0x70>
 802a4cc:	89a3      	ldrh	r3, [r4, #12]
 802a4ce:	f023 0303 	bic.w	r3, r3, #3
 802a4d2:	f043 0301 	orr.w	r3, r3, #1
 802a4d6:	81a3      	strh	r3, [r4, #12]
 802a4d8:	89a3      	ldrh	r3, [r4, #12]
 802a4da:	431d      	orrs	r5, r3
 802a4dc:	81a5      	strh	r5, [r4, #12]
 802a4de:	e7cf      	b.n	802a480 <__smakebuf_r+0x18>

0802a4e0 <_fstat_r>:
 802a4e0:	b538      	push	{r3, r4, r5, lr}
 802a4e2:	4d07      	ldr	r5, [pc, #28]	@ (802a500 <_fstat_r+0x20>)
 802a4e4:	2300      	movs	r3, #0
 802a4e6:	4604      	mov	r4, r0
 802a4e8:	4608      	mov	r0, r1
 802a4ea:	4611      	mov	r1, r2
 802a4ec:	602b      	str	r3, [r5, #0]
 802a4ee:	f7d7 ffe3 	bl	80024b8 <_fstat>
 802a4f2:	1c43      	adds	r3, r0, #1
 802a4f4:	d102      	bne.n	802a4fc <_fstat_r+0x1c>
 802a4f6:	682b      	ldr	r3, [r5, #0]
 802a4f8:	b103      	cbz	r3, 802a4fc <_fstat_r+0x1c>
 802a4fa:	6023      	str	r3, [r4, #0]
 802a4fc:	bd38      	pop	{r3, r4, r5, pc}
 802a4fe:	bf00      	nop
 802a500:	24007198 	.word	0x24007198

0802a504 <_isatty_r>:
 802a504:	b538      	push	{r3, r4, r5, lr}
 802a506:	4d06      	ldr	r5, [pc, #24]	@ (802a520 <_isatty_r+0x1c>)
 802a508:	2300      	movs	r3, #0
 802a50a:	4604      	mov	r4, r0
 802a50c:	4608      	mov	r0, r1
 802a50e:	602b      	str	r3, [r5, #0]
 802a510:	f7d7 ffe2 	bl	80024d8 <_isatty>
 802a514:	1c43      	adds	r3, r0, #1
 802a516:	d102      	bne.n	802a51e <_isatty_r+0x1a>
 802a518:	682b      	ldr	r3, [r5, #0]
 802a51a:	b103      	cbz	r3, 802a51e <_isatty_r+0x1a>
 802a51c:	6023      	str	r3, [r4, #0]
 802a51e:	bd38      	pop	{r3, r4, r5, pc}
 802a520:	24007198 	.word	0x24007198

0802a524 <_init>:
 802a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a526:	bf00      	nop
 802a528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a52a:	bc08      	pop	{r3}
 802a52c:	469e      	mov	lr, r3
 802a52e:	4770      	bx	lr

0802a530 <_fini>:
 802a530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a532:	bf00      	nop
 802a534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a536:	bc08      	pop	{r3}
 802a538:	469e      	mov	lr, r3
 802a53a:	4770      	bx	lr
