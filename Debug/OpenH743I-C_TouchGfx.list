
OpenH743I-C_TouchGfx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a154  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002614  0802a3f8  0802a3f8  0002b3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000008  0802ca0c  0802ca0c  0002da0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802ca14  0802ca14  000c380c  2**0
                  CONTENTS
  5 .ARM          00000008  0802ca14  0802ca14  0002da14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802ca1c  0802ca1c  000c380c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802ca1c  0802ca1c  0002da1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802ca30  0802ca30  0002da30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000100  24000000  0802ca38  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 TouchGFX_ScratchbufferA 00000100  24000100  0802cb38  0002e100  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 TouchGFX_ScratchbufferB 00000100  24000200  0802cc38  0002e200  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00007034  24000300  0802cd38  00030300  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  24007334  0802cd38  00030334  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000c380c  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00000918  0802cd38  0802cd38  0002ed38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000030  0802d650  0802d650  0002f650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0009418c  0802d680  0802d680  0002f680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 BufferSection 000bb800  d0000000  d0000000  000c4000  2**2
                  ALLOC
 19 .debug_info   0009f194  00000000  00000000  000c383a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001183a  00000000  00000000  001629ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003a88  00000000  00000000  00174208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00002b70  00000000  00000000  00177c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  000479c2  00000000  00000000  0017a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0004b8a4  00000000  00000000  001c21c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    00196d6e  00000000  00000000  0020da66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  003a47d4  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000fc64  00000000  00000000  003a4898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 00000069  00000000  00000000  003b44fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000300 	.word	0x24000300
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802a3dc 	.word	0x0802a3dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000304 	.word	0x24000304
 80002dc:	0802a3dc 	.word	0x0802a3dc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b988 	b.w	8000a20 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	468e      	mov	lr, r1
 8000730:	4604      	mov	r4, r0
 8000732:	4688      	mov	r8, r1
 8000734:	2b00      	cmp	r3, #0
 8000736:	d14a      	bne.n	80007ce <__udivmoddi4+0xa6>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d962      	bls.n	8000804 <__udivmoddi4+0xdc>
 800073e:	fab2 f682 	clz	r6, r2
 8000742:	b14e      	cbz	r6, 8000758 <__udivmoddi4+0x30>
 8000744:	f1c6 0320 	rsb	r3, r6, #32
 8000748:	fa01 f806 	lsl.w	r8, r1, r6
 800074c:	fa20 f303 	lsr.w	r3, r0, r3
 8000750:	40b7      	lsls	r7, r6
 8000752:	ea43 0808 	orr.w	r8, r3, r8
 8000756:	40b4      	lsls	r4, r6
 8000758:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800075c:	fa1f fc87 	uxth.w	ip, r7
 8000760:	fbb8 f1fe 	udiv	r1, r8, lr
 8000764:	0c23      	lsrs	r3, r4, #16
 8000766:	fb0e 8811 	mls	r8, lr, r1, r8
 800076a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800076e:	fb01 f20c 	mul.w	r2, r1, ip
 8000772:	429a      	cmp	r2, r3
 8000774:	d909      	bls.n	800078a <__udivmoddi4+0x62>
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	f101 30ff 	add.w	r0, r1, #4294967295
 800077c:	f080 80ea 	bcs.w	8000954 <__udivmoddi4+0x22c>
 8000780:	429a      	cmp	r2, r3
 8000782:	f240 80e7 	bls.w	8000954 <__udivmoddi4+0x22c>
 8000786:	3902      	subs	r1, #2
 8000788:	443b      	add	r3, r7
 800078a:	1a9a      	subs	r2, r3, r2
 800078c:	b2a3      	uxth	r3, r4
 800078e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000792:	fb0e 2210 	mls	r2, lr, r0, r2
 8000796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800079a:	fb00 fc0c 	mul.w	ip, r0, ip
 800079e:	459c      	cmp	ip, r3
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0x8e>
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007a8:	f080 80d6 	bcs.w	8000958 <__udivmoddi4+0x230>
 80007ac:	459c      	cmp	ip, r3
 80007ae:	f240 80d3 	bls.w	8000958 <__udivmoddi4+0x230>
 80007b2:	443b      	add	r3, r7
 80007b4:	3802      	subs	r0, #2
 80007b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ba:	eba3 030c 	sub.w	r3, r3, ip
 80007be:	2100      	movs	r1, #0
 80007c0:	b11d      	cbz	r5, 80007ca <__udivmoddi4+0xa2>
 80007c2:	40f3      	lsrs	r3, r6
 80007c4:	2200      	movs	r2, #0
 80007c6:	e9c5 3200 	strd	r3, r2, [r5]
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d905      	bls.n	80007de <__udivmoddi4+0xb6>
 80007d2:	b10d      	cbz	r5, 80007d8 <__udivmoddi4+0xb0>
 80007d4:	e9c5 0100 	strd	r0, r1, [r5]
 80007d8:	2100      	movs	r1, #0
 80007da:	4608      	mov	r0, r1
 80007dc:	e7f5      	b.n	80007ca <__udivmoddi4+0xa2>
 80007de:	fab3 f183 	clz	r1, r3
 80007e2:	2900      	cmp	r1, #0
 80007e4:	d146      	bne.n	8000874 <__udivmoddi4+0x14c>
 80007e6:	4573      	cmp	r3, lr
 80007e8:	d302      	bcc.n	80007f0 <__udivmoddi4+0xc8>
 80007ea:	4282      	cmp	r2, r0
 80007ec:	f200 8105 	bhi.w	80009fa <__udivmoddi4+0x2d2>
 80007f0:	1a84      	subs	r4, r0, r2
 80007f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007f6:	2001      	movs	r0, #1
 80007f8:	4690      	mov	r8, r2
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d0e5      	beq.n	80007ca <__udivmoddi4+0xa2>
 80007fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000802:	e7e2      	b.n	80007ca <__udivmoddi4+0xa2>
 8000804:	2a00      	cmp	r2, #0
 8000806:	f000 8090 	beq.w	800092a <__udivmoddi4+0x202>
 800080a:	fab2 f682 	clz	r6, r2
 800080e:	2e00      	cmp	r6, #0
 8000810:	f040 80a4 	bne.w	800095c <__udivmoddi4+0x234>
 8000814:	1a8a      	subs	r2, r1, r2
 8000816:	0c03      	lsrs	r3, r0, #16
 8000818:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800081c:	b280      	uxth	r0, r0
 800081e:	b2bc      	uxth	r4, r7
 8000820:	2101      	movs	r1, #1
 8000822:	fbb2 fcfe 	udiv	ip, r2, lr
 8000826:	fb0e 221c 	mls	r2, lr, ip, r2
 800082a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800082e:	fb04 f20c 	mul.w	r2, r4, ip
 8000832:	429a      	cmp	r2, r3
 8000834:	d907      	bls.n	8000846 <__udivmoddi4+0x11e>
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	f10c 38ff 	add.w	r8, ip, #4294967295
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x11c>
 800083e:	429a      	cmp	r2, r3
 8000840:	f200 80e0 	bhi.w	8000a04 <__udivmoddi4+0x2dc>
 8000844:	46c4      	mov	ip, r8
 8000846:	1a9b      	subs	r3, r3, r2
 8000848:	fbb3 f2fe 	udiv	r2, r3, lr
 800084c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000850:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000854:	fb02 f404 	mul.w	r4, r2, r4
 8000858:	429c      	cmp	r4, r3
 800085a:	d907      	bls.n	800086c <__udivmoddi4+0x144>
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000862:	d202      	bcs.n	800086a <__udivmoddi4+0x142>
 8000864:	429c      	cmp	r4, r3
 8000866:	f200 80ca 	bhi.w	80009fe <__udivmoddi4+0x2d6>
 800086a:	4602      	mov	r2, r0
 800086c:	1b1b      	subs	r3, r3, r4
 800086e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000872:	e7a5      	b.n	80007c0 <__udivmoddi4+0x98>
 8000874:	f1c1 0620 	rsb	r6, r1, #32
 8000878:	408b      	lsls	r3, r1
 800087a:	fa22 f706 	lsr.w	r7, r2, r6
 800087e:	431f      	orrs	r7, r3
 8000880:	fa0e f401 	lsl.w	r4, lr, r1
 8000884:	fa20 f306 	lsr.w	r3, r0, r6
 8000888:	fa2e fe06 	lsr.w	lr, lr, r6
 800088c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000890:	4323      	orrs	r3, r4
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	fa1f fc87 	uxth.w	ip, r7
 800089a:	fbbe f0f9 	udiv	r0, lr, r9
 800089e:	0c1c      	lsrs	r4, r3, #16
 80008a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008ac:	45a6      	cmp	lr, r4
 80008ae:	fa02 f201 	lsl.w	r2, r2, r1
 80008b2:	d909      	bls.n	80008c8 <__udivmoddi4+0x1a0>
 80008b4:	193c      	adds	r4, r7, r4
 80008b6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008ba:	f080 809c 	bcs.w	80009f6 <__udivmoddi4+0x2ce>
 80008be:	45a6      	cmp	lr, r4
 80008c0:	f240 8099 	bls.w	80009f6 <__udivmoddi4+0x2ce>
 80008c4:	3802      	subs	r0, #2
 80008c6:	443c      	add	r4, r7
 80008c8:	eba4 040e 	sub.w	r4, r4, lr
 80008cc:	fa1f fe83 	uxth.w	lr, r3
 80008d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008d4:	fb09 4413 	mls	r4, r9, r3, r4
 80008d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e0:	45a4      	cmp	ip, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x1ce>
 80008e4:	193c      	adds	r4, r7, r4
 80008e6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ea:	f080 8082 	bcs.w	80009f2 <__udivmoddi4+0x2ca>
 80008ee:	45a4      	cmp	ip, r4
 80008f0:	d97f      	bls.n	80009f2 <__udivmoddi4+0x2ca>
 80008f2:	3b02      	subs	r3, #2
 80008f4:	443c      	add	r4, r7
 80008f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008fa:	eba4 040c 	sub.w	r4, r4, ip
 80008fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000902:	4564      	cmp	r4, ip
 8000904:	4673      	mov	r3, lr
 8000906:	46e1      	mov	r9, ip
 8000908:	d362      	bcc.n	80009d0 <__udivmoddi4+0x2a8>
 800090a:	d05f      	beq.n	80009cc <__udivmoddi4+0x2a4>
 800090c:	b15d      	cbz	r5, 8000926 <__udivmoddi4+0x1fe>
 800090e:	ebb8 0203 	subs.w	r2, r8, r3
 8000912:	eb64 0409 	sbc.w	r4, r4, r9
 8000916:	fa04 f606 	lsl.w	r6, r4, r6
 800091a:	fa22 f301 	lsr.w	r3, r2, r1
 800091e:	431e      	orrs	r6, r3
 8000920:	40cc      	lsrs	r4, r1
 8000922:	e9c5 6400 	strd	r6, r4, [r5]
 8000926:	2100      	movs	r1, #0
 8000928:	e74f      	b.n	80007ca <__udivmoddi4+0xa2>
 800092a:	fbb1 fcf2 	udiv	ip, r1, r2
 800092e:	0c01      	lsrs	r1, r0, #16
 8000930:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000934:	b280      	uxth	r0, r0
 8000936:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800093a:	463b      	mov	r3, r7
 800093c:	4638      	mov	r0, r7
 800093e:	463c      	mov	r4, r7
 8000940:	46b8      	mov	r8, r7
 8000942:	46be      	mov	lr, r7
 8000944:	2620      	movs	r6, #32
 8000946:	fbb1 f1f7 	udiv	r1, r1, r7
 800094a:	eba2 0208 	sub.w	r2, r2, r8
 800094e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000952:	e766      	b.n	8000822 <__udivmoddi4+0xfa>
 8000954:	4601      	mov	r1, r0
 8000956:	e718      	b.n	800078a <__udivmoddi4+0x62>
 8000958:	4610      	mov	r0, r2
 800095a:	e72c      	b.n	80007b6 <__udivmoddi4+0x8e>
 800095c:	f1c6 0220 	rsb	r2, r6, #32
 8000960:	fa2e f302 	lsr.w	r3, lr, r2
 8000964:	40b7      	lsls	r7, r6
 8000966:	40b1      	lsls	r1, r6
 8000968:	fa20 f202 	lsr.w	r2, r0, r2
 800096c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000970:	430a      	orrs	r2, r1
 8000972:	fbb3 f8fe 	udiv	r8, r3, lr
 8000976:	b2bc      	uxth	r4, r7
 8000978:	fb0e 3318 	mls	r3, lr, r8, r3
 800097c:	0c11      	lsrs	r1, r2, #16
 800097e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000982:	fb08 f904 	mul.w	r9, r8, r4
 8000986:	40b0      	lsls	r0, r6
 8000988:	4589      	cmp	r9, r1
 800098a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800098e:	b280      	uxth	r0, r0
 8000990:	d93e      	bls.n	8000a10 <__udivmoddi4+0x2e8>
 8000992:	1879      	adds	r1, r7, r1
 8000994:	f108 3cff 	add.w	ip, r8, #4294967295
 8000998:	d201      	bcs.n	800099e <__udivmoddi4+0x276>
 800099a:	4589      	cmp	r9, r1
 800099c:	d81f      	bhi.n	80009de <__udivmoddi4+0x2b6>
 800099e:	eba1 0109 	sub.w	r1, r1, r9
 80009a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009a6:	fb09 f804 	mul.w	r8, r9, r4
 80009aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009ae:	b292      	uxth	r2, r2
 80009b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009b4:	4542      	cmp	r2, r8
 80009b6:	d229      	bcs.n	8000a0c <__udivmoddi4+0x2e4>
 80009b8:	18ba      	adds	r2, r7, r2
 80009ba:	f109 31ff 	add.w	r1, r9, #4294967295
 80009be:	d2c4      	bcs.n	800094a <__udivmoddi4+0x222>
 80009c0:	4542      	cmp	r2, r8
 80009c2:	d2c2      	bcs.n	800094a <__udivmoddi4+0x222>
 80009c4:	f1a9 0102 	sub.w	r1, r9, #2
 80009c8:	443a      	add	r2, r7
 80009ca:	e7be      	b.n	800094a <__udivmoddi4+0x222>
 80009cc:	45f0      	cmp	r8, lr
 80009ce:	d29d      	bcs.n	800090c <__udivmoddi4+0x1e4>
 80009d0:	ebbe 0302 	subs.w	r3, lr, r2
 80009d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009d8:	3801      	subs	r0, #1
 80009da:	46e1      	mov	r9, ip
 80009dc:	e796      	b.n	800090c <__udivmoddi4+0x1e4>
 80009de:	eba7 0909 	sub.w	r9, r7, r9
 80009e2:	4449      	add	r1, r9
 80009e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ec:	fb09 f804 	mul.w	r8, r9, r4
 80009f0:	e7db      	b.n	80009aa <__udivmoddi4+0x282>
 80009f2:	4673      	mov	r3, lr
 80009f4:	e77f      	b.n	80008f6 <__udivmoddi4+0x1ce>
 80009f6:	4650      	mov	r0, sl
 80009f8:	e766      	b.n	80008c8 <__udivmoddi4+0x1a0>
 80009fa:	4608      	mov	r0, r1
 80009fc:	e6fd      	b.n	80007fa <__udivmoddi4+0xd2>
 80009fe:	443b      	add	r3, r7
 8000a00:	3a02      	subs	r2, #2
 8000a02:	e733      	b.n	800086c <__udivmoddi4+0x144>
 8000a04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a08:	443b      	add	r3, r7
 8000a0a:	e71c      	b.n	8000846 <__udivmoddi4+0x11e>
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	e79c      	b.n	800094a <__udivmoddi4+0x222>
 8000a10:	eba1 0109 	sub.w	r1, r1, r9
 8000a14:	46c4      	mov	ip, r8
 8000a16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a1a:	fb09 f804 	mul.w	r8, r9, r4
 8000a1e:	e7c4      	b.n	80009aa <__udivmoddi4+0x282>

08000a20 <__aeabi_idiv0>:
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <BSP_LCD_Init>:
/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/* Initialize the SDRAM */
	BSP_SDRAM_Init();
 8000a28:	f000 f906 	bl	8000c38 <BSP_SDRAM_Init>
	BSP_LCD_SelectLayer(1);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 f833 	bl	8000a98 <BSP_LCD_SelectLayer>
	/* Clear the LCD Foreground layer */
	BSP_LCD_SetLayerVisible(1, DISABLE);
 8000a32:	2100      	movs	r1, #0
 8000a34:	2001      	movs	r0, #1
 8000a36:	f000 f83f 	bl	8000ab8 <BSP_LCD_SetLayerVisible>
	/* Set Foreground Layer */
	BSP_LCD_SelectLayer(0);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f82c 	bl	8000a98 <BSP_LCD_SelectLayer>

	return LCD_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <BSP_LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @retval Used LCD X size
 */
uint32_t BSP_LCD_GetXSize(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
	return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <BSP_LCD_GetXSize+0x20>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <BSP_LCD_GetXSize+0x24>)
 8000a52:	2134      	movs	r1, #52	@ 0x34
 8000a54:	fb01 f303 	mul.w	r3, r1, r3
 8000a58:	4413      	add	r3, r2
 8000a5a:	3360      	adds	r3, #96	@ 0x60
 8000a5c:	681b      	ldr	r3, [r3, #0]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	2400031c 	.word	0x2400031c
 8000a6c:	24000450 	.word	0x24000450

08000a70 <BSP_LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @retval Used LCD Y size
 */
uint32_t BSP_LCD_GetYSize(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <BSP_LCD_GetYSize+0x20>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <BSP_LCD_GetYSize+0x24>)
 8000a7a:	2134      	movs	r1, #52	@ 0x34
 8000a7c:	fb01 f303 	mul.w	r3, r1, r3
 8000a80:	4413      	add	r3, r2
 8000a82:	3364      	adds	r3, #100	@ 0x64
 8000a84:	681b      	ldr	r3, [r3, #0]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	2400031c 	.word	0x2400031c
 8000a94:	24000450 	.word	0x24000450

08000a98 <BSP_LCD_SelectLayer>:
 * @brief  Selects the LCD Layer.
 * @param  LayerIndex: Layer foreground or background
 * @retval None
 */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	ActiveLayer = LayerIndex;
 8000aa0:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <BSP_LCD_SelectLayer+0x1c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2400031c 	.word	0x2400031c

08000ab8 <BSP_LCD_SetLayerVisible>:
 *            @arg  ENABLE
 *            @arg  DISABLE
 * @retval None
 */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
	if (State == ENABLE)
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d112      	bne.n	8000af0 <BSP_LCD_SetLayerVisible+0x38>
	{
		__HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8000aca:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	01db      	lsls	r3, r3, #7
 8000ad4:	4413      	add	r3, r2
 8000ad6:	3384      	adds	r3, #132	@ 0x84
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000adc:	6812      	ldr	r2, [r2, #0]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	01d2      	lsls	r2, r2, #7
 8000ae4:	440a      	add	r2, r1
 8000ae6:	3284      	adds	r2, #132	@ 0x84
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e011      	b.n	8000b14 <BSP_LCD_SetLayerVisible+0x5c>
	}
	else
	{
		__HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	01db      	lsls	r3, r3, #7
 8000afa:	4413      	add	r3, r2
 8000afc:	3384      	adds	r3, #132	@ 0x84
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000b02:	6812      	ldr	r2, [r2, #0]
 8000b04:	4611      	mov	r1, r2
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	01d2      	lsls	r2, r2, #7
 8000b0a:	440a      	add	r2, r1
 8000b0c:	3284      	adds	r2, #132	@ 0x84
 8000b0e:	f023 0301 	bic.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]
	}
	__HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <BSP_LCD_SetLayerVisible+0x78>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f042 0201 	orr.w	r2, r2, #1
 8000b22:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	24000450 	.word	0x24000450

08000b34 <BSP_LCD_Clear>:
 * @brief  Clears the hole LCD.
 * @param  Color: Color of the background
 * @retval None
 */
void BSP_LCD_Clear(uint32_t Color)
{
 8000b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	6078      	str	r0, [r7, #4]
	/* Clear the LCD */
	LL_FillBuffer(ActiveLayer,
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <BSP_LCD_Clear+0x48>)
 8000b3e:	681c      	ldr	r4, [r3, #0]
			(uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress),
 8000b40:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <BSP_LCD_Clear+0x48>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0e      	ldr	r2, [pc, #56]	@ (8000b80 <BSP_LCD_Clear+0x4c>)
 8000b46:	2134      	movs	r1, #52	@ 0x34
 8000b48:	fb01 f303 	mul.w	r3, r1, r3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	335c      	adds	r3, #92	@ 0x5c
 8000b50:	681b      	ldr	r3, [r3, #0]
	LL_FillBuffer(ActiveLayer,
 8000b52:	461e      	mov	r6, r3
 8000b54:	f7ff ff78 	bl	8000a48 <BSP_LCD_GetXSize>
 8000b58:	4605      	mov	r5, r0
 8000b5a:	f7ff ff89 	bl	8000a70 <BSP_LCD_GetYSize>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	2300      	movs	r3, #0
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	462a      	mov	r2, r5
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f000 f808 	bl	8000b84 <LL_FillBuffer>
			BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7c:	2400031c 	.word	0x2400031c
 8000b80:	24000450 	.word	0x24000450

08000b84 <LL_FillBuffer>:
 * @param  ColorIndex: Color index
 * @retval None
 */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hDma2dHandler.Init.Mode = DMA2D_R2M;
 8000b92:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000b94:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b98:	605a      	str	r2, [r3, #4]
	if (hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat
 8000b9a:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <LL_FillBuffer+0xa8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a24      	ldr	r2, [pc, #144]	@ (8000c30 <LL_FillBuffer+0xac>)
 8000ba0:	2134      	movs	r1, #52	@ 0x34
 8000ba2:	fb01 f303 	mul.w	r3, r1, r3
 8000ba6:	4413      	add	r3, r2
 8000ba8:	3348      	adds	r3, #72	@ 0x48
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d111      	bne.n	8000bd4 <LL_FillBuffer+0x50>
			== LTDC_PIXEL_FORMAT_RGB565)
	{ /* RGB565 format */
		hDma2dHandler.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	609a      	str	r2, [r3, #8]
		ColorIndex = ((ColorIndex & LCD_COLOR_RED) << 8)
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	f403 0278 	and.w	r2, r3, #16252928	@ 0xf80000
				| ((ColorIndex & LCD_COLOR_GREEN) << 5)
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	015b      	lsls	r3, r3, #5
 8000bc2:	f403 437c 	and.w	r3, r3, #64512	@ 0xfc00
 8000bc6:	431a      	orrs	r2, r3
				| ((ColorIndex & LCD_COLOR_BLUE) << 3);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	b2db      	uxtb	r3, r3
		ColorIndex = ((ColorIndex & LCD_COLOR_RED) << 8)
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61fb      	str	r3, [r7, #28]
 8000bd2:	e002      	b.n	8000bda <LL_FillBuffer+0x56>
	}
	else
	{ /* ARGB8888 format */
		hDma2dHandler.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	609a      	str	r2, [r3, #8]
	}
	hDma2dHandler.Init.OutputOffset = OffLine;
 8000bda:	4a13      	ldr	r2, [pc, #76]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	60d3      	str	r3, [r2, #12]

	hDma2dHandler.Instance = DMA2D;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000be2:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <LL_FillBuffer+0xb0>)
 8000be4:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if (HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK)
 8000be6:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000be8:	f002 fa32 	bl	8003050 <HAL_DMA2D_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d115      	bne.n	8000c1e <LL_FillBuffer+0x9a>
	{
		if (HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK)
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000bf6:	f002 fcb3 	bl	8003560 <HAL_DMA2D_ConfigLayer>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10e      	bne.n	8000c1e <LL_FillBuffer+0x9a>
		{
			if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t) pDst,
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	69f9      	ldr	r1, [r7, #28]
 8000c0a:	4807      	ldr	r0, [pc, #28]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000c0c:	f002 fa84 	bl	8003118 <HAL_DMA2D_Start>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d103      	bne.n	8000c1e <LL_FillBuffer+0x9a>
					xSize, ySize) == HAL_OK)
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000c16:	210a      	movs	r1, #10
 8000c18:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <LL_FillBuffer+0xa4>)
 8000c1a:	f002 faa8 	bl	800316e <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24000354 	.word	0x24000354
 8000c2c:	2400031c 	.word	0x2400031c
 8000c30:	24000450 	.word	0x24000450
 8000c34:	52001000 	.word	0x52001000

08000c38 <BSP_SDRAM_Init>:

/******************************************************************************
function:	SDRAM device configuration
******************************************************************************/
void BSP_SDRAM_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <BSP_SDRAM_Init+0x18>)
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <BSP_SDRAM_Init+0x1c>)
 8000c40:	601a      	str	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000c42:	f240 6003 	movw	r0, #1539	@ 0x603
 8000c46:	f000 f807 	bl	8000c58 <BSP_SDRAM_Initialization_sequence>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	240003bc 	.word	0x240003bc
 8000c54:	52004140 	.word	0x52004140

08000c58 <BSP_SDRAM_Initialization_sequence>:
function:	Programs the SDRAM device.
parameter:
	RefreshCount : SDRAM refresh counter value 
******************************************************************************/
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000c64:	4b2a      	ldr	r3, [pc, #168]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c6a:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000c70:	4b27      	ldr	r3, [pc, #156]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000c76:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000c7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c80:	4923      	ldr	r1, [pc, #140]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c82:	4824      	ldr	r0, [pc, #144]	@ (8000d14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000c84:	f006 fb04 	bl	8007290 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f001 ffdf 	bl	8002c4c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c96:	2208      	movs	r2, #8
 8000c98:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8000ca6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000caa:	4919      	ldr	r1, [pc, #100]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cac:	4819      	ldr	r0, [pc, #100]	@ (8000d14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000cae:	f006 faef 	bl	8007290 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cba:	2208      	movs	r2, #8
 8000cbc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000cca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cce:	4910      	ldr	r1, [pc, #64]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cd0:	4810      	ldr	r0, [pc, #64]	@ (8000d14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000cd2:	f006 fadd 	bl	8007290 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000cd6:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000cda:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cf2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000cf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf8:	4905      	ldr	r1, [pc, #20]	@ (8000d10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000cfc:	f006 fac8 	bl	8007290 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000d04:	f006 faf9 	bl	80072fa <HAL_SDRAM_ProgramRefreshRate>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	24000320 	.word	0x24000320
 8000d14:	240003bc 	.word	0x240003bc

08000d18 <GT811_Init>:
 * @brief  Initialize the GT811 communication bus
 *         from MCU to GT811 : ie I2C channel initialization (if required).
 * @retval None
 */

uint8_t GT811_Init(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09c      	sub	sp, #112	@ 0x70
 8000d1c:	af00      	add	r7, sp, #0
	I2C_Init();
 8000d1e:	f000 f875 	bl	8000e0c <I2C_Init>

	/* reset GT811 */
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2140      	movs	r1, #64	@ 0x40
 8000d26:	481a      	ldr	r0, [pc, #104]	@ (8000d90 <GT811_Init+0x78>)
 8000d28:	f002 ff36 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000d2c:	20c8      	movs	r0, #200	@ 0xc8
 8000d2e:	f001 ff8d 	bl	8002c4c <HAL_Delay>
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2140      	movs	r1, #64	@ 0x40
 8000d36:	4816      	ldr	r0, [pc, #88]	@ (8000d90 <GT811_Init+0x78>)
 8000d38:	f002 ff2e 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000d3c:	20c8      	movs	r0, #200	@ 0xc8
 8000d3e:	f001 ff85 	bl	8002c4c <HAL_Delay>

	/* if Version is correct, send the configuration parameters */
	if (GT811_ReadID() == GT811_VERSION_VALUE) {
 8000d42:	f000 f829 	bl	8000d98 <GT811_ReadID>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f242 0310 	movw	r3, #8208	@ 0x2010
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d119      	bne.n	8000d86 <GT811_Init+0x6e>
		/* touch screen configuration parameter (touch screen manufacturers provide) */
		uint8_t GTP_CFG_DATA[] = { 0x12, 0x10, 0x0E, 0x0C, 0x0A, 0x08, 0x06,
 8000d52:	4a10      	ldr	r2, [pc, #64]	@ (8000d94 <GT811_Init+0x7c>)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4611      	mov	r1, r2
 8000d58:	226a      	movs	r2, #106	@ 0x6a
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f028 fdf8 	bl	8029950 <memcpy>
				0x00, 0x00, 0x00, 0x20, 0x14, 0xEC, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x30, 0x25,
				0x28, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, };

		/* config  */
		GTP_CFG_DATA[62] = GT811_MAX_WIDTH >> 8;
 8000d60:	2303      	movs	r3, #3
 8000d62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
		GTP_CFG_DATA[61] = GT811_MAX_WIDTH & 0xff;
 8000d66:	2320      	movs	r3, #32
 8000d68:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		GTP_CFG_DATA[60] = GT811_MAX_HEIGHT >> 8;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		GTP_CFG_DATA[59] = GT811_MAX_HEIGHT & 0xff;
 8000d72:	23e0      	movs	r3, #224	@ 0xe0
 8000d74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		I2C_WriteReg(GT811_CMD_WR, GT811_CONFIG_REG, (uint8_t*) GTP_CFG_DATA,
 8000d78:	1d3a      	adds	r2, r7, #4
 8000d7a:	236a      	movs	r3, #106	@ 0x6a
 8000d7c:	f240 61a2 	movw	r1, #1698	@ 0x6a2
 8000d80:	20ba      	movs	r0, #186	@ 0xba
 8000d82:	f000 fa3f 	bl	8001204 <I2C_WriteReg>
				sizeof(GTP_CFG_DATA));
	}
	return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3770      	adds	r7, #112	@ 0x70
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58021400 	.word	0x58021400
 8000d94:	0802a3f8 	.word	0x0802a3f8

08000d98 <GT811_ReadID>:
 * @brief  Read the GT811 device ID, pre initialize I2C in case of need to be
 *         able to read the GT811 device ID, and verify this is a GT811.
 * @param  DeviceAddr: I2C GT811 Slave address.
 * @retval The Device ID (two bytes).
 */
uint16_t GT811_ReadID() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	uint8_t value[2];
	I2C_ReadReg(GT811_CMD_WR, GT811_VERSION, value, 2);
 8000d9e:	1d3a      	adds	r2, r7, #4
 8000da0:	2302      	movs	r3, #2
 8000da2:	f240 7117 	movw	r1, #1815	@ 0x717
 8000da6:	20ba      	movs	r0, #186	@ 0xba
 8000da8:	f000 fa72 	bl	8001290 <I2C_ReadReg>
	printf("ID    %x\r\n", (((uint16_t) value[0] << 8) + value[1]));
 8000dac:	793b      	ldrb	r3, [r7, #4]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	797a      	ldrb	r2, [r7, #5]
 8000db2:	4413      	add	r3, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <GT811_ReadID+0x38>)
 8000db8:	f028 fc4a 	bl	8029650 <iprintf>
	return value[0] * 0x100 + value[1];
 8000dbc:	793b      	ldrb	r3, [r7, #4]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	797a      	ldrb	r2, [r7, #5]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	0802a464 	.word	0x0802a464

08000dd4 <delay_us>:
/**
 * @brief  I2C delay.
 * @param  None
 * @retval None
 */
static void delay_us(uint32_t value) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint32_t i;
	i = value * 250;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	22fa      	movs	r2, #250	@ 0xfa
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	60fb      	str	r3, [r7, #12]
	while (i--) {
 8000de6:	e005      	b.n	8000df4 <delay_us+0x20>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
}
 8000dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dee:	f3bf 8f6f 	isb	sy
}
 8000df2:	bf00      	nop
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	60fa      	str	r2, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f4      	bne.n	8000de8 <delay_us+0x14>
		__DSB();
		__ISB();
	};
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <I2C_Init>:
/**
 * @brief  I2C Init.
 * @param  None
 * @retval None
 */
void I2C_Init(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
  __ASM volatile ("isb 0xF":::"memory");
 8000e12:	f3bf 8f6f 	isb	sy
}
 8000e16:	bf00      	nop
#if !(defined(__i2c_H)||defined(__I2C_H__))
	GPIO_InitTypeDef GPIO_InitStruct;

	SDA_CLK()
 8000e18:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <I2C_Init+0xa0>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	4a23      	ldr	r2, [pc, #140]	@ (8000eac <I2C_Init+0xa0>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <I2C_Init+0xa0>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("isb 0xF":::"memory");
 8000e36:	f3bf 8f6f 	isb	sy
}
 8000e3a:	bf00      	nop
	SCL_CLK()
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <I2C_Init+0xa0>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e42:	4a1a      	ldr	r2, [pc, #104]	@ (8000eac <I2C_Init+0xa0>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <I2C_Init+0xa0>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000e66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e6a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	480f      	ldr	r0, [pc, #60]	@ (8000eb0 <I2C_Init+0xa4>)
 8000e74:	f002 fcc8 	bl	8003808 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SDA_GPIO_PORT, SDA_GPIO_PIN, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e7e:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <I2C_Init+0xa4>)
 8000e80:	f002 fe8a 	bl	8003b98 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = SCL_GPIO_PIN;
 8000e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e88:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <I2C_Init+0xa4>)
 8000e92:	f002 fcb9 	bl	8003808 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SCL_GPIO_PORT, SCL_GPIO_PIN, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e9c:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <I2C_Init+0xa4>)
 8000e9e:	f002 fe7b 	bl	8003b98 <HAL_GPIO_WritePin>
#else
	MX_I2C4_Init();
#endif
}
 8000ea2:	bf00      	nop
 8000ea4:	3720      	adds	r7, #32
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	58024400 	.word	0x58024400
 8000eb0:	58020c00 	.word	0x58020c00

08000eb4 <SDA_IN>:
/**
 * @brief  Set SDA In.
 * @param  None
 * @retval None
 */
static void SDA_IN() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000eba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ebe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <SDA_IN+0x2c>)
 8000ed2:	f002 fc99 	bl	8003808 <HAL_GPIO_Init>

}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	58020c00 	.word	0x58020c00

08000ee4 <SDA_OUT>:
/**
 * @brief  Set SDA Out.
 * @param  None
 * @retval None
 */
static void SDA_OUT() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000eea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eee:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <SDA_OUT+0x2c>)
 8000f02:	f002 fc81 	bl	8003808 <HAL_GPIO_Init>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	58020c00 	.word	0x58020c00

08000f14 <I2C_Start>:
/**
 * @brief  I2C Start.
 * @param  None
 * @retval None
 */
void I2C_Start(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000f18:	f7ff ffe4 	bl	8000ee4 <SDA_OUT>

	SET_SDA();
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f22:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <I2C_Start+0x54>)
 8000f24:	f002 fe38 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff ff53 	bl	8000dd4 <delay_us>

	SET_CLK();
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f34:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <I2C_Start+0x54>)
 8000f36:	f002 fe2f 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff4a 	bl	8000dd4 <delay_us>

	CLR_SDA();
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f46:	4808      	ldr	r0, [pc, #32]	@ (8000f68 <I2C_Start+0x54>)
 8000f48:	f002 fe26 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff ff41 	bl	8000dd4 <delay_us>

	CLR_CLK();
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <I2C_Start+0x54>)
 8000f5a:	f002 fe1d 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f7ff ff38 	bl	8000dd4 <delay_us>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58020c00 	.word	0x58020c00

08000f6c <I2C_Stop>:
/**
 * @brief  I2C Stop.
 * @param  None
 * @retval None
 */
void I2C_Stop(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000f70:	f7ff ffb8 	bl	8000ee4 <SDA_OUT>

	CLR_SDA();
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f7a:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <I2C_Stop+0x44>)
 8000f7c:	f002 fe0c 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff ff27 	bl	8000dd4 <delay_us>

	SET_CLK();
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f8c:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <I2C_Stop+0x44>)
 8000f8e:	f002 fe03 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff ff1e 	bl	8000dd4 <delay_us>

	SET_SDA();
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <I2C_Stop+0x44>)
 8000fa0:	f002 fdfa 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff ff15 	bl	8000dd4 <delay_us>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	58020c00 	.word	0x58020c00

08000fb4 <I2C_Wait_Ack>:
/**
 * @brief  I2C Ack.
 * @param  None
 * @retval None
 */
uint8_t I2C_Wait_Ack(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	uint16_t ucErrTime = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	80fb      	strh	r3, [r7, #6]

	SDA_IN();
 8000fbe:	f7ff ff79 	bl	8000eb4 <SDA_IN>
	SET_SDA();
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc8:	4816      	ldr	r0, [pc, #88]	@ (8001024 <I2C_Wait_Ack+0x70>)
 8000fca:	f002 fde5 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff ff00 	bl	8000dd4 <delay_us>
	SET_CLK();
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fda:	4812      	ldr	r0, [pc, #72]	@ (8001024 <I2C_Wait_Ack+0x70>)
 8000fdc:	f002 fddc 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff fef7 	bl	8000dd4 <delay_us>

	while (READ_SDA()) {
 8000fe6:	e009      	b.n	8000ffc <I2C_Wait_Ack+0x48>
		ucErrTime++;
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	3301      	adds	r3, #1
 8000fec:	80fb      	strh	r3, [r7, #6]
		if (ucErrTime > 250) {
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2bfa      	cmp	r3, #250	@ 0xfa
 8000ff2:	d903      	bls.n	8000ffc <I2C_Wait_Ack+0x48>
			I2C_Stop();
 8000ff4:	f7ff ffba 	bl	8000f6c <I2C_Stop>
			return 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e00e      	b.n	800101a <I2C_Wait_Ack+0x66>
	while (READ_SDA()) {
 8000ffc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001000:	4808      	ldr	r0, [pc, #32]	@ (8001024 <I2C_Wait_Ack+0x70>)
 8001002:	f002 fdb1 	bl	8003b68 <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1ed      	bne.n	8000fe8 <I2C_Wait_Ack+0x34>
		}
	}
	CLR_CLK();
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001012:	4804      	ldr	r0, [pc, #16]	@ (8001024 <I2C_Wait_Ack+0x70>)
 8001014:	f002 fdc0 	bl	8003b98 <HAL_GPIO_WritePin>
	return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	58020c00 	.word	0x58020c00

08001028 <I2C_Ack>:
/**
 * @brief  I2C Ack.
 * @param  None
 * @retval None
 */
void I2C_Ack(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	SDA_OUT();
 800102c:	f7ff ff5a 	bl	8000ee4 <SDA_OUT>
	CLR_CLK();
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001036:	4810      	ldr	r0, [pc, #64]	@ (8001078 <I2C_Ack+0x50>)
 8001038:	f002 fdae 	bl	8003b98 <HAL_GPIO_WritePin>

	CLR_SDA();
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001042:	480d      	ldr	r0, [pc, #52]	@ (8001078 <I2C_Ack+0x50>)
 8001044:	f002 fda8 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fec3 	bl	8000dd4 <delay_us>

	SET_CLK();
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <I2C_Ack+0x50>)
 8001056:	f002 fd9f 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff feba 	bl	8000dd4 <delay_us>

	CLR_CLK();
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <I2C_Ack+0x50>)
 8001068:	f002 fd96 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff feb1 	bl	8000dd4 <delay_us>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	58020c00 	.word	0x58020c00

0800107c <I2C_NAck>:
/**
 * @brief  No I2C Ack.
 * @param  None
 * @retval None
 */
void I2C_NAck(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	SDA_OUT();
 8001080:	f7ff ff30 	bl	8000ee4 <SDA_OUT>

	SET_SDA();
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <I2C_NAck+0x44>)
 800108c:	f002 fd84 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8001090:	2001      	movs	r0, #1
 8001092:	f7ff fe9f 	bl	8000dd4 <delay_us>

	SET_CLK();
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800109c:	4808      	ldr	r0, [pc, #32]	@ (80010c0 <I2C_NAck+0x44>)
 800109e:	f002 fd7b 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff fe96 	bl	8000dd4 <delay_us>

	CLR_CLK();
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010ae:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <I2C_NAck+0x44>)
 80010b0:	f002 fd72 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff fe8d 	bl	8000dd4 <delay_us>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	58020c00 	.word	0x58020c00

080010c4 <I2C_Send_Byte>:
/**
 * @brief  I2C Send one byte
 * @param  1:ack 0:without ack
 * @retval None
 */
void I2C_Send_Byte(uint8_t txd) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t t;

	SDA_OUT();
 80010ce:	f7ff ff09 	bl	8000ee4 <SDA_OUT>
	CLR_CLK();       //Put low CLK to send data
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010d8:	4825      	ldr	r0, [pc, #148]	@ (8001170 <I2C_Send_Byte+0xac>)
 80010da:	f002 fd5d 	bl	8003b98 <HAL_GPIO_WritePin>

	for (t = 0; t < 8; t++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e02b      	b.n	800113c <I2C_Send_Byte+0x78>
		if (txd & 0x80)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da06      	bge.n	80010fa <I2C_Send_Byte+0x36>
			SET_SDA();
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010f2:	481f      	ldr	r0, [pc, #124]	@ (8001170 <I2C_Send_Byte+0xac>)
 80010f4:	f002 fd50 	bl	8003b98 <HAL_GPIO_WritePin>
 80010f8:	e005      	b.n	8001106 <I2C_Send_Byte+0x42>
		else
			CLR_SDA();
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001100:	481b      	ldr	r0, [pc, #108]	@ (8001170 <I2C_Send_Byte+0xac>)
 8001102:	f002 fd49 	bl	8003b98 <HAL_GPIO_WritePin>

		txd <<= 1;
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff fe61 	bl	8000dd4 <delay_us>

		SET_CLK();
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001118:	4815      	ldr	r0, [pc, #84]	@ (8001170 <I2C_Send_Byte+0xac>)
 800111a:	f002 fd3d 	bl	8003b98 <HAL_GPIO_WritePin>
		delay_us(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fe58 	bl	8000dd4 <delay_us>
		CLR_CLK();
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800112a:	4811      	ldr	r0, [pc, #68]	@ (8001170 <I2C_Send_Byte+0xac>)
 800112c:	f002 fd34 	bl	8003b98 <HAL_GPIO_WritePin>
		delay_us(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fe4f 	bl	8000dd4 <delay_us>
	for (t = 0; t < 8; t++) {
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	3301      	adds	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b07      	cmp	r3, #7
 8001140:	d9d0      	bls.n	80010e4 <I2C_Send_Byte+0x20>
	}

	SET_SDA();
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001148:	4809      	ldr	r0, [pc, #36]	@ (8001170 <I2C_Send_Byte+0xac>)
 800114a:	f002 fd25 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff fe40 	bl	8000dd4 <delay_us>
	CLR_CLK();
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <I2C_Send_Byte+0xac>)
 800115c:	f002 fd1c 	bl	8003b98 <HAL_GPIO_WritePin>
	delay_us(1);
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff fe37 	bl	8000dd4 <delay_us>
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	58020c00 	.word	0x58020c00

08001174 <I2C_Read_Byte>:
/**
 * @brief  I2C read one byte
 * @param  1:ack 0:without ack
 * @retval read value
 */
uint8_t I2C_Read_Byte(unsigned char ack) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	unsigned char i, receive = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	73bb      	strb	r3, [r7, #14]
	SDA_IN();         //SDA set in
 8001182:	f7ff fe97 	bl	8000eb4 <SDA_IN>
	for (i = 0; i < 8; i++) {
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e022      	b.n	80011d2 <I2C_Read_Byte+0x5e>
		CLR_CLK();
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001192:	481b      	ldr	r0, [pc, #108]	@ (8001200 <I2C_Read_Byte+0x8c>)
 8001194:	f002 fd00 	bl	8003b98 <HAL_GPIO_WritePin>
		delay_us(1);
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fe1b 	bl	8000dd4 <delay_us>
		SET_CLK();
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a4:	4816      	ldr	r0, [pc, #88]	@ (8001200 <I2C_Read_Byte+0x8c>)
 80011a6:	f002 fcf7 	bl	8003b98 <HAL_GPIO_WritePin>
		receive <<= 1;
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	73bb      	strb	r3, [r7, #14]
		if (READ_SDA())
 80011b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b4:	4812      	ldr	r0, [pc, #72]	@ (8001200 <I2C_Read_Byte+0x8c>)
 80011b6:	f002 fcd7 	bl	8003b68 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <I2C_Read_Byte+0x52>
			receive++;
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	3301      	adds	r3, #1
 80011c4:	73bb      	strb	r3, [r7, #14]
		delay_us(1);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff fe04 	bl	8000dd4 <delay_us>
	for (i = 0; i < 8; i++) {
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	3301      	adds	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d9d9      	bls.n	800118c <I2C_Read_Byte+0x18>
	}
	CLR_CLK();
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011de:	4808      	ldr	r0, [pc, #32]	@ (8001200 <I2C_Read_Byte+0x8c>)
 80011e0:	f002 fcda 	bl	8003b98 <HAL_GPIO_WritePin>
	if (!ack)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <I2C_Read_Byte+0x7c>
		I2C_NAck();   //sent nACK
 80011ea:	f7ff ff47 	bl	800107c <I2C_NAck>
 80011ee:	e001      	b.n	80011f4 <I2C_Read_Byte+0x80>
	else
		I2C_Ack();        //sent ACK
 80011f0:	f7ff ff1a 	bl	8001028 <I2C_Ack>

	return receive;
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	58020c00 	.word	0x58020c00

08001204 <I2C_WriteReg>:
 * Return         : ret
 -0  succeed
 -1  error
 * Attention		 : None
 *******************************************************************************/
uint8_t I2C_WriteReg(uint8_t I2c_Addr, uint16_t reg, uint8_t *buf, uint8_t len) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	603a      	str	r2, [r7, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	460b      	mov	r3, r1
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	71bb      	strb	r3, [r7, #6]
#if !(defined(__i2c_H)||defined(__I2C_H__))
	uint8_t i;
	uint8_t ret = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	73bb      	strb	r3, [r7, #14]
	I2C_Start();
 800121e:	f7ff fe79 	bl	8000f14 <I2C_Start>

	I2C_Send_Byte(I2c_Addr);   //Slaver Addr
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff4d 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 800122a:	f7ff fec3 	bl	8000fb4 <I2C_Wait_Ack>

#ifdef I2C_MEMADD_16BIT
	I2C_Send_Byte(reg >> 8);   	     //Data Addr high
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	b29b      	uxth	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff44 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 800123c:	f7ff feba 	bl	8000fb4 <I2C_Wait_Ack>
#endif

	I2C_Send_Byte(reg & 0xFF);   	   //Data Addr low
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff3d 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 800124a:	f7ff feb3 	bl	8000fb4 <I2C_Wait_Ack>

	for (i = 0; i < len; i++) {
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e010      	b.n	8001276 <I2C_WriteReg+0x72>
		I2C_Send_Byte(buf[i]);
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff31 	bl	80010c4 <I2C_Send_Byte>
		ret = I2C_Wait_Ack();
 8001262:	f7ff fea7 	bl	8000fb4 <I2C_Wait_Ack>
 8001266:	4603      	mov	r3, r0
 8001268:	73bb      	strb	r3, [r7, #14]
		if (ret)
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d107      	bne.n	8001280 <I2C_WriteReg+0x7c>
	for (i = 0; i < len; i++) {
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	3301      	adds	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	429a      	cmp	r2, r3
 800127c:	d3ea      	bcc.n	8001254 <I2C_WriteReg+0x50>
 800127e:	e000      	b.n	8001282 <I2C_WriteReg+0x7e>
			break;
 8001280:	bf00      	nop
	}
	I2C_Stop();
 8001282:	f7ff fe73 	bl	8000f6c <I2C_Stop>
	return ret;
 8001286:	7bbb      	ldrb	r3, [r7, #14]
#else
	uint8_t result = HAL_I2C_Mem_Write(&hi2c4, I2c_Addr, reg, sizeof(reg), buf,
			len, 1000);
	return result;
#endif
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <I2C_ReadReg>:
 *                  - len: The length of the array
 * Output         : None
 * Return         : None
 * Attention		 : None
 *******************************************************************************/
void I2C_ReadReg(uint8_t I2c_Addr, uint16_t reg, uint8_t *buf, uint8_t len) {
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	603a      	str	r2, [r7, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	460b      	mov	r3, r1
 80012a0:	80bb      	strh	r3, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	71bb      	strb	r3, [r7, #6]
#if !(defined(__i2c_H)||defined(__I2C_H__))
	uint8_t i;
	I2C_Start();
 80012a6:	f7ff fe35 	bl	8000f14 <I2C_Start>
	I2C_Send_Byte(I2c_Addr);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff09 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 80012b2:	f7ff fe7f 	bl	8000fb4 <I2C_Wait_Ack>

#ifdef I2C_MEMADD_16BIT
	I2C_Send_Byte(reg >> 8);   	     //Data Addr high
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff00 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 80012c4:	f7ff fe76 	bl	8000fb4 <I2C_Wait_Ack>
#endif

	I2C_Send_Byte(reg & 0xFF);   	   //Data Addr low
 80012c8:	88bb      	ldrh	r3, [r7, #4]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fef9 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 80012d2:	f7ff fe6f 	bl	8000fb4 <I2C_Wait_Ack>
	I2C_Stop();
 80012d6:	f7ff fe49 	bl	8000f6c <I2C_Stop>

	I2C_Start();
 80012da:	f7ff fe1b 	bl	8000f14 <I2C_Start>
	I2C_Send_Byte(I2c_Addr + 1);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff feed 	bl	80010c4 <I2C_Send_Byte>
	I2C_Wait_Ack();
 80012ea:	f7ff fe63 	bl	8000fb4 <I2C_Wait_Ack>

	for (i = 0; i < len; i++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e013      	b.n	800131c <I2C_ReadReg+0x8c>
		buf[i] = I2C_Read_Byte(i == (len - 1) ? 0 : 1);
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	429a      	cmp	r2, r3
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4619      	mov	r1, r3
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	18d4      	adds	r4, r2, r3
 800130c:	4608      	mov	r0, r1
 800130e:	f7ff ff31 	bl	8001174 <I2C_Read_Byte>
 8001312:	4603      	mov	r3, r0
 8001314:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++) {
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	3301      	adds	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	429a      	cmp	r2, r3
 8001322:	d3e7      	bcc.n	80012f4 <I2C_ReadReg+0x64>
	}
	I2C_Stop();
 8001324:	f7ff fe22 	bl	8000f6c <I2C_Stop>
#else
	HAL_I2C_Mem_Read(&hi2c4, I2c_Addr, reg, sizeof(uint16_t), buf, len, 1000);
#endif
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bd90      	pop	{r4, r7, pc}

08001330 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <MX_CRC_Init+0x3c>)
 8001336:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <MX_CRC_Init+0x40>)
 8001338:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_CRC_Init+0x3c>)
 800133c:	2200      	movs	r2, #0
 800133e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <MX_CRC_Init+0x3c>)
 8001342:	2200      	movs	r2, #0
 8001344:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_CRC_Init+0x3c>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800134c:	4b07      	ldr	r3, [pc, #28]	@ (800136c <MX_CRC_Init+0x3c>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_CRC_Init+0x3c>)
 8001354:	2201      	movs	r2, #1
 8001356:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	@ (800136c <MX_CRC_Init+0x3c>)
 800135a:	f001 fd87 	bl	8002e6c <HAL_CRC_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001364:	f000 ff00 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	24000330 	.word	0x24000330
 8001370:	58024c00 	.word	0x58024c00

08001374 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0b      	ldr	r2, [pc, #44]	@ (80013b0 <HAL_CRC_MspInit+0x3c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d10e      	bne.n	80013a4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	4a09      	ldr	r2, [pc, #36]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 800138e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <HAL_CRC_MspInit+0x40>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	58024c00 	.word	0x58024c00
 80013b4:	58024400 	.word	0x58024400

080013b8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013be:	4a1a      	ldr	r2, [pc, #104]	@ (8001428 <MX_DMA2D_Init+0x70>)
 80013c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80013c8:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013dc:	2202      	movs	r2, #2
 80013de:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80013fe:	4809      	ldr	r0, [pc, #36]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 8001400:	f001 fe26 	bl	8003050 <HAL_DMA2D_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800140a:	f000 fead 	bl	8002168 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800140e:	2101      	movs	r1, #1
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_DMA2D_Init+0x6c>)
 8001412:	f002 f8a5 	bl	8003560 <HAL_DMA2D_ConfigLayer>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800141c:	f000 fea4 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	24000354 	.word	0x24000354
 8001428:	52001000 	.word	0x52001000

0800142c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <HAL_DMA2D_MspInit+0x48>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d116      	bne.n	800146c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <HAL_DMA2D_MspInit+0x4c>)
 8001440:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001444:	4a0c      	ldr	r2, [pc, #48]	@ (8001478 <HAL_DMA2D_MspInit+0x4c>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_DMA2D_MspInit+0x4c>)
 8001450:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2105      	movs	r1, #5
 8001460:	205a      	movs	r0, #90	@ 0x5a
 8001462:	f001 fcdb 	bl	8002e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001466:	205a      	movs	r0, #90	@ 0x5a
 8001468:	f001 fcf2 	bl	8002e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	52001000 	.word	0x52001000
 8001478:	58024400 	.word	0x58024400

0800147c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
 8001490:	615a      	str	r2, [r3, #20]
 8001492:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001494:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <MX_FMC_Init+0x98>)
 8001496:	4a20      	ldr	r2, [pc, #128]	@ (8001518 <MX_FMC_Init+0x9c>)
 8001498:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800149a:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <MX_FMC_Init+0x98>)
 800149c:	2201      	movs	r2, #1
 800149e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <MX_FMC_Init+0x98>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_FMC_Init+0x98>)
 80014a8:	2204      	movs	r2, #4
 80014aa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <MX_FMC_Init+0x98>)
 80014ae:	2210      	movs	r2, #16
 80014b0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <MX_FMC_Init+0x98>)
 80014b4:	2240      	movs	r2, #64	@ 0x40
 80014b6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <MX_FMC_Init+0x98>)
 80014ba:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014be:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014c0:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <MX_FMC_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80014c6:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <MX_FMC_Init+0x98>)
 80014c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014cc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <MX_FMC_Init+0x98>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <MX_FMC_Init+0x98>)
 80014d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80014dc:	2302      	movs	r3, #2
 80014de:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80014e0:	2307      	movs	r3, #7
 80014e2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80014e4:	2304      	movs	r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80014e8:	2306      	movs	r3, #6
 80014ea:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	@ (8001514 <MX_FMC_Init+0x98>)
 80014fe:	f005 fe8b 	bl	8007218 <HAL_SDRAM_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001508:	f000 fe2e 	bl	8002168 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800150c:	bf00      	nop
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	240003bc 	.word	0x240003bc
 8001518:	52004140 	.word	0x52004140

0800151c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800151c:	b580      	push	{r7, lr}
 800151e:	b0b8      	sub	sp, #224	@ 0xe0
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001532:	4b51      	ldr	r3, [pc, #324]	@ (8001678 <HAL_FMC_MspInit+0x15c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 8099 	bne.w	800166e <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 800153c:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <HAL_FMC_MspInit+0x15c>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	22c0      	movs	r2, #192	@ 0xc0
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f028 f8d5 	bl	80296fa <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001550:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800155c:	2300      	movs	r3, #0
 800155e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4618      	mov	r0, r3
 8001566:	f004 f82b 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001570:	f000 fdfa 	bl	8002168 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001574:	4b41      	ldr	r3, [pc, #260]	@ (800167c <HAL_FMC_MspInit+0x160>)
 8001576:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800157a:	4a40      	ldr	r2, [pc, #256]	@ (800167c <HAL_FMC_MspInit+0x160>)
 800157c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001580:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001584:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <HAL_FMC_MspInit+0x160>)
 8001586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800158a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001592:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001596:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ac:	230c      	movs	r3, #12
 80015ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015b6:	4619      	mov	r1, r3
 80015b8:	4831      	ldr	r0, [pc, #196]	@ (8001680 <HAL_FMC_MspInit+0x164>)
 80015ba:	f002 f925 	bl	8003808 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015be:	23e0      	movs	r3, #224	@ 0xe0
 80015c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d6:	230c      	movs	r3, #12
 80015d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80015e0:	4619      	mov	r1, r3
 80015e2:	4828      	ldr	r0, [pc, #160]	@ (8001684 <HAL_FMC_MspInit+0x168>)
 80015e4:	f002 f910 	bl	8003808 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80015e8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80015ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001602:	230c      	movs	r3, #12
 8001604:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001608:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800160c:	4619      	mov	r1, r3
 800160e:	481e      	ldr	r0, [pc, #120]	@ (8001688 <HAL_FMC_MspInit+0x16c>)
 8001610:	f002 f8fa 	bl	8003808 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001614:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001618:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800162e:	230c      	movs	r3, #12
 8001630:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001634:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001638:	4619      	mov	r1, r3
 800163a:	4814      	ldr	r0, [pc, #80]	@ (800168c <HAL_FMC_MspInit+0x170>)
 800163c:	f002 f8e4 	bl	8003808 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001640:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001644:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800165a:	230c      	movs	r3, #12
 800165c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001660:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001664:	4619      	mov	r1, r3
 8001666:	480a      	ldr	r0, [pc, #40]	@ (8001690 <HAL_FMC_MspInit+0x174>)
 8001668:	f002 f8ce 	bl	8003808 <HAL_GPIO_Init>
 800166c:	e000      	b.n	8001670 <HAL_FMC_MspInit+0x154>
    return;
 800166e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001670:	37e0      	adds	r7, #224	@ 0xe0
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	240003f0 	.word	0x240003f0
 800167c:	58024400 	.word	0x58024400
 8001680:	58021400 	.word	0x58021400
 8001684:	58021c00 	.word	0x58021c00
 8001688:	58021800 	.word	0x58021800
 800168c:	58021000 	.word	0x58021000
 8001690:	58020c00 	.word	0x58020c00

08001694 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800169c:	f7ff ff3e 	bl	800151c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016ac:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <MX_FREERTOS_Init+0x28>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <MX_FREERTOS_Init+0x2c>)
 80016b2:	f008 f84b 	bl	800974c <osThreadNew>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <MX_FREERTOS_Init+0x30>)
 80016ba:	6013      	str	r3, [r2, #0]

  /* creation of TouchGfxTask */
  TouchGfxTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGfxTask_attributes);
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <MX_FREERTOS_Init+0x34>)
 80016be:	2100      	movs	r1, #0
 80016c0:	4807      	ldr	r0, [pc, #28]	@ (80016e0 <MX_FREERTOS_Init+0x38>)
 80016c2:	f008 f843 	bl	800974c <osThreadNew>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <MX_FREERTOS_Init+0x3c>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	0802af5c 	.word	0x0802af5c
 80016d4:	080016e9 	.word	0x080016e9
 80016d8:	240003f4 	.word	0x240003f4
 80016dc:	0802af80 	.word	0x0802af80
 80016e0:	0800cf37 	.word	0x0800cf37
 80016e4:	240003f8 	.word	0x240003f8

080016e8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2140      	movs	r1, #64	@ 0x40
 80016f4:	4807      	ldr	r0, [pc, #28]	@ (8001714 <StartDefaultTask+0x2c>)
 80016f6:	f002 fa4f 	bl	8003b98 <HAL_GPIO_WritePin>
		osDelay(200);
 80016fa:	20c8      	movs	r0, #200	@ 0xc8
 80016fc:	f008 f8b8 	bl	8009870 <osDelay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	2140      	movs	r1, #64	@ 0x40
 8001704:	4803      	ldr	r0, [pc, #12]	@ (8001714 <StartDefaultTask+0x2c>)
 8001706:	f002 fa47 	bl	8003b98 <HAL_GPIO_WritePin>
		osDelay(200);
 800170a:	20c8      	movs	r0, #200	@ 0xc8
 800170c:	f008 f8b0 	bl	8009870 <osDelay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001710:	bf00      	nop
 8001712:	e7ed      	b.n	80016f0 <StartDefaultTask+0x8>
 8001714:	58020400 	.word	0x58020400

08001718 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08e      	sub	sp, #56	@ 0x38
 800171c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172e:	4b83      	ldr	r3, [pc, #524]	@ (800193c <MX_GPIO_Init+0x224>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001734:	4a81      	ldr	r2, [pc, #516]	@ (800193c <MX_GPIO_Init+0x224>)
 8001736:	f043 0310 	orr.w	r3, r3, #16
 800173a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173e:	4b7f      	ldr	r3, [pc, #508]	@ (800193c <MX_GPIO_Init+0x224>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	623b      	str	r3, [r7, #32]
 800174a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800174c:	4b7b      	ldr	r3, [pc, #492]	@ (800193c <MX_GPIO_Init+0x224>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001752:	4a7a      	ldr	r2, [pc, #488]	@ (800193c <MX_GPIO_Init+0x224>)
 8001754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800175c:	4b77      	ldr	r3, [pc, #476]	@ (800193c <MX_GPIO_Init+0x224>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176a:	4b74      	ldr	r3, [pc, #464]	@ (800193c <MX_GPIO_Init+0x224>)
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001770:	4a72      	ldr	r2, [pc, #456]	@ (800193c <MX_GPIO_Init+0x224>)
 8001772:	f043 0320 	orr.w	r3, r3, #32
 8001776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800177a:	4b70      	ldr	r3, [pc, #448]	@ (800193c <MX_GPIO_Init+0x224>)
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001788:	4b6c      	ldr	r3, [pc, #432]	@ (800193c <MX_GPIO_Init+0x224>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178e:	4a6b      	ldr	r2, [pc, #428]	@ (800193c <MX_GPIO_Init+0x224>)
 8001790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001794:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001798:	4b68      	ldr	r3, [pc, #416]	@ (800193c <MX_GPIO_Init+0x224>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	4b65      	ldr	r3, [pc, #404]	@ (800193c <MX_GPIO_Init+0x224>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ac:	4a63      	ldr	r2, [pc, #396]	@ (800193c <MX_GPIO_Init+0x224>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b6:	4b61      	ldr	r3, [pc, #388]	@ (800193c <MX_GPIO_Init+0x224>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b5d      	ldr	r3, [pc, #372]	@ (800193c <MX_GPIO_Init+0x224>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ca:	4a5c      	ldr	r2, [pc, #368]	@ (800193c <MX_GPIO_Init+0x224>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d4:	4b59      	ldr	r3, [pc, #356]	@ (800193c <MX_GPIO_Init+0x224>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b56      	ldr	r3, [pc, #344]	@ (800193c <MX_GPIO_Init+0x224>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e8:	4a54      	ldr	r2, [pc, #336]	@ (800193c <MX_GPIO_Init+0x224>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f2:	4b52      	ldr	r3, [pc, #328]	@ (800193c <MX_GPIO_Init+0x224>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001800:	4b4e      	ldr	r3, [pc, #312]	@ (800193c <MX_GPIO_Init+0x224>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001806:	4a4d      	ldr	r2, [pc, #308]	@ (800193c <MX_GPIO_Init+0x224>)
 8001808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001810:	4b4a      	ldr	r3, [pc, #296]	@ (800193c <MX_GPIO_Init+0x224>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	4b47      	ldr	r3, [pc, #284]	@ (800193c <MX_GPIO_Init+0x224>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001824:	4a45      	ldr	r2, [pc, #276]	@ (800193c <MX_GPIO_Init+0x224>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182e:	4b43      	ldr	r3, [pc, #268]	@ (800193c <MX_GPIO_Init+0x224>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_GPIO_Port, DISP_Pin, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001842:	483f      	ldr	r0, [pc, #252]	@ (8001940 <MX_GPIO_Init+0x228>)
 8001844:	f002 f9a8 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2140      	movs	r1, #64	@ 0x40
 800184c:	483d      	ldr	r0, [pc, #244]	@ (8001944 <MX_GPIO_Init+0x22c>)
 800184e:	f002 f9a3 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2110      	movs	r1, #16
 8001856:	483c      	ldr	r0, [pc, #240]	@ (8001948 <MX_GPIO_Init+0x230>)
 8001858:	f002 f99e 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	21c0      	movs	r1, #192	@ 0xc0
 8001860:	483a      	ldr	r0, [pc, #232]	@ (800194c <MX_GPIO_Init+0x234>)
 8001862:	f002 f999 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISP_Pin */
  GPIO_InitStruct.Pin = DISP_Pin;
 8001866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DISP_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	4830      	ldr	r0, [pc, #192]	@ (8001940 <MX_GPIO_Init+0x228>)
 8001880:	f001 ffc2 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_RST_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin;
 8001884:	2340      	movs	r3, #64	@ 0x40
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TP_RST_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	482a      	ldr	r0, [pc, #168]	@ (8001944 <MX_GPIO_Init+0x22c>)
 800189c:	f001 ffb4 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_SCL_Pin */
  GPIO_InitStruct.Pin = TP_SCL_Pin;
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_SCL_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	4824      	ldr	r0, [pc, #144]	@ (8001944 <MX_GPIO_Init+0x22c>)
 80018b4:	f001 ffa8 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_SDA_Pin */
  GPIO_InitStruct.Pin = TP_SDA_Pin;
 80018b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_SDA_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	481d      	ldr	r0, [pc, #116]	@ (8001944 <MX_GPIO_Init+0x22c>)
 80018ce:	f001 ff9b 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 80018d2:	2310      	movs	r3, #16
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4817      	ldr	r0, [pc, #92]	@ (8001948 <MX_GPIO_Init+0x230>)
 80018ea:	f001 ff8d 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80018ee:	2380      	movs	r3, #128	@ 0x80
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4813      	ldr	r0, [pc, #76]	@ (8001950 <MX_GPIO_Init+0x238>)
 8001904:	f001 ff80 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001908:	23c0      	movs	r3, #192	@ 0xc0
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191c:	4619      	mov	r1, r3
 800191e:	480b      	ldr	r0, [pc, #44]	@ (800194c <MX_GPIO_Init+0x234>)
 8001920:	f001 ff72 	bl	8003808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2105      	movs	r1, #5
 8001928:	2017      	movs	r0, #23
 800192a:	f001 fa77 	bl	8002e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800192e:	2017      	movs	r0, #23
 8001930:	f001 fa8e 	bl	8002e50 <HAL_NVIC_EnableIRQ>

}
 8001934:	bf00      	nop
 8001936:	3738      	adds	r7, #56	@ 0x38
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58024400 	.word	0x58024400
 8001940:	58022000 	.word	0x58022000
 8001944:	58021400 	.word	0x58021400
 8001948:	58021c00 	.word	0x58021c00
 800194c:	58020400 	.word	0x58020400
 8001950:	58020c00 	.word	0x58020c00

08001954 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001958:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <MX_I2C4_Init+0x78>)
 800195a:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <MX_I2C4_Init+0x7c>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00000E14;
 800195e:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001960:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001964:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001966:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <MX_I2C4_Init+0x78>)
 800196e:	2201      	movs	r2, #1
 8001970:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001972:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <MX_I2C4_Init+0x78>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800197e:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <MX_I2C4_Init+0x78>)
 800198c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001992:	480e      	ldr	r0, [pc, #56]	@ (80019cc <MX_I2C4_Init+0x78>)
 8001994:	f002 f93e 	bl	8003c14 <HAL_I2C_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_I2C4_Init+0x4e>
  {
    Error_Handler();
 800199e:	f000 fbe3 	bl	8002168 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019a2:	2100      	movs	r1, #0
 80019a4:	4809      	ldr	r0, [pc, #36]	@ (80019cc <MX_I2C4_Init+0x78>)
 80019a6:	f002 f9d1 	bl	8003d4c <HAL_I2CEx_ConfigAnalogFilter>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_I2C4_Init+0x60>
  {
    Error_Handler();
 80019b0:	f000 fbda 	bl	8002168 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80019b4:	2100      	movs	r1, #0
 80019b6:	4805      	ldr	r0, [pc, #20]	@ (80019cc <MX_I2C4_Init+0x78>)
 80019b8:	f002 fa13 	bl	8003de2 <HAL_I2CEx_ConfigDigitalFilter>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_I2C4_Init+0x72>
  {
    Error_Handler();
 80019c2:	f000 fbd1 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	240003fc 	.word	0x240003fc
 80019d0:	58001c00 	.word	0x58001c00

080019d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b0ba      	sub	sp, #232	@ 0xe8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	22c0      	movs	r2, #192	@ 0xc0
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f027 fe80 	bl	80296fa <memset>
  if(i2cHandle->Instance==I2C4)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a27      	ldr	r2, [pc, #156]	@ (8001a9c <HAL_I2C_MspInit+0xc8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d147      	bne.n	8001a94 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001a04:	f04f 0210 	mov.w	r2, #16
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_CSI;
 8001a10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fdcf 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001a28:	f000 fb9e 	bl	8002168 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a32:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = TP_SCLD12_Pin|TP_SDAD13_Pin;
 8001a4a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a52:	2312      	movs	r3, #18
 8001a54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001a64:	2304      	movs	r3, #4
 8001a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	@ (8001aa4 <HAL_I2C_MspInit+0xd0>)
 8001a72:	f001 fec9 	bl	8003808 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001a76:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a7c:	4a08      	ldr	r2, [pc, #32]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_I2C_MspInit+0xcc>)
 8001a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001a94:	bf00      	nop
 8001a96:	37e8      	adds	r7, #232	@ 0xe8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58001c00 	.word	0x58001c00
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	58020c00 	.word	0x58020c00

08001aa8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	@ 0x38
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2234      	movs	r2, #52	@ 0x34
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f027 fe20 	bl	80296fa <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001aba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001abc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ba8 <MX_LTDC_Init+0x100>)
 8001abe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ac0:	4b38      	ldr	r3, [pc, #224]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001ac6:	4b37      	ldr	r3, [pc, #220]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001acc:	4b35      	ldr	r3, [pc, #212]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ad2:	4b34      	ldr	r3, [pc, #208]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 29;
 8001ad8:	4b32      	ldr	r3, [pc, #200]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ada:	221d      	movs	r2, #29
 8001adc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001ade:	4b31      	ldr	r3, [pc, #196]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ae0:	2209      	movs	r2, #9
 8001ae2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 75;
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001ae6:	224b      	movs	r2, #75	@ 0x4b
 8001ae8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 32;
 8001aea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001aec:	2220      	movs	r2, #32
 8001aee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 875;
 8001af0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001af2:	f240 326b 	movw	r2, #875	@ 0x36b
 8001af6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8001af8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001afe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 881;
 8001b00:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b02:	f240 3271 	movw	r2, #881	@ 0x371
 8001b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 534;
 8001b08:	4b26      	ldr	r3, [pc, #152]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b0a:	f240 2216 	movw	r2, #534	@ 0x216
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b10:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b18:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b20:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b28:	481e      	ldr	r0, [pc, #120]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b2a:	f002 f9a6 	bl	8003e7a <HAL_LTDC_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001b34:	f000 fb18 	bl	8002168 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001b3c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001b40:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001b46:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b4a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0xff;
 8001b50:	23ff      	movs	r3, #255	@ 0xff
 8001b52:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b5c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001b62:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 800;
 8001b68:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001b6e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b72:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <MX_LTDC_Init+0xfc>)
 8001b8e:	f002 fac9 	bl	8004124 <HAL_LTDC_ConfigLayer>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001b98:	f000 fae6 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3738      	adds	r7, #56	@ 0x38
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	24000450 	.word	0x24000450
 8001ba8:	50001000 	.word	0x50001000

08001bac <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0c2      	sub	sp, #264	@ 0x108
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bba:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bd0:	22c0      	movs	r2, #192	@ 0xc0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f027 fd90 	bl	80296fa <memset>
  if(ltdcHandle->Instance==LTDC)
 8001bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4ad2      	ldr	r2, [pc, #840]	@ (8001f30 <HAL_LTDC_MspInit+0x384>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	f040 819c 	bne.w	8001f26 <HAL_LTDC_MspInit+0x37a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bee:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3N = 96;
 8001bfe:	2360      	movs	r3, #96	@ 0x60
 8001c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001c06:	2304      	movs	r3, #4
 8001c08:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3R = 9;
 8001c0a:	2309      	movs	r3, #9
 8001c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fccd 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_LTDC_MspInit+0x84>
    {
      Error_Handler();
 8001c2c:	f000 fa9c 	bl	8002168 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c30:	4bc0      	ldr	r3, [pc, #768]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c36:	4abf      	ldr	r2, [pc, #764]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001c40:	4bbc      	ldr	r3, [pc, #752]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4e:	4bb9      	ldr	r3, [pc, #740]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c54:	4ab7      	ldr	r2, [pc, #732]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c5e:	4bb5      	ldr	r3, [pc, #724]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c6c:	4bb1      	ldr	r3, [pc, #708]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c72:	4ab0      	ldr	r2, [pc, #704]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c7c:	4bad      	ldr	r3, [pc, #692]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8a:	4baa      	ldr	r3, [pc, #680]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c90:	4aa8      	ldr	r2, [pc, #672]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c92:	f043 0320 	orr.w	r3, r3, #32
 8001c96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c9a:	4ba6      	ldr	r3, [pc, #664]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca8:	4ba2      	ldr	r3, [pc, #648]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cae:	4aa1      	ldr	r2, [pc, #644]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cb8:	4b9e      	ldr	r3, [pc, #632]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc6:	4b9b      	ldr	r3, [pc, #620]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ccc:	4a99      	ldr	r2, [pc, #612]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cd6:	4b97      	ldr	r3, [pc, #604]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b93      	ldr	r3, [pc, #588]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cea:	4a92      	ldr	r2, [pc, #584]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cf4:	4b8f      	ldr	r3, [pc, #572]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d02:	4b8c      	ldr	r3, [pc, #560]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d08:	4a8a      	ldr	r2, [pc, #552]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d12:	4b88      	ldr	r3, [pc, #544]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d20:	4b84      	ldr	r3, [pc, #528]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d26:	4a83      	ldr	r2, [pc, #524]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d28:	f043 0308 	orr.w	r3, r3, #8
 8001d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d30:	4b80      	ldr	r3, [pc, #512]	@ (8001f34 <HAL_LTDC_MspInit+0x388>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001d3e:	2370      	movs	r3, #112	@ 0x70
 8001d40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d56:	230e      	movs	r3, #14
 8001d58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4875      	ldr	r0, [pc, #468]	@ (8001f38 <HAL_LTDC_MspInit+0x38c>)
 8001d64:	f001 fd50 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d68:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d82:	230e      	movs	r3, #14
 8001d84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d88:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	486b      	ldr	r0, [pc, #428]	@ (8001f3c <HAL_LTDC_MspInit+0x390>)
 8001d90:	f001 fd3a 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dae:	230e      	movs	r3, #14
 8001db0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4861      	ldr	r0, [pc, #388]	@ (8001f40 <HAL_LTDC_MspInit+0x394>)
 8001dbc:	f001 fd24 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dd8:	230e      	movs	r3, #14
 8001dda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dde:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001de2:	4619      	mov	r1, r3
 8001de4:	4857      	ldr	r0, [pc, #348]	@ (8001f44 <HAL_LTDC_MspInit+0x398>)
 8001de6:	f001 fd0f 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8001dea:	f24a 730c 	movw	r3, #42764	@ 0xa70c
 8001dee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e04:	230e      	movs	r3, #14
 8001e06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e0a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	484d      	ldr	r0, [pc, #308]	@ (8001f48 <HAL_LTDC_MspInit+0x39c>)
 8001e12:	f001 fcf9 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e16:	2302      	movs	r3, #2
 8001e18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e2e:	2309      	movs	r3, #9
 8001e30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4844      	ldr	r0, [pc, #272]	@ (8001f4c <HAL_LTDC_MspInit+0x3a0>)
 8001e3c:	f001 fce4 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 8001e40:	f44f 53c2 	mov.w	r3, #6208	@ 0x1840
 8001e44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e5a:	230e      	movs	r3, #14
 8001e5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e60:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e64:	4619      	mov	r1, r3
 8001e66:	483a      	ldr	r0, [pc, #232]	@ (8001f50 <HAL_LTDC_MspInit+0x3a4>)
 8001e68:	f001 fcce 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e84:	230e      	movs	r3, #14
 8001e86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e8a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	482f      	ldr	r0, [pc, #188]	@ (8001f50 <HAL_LTDC_MspInit+0x3a4>)
 8001e92:	f001 fcb9 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001e96:	23f7      	movs	r3, #247	@ 0xf7
 8001e98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eae:	230e      	movs	r3, #14
 8001eb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001eb4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4820      	ldr	r0, [pc, #128]	@ (8001f3c <HAL_LTDC_MspInit+0x390>)
 8001ebc:	f001 fca4 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ec0:	2340      	movs	r3, #64	@ 0x40
 8001ec2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ed8:	230e      	movs	r3, #14
 8001eda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ede:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	481b      	ldr	r0, [pc, #108]	@ (8001f54 <HAL_LTDC_MspInit+0x3a8>)
 8001ee6:	f001 fc8f 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f04:	2309      	movs	r3, #9
 8001f06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f0a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480f      	ldr	r0, [pc, #60]	@ (8001f50 <HAL_LTDC_MspInit+0x3a4>)
 8001f12:	f001 fc79 	bl	8003808 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2105      	movs	r1, #5
 8001f1a:	2058      	movs	r0, #88	@ 0x58
 8001f1c:	f000 ff7e 	bl	8002e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f20:	2058      	movs	r0, #88	@ 0x58
 8001f22:	f000 ff95 	bl	8002e50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001f26:	bf00      	nop
 8001f28:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	50001000 	.word	0x50001000
 8001f34:	58024400 	.word	0x58024400
 8001f38:	58021000 	.word	0x58021000
 8001f3c:	58022000 	.word	0x58022000
 8001f40:	58021400 	.word	0x58021400
 8001f44:	58020800 	.word	0x58020800
 8001f48:	58021c00 	.word	0x58021c00
 8001f4c:	58020400 	.word	0x58020400
 8001f50:	58021800 	.word	0x58021800
 8001f54:	58020c00 	.word	0x58020c00

08001f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f5c:	f000 fe1a 	bl	8002b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f60:	f000 f870 	bl	8002044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f64:	f7ff fbd8 	bl	8001718 <MX_GPIO_Init>
  MX_FMC_Init();
 8001f68:	f7ff fa88 	bl	800147c <MX_FMC_Init>
  MX_USART1_UART_Init();
 8001f6c:	f000 fbda 	bl	8002724 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8001f70:	f7ff fd9a 	bl	8001aa8 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001f74:	f7ff fa20 	bl	80013b8 <MX_DMA2D_Init>
  MX_TIM2_Init();
 8001f78:	f000 fb22 	bl	80025c0 <MX_TIM2_Init>
  MX_CRC_Init();
 8001f7c:	f7ff f9d8 	bl	8001330 <MX_CRC_Init>
  MX_I2C4_Init();
 8001f80:	f7ff fce8 	bl	8001954 <MX_I2C4_Init>
  MX_TouchGFX_Init();
 8001f84:	f00a ffcf 	bl	800cf26 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8001f88:	f00a ffc6 	bl	800cf18 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f8c:	f007 fb94 	bl	80096b8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001f90:	f7ff fb8a 	bl	80016a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f94:	f007 fbb4 	bl	8009700 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	BSP_LCD_Init();
 8001f98:	f7fe fd44 	bl	8000a24 <BSP_LCD_Init>
	GT811_Init();
 8001f9c:	f7fe febc 	bl	8000d18 <GT811_Init>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7fe fdc7 	bl	8000b34 <BSP_LCD_Clear>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2140      	movs	r1, #64	@ 0x40
 8001faa:	4824      	ldr	r0, [pc, #144]	@ (800203c <main+0xe4>)
 8001fac:	f001 fdf4 	bl	8003b98 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001fb0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fb4:	f000 fe4a 	bl	8002c4c <HAL_Delay>
		BSP_LCD_Clear(0xf000);
 8001fb8:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8001fbc:	f7fe fdba 	bl	8000b34 <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2180      	movs	r1, #128	@ 0x80
 8001fc4:	481d      	ldr	r0, [pc, #116]	@ (800203c <main+0xe4>)
 8001fc6:	f001 fde7 	bl	8003b98 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001fca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fce:	f000 fe3d 	bl	8002c4c <HAL_Delay>
		BSP_LCD_Clear(0x0f00);
 8001fd2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001fd6:	f7fe fdad 	bl	8000b34 <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	2110      	movs	r1, #16
 8001fde:	4818      	ldr	r0, [pc, #96]	@ (8002040 <main+0xe8>)
 8001fe0:	f001 fdda 	bl	8003b98 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001fe4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fe8:	f000 fe30 	bl	8002c4c <HAL_Delay>
		BSP_LCD_Clear(0x00f0);
 8001fec:	20f0      	movs	r0, #240	@ 0xf0
 8001fee:	f7fe fda1 	bl	8000b34 <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2140      	movs	r1, #64	@ 0x40
 8001ff6:	4811      	ldr	r0, [pc, #68]	@ (800203c <main+0xe4>)
 8001ff8:	f001 fdce 	bl	8003b98 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001ffc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002000:	f000 fe24 	bl	8002c4c <HAL_Delay>
		BSP_LCD_Clear(0x000f);
 8002004:	200f      	movs	r0, #15
 8002006:	f7fe fd95 	bl	8000b34 <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	2180      	movs	r1, #128	@ 0x80
 800200e:	480b      	ldr	r0, [pc, #44]	@ (800203c <main+0xe4>)
 8002010:	f001 fdc2 	bl	8003b98 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8002014:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002018:	f000 fe18 	bl	8002c4c <HAL_Delay>
		BSP_LCD_Clear(0xf00f);
 800201c:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8002020:	f7fe fd88 	bl	8000b34 <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	2110      	movs	r1, #16
 8002028:	4805      	ldr	r0, [pc, #20]	@ (8002040 <main+0xe8>)
 800202a:	f001 fdb5 	bl	8003b98 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800202e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002032:	f000 fe0b 	bl	8002c4c <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002036:	bf00      	nop
 8002038:	e7b5      	b.n	8001fa6 <main+0x4e>
 800203a:	bf00      	nop
 800203c:	58020400 	.word	0x58020400
 8002040:	58021c00 	.word	0x58021c00

08002044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b09c      	sub	sp, #112	@ 0x70
 8002048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204e:	224c      	movs	r2, #76	@ 0x4c
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f027 fb51 	bl	80296fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2220      	movs	r2, #32
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f027 fb4b 	bl	80296fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002064:	2002      	movs	r0, #2
 8002066:	f002 fa49 	bl	80044fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800206a:	2300      	movs	r3, #0
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	4b33      	ldr	r3, [pc, #204]	@ (800213c <SystemClock_Config+0xf8>)
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	4a32      	ldr	r2, [pc, #200]	@ (800213c <SystemClock_Config+0xf8>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800207a:	4b30      	ldr	r3, [pc, #192]	@ (800213c <SystemClock_Config+0xf8>)
 800207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <SystemClock_Config+0xfc>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a2d      	ldr	r2, [pc, #180]	@ (8002140 <SystemClock_Config+0xfc>)
 800208a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b2b      	ldr	r3, [pc, #172]	@ (8002140 <SystemClock_Config+0xfc>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800209c:	bf00      	nop
 800209e:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <SystemClock_Config+0xfc>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020aa:	d1f8      	bne.n	800209e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 80020ac:	2311      	movs	r3, #17
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80020b6:	2380      	movs	r3, #128	@ 0x80
 80020b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80020ba:	2320      	movs	r3, #32
 80020bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020be:	2302      	movs	r3, #2
 80020c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020c2:	2302      	movs	r3, #2
 80020c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020c6:	2304      	movs	r3, #4
 80020c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 80020ca:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80020ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80020d0:	2302      	movs	r3, #2
 80020d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020d8:	2302      	movs	r3, #2
 80020da:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80020dc:	2304      	movs	r3, #4
 80020de:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fa3f 	bl	8004570 <HAL_RCC_OscConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80020f8:	f000 f836 	bl	8002168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020fc:	233f      	movs	r3, #63	@ 0x3f
 80020fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002100:	2303      	movs	r3, #3
 8002102:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002108:	2308      	movs	r3, #8
 800210a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800210c:	2340      	movs	r3, #64	@ 0x40
 800210e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8002110:	2350      	movs	r3, #80	@ 0x50
 8002112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002114:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002118:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800211a:	2340      	movs	r3, #64	@ 0x40
 800211c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	2102      	movs	r1, #2
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fe7e 	bl	8004e24 <HAL_RCC_ClockConfig>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800212e:	f000 f81b 	bl	8002168 <Error_Handler>
  }
}
 8002132:	bf00      	nop
 8002134:	3770      	adds	r7, #112	@ 0x70
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	58000400 	.word	0x58000400
 8002140:	58024800 	.word	0x58024800

08002144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002156:	f000 fd59 	bl	8002c0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40010000 	.word	0x40010000

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	2140      	movs	r1, #64	@ 0x40
 8002174:	4807      	ldr	r0, [pc, #28]	@ (8002194 <Error_Handler+0x2c>)
 8002176:	f001 fd0f 	bl	8003b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	2180      	movs	r1, #128	@ 0x80
 800217e:	4805      	ldr	r0, [pc, #20]	@ (8002194 <Error_Handler+0x2c>)
 8002180:	f001 fd0a 	bl	8003b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8002184:	2201      	movs	r2, #1
 8002186:	2110      	movs	r1, #16
 8002188:	4803      	ldr	r0, [pc, #12]	@ (8002198 <Error_Handler+0x30>)
 800218a:	f001 fd05 	bl	8003b98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800218e:	bf00      	nop
 8002190:	e7ee      	b.n	8002170 <Error_Handler+0x8>
 8002192:	bf00      	nop
 8002194:	58020400 	.word	0x58020400
 8002198:	58021c00 	.word	0x58021c00

0800219c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <HAL_MspInit+0x38>)
 80021a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021a8:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <HAL_MspInit+0x38>)
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <HAL_MspInit+0x38>)
 80021b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	210f      	movs	r1, #15
 80021c4:	f06f 0001 	mvn.w	r0, #1
 80021c8:	f000 fe28 	bl	8002e1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	58024400 	.word	0x58024400

080021d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08e      	sub	sp, #56	@ 0x38
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	d844      	bhi.n	8002270 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	2019      	movs	r0, #25
 80021ec:	f000 fe16 	bl	8002e1c <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021f0:	2019      	movs	r0, #25
 80021f2:	f000 fe2d 	bl	8002e50 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80021f6:	4a24      	ldr	r2, [pc, #144]	@ (8002288 <HAL_InitTick+0xb0>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021fc:	4b23      	ldr	r3, [pc, #140]	@ (800228c <HAL_InitTick+0xb4>)
 80021fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002202:	4a22      	ldr	r2, [pc, #136]	@ (800228c <HAL_InitTick+0xb4>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <HAL_InitTick+0xb4>)
 800220e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800221a:	f107 020c 	add.w	r2, r7, #12
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f003 f989 	bl	800553c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800222a:	f003 f971 	bl	8005510 <HAL_RCC_GetPCLK2Freq>
 800222e:	4603      	mov	r3, r0
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002236:	4a16      	ldr	r2, [pc, #88]	@ (8002290 <HAL_InitTick+0xb8>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	0c9b      	lsrs	r3, r3, #18
 800223e:	3b01      	subs	r3, #1
 8002240:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002242:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <HAL_InitTick+0xbc>)
 8002244:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <HAL_InitTick+0xc0>)
 8002246:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002248:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_InitTick+0xbc>)
 800224a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800224e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002250:	4a10      	ldr	r2, [pc, #64]	@ (8002294 <HAL_InitTick+0xbc>)
 8002252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002254:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <HAL_InitTick+0xbc>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <HAL_InitTick+0xbc>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002262:	480c      	ldr	r0, [pc, #48]	@ (8002294 <HAL_InitTick+0xbc>)
 8002264:	f005 f871 	bl	800734a <HAL_TIM_Base_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d107      	bne.n	800227e <HAL_InitTick+0xa6>
 800226e:	e001      	b.n	8002274 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e005      	b.n	8002280 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002274:	4807      	ldr	r0, [pc, #28]	@ (8002294 <HAL_InitTick+0xbc>)
 8002276:	f005 f8c9 	bl	800740c <HAL_TIM_Base_Start_IT>
 800227a:	4603      	mov	r3, r0
 800227c:	e000      	b.n	8002280 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	3738      	adds	r7, #56	@ 0x38
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2400000c 	.word	0x2400000c
 800228c:	58024400 	.word	0x58024400
 8002290:	431bde83 	.word	0x431bde83
 8002294:	240004f8 	.word	0x240004f8
 8002298:	40010000 	.word	0x40010000

0800229c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <NMI_Handler+0x4>

080022a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <MemManage_Handler+0x4>

080022b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_INT_Pin);
 80022d6:	2080      	movs	r0, #128	@ 0x80
 80022d8:	f001 fc77 	bl	8003bca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <TIM1_UP_IRQHandler+0x10>)
 80022e6:	f005 f960 	bl	80075aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	240004f8 	.word	0x240004f8

080022f4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <LTDC_IRQHandler+0x10>)
 80022fa:	f001 fe5b 	bl	8003fb4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	24000450 	.word	0x24000450

08002308 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <DMA2D_IRQHandler+0x10>)
 800230e:	f001 f817 	bl	8003340 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	24000354 	.word	0x24000354

0800231c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
	return 1;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_kill>:

int _kill(int pid, int sig)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002336:	f027 fae1 	bl	80298fc <__errno>
 800233a:	4603      	mov	r3, r0
 800233c:	2216      	movs	r2, #22
 800233e:	601a      	str	r2, [r3, #0]
	return -1;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_exit>:

void _exit (int status)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002354:	f04f 31ff 	mov.w	r1, #4294967295
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ffe7 	bl	800232c <_kill>
	while (1) {}		/* Make sure we hang here */
 800235e:	bf00      	nop
 8002360:	e7fd      	b.n	800235e <_exit+0x12>

08002362 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e00a      	b.n	800238a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002374:	f3af 8000 	nop.w
 8002378:	4601      	mov	r1, r0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	60ba      	str	r2, [r7, #8]
 8002380:	b2ca      	uxtb	r2, r1
 8002382:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	429a      	cmp	r2, r3
 8002390:	dbf0      	blt.n	8002374 <_read+0x12>
	}

return len;
 8002392:	687b      	ldr	r3, [r7, #4]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	e009      	b.n	80023c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	60ba      	str	r2, [r7, #8]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dbf1      	blt.n	80023ae <_write+0x12>
	}
	return len;
 80023ca:	687b      	ldr	r3, [r7, #4]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_close>:

int _close(int file)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	return -1;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023fc:	605a      	str	r2, [r3, #4]
	return 0;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_isatty>:

int _isatty(int file)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	return 1;
 8002414:	2301      	movs	r3, #1
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002422:	b480      	push	{r7}
 8002424:	b085      	sub	sp, #20
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
	return 0;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002444:	4a14      	ldr	r2, [pc, #80]	@ (8002498 <_sbrk+0x5c>)
 8002446:	4b15      	ldr	r3, [pc, #84]	@ (800249c <_sbrk+0x60>)
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002450:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002458:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <_sbrk+0x64>)
 800245a:	4a12      	ldr	r2, [pc, #72]	@ (80024a4 <_sbrk+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d207      	bcs.n	800247c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800246c:	f027 fa46 	bl	80298fc <__errno>
 8002470:	4603      	mov	r3, r0
 8002472:	220c      	movs	r2, #12
 8002474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	e009      	b.n	8002490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002482:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	4a05      	ldr	r2, [pc, #20]	@ (80024a0 <_sbrk+0x64>)
 800248c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	24080000 	.word	0x24080000
 800249c:	00000400 	.word	0x00000400
 80024a0:	24000544 	.word	0x24000544
 80024a4:	24007338 	.word	0x24007338

080024a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024ac:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <SystemInit+0xec>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	4a38      	ldr	r2, [pc, #224]	@ (8002594 <SystemInit+0xec>)
 80024b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024bc:	4b36      	ldr	r3, [pc, #216]	@ (8002598 <SystemInit+0xf0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d807      	bhi.n	80024d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024c8:	4b33      	ldr	r3, [pc, #204]	@ (8002598 <SystemInit+0xf0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 030f 	bic.w	r3, r3, #15
 80024d0:	4a31      	ldr	r2, [pc, #196]	@ (8002598 <SystemInit+0xf0>)
 80024d2:	f043 0307 	orr.w	r3, r3, #7
 80024d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024d8:	4b30      	ldr	r3, [pc, #192]	@ (800259c <SystemInit+0xf4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <SystemInit+0xf4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <SystemInit+0xf4>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024ea:	4b2c      	ldr	r3, [pc, #176]	@ (800259c <SystemInit+0xf4>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	492b      	ldr	r1, [pc, #172]	@ (800259c <SystemInit+0xf4>)
 80024f0:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <SystemInit+0xf8>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024f6:	4b28      	ldr	r3, [pc, #160]	@ (8002598 <SystemInit+0xf0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002502:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <SystemInit+0xf0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 030f 	bic.w	r3, r3, #15
 800250a:	4a23      	ldr	r2, [pc, #140]	@ (8002598 <SystemInit+0xf0>)
 800250c:	f043 0307 	orr.w	r3, r3, #7
 8002510:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002512:	4b22      	ldr	r3, [pc, #136]	@ (800259c <SystemInit+0xf4>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002518:	4b20      	ldr	r3, [pc, #128]	@ (800259c <SystemInit+0xf4>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800251e:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <SystemInit+0xf4>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002524:	4b1d      	ldr	r3, [pc, #116]	@ (800259c <SystemInit+0xf4>)
 8002526:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <SystemInit+0xfc>)
 8002528:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800252a:	4b1c      	ldr	r3, [pc, #112]	@ (800259c <SystemInit+0xf4>)
 800252c:	4a1e      	ldr	r2, [pc, #120]	@ (80025a8 <SystemInit+0x100>)
 800252e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002530:	4b1a      	ldr	r3, [pc, #104]	@ (800259c <SystemInit+0xf4>)
 8002532:	4a1e      	ldr	r2, [pc, #120]	@ (80025ac <SystemInit+0x104>)
 8002534:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002536:	4b19      	ldr	r3, [pc, #100]	@ (800259c <SystemInit+0xf4>)
 8002538:	2200      	movs	r2, #0
 800253a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800253c:	4b17      	ldr	r3, [pc, #92]	@ (800259c <SystemInit+0xf4>)
 800253e:	4a1b      	ldr	r2, [pc, #108]	@ (80025ac <SystemInit+0x104>)
 8002540:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002542:	4b16      	ldr	r3, [pc, #88]	@ (800259c <SystemInit+0xf4>)
 8002544:	2200      	movs	r2, #0
 8002546:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <SystemInit+0xf4>)
 800254a:	4a18      	ldr	r2, [pc, #96]	@ (80025ac <SystemInit+0x104>)
 800254c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800254e:	4b13      	ldr	r3, [pc, #76]	@ (800259c <SystemInit+0xf4>)
 8002550:	2200      	movs	r2, #0
 8002552:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002554:	4b11      	ldr	r3, [pc, #68]	@ (800259c <SystemInit+0xf4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a10      	ldr	r2, [pc, #64]	@ (800259c <SystemInit+0xf4>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002560:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <SystemInit+0xf4>)
 8002562:	2200      	movs	r2, #0
 8002564:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002566:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <SystemInit+0x108>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <SystemInit+0x10c>)
 800256c:	4013      	ands	r3, r2
 800256e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002572:	d202      	bcs.n	800257a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002574:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <SystemInit+0x110>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <SystemInit+0x114>)
 800257c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002580:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002582:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <SystemInit+0xec>)
 8002584:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002588:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	52002000 	.word	0x52002000
 800259c:	58024400 	.word	0x58024400
 80025a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80025a4:	02020200 	.word	0x02020200
 80025a8:	01ff0000 	.word	0x01ff0000
 80025ac:	01010280 	.word	0x01010280
 80025b0:	5c001000 	.word	0x5c001000
 80025b4:	ffff0000 	.word	0xffff0000
 80025b8:	51008108 	.word	0x51008108
 80025bc:	52004000 	.word	0x52004000

080025c0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	@ 0x28
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c6:	f107 031c 	add.w	r3, r7, #28
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025d2:	463b      	mov	r3, r7
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
 80025e0:	615a      	str	r2, [r3, #20]
 80025e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025e4:	4b22      	ldr	r3, [pc, #136]	@ (8002670 <MX_TIM2_Init+0xb0>)
 80025e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80025ec:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <MX_TIM2_Init+0xb0>)
 80025ee:	2263      	movs	r2, #99	@ 0x63
 80025f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002670 <MX_TIM2_Init+0xb0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80025f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <MX_TIM2_Init+0xb0>)
 80025fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002600:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <MX_TIM2_Init+0xb0>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002606:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <MX_TIM2_Init+0xb0>)
 8002608:	2280      	movs	r2, #128	@ 0x80
 800260a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800260c:	4818      	ldr	r0, [pc, #96]	@ (8002670 <MX_TIM2_Init+0xb0>)
 800260e:	f004 ff75 	bl	80074fc <HAL_TIM_PWM_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002618:	f7ff fda6 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4619      	mov	r1, r3
 800262a:	4811      	ldr	r0, [pc, #68]	@ (8002670 <MX_TIM2_Init+0xb0>)
 800262c:	f005 fd76 	bl	800811c <HAL_TIMEx_MasterConfigSynchronization>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002636:	f7ff fd97 	bl	8002168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800263a:	2360      	movs	r3, #96	@ 0x60
 800263c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800263e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002642:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800264c:	463b      	mov	r3, r7
 800264e:	220c      	movs	r2, #12
 8002650:	4619      	mov	r1, r3
 8002652:	4807      	ldr	r0, [pc, #28]	@ (8002670 <MX_TIM2_Init+0xb0>)
 8002654:	f005 f8b0 	bl	80077b8 <HAL_TIM_PWM_ConfigChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800265e:	f7ff fd83 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002662:	4803      	ldr	r0, [pc, #12]	@ (8002670 <MX_TIM2_Init+0xb0>)
 8002664:	f000 f826 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8002668:	bf00      	nop
 800266a:	3728      	adds	r7, #40	@ 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	24000548 	.word	0x24000548

08002674 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002686:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800268c:	4a08      	ldr	r2, [pc, #32]	@ (80026b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002696:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	58024400 	.word	0x58024400

080026b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d4:	d11e      	bne.n	8002714 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_TIM_MspPostInit+0x68>)
 80026d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026dc:	4a0f      	ldr	r2, [pc, #60]	@ (800271c <HAL_TIM_MspPostInit+0x68>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026e6:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <HAL_TIM_MspPostInit+0x68>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026f4:	2308      	movs	r3, #8
 80026f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002704:	2301      	movs	r3, #1
 8002706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	4619      	mov	r1, r3
 800270e:	4804      	ldr	r0, [pc, #16]	@ (8002720 <HAL_TIM_MspPostInit+0x6c>)
 8002710:	f001 f87a 	bl	8003808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002714:	bf00      	nop
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	58024400 	.word	0x58024400
 8002720:	58020000 	.word	0x58020000

08002724 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002728:	4b22      	ldr	r3, [pc, #136]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 800272a:	4a23      	ldr	r2, [pc, #140]	@ (80027b8 <MX_USART1_UART_Init+0x94>)
 800272c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800272e:	4b21      	ldr	r3, [pc, #132]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 8002730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b1f      	ldr	r3, [pc, #124]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002742:	4b1c      	ldr	r3, [pc, #112]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b1a      	ldr	r3, [pc, #104]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b17      	ldr	r3, [pc, #92]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800275a:	4b16      	ldr	r3, [pc, #88]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002760:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 8002762:	2200      	movs	r2, #0
 8002764:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002766:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 8002768:	2200      	movs	r2, #0
 800276a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800276c:	4811      	ldr	r0, [pc, #68]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 800276e:	f005 fd81 	bl	8008274 <HAL_UART_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002778:	f7ff fcf6 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800277c:	2100      	movs	r1, #0
 800277e:	480d      	ldr	r0, [pc, #52]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 8002780:	f006 fd89 	bl	8009296 <HAL_UARTEx_SetTxFifoThreshold>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800278a:	f7ff fced 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800278e:	2100      	movs	r1, #0
 8002790:	4808      	ldr	r0, [pc, #32]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 8002792:	f006 fdbe 	bl	8009312 <HAL_UARTEx_SetRxFifoThreshold>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800279c:	f7ff fce4 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027a0:	4804      	ldr	r0, [pc, #16]	@ (80027b4 <MX_USART1_UART_Init+0x90>)
 80027a2:	f006 fd3f 	bl	8009224 <HAL_UARTEx_DisableFifoMode>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027ac:	f7ff fcdc 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	24000594 	.word	0x24000594
 80027b8:	40011000 	.word	0x40011000

080027bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b0ba      	sub	sp, #232	@ 0xe8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027d4:	f107 0310 	add.w	r3, r7, #16
 80027d8:	22c0      	movs	r2, #192	@ 0xc0
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f026 ff8c 	bl	80296fa <memset>
  if(uartHandle->Instance==USART1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a27      	ldr	r2, [pc, #156]	@ (8002884 <HAL_UART_MspInit+0xc8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d146      	bne.n	800287a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027ec:	f04f 0201 	mov.w	r2, #1
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fe:	f107 0310 	add.w	r3, r7, #16
 8002802:	4618      	mov	r0, r3
 8002804:	f002 fedc 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800280e:	f7ff fcab 	bl	8002168 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002812:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <HAL_UART_MspInit+0xcc>)
 8002814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002818:	4a1b      	ldr	r2, [pc, #108]	@ (8002888 <HAL_UART_MspInit+0xcc>)
 800281a:	f043 0310 	orr.w	r3, r3, #16
 800281e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002822:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <HAL_UART_MspInit+0xcc>)
 8002824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <HAL_UART_MspInit+0xcc>)
 8002832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002836:	4a14      	ldr	r2, [pc, #80]	@ (8002888 <HAL_UART_MspInit+0xcc>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_UART_MspInit+0xcc>)
 8002842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800284e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002868:	2307      	movs	r3, #7
 800286a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002872:	4619      	mov	r1, r3
 8002874:	4805      	ldr	r0, [pc, #20]	@ (800288c <HAL_UART_MspInit+0xd0>)
 8002876:	f000 ffc7 	bl	8003808 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800287a:	bf00      	nop
 800287c:	37e8      	adds	r7, #232	@ 0xe8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40011000 	.word	0x40011000
 8002888:	58024400 	.word	0x58024400
 800288c:	58020000 	.word	0x58020000

08002890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028c8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002894:	f7ff fe08 	bl	80024a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002898:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800289a:	e003      	b.n	80028a4 <LoopCopyDataInit>

0800289c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800289e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028a2:	3104      	adds	r1, #4

080028a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028a4:	480a      	ldr	r0, [pc, #40]	@ (80028d0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80028a6:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80028a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028ac:	d3f6      	bcc.n	800289c <CopyDataInit>
  ldr  r2, =_sbss
 80028ae:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80028b0:	e002      	b.n	80028b8 <LoopFillZerobss>

080028b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028b4:	f842 3b04 	str.w	r3, [r2], #4

080028b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028b8:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80028ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028bc:	d3f9      	bcc.n	80028b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028be:	f027 f823 	bl	8029908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028c2:	f7ff fb49 	bl	8001f58 <main>
  bx  lr    
 80028c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028c8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80028cc:	0802ca38 	.word	0x0802ca38
  ldr  r0, =_sdata
 80028d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80028d4:	24000100 	.word	0x24000100
  ldr  r2, =_sbss
 80028d8:	24000300 	.word	0x24000300
  ldr  r3, = _ebss
 80028dc:	24007334 	.word	0x24007334

080028e0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028e0:	e7fe      	b.n	80028e0 <ADC3_IRQHandler>

080028e2 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80028f0:	b672      	cpsid	i
}
 80028f2:	bf00      	nop
 80028f4:	f7ff fc38 	bl	8002168 <Error_Handler>
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e007      	b.n	8002912 <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	2100      	movs	r1, #0
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3301      	adds	r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d9f4      	bls.n	8002902 <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	721a      	strb	r2, [r3, #8]
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d105      	bne.n	8002940 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002934:	b672      	cpsid	i
}
 8002936:	bf00      	nop
 8002938:	f7ff fc16 	bl	8002168 <Error_Handler>
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7a1b      	ldrb	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d905      	bls.n	8002954 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002948:	b672      	cpsid	i
}
 800294a:	bf00      	nop
 800294c:	f7ff fc0c 	bl	8002168 <Error_Handler>
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7a1b      	ldrb	r3, [r3, #8]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	b2d1      	uxtb	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	7211      	strb	r1, [r2, #8]
 8002960:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002962:	f3ef 8211 	mrs	r2, BASEPRI
 8002966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800296a:	f383 8811 	msr	BASEPRI, r3
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002998:	b672      	cpsid	i
}
 800299a:	bf00      	nop
 800299c:	f7ff fbe4 	bl	8002168 <Error_Handler>
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	7a1b      	ldrb	r3, [r3, #8]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7a1b      	ldrb	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d905      	bls.n	80029c4 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 80029b8:	b672      	cpsid	i
}
 80029ba:	bf00      	nop
 80029bc:	f7ff fbd4 	bl	8002168 <Error_Handler>
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7a1b      	ldrb	r3, [r3, #8]
 80029c8:	461a      	mov	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029d8:	bf00      	nop
}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80029f0:	f026 ff84 	bl	80298fc <__errno>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2216      	movs	r2, #22
 80029f8:	601a      	str	r2, [r3, #0]
    return;
 80029fa:	e016      	b.n	8002a2a <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80029fc:	200c      	movs	r0, #12
 80029fe:	f026 fc87 	bl	8029310 <malloc>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff63 	bl	80028e2 <stm32_lock_init>
    return;
 8002a1c:	e005      	b.n	8002a2a <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a1e:	b672      	cpsid	i
}
 8002a20:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002a22:	f7ff fba1 	bl	8002168 <Error_Handler>
 8002a26:	bf00      	nop
 8002a28:	e7fd      	b.n	8002a26 <__retarget_lock_init_recursive+0x44>
}
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a3e:	b672      	cpsid	i
}
 8002a40:	bf00      	nop
 8002a42:	f7ff fb91 	bl	8002168 <Error_Handler>
 8002a46:	bf00      	nop
 8002a48:	e7fd      	b.n	8002a46 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff6a 	bl	8002926 <stm32_lock_acquire>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a68:	b672      	cpsid	i
}
 8002a6a:	bf00      	nop
 8002a6c:	f7ff fb7c 	bl	8002168 <Error_Handler>
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff87 	bl	800298a <stm32_lock_release>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <__cxa_guard_acquire>:
  * @brief Acquire __cxa_guard mutex
  * @param guard_object Guard object
  * @return 0 if object is initialized, else initialization of object required
  */
int __cxa_guard_acquire(CxaGuardObject_t *guard_object)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(guard_object);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <__cxa_guard_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a92:	b672      	cpsid	i
}
 8002a94:	bf00      	nop
 8002a96:	f7ff fb67 	bl	8002168 <Error_Handler>
 8002a9a:	bf00      	nop
 8002a9c:	e7fd      	b.n	8002a9a <__cxa_guard_acquire+0x16>

  if (atomic_load(&guard_object->initialized) == 0)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f3bf 8f5b 	dmb	ish
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f3bf 8f5b 	dmb	ish
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d121      	bne.n	8002afc <__cxa_guard_acquire+0x78>
  {
    /* Object needs initialization, lock threading context */
    stm32_lock_acquire(&__cxa_guard_mutex);
 8002ab8:	4813      	ldr	r0, [pc, #76]	@ (8002b08 <__cxa_guard_acquire+0x84>)
 8002aba:	f7ff ff34 	bl	8002926 <stm32_lock_acquire>
    if (atomic_load(&guard_object->initialized) == 0)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f3bf 8f5b 	dmb	ish
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	f3bf 8f5b 	dmb	ish
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	73bb      	strb	r3, [r7, #14]
 8002ad2:	7bbb      	ldrb	r3, [r7, #14]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10e      	bne.n	8002af6 <__cxa_guard_acquire+0x72>
    {
      /* Object needs initialization */
      if (guard_object->acquired)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <__cxa_guard_acquire+0x68>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae0:	b672      	cpsid	i
}
 8002ae2:	bf00      	nop
      {
        /* Object initialization already in progress */
        STM32_LOCK_BLOCK();
 8002ae4:	f7ff fb40 	bl	8002168 <Error_Handler>
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <__cxa_guard_acquire+0x64>
      }

      /* Lock acquired */
      guard_object->acquired = 1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	705a      	strb	r2, [r3, #1]
      return 1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e003      	b.n	8002afe <__cxa_guard_acquire+0x7a>
    }
    else
    {
      /* Object initialized in another thread */
      stm32_lock_release(&__cxa_guard_mutex);
 8002af6:	4804      	ldr	r0, [pc, #16]	@ (8002b08 <__cxa_guard_acquire+0x84>)
 8002af8:	f7ff ff47 	bl	800298a <stm32_lock_release>
    }
  }

  /* Object already initialized */
  return 0;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2400064c 	.word	0x2400064c

08002b0c <__cxa_guard_abort>:
/**
  * @brief Abort __cxa_guard mutex
  * @param guard_object Guard object
  */
void __cxa_guard_abort(CxaGuardObject_t *guard_object)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(guard_object);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <__cxa_guard_abort+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b1a:	b672      	cpsid	i
}
 8002b1c:	bf00      	nop
 8002b1e:	f7ff fb23 	bl	8002168 <Error_Handler>
 8002b22:	bf00      	nop
 8002b24:	e7fd      	b.n	8002b22 <__cxa_guard_abort+0x16>

  if (guard_object->acquired)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d006      	beq.n	8002b3c <__cxa_guard_abort+0x30>
  {
    /* Release lock */
    guard_object->acquired = 0;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	705a      	strb	r2, [r3, #1]
    stm32_lock_release(&__cxa_guard_mutex);
 8002b34:	4806      	ldr	r0, [pc, #24]	@ (8002b50 <__cxa_guard_abort+0x44>)
 8002b36:	f7ff ff28 	bl	800298a <stm32_lock_release>
  else
  {
    /* Trying to release non-acquired lock */
    STM32_LOCK_BLOCK();
  }
}
 8002b3a:	e005      	b.n	8002b48 <__cxa_guard_abort+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b3c:	b672      	cpsid	i
}
 8002b3e:	bf00      	nop
    STM32_LOCK_BLOCK();
 8002b40:	f7ff fb12 	bl	8002168 <Error_Handler>
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <__cxa_guard_abort+0x38>
}
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	2400064c 	.word	0x2400064c

08002b54 <__cxa_guard_release>:
/**
  * @brief Release __cxa_guard mutex
  * @param guard_object Guard object
  */
void __cxa_guard_release(CxaGuardObject_t *guard_object)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(guard_object);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <__cxa_guard_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b62:	b672      	cpsid	i
}
 8002b64:	bf00      	nop
 8002b66:	f7ff faff 	bl	8002168 <Error_Handler>
 8002b6a:	bf00      	nop
 8002b6c:	e7fd      	b.n	8002b6a <__cxa_guard_release+0x16>

  /* Object initialized */
  atomic_store(&guard_object->initialized, 1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	2301      	movs	r3, #1
 8002b74:	72fb      	strb	r3, [r7, #11]
 8002b76:	7afa      	ldrb	r2, [r7, #11]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f3bf 8f5b 	dmb	ish
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	f3bf 8f5b 	dmb	ish

  /* Release lock */
  __cxa_guard_abort(guard_object);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ffc1 	bl	8002b0c <__cxa_guard_abort>
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b9a:	2003      	movs	r0, #3
 8002b9c:	f000 f933 	bl	8002e06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ba0:	f002 faf6 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <HAL_Init+0x68>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	4913      	ldr	r1, [pc, #76]	@ (8002c00 <HAL_Init+0x6c>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002bfc <HAL_Init+0x68>)
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c00 <HAL_Init+0x6c>)
 8002bc8:	5cd3      	ldrb	r3, [r2, r3]
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8002c04 <HAL_Init+0x70>)
 8002bd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002c08 <HAL_Init+0x74>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bde:	200f      	movs	r0, #15
 8002be0:	f7ff fafa 	bl	80021d8 <HAL_InitTick>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e002      	b.n	8002bf4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bee:	f7ff fad5 	bl	800219c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	58024400 	.word	0x58024400
 8002c00:	0802afa4 	.word	0x0802afa4
 8002c04:	24000008 	.word	0x24000008
 8002c08:	24000004 	.word	0x24000004

08002c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_IncTick+0x20>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_IncTick+0x24>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	4a04      	ldr	r2, [pc, #16]	@ (8002c30 <HAL_IncTick+0x24>)
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	24000010 	.word	0x24000010
 8002c30:	24000658 	.word	0x24000658

08002c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return uwTick;
 8002c38:	4b03      	ldr	r3, [pc, #12]	@ (8002c48 <HAL_GetTick+0x14>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	24000658 	.word	0x24000658

08002c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c54:	f7ff ffee 	bl	8002c34 <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c64:	d005      	beq.n	8002c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c66:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <HAL_Delay+0x44>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c72:	bf00      	nop
 8002c74:	f7ff ffde 	bl	8002c34 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d8f7      	bhi.n	8002c74 <HAL_Delay+0x28>
  {
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	24000010 	.word	0x24000010

08002c94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c98:	4b03      	ldr	r3, [pc, #12]	@ (8002ca8 <HAL_GetREVID+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	5c001000 	.word	0x5c001000

08002cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <__NVIC_SetPriorityGrouping+0x40>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cd4:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cda:	4a04      	ldr	r2, [pc, #16]	@ (8002cec <__NVIC_SetPriorityGrouping+0x40>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	60d3      	str	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00
 8002cf0:	05fa0000 	.word	0x05fa0000

08002cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf8:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <__NVIC_GetPriorityGrouping+0x18>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 0307 	and.w	r3, r3, #7
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db0b      	blt.n	8002d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4907      	ldr	r1, [pc, #28]	@ (8002d48 <__NVIC_EnableIRQ+0x38>)
 8002d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2001      	movs	r0, #1
 8002d32:	fa00 f202 	lsl.w	r2, r0, r2
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	@ (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	@ (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	@ 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	@ 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ff4c 	bl	8002cac <__NVIC_SetPriorityGrouping>
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2a:	f7ff ff63 	bl	8002cf4 <__NVIC_GetPriorityGrouping>
 8002e2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	6978      	ldr	r0, [r7, #20]
 8002e36:	f7ff ffb3 	bl	8002da0 <NVIC_EncodePriority>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff82 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e48:	bf00      	nop
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff56 	bl	8002d10 <__NVIC_EnableIRQ>
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e054      	b.n	8002f28 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7f5b      	ldrb	r3, [r3, #29]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe fa70 	bl	8001374 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	791b      	ldrb	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <HAL_CRC_Init+0xc4>)
 8002ea8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0218 	bic.w	r2, r2, #24
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	e00c      	b.n	8002ed6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f834 	bl	8002f34 <HAL_CRCEx_Polynomial_Set>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e028      	b.n	8002f28 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	795b      	ldrb	r3, [r3, #5]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee6:	611a      	str	r2, [r3, #16]
 8002ee8:	e004      	b.n	8002ef4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6912      	ldr	r2, [r2, #16]
 8002ef2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	04c11db7 	.word	0x04c11db7

08002f34 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002f44:	231f      	movs	r3, #31
 8002f46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
 8002f56:	e063      	b.n	8003020 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002f58:	bf00      	nop
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1e5a      	subs	r2, r3, #1
 8002f5e:	613a      	str	r2, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <HAL_CRCEx_Polynomial_Set+0x44>
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b18      	cmp	r3, #24
 8002f7c:	d846      	bhi.n	800300c <HAL_CRCEx_Polynomial_Set+0xd8>
 8002f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08003013 	.word	0x08003013
 8002f88:	0800300d 	.word	0x0800300d
 8002f8c:	0800300d 	.word	0x0800300d
 8002f90:	0800300d 	.word	0x0800300d
 8002f94:	0800300d 	.word	0x0800300d
 8002f98:	0800300d 	.word	0x0800300d
 8002f9c:	0800300d 	.word	0x0800300d
 8002fa0:	0800300d 	.word	0x0800300d
 8002fa4:	08003001 	.word	0x08003001
 8002fa8:	0800300d 	.word	0x0800300d
 8002fac:	0800300d 	.word	0x0800300d
 8002fb0:	0800300d 	.word	0x0800300d
 8002fb4:	0800300d 	.word	0x0800300d
 8002fb8:	0800300d 	.word	0x0800300d
 8002fbc:	0800300d 	.word	0x0800300d
 8002fc0:	0800300d 	.word	0x0800300d
 8002fc4:	08002ff5 	.word	0x08002ff5
 8002fc8:	0800300d 	.word	0x0800300d
 8002fcc:	0800300d 	.word	0x0800300d
 8002fd0:	0800300d 	.word	0x0800300d
 8002fd4:	0800300d 	.word	0x0800300d
 8002fd8:	0800300d 	.word	0x0800300d
 8002fdc:	0800300d 	.word	0x0800300d
 8002fe0:	0800300d 	.word	0x0800300d
 8002fe4:	08002fe9 	.word	0x08002fe9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d913      	bls.n	8003016 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002ff2:	e010      	b.n	8003016 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b07      	cmp	r3, #7
 8002ff8:	d90f      	bls.n	800301a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002ffe:	e00c      	b.n	800301a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	d90b      	bls.n	800301e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800300a:	e008      	b.n	800301e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
        break;
 8003010:	e006      	b.n	8003020 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003012:	bf00      	nop
 8003014:	e004      	b.n	8003020 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800301e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 0118 	bic.w	r1, r3, #24
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	430a      	orrs	r2, r1
 8003040:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
}
 8003044:	4618      	mov	r0, r3
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e04f      	b.n	8003102 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe f9d8 	bl	800142c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b20      	ldr	r3, [pc, #128]	@ (800310c <HAL_DMA2D_Init+0xbc>)
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6851      	ldr	r1, [r2, #4]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	69d2      	ldr	r2, [r2, #28]
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003110 <HAL_DMA2D_Init+0xc0>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6891      	ldr	r1, [r2, #8]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6992      	ldr	r2, [r2, #24]
 80030b2:	4311      	orrs	r1, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030c2:	4b14      	ldr	r3, [pc, #80]	@ (8003114 <HAL_DMA2D_Init+0xc4>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68d1      	ldr	r1, [r2, #12]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	430b      	orrs	r3, r1
 80030d0:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	051a      	lsls	r2, r3, #20
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	055b      	lsls	r3, r3, #21
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	fff8ffbf 	.word	0xfff8ffbf
 8003110:	fffffef8 	.word	0xfffffef8
 8003114:	ffff0000 	.word	0xffff0000

08003118 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_DMA2D_Start+0x1c>
 8003130:	2302      	movs	r3, #2
 8003132:	e018      	b.n	8003166 <HAL_DMA2D_Start+0x4e>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fab4 	bl	80036bc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d056      	beq.n	8003238 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800318a:	f7ff fd53 	bl	8002c34 <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003190:	e04b      	b.n	800322a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d023      	beq.n	80031ec <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031b2:	f043 0202 	orr.w	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031c8:	f043 0201 	orr.w	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2221      	movs	r2, #33	@ 0x21
 80031d6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2204      	movs	r2, #4
 80031dc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0a5      	b.n	8003338 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d01a      	beq.n	800322a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031f4:	f7ff fd1e 	bl	8002c34 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d302      	bcc.n	800320a <HAL_DMA2D_PollForTransfer+0x9c>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800320e:	f043 0220 	orr.w	r2, r3, #32
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2203      	movs	r2, #3
 800321a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e086      	b.n	8003338 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ac      	beq.n	8003192 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d061      	beq.n	800331e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800325a:	f7ff fceb 	bl	8002c34 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003260:	e056      	b.n	8003310 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02e      	beq.n	80032d2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003282:	f043 0204 	orr.w	r2, r3, #4
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003298:	f043 0202 	orr.w	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2229      	movs	r2, #41	@ 0x29
 80032bc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2204      	movs	r2, #4
 80032c2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e032      	b.n	8003338 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d01a      	beq.n	8003310 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7ff fcab 	bl	8002c34 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <HAL_DMA2D_PollForTransfer+0x182>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10f      	bne.n	8003310 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2203      	movs	r2, #3
 8003300:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e013      	b.n	8003338 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0a1      	beq.n	8003262 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2212      	movs	r2, #18
 8003324:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d026      	beq.n	80033b0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d021      	beq.n	80033b0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800337a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2201      	movs	r2, #1
 800338e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2204      	movs	r2, #4
 8003394:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d026      	beq.n	8003408 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d021      	beq.n	8003408 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033d2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2220      	movs	r2, #32
 80033da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033e0:	f043 0202 	orr.w	r2, r3, #2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2204      	movs	r2, #4
 80033ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d026      	beq.n	8003460 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003418:	2b00      	cmp	r3, #0
 800341a:	d021      	beq.n	8003460 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800342a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2208      	movs	r2, #8
 8003432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003438:	f043 0204 	orr.w	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2204      	movs	r2, #4
 8003444:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d013      	beq.n	8003492 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003482:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2204      	movs	r2, #4
 800348a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f853 	bl	8003538 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d024      	beq.n	80034e6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01f      	beq.n	80034e6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034b4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2202      	movs	r2, #2
 80034bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01f      	beq.n	8003530 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01a      	beq.n	8003530 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003508:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2210      	movs	r2, #16
 8003510:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f80e 	bl	800354c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_DMA2D_ConfigLayer+0x24>
 8003580:	2302      	movs	r3, #2
 8003582:	e092      	b.n	80036aa <HAL_DMA2D_ConfigLayer+0x14a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	3328      	adds	r3, #40	@ 0x28
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80035b8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80035c4:	4b3c      	ldr	r3, [pc, #240]	@ (80036b8 <HAL_DMA2D_ConfigLayer+0x158>)
 80035c6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b0a      	cmp	r3, #10
 80035ce:	d003      	beq.n	80035d8 <HAL_DMA2D_ConfigLayer+0x78>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b09      	cmp	r3, #9
 80035d6:	d107      	bne.n	80035e8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	e005      	b.n	80035f4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	061b      	lsls	r3, r3, #24
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d120      	bne.n	800363c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	43db      	mvns	r3, r3
 8003604:	ea02 0103 	and.w	r1, r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	430a      	orrs	r2, r1
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b0a      	cmp	r3, #10
 8003622:	d003      	beq.n	800362c <HAL_DMA2D_ConfigLayer+0xcc>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b09      	cmp	r3, #9
 800362a:	d135      	bne.n	8003698 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003638:	629a      	str	r2, [r3, #40]	@ 0x28
 800363a:	e02d      	b.n	8003698 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b0b      	cmp	r3, #11
 8003642:	d109      	bne.n	8003658 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	049b      	lsls	r3, r3, #18
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8003656:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	43db      	mvns	r3, r3
 8003662:	ea02 0103 	and.w	r1, r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	430a      	orrs	r2, r1
 800366e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b0a      	cmp	r3, #10
 8003680:	d003      	beq.n	800368a <HAL_DMA2D_ConfigLayer+0x12a>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b09      	cmp	r3, #9
 8003688:	d106      	bne.n	8003698 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003696:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	ff33000f 	.word	0xff33000f

080036bc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80036bc:	b480      	push	{r7}
 80036be:	b08b      	sub	sp, #44	@ 0x2c
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	041a      	lsls	r2, r3, #16
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	431a      	orrs	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036f4:	d174      	bne.n	80037e0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80036fc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003704:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800370c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d108      	bne.n	800372e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	431a      	orrs	r2, r3
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	4313      	orrs	r3, r2
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
 800372c:	e053      	b.n	80037d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d106      	bne.n	8003744 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4313      	orrs	r3, r2
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
 8003742:	e048      	b.n	80037d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d111      	bne.n	8003770 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	0cdb      	lsrs	r3, r3, #19
 8003750:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	0a9b      	lsrs	r3, r3, #10
 8003756:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	08db      	lsrs	r3, r3, #3
 800375c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	02db      	lsls	r3, r3, #11
 8003766:	4313      	orrs	r3, r2
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
 800376e:	e032      	b.n	80037d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d117      	bne.n	80037a8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	0fdb      	lsrs	r3, r3, #31
 800377c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	0cdb      	lsrs	r3, r3, #19
 8003782:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	0adb      	lsrs	r3, r3, #11
 8003788:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	08db      	lsrs	r3, r3, #3
 800378e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	029b      	lsls	r3, r3, #10
 8003798:	431a      	orrs	r2, r3
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	03db      	lsls	r3, r3, #15
 800379e:	4313      	orrs	r3, r2
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a6:	e016      	b.n	80037d6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	0f1b      	lsrs	r3, r3, #28
 80037ac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	0d1b      	lsrs	r3, r3, #20
 80037b2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	0b1b      	lsrs	r3, r3, #12
 80037b8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	011a      	lsls	r2, r3, #4
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	431a      	orrs	r2, r3
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	031b      	lsls	r3, r3, #12
 80037ce:	4313      	orrs	r3, r2
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80037de:	e00d      	b.n	80037fc <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037e8:	d104      	bne.n	80037f4 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	615a      	str	r2, [r3, #20]
}
 80037f2:	e003      	b.n	80037fc <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	60da      	str	r2, [r3, #12]
}
 80037fc:	bf00      	nop
 80037fe:	372c      	adds	r7, #44	@ 0x2c
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	@ 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003816:	4b89      	ldr	r3, [pc, #548]	@ (8003a3c <HAL_GPIO_Init+0x234>)
 8003818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800381a:	e194      	b.n	8003b46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	2101      	movs	r1, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8186 	beq.w	8003b40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d005      	beq.n	800384c <HAL_GPIO_Init+0x44>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d130      	bne.n	80038ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003882:	2201      	movs	r2, #1
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 0201 	and.w	r2, r3, #1
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d017      	beq.n	80038ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	2203      	movs	r2, #3
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d123      	bne.n	800393e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	08da      	lsrs	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3208      	adds	r2, #8
 80038fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	220f      	movs	r2, #15
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	08da      	lsrs	r2, r3, #3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3208      	adds	r2, #8
 8003938:	69b9      	ldr	r1, [r7, #24]
 800393a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	2203      	movs	r2, #3
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0203 	and.w	r2, r3, #3
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80e0 	beq.w	8003b40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003980:	4b2f      	ldr	r3, [pc, #188]	@ (8003a40 <HAL_GPIO_Init+0x238>)
 8003982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003986:	4a2e      	ldr	r2, [pc, #184]	@ (8003a40 <HAL_GPIO_Init+0x238>)
 8003988:	f043 0302 	orr.w	r3, r3, #2
 800398c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003990:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <HAL_GPIO_Init+0x238>)
 8003992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800399e:	4a29      	ldr	r2, [pc, #164]	@ (8003a44 <HAL_GPIO_Init+0x23c>)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	3302      	adds	r3, #2
 80039a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	220f      	movs	r2, #15
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a20      	ldr	r2, [pc, #128]	@ (8003a48 <HAL_GPIO_Init+0x240>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d052      	beq.n	8003a70 <HAL_GPIO_Init+0x268>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <HAL_GPIO_Init+0x244>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d031      	beq.n	8003a36 <HAL_GPIO_Init+0x22e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a50 <HAL_GPIO_Init+0x248>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d02b      	beq.n	8003a32 <HAL_GPIO_Init+0x22a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a54 <HAL_GPIO_Init+0x24c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d025      	beq.n	8003a2e <HAL_GPIO_Init+0x226>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a58 <HAL_GPIO_Init+0x250>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01f      	beq.n	8003a2a <HAL_GPIO_Init+0x222>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1b      	ldr	r2, [pc, #108]	@ (8003a5c <HAL_GPIO_Init+0x254>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d019      	beq.n	8003a26 <HAL_GPIO_Init+0x21e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a60 <HAL_GPIO_Init+0x258>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_GPIO_Init+0x21a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a19      	ldr	r2, [pc, #100]	@ (8003a64 <HAL_GPIO_Init+0x25c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00d      	beq.n	8003a1e <HAL_GPIO_Init+0x216>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a18      	ldr	r2, [pc, #96]	@ (8003a68 <HAL_GPIO_Init+0x260>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <HAL_GPIO_Init+0x212>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	@ (8003a6c <HAL_GPIO_Init+0x264>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <HAL_GPIO_Init+0x20e>
 8003a12:	2309      	movs	r3, #9
 8003a14:	e02d      	b.n	8003a72 <HAL_GPIO_Init+0x26a>
 8003a16:	230a      	movs	r3, #10
 8003a18:	e02b      	b.n	8003a72 <HAL_GPIO_Init+0x26a>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	e029      	b.n	8003a72 <HAL_GPIO_Init+0x26a>
 8003a1e:	2307      	movs	r3, #7
 8003a20:	e027      	b.n	8003a72 <HAL_GPIO_Init+0x26a>
 8003a22:	2306      	movs	r3, #6
 8003a24:	e025      	b.n	8003a72 <HAL_GPIO_Init+0x26a>
 8003a26:	2305      	movs	r3, #5
 8003a28:	e023      	b.n	8003a72 <HAL_GPIO_Init+0x26a>
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	e021      	b.n	8003a72 <HAL_GPIO_Init+0x26a>
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e01f      	b.n	8003a72 <HAL_GPIO_Init+0x26a>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e01d      	b.n	8003a72 <HAL_GPIO_Init+0x26a>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01b      	b.n	8003a72 <HAL_GPIO_Init+0x26a>
 8003a3a:	bf00      	nop
 8003a3c:	58000080 	.word	0x58000080
 8003a40:	58024400 	.word	0x58024400
 8003a44:	58000400 	.word	0x58000400
 8003a48:	58020000 	.word	0x58020000
 8003a4c:	58020400 	.word	0x58020400
 8003a50:	58020800 	.word	0x58020800
 8003a54:	58020c00 	.word	0x58020c00
 8003a58:	58021000 	.word	0x58021000
 8003a5c:	58021400 	.word	0x58021400
 8003a60:	58021800 	.word	0x58021800
 8003a64:	58021c00 	.word	0x58021c00
 8003a68:	58022000 	.word	0x58022000
 8003a6c:	58022400 	.word	0x58022400
 8003a70:	2300      	movs	r3, #0
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	f002 0203 	and.w	r2, r2, #3
 8003a78:	0092      	lsls	r2, r2, #2
 8003a7a:	4093      	lsls	r3, r2
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a82:	4938      	ldr	r1, [pc, #224]	@ (8003b64 <HAL_GPIO_Init+0x35c>)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	089b      	lsrs	r3, r3, #2
 8003a88:	3302      	adds	r3, #2
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003ab6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ae4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3301      	adds	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f47f ae63 	bne.w	800381c <HAL_GPIO_Init+0x14>
  }
}
 8003b56:	bf00      	nop
 8003b58:	bf00      	nop
 8003b5a:	3724      	adds	r7, #36	@ 0x24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	58000400 	.word	0x58000400

08003b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	887b      	ldrh	r3, [r7, #2]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	e001      	b.n	8003b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003bb4:	e003      	b.n	8003bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	041a      	lsls	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	619a      	str	r2, [r3, #24]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003be4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f804 	bl	8003bfe <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	4603      	mov	r3, r0
 8003c06:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e08b      	b.n	8003d3e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd feca 	bl	80019d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	@ 0x24
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d107      	bne.n	8003c8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	e006      	b.n	8003c9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d108      	bne.n	8003cb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	e007      	b.n	8003cc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d48 <HAL_I2C_Init+0x134>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ce4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69d9      	ldr	r1, [r3, #28]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1a      	ldr	r2, [r3, #32]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	02008000 	.word	0x02008000

08003d4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d138      	bne.n	8003dd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e032      	b.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2224      	movs	r2, #36	@ 0x24
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d139      	bne.n	8003e6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e033      	b.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2224      	movs	r2, #36	@ 0x24
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e08f      	b.n	8003fac <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fd fe83 	bl	8001bac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003ebc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6999      	ldr	r1, [r3, #24]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ed2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6999      	ldr	r1, [r3, #24]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	041b      	lsls	r3, r3, #16
 8003efe:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a19      	ldr	r1, [r3, #32]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	041b      	lsls	r3, r3, #16
 8003f2a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0206 	orr.w	r2, r2, #6
 8003f88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d023      	beq.n	800401e <HAL_LTDC_IRQHandler+0x6a>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01e      	beq.n	800401e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0204 	bic.w	r2, r2, #4
 8003fee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ffe:	f043 0201 	orr.w	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2204      	movs	r2, #4
 800400c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f86f 	bl	80040fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d023      	beq.n	8004070 <HAL_LTDC_IRQHandler+0xbc>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01e      	beq.n	8004070 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0202 	bic.w	r2, r2, #2
 8004040:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2202      	movs	r2, #2
 8004048:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004050:	f043 0202 	orr.w	r2, r3, #2
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2204      	movs	r2, #4
 800405e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f846 	bl	80040fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01b      	beq.n	80040b2 <HAL_LTDC_IRQHandler+0xfe>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d016      	beq.n	80040b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2201      	movs	r2, #1
 800409a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f00d fe59 	bl	8011d64 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01b      	beq.n	80040f4 <HAL_LTDC_IRQHandler+0x140>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0208 	bic.w	r2, r2, #8
 80040d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2208      	movs	r2, #8
 80040dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f80e 	bl	8004110 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004124:	b5b0      	push	{r4, r5, r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_LTDC_ConfigLayer+0x1a>
 800413a:	2302      	movs	r3, #2
 800413c:	e02c      	b.n	8004198 <HAL_LTDC_ConfigLayer+0x74>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2202      	movs	r2, #2
 800414a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2134      	movs	r1, #52	@ 0x34
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4614      	mov	r4, r2
 8004162:	461d      	mov	r5, r3
 8004164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800416a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800416c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800416e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f849 	bl	8004210 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2201      	movs	r2, #1
 8004184:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bdb0      	pop	{r4, r5, r7, pc}

080041a0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_LTDC_ProgramLineEvent+0x18>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e023      	b.n	8004200 <HAL_LTDC_ProgramLineEvent+0x60>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80041d8:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <HAL_LTDC_ProgramLineEvent+0x6c>)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	50001000 	.word	0x50001000

08004210 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	@ 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	0c1b      	lsrs	r3, r3, #16
 8004228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422c:	4413      	add	r3, r2
 800422e:	041b      	lsls	r3, r3, #16
 8004230:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	01db      	lsls	r3, r3, #7
 800423c:	4413      	add	r3, r2
 800423e:	3384      	adds	r3, #132	@ 0x84
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	4611      	mov	r1, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	01d2      	lsls	r2, r2, #7
 800424c:	440a      	add	r2, r1
 800424e:	3284      	adds	r2, #132	@ 0x84
 8004250:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004254:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004266:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004268:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4619      	mov	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	01db      	lsls	r3, r3, #7
 8004274:	440b      	add	r3, r1
 8004276:	3384      	adds	r3, #132	@ 0x84
 8004278:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800427e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800428e:	4413      	add	r3, r2
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	01db      	lsls	r3, r3, #7
 800429e:	4413      	add	r3, r2
 80042a0:	3384      	adds	r3, #132	@ 0x84
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	4611      	mov	r1, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	01d2      	lsls	r2, r2, #7
 80042ae:	440a      	add	r2, r1
 80042b0:	3284      	adds	r2, #132	@ 0x84
 80042b2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80042b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042c6:	4413      	add	r3, r2
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4619      	mov	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	01db      	lsls	r3, r3, #7
 80042d4:	440b      	add	r3, r1
 80042d6:	3384      	adds	r3, #132	@ 0x84
 80042d8:	4619      	mov	r1, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4313      	orrs	r3, r2
 80042de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	01db      	lsls	r3, r3, #7
 80042ea:	4413      	add	r3, r2
 80042ec:	3384      	adds	r3, #132	@ 0x84
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	4611      	mov	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	01d2      	lsls	r2, r2, #7
 80042fa:	440a      	add	r2, r1
 80042fc:	3284      	adds	r2, #132	@ 0x84
 80042fe:	f023 0307 	bic.w	r3, r3, #7
 8004302:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	01db      	lsls	r3, r3, #7
 800430e:	4413      	add	r3, r2
 8004310:	3384      	adds	r3, #132	@ 0x84
 8004312:	461a      	mov	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	061b      	lsls	r3, r3, #24
 8004334:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800433c:	461a      	mov	r2, r3
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	431a      	orrs	r2, r3
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	431a      	orrs	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4619      	mov	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	01db      	lsls	r3, r3, #7
 8004350:	440b      	add	r3, r1
 8004352:	3384      	adds	r3, #132	@ 0x84
 8004354:	4619      	mov	r1, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	01db      	lsls	r3, r3, #7
 8004366:	4413      	add	r3, r2
 8004368:	3384      	adds	r3, #132	@ 0x84
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	4611      	mov	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	01d2      	lsls	r2, r2, #7
 8004376:	440a      	add	r2, r1
 8004378:	3284      	adds	r2, #132	@ 0x84
 800437a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800437e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	01db      	lsls	r3, r3, #7
 800438a:	4413      	add	r3, r2
 800438c:	3384      	adds	r3, #132	@ 0x84
 800438e:	461a      	mov	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	01db      	lsls	r3, r3, #7
 80043a0:	4413      	add	r3, r2
 80043a2:	3384      	adds	r3, #132	@ 0x84
 80043a4:	69da      	ldr	r2, [r3, #28]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4619      	mov	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	01db      	lsls	r3, r3, #7
 80043b0:	440b      	add	r3, r1
 80043b2:	3384      	adds	r3, #132	@ 0x84
 80043b4:	4619      	mov	r1, r3
 80043b6:	4b4f      	ldr	r3, [pc, #316]	@ (80044f4 <LTDC_SetConfig+0x2e4>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	69da      	ldr	r2, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	68f9      	ldr	r1, [r7, #12]
 80043c6:	6809      	ldr	r1, [r1, #0]
 80043c8:	4608      	mov	r0, r1
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	01c9      	lsls	r1, r1, #7
 80043ce:	4401      	add	r1, r0
 80043d0:	3184      	adds	r1, #132	@ 0x84
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	01db      	lsls	r3, r3, #7
 80043e0:	4413      	add	r3, r2
 80043e2:	3384      	adds	r3, #132	@ 0x84
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 80043f4:	2304      	movs	r3, #4
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	e01b      	b.n	8004432 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d102      	bne.n	8004408 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8004402:	2303      	movs	r3, #3
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	e014      	b.n	8004432 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d00b      	beq.n	8004428 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004414:	2b02      	cmp	r3, #2
 8004416:	d007      	beq.n	8004428 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800441c:	2b03      	cmp	r3, #3
 800441e:	d003      	beq.n	8004428 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004424:	2b07      	cmp	r3, #7
 8004426:	d102      	bne.n	800442e <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8004428:	2302      	movs	r3, #2
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	e001      	b.n	8004432 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800442e:	2301      	movs	r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	01db      	lsls	r3, r3, #7
 800443c:	4413      	add	r3, r2
 800443e:	3384      	adds	r3, #132	@ 0x84
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	4611      	mov	r1, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	01d2      	lsls	r2, r2, #7
 800444c:	440a      	add	r2, r1
 800444e:	3284      	adds	r2, #132	@ 0x84
 8004450:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004454:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	1acb      	subs	r3, r1, r3
 800446c:	69f9      	ldr	r1, [r7, #28]
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	6809      	ldr	r1, [r1, #0]
 8004478:	4608      	mov	r0, r1
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	01c9      	lsls	r1, r1, #7
 800447e:	4401      	add	r1, r0
 8004480:	3184      	adds	r1, #132	@ 0x84
 8004482:	4313      	orrs	r3, r2
 8004484:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	01db      	lsls	r3, r3, #7
 8004490:	4413      	add	r3, r2
 8004492:	3384      	adds	r3, #132	@ 0x84
 8004494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4619      	mov	r1, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	01db      	lsls	r3, r3, #7
 80044a0:	440b      	add	r3, r1
 80044a2:	3384      	adds	r3, #132	@ 0x84
 80044a4:	4619      	mov	r1, r3
 80044a6:	4b14      	ldr	r3, [pc, #80]	@ (80044f8 <LTDC_SetConfig+0x2e8>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	01db      	lsls	r3, r3, #7
 80044b6:	4413      	add	r3, r2
 80044b8:	3384      	adds	r3, #132	@ 0x84
 80044ba:	461a      	mov	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	01db      	lsls	r3, r3, #7
 80044cc:	4413      	add	r3, r2
 80044ce:	3384      	adds	r3, #132	@ 0x84
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	4611      	mov	r1, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	01d2      	lsls	r2, r2, #7
 80044dc:	440a      	add	r2, r1
 80044de:	3284      	adds	r2, #132	@ 0x84
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	6013      	str	r3, [r2, #0]
}
 80044e6:	bf00      	nop
 80044e8:	3724      	adds	r7, #36	@ 0x24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	fffff8f8 	.word	0xfffff8f8
 80044f8:	fffff800 	.word	0xfffff800

080044fc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004504:	4b19      	ldr	r3, [pc, #100]	@ (800456c <HAL_PWREx_ConfigSupply+0x70>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b04      	cmp	r3, #4
 800450e:	d00a      	beq.n	8004526 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004510:	4b16      	ldr	r3, [pc, #88]	@ (800456c <HAL_PWREx_ConfigSupply+0x70>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d001      	beq.n	8004522 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e01f      	b.n	8004562 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e01d      	b.n	8004562 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004526:	4b11      	ldr	r3, [pc, #68]	@ (800456c <HAL_PWREx_ConfigSupply+0x70>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f023 0207 	bic.w	r2, r3, #7
 800452e:	490f      	ldr	r1, [pc, #60]	@ (800456c <HAL_PWREx_ConfigSupply+0x70>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4313      	orrs	r3, r2
 8004534:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004536:	f7fe fb7d 	bl	8002c34 <HAL_GetTick>
 800453a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800453c:	e009      	b.n	8004552 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800453e:	f7fe fb79 	bl	8002c34 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800454c:	d901      	bls.n	8004552 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e007      	b.n	8004562 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004552:	4b06      	ldr	r3, [pc, #24]	@ (800456c <HAL_PWREx_ConfigSupply+0x70>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455e:	d1ee      	bne.n	800453e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	58024800 	.word	0x58024800

08004570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	@ 0x30
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f000 bc48 	b.w	8004e14 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8088 	beq.w	80046a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004592:	4b99      	ldr	r3, [pc, #612]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800459c:	4b96      	ldr	r3, [pc, #600]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d007      	beq.n	80045b8 <HAL_RCC_OscConfig+0x48>
 80045a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045aa:	2b18      	cmp	r3, #24
 80045ac:	d111      	bne.n	80045d2 <HAL_RCC_OscConfig+0x62>
 80045ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d10c      	bne.n	80045d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	4b8f      	ldr	r3, [pc, #572]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d06d      	beq.n	80046a0 <HAL_RCC_OscConfig+0x130>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d169      	bne.n	80046a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f000 bc21 	b.w	8004e14 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0x7a>
 80045dc:	4b86      	ldr	r3, [pc, #536]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a85      	ldr	r2, [pc, #532]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80045e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	e02e      	b.n	8004648 <HAL_RCC_OscConfig+0xd8>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x9c>
 80045f2:	4b81      	ldr	r3, [pc, #516]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a80      	ldr	r2, [pc, #512]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80045f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b7e      	ldr	r3, [pc, #504]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a7d      	ldr	r2, [pc, #500]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004604:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e01d      	b.n	8004648 <HAL_RCC_OscConfig+0xd8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0xc0>
 8004616:	4b78      	ldr	r3, [pc, #480]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a77      	ldr	r2, [pc, #476]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 800461c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b75      	ldr	r3, [pc, #468]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a74      	ldr	r2, [pc, #464]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0xd8>
 8004630:	4b71      	ldr	r3, [pc, #452]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a70      	ldr	r2, [pc, #448]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b6e      	ldr	r3, [pc, #440]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a6d      	ldr	r2, [pc, #436]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fe faf0 	bl	8002c34 <HAL_GetTick>
 8004654:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fe faec 	bl	8002c34 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	@ 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e3d4      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800466a:	4b63      	ldr	r3, [pc, #396]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0xe8>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fe fadc 	bl	8002c34 <HAL_GetTick>
 800467c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7fe fad8 	bl	8002c34 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	@ 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e3c0      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004692:	4b59      	ldr	r3, [pc, #356]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x110>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80ca 	beq.w	8004844 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b0:	4b51      	ldr	r3, [pc, #324]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046ba:	4b4f      	ldr	r3, [pc, #316]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <HAL_RCC_OscConfig+0x166>
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2b18      	cmp	r3, #24
 80046ca:	d156      	bne.n	800477a <HAL_RCC_OscConfig+0x20a>
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d151      	bne.n	800477a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d6:	4b48      	ldr	r3, [pc, #288]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_RCC_OscConfig+0x17e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e392      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046ee:	4b42      	ldr	r3, [pc, #264]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 0219 	bic.w	r2, r3, #25
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	493f      	ldr	r1, [pc, #252]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fe fa98 	bl	8002c34 <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004708:	f7fe fa94 	bl	8002c34 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e37c      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800471a:	4b37      	ldr	r3, [pc, #220]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004726:	f7fe fab5 	bl	8002c94 <HAL_GetREVID>
 800472a:	4603      	mov	r3, r0
 800472c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004730:	4293      	cmp	r3, r2
 8004732:	d817      	bhi.n	8004764 <HAL_RCC_OscConfig+0x1f4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b40      	cmp	r3, #64	@ 0x40
 800473a:	d108      	bne.n	800474e <HAL_RCC_OscConfig+0x1de>
 800473c:	4b2e      	ldr	r3, [pc, #184]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004744:	4a2c      	ldr	r2, [pc, #176]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800474a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800474c:	e07a      	b.n	8004844 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474e:	4b2a      	ldr	r3, [pc, #168]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	031b      	lsls	r3, r3, #12
 800475c:	4926      	ldr	r1, [pc, #152]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 800475e:	4313      	orrs	r3, r2
 8004760:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004762:	e06f      	b.n	8004844 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004764:	4b24      	ldr	r3, [pc, #144]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	4921      	ldr	r1, [pc, #132]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004778:	e064      	b.n	8004844 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d047      	beq.n	8004812 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004782:	4b1d      	ldr	r3, [pc, #116]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 0219 	bic.w	r2, r3, #25
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	491a      	ldr	r1, [pc, #104]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 8004790:	4313      	orrs	r3, r2
 8004792:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fe fa4e 	bl	8002c34 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479c:	f7fe fa4a 	bl	8002c34 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e332      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ae:	4b12      	ldr	r3, [pc, #72]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ba:	f7fe fa6b 	bl	8002c94 <HAL_GetREVID>
 80047be:	4603      	mov	r3, r0
 80047c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d819      	bhi.n	80047fc <HAL_RCC_OscConfig+0x28c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b40      	cmp	r3, #64	@ 0x40
 80047ce:	d108      	bne.n	80047e2 <HAL_RCC_OscConfig+0x272>
 80047d0:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80047d8:	4a07      	ldr	r2, [pc, #28]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80047da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047de:	6053      	str	r3, [r2, #4]
 80047e0:	e030      	b.n	8004844 <HAL_RCC_OscConfig+0x2d4>
 80047e2:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	031b      	lsls	r3, r3, #12
 80047f0:	4901      	ldr	r1, [pc, #4]	@ (80047f8 <HAL_RCC_OscConfig+0x288>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	604b      	str	r3, [r1, #4]
 80047f6:	e025      	b.n	8004844 <HAL_RCC_OscConfig+0x2d4>
 80047f8:	58024400 	.word	0x58024400
 80047fc:	4b9a      	ldr	r3, [pc, #616]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	4997      	ldr	r1, [pc, #604]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]
 8004810:	e018      	b.n	8004844 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004812:	4b95      	ldr	r3, [pc, #596]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a94      	ldr	r2, [pc, #592]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481e:	f7fe fa09 	bl	8002c34 <HAL_GetTick>
 8004822:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004826:	f7fe fa05 	bl	8002c34 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e2ed      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004838:	4b8b      	ldr	r3, [pc, #556]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f0      	bne.n	8004826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80a9 	beq.w	80049a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004852:	4b85      	ldr	r3, [pc, #532]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800485a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800485c:	4b82      	ldr	r3, [pc, #520]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 800485e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004860:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d007      	beq.n	8004878 <HAL_RCC_OscConfig+0x308>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b18      	cmp	r3, #24
 800486c:	d13a      	bne.n	80048e4 <HAL_RCC_OscConfig+0x374>
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d135      	bne.n	80048e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004878:	4b7b      	ldr	r3, [pc, #492]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_OscConfig+0x320>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	2b80      	cmp	r3, #128	@ 0x80
 800488a:	d001      	beq.n	8004890 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e2c1      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004890:	f7fe fa00 	bl	8002c94 <HAL_GetREVID>
 8004894:	4603      	mov	r3, r0
 8004896:	f241 0203 	movw	r2, #4099	@ 0x1003
 800489a:	4293      	cmp	r3, r2
 800489c:	d817      	bhi.n	80048ce <HAL_RCC_OscConfig+0x35e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d108      	bne.n	80048b8 <HAL_RCC_OscConfig+0x348>
 80048a6:	4b70      	ldr	r3, [pc, #448]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80048ae:	4a6e      	ldr	r2, [pc, #440]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80048b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048b4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048b6:	e075      	b.n	80049a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	069b      	lsls	r3, r3, #26
 80048c6:	4968      	ldr	r1, [pc, #416]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048cc:	e06a      	b.n	80049a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048ce:	4b66      	ldr	r3, [pc, #408]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	061b      	lsls	r3, r3, #24
 80048dc:	4962      	ldr	r1, [pc, #392]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048e2:	e05f      	b.n	80049a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d042      	beq.n	8004972 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80048f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fe f99c 	bl	8002c34 <HAL_GetTick>
 80048fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004900:	f7fe f998 	bl	8002c34 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e280      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004912:	4b55      	ldr	r3, [pc, #340]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800491e:	f7fe f9b9 	bl	8002c94 <HAL_GetREVID>
 8004922:	4603      	mov	r3, r0
 8004924:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004928:	4293      	cmp	r3, r2
 800492a:	d817      	bhi.n	800495c <HAL_RCC_OscConfig+0x3ec>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	2b20      	cmp	r3, #32
 8004932:	d108      	bne.n	8004946 <HAL_RCC_OscConfig+0x3d6>
 8004934:	4b4c      	ldr	r3, [pc, #304]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800493c:	4a4a      	ldr	r2, [pc, #296]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 800493e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004942:	6053      	str	r3, [r2, #4]
 8004944:	e02e      	b.n	80049a4 <HAL_RCC_OscConfig+0x434>
 8004946:	4b48      	ldr	r3, [pc, #288]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	069b      	lsls	r3, r3, #26
 8004954:	4944      	ldr	r1, [pc, #272]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004956:	4313      	orrs	r3, r2
 8004958:	604b      	str	r3, [r1, #4]
 800495a:	e023      	b.n	80049a4 <HAL_RCC_OscConfig+0x434>
 800495c:	4b42      	ldr	r3, [pc, #264]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	061b      	lsls	r3, r3, #24
 800496a:	493f      	ldr	r1, [pc, #252]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 800496c:	4313      	orrs	r3, r2
 800496e:	60cb      	str	r3, [r1, #12]
 8004970:	e018      	b.n	80049a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004972:	4b3d      	ldr	r3, [pc, #244]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3c      	ldr	r2, [pc, #240]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004978:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800497c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497e:	f7fe f959 	bl	8002c34 <HAL_GetTick>
 8004982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004986:	f7fe f955 	bl	8002c34 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e23d      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004998:	4b33      	ldr	r3, [pc, #204]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f0      	bne.n	8004986 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d036      	beq.n	8004a1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d019      	beq.n	80049ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80049ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c4:	f7fe f936 	bl	8002c34 <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049cc:	f7fe f932 	bl	8002c34 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e21a      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049de:	4b22      	ldr	r3, [pc, #136]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80049e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x45c>
 80049ea:	e018      	b.n	8004a1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fe f91c 	bl	8002c34 <HAL_GetTick>
 80049fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a00:	f7fe f918 	bl	8002c34 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e200      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a12:	4b15      	ldr	r3, [pc, #84]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d039      	beq.n	8004a9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01c      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a32:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a0c      	ldr	r2, [pc, #48]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004a38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a3e:	f7fe f8f9 	bl	8002c34 <HAL_GetTick>
 8004a42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a46:	f7fe f8f5 	bl	8002c34 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e1dd      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a58:	4b03      	ldr	r3, [pc, #12]	@ (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x4d6>
 8004a64:	e01b      	b.n	8004a9e <HAL_RCC_OscConfig+0x52e>
 8004a66:	bf00      	nop
 8004a68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a6c:	4b9b      	ldr	r3, [pc, #620]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a9a      	ldr	r2, [pc, #616]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004a72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a78:	f7fe f8dc 	bl	8002c34 <HAL_GetTick>
 8004a7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a80:	f7fe f8d8 	bl	8002c34 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e1c0      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a92:	4b92      	ldr	r3, [pc, #584]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8081 	beq.w	8004bae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004aac:	4b8c      	ldr	r3, [pc, #560]	@ (8004ce0 <HAL_RCC_OscConfig+0x770>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a8b      	ldr	r2, [pc, #556]	@ (8004ce0 <HAL_RCC_OscConfig+0x770>)
 8004ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab8:	f7fe f8bc 	bl	8002c34 <HAL_GetTick>
 8004abc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac0:	f7fe f8b8 	bl	8002c34 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	@ 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e1a0      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ad2:	4b83      	ldr	r3, [pc, #524]	@ (8004ce0 <HAL_RCC_OscConfig+0x770>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d106      	bne.n	8004af4 <HAL_RCC_OscConfig+0x584>
 8004ae6:	4b7d      	ldr	r3, [pc, #500]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aea:	4a7c      	ldr	r2, [pc, #496]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004af2:	e02d      	b.n	8004b50 <HAL_RCC_OscConfig+0x5e0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10c      	bne.n	8004b16 <HAL_RCC_OscConfig+0x5a6>
 8004afc:	4b77      	ldr	r3, [pc, #476]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b00:	4a76      	ldr	r2, [pc, #472]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b08:	4b74      	ldr	r3, [pc, #464]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0c:	4a73      	ldr	r2, [pc, #460]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b0e:	f023 0304 	bic.w	r3, r3, #4
 8004b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b14:	e01c      	b.n	8004b50 <HAL_RCC_OscConfig+0x5e0>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x5c8>
 8004b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	4a6e      	ldr	r2, [pc, #440]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b24:	f043 0304 	orr.w	r3, r3, #4
 8004b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b2a:	4b6c      	ldr	r3, [pc, #432]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2e:	4a6b      	ldr	r2, [pc, #428]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b36:	e00b      	b.n	8004b50 <HAL_RCC_OscConfig+0x5e0>
 8004b38:	4b68      	ldr	r3, [pc, #416]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3c:	4a67      	ldr	r2, [pc, #412]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b44:	4b65      	ldr	r3, [pc, #404]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b48:	4a64      	ldr	r2, [pc, #400]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b4a:	f023 0304 	bic.w	r3, r3, #4
 8004b4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d015      	beq.n	8004b84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fe f86c 	bl	8002c34 <HAL_GetTick>
 8004b5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fe f868 	bl	8002c34 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e14e      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b76:	4b59      	ldr	r3, [pc, #356]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0ee      	beq.n	8004b60 <HAL_RCC_OscConfig+0x5f0>
 8004b82:	e014      	b.n	8004bae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fe f856 	bl	8002c34 <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8c:	f7fe f852 	bl	8002c34 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e138      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1ee      	bne.n	8004b8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 812d 	beq.w	8004e12 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004bb8:	4b48      	ldr	r3, [pc, #288]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bc0:	2b18      	cmp	r3, #24
 8004bc2:	f000 80bd 	beq.w	8004d40 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	f040 809e 	bne.w	8004d0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd0:	4b42      	ldr	r3, [pc, #264]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a41      	ldr	r2, [pc, #260]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004bd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fe f82a 	bl	8002c34 <HAL_GetTick>
 8004be0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fe f826 	bl	8002c34 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e10e      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bf6:	4b39      	ldr	r3, [pc, #228]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c02:	4b36      	ldr	r3, [pc, #216]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c06:	4b37      	ldr	r3, [pc, #220]	@ (8004ce4 <HAL_RCC_OscConfig+0x774>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c12:	0112      	lsls	r2, r2, #4
 8004c14:	430a      	orrs	r2, r1
 8004c16:	4931      	ldr	r1, [pc, #196]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c20:	3b01      	subs	r3, #1
 8004c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	025b      	lsls	r3, r3, #9
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	3b01      	subs	r3, #1
 8004c38:	041b      	lsls	r3, r3, #16
 8004c3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	3b01      	subs	r3, #1
 8004c46:	061b      	lsls	r3, r3, #24
 8004c48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c4c:	4923      	ldr	r1, [pc, #140]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c52:	4b22      	ldr	r3, [pc, #136]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	4a21      	ldr	r2, [pc, #132]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c62:	4b21      	ldr	r3, [pc, #132]	@ (8004ce8 <HAL_RCC_OscConfig+0x778>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c6a:	00d2      	lsls	r2, r2, #3
 8004c6c:	491b      	ldr	r1, [pc, #108]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c72:	4b1a      	ldr	r3, [pc, #104]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c76:	f023 020c 	bic.w	r2, r3, #12
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	4917      	ldr	r1, [pc, #92]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c84:	4b15      	ldr	r3, [pc, #84]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	f023 0202 	bic.w	r2, r3, #2
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c90:	4912      	ldr	r1, [pc, #72]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c96:	4b11      	ldr	r3, [pc, #68]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9a:	4a10      	ldr	r2, [pc, #64]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004cba:	4b08      	ldr	r3, [pc, #32]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	4a07      	ldr	r2, [pc, #28]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc6:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a04      	ldr	r2, [pc, #16]	@ (8004cdc <HAL_RCC_OscConfig+0x76c>)
 8004ccc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fd ffaf 	bl	8002c34 <HAL_GetTick>
 8004cd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cd8:	e011      	b.n	8004cfe <HAL_RCC_OscConfig+0x78e>
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	58024800 	.word	0x58024800
 8004ce4:	fffffc0c 	.word	0xfffffc0c
 8004ce8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fd ffa2 	bl	8002c34 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e08a      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cfe:	4b47      	ldr	r3, [pc, #284]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x77c>
 8004d0a:	e082      	b.n	8004e12 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0c:	4b43      	ldr	r3, [pc, #268]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a42      	ldr	r2, [pc, #264]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd ff8c 	bl	8002c34 <HAL_GetTick>
 8004d1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fd ff88 	bl	8002c34 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e070      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d32:	4b3a      	ldr	r3, [pc, #232]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x7b0>
 8004d3e:	e068      	b.n	8004e12 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d40:	4b36      	ldr	r3, [pc, #216]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d46:	4b35      	ldr	r3, [pc, #212]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d031      	beq.n	8004db8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f003 0203 	and.w	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d12a      	bne.n	8004db8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d122      	bne.n	8004db8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d11a      	bne.n	8004db8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	0a5b      	lsrs	r3, r3, #9
 8004d86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d111      	bne.n	8004db8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	0c1b      	lsrs	r3, r3, #16
 8004d98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d108      	bne.n	8004db8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	0e1b      	lsrs	r3, r3, #24
 8004daa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e02b      	b.n	8004e14 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004dbc:	4b17      	ldr	r3, [pc, #92]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc0:	08db      	lsrs	r3, r3, #3
 8004dc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dc6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d01f      	beq.n	8004e12 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004dd2:	4b12      	ldr	r3, [pc, #72]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd6:	4a11      	ldr	r2, [pc, #68]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dde:	f7fd ff29 	bl	8002c34 <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004de4:	bf00      	nop
 8004de6:	f7fd ff25 	bl	8002c34 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d0f9      	beq.n	8004de6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004df2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004df6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e20 <HAL_RCC_OscConfig+0x8b0>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dfe:	00d2      	lsls	r2, r2, #3
 8004e00:	4906      	ldr	r1, [pc, #24]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e06:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	4a04      	ldr	r2, [pc, #16]	@ (8004e1c <HAL_RCC_OscConfig+0x8ac>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3730      	adds	r7, #48	@ 0x30
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	ffff0007 	.word	0xffff0007

08004e24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e19c      	b.n	8005172 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e38:	4b8a      	ldr	r3, [pc, #552]	@ (8005064 <HAL_RCC_ClockConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d910      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b87      	ldr	r3, [pc, #540]	@ (8005064 <HAL_RCC_ClockConfig+0x240>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 020f 	bic.w	r2, r3, #15
 8004e4e:	4985      	ldr	r1, [pc, #532]	@ (8005064 <HAL_RCC_ClockConfig+0x240>)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b83      	ldr	r3, [pc, #524]	@ (8005064 <HAL_RCC_ClockConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e184      	b.n	8005172 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	4b7b      	ldr	r3, [pc, #492]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d908      	bls.n	8004e96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e84:	4b78      	ldr	r3, [pc, #480]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	4975      	ldr	r1, [pc, #468]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d010      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	4b70      	ldr	r3, [pc, #448]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d908      	bls.n	8004ec4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	496a      	ldr	r1, [pc, #424]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d010      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	4b64      	ldr	r3, [pc, #400]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d908      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ee0:	4b61      	ldr	r3, [pc, #388]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	495e      	ldr	r1, [pc, #376]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d010      	beq.n	8004f20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69da      	ldr	r2, [r3, #28]
 8004f02:	4b59      	ldr	r3, [pc, #356]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d908      	bls.n	8004f20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f0e:	4b56      	ldr	r3, [pc, #344]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4953      	ldr	r1, [pc, #332]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d010      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	4b4d      	ldr	r3, [pc, #308]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d908      	bls.n	8004f4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f023 020f 	bic.w	r2, r3, #15
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4947      	ldr	r1, [pc, #284]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d055      	beq.n	8005006 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f5a:	4b43      	ldr	r3, [pc, #268]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4940      	ldr	r1, [pc, #256]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d107      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f74:	4b3c      	ldr	r3, [pc, #240]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d121      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0f6      	b.n	8005172 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d107      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f8c:	4b36      	ldr	r3, [pc, #216]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d115      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0ea      	b.n	8005172 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d107      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fa4:	4b30      	ldr	r3, [pc, #192]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d109      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0de      	b.n	8005172 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0d6      	b.n	8005172 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fc4:	4b28      	ldr	r3, [pc, #160]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f023 0207 	bic.w	r2, r3, #7
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4925      	ldr	r1, [pc, #148]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd6:	f7fd fe2d 	bl	8002c34 <HAL_GetTick>
 8004fda:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fde:	f7fd fe29 	bl	8002c34 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e0be      	b.n	8005172 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	429a      	cmp	r2, r3
 8005004:	d1eb      	bne.n	8004fde <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d010      	beq.n	8005034 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	4b14      	ldr	r3, [pc, #80]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	429a      	cmp	r2, r3
 8005020:	d208      	bcs.n	8005034 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005022:	4b11      	ldr	r3, [pc, #68]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f023 020f 	bic.w	r2, r3, #15
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	490e      	ldr	r1, [pc, #56]	@ (8005068 <HAL_RCC_ClockConfig+0x244>)
 8005030:	4313      	orrs	r3, r2
 8005032:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005034:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <HAL_RCC_ClockConfig+0x240>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d214      	bcs.n	800506c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b08      	ldr	r3, [pc, #32]	@ (8005064 <HAL_RCC_ClockConfig+0x240>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 020f 	bic.w	r2, r3, #15
 800504a:	4906      	ldr	r1, [pc, #24]	@ (8005064 <HAL_RCC_ClockConfig+0x240>)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b04      	ldr	r3, [pc, #16]	@ (8005064 <HAL_RCC_ClockConfig+0x240>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e086      	b.n	8005172 <HAL_RCC_ClockConfig+0x34e>
 8005064:	52002000 	.word	0x52002000
 8005068:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d010      	beq.n	800509a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	4b3f      	ldr	r3, [pc, #252]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005084:	429a      	cmp	r2, r3
 8005086:	d208      	bcs.n	800509a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005088:	4b3c      	ldr	r3, [pc, #240]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	4939      	ldr	r1, [pc, #228]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 8005096:	4313      	orrs	r3, r2
 8005098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d010      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	4b34      	ldr	r3, [pc, #208]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d208      	bcs.n	80050c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050b6:	4b31      	ldr	r3, [pc, #196]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	492e      	ldr	r1, [pc, #184]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d010      	beq.n	80050f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	4b28      	ldr	r3, [pc, #160]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d208      	bcs.n	80050f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050e4:	4b25      	ldr	r3, [pc, #148]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	4922      	ldr	r1, [pc, #136]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d010      	beq.n	8005124 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	4b1d      	ldr	r3, [pc, #116]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800510e:	429a      	cmp	r2, r3
 8005110:	d208      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005112:	4b1a      	ldr	r3, [pc, #104]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	4917      	ldr	r1, [pc, #92]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 8005120:	4313      	orrs	r3, r2
 8005122:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005124:	f000 f834 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 8005128:	4602      	mov	r2, r0
 800512a:	4b14      	ldr	r3, [pc, #80]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	4912      	ldr	r1, [pc, #72]	@ (8005180 <HAL_RCC_ClockConfig+0x35c>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
 8005140:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005142:	4b0e      	ldr	r3, [pc, #56]	@ (800517c <HAL_RCC_ClockConfig+0x358>)
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	4a0d      	ldr	r2, [pc, #52]	@ (8005180 <HAL_RCC_ClockConfig+0x35c>)
 800514c:	5cd3      	ldrb	r3, [r2, r3]
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	fa22 f303 	lsr.w	r3, r2, r3
 8005158:	4a0a      	ldr	r2, [pc, #40]	@ (8005184 <HAL_RCC_ClockConfig+0x360>)
 800515a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800515c:	4a0a      	ldr	r2, [pc, #40]	@ (8005188 <HAL_RCC_ClockConfig+0x364>)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005162:	4b0a      	ldr	r3, [pc, #40]	@ (800518c <HAL_RCC_ClockConfig+0x368>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f7fd f836 	bl	80021d8 <HAL_InitTick>
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	58024400 	.word	0x58024400
 8005180:	0802afa4 	.word	0x0802afa4
 8005184:	24000008 	.word	0x24000008
 8005188:	24000004 	.word	0x24000004
 800518c:	2400000c 	.word	0x2400000c

08005190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	@ 0x24
 8005194:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005196:	4bb3      	ldr	r3, [pc, #716]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800519e:	2b18      	cmp	r3, #24
 80051a0:	f200 8155 	bhi.w	800544e <HAL_RCC_GetSysClockFreq+0x2be>
 80051a4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	08005211 	.word	0x08005211
 80051b0:	0800544f 	.word	0x0800544f
 80051b4:	0800544f 	.word	0x0800544f
 80051b8:	0800544f 	.word	0x0800544f
 80051bc:	0800544f 	.word	0x0800544f
 80051c0:	0800544f 	.word	0x0800544f
 80051c4:	0800544f 	.word	0x0800544f
 80051c8:	0800544f 	.word	0x0800544f
 80051cc:	08005237 	.word	0x08005237
 80051d0:	0800544f 	.word	0x0800544f
 80051d4:	0800544f 	.word	0x0800544f
 80051d8:	0800544f 	.word	0x0800544f
 80051dc:	0800544f 	.word	0x0800544f
 80051e0:	0800544f 	.word	0x0800544f
 80051e4:	0800544f 	.word	0x0800544f
 80051e8:	0800544f 	.word	0x0800544f
 80051ec:	0800523d 	.word	0x0800523d
 80051f0:	0800544f 	.word	0x0800544f
 80051f4:	0800544f 	.word	0x0800544f
 80051f8:	0800544f 	.word	0x0800544f
 80051fc:	0800544f 	.word	0x0800544f
 8005200:	0800544f 	.word	0x0800544f
 8005204:	0800544f 	.word	0x0800544f
 8005208:	0800544f 	.word	0x0800544f
 800520c:	08005243 	.word	0x08005243
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005210:	4b94      	ldr	r3, [pc, #592]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800521c:	4b91      	ldr	r3, [pc, #580]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	08db      	lsrs	r3, r3, #3
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	4a90      	ldr	r2, [pc, #576]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
 800522c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800522e:	e111      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005230:	4b8d      	ldr	r3, [pc, #564]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005232:	61bb      	str	r3, [r7, #24]
      break;
 8005234:	e10e      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005236:	4b8d      	ldr	r3, [pc, #564]	@ (800546c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005238:	61bb      	str	r3, [r7, #24]
      break;
 800523a:	e10b      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800523c:	4b8c      	ldr	r3, [pc, #560]	@ (8005470 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800523e:	61bb      	str	r3, [r7, #24]
      break;
 8005240:	e108      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005242:	4b88      	ldr	r3, [pc, #544]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800524c:	4b85      	ldr	r3, [pc, #532]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005256:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005258:	4b82      	ldr	r3, [pc, #520]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005262:	4b80      	ldr	r3, [pc, #512]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005266:	08db      	lsrs	r3, r3, #3
 8005268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80e1 	beq.w	8005448 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b02      	cmp	r3, #2
 800528a:	f000 8083 	beq.w	8005394 <HAL_RCC_GetSysClockFreq+0x204>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b02      	cmp	r3, #2
 8005292:	f200 80a1 	bhi.w	80053d8 <HAL_RCC_GetSysClockFreq+0x248>
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x114>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d056      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0x1c0>
 80052a2:	e099      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02d      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	08db      	lsrs	r3, r3, #3
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
 80052c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052da:	4b62      	ldr	r3, [pc, #392]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005474 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005306:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800530a:	e087      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005316:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005478 <HAL_RCC_GetSysClockFreq+0x2e8>
 800531a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531e:	4b51      	ldr	r3, [pc, #324]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005332:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005474 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800533a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800534e:	e065      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800547c <HAL_RCC_GetSysClockFreq+0x2ec>
 800535e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005362:	4b40      	ldr	r3, [pc, #256]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005372:	ed97 6a02 	vldr	s12, [r7, #8]
 8005376:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005474 <HAL_RCC_GetSysClockFreq+0x2e4>
 800537a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005392:	e043      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005480 <HAL_RCC_GetSysClockFreq+0x2f0>
 80053a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005474 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053d6:	e021      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800547c <HAL_RCC_GetSysClockFreq+0x2ec>
 80053e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80053fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005474 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800540a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800540e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800541a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800541c:	4b11      	ldr	r3, [pc, #68]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005420:	0a5b      	lsrs	r3, r3, #9
 8005422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005426:	3301      	adds	r3, #1
 8005428:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	ee07 3a90 	vmov	s15, r3
 8005430:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005434:	edd7 6a07 	vldr	s13, [r7, #28]
 8005438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800543c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005440:	ee17 3a90 	vmov	r3, s15
 8005444:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005446:	e005      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]
      break;
 800544c:	e002      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800544e:	4b07      	ldr	r3, [pc, #28]	@ (800546c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005450:	61bb      	str	r3, [r7, #24]
      break;
 8005452:	bf00      	nop
  }

  return sysclockfreq;
 8005454:	69bb      	ldr	r3, [r7, #24]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3724      	adds	r7, #36	@ 0x24
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	58024400 	.word	0x58024400
 8005468:	03d09000 	.word	0x03d09000
 800546c:	003d0900 	.word	0x003d0900
 8005470:	007a1200 	.word	0x007a1200
 8005474:	46000000 	.word	0x46000000
 8005478:	4c742400 	.word	0x4c742400
 800547c:	4a742400 	.word	0x4a742400
 8005480:	4af42400 	.word	0x4af42400

08005484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800548a:	f7ff fe81 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 800548e:	4602      	mov	r2, r0
 8005490:	4b10      	ldr	r3, [pc, #64]	@ (80054d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	0a1b      	lsrs	r3, r3, #8
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	490f      	ldr	r1, [pc, #60]	@ (80054d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800549c:	5ccb      	ldrb	r3, [r1, r3]
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	fa22 f303 	lsr.w	r3, r2, r3
 80054a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054a8:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	4a09      	ldr	r2, [pc, #36]	@ (80054d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80054b2:	5cd3      	ldrb	r3, [r2, r3]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	4a07      	ldr	r2, [pc, #28]	@ (80054dc <HAL_RCC_GetHCLKFreq+0x58>)
 80054c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054c2:	4a07      	ldr	r2, [pc, #28]	@ (80054e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054c8:	4b04      	ldr	r3, [pc, #16]	@ (80054dc <HAL_RCC_GetHCLKFreq+0x58>)
 80054ca:	681b      	ldr	r3, [r3, #0]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	58024400 	.word	0x58024400
 80054d8:	0802afa4 	.word	0x0802afa4
 80054dc:	24000008 	.word	0x24000008
 80054e0:	24000004 	.word	0x24000004

080054e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80054e8:	f7ff ffcc 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	4904      	ldr	r1, [pc, #16]	@ (800550c <HAL_RCC_GetPCLK1Freq+0x28>)
 80054fa:	5ccb      	ldrb	r3, [r1, r3]
 80054fc:	f003 031f 	and.w	r3, r3, #31
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005504:	4618      	mov	r0, r3
 8005506:	bd80      	pop	{r7, pc}
 8005508:	58024400 	.word	0x58024400
 800550c:	0802afa4 	.word	0x0802afa4

08005510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005514:	f7ff ffb6 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 8005518:	4602      	mov	r2, r0
 800551a:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	4904      	ldr	r1, [pc, #16]	@ (8005538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005526:	5ccb      	ldrb	r3, [r1, r3]
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005530:	4618      	mov	r0, r3
 8005532:	bd80      	pop	{r7, pc}
 8005534:	58024400 	.word	0x58024400
 8005538:	0802afa4 	.word	0x0802afa4

0800553c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	223f      	movs	r2, #63	@ 0x3f
 800554a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800554c:	4b1a      	ldr	r3, [pc, #104]	@ (80055b8 <HAL_RCC_GetClockConfig+0x7c>)
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0207 	and.w	r2, r3, #7
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005558:	4b17      	ldr	r3, [pc, #92]	@ (80055b8 <HAL_RCC_GetClockConfig+0x7c>)
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005564:	4b14      	ldr	r3, [pc, #80]	@ (80055b8 <HAL_RCC_GetClockConfig+0x7c>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f003 020f 	and.w	r2, r3, #15
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005570:	4b11      	ldr	r3, [pc, #68]	@ (80055b8 <HAL_RCC_GetClockConfig+0x7c>)
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800557c:	4b0e      	ldr	r3, [pc, #56]	@ (80055b8 <HAL_RCC_GetClockConfig+0x7c>)
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005588:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <HAL_RCC_GetClockConfig+0x7c>)
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005594:	4b08      	ldr	r3, [pc, #32]	@ (80055b8 <HAL_RCC_GetClockConfig+0x7c>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055a0:	4b06      	ldr	r3, [pc, #24]	@ (80055bc <HAL_RCC_GetClockConfig+0x80>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	601a      	str	r2, [r3, #0]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	58024400 	.word	0x58024400
 80055bc:	52002000 	.word	0x52002000

080055c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c4:	b0ca      	sub	sp, #296	@ 0x128
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055d2:	2300      	movs	r3, #0
 80055d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80055e4:	2500      	movs	r5, #0
 80055e6:	ea54 0305 	orrs.w	r3, r4, r5
 80055ea:	d049      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055f6:	d02f      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055fc:	d828      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005602:	d01a      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005604:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005608:	d822      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800560e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005612:	d007      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005614:	e01c      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005616:	4bb8      	ldr	r3, [pc, #736]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	4ab7      	ldr	r2, [pc, #732]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800561c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005620:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005622:	e01a      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005628:	3308      	adds	r3, #8
 800562a:	2102      	movs	r1, #2
 800562c:	4618      	mov	r0, r3
 800562e:	f001 fc8f 	bl	8006f50 <RCCEx_PLL2_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005638:	e00f      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	3328      	adds	r3, #40	@ 0x28
 8005640:	2102      	movs	r1, #2
 8005642:	4618      	mov	r0, r3
 8005644:	f001 fd36 	bl	80070b4 <RCCEx_PLL3_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800564e:	e004      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005656:	e000      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005662:	4ba5      	ldr	r3, [pc, #660]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005666:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005670:	4aa1      	ldr	r2, [pc, #644]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005672:	430b      	orrs	r3, r1
 8005674:	6513      	str	r3, [r2, #80]	@ 0x50
 8005676:	e003      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800567c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800568c:	f04f 0900 	mov.w	r9, #0
 8005690:	ea58 0309 	orrs.w	r3, r8, r9
 8005694:	d047      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569c:	2b04      	cmp	r3, #4
 800569e:	d82a      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80056a0:	a201      	add	r2, pc, #4	@ (adr r2, 80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056bd 	.word	0x080056bd
 80056ac:	080056cb 	.word	0x080056cb
 80056b0:	080056e1 	.word	0x080056e1
 80056b4:	080056ff 	.word	0x080056ff
 80056b8:	080056ff 	.word	0x080056ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056bc:	4b8e      	ldr	r3, [pc, #568]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	4a8d      	ldr	r2, [pc, #564]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056c8:	e01a      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ce:	3308      	adds	r3, #8
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f001 fc3c 	bl	8006f50 <RCCEx_PLL2_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056de:	e00f      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e4:	3328      	adds	r3, #40	@ 0x28
 80056e6:	2100      	movs	r1, #0
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 fce3 	bl	80070b4 <RCCEx_PLL3_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056f4:	e004      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005708:	4b7b      	ldr	r3, [pc, #492]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800570a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800570c:	f023 0107 	bic.w	r1, r3, #7
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	4a78      	ldr	r2, [pc, #480]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005718:	430b      	orrs	r3, r1
 800571a:	6513      	str	r3, [r2, #80]	@ 0x50
 800571c:	e003      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005732:	f04f 0b00 	mov.w	fp, #0
 8005736:	ea5a 030b 	orrs.w	r3, sl, fp
 800573a:	d04c      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005746:	d030      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800574c:	d829      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800574e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005750:	d02d      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005752:	2bc0      	cmp	r3, #192	@ 0xc0
 8005754:	d825      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005756:	2b80      	cmp	r3, #128	@ 0x80
 8005758:	d018      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800575a:	2b80      	cmp	r3, #128	@ 0x80
 800575c:	d821      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005762:	2b40      	cmp	r3, #64	@ 0x40
 8005764:	d007      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005766:	e01c      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005768:	4b63      	ldr	r3, [pc, #396]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	4a62      	ldr	r2, [pc, #392]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800576e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005774:	e01c      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577a:	3308      	adds	r3, #8
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fbe6 	bl	8006f50 <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800578a:	e011      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	3328      	adds	r3, #40	@ 0x28
 8005792:	2100      	movs	r1, #0
 8005794:	4618      	mov	r0, r3
 8005796:	f001 fc8d 	bl	80070b4 <RCCEx_PLL3_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057a0:	e006      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057a8:	e002      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80057b8:	4b4f      	ldr	r3, [pc, #316]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c6:	4a4c      	ldr	r2, [pc, #304]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80057cc:	e003      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80057e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80057e6:	2300      	movs	r3, #0
 80057e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80057ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80057f0:	460b      	mov	r3, r1
 80057f2:	4313      	orrs	r3, r2
 80057f4:	d053      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005802:	d035      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005804:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005808:	d82e      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800580a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800580e:	d031      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005810:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005814:	d828      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005816:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800581a:	d01a      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800581c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005820:	d822      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005826:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800582a:	d007      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800582c:	e01c      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582e:	4b32      	ldr	r3, [pc, #200]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	4a31      	ldr	r2, [pc, #196]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005838:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800583a:	e01c      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	3308      	adds	r3, #8
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f001 fb83 	bl	8006f50 <RCCEx_PLL2_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005850:	e011      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005856:	3328      	adds	r3, #40	@ 0x28
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f001 fc2a 	bl	80070b4 <RCCEx_PLL3_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005866:	e006      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800587e:	4b1e      	ldr	r3, [pc, #120]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005882:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800588e:	4a1a      	ldr	r2, [pc, #104]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005890:	430b      	orrs	r3, r1
 8005892:	6593      	str	r3, [r2, #88]	@ 0x58
 8005894:	e003      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800589a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800589e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058ae:	2300      	movs	r3, #0
 80058b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80058b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80058b8:	460b      	mov	r3, r1
 80058ba:	4313      	orrs	r3, r2
 80058bc:	d056      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058ca:	d038      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80058cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058d0:	d831      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058d6:	d034      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80058d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058dc:	d82b      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e2:	d01d      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80058e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e8:	d825      	bhi.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d006      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80058ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058f2:	d00a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80058f4:	e01f      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058f6:	bf00      	nop
 80058f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058fc:	4ba2      	ldr	r3, [pc, #648]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	4aa1      	ldr	r2, [pc, #644]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005908:	e01c      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	3308      	adds	r3, #8
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f001 fb1c 	bl	8006f50 <RCCEx_PLL2_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800591e:	e011      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005924:	3328      	adds	r3, #40	@ 0x28
 8005926:	2100      	movs	r1, #0
 8005928:	4618      	mov	r0, r3
 800592a:	f001 fbc3 	bl	80070b4 <RCCEx_PLL3_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005934:	e006      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800593c:	e002      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800594c:	4b8e      	ldr	r3, [pc, #568]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800594e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005950:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005958:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800595c:	4a8a      	ldr	r2, [pc, #552]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800595e:	430b      	orrs	r3, r1
 8005960:	6593      	str	r3, [r2, #88]	@ 0x58
 8005962:	e003      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005978:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800597c:	2300      	movs	r3, #0
 800597e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005982:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	d03a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005992:	2b30      	cmp	r3, #48	@ 0x30
 8005994:	d01f      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005996:	2b30      	cmp	r3, #48	@ 0x30
 8005998:	d819      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800599a:	2b20      	cmp	r3, #32
 800599c:	d00c      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d815      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d019      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80059a6:	2b10      	cmp	r3, #16
 80059a8:	d111      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059aa:	4b77      	ldr	r3, [pc, #476]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	4a76      	ldr	r2, [pc, #472]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059b6:	e011      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	3308      	adds	r3, #8
 80059be:	2102      	movs	r1, #2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 fac5 	bl	8006f50 <RCCEx_PLL2_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059cc:	e006      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059d4:	e002      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059d6:	bf00      	nop
 80059d8:	e000      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059e4:	4b68      	ldr	r3, [pc, #416]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f2:	4a65      	ldr	r2, [pc, #404]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059f4:	430b      	orrs	r3, r1
 80059f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a12:	2300      	movs	r3, #0
 8005a14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	d051      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a2c:	d035      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a32:	d82e      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a38:	d031      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a3e:	d828      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a44:	d01a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a4a:	d822      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a54:	d007      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a56:	e01c      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a58:	4b4b      	ldr	r3, [pc, #300]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a64:	e01c      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 fa6e 	bl	8006f50 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a7a:	e011      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a80:	3328      	adds	r3, #40	@ 0x28
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fb15 	bl	80070b4 <RCCEx_PLL3_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a90:	e006      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a98:	e002      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a9a:	bf00      	nop
 8005a9c:	e000      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005aa8:	4b37      	ldr	r3, [pc, #220]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab6:	4a34      	ldr	r2, [pc, #208]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	6513      	str	r3, [r2, #80]	@ 0x50
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005adc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	d056      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af0:	d033      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005af2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af6:	d82c      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005af8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005afc:	d02f      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005afe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b02:	d826      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b08:	d02b      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b0e:	d820      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b14:	d012      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b1a:	d81a      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d022      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b24:	d115      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fa0e 	bl	8006f50 <RCCEx_PLL2_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b3a:	e015      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b40:	3328      	adds	r3, #40	@ 0x28
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fab5 	bl	80070b4 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b50:	e00a      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b58:	e006      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e004      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b5e:	bf00      	nop
 8005b60:	e002      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b62:	bf00      	nop
 8005b64:	e000      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10d      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b70:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b7e:	4a02      	ldr	r2, [pc, #8]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b80:	430b      	orrs	r3, r1
 8005b82:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b84:	e006      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b86:	bf00      	nop
 8005b88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005baa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	d055      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bc0:	d033      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bc6:	d82c      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bcc:	d02f      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd2:	d826      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bd8:	d02b      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005bda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bde:	d820      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be4:	d012      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bea:	d81a      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d022      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bf4:	d115      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f9a6 	bl	8006f50 <RCCEx_PLL2_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c0a:	e015      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c10:	3328      	adds	r3, #40	@ 0x28
 8005c12:	2101      	movs	r1, #1
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fa4d 	bl	80070b4 <RCCEx_PLL3_Config>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c20:	e00a      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c28:	e006      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c2a:	bf00      	nop
 8005c2c:	e004      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e002      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c32:	bf00      	nop
 8005c34:	e000      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c40:	4ba3      	ldr	r3, [pc, #652]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c50:	4a9f      	ldr	r2, [pc, #636]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c52:	430b      	orrs	r3, r1
 8005c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c56:	e003      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c70:	2300      	movs	r3, #0
 8005c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	d037      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c8a:	d00e      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c90:	d816      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c9a:	d111      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4b8c      	ldr	r3, [pc, #560]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	4a8b      	ldr	r2, [pc, #556]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ca8:	e00f      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	3308      	adds	r3, #8
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 f94c 	bl	8006f50 <RCCEx_PLL2_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cbe:	e004      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cc6:	e000      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce0:	4a7b      	ldr	r2, [pc, #492]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce6:	e003      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d00:	2300      	movs	r3, #0
 8005d02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	d039      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d81c      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d20 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d31 	.word	0x08005d31
 8005d28:	08005d3f 	.word	0x08005d3f
 8005d2c:	08005d5d 	.word	0x08005d5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d30:	4b67      	ldr	r3, [pc, #412]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	4a66      	ldr	r2, [pc, #408]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d3c:	e00f      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d42:	3308      	adds	r3, #8
 8005d44:	2102      	movs	r1, #2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 f902 	bl	8006f50 <RCCEx_PLL2_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d52:	e004      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d66:	4b5a      	ldr	r3, [pc, #360]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6a:	f023 0103 	bic.w	r1, r3, #3
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d74:	4a56      	ldr	r2, [pc, #344]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d76:	430b      	orrs	r3, r1
 8005d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d7a:	e003      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005d90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d94:	2300      	movs	r3, #0
 8005d96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f000 809f 	beq.w	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005da6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a4a      	ldr	r2, [pc, #296]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005db0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005db2:	f7fc ff3f 	bl	8002c34 <HAL_GetTick>
 8005db6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dbc:	f7fc ff3a 	bl	8002c34 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b64      	cmp	r3, #100	@ 0x64
 8005dca:	d903      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dd2:	e005      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ed      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d179      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005de8:	4b39      	ldr	r3, [pc, #228]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005df4:	4053      	eors	r3, r2
 8005df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d015      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dfe:	4b34      	ldr	r3, [pc, #208]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e0a:	4b31      	ldr	r3, [pc, #196]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0e:	4a30      	ldr	r2, [pc, #192]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e16:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1a:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e22:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e36:	d118      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e38:	f7fc fefc 	bl	8002c34 <HAL_GetTick>
 8005e3c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e40:	e00d      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e42:	f7fc fef7 	bl	8002c34 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e4c:	1ad2      	subs	r2, r2, r3
 8005e4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d903      	bls.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005e5c:	e005      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0eb      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d129      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e82:	d10e      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005e84:	4b12      	ldr	r3, [pc, #72]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e94:	091a      	lsrs	r2, r3, #4
 8005e96:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6113      	str	r3, [r2, #16]
 8005ea0:	e005      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005eac:	6113      	str	r3, [r2, #16]
 8005eae:	4b08      	ldr	r3, [pc, #32]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ebe:	4a04      	ldr	r2, [pc, #16]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec4:	e00e      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005ece:	e009      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	58024800 	.word	0x58024800
 8005ed8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f002 0301 	and.w	r3, r2, #1
 8005ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005efa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f000 8089 	beq.w	8006018 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f0c:	2b28      	cmp	r3, #40	@ 0x28
 8005f0e:	d86b      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f10:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005ff1 	.word	0x08005ff1
 8005f1c:	08005fe9 	.word	0x08005fe9
 8005f20:	08005fe9 	.word	0x08005fe9
 8005f24:	08005fe9 	.word	0x08005fe9
 8005f28:	08005fe9 	.word	0x08005fe9
 8005f2c:	08005fe9 	.word	0x08005fe9
 8005f30:	08005fe9 	.word	0x08005fe9
 8005f34:	08005fe9 	.word	0x08005fe9
 8005f38:	08005fbd 	.word	0x08005fbd
 8005f3c:	08005fe9 	.word	0x08005fe9
 8005f40:	08005fe9 	.word	0x08005fe9
 8005f44:	08005fe9 	.word	0x08005fe9
 8005f48:	08005fe9 	.word	0x08005fe9
 8005f4c:	08005fe9 	.word	0x08005fe9
 8005f50:	08005fe9 	.word	0x08005fe9
 8005f54:	08005fe9 	.word	0x08005fe9
 8005f58:	08005fd3 	.word	0x08005fd3
 8005f5c:	08005fe9 	.word	0x08005fe9
 8005f60:	08005fe9 	.word	0x08005fe9
 8005f64:	08005fe9 	.word	0x08005fe9
 8005f68:	08005fe9 	.word	0x08005fe9
 8005f6c:	08005fe9 	.word	0x08005fe9
 8005f70:	08005fe9 	.word	0x08005fe9
 8005f74:	08005fe9 	.word	0x08005fe9
 8005f78:	08005ff1 	.word	0x08005ff1
 8005f7c:	08005fe9 	.word	0x08005fe9
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005fe9 	.word	0x08005fe9
 8005f88:	08005fe9 	.word	0x08005fe9
 8005f8c:	08005fe9 	.word	0x08005fe9
 8005f90:	08005fe9 	.word	0x08005fe9
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005ff1 	.word	0x08005ff1
 8005f9c:	08005fe9 	.word	0x08005fe9
 8005fa0:	08005fe9 	.word	0x08005fe9
 8005fa4:	08005fe9 	.word	0x08005fe9
 8005fa8:	08005fe9 	.word	0x08005fe9
 8005fac:	08005fe9 	.word	0x08005fe9
 8005fb0:	08005fe9 	.word	0x08005fe9
 8005fb4:	08005fe9 	.word	0x08005fe9
 8005fb8:	08005ff1 	.word	0x08005ff1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 ffc3 	bl	8006f50 <RCCEx_PLL2_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e00f      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd6:	3328      	adds	r3, #40	@ 0x28
 8005fd8:	2101      	movs	r1, #1
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 f86a 	bl	80070b4 <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fe6:	e004      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fee:	e000      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ffa:	4bbf      	ldr	r3, [pc, #764]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006008:	4abb      	ldr	r2, [pc, #748]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800600a:	430b      	orrs	r3, r1
 800600c:	6553      	str	r3, [r2, #84]	@ 0x54
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f002 0302 	and.w	r3, r2, #2
 8006024:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800602e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d041      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800603e:	2b05      	cmp	r3, #5
 8006040:	d824      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006042:	a201      	add	r2, pc, #4	@ (adr r2, 8006048 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	08006095 	.word	0x08006095
 800604c:	08006061 	.word	0x08006061
 8006050:	08006077 	.word	0x08006077
 8006054:	08006095 	.word	0x08006095
 8006058:	08006095 	.word	0x08006095
 800605c:	08006095 	.word	0x08006095
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006064:	3308      	adds	r3, #8
 8006066:	2101      	movs	r1, #1
 8006068:	4618      	mov	r0, r3
 800606a:	f000 ff71 	bl	8006f50 <RCCEx_PLL2_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006074:	e00f      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	3328      	adds	r3, #40	@ 0x28
 800607c:	2101      	movs	r1, #1
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f818 	bl	80070b4 <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800608a:	e004      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006092:	e000      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800609e:	4b96      	ldr	r3, [pc, #600]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a2:	f023 0107 	bic.w	r1, r3, #7
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060ac:	4a92      	ldr	r2, [pc, #584]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060ae:	430b      	orrs	r3, r1
 80060b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80060b2:	e003      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f002 0304 	and.w	r3, r2, #4
 80060c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060cc:	2300      	movs	r3, #0
 80060ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4313      	orrs	r3, r2
 80060da:	d044      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80060dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	d825      	bhi.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80060e8:	a201      	add	r2, pc, #4	@ (adr r2, 80060f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	0800613d 	.word	0x0800613d
 80060f4:	08006109 	.word	0x08006109
 80060f8:	0800611f 	.word	0x0800611f
 80060fc:	0800613d 	.word	0x0800613d
 8006100:	0800613d 	.word	0x0800613d
 8006104:	0800613d 	.word	0x0800613d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610c:	3308      	adds	r3, #8
 800610e:	2101      	movs	r1, #1
 8006110:	4618      	mov	r0, r3
 8006112:	f000 ff1d 	bl	8006f50 <RCCEx_PLL2_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800611c:	e00f      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	3328      	adds	r3, #40	@ 0x28
 8006124:	2101      	movs	r1, #1
 8006126:	4618      	mov	r0, r3
 8006128:	f000 ffc4 	bl	80070b4 <RCCEx_PLL3_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006132:	e004      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800613a:	e000      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800613c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800613e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006146:	4b6c      	ldr	r3, [pc, #432]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800614a:	f023 0107 	bic.w	r1, r3, #7
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006152:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006156:	4a68      	ldr	r2, [pc, #416]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006158:	430b      	orrs	r3, r1
 800615a:	6593      	str	r3, [r2, #88]	@ 0x58
 800615c:	e003      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f002 0320 	and.w	r3, r2, #32
 8006172:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006176:	2300      	movs	r3, #0
 8006178:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800617c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006180:	460b      	mov	r3, r1
 8006182:	4313      	orrs	r3, r2
 8006184:	d055      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006192:	d033      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006198:	d82c      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619e:	d02f      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80061a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a4:	d826      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061aa:	d02b      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80061ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061b0:	d820      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061b6:	d012      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80061b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061bc:	d81a      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d022      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80061c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061c6:	d115      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061cc:	3308      	adds	r3, #8
 80061ce:	2100      	movs	r1, #0
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 febd 	bl	8006f50 <RCCEx_PLL2_Config>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061dc:	e015      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e2:	3328      	adds	r3, #40	@ 0x28
 80061e4:	2102      	movs	r1, #2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 ff64 	bl	80070b4 <RCCEx_PLL3_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061f2:	e00a      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061fa:	e006      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80061fc:	bf00      	nop
 80061fe:	e004      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006200:	bf00      	nop
 8006202:	e002      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006204:	bf00      	nop
 8006206:	e000      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10b      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006212:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006216:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006222:	4a35      	ldr	r2, [pc, #212]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006224:	430b      	orrs	r3, r1
 8006226:	6553      	str	r3, [r2, #84]	@ 0x54
 8006228:	e003      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800622e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800623e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006242:	2300      	movs	r3, #0
 8006244:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006248:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800624c:	460b      	mov	r3, r1
 800624e:	4313      	orrs	r3, r2
 8006250:	d058      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006256:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800625a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800625e:	d033      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006260:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006264:	d82c      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626a:	d02f      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006270:	d826      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006272:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006276:	d02b      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006278:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800627c:	d820      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800627e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006282:	d012      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006288:	d81a      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d022      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800628e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006292:	d115      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006298:	3308      	adds	r3, #8
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fe57 	bl	8006f50 <RCCEx_PLL2_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062a8:	e015      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	3328      	adds	r3, #40	@ 0x28
 80062b0:	2102      	movs	r1, #2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fefe 	bl	80070b4 <RCCEx_PLL3_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062be:	e00a      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062c6:	e006      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062c8:	bf00      	nop
 80062ca:	e004      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062cc:	bf00      	nop
 80062ce:	e002      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062d0:	bf00      	nop
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10e      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062de:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062ee:	4a02      	ldr	r2, [pc, #8]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80062f4:	e006      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006314:	2300      	movs	r3, #0
 8006316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800631a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800631e:	460b      	mov	r3, r1
 8006320:	4313      	orrs	r3, r2
 8006322:	d055      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006328:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800632c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006330:	d033      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006332:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006336:	d82c      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800633c:	d02f      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800633e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006342:	d826      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006344:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006348:	d02b      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800634a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800634e:	d820      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006354:	d012      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800635a:	d81a      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d022      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006364:	d115      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636a:	3308      	adds	r3, #8
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fdee 	bl	8006f50 <RCCEx_PLL2_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800637a:	e015      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006380:	3328      	adds	r3, #40	@ 0x28
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fe95 	bl	80070b4 <RCCEx_PLL3_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006390:	e00a      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006398:	e006      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800639a:	bf00      	nop
 800639c:	e004      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800639e:	bf00      	nop
 80063a0:	e002      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063c0:	4a9d      	ldr	r2, [pc, #628]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063c2:	430b      	orrs	r3, r1
 80063c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80063c6:	e003      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f002 0308 	and.w	r3, r2, #8
 80063dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063e0:	2300      	movs	r3, #0
 80063e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80063ea:	460b      	mov	r3, r1
 80063ec:	4313      	orrs	r3, r2
 80063ee:	d01e      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80063f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fc:	d10c      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	3328      	adds	r3, #40	@ 0x28
 8006404:	2102      	movs	r1, #2
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fe54 	bl	80070b4 <RCCEx_PLL3_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006418:	4b87      	ldr	r3, [pc, #540]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800641a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006428:	4a83      	ldr	r2, [pc, #524]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800642a:	430b      	orrs	r3, r1
 800642c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f002 0310 	and.w	r3, r2, #16
 800643a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800643e:	2300      	movs	r3, #0
 8006440:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006444:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006448:	460b      	mov	r3, r1
 800644a:	4313      	orrs	r3, r2
 800644c:	d01e      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800645a:	d10c      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	3328      	adds	r3, #40	@ 0x28
 8006462:	2102      	movs	r1, #2
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fe25 	bl	80070b4 <RCCEx_PLL3_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006476:	4b70      	ldr	r3, [pc, #448]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006482:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006486:	4a6c      	ldr	r2, [pc, #432]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006488:	430b      	orrs	r3, r1
 800648a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006498:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800649c:	2300      	movs	r3, #0
 800649e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80064a6:	460b      	mov	r3, r1
 80064a8:	4313      	orrs	r3, r2
 80064aa:	d03e      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064b8:	d022      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80064ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064be:	d81b      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c8:	d00b      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80064ca:	e015      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d0:	3308      	adds	r3, #8
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fd3b 	bl	8006f50 <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064e0:	e00f      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	3328      	adds	r3, #40	@ 0x28
 80064e8:	2102      	movs	r1, #2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fde2 	bl	80070b4 <RCCEx_PLL3_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10b      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800650a:	4b4b      	ldr	r3, [pc, #300]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800650c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800651a:	4a47      	ldr	r2, [pc, #284]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800651c:	430b      	orrs	r3, r1
 800651e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006520:	e003      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006536:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006538:	2300      	movs	r3, #0
 800653a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800653c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006540:	460b      	mov	r3, r1
 8006542:	4313      	orrs	r3, r2
 8006544:	d03b      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006552:	d01f      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006554:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006558:	d818      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800655a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655e:	d003      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006560:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006564:	d007      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006566:	e011      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006568:	4b33      	ldr	r3, [pc, #204]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800656a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656c:	4a32      	ldr	r2, [pc, #200]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800656e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006574:	e00f      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	3328      	adds	r3, #40	@ 0x28
 800657c:	2101      	movs	r1, #1
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fd98 	bl	80070b4 <RCCEx_PLL3_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800658a:	e004      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800659e:	4b26      	ldr	r3, [pc, #152]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ae:	4a22      	ldr	r2, [pc, #136]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80065b4:	e003      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80065ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80065cc:	2300      	movs	r3, #0
 80065ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80065d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d034      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e8:	d007      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80065ea:	e011      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ec:	4b12      	ldr	r3, [pc, #72]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	4a11      	ldr	r2, [pc, #68]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065f8:	e00e      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fe:	3308      	adds	r3, #8
 8006600:	2102      	movs	r1, #2
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fca4 	bl	8006f50 <RCCEx_PLL2_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10d      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006620:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006624:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800662e:	4a02      	ldr	r2, [pc, #8]	@ (8006638 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006630:	430b      	orrs	r3, r1
 8006632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006634:	e006      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006636:	bf00      	nop
 8006638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006650:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006652:	2300      	movs	r3, #0
 8006654:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006656:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d00c      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006664:	3328      	adds	r3, #40	@ 0x28
 8006666:	2102      	movs	r1, #2
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fd23 	bl	80070b4 <RCCEx_PLL3_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006686:	663b      	str	r3, [r7, #96]	@ 0x60
 8006688:	2300      	movs	r3, #0
 800668a:	667b      	str	r3, [r7, #100]	@ 0x64
 800668c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d038      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800669e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a2:	d018      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80066a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a8:	d811      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ae:	d014      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80066b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b4:	d80b      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d011      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80066ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066be:	d106      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c0:	4bc3      	ldr	r3, [pc, #780]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	4ac2      	ldr	r2, [pc, #776]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80066cc:	e008      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066d4:	e004      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066d6:	bf00      	nop
 80066d8:	e002      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066da:	bf00      	nop
 80066dc:	e000      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80066de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10b      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066e8:	4bb9      	ldr	r3, [pc, #740]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066f8:	4ab5      	ldr	r2, [pc, #724]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066fa:	430b      	orrs	r3, r1
 80066fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80066fe:	e003      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006714:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006716:	2300      	movs	r3, #0
 8006718:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800671a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800671e:	460b      	mov	r3, r1
 8006720:	4313      	orrs	r3, r2
 8006722:	d009      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006724:	4baa      	ldr	r3, [pc, #680]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006728:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006732:	4aa7      	ldr	r2, [pc, #668]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006734:	430b      	orrs	r3, r1
 8006736:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006744:	653b      	str	r3, [r7, #80]	@ 0x50
 8006746:	2300      	movs	r3, #0
 8006748:	657b      	str	r3, [r7, #84]	@ 0x54
 800674a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800674e:	460b      	mov	r3, r1
 8006750:	4313      	orrs	r3, r2
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006754:	4b9e      	ldr	r3, [pc, #632]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006760:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006764:	4a9a      	ldr	r2, [pc, #616]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006766:	430b      	orrs	r3, r1
 8006768:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800676a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006778:	2300      	movs	r3, #0
 800677a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800677c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006780:	460b      	mov	r3, r1
 8006782:	4313      	orrs	r3, r2
 8006784:	d009      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006786:	4b92      	ldr	r3, [pc, #584]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800678a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006794:	4a8e      	ldr	r2, [pc, #568]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006796:	430b      	orrs	r3, r1
 8006798:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80067a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067a8:	2300      	movs	r3, #0
 80067aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80067b0:	460b      	mov	r3, r1
 80067b2:	4313      	orrs	r3, r2
 80067b4:	d00e      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067b6:	4b86      	ldr	r3, [pc, #536]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	4a85      	ldr	r2, [pc, #532]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067c0:	6113      	str	r3, [r2, #16]
 80067c2:	4b83      	ldr	r3, [pc, #524]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067c4:	6919      	ldr	r1, [r3, #16]
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80067ce:	4a80      	ldr	r2, [pc, #512]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80067d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80067e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067e2:	2300      	movs	r3, #0
 80067e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80067ea:	460b      	mov	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067f0:	4b77      	ldr	r3, [pc, #476]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80067f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fe:	4a74      	ldr	r2, [pc, #464]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006800:	430b      	orrs	r3, r1
 8006802:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006810:	633b      	str	r3, [r7, #48]	@ 0x30
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
 8006816:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006820:	4b6b      	ldr	r3, [pc, #428]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006824:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006830:	4a67      	ldr	r2, [pc, #412]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006832:	430b      	orrs	r3, r1
 8006834:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	2100      	movs	r1, #0
 8006840:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006848:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800684c:	460b      	mov	r3, r1
 800684e:	4313      	orrs	r3, r2
 8006850:	d011      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006856:	3308      	adds	r3, #8
 8006858:	2100      	movs	r1, #0
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fb78 	bl	8006f50 <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	2100      	movs	r1, #0
 8006880:	6239      	str	r1, [r7, #32]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	627b      	str	r3, [r7, #36]	@ 0x24
 8006888:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800688c:	460b      	mov	r3, r1
 800688e:	4313      	orrs	r3, r2
 8006890:	d011      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	3308      	adds	r3, #8
 8006898:	2101      	movs	r1, #1
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fb58 	bl	8006f50 <RCCEx_PLL2_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80068b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	2100      	movs	r1, #0
 80068c0:	61b9      	str	r1, [r7, #24]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068cc:	460b      	mov	r3, r1
 80068ce:	4313      	orrs	r3, r2
 80068d0:	d011      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	3308      	adds	r3, #8
 80068d8:	2102      	movs	r1, #2
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fb38 	bl	8006f50 <RCCEx_PLL2_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	2100      	movs	r1, #0
 8006900:	6139      	str	r1, [r7, #16]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800690c:	460b      	mov	r3, r1
 800690e:	4313      	orrs	r3, r2
 8006910:	d011      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	3328      	adds	r3, #40	@ 0x28
 8006918:	2100      	movs	r1, #0
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fbca 	bl	80070b4 <RCCEx_PLL3_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	2100      	movs	r1, #0
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	f003 0310 	and.w	r3, r3, #16
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800694c:	460b      	mov	r3, r1
 800694e:	4313      	orrs	r3, r2
 8006950:	d011      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006956:	3328      	adds	r3, #40	@ 0x28
 8006958:	2101      	movs	r1, #1
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fbaa 	bl	80070b4 <RCCEx_PLL3_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	2100      	movs	r1, #0
 8006980:	6039      	str	r1, [r7, #0]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	607b      	str	r3, [r7, #4]
 8006988:	e9d7 1200 	ldrd	r1, r2, [r7]
 800698c:	460b      	mov	r3, r1
 800698e:	4313      	orrs	r3, r2
 8006990:	d011      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006996:	3328      	adds	r3, #40	@ 0x28
 8006998:	2102      	movs	r1, #2
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fb8a 	bl	80070b4 <RCCEx_PLL3_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80069b6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80069ca:	46bd      	mov	sp, r7
 80069cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d0:	58024400 	.word	0x58024400

080069d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069d8:	f7fe fd54 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b06      	ldr	r3, [pc, #24]	@ (80069f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	091b      	lsrs	r3, r3, #4
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	4904      	ldr	r1, [pc, #16]	@ (80069fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069ea:	5ccb      	ldrb	r3, [r1, r3]
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	58024400 	.word	0x58024400
 80069fc:	0802afa4 	.word	0x0802afa4

08006a00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b089      	sub	sp, #36	@ 0x24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a08:	4ba1      	ldr	r3, [pc, #644]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a12:	4b9f      	ldr	r3, [pc, #636]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a16:	0b1b      	lsrs	r3, r3, #12
 8006a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	091b      	lsrs	r3, r3, #4
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a2a:	4b99      	ldr	r3, [pc, #612]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2e:	08db      	lsrs	r3, r3, #3
 8006a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	fb02 f303 	mul.w	r3, r2, r3
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8111 	beq.w	8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	f000 8083 	beq.w	8006b5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	f200 80a1 	bhi.w	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d056      	beq.n	8006b18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a6a:	e099      	b.n	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a6c:	4b88      	ldr	r3, [pc, #544]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d02d      	beq.n	8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a78:	4b85      	ldr	r3, [pc, #532]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	08db      	lsrs	r3, r3, #3
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	4a84      	ldr	r2, [pc, #528]	@ (8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a84:	fa22 f303 	lsr.w	r3, r2, r3
 8006a88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	ee07 3a90 	vmov	s15, r3
 8006a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ab6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ace:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ad2:	e087      	b.n	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006afa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b16:	e065      	b.n	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2a:	4b59      	ldr	r3, [pc, #356]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b5a:	e043      	b.n	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6e:	4b48      	ldr	r3, [pc, #288]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b9e:	e021      	b.n	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb2:	4b37      	ldr	r3, [pc, #220]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006be4:	4b2a      	ldr	r3, [pc, #168]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be8:	0a5b      	lsrs	r3, r3, #9
 8006bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0a:	ee17 2a90 	vmov	r2, s15
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c12:	4b1f      	ldr	r3, [pc, #124]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c16:	0c1b      	lsrs	r3, r3, #16
 8006c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c1c:	ee07 3a90 	vmov	s15, r3
 8006c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c38:	ee17 2a90 	vmov	r2, s15
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c40:	4b13      	ldr	r3, [pc, #76]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c44:	0e1b      	lsrs	r3, r3, #24
 8006c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c66:	ee17 2a90 	vmov	r2, s15
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c6e:	e008      	b.n	8006c82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	609a      	str	r2, [r3, #8]
}
 8006c82:	bf00      	nop
 8006c84:	3724      	adds	r7, #36	@ 0x24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	58024400 	.word	0x58024400
 8006c94:	03d09000 	.word	0x03d09000
 8006c98:	46000000 	.word	0x46000000
 8006c9c:	4c742400 	.word	0x4c742400
 8006ca0:	4a742400 	.word	0x4a742400
 8006ca4:	4af42400 	.word	0x4af42400

08006ca8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b089      	sub	sp, #36	@ 0x24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cb0:	4ba1      	ldr	r3, [pc, #644]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006cba:	4b9f      	ldr	r3, [pc, #636]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbe:	0d1b      	lsrs	r3, r3, #20
 8006cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cc6:	4b9c      	ldr	r3, [pc, #624]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	0a1b      	lsrs	r3, r3, #8
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006cd2:	4b99      	ldr	r3, [pc, #612]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd6:	08db      	lsrs	r3, r3, #3
 8006cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8111 	beq.w	8006f18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	f000 8083 	beq.w	8006e04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	f200 80a1 	bhi.w	8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d056      	beq.n	8006dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d12:	e099      	b.n	8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d14:	4b88      	ldr	r3, [pc, #544]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d02d      	beq.n	8006d7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d20:	4b85      	ldr	r3, [pc, #532]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	08db      	lsrs	r3, r3, #3
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	4a84      	ldr	r2, [pc, #528]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d7a:	e087      	b.n	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006da2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dbe:	e065      	b.n	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd2:	4b59      	ldr	r3, [pc, #356]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006de6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e02:	e043      	b.n	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e16:	4b48      	ldr	r3, [pc, #288]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e46:	e021      	b.n	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e5a:	4b37      	ldr	r3, [pc, #220]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e90:	0a5b      	lsrs	r3, r3, #9
 8006e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eb2:	ee17 2a90 	vmov	r2, s15
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006eba:	4b1f      	ldr	r3, [pc, #124]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee0:	ee17 2a90 	vmov	r2, s15
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ee8:	4b13      	ldr	r3, [pc, #76]	@ (8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eec:	0e1b      	lsrs	r3, r3, #24
 8006eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0e:	ee17 2a90 	vmov	r2, s15
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f16:	e008      	b.n	8006f2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	609a      	str	r2, [r3, #8]
}
 8006f2a:	bf00      	nop
 8006f2c:	3724      	adds	r7, #36	@ 0x24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	58024400 	.word	0x58024400
 8006f3c:	03d09000 	.word	0x03d09000
 8006f40:	46000000 	.word	0x46000000
 8006f44:	4c742400 	.word	0x4c742400
 8006f48:	4a742400 	.word	0x4a742400
 8006f4c:	4af42400 	.word	0x4af42400

08006f50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f5e:	4b53      	ldr	r3, [pc, #332]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d101      	bne.n	8006f6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e099      	b.n	80070a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a4e      	ldr	r2, [pc, #312]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006f74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f7a:	f7fb fe5b 	bl	8002c34 <HAL_GetTick>
 8006f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f80:	e008      	b.n	8006f94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f82:	f7fb fe57 	bl	8002c34 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e086      	b.n	80070a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f94:	4b45      	ldr	r3, [pc, #276]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f0      	bne.n	8006f82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fa0:	4b42      	ldr	r3, [pc, #264]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	031b      	lsls	r3, r3, #12
 8006fae:	493f      	ldr	r1, [pc, #252]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	025b      	lsls	r3, r3, #9
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	061b      	lsls	r3, r3, #24
 8006fe0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fe4:	4931      	ldr	r1, [pc, #196]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fea:	4b30      	ldr	r3, [pc, #192]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	492d      	ldr	r1, [pc, #180]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	f023 0220 	bic.w	r2, r3, #32
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	4928      	ldr	r1, [pc, #160]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 800700a:	4313      	orrs	r3, r2
 800700c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800700e:	4b27      	ldr	r3, [pc, #156]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	4a26      	ldr	r2, [pc, #152]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007014:	f023 0310 	bic.w	r3, r3, #16
 8007018:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800701a:	4b24      	ldr	r3, [pc, #144]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 800701c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800701e:	4b24      	ldr	r3, [pc, #144]	@ (80070b0 <RCCEx_PLL2_Config+0x160>)
 8007020:	4013      	ands	r3, r2
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	69d2      	ldr	r2, [r2, #28]
 8007026:	00d2      	lsls	r2, r2, #3
 8007028:	4920      	ldr	r1, [pc, #128]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 800702a:	4313      	orrs	r3, r2
 800702c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800702e:	4b1f      	ldr	r3, [pc, #124]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	4a1e      	ldr	r2, [pc, #120]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007034:	f043 0310 	orr.w	r3, r3, #16
 8007038:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d106      	bne.n	800704e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007040:	4b1a      	ldr	r3, [pc, #104]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007044:	4a19      	ldr	r2, [pc, #100]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007046:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800704a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800704c:	e00f      	b.n	800706e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d106      	bne.n	8007062 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007054:	4b15      	ldr	r3, [pc, #84]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	4a14      	ldr	r2, [pc, #80]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 800705a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800705e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007060:	e005      	b.n	800706e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007062:	4b12      	ldr	r3, [pc, #72]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007066:	4a11      	ldr	r2, [pc, #68]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007068:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800706c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800706e:	4b0f      	ldr	r3, [pc, #60]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a0e      	ldr	r2, [pc, #56]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007074:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800707a:	f7fb fddb 	bl	8002c34 <HAL_GetTick>
 800707e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007080:	e008      	b.n	8007094 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007082:	f7fb fdd7 	bl	8002c34 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e006      	b.n	80070a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007094:	4b05      	ldr	r3, [pc, #20]	@ (80070ac <RCCEx_PLL2_Config+0x15c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0f0      	beq.n	8007082 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
 80070b0:	ffff0007 	.word	0xffff0007

080070b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070c2:	4b53      	ldr	r3, [pc, #332]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80070c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d101      	bne.n	80070d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e099      	b.n	8007206 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80070d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070de:	f7fb fda9 	bl	8002c34 <HAL_GetTick>
 80070e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070e4:	e008      	b.n	80070f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070e6:	f7fb fda5 	bl	8002c34 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e086      	b.n	8007206 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070f8:	4b45      	ldr	r3, [pc, #276]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1f0      	bne.n	80070e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007104:	4b42      	ldr	r3, [pc, #264]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007108:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	051b      	lsls	r3, r3, #20
 8007112:	493f      	ldr	r1, [pc, #252]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007114:	4313      	orrs	r3, r2
 8007116:	628b      	str	r3, [r1, #40]	@ 0x28
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	3b01      	subs	r3, #1
 800711e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	3b01      	subs	r3, #1
 8007128:	025b      	lsls	r3, r3, #9
 800712a:	b29b      	uxth	r3, r3
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	3b01      	subs	r3, #1
 8007134:	041b      	lsls	r3, r3, #16
 8007136:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	3b01      	subs	r3, #1
 8007142:	061b      	lsls	r3, r3, #24
 8007144:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007148:	4931      	ldr	r1, [pc, #196]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 800714a:	4313      	orrs	r3, r2
 800714c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800714e:	4b30      	ldr	r3, [pc, #192]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	492d      	ldr	r1, [pc, #180]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 800715c:	4313      	orrs	r3, r2
 800715e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007160:	4b2b      	ldr	r3, [pc, #172]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007164:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	4928      	ldr	r1, [pc, #160]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 800716e:	4313      	orrs	r3, r2
 8007170:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007172:	4b27      	ldr	r3, [pc, #156]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007176:	4a26      	ldr	r2, [pc, #152]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800717c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800717e:	4b24      	ldr	r3, [pc, #144]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007182:	4b24      	ldr	r3, [pc, #144]	@ (8007214 <RCCEx_PLL3_Config+0x160>)
 8007184:	4013      	ands	r3, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	69d2      	ldr	r2, [r2, #28]
 800718a:	00d2      	lsls	r2, r2, #3
 800718c:	4920      	ldr	r1, [pc, #128]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 800718e:	4313      	orrs	r3, r2
 8007190:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007192:	4b1f      	ldr	r3, [pc, #124]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007196:	4a1e      	ldr	r2, [pc, #120]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 8007198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800719c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d106      	bne.n	80071b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a8:	4a19      	ldr	r2, [pc, #100]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80071ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071b0:	e00f      	b.n	80071d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d106      	bne.n	80071c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071b8:	4b15      	ldr	r3, [pc, #84]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071bc:	4a14      	ldr	r2, [pc, #80]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071c4:	e005      	b.n	80071d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071c6:	4b12      	ldr	r3, [pc, #72]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ca:	4a11      	ldr	r2, [pc, #68]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071de:	f7fb fd29 	bl	8002c34 <HAL_GetTick>
 80071e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071e4:	e008      	b.n	80071f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071e6:	f7fb fd25 	bl	8002c34 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d901      	bls.n	80071f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e006      	b.n	8007206 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071f8:	4b05      	ldr	r3, [pc, #20]	@ (8007210 <RCCEx_PLL3_Config+0x15c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0f0      	beq.n	80071e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	58024400 	.word	0x58024400
 8007214:	ffff0007 	.word	0xffff0007

08007218 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e02b      	b.n	8007284 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fa fa27 	bl	8001694 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3304      	adds	r3, #4
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f002 f8e7 	bl	800942c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	461a      	mov	r2, r3
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	f002 f93b 	bl	80094e4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800726e:	4b07      	ldr	r3, [pc, #28]	@ (800728c <HAL_SDRAM_Init+0x74>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a06      	ldr	r2, [pc, #24]	@ (800728c <HAL_SDRAM_Init+0x74>)
 8007274:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007278:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	52004000 	.word	0x52004000

08007290 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80072a2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d101      	bne.n	80072ae <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80072aa:	2302      	movs	r3, #2
 80072ac:	e021      	b.n	80072f2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d002      	beq.n	80072ba <HAL_SDRAM_SendCommand+0x2a>
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	2b05      	cmp	r3, #5
 80072b8:	d118      	bne.n	80072ec <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2202      	movs	r2, #2
 80072be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f002 f974 	bl	80095b8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d104      	bne.n	80072e2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2205      	movs	r2, #5
 80072dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80072e0:	e006      	b.n	80072f0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80072ea:	e001      	b.n	80072f0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d101      	bne.n	8007314 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007310:	2302      	movs	r3, #2
 8007312:	e016      	b.n	8007342 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b01      	cmp	r3, #1
 800731e:	d10f      	bne.n	8007340 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f002 f966 	bl	8009600 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	e000      	b.n	8007342 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e049      	b.n	80073f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d106      	bne.n	8007376 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f841 	bl	80073f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3304      	adds	r3, #4
 8007386:	4619      	mov	r1, r3
 8007388:	4610      	mov	r0, r2
 800738a:	f000 fb51 	bl	8007a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b01      	cmp	r3, #1
 800741e:	d001      	beq.n	8007424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e054      	b.n	80074ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0201 	orr.w	r2, r2, #1
 800743a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a26      	ldr	r2, [pc, #152]	@ (80074dc <HAL_TIM_Base_Start_IT+0xd0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d022      	beq.n	800748c <HAL_TIM_Base_Start_IT+0x80>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744e:	d01d      	beq.n	800748c <HAL_TIM_Base_Start_IT+0x80>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a22      	ldr	r2, [pc, #136]	@ (80074e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d018      	beq.n	800748c <HAL_TIM_Base_Start_IT+0x80>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a21      	ldr	r2, [pc, #132]	@ (80074e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d013      	beq.n	800748c <HAL_TIM_Base_Start_IT+0x80>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1f      	ldr	r2, [pc, #124]	@ (80074e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00e      	beq.n	800748c <HAL_TIM_Base_Start_IT+0x80>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1e      	ldr	r2, [pc, #120]	@ (80074ec <HAL_TIM_Base_Start_IT+0xe0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d009      	beq.n	800748c <HAL_TIM_Base_Start_IT+0x80>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1c      	ldr	r2, [pc, #112]	@ (80074f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d004      	beq.n	800748c <HAL_TIM_Base_Start_IT+0x80>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1b      	ldr	r2, [pc, #108]	@ (80074f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d115      	bne.n	80074b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	4b19      	ldr	r3, [pc, #100]	@ (80074f8 <HAL_TIM_Base_Start_IT+0xec>)
 8007494:	4013      	ands	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b06      	cmp	r3, #6
 800749c:	d015      	beq.n	80074ca <HAL_TIM_Base_Start_IT+0xbe>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a4:	d011      	beq.n	80074ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f042 0201 	orr.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b6:	e008      	b.n	80074ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0201 	orr.w	r2, r2, #1
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e000      	b.n	80074cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40010000 	.word	0x40010000
 80074e0:	40000400 	.word	0x40000400
 80074e4:	40000800 	.word	0x40000800
 80074e8:	40000c00 	.word	0x40000c00
 80074ec:	40010400 	.word	0x40010400
 80074f0:	40001800 	.word	0x40001800
 80074f4:	40014000 	.word	0x40014000
 80074f8:	00010007 	.word	0x00010007

080074fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e049      	b.n	80075a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fb f8a6 	bl	8002674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3304      	adds	r3, #4
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f000 fa78 	bl	8007a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d020      	beq.n	800760e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01b      	beq.n	800760e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f06f 0202 	mvn.w	r2, #2
 80075de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	f003 0303 	and.w	r3, r3, #3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f9fd 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 80075fa:	e005      	b.n	8007608 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f9ef 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa00 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d020      	beq.n	800765a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	d01b      	beq.n	800765a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f06f 0204 	mvn.w	r2, #4
 800762a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f9d7 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 8007646:	e005      	b.n	8007654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f9c9 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f9da 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d020      	beq.n	80076a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01b      	beq.n	80076a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f06f 0208 	mvn.w	r2, #8
 8007676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2204      	movs	r2, #4
 800767c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f9b1 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 8007692:	e005      	b.n	80076a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f9a3 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f9b4 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d020      	beq.n	80076f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f003 0310 	and.w	r3, r3, #16
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01b      	beq.n	80076f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f06f 0210 	mvn.w	r2, #16
 80076c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2208      	movs	r2, #8
 80076c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f98b 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 80076de:	e005      	b.n	80076ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f97d 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f98e 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00c      	beq.n	8007716 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f06f 0201 	mvn.w	r2, #1
 800770e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7fa fd17 	bl	8002144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007730:	2b00      	cmp	r3, #0
 8007732:	d007      	beq.n	8007744 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800773c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fd84 	bl	800824c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00c      	beq.n	8007768 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007754:	2b00      	cmp	r3, #0
 8007756:	d007      	beq.n	8007768 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fd7c 	bl	8008260 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00c      	beq.n	800778c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f948 	bl	8007a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00c      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0220 	mvn.w	r2, #32
 80077a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fd44 	bl	8008238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077b0:	bf00      	nop
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e0ff      	b.n	80079d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b14      	cmp	r3, #20
 80077e2:	f200 80f0 	bhi.w	80079c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80077e6:	a201      	add	r2, pc, #4	@ (adr r2, 80077ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	08007841 	.word	0x08007841
 80077f0:	080079c7 	.word	0x080079c7
 80077f4:	080079c7 	.word	0x080079c7
 80077f8:	080079c7 	.word	0x080079c7
 80077fc:	08007881 	.word	0x08007881
 8007800:	080079c7 	.word	0x080079c7
 8007804:	080079c7 	.word	0x080079c7
 8007808:	080079c7 	.word	0x080079c7
 800780c:	080078c3 	.word	0x080078c3
 8007810:	080079c7 	.word	0x080079c7
 8007814:	080079c7 	.word	0x080079c7
 8007818:	080079c7 	.word	0x080079c7
 800781c:	08007903 	.word	0x08007903
 8007820:	080079c7 	.word	0x080079c7
 8007824:	080079c7 	.word	0x080079c7
 8007828:	080079c7 	.word	0x080079c7
 800782c:	08007945 	.word	0x08007945
 8007830:	080079c7 	.word	0x080079c7
 8007834:	080079c7 	.word	0x080079c7
 8007838:	080079c7 	.word	0x080079c7
 800783c:	08007985 	.word	0x08007985
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f992 	bl	8007b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699a      	ldr	r2, [r3, #24]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0208 	orr.w	r2, r2, #8
 800785a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699a      	ldr	r2, [r3, #24]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0204 	bic.w	r2, r2, #4
 800786a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6999      	ldr	r1, [r3, #24]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	691a      	ldr	r2, [r3, #16]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	619a      	str	r2, [r3, #24]
      break;
 800787e:	e0a5      	b.n	80079cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fa02 	bl	8007c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800789a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	699a      	ldr	r2, [r3, #24]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6999      	ldr	r1, [r3, #24]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	021a      	lsls	r2, r3, #8
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	619a      	str	r2, [r3, #24]
      break;
 80078c0:	e084      	b.n	80079cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68b9      	ldr	r1, [r7, #8]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fa6b 	bl	8007da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0208 	orr.w	r2, r2, #8
 80078dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69da      	ldr	r2, [r3, #28]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0204 	bic.w	r2, r2, #4
 80078ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69d9      	ldr	r1, [r3, #28]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	61da      	str	r2, [r3, #28]
      break;
 8007900:	e064      	b.n	80079cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fad3 	bl	8007eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69da      	ldr	r2, [r3, #28]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800791c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69da      	ldr	r2, [r3, #28]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800792c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69d9      	ldr	r1, [r3, #28]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	021a      	lsls	r2, r3, #8
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	61da      	str	r2, [r3, #28]
      break;
 8007942:	e043      	b.n	80079cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68b9      	ldr	r1, [r7, #8]
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fb1c 	bl	8007f88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0208 	orr.w	r2, r2, #8
 800795e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0204 	bic.w	r2, r2, #4
 800796e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	691a      	ldr	r2, [r3, #16]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007982:	e023      	b.n	80079cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fb60 	bl	8008050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800799e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	021a      	lsls	r2, r3, #8
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80079c4:	e002      	b.n	80079cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
      break;
 80079ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop

080079e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a43      	ldr	r2, [pc, #268]	@ (8007b50 <TIM_Base_SetConfig+0x120>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d013      	beq.n	8007a70 <TIM_Base_SetConfig+0x40>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a4e:	d00f      	beq.n	8007a70 <TIM_Base_SetConfig+0x40>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a40      	ldr	r2, [pc, #256]	@ (8007b54 <TIM_Base_SetConfig+0x124>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00b      	beq.n	8007a70 <TIM_Base_SetConfig+0x40>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8007b58 <TIM_Base_SetConfig+0x128>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d007      	beq.n	8007a70 <TIM_Base_SetConfig+0x40>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a3e      	ldr	r2, [pc, #248]	@ (8007b5c <TIM_Base_SetConfig+0x12c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d003      	beq.n	8007a70 <TIM_Base_SetConfig+0x40>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8007b60 <TIM_Base_SetConfig+0x130>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d108      	bne.n	8007a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a32      	ldr	r2, [pc, #200]	@ (8007b50 <TIM_Base_SetConfig+0x120>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01f      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a90:	d01b      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a2f      	ldr	r2, [pc, #188]	@ (8007b54 <TIM_Base_SetConfig+0x124>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d017      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8007b58 <TIM_Base_SetConfig+0x128>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d013      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8007b5c <TIM_Base_SetConfig+0x12c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00f      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a2c      	ldr	r2, [pc, #176]	@ (8007b60 <TIM_Base_SetConfig+0x130>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00b      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8007b64 <TIM_Base_SetConfig+0x134>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d007      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a2a      	ldr	r2, [pc, #168]	@ (8007b68 <TIM_Base_SetConfig+0x138>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <TIM_Base_SetConfig+0x9a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a29      	ldr	r2, [pc, #164]	@ (8007b6c <TIM_Base_SetConfig+0x13c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d108      	bne.n	8007adc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a14      	ldr	r2, [pc, #80]	@ (8007b50 <TIM_Base_SetConfig+0x120>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00f      	beq.n	8007b22 <TIM_Base_SetConfig+0xf2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a16      	ldr	r2, [pc, #88]	@ (8007b60 <TIM_Base_SetConfig+0x130>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00b      	beq.n	8007b22 <TIM_Base_SetConfig+0xf2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a15      	ldr	r2, [pc, #84]	@ (8007b64 <TIM_Base_SetConfig+0x134>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d007      	beq.n	8007b22 <TIM_Base_SetConfig+0xf2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a14      	ldr	r2, [pc, #80]	@ (8007b68 <TIM_Base_SetConfig+0x138>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d003      	beq.n	8007b22 <TIM_Base_SetConfig+0xf2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a13      	ldr	r2, [pc, #76]	@ (8007b6c <TIM_Base_SetConfig+0x13c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d103      	bne.n	8007b2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f043 0204 	orr.w	r2, r3, #4
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	601a      	str	r2, [r3, #0]
}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40010000 	.word	0x40010000
 8007b54:	40000400 	.word	0x40000400
 8007b58:	40000800 	.word	0x40000800
 8007b5c:	40000c00 	.word	0x40000c00
 8007b60:	40010400 	.word	0x40010400
 8007b64:	40014000 	.word	0x40014000
 8007b68:	40014400 	.word	0x40014400
 8007b6c:	40014800 	.word	0x40014800

08007b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	f023 0201 	bic.w	r2, r3, #1
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4b37      	ldr	r3, [pc, #220]	@ (8007c78 <TIM_OC1_SetConfig+0x108>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f023 0302 	bic.w	r3, r3, #2
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8007c7c <TIM_OC1_SetConfig+0x10c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00f      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a2c      	ldr	r2, [pc, #176]	@ (8007c80 <TIM_OC1_SetConfig+0x110>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00b      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a2b      	ldr	r2, [pc, #172]	@ (8007c84 <TIM_OC1_SetConfig+0x114>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d007      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a2a      	ldr	r2, [pc, #168]	@ (8007c88 <TIM_OC1_SetConfig+0x118>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d003      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a29      	ldr	r2, [pc, #164]	@ (8007c8c <TIM_OC1_SetConfig+0x11c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d10c      	bne.n	8007c06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 0308 	bic.w	r3, r3, #8
 8007bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f023 0304 	bic.w	r3, r3, #4
 8007c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a1c      	ldr	r2, [pc, #112]	@ (8007c7c <TIM_OC1_SetConfig+0x10c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00f      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a1b      	ldr	r2, [pc, #108]	@ (8007c80 <TIM_OC1_SetConfig+0x110>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00b      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1a      	ldr	r2, [pc, #104]	@ (8007c84 <TIM_OC1_SetConfig+0x114>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d007      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a19      	ldr	r2, [pc, #100]	@ (8007c88 <TIM_OC1_SetConfig+0x118>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a18      	ldr	r2, [pc, #96]	@ (8007c8c <TIM_OC1_SetConfig+0x11c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d111      	bne.n	8007c52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	621a      	str	r2, [r3, #32]
}
 8007c6c:	bf00      	nop
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	fffeff8f 	.word	0xfffeff8f
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40010400 	.word	0x40010400
 8007c84:	40014000 	.word	0x40014000
 8007c88:	40014400 	.word	0x40014400
 8007c8c:	40014800 	.word	0x40014800

08007c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	f023 0210 	bic.w	r2, r3, #16
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4b34      	ldr	r3, [pc, #208]	@ (8007d8c <TIM_OC2_SetConfig+0xfc>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f023 0320 	bic.w	r3, r3, #32
 8007cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a29      	ldr	r2, [pc, #164]	@ (8007d90 <TIM_OC2_SetConfig+0x100>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_OC2_SetConfig+0x68>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a28      	ldr	r2, [pc, #160]	@ (8007d94 <TIM_OC2_SetConfig+0x104>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d10d      	bne.n	8007d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a1e      	ldr	r2, [pc, #120]	@ (8007d90 <TIM_OC2_SetConfig+0x100>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00f      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8007d94 <TIM_OC2_SetConfig+0x104>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00b      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a1c      	ldr	r2, [pc, #112]	@ (8007d98 <TIM_OC2_SetConfig+0x108>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d007      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007d9c <TIM_OC2_SetConfig+0x10c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d003      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a1a      	ldr	r2, [pc, #104]	@ (8007da0 <TIM_OC2_SetConfig+0x110>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d113      	bne.n	8007d64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	621a      	str	r2, [r3, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	feff8fff 	.word	0xfeff8fff
 8007d90:	40010000 	.word	0x40010000
 8007d94:	40010400 	.word	0x40010400
 8007d98:	40014000 	.word	0x40014000
 8007d9c:	40014400 	.word	0x40014400
 8007da0:	40014800 	.word	0x40014800

08007da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4b33      	ldr	r3, [pc, #204]	@ (8007e9c <TIM_OC3_SetConfig+0xf8>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a28      	ldr	r2, [pc, #160]	@ (8007ea0 <TIM_OC3_SetConfig+0xfc>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d003      	beq.n	8007e0a <TIM_OC3_SetConfig+0x66>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a27      	ldr	r2, [pc, #156]	@ (8007ea4 <TIM_OC3_SetConfig+0x100>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d10d      	bne.n	8007e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <TIM_OC3_SetConfig+0xfc>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00f      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a1c      	ldr	r2, [pc, #112]	@ (8007ea4 <TIM_OC3_SetConfig+0x100>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d00b      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a1b      	ldr	r2, [pc, #108]	@ (8007ea8 <TIM_OC3_SetConfig+0x104>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d007      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1a      	ldr	r2, [pc, #104]	@ (8007eac <TIM_OC3_SetConfig+0x108>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d003      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a19      	ldr	r2, [pc, #100]	@ (8007eb0 <TIM_OC3_SetConfig+0x10c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d113      	bne.n	8007e76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	621a      	str	r2, [r3, #32]
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	fffeff8f 	.word	0xfffeff8f
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40014000 	.word	0x40014000
 8007eac:	40014400 	.word	0x40014400
 8007eb0:	40014800 	.word	0x40014800

08007eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4b24      	ldr	r3, [pc, #144]	@ (8007f70 <TIM_OC4_SetConfig+0xbc>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	031b      	lsls	r3, r3, #12
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a19      	ldr	r2, [pc, #100]	@ (8007f74 <TIM_OC4_SetConfig+0xc0>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00f      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a18      	ldr	r2, [pc, #96]	@ (8007f78 <TIM_OC4_SetConfig+0xc4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00b      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a17      	ldr	r2, [pc, #92]	@ (8007f7c <TIM_OC4_SetConfig+0xc8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a16      	ldr	r2, [pc, #88]	@ (8007f80 <TIM_OC4_SetConfig+0xcc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a15      	ldr	r2, [pc, #84]	@ (8007f84 <TIM_OC4_SetConfig+0xd0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d109      	bne.n	8007f48 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	019b      	lsls	r3, r3, #6
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	621a      	str	r2, [r3, #32]
}
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	feff8fff 	.word	0xfeff8fff
 8007f74:	40010000 	.word	0x40010000
 8007f78:	40010400 	.word	0x40010400
 8007f7c:	40014000 	.word	0x40014000
 8007f80:	40014400 	.word	0x40014400
 8007f84:	40014800 	.word	0x40014800

08007f88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4b21      	ldr	r3, [pc, #132]	@ (8008038 <TIM_OC5_SetConfig+0xb0>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007fc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	041b      	lsls	r3, r3, #16
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a18      	ldr	r2, [pc, #96]	@ (800803c <TIM_OC5_SetConfig+0xb4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00f      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a17      	ldr	r2, [pc, #92]	@ (8008040 <TIM_OC5_SetConfig+0xb8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a16      	ldr	r2, [pc, #88]	@ (8008044 <TIM_OC5_SetConfig+0xbc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d007      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a15      	ldr	r2, [pc, #84]	@ (8008048 <TIM_OC5_SetConfig+0xc0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a14      	ldr	r2, [pc, #80]	@ (800804c <TIM_OC5_SetConfig+0xc4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d109      	bne.n	8008012 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	021b      	lsls	r3, r3, #8
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	621a      	str	r2, [r3, #32]
}
 800802c:	bf00      	nop
 800802e:	371c      	adds	r7, #28
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	fffeff8f 	.word	0xfffeff8f
 800803c:	40010000 	.word	0x40010000
 8008040:	40010400 	.word	0x40010400
 8008044:	40014000 	.word	0x40014000
 8008048:	40014400 	.word	0x40014400
 800804c:	40014800 	.word	0x40014800

08008050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4b22      	ldr	r3, [pc, #136]	@ (8008104 <TIM_OC6_SetConfig+0xb4>)
 800807c:	4013      	ands	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	051b      	lsls	r3, r3, #20
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a19      	ldr	r2, [pc, #100]	@ (8008108 <TIM_OC6_SetConfig+0xb8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d00f      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a18      	ldr	r2, [pc, #96]	@ (800810c <TIM_OC6_SetConfig+0xbc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00b      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a17      	ldr	r2, [pc, #92]	@ (8008110 <TIM_OC6_SetConfig+0xc0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d007      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a16      	ldr	r2, [pc, #88]	@ (8008114 <TIM_OC6_SetConfig+0xc4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d003      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a15      	ldr	r2, [pc, #84]	@ (8008118 <TIM_OC6_SetConfig+0xc8>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d109      	bne.n	80080dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	029b      	lsls	r3, r3, #10
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	621a      	str	r2, [r3, #32]
}
 80080f6:	bf00      	nop
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	feff8fff 	.word	0xfeff8fff
 8008108:	40010000 	.word	0x40010000
 800810c:	40010400 	.word	0x40010400
 8008110:	40014000 	.word	0x40014000
 8008114:	40014400 	.word	0x40014400
 8008118:	40014800 	.word	0x40014800

0800811c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800812c:	2b01      	cmp	r3, #1
 800812e:	d101      	bne.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008130:	2302      	movs	r3, #2
 8008132:	e06d      	b.n	8008210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a30      	ldr	r2, [pc, #192]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d004      	beq.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a2f      	ldr	r2, [pc, #188]	@ (8008220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d108      	bne.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800816e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008180:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a20      	ldr	r2, [pc, #128]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d022      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081a6:	d01d      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008224 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d018      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008228 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d013      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a1a      	ldr	r2, [pc, #104]	@ (800822c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00e      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a15      	ldr	r2, [pc, #84]	@ (8008220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d009      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a16      	ldr	r2, [pc, #88]	@ (8008230 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d004      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a15      	ldr	r2, [pc, #84]	@ (8008234 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d10c      	bne.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	40010000 	.word	0x40010000
 8008220:	40010400 	.word	0x40010400
 8008224:	40000400 	.word	0x40000400
 8008228:	40000800 	.word	0x40000800
 800822c:	40000c00 	.word	0x40000c00
 8008230:	40001800 	.word	0x40001800
 8008234:	40014000 	.word	0x40014000

08008238 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e042      	b.n	800830c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800828c:	2b00      	cmp	r3, #0
 800828e:	d106      	bne.n	800829e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7fa fa8f 	bl	80027bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2224      	movs	r2, #36	@ 0x24
 80082a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0201 	bic.w	r2, r2, #1
 80082b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fd90 	bl	8008de4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f825 	bl	8008314 <UART_SetConfig>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e01b      	b.n	800830c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689a      	ldr	r2, [r3, #8]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0201 	orr.w	r2, r2, #1
 8008302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fe0f 	bl	8008f28 <UART_CheckIdleState>
 800830a:	4603      	mov	r3, r0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008318:	b092      	sub	sp, #72	@ 0x48
 800831a:	af00      	add	r7, sp, #0
 800831c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	431a      	orrs	r2, r3
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	431a      	orrs	r2, r3
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	4313      	orrs	r3, r2
 800833a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	4bbe      	ldr	r3, [pc, #760]	@ (800863c <UART_SetConfig+0x328>)
 8008344:	4013      	ands	r3, r2
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800834c:	430b      	orrs	r3, r1
 800834e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	68da      	ldr	r2, [r3, #12]
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4ab3      	ldr	r2, [pc, #716]	@ (8008640 <UART_SetConfig+0x32c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d004      	beq.n	8008380 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800837c:	4313      	orrs	r3, r2
 800837e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	4baf      	ldr	r3, [pc, #700]	@ (8008644 <UART_SetConfig+0x330>)
 8008388:	4013      	ands	r3, r2
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	6812      	ldr	r2, [r2, #0]
 800838e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008390:	430b      	orrs	r3, r1
 8008392:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839a:	f023 010f 	bic.w	r1, r3, #15
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4aa6      	ldr	r2, [pc, #664]	@ (8008648 <UART_SetConfig+0x334>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d177      	bne.n	80084a4 <UART_SetConfig+0x190>
 80083b4:	4ba5      	ldr	r3, [pc, #660]	@ (800864c <UART_SetConfig+0x338>)
 80083b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083bc:	2b28      	cmp	r3, #40	@ 0x28
 80083be:	d86d      	bhi.n	800849c <UART_SetConfig+0x188>
 80083c0:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <UART_SetConfig+0xb4>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	0800846d 	.word	0x0800846d
 80083cc:	0800849d 	.word	0x0800849d
 80083d0:	0800849d 	.word	0x0800849d
 80083d4:	0800849d 	.word	0x0800849d
 80083d8:	0800849d 	.word	0x0800849d
 80083dc:	0800849d 	.word	0x0800849d
 80083e0:	0800849d 	.word	0x0800849d
 80083e4:	0800849d 	.word	0x0800849d
 80083e8:	08008475 	.word	0x08008475
 80083ec:	0800849d 	.word	0x0800849d
 80083f0:	0800849d 	.word	0x0800849d
 80083f4:	0800849d 	.word	0x0800849d
 80083f8:	0800849d 	.word	0x0800849d
 80083fc:	0800849d 	.word	0x0800849d
 8008400:	0800849d 	.word	0x0800849d
 8008404:	0800849d 	.word	0x0800849d
 8008408:	0800847d 	.word	0x0800847d
 800840c:	0800849d 	.word	0x0800849d
 8008410:	0800849d 	.word	0x0800849d
 8008414:	0800849d 	.word	0x0800849d
 8008418:	0800849d 	.word	0x0800849d
 800841c:	0800849d 	.word	0x0800849d
 8008420:	0800849d 	.word	0x0800849d
 8008424:	0800849d 	.word	0x0800849d
 8008428:	08008485 	.word	0x08008485
 800842c:	0800849d 	.word	0x0800849d
 8008430:	0800849d 	.word	0x0800849d
 8008434:	0800849d 	.word	0x0800849d
 8008438:	0800849d 	.word	0x0800849d
 800843c:	0800849d 	.word	0x0800849d
 8008440:	0800849d 	.word	0x0800849d
 8008444:	0800849d 	.word	0x0800849d
 8008448:	0800848d 	.word	0x0800848d
 800844c:	0800849d 	.word	0x0800849d
 8008450:	0800849d 	.word	0x0800849d
 8008454:	0800849d 	.word	0x0800849d
 8008458:	0800849d 	.word	0x0800849d
 800845c:	0800849d 	.word	0x0800849d
 8008460:	0800849d 	.word	0x0800849d
 8008464:	0800849d 	.word	0x0800849d
 8008468:	08008495 	.word	0x08008495
 800846c:	2301      	movs	r3, #1
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008472:	e222      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008474:	2304      	movs	r3, #4
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847a:	e21e      	b.n	80088ba <UART_SetConfig+0x5a6>
 800847c:	2308      	movs	r3, #8
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e21a      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008484:	2310      	movs	r3, #16
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e216      	b.n	80088ba <UART_SetConfig+0x5a6>
 800848c:	2320      	movs	r3, #32
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008492:	e212      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008494:	2340      	movs	r3, #64	@ 0x40
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849a:	e20e      	b.n	80088ba <UART_SetConfig+0x5a6>
 800849c:	2380      	movs	r3, #128	@ 0x80
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a2:	e20a      	b.n	80088ba <UART_SetConfig+0x5a6>
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a69      	ldr	r2, [pc, #420]	@ (8008650 <UART_SetConfig+0x33c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d130      	bne.n	8008510 <UART_SetConfig+0x1fc>
 80084ae:	4b67      	ldr	r3, [pc, #412]	@ (800864c <UART_SetConfig+0x338>)
 80084b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b05      	cmp	r3, #5
 80084b8:	d826      	bhi.n	8008508 <UART_SetConfig+0x1f4>
 80084ba:	a201      	add	r2, pc, #4	@ (adr r2, 80084c0 <UART_SetConfig+0x1ac>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	080084d9 	.word	0x080084d9
 80084c4:	080084e1 	.word	0x080084e1
 80084c8:	080084e9 	.word	0x080084e9
 80084cc:	080084f1 	.word	0x080084f1
 80084d0:	080084f9 	.word	0x080084f9
 80084d4:	08008501 	.word	0x08008501
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084de:	e1ec      	b.n	80088ba <UART_SetConfig+0x5a6>
 80084e0:	2304      	movs	r3, #4
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e6:	e1e8      	b.n	80088ba <UART_SetConfig+0x5a6>
 80084e8:	2308      	movs	r3, #8
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ee:	e1e4      	b.n	80088ba <UART_SetConfig+0x5a6>
 80084f0:	2310      	movs	r3, #16
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f6:	e1e0      	b.n	80088ba <UART_SetConfig+0x5a6>
 80084f8:	2320      	movs	r3, #32
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fe:	e1dc      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008500:	2340      	movs	r3, #64	@ 0x40
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008506:	e1d8      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008508:	2380      	movs	r3, #128	@ 0x80
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850e:	e1d4      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a4f      	ldr	r2, [pc, #316]	@ (8008654 <UART_SetConfig+0x340>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d130      	bne.n	800857c <UART_SetConfig+0x268>
 800851a:	4b4c      	ldr	r3, [pc, #304]	@ (800864c <UART_SetConfig+0x338>)
 800851c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851e:	f003 0307 	and.w	r3, r3, #7
 8008522:	2b05      	cmp	r3, #5
 8008524:	d826      	bhi.n	8008574 <UART_SetConfig+0x260>
 8008526:	a201      	add	r2, pc, #4	@ (adr r2, 800852c <UART_SetConfig+0x218>)
 8008528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852c:	08008545 	.word	0x08008545
 8008530:	0800854d 	.word	0x0800854d
 8008534:	08008555 	.word	0x08008555
 8008538:	0800855d 	.word	0x0800855d
 800853c:	08008565 	.word	0x08008565
 8008540:	0800856d 	.word	0x0800856d
 8008544:	2300      	movs	r3, #0
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854a:	e1b6      	b.n	80088ba <UART_SetConfig+0x5a6>
 800854c:	2304      	movs	r3, #4
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008552:	e1b2      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008554:	2308      	movs	r3, #8
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855a:	e1ae      	b.n	80088ba <UART_SetConfig+0x5a6>
 800855c:	2310      	movs	r3, #16
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008562:	e1aa      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008564:	2320      	movs	r3, #32
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856a:	e1a6      	b.n	80088ba <UART_SetConfig+0x5a6>
 800856c:	2340      	movs	r3, #64	@ 0x40
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008572:	e1a2      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008574:	2380      	movs	r3, #128	@ 0x80
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857a:	e19e      	b.n	80088ba <UART_SetConfig+0x5a6>
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a35      	ldr	r2, [pc, #212]	@ (8008658 <UART_SetConfig+0x344>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d130      	bne.n	80085e8 <UART_SetConfig+0x2d4>
 8008586:	4b31      	ldr	r3, [pc, #196]	@ (800864c <UART_SetConfig+0x338>)
 8008588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858a:	f003 0307 	and.w	r3, r3, #7
 800858e:	2b05      	cmp	r3, #5
 8008590:	d826      	bhi.n	80085e0 <UART_SetConfig+0x2cc>
 8008592:	a201      	add	r2, pc, #4	@ (adr r2, 8008598 <UART_SetConfig+0x284>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	080085b1 	.word	0x080085b1
 800859c:	080085b9 	.word	0x080085b9
 80085a0:	080085c1 	.word	0x080085c1
 80085a4:	080085c9 	.word	0x080085c9
 80085a8:	080085d1 	.word	0x080085d1
 80085ac:	080085d9 	.word	0x080085d9
 80085b0:	2300      	movs	r3, #0
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e180      	b.n	80088ba <UART_SetConfig+0x5a6>
 80085b8:	2304      	movs	r3, #4
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085be:	e17c      	b.n	80088ba <UART_SetConfig+0x5a6>
 80085c0:	2308      	movs	r3, #8
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c6:	e178      	b.n	80088ba <UART_SetConfig+0x5a6>
 80085c8:	2310      	movs	r3, #16
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ce:	e174      	b.n	80088ba <UART_SetConfig+0x5a6>
 80085d0:	2320      	movs	r3, #32
 80085d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085d6:	e170      	b.n	80088ba <UART_SetConfig+0x5a6>
 80085d8:	2340      	movs	r3, #64	@ 0x40
 80085da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085de:	e16c      	b.n	80088ba <UART_SetConfig+0x5a6>
 80085e0:	2380      	movs	r3, #128	@ 0x80
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e6:	e168      	b.n	80088ba <UART_SetConfig+0x5a6>
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a1b      	ldr	r2, [pc, #108]	@ (800865c <UART_SetConfig+0x348>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d142      	bne.n	8008678 <UART_SetConfig+0x364>
 80085f2:	4b16      	ldr	r3, [pc, #88]	@ (800864c <UART_SetConfig+0x338>)
 80085f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	2b05      	cmp	r3, #5
 80085fc:	d838      	bhi.n	8008670 <UART_SetConfig+0x35c>
 80085fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008604 <UART_SetConfig+0x2f0>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	0800861d 	.word	0x0800861d
 8008608:	08008625 	.word	0x08008625
 800860c:	0800862d 	.word	0x0800862d
 8008610:	08008635 	.word	0x08008635
 8008614:	08008661 	.word	0x08008661
 8008618:	08008669 	.word	0x08008669
 800861c:	2300      	movs	r3, #0
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e14a      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008624:	2304      	movs	r3, #4
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e146      	b.n	80088ba <UART_SetConfig+0x5a6>
 800862c:	2308      	movs	r3, #8
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008632:	e142      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008634:	2310      	movs	r3, #16
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863a:	e13e      	b.n	80088ba <UART_SetConfig+0x5a6>
 800863c:	cfff69f3 	.word	0xcfff69f3
 8008640:	58000c00 	.word	0x58000c00
 8008644:	11fff4ff 	.word	0x11fff4ff
 8008648:	40011000 	.word	0x40011000
 800864c:	58024400 	.word	0x58024400
 8008650:	40004400 	.word	0x40004400
 8008654:	40004800 	.word	0x40004800
 8008658:	40004c00 	.word	0x40004c00
 800865c:	40005000 	.word	0x40005000
 8008660:	2320      	movs	r3, #32
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e128      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008668:	2340      	movs	r3, #64	@ 0x40
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e124      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008670:	2380      	movs	r3, #128	@ 0x80
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e120      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4acb      	ldr	r2, [pc, #812]	@ (80089ac <UART_SetConfig+0x698>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d176      	bne.n	8008770 <UART_SetConfig+0x45c>
 8008682:	4bcb      	ldr	r3, [pc, #812]	@ (80089b0 <UART_SetConfig+0x69c>)
 8008684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800868a:	2b28      	cmp	r3, #40	@ 0x28
 800868c:	d86c      	bhi.n	8008768 <UART_SetConfig+0x454>
 800868e:	a201      	add	r2, pc, #4	@ (adr r2, 8008694 <UART_SetConfig+0x380>)
 8008690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008694:	08008739 	.word	0x08008739
 8008698:	08008769 	.word	0x08008769
 800869c:	08008769 	.word	0x08008769
 80086a0:	08008769 	.word	0x08008769
 80086a4:	08008769 	.word	0x08008769
 80086a8:	08008769 	.word	0x08008769
 80086ac:	08008769 	.word	0x08008769
 80086b0:	08008769 	.word	0x08008769
 80086b4:	08008741 	.word	0x08008741
 80086b8:	08008769 	.word	0x08008769
 80086bc:	08008769 	.word	0x08008769
 80086c0:	08008769 	.word	0x08008769
 80086c4:	08008769 	.word	0x08008769
 80086c8:	08008769 	.word	0x08008769
 80086cc:	08008769 	.word	0x08008769
 80086d0:	08008769 	.word	0x08008769
 80086d4:	08008749 	.word	0x08008749
 80086d8:	08008769 	.word	0x08008769
 80086dc:	08008769 	.word	0x08008769
 80086e0:	08008769 	.word	0x08008769
 80086e4:	08008769 	.word	0x08008769
 80086e8:	08008769 	.word	0x08008769
 80086ec:	08008769 	.word	0x08008769
 80086f0:	08008769 	.word	0x08008769
 80086f4:	08008751 	.word	0x08008751
 80086f8:	08008769 	.word	0x08008769
 80086fc:	08008769 	.word	0x08008769
 8008700:	08008769 	.word	0x08008769
 8008704:	08008769 	.word	0x08008769
 8008708:	08008769 	.word	0x08008769
 800870c:	08008769 	.word	0x08008769
 8008710:	08008769 	.word	0x08008769
 8008714:	08008759 	.word	0x08008759
 8008718:	08008769 	.word	0x08008769
 800871c:	08008769 	.word	0x08008769
 8008720:	08008769 	.word	0x08008769
 8008724:	08008769 	.word	0x08008769
 8008728:	08008769 	.word	0x08008769
 800872c:	08008769 	.word	0x08008769
 8008730:	08008769 	.word	0x08008769
 8008734:	08008761 	.word	0x08008761
 8008738:	2301      	movs	r3, #1
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873e:	e0bc      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008740:	2304      	movs	r3, #4
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e0b8      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008748:	2308      	movs	r3, #8
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800874e:	e0b4      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008750:	2310      	movs	r3, #16
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008756:	e0b0      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008758:	2320      	movs	r3, #32
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875e:	e0ac      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008760:	2340      	movs	r3, #64	@ 0x40
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008766:	e0a8      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008768:	2380      	movs	r3, #128	@ 0x80
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876e:	e0a4      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a8f      	ldr	r2, [pc, #572]	@ (80089b4 <UART_SetConfig+0x6a0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d130      	bne.n	80087dc <UART_SetConfig+0x4c8>
 800877a:	4b8d      	ldr	r3, [pc, #564]	@ (80089b0 <UART_SetConfig+0x69c>)
 800877c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	2b05      	cmp	r3, #5
 8008784:	d826      	bhi.n	80087d4 <UART_SetConfig+0x4c0>
 8008786:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <UART_SetConfig+0x478>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	080087a5 	.word	0x080087a5
 8008790:	080087ad 	.word	0x080087ad
 8008794:	080087b5 	.word	0x080087b5
 8008798:	080087bd 	.word	0x080087bd
 800879c:	080087c5 	.word	0x080087c5
 80087a0:	080087cd 	.word	0x080087cd
 80087a4:	2300      	movs	r3, #0
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087aa:	e086      	b.n	80088ba <UART_SetConfig+0x5a6>
 80087ac:	2304      	movs	r3, #4
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b2:	e082      	b.n	80088ba <UART_SetConfig+0x5a6>
 80087b4:	2308      	movs	r3, #8
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ba:	e07e      	b.n	80088ba <UART_SetConfig+0x5a6>
 80087bc:	2310      	movs	r3, #16
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c2:	e07a      	b.n	80088ba <UART_SetConfig+0x5a6>
 80087c4:	2320      	movs	r3, #32
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ca:	e076      	b.n	80088ba <UART_SetConfig+0x5a6>
 80087cc:	2340      	movs	r3, #64	@ 0x40
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d2:	e072      	b.n	80088ba <UART_SetConfig+0x5a6>
 80087d4:	2380      	movs	r3, #128	@ 0x80
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087da:	e06e      	b.n	80088ba <UART_SetConfig+0x5a6>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a75      	ldr	r2, [pc, #468]	@ (80089b8 <UART_SetConfig+0x6a4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d130      	bne.n	8008848 <UART_SetConfig+0x534>
 80087e6:	4b72      	ldr	r3, [pc, #456]	@ (80089b0 <UART_SetConfig+0x69c>)
 80087e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ea:	f003 0307 	and.w	r3, r3, #7
 80087ee:	2b05      	cmp	r3, #5
 80087f0:	d826      	bhi.n	8008840 <UART_SetConfig+0x52c>
 80087f2:	a201      	add	r2, pc, #4	@ (adr r2, 80087f8 <UART_SetConfig+0x4e4>)
 80087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f8:	08008811 	.word	0x08008811
 80087fc:	08008819 	.word	0x08008819
 8008800:	08008821 	.word	0x08008821
 8008804:	08008829 	.word	0x08008829
 8008808:	08008831 	.word	0x08008831
 800880c:	08008839 	.word	0x08008839
 8008810:	2300      	movs	r3, #0
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008816:	e050      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008818:	2304      	movs	r3, #4
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800881e:	e04c      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008820:	2308      	movs	r3, #8
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008826:	e048      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008828:	2310      	movs	r3, #16
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800882e:	e044      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008830:	2320      	movs	r3, #32
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008836:	e040      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008838:	2340      	movs	r3, #64	@ 0x40
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883e:	e03c      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008840:	2380      	movs	r3, #128	@ 0x80
 8008842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008846:	e038      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a5b      	ldr	r2, [pc, #364]	@ (80089bc <UART_SetConfig+0x6a8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d130      	bne.n	80088b4 <UART_SetConfig+0x5a0>
 8008852:	4b57      	ldr	r3, [pc, #348]	@ (80089b0 <UART_SetConfig+0x69c>)
 8008854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b05      	cmp	r3, #5
 800885c:	d826      	bhi.n	80088ac <UART_SetConfig+0x598>
 800885e:	a201      	add	r2, pc, #4	@ (adr r2, 8008864 <UART_SetConfig+0x550>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	0800887d 	.word	0x0800887d
 8008868:	08008885 	.word	0x08008885
 800886c:	0800888d 	.word	0x0800888d
 8008870:	08008895 	.word	0x08008895
 8008874:	0800889d 	.word	0x0800889d
 8008878:	080088a5 	.word	0x080088a5
 800887c:	2302      	movs	r3, #2
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008882:	e01a      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008884:	2304      	movs	r3, #4
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888a:	e016      	b.n	80088ba <UART_SetConfig+0x5a6>
 800888c:	2308      	movs	r3, #8
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008892:	e012      	b.n	80088ba <UART_SetConfig+0x5a6>
 8008894:	2310      	movs	r3, #16
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889a:	e00e      	b.n	80088ba <UART_SetConfig+0x5a6>
 800889c:	2320      	movs	r3, #32
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a2:	e00a      	b.n	80088ba <UART_SetConfig+0x5a6>
 80088a4:	2340      	movs	r3, #64	@ 0x40
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088aa:	e006      	b.n	80088ba <UART_SetConfig+0x5a6>
 80088ac:	2380      	movs	r3, #128	@ 0x80
 80088ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088b2:	e002      	b.n	80088ba <UART_SetConfig+0x5a6>
 80088b4:	2380      	movs	r3, #128	@ 0x80
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a3f      	ldr	r2, [pc, #252]	@ (80089bc <UART_SetConfig+0x6a8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	f040 80f8 	bne.w	8008ab6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	dc46      	bgt.n	800895c <UART_SetConfig+0x648>
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	f2c0 8082 	blt.w	80089d8 <UART_SetConfig+0x6c4>
 80088d4:	3b02      	subs	r3, #2
 80088d6:	2b1e      	cmp	r3, #30
 80088d8:	d87e      	bhi.n	80089d8 <UART_SetConfig+0x6c4>
 80088da:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <UART_SetConfig+0x5cc>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	08008963 	.word	0x08008963
 80088e4:	080089d9 	.word	0x080089d9
 80088e8:	0800896b 	.word	0x0800896b
 80088ec:	080089d9 	.word	0x080089d9
 80088f0:	080089d9 	.word	0x080089d9
 80088f4:	080089d9 	.word	0x080089d9
 80088f8:	0800897b 	.word	0x0800897b
 80088fc:	080089d9 	.word	0x080089d9
 8008900:	080089d9 	.word	0x080089d9
 8008904:	080089d9 	.word	0x080089d9
 8008908:	080089d9 	.word	0x080089d9
 800890c:	080089d9 	.word	0x080089d9
 8008910:	080089d9 	.word	0x080089d9
 8008914:	080089d9 	.word	0x080089d9
 8008918:	0800898b 	.word	0x0800898b
 800891c:	080089d9 	.word	0x080089d9
 8008920:	080089d9 	.word	0x080089d9
 8008924:	080089d9 	.word	0x080089d9
 8008928:	080089d9 	.word	0x080089d9
 800892c:	080089d9 	.word	0x080089d9
 8008930:	080089d9 	.word	0x080089d9
 8008934:	080089d9 	.word	0x080089d9
 8008938:	080089d9 	.word	0x080089d9
 800893c:	080089d9 	.word	0x080089d9
 8008940:	080089d9 	.word	0x080089d9
 8008944:	080089d9 	.word	0x080089d9
 8008948:	080089d9 	.word	0x080089d9
 800894c:	080089d9 	.word	0x080089d9
 8008950:	080089d9 	.word	0x080089d9
 8008954:	080089d9 	.word	0x080089d9
 8008958:	080089cb 	.word	0x080089cb
 800895c:	2b40      	cmp	r3, #64	@ 0x40
 800895e:	d037      	beq.n	80089d0 <UART_SetConfig+0x6bc>
 8008960:	e03a      	b.n	80089d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008962:	f7fe f837 	bl	80069d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008966:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008968:	e03c      	b.n	80089e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800896a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe f846 	bl	8006a00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008978:	e034      	b.n	80089e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800897a:	f107 0318 	add.w	r3, r7, #24
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe f992 	bl	8006ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008988:	e02c      	b.n	80089e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800898a:	4b09      	ldr	r3, [pc, #36]	@ (80089b0 <UART_SetConfig+0x69c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0320 	and.w	r3, r3, #32
 8008992:	2b00      	cmp	r3, #0
 8008994:	d016      	beq.n	80089c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008996:	4b06      	ldr	r3, [pc, #24]	@ (80089b0 <UART_SetConfig+0x69c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	08db      	lsrs	r3, r3, #3
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	4a07      	ldr	r2, [pc, #28]	@ (80089c0 <UART_SetConfig+0x6ac>)
 80089a2:	fa22 f303 	lsr.w	r3, r2, r3
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089a8:	e01c      	b.n	80089e4 <UART_SetConfig+0x6d0>
 80089aa:	bf00      	nop
 80089ac:	40011400 	.word	0x40011400
 80089b0:	58024400 	.word	0x58024400
 80089b4:	40007800 	.word	0x40007800
 80089b8:	40007c00 	.word	0x40007c00
 80089bc:	58000c00 	.word	0x58000c00
 80089c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80089c4:	4b9d      	ldr	r3, [pc, #628]	@ (8008c3c <UART_SetConfig+0x928>)
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c8:	e00c      	b.n	80089e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089ca:	4b9d      	ldr	r3, [pc, #628]	@ (8008c40 <UART_SetConfig+0x92c>)
 80089cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ce:	e009      	b.n	80089e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089d6:	e005      	b.n	80089e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80089e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 81de 	beq.w	8008da8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f0:	4a94      	ldr	r2, [pc, #592]	@ (8008c44 <UART_SetConfig+0x930>)
 80089f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089f6:	461a      	mov	r2, r3
 80089f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80089fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	4613      	mov	r3, r2
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	4413      	add	r3, r2
 8008a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d305      	bcc.n	8008a1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d903      	bls.n	8008a24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a22:	e1c1      	b.n	8008da8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a26:	2200      	movs	r2, #0
 8008a28:	60bb      	str	r3, [r7, #8]
 8008a2a:	60fa      	str	r2, [r7, #12]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a30:	4a84      	ldr	r2, [pc, #528]	@ (8008c44 <UART_SetConfig+0x930>)
 8008a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	2200      	movs	r2, #0
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a46:	f7f7 fe57 	bl	80006f8 <__aeabi_uldivmod>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4610      	mov	r0, r2
 8008a50:	4619      	mov	r1, r3
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	020b      	lsls	r3, r1, #8
 8008a5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a60:	0202      	lsls	r2, r0, #8
 8008a62:	6979      	ldr	r1, [r7, #20]
 8008a64:	6849      	ldr	r1, [r1, #4]
 8008a66:	0849      	lsrs	r1, r1, #1
 8008a68:	2000      	movs	r0, #0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	eb12 0804 	adds.w	r8, r2, r4
 8008a72:	eb43 0905 	adc.w	r9, r3, r5
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	469a      	mov	sl, r3
 8008a7e:	4693      	mov	fp, r2
 8008a80:	4652      	mov	r2, sl
 8008a82:	465b      	mov	r3, fp
 8008a84:	4640      	mov	r0, r8
 8008a86:	4649      	mov	r1, r9
 8008a88:	f7f7 fe36 	bl	80006f8 <__aeabi_uldivmod>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4613      	mov	r3, r2
 8008a92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a9a:	d308      	bcc.n	8008aae <UART_SetConfig+0x79a>
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aa2:	d204      	bcs.n	8008aae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008aaa:	60da      	str	r2, [r3, #12]
 8008aac:	e17c      	b.n	8008da8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ab4:	e178      	b.n	8008da8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008abe:	f040 80c5 	bne.w	8008c4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008ac2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	dc48      	bgt.n	8008b5c <UART_SetConfig+0x848>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	db7b      	blt.n	8008bc6 <UART_SetConfig+0x8b2>
 8008ace:	2b20      	cmp	r3, #32
 8008ad0:	d879      	bhi.n	8008bc6 <UART_SetConfig+0x8b2>
 8008ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad8 <UART_SetConfig+0x7c4>)
 8008ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad8:	08008b63 	.word	0x08008b63
 8008adc:	08008b6b 	.word	0x08008b6b
 8008ae0:	08008bc7 	.word	0x08008bc7
 8008ae4:	08008bc7 	.word	0x08008bc7
 8008ae8:	08008b73 	.word	0x08008b73
 8008aec:	08008bc7 	.word	0x08008bc7
 8008af0:	08008bc7 	.word	0x08008bc7
 8008af4:	08008bc7 	.word	0x08008bc7
 8008af8:	08008b83 	.word	0x08008b83
 8008afc:	08008bc7 	.word	0x08008bc7
 8008b00:	08008bc7 	.word	0x08008bc7
 8008b04:	08008bc7 	.word	0x08008bc7
 8008b08:	08008bc7 	.word	0x08008bc7
 8008b0c:	08008bc7 	.word	0x08008bc7
 8008b10:	08008bc7 	.word	0x08008bc7
 8008b14:	08008bc7 	.word	0x08008bc7
 8008b18:	08008b93 	.word	0x08008b93
 8008b1c:	08008bc7 	.word	0x08008bc7
 8008b20:	08008bc7 	.word	0x08008bc7
 8008b24:	08008bc7 	.word	0x08008bc7
 8008b28:	08008bc7 	.word	0x08008bc7
 8008b2c:	08008bc7 	.word	0x08008bc7
 8008b30:	08008bc7 	.word	0x08008bc7
 8008b34:	08008bc7 	.word	0x08008bc7
 8008b38:	08008bc7 	.word	0x08008bc7
 8008b3c:	08008bc7 	.word	0x08008bc7
 8008b40:	08008bc7 	.word	0x08008bc7
 8008b44:	08008bc7 	.word	0x08008bc7
 8008b48:	08008bc7 	.word	0x08008bc7
 8008b4c:	08008bc7 	.word	0x08008bc7
 8008b50:	08008bc7 	.word	0x08008bc7
 8008b54:	08008bc7 	.word	0x08008bc7
 8008b58:	08008bb9 	.word	0x08008bb9
 8008b5c:	2b40      	cmp	r3, #64	@ 0x40
 8008b5e:	d02e      	beq.n	8008bbe <UART_SetConfig+0x8aa>
 8008b60:	e031      	b.n	8008bc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b62:	f7fc fcbf 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 8008b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b68:	e033      	b.n	8008bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b6a:	f7fc fcd1 	bl	8005510 <HAL_RCC_GetPCLK2Freq>
 8008b6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b70:	e02f      	b.n	8008bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fd ff42 	bl	8006a00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b80:	e027      	b.n	8008bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b82:	f107 0318 	add.w	r3, r7, #24
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe f88e 	bl	8006ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b90:	e01f      	b.n	8008bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b92:	4b2d      	ldr	r3, [pc, #180]	@ (8008c48 <UART_SetConfig+0x934>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d009      	beq.n	8008bb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8008c48 <UART_SetConfig+0x934>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	08db      	lsrs	r3, r3, #3
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	4a24      	ldr	r2, [pc, #144]	@ (8008c3c <UART_SetConfig+0x928>)
 8008baa:	fa22 f303 	lsr.w	r3, r2, r3
 8008bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bb0:	e00f      	b.n	8008bd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008bb2:	4b22      	ldr	r3, [pc, #136]	@ (8008c3c <UART_SetConfig+0x928>)
 8008bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bb6:	e00c      	b.n	8008bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bb8:	4b21      	ldr	r3, [pc, #132]	@ (8008c40 <UART_SetConfig+0x92c>)
 8008bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bbc:	e009      	b.n	8008bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bc4:	e005      	b.n	8008bd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 80e7 	beq.w	8008da8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bde:	4a19      	ldr	r2, [pc, #100]	@ (8008c44 <UART_SetConfig+0x930>)
 8008be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be4:	461a      	mov	r2, r3
 8008be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bec:	005a      	lsls	r2, r3, #1
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	085b      	lsrs	r3, r3, #1
 8008bf4:	441a      	add	r2, r3
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c02:	2b0f      	cmp	r3, #15
 8008c04:	d916      	bls.n	8008c34 <UART_SetConfig+0x920>
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c0c:	d212      	bcs.n	8008c34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f023 030f 	bic.w	r3, r3, #15
 8008c16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c26:	4313      	orrs	r3, r2
 8008c28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008c30:	60da      	str	r2, [r3, #12]
 8008c32:	e0b9      	b.n	8008da8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c3a:	e0b5      	b.n	8008da8 <UART_SetConfig+0xa94>
 8008c3c:	03d09000 	.word	0x03d09000
 8008c40:	003d0900 	.word	0x003d0900
 8008c44:	0802afb4 	.word	0x0802afb4
 8008c48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	dc49      	bgt.n	8008ce8 <UART_SetConfig+0x9d4>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	db7c      	blt.n	8008d52 <UART_SetConfig+0xa3e>
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	d87a      	bhi.n	8008d52 <UART_SetConfig+0xa3e>
 8008c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c64 <UART_SetConfig+0x950>)
 8008c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c62:	bf00      	nop
 8008c64:	08008cef 	.word	0x08008cef
 8008c68:	08008cf7 	.word	0x08008cf7
 8008c6c:	08008d53 	.word	0x08008d53
 8008c70:	08008d53 	.word	0x08008d53
 8008c74:	08008cff 	.word	0x08008cff
 8008c78:	08008d53 	.word	0x08008d53
 8008c7c:	08008d53 	.word	0x08008d53
 8008c80:	08008d53 	.word	0x08008d53
 8008c84:	08008d0f 	.word	0x08008d0f
 8008c88:	08008d53 	.word	0x08008d53
 8008c8c:	08008d53 	.word	0x08008d53
 8008c90:	08008d53 	.word	0x08008d53
 8008c94:	08008d53 	.word	0x08008d53
 8008c98:	08008d53 	.word	0x08008d53
 8008c9c:	08008d53 	.word	0x08008d53
 8008ca0:	08008d53 	.word	0x08008d53
 8008ca4:	08008d1f 	.word	0x08008d1f
 8008ca8:	08008d53 	.word	0x08008d53
 8008cac:	08008d53 	.word	0x08008d53
 8008cb0:	08008d53 	.word	0x08008d53
 8008cb4:	08008d53 	.word	0x08008d53
 8008cb8:	08008d53 	.word	0x08008d53
 8008cbc:	08008d53 	.word	0x08008d53
 8008cc0:	08008d53 	.word	0x08008d53
 8008cc4:	08008d53 	.word	0x08008d53
 8008cc8:	08008d53 	.word	0x08008d53
 8008ccc:	08008d53 	.word	0x08008d53
 8008cd0:	08008d53 	.word	0x08008d53
 8008cd4:	08008d53 	.word	0x08008d53
 8008cd8:	08008d53 	.word	0x08008d53
 8008cdc:	08008d53 	.word	0x08008d53
 8008ce0:	08008d53 	.word	0x08008d53
 8008ce4:	08008d45 	.word	0x08008d45
 8008ce8:	2b40      	cmp	r3, #64	@ 0x40
 8008cea:	d02e      	beq.n	8008d4a <UART_SetConfig+0xa36>
 8008cec:	e031      	b.n	8008d52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cee:	f7fc fbf9 	bl	80054e4 <HAL_RCC_GetPCLK1Freq>
 8008cf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cf4:	e033      	b.n	8008d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cf6:	f7fc fc0b 	bl	8005510 <HAL_RCC_GetPCLK2Freq>
 8008cfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cfc:	e02f      	b.n	8008d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fd fe7c 	bl	8006a00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d0c:	e027      	b.n	8008d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d0e:	f107 0318 	add.w	r3, r7, #24
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fd ffc8 	bl	8006ca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d1c:	e01f      	b.n	8008d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8008dd4 <UART_SetConfig+0xac0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d009      	beq.n	8008d3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8008dd4 <UART_SetConfig+0xac0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	08db      	lsrs	r3, r3, #3
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	4a28      	ldr	r2, [pc, #160]	@ (8008dd8 <UART_SetConfig+0xac4>)
 8008d36:	fa22 f303 	lsr.w	r3, r2, r3
 8008d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d3c:	e00f      	b.n	8008d5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008d3e:	4b26      	ldr	r3, [pc, #152]	@ (8008dd8 <UART_SetConfig+0xac4>)
 8008d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d42:	e00c      	b.n	8008d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d44:	4b25      	ldr	r3, [pc, #148]	@ (8008ddc <UART_SetConfig+0xac8>)
 8008d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d48:	e009      	b.n	8008d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d50:	e005      	b.n	8008d5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d5c:	bf00      	nop
    }

    if (pclk != 0U)
 8008d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d021      	beq.n	8008da8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d68:	4a1d      	ldr	r2, [pc, #116]	@ (8008de0 <UART_SetConfig+0xacc>)
 8008d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d72:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	085b      	lsrs	r3, r3, #1
 8008d7c:	441a      	add	r2, r3
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8a:	2b0f      	cmp	r3, #15
 8008d8c:	d909      	bls.n	8008da2 <UART_SetConfig+0xa8e>
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d94:	d205      	bcs.n	8008da2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	60da      	str	r2, [r3, #12]
 8008da0:	e002      	b.n	8008da8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008dc4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3748      	adds	r7, #72	@ 0x48
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dd2:	bf00      	nop
 8008dd4:	58024400 	.word	0x58024400
 8008dd8:	03d09000 	.word	0x03d09000
 8008ddc:	003d0900 	.word	0x003d0900
 8008de0:	0802afb4 	.word	0x0802afb4

08008de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00a      	beq.n	8008e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e34:	f003 0302 	and.w	r3, r3, #2
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00a      	beq.n	8008e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9a:	f003 0320 	and.w	r3, r3, #32
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01a      	beq.n	8008efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ee2:	d10a      	bne.n	8008efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	605a      	str	r2, [r3, #4]
  }
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b098      	sub	sp, #96	@ 0x60
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f38:	f7f9 fe7c 	bl	8002c34 <HAL_GetTick>
 8008f3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b08      	cmp	r3, #8
 8008f4a:	d12f      	bne.n	8008fac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f54:	2200      	movs	r2, #0
 8008f56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f88e 	bl	800907c <UART_WaitOnFlagUntilTimeout>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d022      	beq.n	8008fac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e6      	bne.n	8008f66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e063      	b.n	8009074 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b04      	cmp	r3, #4
 8008fb8:	d149      	bne.n	800904e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f857 	bl	800907c <UART_WaitOnFlagUntilTimeout>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d03c      	beq.n	800904e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8008fe2:	6a3b      	ldr	r3, [r7, #32]
 8008fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ff4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e6      	bne.n	8008fd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3308      	adds	r3, #8
 800900c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	e853 3f00 	ldrex	r3, [r3]
 8009014:	60fb      	str	r3, [r7, #12]
   return(result);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f023 0301 	bic.w	r3, r3, #1
 800901c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3308      	adds	r3, #8
 8009024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009026:	61fa      	str	r2, [r7, #28]
 8009028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	69b9      	ldr	r1, [r7, #24]
 800902c:	69fa      	ldr	r2, [r7, #28]
 800902e:	e841 2300 	strex	r3, r2, [r1]
 8009032:	617b      	str	r3, [r7, #20]
   return(result);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1e5      	bne.n	8009006 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2220      	movs	r2, #32
 800903e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e012      	b.n	8009074 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2220      	movs	r2, #32
 8009052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2220      	movs	r2, #32
 800905a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3758      	adds	r7, #88	@ 0x58
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	603b      	str	r3, [r7, #0]
 8009088:	4613      	mov	r3, r2
 800908a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800908c:	e04f      	b.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d04b      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009096:	f7f9 fdcd 	bl	8002c34 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d302      	bcc.n	80090ac <UART_WaitOnFlagUntilTimeout+0x30>
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e04e      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0304 	and.w	r3, r3, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d037      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b80      	cmp	r3, #128	@ 0x80
 80090c2:	d034      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b40      	cmp	r3, #64	@ 0x40
 80090c8:	d031      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b08      	cmp	r3, #8
 80090d6:	d110      	bne.n	80090fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2208      	movs	r2, #8
 80090de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 f839 	bl	8009158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2208      	movs	r2, #8
 80090ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e029      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009108:	d111      	bne.n	800912e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f81f 	bl	8009158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2220      	movs	r2, #32
 800911e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e00f      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69da      	ldr	r2, [r3, #28]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	4013      	ands	r3, r2
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	bf0c      	ite	eq
 800913e:	2301      	moveq	r3, #1
 8009140:	2300      	movne	r3, #0
 8009142:	b2db      	uxtb	r3, r3
 8009144:	461a      	mov	r2, r3
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	429a      	cmp	r2, r3
 800914a:	d0a0      	beq.n	800908e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009158:	b480      	push	{r7}
 800915a:	b095      	sub	sp, #84	@ 0x54
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800916e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800917e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009180:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009182:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009184:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009186:	e841 2300 	strex	r3, r2, [r1]
 800918a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800918c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e6      	bne.n	8009160 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3308      	adds	r3, #8
 8009198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	4b1e      	ldr	r3, [pc, #120]	@ (8009220 <UART_EndRxTransfer+0xc8>)
 80091a6:	4013      	ands	r3, r2
 80091a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3308      	adds	r3, #8
 80091b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e5      	bne.n	8009192 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d118      	bne.n	8009200 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	60bb      	str	r3, [r7, #8]
   return(result);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f023 0310 	bic.w	r3, r3, #16
 80091e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	461a      	mov	r2, r3
 80091ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ec:	61bb      	str	r3, [r7, #24]
 80091ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6979      	ldr	r1, [r7, #20]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	613b      	str	r3, [r7, #16]
   return(result);
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e6      	bne.n	80091ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009214:	bf00      	nop
 8009216:	3754      	adds	r7, #84	@ 0x54
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	effffffe 	.word	0xeffffffe

08009224 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009232:	2b01      	cmp	r3, #1
 8009234:	d101      	bne.n	800923a <HAL_UARTEx_DisableFifoMode+0x16>
 8009236:	2302      	movs	r3, #2
 8009238:	e027      	b.n	800928a <HAL_UARTEx_DisableFifoMode+0x66>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2224      	movs	r2, #36	@ 0x24
 8009246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 0201 	bic.w	r2, r2, #1
 8009260:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009268:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2220      	movs	r2, #32
 800927c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d101      	bne.n	80092ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092aa:	2302      	movs	r3, #2
 80092ac:	e02d      	b.n	800930a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2224      	movs	r2, #36	@ 0x24
 80092ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0201 	bic.w	r2, r2, #1
 80092d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f850 	bl	8009390 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2220      	movs	r2, #32
 80092fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009326:	2302      	movs	r3, #2
 8009328:	e02d      	b.n	8009386 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2224      	movs	r2, #36	@ 0x24
 8009336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0201 	bic.w	r2, r2, #1
 8009350:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f812 	bl	8009390 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800939c:	2b00      	cmp	r3, #0
 800939e:	d108      	bne.n	80093b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093b0:	e031      	b.n	8009416 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093b2:	2310      	movs	r3, #16
 80093b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093b6:	2310      	movs	r3, #16
 80093b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	0e5b      	lsrs	r3, r3, #25
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	0f5b      	lsrs	r3, r3, #29
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f003 0307 	and.w	r3, r3, #7
 80093d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093da:	7bbb      	ldrb	r3, [r7, #14]
 80093dc:	7b3a      	ldrb	r2, [r7, #12]
 80093de:	4911      	ldr	r1, [pc, #68]	@ (8009424 <UARTEx_SetNbDataToProcess+0x94>)
 80093e0:	5c8a      	ldrb	r2, [r1, r2]
 80093e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093e6:	7b3a      	ldrb	r2, [r7, #12]
 80093e8:	490f      	ldr	r1, [pc, #60]	@ (8009428 <UARTEx_SetNbDataToProcess+0x98>)
 80093ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	7b7a      	ldrb	r2, [r7, #13]
 80093fc:	4909      	ldr	r1, [pc, #36]	@ (8009424 <UARTEx_SetNbDataToProcess+0x94>)
 80093fe:	5c8a      	ldrb	r2, [r1, r2]
 8009400:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009404:	7b7a      	ldrb	r2, [r7, #13]
 8009406:	4908      	ldr	r1, [pc, #32]	@ (8009428 <UARTEx_SetNbDataToProcess+0x98>)
 8009408:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800940a:	fb93 f3f2 	sdiv	r3, r3, r2
 800940e:	b29a      	uxth	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009416:	bf00      	nop
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	0802afcc 	.word	0x0802afcc
 8009428:	0802afd4 	.word	0x0802afd4

0800942c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d121      	bne.n	8009482 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4b27      	ldr	r3, [pc, #156]	@ (80094e0 <FMC_SDRAM_Init+0xb4>)
 8009444:	4013      	ands	r3, r2
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	6851      	ldr	r1, [r2, #4]
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	6892      	ldr	r2, [r2, #8]
 800944e:	4311      	orrs	r1, r2
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	68d2      	ldr	r2, [r2, #12]
 8009454:	4311      	orrs	r1, r2
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	6912      	ldr	r2, [r2, #16]
 800945a:	4311      	orrs	r1, r2
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	6952      	ldr	r2, [r2, #20]
 8009460:	4311      	orrs	r1, r2
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	6992      	ldr	r2, [r2, #24]
 8009466:	4311      	orrs	r1, r2
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	69d2      	ldr	r2, [r2, #28]
 800946c:	4311      	orrs	r1, r2
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	6a12      	ldr	r2, [r2, #32]
 8009472:	4311      	orrs	r1, r2
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009478:	430a      	orrs	r2, r1
 800947a:	431a      	orrs	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	601a      	str	r2, [r3, #0]
 8009480:	e026      	b.n	80094d0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	69d9      	ldr	r1, [r3, #28]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	4319      	orrs	r1, r3
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009498:	430b      	orrs	r3, r1
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	4b0e      	ldr	r3, [pc, #56]	@ (80094e0 <FMC_SDRAM_Init+0xb4>)
 80094a6:	4013      	ands	r3, r2
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	6851      	ldr	r1, [r2, #4]
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	6892      	ldr	r2, [r2, #8]
 80094b0:	4311      	orrs	r1, r2
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	68d2      	ldr	r2, [r2, #12]
 80094b6:	4311      	orrs	r1, r2
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	6912      	ldr	r2, [r2, #16]
 80094bc:	4311      	orrs	r1, r2
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	6952      	ldr	r2, [r2, #20]
 80094c2:	4311      	orrs	r1, r2
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	6992      	ldr	r2, [r2, #24]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	431a      	orrs	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	ffff8000 	.word	0xffff8000

080094e4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d128      	bne.n	8009548 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	1e59      	subs	r1, r3, #1
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	3b01      	subs	r3, #1
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	4319      	orrs	r1, r3
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	3b01      	subs	r3, #1
 8009514:	021b      	lsls	r3, r3, #8
 8009516:	4319      	orrs	r1, r3
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	3b01      	subs	r3, #1
 800951e:	031b      	lsls	r3, r3, #12
 8009520:	4319      	orrs	r1, r3
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	3b01      	subs	r3, #1
 8009528:	041b      	lsls	r3, r3, #16
 800952a:	4319      	orrs	r1, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	3b01      	subs	r3, #1
 8009532:	051b      	lsls	r3, r3, #20
 8009534:	4319      	orrs	r1, r3
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	3b01      	subs	r3, #1
 800953c:	061b      	lsls	r3, r3, #24
 800953e:	430b      	orrs	r3, r1
 8009540:	431a      	orrs	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	609a      	str	r2, [r3, #8]
 8009546:	e02d      	b.n	80095a4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	4b19      	ldr	r3, [pc, #100]	@ (80095b4 <FMC_SDRAM_Timing_Init+0xd0>)
 800954e:	4013      	ands	r3, r2
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	68d2      	ldr	r2, [r2, #12]
 8009554:	3a01      	subs	r2, #1
 8009556:	0311      	lsls	r1, r2, #12
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	6952      	ldr	r2, [r2, #20]
 800955c:	3a01      	subs	r2, #1
 800955e:	0512      	lsls	r2, r2, #20
 8009560:	430a      	orrs	r2, r1
 8009562:	431a      	orrs	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	1e59      	subs	r1, r3, #1
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	3b01      	subs	r3, #1
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	4319      	orrs	r1, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	3b01      	subs	r3, #1
 8009586:	021b      	lsls	r3, r3, #8
 8009588:	4319      	orrs	r1, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	3b01      	subs	r3, #1
 8009590:	041b      	lsls	r3, r3, #16
 8009592:	4319      	orrs	r1, r3
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	3b01      	subs	r3, #1
 800959a:	061b      	lsls	r3, r3, #24
 800959c:	430b      	orrs	r3, r1
 800959e:	431a      	orrs	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	ff0f0fff 	.word	0xff0f0fff

080095b8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	691a      	ldr	r2, [r3, #16]
 80095c8:	4b0c      	ldr	r3, [pc, #48]	@ (80095fc <FMC_SDRAM_SendCommand+0x44>)
 80095ca:	4013      	ands	r3, r2
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	6811      	ldr	r1, [r2, #0]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	6852      	ldr	r2, [r2, #4]
 80095d4:	4311      	orrs	r1, r2
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	6892      	ldr	r2, [r2, #8]
 80095da:	3a01      	subs	r2, #1
 80095dc:	0152      	lsls	r2, r2, #5
 80095de:	4311      	orrs	r1, r2
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	68d2      	ldr	r2, [r2, #12]
 80095e4:	0252      	lsls	r2, r2, #9
 80095e6:	430a      	orrs	r2, r1
 80095e8:	431a      	orrs	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr
 80095fc:	ffc00000 	.word	0xffc00000

08009600 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	695a      	ldr	r2, [r3, #20]
 800960e:	4b07      	ldr	r3, [pc, #28]	@ (800962c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009610:	4013      	ands	r3, r2
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	0052      	lsls	r2, r2, #1
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	ffffc001 	.word	0xffffc001

08009630 <__NVIC_SetPriority>:
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	4603      	mov	r3, r0
 8009638:	6039      	str	r1, [r7, #0]
 800963a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800963c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009640:	2b00      	cmp	r3, #0
 8009642:	db0a      	blt.n	800965a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	b2da      	uxtb	r2, r3
 8009648:	490c      	ldr	r1, [pc, #48]	@ (800967c <__NVIC_SetPriority+0x4c>)
 800964a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800964e:	0112      	lsls	r2, r2, #4
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	440b      	add	r3, r1
 8009654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009658:	e00a      	b.n	8009670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	b2da      	uxtb	r2, r3
 800965e:	4908      	ldr	r1, [pc, #32]	@ (8009680 <__NVIC_SetPriority+0x50>)
 8009660:	88fb      	ldrh	r3, [r7, #6]
 8009662:	f003 030f 	and.w	r3, r3, #15
 8009666:	3b04      	subs	r3, #4
 8009668:	0112      	lsls	r2, r2, #4
 800966a:	b2d2      	uxtb	r2, r2
 800966c:	440b      	add	r3, r1
 800966e:	761a      	strb	r2, [r3, #24]
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	e000e100 	.word	0xe000e100
 8009680:	e000ed00 	.word	0xe000ed00

08009684 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009688:	4b05      	ldr	r3, [pc, #20]	@ (80096a0 <SysTick_Handler+0x1c>)
 800968a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800968c:	f002 fac8 	bl	800bc20 <xTaskGetSchedulerState>
 8009690:	4603      	mov	r3, r0
 8009692:	2b01      	cmp	r3, #1
 8009694:	d001      	beq.n	800969a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009696:	f003 f9bf 	bl	800ca18 <xPortSysTickHandler>
  }
}
 800969a:	bf00      	nop
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	e000e010 	.word	0xe000e010

080096a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80096a8:	2100      	movs	r1, #0
 80096aa:	f06f 0004 	mvn.w	r0, #4
 80096ae:	f7ff ffbf 	bl	8009630 <__NVIC_SetPriority>
#endif
}
 80096b2:	bf00      	nop
 80096b4:	bd80      	pop	{r7, pc}
	...

080096b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096be:	f3ef 8305 	mrs	r3, IPSR
 80096c2:	603b      	str	r3, [r7, #0]
  return(result);
 80096c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096ca:	f06f 0305 	mvn.w	r3, #5
 80096ce:	607b      	str	r3, [r7, #4]
 80096d0:	e00c      	b.n	80096ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096d2:	4b0a      	ldr	r3, [pc, #40]	@ (80096fc <osKernelInitialize+0x44>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d105      	bne.n	80096e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096da:	4b08      	ldr	r3, [pc, #32]	@ (80096fc <osKernelInitialize+0x44>)
 80096dc:	2201      	movs	r2, #1
 80096de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	607b      	str	r3, [r7, #4]
 80096e4:	e002      	b.n	80096ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096e6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096ec:	687b      	ldr	r3, [r7, #4]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	2400065c 	.word	0x2400065c

08009700 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009706:	f3ef 8305 	mrs	r3, IPSR
 800970a:	603b      	str	r3, [r7, #0]
  return(result);
 800970c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800970e:	2b00      	cmp	r3, #0
 8009710:	d003      	beq.n	800971a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009712:	f06f 0305 	mvn.w	r3, #5
 8009716:	607b      	str	r3, [r7, #4]
 8009718:	e010      	b.n	800973c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800971a:	4b0b      	ldr	r3, [pc, #44]	@ (8009748 <osKernelStart+0x48>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d109      	bne.n	8009736 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009722:	f7ff ffbf 	bl	80096a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009726:	4b08      	ldr	r3, [pc, #32]	@ (8009748 <osKernelStart+0x48>)
 8009728:	2202      	movs	r2, #2
 800972a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800972c:	f001 fe14 	bl	800b358 <vTaskStartScheduler>
      stat = osOK;
 8009730:	2300      	movs	r3, #0
 8009732:	607b      	str	r3, [r7, #4]
 8009734:	e002      	b.n	800973c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009736:	f04f 33ff 	mov.w	r3, #4294967295
 800973a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800973c:	687b      	ldr	r3, [r7, #4]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	2400065c 	.word	0x2400065c

0800974c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800974c:	b580      	push	{r7, lr}
 800974e:	b08e      	sub	sp, #56	@ 0x38
 8009750:	af04      	add	r7, sp, #16
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009758:	2300      	movs	r3, #0
 800975a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800975c:	f3ef 8305 	mrs	r3, IPSR
 8009760:	617b      	str	r3, [r7, #20]
  return(result);
 8009762:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009764:	2b00      	cmp	r3, #0
 8009766:	d17e      	bne.n	8009866 <osThreadNew+0x11a>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d07b      	beq.n	8009866 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800976e:	2380      	movs	r3, #128	@ 0x80
 8009770:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009772:	2318      	movs	r3, #24
 8009774:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009776:	2300      	movs	r3, #0
 8009778:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800977a:	f04f 33ff 	mov.w	r3, #4294967295
 800977e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d045      	beq.n	8009812 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <osThreadNew+0x48>
        name = attr->name;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d008      	beq.n	80097ba <osThreadNew+0x6e>
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2b38      	cmp	r3, #56	@ 0x38
 80097ac:	d805      	bhi.n	80097ba <osThreadNew+0x6e>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <osThreadNew+0x72>
        return (NULL);
 80097ba:	2300      	movs	r3, #0
 80097bc:	e054      	b.n	8009868 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	089b      	lsrs	r3, r3, #2
 80097cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00e      	beq.n	80097f4 <osThreadNew+0xa8>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	2ba7      	cmp	r3, #167	@ 0xa7
 80097dc:	d90a      	bls.n	80097f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d006      	beq.n	80097f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <osThreadNew+0xa8>
        mem = 1;
 80097ee:	2301      	movs	r3, #1
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	e010      	b.n	8009816 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10c      	bne.n	8009816 <osThreadNew+0xca>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d108      	bne.n	8009816 <osThreadNew+0xca>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <osThreadNew+0xca>
          mem = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	61bb      	str	r3, [r7, #24]
 8009810:	e001      	b.n	8009816 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d110      	bne.n	800983e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009824:	9202      	str	r2, [sp, #8]
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	6a3a      	ldr	r2, [r7, #32]
 8009830:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f001 fb9c 	bl	800af70 <xTaskCreateStatic>
 8009838:	4603      	mov	r3, r0
 800983a:	613b      	str	r3, [r7, #16]
 800983c:	e013      	b.n	8009866 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d110      	bne.n	8009866 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	b29a      	uxth	r2, r3
 8009848:	f107 0310 	add.w	r3, r7, #16
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f001 fbea 	bl	800b030 <xTaskCreate>
 800985c:	4603      	mov	r3, r0
 800985e:	2b01      	cmp	r3, #1
 8009860:	d001      	beq.n	8009866 <osThreadNew+0x11a>
            hTask = NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009866:	693b      	ldr	r3, [r7, #16]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3728      	adds	r7, #40	@ 0x28
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009878:	f3ef 8305 	mrs	r3, IPSR
 800987c:	60bb      	str	r3, [r7, #8]
  return(result);
 800987e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <osDelay+0x1c>
    stat = osErrorISR;
 8009884:	f06f 0305 	mvn.w	r3, #5
 8009888:	60fb      	str	r3, [r7, #12]
 800988a:	e007      	b.n	800989c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800988c:	2300      	movs	r3, #0
 800988e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f001 fd28 	bl	800b2ec <vTaskDelay>
    }
  }

  return (stat);
 800989c:	68fb      	ldr	r3, [r7, #12]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b08a      	sub	sp, #40	@ 0x28
 80098aa:	af02      	add	r7, sp, #8
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80098b2:	2300      	movs	r3, #0
 80098b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098b6:	f3ef 8305 	mrs	r3, IPSR
 80098ba:	613b      	str	r3, [r7, #16]
  return(result);
 80098bc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d175      	bne.n	80099ae <osSemaphoreNew+0x108>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d072      	beq.n	80099ae <osSemaphoreNew+0x108>
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d86e      	bhi.n	80099ae <osSemaphoreNew+0x108>
    mem = -1;
 80098d0:	f04f 33ff 	mov.w	r3, #4294967295
 80098d4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d015      	beq.n	8009908 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d006      	beq.n	80098f2 <osSemaphoreNew+0x4c>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	2b4f      	cmp	r3, #79	@ 0x4f
 80098ea:	d902      	bls.n	80098f2 <osSemaphoreNew+0x4c>
        mem = 1;
 80098ec:	2301      	movs	r3, #1
 80098ee:	61bb      	str	r3, [r7, #24]
 80098f0:	e00c      	b.n	800990c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d108      	bne.n	800990c <osSemaphoreNew+0x66>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d104      	bne.n	800990c <osSemaphoreNew+0x66>
          mem = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	61bb      	str	r3, [r7, #24]
 8009906:	e001      	b.n	800990c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009908:	2300      	movs	r3, #0
 800990a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d04c      	beq.n	80099ae <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d128      	bne.n	800996c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d10a      	bne.n	8009936 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	2203      	movs	r2, #3
 8009926:	9200      	str	r2, [sp, #0]
 8009928:	2200      	movs	r2, #0
 800992a:	2100      	movs	r1, #0
 800992c:	2001      	movs	r0, #1
 800992e:	f000 fb5d 	bl	8009fec <xQueueGenericCreateStatic>
 8009932:	61f8      	str	r0, [r7, #28]
 8009934:	e005      	b.n	8009942 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009936:	2203      	movs	r2, #3
 8009938:	2100      	movs	r1, #0
 800993a:	2001      	movs	r0, #1
 800993c:	f000 fbd3 	bl	800a0e6 <xQueueGenericCreate>
 8009940:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d022      	beq.n	800998e <osSemaphoreNew+0xe8>
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01f      	beq.n	800998e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800994e:	2300      	movs	r3, #0
 8009950:	2200      	movs	r2, #0
 8009952:	2100      	movs	r1, #0
 8009954:	69f8      	ldr	r0, [r7, #28]
 8009956:	f000 fc93 	bl	800a280 <xQueueGenericSend>
 800995a:	4603      	mov	r3, r0
 800995c:	2b01      	cmp	r3, #1
 800995e:	d016      	beq.n	800998e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009960:	69f8      	ldr	r0, [r7, #28]
 8009962:	f001 f931 	bl	800abc8 <vQueueDelete>
            hSemaphore = NULL;
 8009966:	2300      	movs	r3, #0
 8009968:	61fb      	str	r3, [r7, #28]
 800996a:	e010      	b.n	800998e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d108      	bne.n	8009984 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	461a      	mov	r2, r3
 8009978:	68b9      	ldr	r1, [r7, #8]
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fc11 	bl	800a1a2 <xQueueCreateCountingSemaphoreStatic>
 8009980:	61f8      	str	r0, [r7, #28]
 8009982:	e004      	b.n	800998e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009984:	68b9      	ldr	r1, [r7, #8]
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f000 fc44 	bl	800a214 <xQueueCreateCountingSemaphore>
 800998c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00c      	beq.n	80099ae <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <osSemaphoreNew+0xfc>
          name = attr->name;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	e001      	b.n	80099a6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80099a6:	6979      	ldr	r1, [r7, #20]
 80099a8:	69f8      	ldr	r0, [r7, #28]
 80099aa:	f001 fa59 	bl	800ae60 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80099ae:	69fb      	ldr	r3, [r7, #28]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3720      	adds	r7, #32
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d103      	bne.n	80099d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80099d0:	f06f 0303 	mvn.w	r3, #3
 80099d4:	617b      	str	r3, [r7, #20]
 80099d6:	e039      	b.n	8009a4c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099d8:	f3ef 8305 	mrs	r3, IPSR
 80099dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80099de:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d022      	beq.n	8009a2a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80099ea:	f06f 0303 	mvn.w	r3, #3
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	e02c      	b.n	8009a4c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80099f6:	f107 0308 	add.w	r3, r7, #8
 80099fa:	461a      	mov	r2, r3
 80099fc:	2100      	movs	r1, #0
 80099fe:	6938      	ldr	r0, [r7, #16]
 8009a00:	f001 f860 	bl	800aac4 <xQueueReceiveFromISR>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d003      	beq.n	8009a12 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009a0a:	f06f 0302 	mvn.w	r3, #2
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	e01c      	b.n	8009a4c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d019      	beq.n	8009a4c <osSemaphoreAcquire+0x94>
 8009a18:	4b0f      	ldr	r3, [pc, #60]	@ (8009a58 <osSemaphoreAcquire+0xa0>)
 8009a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	e010      	b.n	8009a4c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6938      	ldr	r0, [r7, #16]
 8009a2e:	f000 ff39 	bl	800a8a4 <xQueueSemaphoreTake>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d009      	beq.n	8009a4c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009a3e:	f06f 0301 	mvn.w	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	e002      	b.n	8009a4c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009a46:	f06f 0302 	mvn.w	r3, #2
 8009a4a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009a4c:	697b      	ldr	r3, [r7, #20]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3718      	adds	r7, #24
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d103      	bne.n	8009a7a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009a72:	f06f 0303 	mvn.w	r3, #3
 8009a76:	617b      	str	r3, [r7, #20]
 8009a78:	e02c      	b.n	8009ad4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a7a:	f3ef 8305 	mrs	r3, IPSR
 8009a7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a80:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d01a      	beq.n	8009abc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009a86:	2300      	movs	r3, #0
 8009a88:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009a8a:	f107 0308 	add.w	r3, r7, #8
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6938      	ldr	r0, [r7, #16]
 8009a92:	f000 fd95 	bl	800a5c0 <xQueueGiveFromISR>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d003      	beq.n	8009aa4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009a9c:	f06f 0302 	mvn.w	r3, #2
 8009aa0:	617b      	str	r3, [r7, #20]
 8009aa2:	e017      	b.n	8009ad4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d014      	beq.n	8009ad4 <osSemaphoreRelease+0x78>
 8009aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae0 <osSemaphoreRelease+0x84>)
 8009aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	e00b      	b.n	8009ad4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009abc:	2300      	movs	r3, #0
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	6938      	ldr	r0, [r7, #16]
 8009ac4:	f000 fbdc 	bl	800a280 <xQueueGenericSend>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d002      	beq.n	8009ad4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009ace:	f06f 0302 	mvn.w	r3, #2
 8009ad2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009ad4:	697b      	ldr	r3, [r7, #20]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	e000ed04 	.word	0xe000ed04

08009ae4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08a      	sub	sp, #40	@ 0x28
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009af4:	f3ef 8305 	mrs	r3, IPSR
 8009af8:	613b      	str	r3, [r7, #16]
  return(result);
 8009afa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d15f      	bne.n	8009bc0 <osMessageQueueNew+0xdc>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d05c      	beq.n	8009bc0 <osMessageQueueNew+0xdc>
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d059      	beq.n	8009bc0 <osMessageQueueNew+0xdc>
    mem = -1;
 8009b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d029      	beq.n	8009b6c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d012      	beq.n	8009b46 <osMessageQueueNew+0x62>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	2b4f      	cmp	r3, #79	@ 0x4f
 8009b26:	d90e      	bls.n	8009b46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00a      	beq.n	8009b46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	695a      	ldr	r2, [r3, #20]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	fb01 f303 	mul.w	r3, r1, r3
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d302      	bcc.n	8009b46 <osMessageQueueNew+0x62>
        mem = 1;
 8009b40:	2301      	movs	r3, #1
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	e014      	b.n	8009b70 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d110      	bne.n	8009b70 <osMessageQueueNew+0x8c>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10c      	bne.n	8009b70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d108      	bne.n	8009b70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d104      	bne.n	8009b70 <osMessageQueueNew+0x8c>
          mem = 0;
 8009b66:	2300      	movs	r3, #0
 8009b68:	61bb      	str	r3, [r7, #24]
 8009b6a:	e001      	b.n	8009b70 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d10b      	bne.n	8009b8e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691a      	ldr	r2, [r3, #16]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	2100      	movs	r1, #0
 8009b80:	9100      	str	r1, [sp, #0]
 8009b82:	68b9      	ldr	r1, [r7, #8]
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 fa31 	bl	8009fec <xQueueGenericCreateStatic>
 8009b8a:	61f8      	str	r0, [r7, #28]
 8009b8c:	e008      	b.n	8009ba0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d105      	bne.n	8009ba0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009b94:	2200      	movs	r2, #0
 8009b96:	68b9      	ldr	r1, [r7, #8]
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f000 faa4 	bl	800a0e6 <xQueueGenericCreate>
 8009b9e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00c      	beq.n	8009bc0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	617b      	str	r3, [r7, #20]
 8009bb2:	e001      	b.n	8009bb8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009bb8:	6979      	ldr	r1, [r7, #20]
 8009bba:	69f8      	ldr	r0, [r7, #28]
 8009bbc:	f001 f950 	bl	800ae60 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009bc0:	69fb      	ldr	r3, [r7, #28]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009be4:	f3ef 8305 	mrs	r3, IPSR
 8009be8:	617b      	str	r3, [r7, #20]
  return(result);
 8009bea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d028      	beq.n	8009c42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <osMessageQueuePut+0x36>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <osMessageQueuePut+0x36>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009c02:	f06f 0303 	mvn.w	r3, #3
 8009c06:	61fb      	str	r3, [r7, #28]
 8009c08:	e038      	b.n	8009c7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009c0e:	f107 0210 	add.w	r2, r7, #16
 8009c12:	2300      	movs	r3, #0
 8009c14:	68b9      	ldr	r1, [r7, #8]
 8009c16:	69b8      	ldr	r0, [r7, #24]
 8009c18:	f000 fc34 	bl	800a484 <xQueueGenericSendFromISR>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d003      	beq.n	8009c2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009c22:	f06f 0302 	mvn.w	r3, #2
 8009c26:	61fb      	str	r3, [r7, #28]
 8009c28:	e028      	b.n	8009c7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d025      	beq.n	8009c7c <osMessageQueuePut+0xb0>
 8009c30:	4b15      	ldr	r3, [pc, #84]	@ (8009c88 <osMessageQueuePut+0xbc>)
 8009c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	e01c      	b.n	8009c7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <osMessageQueuePut+0x82>
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d103      	bne.n	8009c56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009c4e:	f06f 0303 	mvn.w	r3, #3
 8009c52:	61fb      	str	r3, [r7, #28]
 8009c54:	e012      	b.n	8009c7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c56:	2300      	movs	r3, #0
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	69b8      	ldr	r0, [r7, #24]
 8009c5e:	f000 fb0f 	bl	800a280 <xQueueGenericSend>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d009      	beq.n	8009c7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009c6e:	f06f 0301 	mvn.w	r3, #1
 8009c72:	61fb      	str	r3, [r7, #28]
 8009c74:	e002      	b.n	8009c7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009c76:	f06f 0302 	mvn.w	r3, #2
 8009c7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009c7c:	69fb      	ldr	r3, [r7, #28]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3720      	adds	r7, #32
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b088      	sub	sp, #32
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca2:	f3ef 8305 	mrs	r3, IPSR
 8009ca6:	617b      	str	r3, [r7, #20]
  return(result);
 8009ca8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d028      	beq.n	8009d00 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d005      	beq.n	8009cc0 <osMessageQueueGet+0x34>
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <osMessageQueueGet+0x34>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009cc0:	f06f 0303 	mvn.w	r3, #3
 8009cc4:	61fb      	str	r3, [r7, #28]
 8009cc6:	e037      	b.n	8009d38 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009ccc:	f107 0310 	add.w	r3, r7, #16
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	69b8      	ldr	r0, [r7, #24]
 8009cd6:	f000 fef5 	bl	800aac4 <xQueueReceiveFromISR>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d003      	beq.n	8009ce8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009ce0:	f06f 0302 	mvn.w	r3, #2
 8009ce4:	61fb      	str	r3, [r7, #28]
 8009ce6:	e027      	b.n	8009d38 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d024      	beq.n	8009d38 <osMessageQueueGet+0xac>
 8009cee:	4b15      	ldr	r3, [pc, #84]	@ (8009d44 <osMessageQueueGet+0xb8>)
 8009cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	e01b      	b.n	8009d38 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <osMessageQueueGet+0x80>
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009d0c:	f06f 0303 	mvn.w	r3, #3
 8009d10:	61fb      	str	r3, [r7, #28]
 8009d12:	e011      	b.n	8009d38 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	69b8      	ldr	r0, [r7, #24]
 8009d1a:	f000 fce1 	bl	800a6e0 <xQueueReceive>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d009      	beq.n	8009d38 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009d2a:	f06f 0301 	mvn.w	r3, #1
 8009d2e:	61fb      	str	r3, [r7, #28]
 8009d30:	e002      	b.n	8009d38 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009d32:	f06f 0302 	mvn.w	r3, #2
 8009d36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009d38:	69fb      	ldr	r3, [r7, #28]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3720      	adds	r7, #32
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	e000ed04 	.word	0xe000ed04

08009d48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4a07      	ldr	r2, [pc, #28]	@ (8009d74 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	4a06      	ldr	r2, [pc, #24]	@ (8009d78 <vApplicationGetIdleTaskMemory+0x30>)
 8009d5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2280      	movs	r2, #128	@ 0x80
 8009d64:	601a      	str	r2, [r3, #0]
}
 8009d66:	bf00      	nop
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	24000660 	.word	0x24000660
 8009d78:	24000708 	.word	0x24000708

08009d7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	4a07      	ldr	r2, [pc, #28]	@ (8009da8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	4a06      	ldr	r2, [pc, #24]	@ (8009dac <vApplicationGetTimerTaskMemory+0x30>)
 8009d92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d9a:	601a      	str	r2, [r3, #0]
}
 8009d9c:	bf00      	nop
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	24000908 	.word	0x24000908
 8009dac:	240009b0 	.word	0x240009b0

08009db0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f103 0208 	add.w	r2, r3, #8
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f103 0208 	add.w	r2, r3, #8
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f103 0208 	add.w	r2, r3, #8
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dfe:	bf00      	nop
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	601a      	str	r2, [r3, #0]
}
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e52:	b480      	push	{r7}
 8009e54:	b085      	sub	sp, #20
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e68:	d103      	bne.n	8009e72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	60fb      	str	r3, [r7, #12]
 8009e70:	e00c      	b.n	8009e8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3308      	adds	r3, #8
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	e002      	b.n	8009e80 <vListInsert+0x2e>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d2f6      	bcs.n	8009e7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	601a      	str	r2, [r3, #0]
}
 8009eb8:	bf00      	nop
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	6892      	ldr	r2, [r2, #8]
 8009eda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	6852      	ldr	r2, [r2, #4]
 8009ee4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d103      	bne.n	8009ef8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689a      	ldr	r2, [r3, #8]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	1e5a      	subs	r2, r3, #1
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10b      	bne.n	8009f44 <xQueueGenericReset+0x2c>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	60bb      	str	r3, [r7, #8]
}
 8009f3e:	bf00      	nop
 8009f40:	bf00      	nop
 8009f42:	e7fd      	b.n	8009f40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f44:	f002 fcd8 	bl	800c8f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f50:	68f9      	ldr	r1, [r7, #12]
 8009f52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f54:	fb01 f303 	mul.w	r3, r1, r3
 8009f58:	441a      	add	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f74:	3b01      	subs	r3, #1
 8009f76:	68f9      	ldr	r1, [r7, #12]
 8009f78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f7a:	fb01 f303 	mul.w	r3, r1, r3
 8009f7e:	441a      	add	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	22ff      	movs	r2, #255	@ 0xff
 8009f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	22ff      	movs	r2, #255	@ 0xff
 8009f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d114      	bne.n	8009fc4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d01a      	beq.n	8009fd8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3310      	adds	r3, #16
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f001 fc74 	bl	800b894 <xTaskRemoveFromEventList>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d012      	beq.n	8009fd8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe8 <xQueueGenericReset+0xd0>)
 8009fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	e009      	b.n	8009fd8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3310      	adds	r3, #16
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fef1 	bl	8009db0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3324      	adds	r3, #36	@ 0x24
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7ff feec 	bl	8009db0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fd8:	f002 fcc0 	bl	800c95c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fdc:	2301      	movs	r3, #1
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	e000ed04 	.word	0xe000ed04

08009fec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08e      	sub	sp, #56	@ 0x38
 8009ff0:	af02      	add	r7, sp, #8
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10b      	bne.n	800a018 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a012:	bf00      	nop
 800a014:	bf00      	nop
 800a016:	e7fd      	b.n	800a014 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10b      	bne.n	800a036 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a030:	bf00      	nop
 800a032:	bf00      	nop
 800a034:	e7fd      	b.n	800a032 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <xQueueGenericCreateStatic+0x56>
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <xQueueGenericCreateStatic+0x5a>
 800a042:	2301      	movs	r3, #1
 800a044:	e000      	b.n	800a048 <xQueueGenericCreateStatic+0x5c>
 800a046:	2300      	movs	r3, #0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10b      	bne.n	800a064 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	623b      	str	r3, [r7, #32]
}
 800a05e:	bf00      	nop
 800a060:	bf00      	nop
 800a062:	e7fd      	b.n	800a060 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <xQueueGenericCreateStatic+0x84>
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <xQueueGenericCreateStatic+0x88>
 800a070:	2301      	movs	r3, #1
 800a072:	e000      	b.n	800a076 <xQueueGenericCreateStatic+0x8a>
 800a074:	2300      	movs	r3, #0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10b      	bne.n	800a092 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	61fb      	str	r3, [r7, #28]
}
 800a08c:	bf00      	nop
 800a08e:	bf00      	nop
 800a090:	e7fd      	b.n	800a08e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a092:	2350      	movs	r3, #80	@ 0x50
 800a094:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b50      	cmp	r3, #80	@ 0x50
 800a09a:	d00b      	beq.n	800a0b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	61bb      	str	r3, [r7, #24]
}
 800a0ae:	bf00      	nop
 800a0b0:	bf00      	nop
 800a0b2:	e7fd      	b.n	800a0b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00d      	beq.n	800a0dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	68b9      	ldr	r1, [r7, #8]
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 f840 	bl	800a15c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3730      	adds	r7, #48	@ 0x30
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b08a      	sub	sp, #40	@ 0x28
 800a0ea:	af02      	add	r7, sp, #8
 800a0ec:	60f8      	str	r0, [r7, #12]
 800a0ee:	60b9      	str	r1, [r7, #8]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10b      	bne.n	800a112 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	613b      	str	r3, [r7, #16]
}
 800a10c:	bf00      	nop
 800a10e:	bf00      	nop
 800a110:	e7fd      	b.n	800a10e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	fb02 f303 	mul.w	r3, r2, r3
 800a11a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	3350      	adds	r3, #80	@ 0x50
 800a120:	4618      	mov	r0, r3
 800a122:	f002 fd0b 	bl	800cb3c <pvPortMalloc>
 800a126:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d011      	beq.n	800a152 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	3350      	adds	r3, #80	@ 0x50
 800a136:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a140:	79fa      	ldrb	r2, [r7, #7]
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	4613      	mov	r3, r2
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 f805 	bl	800a15c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a152:	69bb      	ldr	r3, [r7, #24]
	}
 800a154:	4618      	mov	r0, r3
 800a156:	3720      	adds	r7, #32
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d103      	bne.n	800a178 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	69ba      	ldr	r2, [r7, #24]
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	e002      	b.n	800a17e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a18a:	2101      	movs	r1, #1
 800a18c:	69b8      	ldr	r0, [r7, #24]
 800a18e:	f7ff fec3 	bl	8009f18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	78fa      	ldrb	r2, [r7, #3]
 800a196:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a19a:	bf00      	nop
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b08a      	sub	sp, #40	@ 0x28
 800a1a6:	af02      	add	r7, sp, #8
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10b      	bne.n	800a1cc <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	61bb      	str	r3, [r7, #24]
}
 800a1c6:	bf00      	nop
 800a1c8:	bf00      	nop
 800a1ca:	e7fd      	b.n	800a1c8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d90b      	bls.n	800a1ec <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	617b      	str	r3, [r7, #20]
}
 800a1e6:	bf00      	nop
 800a1e8:	bf00      	nop
 800a1ea:	e7fd      	b.n	800a1e8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff fef8 	bl	8009fec <xQueueGenericCreateStatic>
 800a1fc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a20a:	69fb      	ldr	r3, [r7, #28]
	}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10b      	bne.n	800a23c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	613b      	str	r3, [r7, #16]
}
 800a236:	bf00      	nop
 800a238:	bf00      	nop
 800a23a:	e7fd      	b.n	800a238 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	429a      	cmp	r2, r3
 800a242:	d90b      	bls.n	800a25c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	60fb      	str	r3, [r7, #12]
}
 800a256:	bf00      	nop
 800a258:	bf00      	nop
 800a25a:	e7fd      	b.n	800a258 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a25c:	2202      	movs	r2, #2
 800a25e:	2100      	movs	r1, #0
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7ff ff40 	bl	800a0e6 <xQueueGenericCreate>
 800a266:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a274:	697b      	ldr	r3, [r7, #20]
	}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08e      	sub	sp, #56	@ 0x38
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a28e:	2300      	movs	r3, #0
 800a290:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10b      	bne.n	800a2b4 <xQueueGenericSend+0x34>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2ae:	bf00      	nop
 800a2b0:	bf00      	nop
 800a2b2:	e7fd      	b.n	800a2b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d103      	bne.n	800a2c2 <xQueueGenericSend+0x42>
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <xQueueGenericSend+0x46>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <xQueueGenericSend+0x48>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10b      	bne.n	800a2e4 <xQueueGenericSend+0x64>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2de:	bf00      	nop
 800a2e0:	bf00      	nop
 800a2e2:	e7fd      	b.n	800a2e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d103      	bne.n	800a2f2 <xQueueGenericSend+0x72>
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d101      	bne.n	800a2f6 <xQueueGenericSend+0x76>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e000      	b.n	800a2f8 <xQueueGenericSend+0x78>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10b      	bne.n	800a314 <xQueueGenericSend+0x94>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	623b      	str	r3, [r7, #32]
}
 800a30e:	bf00      	nop
 800a310:	bf00      	nop
 800a312:	e7fd      	b.n	800a310 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a314:	f001 fc84 	bl	800bc20 <xTaskGetSchedulerState>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d102      	bne.n	800a324 <xQueueGenericSend+0xa4>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d101      	bne.n	800a328 <xQueueGenericSend+0xa8>
 800a324:	2301      	movs	r3, #1
 800a326:	e000      	b.n	800a32a <xQueueGenericSend+0xaa>
 800a328:	2300      	movs	r3, #0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10b      	bne.n	800a346 <xQueueGenericSend+0xc6>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	61fb      	str	r3, [r7, #28]
}
 800a340:	bf00      	nop
 800a342:	bf00      	nop
 800a344:	e7fd      	b.n	800a342 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a346:	f002 fad7 	bl	800c8f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a352:	429a      	cmp	r2, r3
 800a354:	d302      	bcc.n	800a35c <xQueueGenericSend+0xdc>
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d129      	bne.n	800a3b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	68b9      	ldr	r1, [r7, #8]
 800a360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a362:	f000 fc6d 	bl	800ac40 <prvCopyDataToQueue>
 800a366:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d010      	beq.n	800a392 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a372:	3324      	adds	r3, #36	@ 0x24
 800a374:	4618      	mov	r0, r3
 800a376:	f001 fa8d 	bl	800b894 <xTaskRemoveFromEventList>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d013      	beq.n	800a3a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a380:	4b3f      	ldr	r3, [pc, #252]	@ (800a480 <xQueueGenericSend+0x200>)
 800a382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	e00a      	b.n	800a3a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a394:	2b00      	cmp	r3, #0
 800a396:	d007      	beq.n	800a3a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a398:	4b39      	ldr	r3, [pc, #228]	@ (800a480 <xQueueGenericSend+0x200>)
 800a39a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3a8:	f002 fad8 	bl	800c95c <vPortExitCritical>
				return pdPASS;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e063      	b.n	800a478 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d103      	bne.n	800a3be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3b6:	f002 fad1 	bl	800c95c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e05c      	b.n	800a478 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d106      	bne.n	800a3d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3c4:	f107 0314 	add.w	r3, r7, #20
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 fac7 	bl	800b95c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3d2:	f002 fac3 	bl	800c95c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3d6:	f001 f82f 	bl	800b438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3da:	f002 fa8d 	bl	800c8f8 <vPortEnterCritical>
 800a3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3e4:	b25b      	sxtb	r3, r3
 800a3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ea:	d103      	bne.n	800a3f4 <xQueueGenericSend+0x174>
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3fa:	b25b      	sxtb	r3, r3
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d103      	bne.n	800a40a <xQueueGenericSend+0x18a>
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a40a:	f002 faa7 	bl	800c95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a40e:	1d3a      	adds	r2, r7, #4
 800a410:	f107 0314 	add.w	r3, r7, #20
 800a414:	4611      	mov	r1, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f001 fab6 	bl	800b988 <xTaskCheckForTimeOut>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d124      	bne.n	800a46c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a422:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a424:	f000 fd04 	bl	800ae30 <prvIsQueueFull>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d018      	beq.n	800a460 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a430:	3310      	adds	r3, #16
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	4611      	mov	r1, r2
 800a436:	4618      	mov	r0, r3
 800a438:	f001 f9da 	bl	800b7f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a43c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a43e:	f000 fc8f 	bl	800ad60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a442:	f001 f807 	bl	800b454 <xTaskResumeAll>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f47f af7c 	bne.w	800a346 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a44e:	4b0c      	ldr	r3, [pc, #48]	@ (800a480 <xQueueGenericSend+0x200>)
 800a450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	e772      	b.n	800a346 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a462:	f000 fc7d 	bl	800ad60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a466:	f000 fff5 	bl	800b454 <xTaskResumeAll>
 800a46a:	e76c      	b.n	800a346 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a46c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a46e:	f000 fc77 	bl	800ad60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a472:	f000 ffef 	bl	800b454 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a476:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3738      	adds	r7, #56	@ 0x38
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	e000ed04 	.word	0xe000ed04

0800a484 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b090      	sub	sp, #64	@ 0x40
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10b      	bne.n	800a4b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	e7fd      	b.n	800a4b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d103      	bne.n	800a4c2 <xQueueGenericSendFromISR+0x3e>
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <xQueueGenericSendFromISR+0x42>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <xQueueGenericSendFromISR+0x44>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10b      	bne.n	800a4e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	e7fd      	b.n	800a4e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d103      	bne.n	800a4f2 <xQueueGenericSendFromISR+0x6e>
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d101      	bne.n	800a4f6 <xQueueGenericSendFromISR+0x72>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e000      	b.n	800a4f8 <xQueueGenericSendFromISR+0x74>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10b      	bne.n	800a514 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a500:	f383 8811 	msr	BASEPRI, r3
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	623b      	str	r3, [r7, #32]
}
 800a50e:	bf00      	nop
 800a510:	bf00      	nop
 800a512:	e7fd      	b.n	800a510 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a514:	f002 fad0 	bl	800cab8 <vPortValidateInterruptPriority>
	__asm volatile
 800a518:	f3ef 8211 	mrs	r2, BASEPRI
 800a51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	61fa      	str	r2, [r7, #28]
 800a52e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a530:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a532:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d302      	bcc.n	800a546 <xQueueGenericSendFromISR+0xc2>
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2b02      	cmp	r3, #2
 800a544:	d12f      	bne.n	800a5a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a548:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a54c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a554:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	68b9      	ldr	r1, [r7, #8]
 800a55a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a55c:	f000 fb70 	bl	800ac40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a560:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a568:	d112      	bne.n	800a590 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d016      	beq.n	800a5a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a574:	3324      	adds	r3, #36	@ 0x24
 800a576:	4618      	mov	r0, r3
 800a578:	f001 f98c 	bl	800b894 <xTaskRemoveFromEventList>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00e      	beq.n	800a5a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00b      	beq.n	800a5a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	e007      	b.n	800a5a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a590:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a594:	3301      	adds	r3, #1
 800a596:	b2db      	uxtb	r3, r3
 800a598:	b25a      	sxtb	r2, r3
 800a59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a5a4:	e001      	b.n	800a5aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ac:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f383 8811 	msr	BASEPRI, r3
}
 800a5b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3740      	adds	r7, #64	@ 0x40
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b08e      	sub	sp, #56	@ 0x38
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10b      	bne.n	800a5ec <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	623b      	str	r3, [r7, #32]
}
 800a5e6:	bf00      	nop
 800a5e8:	bf00      	nop
 800a5ea:	e7fd      	b.n	800a5e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00b      	beq.n	800a60c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	61fb      	str	r3, [r7, #28]
}
 800a606:	bf00      	nop
 800a608:	bf00      	nop
 800a60a:	e7fd      	b.n	800a608 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d103      	bne.n	800a61c <xQueueGiveFromISR+0x5c>
 800a614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <xQueueGiveFromISR+0x60>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <xQueueGiveFromISR+0x62>
 800a620:	2300      	movs	r3, #0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10b      	bne.n	800a63e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	61bb      	str	r3, [r7, #24]
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	e7fd      	b.n	800a63a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a63e:	f002 fa3b 	bl	800cab8 <vPortValidateInterruptPriority>
	__asm volatile
 800a642:	f3ef 8211 	mrs	r2, BASEPRI
 800a646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	617a      	str	r2, [r7, #20]
 800a658:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a65a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a65c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a662:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d22b      	bcs.n	800a6c6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a670:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a680:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a688:	d112      	bne.n	800a6b0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d016      	beq.n	800a6c0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a694:	3324      	adds	r3, #36	@ 0x24
 800a696:	4618      	mov	r0, r3
 800a698:	f001 f8fc 	bl	800b894 <xTaskRemoveFromEventList>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00e      	beq.n	800a6c0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00b      	beq.n	800a6c0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	e007      	b.n	800a6c0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	b25a      	sxtb	r2, r3
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6c4:	e001      	b.n	800a6ca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f383 8811 	msr	BASEPRI, r3
}
 800a6d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3738      	adds	r7, #56	@ 0x38
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b08c      	sub	sp, #48	@ 0x30
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10b      	bne.n	800a712 <xQueueReceive+0x32>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	623b      	str	r3, [r7, #32]
}
 800a70c:	bf00      	nop
 800a70e:	bf00      	nop
 800a710:	e7fd      	b.n	800a70e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d103      	bne.n	800a720 <xQueueReceive+0x40>
 800a718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <xQueueReceive+0x44>
 800a720:	2301      	movs	r3, #1
 800a722:	e000      	b.n	800a726 <xQueueReceive+0x46>
 800a724:	2300      	movs	r3, #0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10b      	bne.n	800a742 <xQueueReceive+0x62>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	61fb      	str	r3, [r7, #28]
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	e7fd      	b.n	800a73e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a742:	f001 fa6d 	bl	800bc20 <xTaskGetSchedulerState>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d102      	bne.n	800a752 <xQueueReceive+0x72>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <xQueueReceive+0x76>
 800a752:	2301      	movs	r3, #1
 800a754:	e000      	b.n	800a758 <xQueueReceive+0x78>
 800a756:	2300      	movs	r3, #0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10b      	bne.n	800a774 <xQueueReceive+0x94>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	61bb      	str	r3, [r7, #24]
}
 800a76e:	bf00      	nop
 800a770:	bf00      	nop
 800a772:	e7fd      	b.n	800a770 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a774:	f002 f8c0 	bl	800c8f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a77c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a780:	2b00      	cmp	r3, #0
 800a782:	d01f      	beq.n	800a7c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a784:	68b9      	ldr	r1, [r7, #8]
 800a786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a788:	f000 fac4 	bl	800ad14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78e:	1e5a      	subs	r2, r3, #1
 800a790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a792:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00f      	beq.n	800a7bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79e:	3310      	adds	r3, #16
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f001 f877 	bl	800b894 <xTaskRemoveFromEventList>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d007      	beq.n	800a7bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7ac:	4b3c      	ldr	r3, [pc, #240]	@ (800a8a0 <xQueueReceive+0x1c0>)
 800a7ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7bc:	f002 f8ce 	bl	800c95c <vPortExitCritical>
				return pdPASS;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e069      	b.n	800a898 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d103      	bne.n	800a7d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7ca:	f002 f8c7 	bl	800c95c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e062      	b.n	800a898 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d106      	bne.n	800a7e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7d8:	f107 0310 	add.w	r3, r7, #16
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f001 f8bd 	bl	800b95c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7e6:	f002 f8b9 	bl	800c95c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7ea:	f000 fe25 	bl	800b438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7ee:	f002 f883 	bl	800c8f8 <vPortEnterCritical>
 800a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7f8:	b25b      	sxtb	r3, r3
 800a7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fe:	d103      	bne.n	800a808 <xQueueReceive+0x128>
 800a800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a802:	2200      	movs	r2, #0
 800a804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a80e:	b25b      	sxtb	r3, r3
 800a810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a814:	d103      	bne.n	800a81e <xQueueReceive+0x13e>
 800a816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a81e:	f002 f89d 	bl	800c95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a822:	1d3a      	adds	r2, r7, #4
 800a824:	f107 0310 	add.w	r3, r7, #16
 800a828:	4611      	mov	r1, r2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 f8ac 	bl	800b988 <xTaskCheckForTimeOut>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d123      	bne.n	800a87e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a838:	f000 fae4 	bl	800ae04 <prvIsQueueEmpty>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d017      	beq.n	800a872 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a844:	3324      	adds	r3, #36	@ 0x24
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	4611      	mov	r1, r2
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 ffd0 	bl	800b7f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a850:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a852:	f000 fa85 	bl	800ad60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a856:	f000 fdfd 	bl	800b454 <xTaskResumeAll>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d189      	bne.n	800a774 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a860:	4b0f      	ldr	r3, [pc, #60]	@ (800a8a0 <xQueueReceive+0x1c0>)
 800a862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	e780      	b.n	800a774 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a874:	f000 fa74 	bl	800ad60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a878:	f000 fdec 	bl	800b454 <xTaskResumeAll>
 800a87c:	e77a      	b.n	800a774 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a87e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a880:	f000 fa6e 	bl	800ad60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a884:	f000 fde6 	bl	800b454 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a88a:	f000 fabb 	bl	800ae04 <prvIsQueueEmpty>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	f43f af6f 	beq.w	800a774 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a896:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3730      	adds	r7, #48	@ 0x30
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	e000ed04 	.word	0xe000ed04

0800a8a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08e      	sub	sp, #56	@ 0x38
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10b      	bne.n	800a8d8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	623b      	str	r3, [r7, #32]
}
 800a8d2:	bf00      	nop
 800a8d4:	bf00      	nop
 800a8d6:	e7fd      	b.n	800a8d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00b      	beq.n	800a8f8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	61fb      	str	r3, [r7, #28]
}
 800a8f2:	bf00      	nop
 800a8f4:	bf00      	nop
 800a8f6:	e7fd      	b.n	800a8f4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8f8:	f001 f992 	bl	800bc20 <xTaskGetSchedulerState>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d102      	bne.n	800a908 <xQueueSemaphoreTake+0x64>
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <xQueueSemaphoreTake+0x68>
 800a908:	2301      	movs	r3, #1
 800a90a:	e000      	b.n	800a90e <xQueueSemaphoreTake+0x6a>
 800a90c:	2300      	movs	r3, #0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10b      	bne.n	800a92a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	61bb      	str	r3, [r7, #24]
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop
 800a928:	e7fd      	b.n	800a926 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a92a:	f001 ffe5 	bl	800c8f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a932:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a936:	2b00      	cmp	r3, #0
 800a938:	d024      	beq.n	800a984 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93c:	1e5a      	subs	r2, r3, #1
 800a93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a940:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d104      	bne.n	800a954 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a94a:	f001 fae3 	bl	800bf14 <pvTaskIncrementMutexHeldCount>
 800a94e:	4602      	mov	r2, r0
 800a950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a952:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00f      	beq.n	800a97c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95e:	3310      	adds	r3, #16
 800a960:	4618      	mov	r0, r3
 800a962:	f000 ff97 	bl	800b894 <xTaskRemoveFromEventList>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d007      	beq.n	800a97c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a96c:	4b54      	ldr	r3, [pc, #336]	@ (800aac0 <xQueueSemaphoreTake+0x21c>)
 800a96e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a97c:	f001 ffee 	bl	800c95c <vPortExitCritical>
				return pdPASS;
 800a980:	2301      	movs	r3, #1
 800a982:	e098      	b.n	800aab6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d112      	bne.n	800a9b0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00b      	beq.n	800a9a8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	617b      	str	r3, [r7, #20]
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a9a8:	f001 ffd8 	bl	800c95c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e082      	b.n	800aab6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 ffce 	bl	800b95c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9c4:	f001 ffca 	bl	800c95c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9c8:	f000 fd36 	bl	800b438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9cc:	f001 ff94 	bl	800c8f8 <vPortEnterCritical>
 800a9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9d6:	b25b      	sxtb	r3, r3
 800a9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9dc:	d103      	bne.n	800a9e6 <xQueueSemaphoreTake+0x142>
 800a9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9ec:	b25b      	sxtb	r3, r3
 800a9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f2:	d103      	bne.n	800a9fc <xQueueSemaphoreTake+0x158>
 800a9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9fc:	f001 ffae 	bl	800c95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa00:	463a      	mov	r2, r7
 800aa02:	f107 030c 	add.w	r3, r7, #12
 800aa06:	4611      	mov	r1, r2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 ffbd 	bl	800b988 <xTaskCheckForTimeOut>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d132      	bne.n	800aa7a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa16:	f000 f9f5 	bl	800ae04 <prvIsQueueEmpty>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d026      	beq.n	800aa6e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d109      	bne.n	800aa3c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aa28:	f001 ff66 	bl	800c8f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f001 f913 	bl	800bc5c <xTaskPriorityInherit>
 800aa36:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800aa38:	f001 ff90 	bl	800c95c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3e:	3324      	adds	r3, #36	@ 0x24
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	4611      	mov	r1, r2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 fed3 	bl	800b7f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa4c:	f000 f988 	bl	800ad60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa50:	f000 fd00 	bl	800b454 <xTaskResumeAll>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f47f af67 	bne.w	800a92a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800aa5c:	4b18      	ldr	r3, [pc, #96]	@ (800aac0 <xQueueSemaphoreTake+0x21c>)
 800aa5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	e75d      	b.n	800a92a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa70:	f000 f976 	bl	800ad60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa74:	f000 fcee 	bl	800b454 <xTaskResumeAll>
 800aa78:	e757      	b.n	800a92a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa7c:	f000 f970 	bl	800ad60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa80:	f000 fce8 	bl	800b454 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa86:	f000 f9bd 	bl	800ae04 <prvIsQueueEmpty>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f43f af4c 	beq.w	800a92a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00d      	beq.n	800aab4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800aa98:	f001 ff2e 	bl	800c8f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa9e:	f000 f8b7 	bl	800ac10 <prvGetDisinheritPriorityAfterTimeout>
 800aaa2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aaa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f001 f9ae 	bl	800be0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aab0:	f001 ff54 	bl	800c95c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aab4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3738      	adds	r7, #56	@ 0x38
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	e000ed04 	.word	0xe000ed04

0800aac4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08e      	sub	sp, #56	@ 0x38
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10b      	bne.n	800aaf2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	623b      	str	r3, [r7, #32]
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	e7fd      	b.n	800aaee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d103      	bne.n	800ab00 <xQueueReceiveFromISR+0x3c>
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <xQueueReceiveFromISR+0x40>
 800ab00:	2301      	movs	r3, #1
 800ab02:	e000      	b.n	800ab06 <xQueueReceiveFromISR+0x42>
 800ab04:	2300      	movs	r3, #0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10b      	bne.n	800ab22 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	61fb      	str	r3, [r7, #28]
}
 800ab1c:	bf00      	nop
 800ab1e:	bf00      	nop
 800ab20:	e7fd      	b.n	800ab1e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab22:	f001 ffc9 	bl	800cab8 <vPortValidateInterruptPriority>
	__asm volatile
 800ab26:	f3ef 8211 	mrs	r2, BASEPRI
 800ab2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	61ba      	str	r2, [r7, #24]
 800ab3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d02f      	beq.n	800abae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab5c:	f000 f8da 	bl	800ad14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab62:	1e5a      	subs	r2, r3, #1
 800ab64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab66:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ab6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab70:	d112      	bne.n	800ab98 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d016      	beq.n	800aba8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7c:	3310      	adds	r3, #16
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fe88 	bl	800b894 <xTaskRemoveFromEventList>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00e      	beq.n	800aba8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00b      	beq.n	800aba8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	e007      	b.n	800aba8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	b25a      	sxtb	r2, r3
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800aba8:	2301      	movs	r3, #1
 800abaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800abac:	e001      	b.n	800abb2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800abae:	2300      	movs	r3, #0
 800abb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	f383 8811 	msr	BASEPRI, r3
}
 800abbc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3738      	adds	r7, #56	@ 0x38
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10b      	bne.n	800abf2 <vQueueDelete+0x2a>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	60bb      	str	r3, [r7, #8]
}
 800abec:	bf00      	nop
 800abee:	bf00      	nop
 800abf0:	e7fd      	b.n	800abee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 f95e 	bl	800aeb4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d102      	bne.n	800ac08 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f002 f868 	bl	800ccd8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ac08:	bf00      	nop
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d006      	beq.n	800ac2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ac2a:	60fb      	str	r3, [r7, #12]
 800ac2c:	e001      	b.n	800ac32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac32:	68fb      	ldr	r3, [r7, #12]
	}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10d      	bne.n	800ac7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d14d      	bne.n	800ad02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f001 f85e 	bl	800bd2c <xTaskPriorityDisinherit>
 800ac70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	609a      	str	r2, [r3, #8]
 800ac78:	e043      	b.n	800ad02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d119      	bne.n	800acb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6858      	ldr	r0, [r3, #4]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac88:	461a      	mov	r2, r3
 800ac8a:	68b9      	ldr	r1, [r7, #8]
 800ac8c:	f01e fe60 	bl	8029950 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac98:	441a      	add	r2, r3
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d32b      	bcc.n	800ad02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	605a      	str	r2, [r3, #4]
 800acb2:	e026      	b.n	800ad02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	68d8      	ldr	r0, [r3, #12]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbc:	461a      	mov	r2, r3
 800acbe:	68b9      	ldr	r1, [r7, #8]
 800acc0:	f01e fe46 	bl	8029950 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	68da      	ldr	r2, [r3, #12]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800accc:	425b      	negs	r3, r3
 800acce:	441a      	add	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d207      	bcs.n	800acf0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace8:	425b      	negs	r3, r3
 800acea:	441a      	add	r2, r3
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d105      	bne.n	800ad02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	3b01      	subs	r3, #1
 800ad00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ad0a:	697b      	ldr	r3, [r7, #20]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d018      	beq.n	800ad58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68da      	ldr	r2, [r3, #12]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2e:	441a      	add	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68da      	ldr	r2, [r3, #12]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d303      	bcc.n	800ad48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	68d9      	ldr	r1, [r3, #12]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad50:	461a      	mov	r2, r3
 800ad52:	6838      	ldr	r0, [r7, #0]
 800ad54:	f01e fdfc 	bl	8029950 <memcpy>
	}
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad68:	f001 fdc6 	bl	800c8f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad74:	e011      	b.n	800ad9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d012      	beq.n	800ada4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	3324      	adds	r3, #36	@ 0x24
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 fd86 	bl	800b894 <xTaskRemoveFromEventList>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad8e:	f000 fe5f 	bl	800ba50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dce9      	bgt.n	800ad76 <prvUnlockQueue+0x16>
 800ada2:	e000      	b.n	800ada6 <prvUnlockQueue+0x46>
					break;
 800ada4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	22ff      	movs	r2, #255	@ 0xff
 800adaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800adae:	f001 fdd5 	bl	800c95c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800adb2:	f001 fda1 	bl	800c8f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adbe:	e011      	b.n	800ade4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d012      	beq.n	800adee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	3310      	adds	r3, #16
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 fd61 	bl	800b894 <xTaskRemoveFromEventList>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800add8:	f000 fe3a 	bl	800ba50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	3b01      	subs	r3, #1
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ade4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	dce9      	bgt.n	800adc0 <prvUnlockQueue+0x60>
 800adec:	e000      	b.n	800adf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	22ff      	movs	r2, #255	@ 0xff
 800adf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800adf8:	f001 fdb0 	bl	800c95c <vPortExitCritical>
}
 800adfc:	bf00      	nop
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae0c:	f001 fd74 	bl	800c8f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d102      	bne.n	800ae1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	e001      	b.n	800ae22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae22:	f001 fd9b 	bl	800c95c <vPortExitCritical>

	return xReturn;
 800ae26:	68fb      	ldr	r3, [r7, #12]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae38:	f001 fd5e 	bl	800c8f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d102      	bne.n	800ae4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	60fb      	str	r3, [r7, #12]
 800ae4c:	e001      	b.n	800ae52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae52:	f001 fd83 	bl	800c95c <vPortExitCritical>

	return xReturn;
 800ae56:	68fb      	ldr	r3, [r7, #12]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60fb      	str	r3, [r7, #12]
 800ae6e:	e014      	b.n	800ae9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae70:	4a0f      	ldr	r2, [pc, #60]	@ (800aeb0 <vQueueAddToRegistry+0x50>)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10b      	bne.n	800ae94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae7c:	490c      	ldr	r1, [pc, #48]	@ (800aeb0 <vQueueAddToRegistry+0x50>)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae86:	4a0a      	ldr	r2, [pc, #40]	@ (800aeb0 <vQueueAddToRegistry+0x50>)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	4413      	add	r3, r2
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae92:	e006      	b.n	800aea2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	3301      	adds	r3, #1
 800ae98:	60fb      	str	r3, [r7, #12]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2b07      	cmp	r3, #7
 800ae9e:	d9e7      	bls.n	800ae70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aea0:	bf00      	nop
 800aea2:	bf00      	nop
 800aea4:	3714      	adds	r7, #20
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	24000db0 	.word	0x24000db0

0800aeb4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aebc:	2300      	movs	r3, #0
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	e016      	b.n	800aef0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aec2:	4a10      	ldr	r2, [pc, #64]	@ (800af04 <vQueueUnregisterQueue+0x50>)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	4413      	add	r3, r2
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d10b      	bne.n	800aeea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aed2:	4a0c      	ldr	r2, [pc, #48]	@ (800af04 <vQueueUnregisterQueue+0x50>)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2100      	movs	r1, #0
 800aed8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aedc:	4a09      	ldr	r2, [pc, #36]	@ (800af04 <vQueueUnregisterQueue+0x50>)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	00db      	lsls	r3, r3, #3
 800aee2:	4413      	add	r3, r2
 800aee4:	2200      	movs	r2, #0
 800aee6:	605a      	str	r2, [r3, #4]
				break;
 800aee8:	e006      	b.n	800aef8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3301      	adds	r3, #1
 800aeee:	60fb      	str	r3, [r7, #12]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b07      	cmp	r3, #7
 800aef4:	d9e5      	bls.n	800aec2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aef6:	bf00      	nop
 800aef8:	bf00      	nop
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	24000db0 	.word	0x24000db0

0800af08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af18:	f001 fcee 	bl	800c8f8 <vPortEnterCritical>
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af22:	b25b      	sxtb	r3, r3
 800af24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af28:	d103      	bne.n	800af32 <vQueueWaitForMessageRestricted+0x2a>
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af38:	b25b      	sxtb	r3, r3
 800af3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3e:	d103      	bne.n	800af48 <vQueueWaitForMessageRestricted+0x40>
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af48:	f001 fd08 	bl	800c95c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af50:	2b00      	cmp	r3, #0
 800af52:	d106      	bne.n	800af62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	3324      	adds	r3, #36	@ 0x24
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	68b9      	ldr	r1, [r7, #8]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 fc6d 	bl	800b83c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af62:	6978      	ldr	r0, [r7, #20]
 800af64:	f7ff fefc 	bl	800ad60 <prvUnlockQueue>
	}
 800af68:	bf00      	nop
 800af6a:	3718      	adds	r7, #24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08e      	sub	sp, #56	@ 0x38
 800af74:	af04      	add	r7, sp, #16
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10b      	bne.n	800af9c <xTaskCreateStatic+0x2c>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	623b      	str	r3, [r7, #32]
}
 800af96:	bf00      	nop
 800af98:	bf00      	nop
 800af9a:	e7fd      	b.n	800af98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10b      	bne.n	800afba <xTaskCreateStatic+0x4a>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	61fb      	str	r3, [r7, #28]
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop
 800afb8:	e7fd      	b.n	800afb6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800afba:	23a8      	movs	r3, #168	@ 0xa8
 800afbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2ba8      	cmp	r3, #168	@ 0xa8
 800afc2:	d00b      	beq.n	800afdc <xTaskCreateStatic+0x6c>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	61bb      	str	r3, [r7, #24]
}
 800afd6:	bf00      	nop
 800afd8:	bf00      	nop
 800afda:	e7fd      	b.n	800afd8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afdc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d01e      	beq.n	800b022 <xTaskCreateStatic+0xb2>
 800afe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d01b      	beq.n	800b022 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aff2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800affc:	2300      	movs	r3, #0
 800affe:	9303      	str	r3, [sp, #12]
 800b000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b002:	9302      	str	r3, [sp, #8]
 800b004:	f107 0314 	add.w	r3, r7, #20
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	68b9      	ldr	r1, [r7, #8]
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f000 f851 	bl	800b0bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b01a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b01c:	f000 f8f6 	bl	800b20c <prvAddNewTaskToReadyList>
 800b020:	e001      	b.n	800b026 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b026:	697b      	ldr	r3, [r7, #20]
	}
 800b028:	4618      	mov	r0, r3
 800b02a:	3728      	adds	r7, #40	@ 0x28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b030:	b580      	push	{r7, lr}
 800b032:	b08c      	sub	sp, #48	@ 0x30
 800b034:	af04      	add	r7, sp, #16
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	603b      	str	r3, [r7, #0]
 800b03c:	4613      	mov	r3, r2
 800b03e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b040:	88fb      	ldrh	r3, [r7, #6]
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4618      	mov	r0, r3
 800b046:	f001 fd79 	bl	800cb3c <pvPortMalloc>
 800b04a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00e      	beq.n	800b070 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b052:	20a8      	movs	r0, #168	@ 0xa8
 800b054:	f001 fd72 	bl	800cb3c <pvPortMalloc>
 800b058:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	631a      	str	r2, [r3, #48]	@ 0x30
 800b066:	e005      	b.n	800b074 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b068:	6978      	ldr	r0, [r7, #20]
 800b06a:	f001 fe35 	bl	800ccd8 <vPortFree>
 800b06e:	e001      	b.n	800b074 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d017      	beq.n	800b0aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b082:	88fa      	ldrh	r2, [r7, #6]
 800b084:	2300      	movs	r3, #0
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	9302      	str	r3, [sp, #8]
 800b08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	68b9      	ldr	r1, [r7, #8]
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 f80f 	bl	800b0bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b09e:	69f8      	ldr	r0, [r7, #28]
 800b0a0:	f000 f8b4 	bl	800b20c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	61bb      	str	r3, [r7, #24]
 800b0a8:	e002      	b.n	800b0b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b0b0:	69bb      	ldr	r3, [r7, #24]
	}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3720      	adds	r7, #32
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b088      	sub	sp, #32
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	21a5      	movs	r1, #165	@ 0xa5
 800b0d6:	f01e fb10 	bl	80296fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0de:	6879      	ldr	r1, [r7, #4]
 800b0e0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b0e4:	440b      	add	r3, r1
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	f023 0307 	bic.w	r3, r3, #7
 800b0f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	f003 0307 	and.w	r3, r3, #7
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00b      	beq.n	800b116 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	617b      	str	r3, [r7, #20]
}
 800b110:	bf00      	nop
 800b112:	bf00      	nop
 800b114:	e7fd      	b.n	800b112 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d01f      	beq.n	800b15c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b11c:	2300      	movs	r3, #0
 800b11e:	61fb      	str	r3, [r7, #28]
 800b120:	e012      	b.n	800b148 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	4413      	add	r3, r2
 800b128:	7819      	ldrb	r1, [r3, #0]
 800b12a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	4413      	add	r3, r2
 800b130:	3334      	adds	r3, #52	@ 0x34
 800b132:	460a      	mov	r2, r1
 800b134:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	4413      	add	r3, r2
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d006      	beq.n	800b150 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	3301      	adds	r3, #1
 800b146:	61fb      	str	r3, [r7, #28]
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	2b0f      	cmp	r3, #15
 800b14c:	d9e9      	bls.n	800b122 <prvInitialiseNewTask+0x66>
 800b14e:	e000      	b.n	800b152 <prvInitialiseNewTask+0x96>
			{
				break;
 800b150:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	2200      	movs	r2, #0
 800b156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b15a:	e003      	b.n	800b164 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b166:	2b37      	cmp	r3, #55	@ 0x37
 800b168:	d901      	bls.n	800b16e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b16a:	2337      	movs	r3, #55	@ 0x37
 800b16c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b172:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b178:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17c:	2200      	movs	r2, #0
 800b17e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b182:	3304      	adds	r3, #4
 800b184:	4618      	mov	r0, r3
 800b186:	f7fe fe33 	bl	8009df0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18c:	3318      	adds	r3, #24
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fe fe2e 	bl	8009df0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b198:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b19c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1bc:	3354      	adds	r3, #84	@ 0x54
 800b1be:	224c      	movs	r2, #76	@ 0x4c
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f01e fa99 	bl	80296fa <memset>
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ca:	4a0d      	ldr	r2, [pc, #52]	@ (800b200 <prvInitialiseNewTask+0x144>)
 800b1cc:	659a      	str	r2, [r3, #88]	@ 0x58
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	4a0c      	ldr	r2, [pc, #48]	@ (800b204 <prvInitialiseNewTask+0x148>)
 800b1d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d6:	4a0c      	ldr	r2, [pc, #48]	@ (800b208 <prvInitialiseNewTask+0x14c>)
 800b1d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	68f9      	ldr	r1, [r7, #12]
 800b1de:	69b8      	ldr	r0, [r7, #24]
 800b1e0:	f001 fa5a 	bl	800c698 <pxPortInitialiseStack>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1f6:	bf00      	nop
 800b1f8:	3720      	adds	r7, #32
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	2400705c 	.word	0x2400705c
 800b204:	240070c4 	.word	0x240070c4
 800b208:	2400712c 	.word	0x2400712c

0800b20c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b214:	f001 fb70 	bl	800c8f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b218:	4b2d      	ldr	r3, [pc, #180]	@ (800b2d0 <prvAddNewTaskToReadyList+0xc4>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3301      	adds	r3, #1
 800b21e:	4a2c      	ldr	r2, [pc, #176]	@ (800b2d0 <prvAddNewTaskToReadyList+0xc4>)
 800b220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b222:	4b2c      	ldr	r3, [pc, #176]	@ (800b2d4 <prvAddNewTaskToReadyList+0xc8>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d109      	bne.n	800b23e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b22a:	4a2a      	ldr	r2, [pc, #168]	@ (800b2d4 <prvAddNewTaskToReadyList+0xc8>)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b230:	4b27      	ldr	r3, [pc, #156]	@ (800b2d0 <prvAddNewTaskToReadyList+0xc4>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d110      	bne.n	800b25a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b238:	f000 fc2e 	bl	800ba98 <prvInitialiseTaskLists>
 800b23c:	e00d      	b.n	800b25a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b23e:	4b26      	ldr	r3, [pc, #152]	@ (800b2d8 <prvAddNewTaskToReadyList+0xcc>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d109      	bne.n	800b25a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b246:	4b23      	ldr	r3, [pc, #140]	@ (800b2d4 <prvAddNewTaskToReadyList+0xc8>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b250:	429a      	cmp	r2, r3
 800b252:	d802      	bhi.n	800b25a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b254:	4a1f      	ldr	r2, [pc, #124]	@ (800b2d4 <prvAddNewTaskToReadyList+0xc8>)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b25a:	4b20      	ldr	r3, [pc, #128]	@ (800b2dc <prvAddNewTaskToReadyList+0xd0>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3301      	adds	r3, #1
 800b260:	4a1e      	ldr	r2, [pc, #120]	@ (800b2dc <prvAddNewTaskToReadyList+0xd0>)
 800b262:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b264:	4b1d      	ldr	r3, [pc, #116]	@ (800b2dc <prvAddNewTaskToReadyList+0xd0>)
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b270:	4b1b      	ldr	r3, [pc, #108]	@ (800b2e0 <prvAddNewTaskToReadyList+0xd4>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	429a      	cmp	r2, r3
 800b276:	d903      	bls.n	800b280 <prvAddNewTaskToReadyList+0x74>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27c:	4a18      	ldr	r2, [pc, #96]	@ (800b2e0 <prvAddNewTaskToReadyList+0xd4>)
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b284:	4613      	mov	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4a15      	ldr	r2, [pc, #84]	@ (800b2e4 <prvAddNewTaskToReadyList+0xd8>)
 800b28e:	441a      	add	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3304      	adds	r3, #4
 800b294:	4619      	mov	r1, r3
 800b296:	4610      	mov	r0, r2
 800b298:	f7fe fdb7 	bl	8009e0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b29c:	f001 fb5e 	bl	800c95c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b2a0:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d8 <prvAddNewTaskToReadyList+0xcc>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00e      	beq.n	800b2c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d4 <prvAddNewTaskToReadyList+0xc8>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d207      	bcs.n	800b2c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e8 <prvAddNewTaskToReadyList+0xdc>)
 800b2b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	240012c4 	.word	0x240012c4
 800b2d4:	24000df0 	.word	0x24000df0
 800b2d8:	240012d0 	.word	0x240012d0
 800b2dc:	240012e0 	.word	0x240012e0
 800b2e0:	240012cc 	.word	0x240012cc
 800b2e4:	24000df4 	.word	0x24000df4
 800b2e8:	e000ed04 	.word	0xe000ed04

0800b2ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d018      	beq.n	800b330 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2fe:	4b14      	ldr	r3, [pc, #80]	@ (800b350 <vTaskDelay+0x64>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00b      	beq.n	800b31e <vTaskDelay+0x32>
	__asm volatile
 800b306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	60bb      	str	r3, [r7, #8]
}
 800b318:	bf00      	nop
 800b31a:	bf00      	nop
 800b31c:	e7fd      	b.n	800b31a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b31e:	f000 f88b 	bl	800b438 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b322:	2100      	movs	r1, #0
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 fe09 	bl	800bf3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b32a:	f000 f893 	bl	800b454 <xTaskResumeAll>
 800b32e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d107      	bne.n	800b346 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b336:	4b07      	ldr	r3, [pc, #28]	@ (800b354 <vTaskDelay+0x68>)
 800b338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b346:	bf00      	nop
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	240012ec 	.word	0x240012ec
 800b354:	e000ed04 	.word	0xe000ed04

0800b358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08a      	sub	sp, #40	@ 0x28
 800b35c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b35e:	2300      	movs	r3, #0
 800b360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b362:	2300      	movs	r3, #0
 800b364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b366:	463a      	mov	r2, r7
 800b368:	1d39      	adds	r1, r7, #4
 800b36a:	f107 0308 	add.w	r3, r7, #8
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fe fcea 	bl	8009d48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	9202      	str	r2, [sp, #8]
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	2300      	movs	r3, #0
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	2300      	movs	r3, #0
 800b384:	460a      	mov	r2, r1
 800b386:	4924      	ldr	r1, [pc, #144]	@ (800b418 <vTaskStartScheduler+0xc0>)
 800b388:	4824      	ldr	r0, [pc, #144]	@ (800b41c <vTaskStartScheduler+0xc4>)
 800b38a:	f7ff fdf1 	bl	800af70 <xTaskCreateStatic>
 800b38e:	4603      	mov	r3, r0
 800b390:	4a23      	ldr	r2, [pc, #140]	@ (800b420 <vTaskStartScheduler+0xc8>)
 800b392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b394:	4b22      	ldr	r3, [pc, #136]	@ (800b420 <vTaskStartScheduler+0xc8>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d002      	beq.n	800b3a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b39c:	2301      	movs	r3, #1
 800b39e:	617b      	str	r3, [r7, #20]
 800b3a0:	e001      	b.n	800b3a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d102      	bne.n	800b3b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b3ac:	f000 fe1a 	bl	800bfe4 <xTimerCreateTimerTask>
 800b3b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d11b      	bne.n	800b3f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3bc:	f383 8811 	msr	BASEPRI, r3
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	613b      	str	r3, [r7, #16]
}
 800b3ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3cc:	4b15      	ldr	r3, [pc, #84]	@ (800b424 <vTaskStartScheduler+0xcc>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3354      	adds	r3, #84	@ 0x54
 800b3d2:	4a15      	ldr	r2, [pc, #84]	@ (800b428 <vTaskStartScheduler+0xd0>)
 800b3d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b3d6:	4b15      	ldr	r3, [pc, #84]	@ (800b42c <vTaskStartScheduler+0xd4>)
 800b3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b3de:	4b14      	ldr	r3, [pc, #80]	@ (800b430 <vTaskStartScheduler+0xd8>)
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b3e4:	4b13      	ldr	r3, [pc, #76]	@ (800b434 <vTaskStartScheduler+0xdc>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b3ea:	f001 f9e1 	bl	800c7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b3ee:	e00f      	b.n	800b410 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f6:	d10b      	bne.n	800b410 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	60fb      	str	r3, [r7, #12]
}
 800b40a:	bf00      	nop
 800b40c:	bf00      	nop
 800b40e:	e7fd      	b.n	800b40c <vTaskStartScheduler+0xb4>
}
 800b410:	bf00      	nop
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	0802a48c 	.word	0x0802a48c
 800b41c:	0800ba69 	.word	0x0800ba69
 800b420:	240012e8 	.word	0x240012e8
 800b424:	24000df0 	.word	0x24000df0
 800b428:	240000ac 	.word	0x240000ac
 800b42c:	240012e4 	.word	0x240012e4
 800b430:	240012d0 	.word	0x240012d0
 800b434:	240012c8 	.word	0x240012c8

0800b438 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b438:	b480      	push	{r7}
 800b43a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b43c:	4b04      	ldr	r3, [pc, #16]	@ (800b450 <vTaskSuspendAll+0x18>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	3301      	adds	r3, #1
 800b442:	4a03      	ldr	r2, [pc, #12]	@ (800b450 <vTaskSuspendAll+0x18>)
 800b444:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b446:	bf00      	nop
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	240012ec 	.word	0x240012ec

0800b454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b45e:	2300      	movs	r3, #0
 800b460:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b462:	4b42      	ldr	r3, [pc, #264]	@ (800b56c <xTaskResumeAll+0x118>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10b      	bne.n	800b482 <xTaskResumeAll+0x2e>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	603b      	str	r3, [r7, #0]
}
 800b47c:	bf00      	nop
 800b47e:	bf00      	nop
 800b480:	e7fd      	b.n	800b47e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b482:	f001 fa39 	bl	800c8f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b486:	4b39      	ldr	r3, [pc, #228]	@ (800b56c <xTaskResumeAll+0x118>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3b01      	subs	r3, #1
 800b48c:	4a37      	ldr	r2, [pc, #220]	@ (800b56c <xTaskResumeAll+0x118>)
 800b48e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b490:	4b36      	ldr	r3, [pc, #216]	@ (800b56c <xTaskResumeAll+0x118>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d162      	bne.n	800b55e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b498:	4b35      	ldr	r3, [pc, #212]	@ (800b570 <xTaskResumeAll+0x11c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d05e      	beq.n	800b55e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4a0:	e02f      	b.n	800b502 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a2:	4b34      	ldr	r3, [pc, #208]	@ (800b574 <xTaskResumeAll+0x120>)
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3318      	adds	r3, #24
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fe fd08 	bl	8009ec4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	3304      	adds	r3, #4
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fe fd03 	bl	8009ec4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4c2:	4b2d      	ldr	r3, [pc, #180]	@ (800b578 <xTaskResumeAll+0x124>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d903      	bls.n	800b4d2 <xTaskResumeAll+0x7e>
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ce:	4a2a      	ldr	r2, [pc, #168]	@ (800b578 <xTaskResumeAll+0x124>)
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4a27      	ldr	r2, [pc, #156]	@ (800b57c <xTaskResumeAll+0x128>)
 800b4e0:	441a      	add	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	f7fe fc8e 	bl	8009e0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f2:	4b23      	ldr	r3, [pc, #140]	@ (800b580 <xTaskResumeAll+0x12c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d302      	bcc.n	800b502 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b4fc:	4b21      	ldr	r3, [pc, #132]	@ (800b584 <xTaskResumeAll+0x130>)
 800b4fe:	2201      	movs	r2, #1
 800b500:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b502:	4b1c      	ldr	r3, [pc, #112]	@ (800b574 <xTaskResumeAll+0x120>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1cb      	bne.n	800b4a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b510:	f000 fb66 	bl	800bbe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b514:	4b1c      	ldr	r3, [pc, #112]	@ (800b588 <xTaskResumeAll+0x134>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d010      	beq.n	800b542 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b520:	f000 f846 	bl	800b5b0 <xTaskIncrementTick>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b52a:	4b16      	ldr	r3, [pc, #88]	@ (800b584 <xTaskResumeAll+0x130>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3b01      	subs	r3, #1
 800b534:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1f1      	bne.n	800b520 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b53c:	4b12      	ldr	r3, [pc, #72]	@ (800b588 <xTaskResumeAll+0x134>)
 800b53e:	2200      	movs	r2, #0
 800b540:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b542:	4b10      	ldr	r3, [pc, #64]	@ (800b584 <xTaskResumeAll+0x130>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d009      	beq.n	800b55e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b54a:	2301      	movs	r3, #1
 800b54c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b54e:	4b0f      	ldr	r3, [pc, #60]	@ (800b58c <xTaskResumeAll+0x138>)
 800b550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b554:	601a      	str	r2, [r3, #0]
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b55e:	f001 f9fd 	bl	800c95c <vPortExitCritical>

	return xAlreadyYielded;
 800b562:	68bb      	ldr	r3, [r7, #8]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	240012ec 	.word	0x240012ec
 800b570:	240012c4 	.word	0x240012c4
 800b574:	24001284 	.word	0x24001284
 800b578:	240012cc 	.word	0x240012cc
 800b57c:	24000df4 	.word	0x24000df4
 800b580:	24000df0 	.word	0x24000df0
 800b584:	240012d8 	.word	0x240012d8
 800b588:	240012d4 	.word	0x240012d4
 800b58c:	e000ed04 	.word	0xe000ed04

0800b590 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b596:	4b05      	ldr	r3, [pc, #20]	@ (800b5ac <xTaskGetTickCount+0x1c>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b59c:	687b      	ldr	r3, [r7, #4]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	240012c8 	.word	0x240012c8

0800b5b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5ba:	4b4f      	ldr	r3, [pc, #316]	@ (800b6f8 <xTaskIncrementTick+0x148>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f040 8090 	bne.w	800b6e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b5c4:	4b4d      	ldr	r3, [pc, #308]	@ (800b6fc <xTaskIncrementTick+0x14c>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b5cc:	4a4b      	ldr	r2, [pc, #300]	@ (800b6fc <xTaskIncrementTick+0x14c>)
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d121      	bne.n	800b61c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b5d8:	4b49      	ldr	r3, [pc, #292]	@ (800b700 <xTaskIncrementTick+0x150>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00b      	beq.n	800b5fa <xTaskIncrementTick+0x4a>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	603b      	str	r3, [r7, #0]
}
 800b5f4:	bf00      	nop
 800b5f6:	bf00      	nop
 800b5f8:	e7fd      	b.n	800b5f6 <xTaskIncrementTick+0x46>
 800b5fa:	4b41      	ldr	r3, [pc, #260]	@ (800b700 <xTaskIncrementTick+0x150>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	4b40      	ldr	r3, [pc, #256]	@ (800b704 <xTaskIncrementTick+0x154>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a3e      	ldr	r2, [pc, #248]	@ (800b700 <xTaskIncrementTick+0x150>)
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	4a3e      	ldr	r2, [pc, #248]	@ (800b704 <xTaskIncrementTick+0x154>)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6013      	str	r3, [r2, #0]
 800b60e:	4b3e      	ldr	r3, [pc, #248]	@ (800b708 <xTaskIncrementTick+0x158>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3301      	adds	r3, #1
 800b614:	4a3c      	ldr	r2, [pc, #240]	@ (800b708 <xTaskIncrementTick+0x158>)
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	f000 fae2 	bl	800bbe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b61c:	4b3b      	ldr	r3, [pc, #236]	@ (800b70c <xTaskIncrementTick+0x15c>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	429a      	cmp	r2, r3
 800b624:	d349      	bcc.n	800b6ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b626:	4b36      	ldr	r3, [pc, #216]	@ (800b700 <xTaskIncrementTick+0x150>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d104      	bne.n	800b63a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b630:	4b36      	ldr	r3, [pc, #216]	@ (800b70c <xTaskIncrementTick+0x15c>)
 800b632:	f04f 32ff 	mov.w	r2, #4294967295
 800b636:	601a      	str	r2, [r3, #0]
					break;
 800b638:	e03f      	b.n	800b6ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b63a:	4b31      	ldr	r3, [pc, #196]	@ (800b700 <xTaskIncrementTick+0x150>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d203      	bcs.n	800b65a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b652:	4a2e      	ldr	r2, [pc, #184]	@ (800b70c <xTaskIncrementTick+0x15c>)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b658:	e02f      	b.n	800b6ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	3304      	adds	r3, #4
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fe fc30 	bl	8009ec4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d004      	beq.n	800b676 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	3318      	adds	r3, #24
 800b670:	4618      	mov	r0, r3
 800b672:	f7fe fc27 	bl	8009ec4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b67a:	4b25      	ldr	r3, [pc, #148]	@ (800b710 <xTaskIncrementTick+0x160>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d903      	bls.n	800b68a <xTaskIncrementTick+0xda>
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b686:	4a22      	ldr	r2, [pc, #136]	@ (800b710 <xTaskIncrementTick+0x160>)
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b68e:	4613      	mov	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4a1f      	ldr	r2, [pc, #124]	@ (800b714 <xTaskIncrementTick+0x164>)
 800b698:	441a      	add	r2, r3
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	3304      	adds	r3, #4
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	f7fe fbb2 	bl	8009e0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b718 <xTaskIncrementTick+0x168>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d3b8      	bcc.n	800b626 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6b8:	e7b5      	b.n	800b626 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b6ba:	4b17      	ldr	r3, [pc, #92]	@ (800b718 <xTaskIncrementTick+0x168>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6c0:	4914      	ldr	r1, [pc, #80]	@ (800b714 <xTaskIncrementTick+0x164>)
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4413      	add	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	440b      	add	r3, r1
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d901      	bls.n	800b6d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b6d6:	4b11      	ldr	r3, [pc, #68]	@ (800b71c <xTaskIncrementTick+0x16c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d007      	beq.n	800b6ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	e004      	b.n	800b6ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b6e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b720 <xTaskIncrementTick+0x170>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	4a0d      	ldr	r2, [pc, #52]	@ (800b720 <xTaskIncrementTick+0x170>)
 800b6ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b6ee:	697b      	ldr	r3, [r7, #20]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	240012ec 	.word	0x240012ec
 800b6fc:	240012c8 	.word	0x240012c8
 800b700:	2400127c 	.word	0x2400127c
 800b704:	24001280 	.word	0x24001280
 800b708:	240012dc 	.word	0x240012dc
 800b70c:	240012e4 	.word	0x240012e4
 800b710:	240012cc 	.word	0x240012cc
 800b714:	24000df4 	.word	0x24000df4
 800b718:	24000df0 	.word	0x24000df0
 800b71c:	240012d8 	.word	0x240012d8
 800b720:	240012d4 	.word	0x240012d4

0800b724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b72a:	4b2b      	ldr	r3, [pc, #172]	@ (800b7d8 <vTaskSwitchContext+0xb4>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b732:	4b2a      	ldr	r3, [pc, #168]	@ (800b7dc <vTaskSwitchContext+0xb8>)
 800b734:	2201      	movs	r2, #1
 800b736:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b738:	e047      	b.n	800b7ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b73a:	4b28      	ldr	r3, [pc, #160]	@ (800b7dc <vTaskSwitchContext+0xb8>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b740:	4b27      	ldr	r3, [pc, #156]	@ (800b7e0 <vTaskSwitchContext+0xbc>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	e011      	b.n	800b76c <vTaskSwitchContext+0x48>
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10b      	bne.n	800b766 <vTaskSwitchContext+0x42>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	607b      	str	r3, [r7, #4]
}
 800b760:	bf00      	nop
 800b762:	bf00      	nop
 800b764:	e7fd      	b.n	800b762 <vTaskSwitchContext+0x3e>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3b01      	subs	r3, #1
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	491d      	ldr	r1, [pc, #116]	@ (800b7e4 <vTaskSwitchContext+0xc0>)
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	4613      	mov	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	440b      	add	r3, r1
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d0e3      	beq.n	800b748 <vTaskSwitchContext+0x24>
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	4613      	mov	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4413      	add	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4a16      	ldr	r2, [pc, #88]	@ (800b7e4 <vTaskSwitchContext+0xc0>)
 800b78c:	4413      	add	r3, r2
 800b78e:	60bb      	str	r3, [r7, #8]
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	685a      	ldr	r2, [r3, #4]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	605a      	str	r2, [r3, #4]
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	685a      	ldr	r2, [r3, #4]
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d104      	bne.n	800b7b0 <vTaskSwitchContext+0x8c>
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	685a      	ldr	r2, [r3, #4]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	605a      	str	r2, [r3, #4]
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b7e8 <vTaskSwitchContext+0xc4>)
 800b7b8:	6013      	str	r3, [r2, #0]
 800b7ba:	4a09      	ldr	r2, [pc, #36]	@ (800b7e0 <vTaskSwitchContext+0xbc>)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b7c0:	4b09      	ldr	r3, [pc, #36]	@ (800b7e8 <vTaskSwitchContext+0xc4>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3354      	adds	r3, #84	@ 0x54
 800b7c6:	4a09      	ldr	r2, [pc, #36]	@ (800b7ec <vTaskSwitchContext+0xc8>)
 800b7c8:	6013      	str	r3, [r2, #0]
}
 800b7ca:	bf00      	nop
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	240012ec 	.word	0x240012ec
 800b7dc:	240012d8 	.word	0x240012d8
 800b7e0:	240012cc 	.word	0x240012cc
 800b7e4:	24000df4 	.word	0x24000df4
 800b7e8:	24000df0 	.word	0x24000df0
 800b7ec:	240000ac 	.word	0x240000ac

0800b7f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10b      	bne.n	800b818 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	60fb      	str	r3, [r7, #12]
}
 800b812:	bf00      	nop
 800b814:	bf00      	nop
 800b816:	e7fd      	b.n	800b814 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b818:	4b07      	ldr	r3, [pc, #28]	@ (800b838 <vTaskPlaceOnEventList+0x48>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3318      	adds	r3, #24
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f7fe fb16 	bl	8009e52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b826:	2101      	movs	r1, #1
 800b828:	6838      	ldr	r0, [r7, #0]
 800b82a:	f000 fb87 	bl	800bf3c <prvAddCurrentTaskToDelayedList>
}
 800b82e:	bf00      	nop
 800b830:	3710      	adds	r7, #16
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	24000df0 	.word	0x24000df0

0800b83c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10b      	bne.n	800b866 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	617b      	str	r3, [r7, #20]
}
 800b860:	bf00      	nop
 800b862:	bf00      	nop
 800b864:	e7fd      	b.n	800b862 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b866:	4b0a      	ldr	r3, [pc, #40]	@ (800b890 <vTaskPlaceOnEventListRestricted+0x54>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3318      	adds	r3, #24
 800b86c:	4619      	mov	r1, r3
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f7fe facb 	bl	8009e0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b87a:	f04f 33ff 	mov.w	r3, #4294967295
 800b87e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b880:	6879      	ldr	r1, [r7, #4]
 800b882:	68b8      	ldr	r0, [r7, #8]
 800b884:	f000 fb5a 	bl	800bf3c <prvAddCurrentTaskToDelayedList>
	}
 800b888:	bf00      	nop
 800b88a:	3718      	adds	r7, #24
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	24000df0 	.word	0x24000df0

0800b894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10b      	bne.n	800b8c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	60fb      	str	r3, [r7, #12]
}
 800b8bc:	bf00      	nop
 800b8be:	bf00      	nop
 800b8c0:	e7fd      	b.n	800b8be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	3318      	adds	r3, #24
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe fafc 	bl	8009ec4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b944 <xTaskRemoveFromEventList+0xb0>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d11d      	bne.n	800b910 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fe faf3 	bl	8009ec4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8e2:	4b19      	ldr	r3, [pc, #100]	@ (800b948 <xTaskRemoveFromEventList+0xb4>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d903      	bls.n	800b8f2 <xTaskRemoveFromEventList+0x5e>
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ee:	4a16      	ldr	r2, [pc, #88]	@ (800b948 <xTaskRemoveFromEventList+0xb4>)
 800b8f0:	6013      	str	r3, [r2, #0]
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4413      	add	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	4a13      	ldr	r2, [pc, #76]	@ (800b94c <xTaskRemoveFromEventList+0xb8>)
 800b900:	441a      	add	r2, r3
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	3304      	adds	r3, #4
 800b906:	4619      	mov	r1, r3
 800b908:	4610      	mov	r0, r2
 800b90a:	f7fe fa7e 	bl	8009e0a <vListInsertEnd>
 800b90e:	e005      	b.n	800b91c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	3318      	adds	r3, #24
 800b914:	4619      	mov	r1, r3
 800b916:	480e      	ldr	r0, [pc, #56]	@ (800b950 <xTaskRemoveFromEventList+0xbc>)
 800b918:	f7fe fa77 	bl	8009e0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b920:	4b0c      	ldr	r3, [pc, #48]	@ (800b954 <xTaskRemoveFromEventList+0xc0>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b926:	429a      	cmp	r2, r3
 800b928:	d905      	bls.n	800b936 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b92a:	2301      	movs	r3, #1
 800b92c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b92e:	4b0a      	ldr	r3, [pc, #40]	@ (800b958 <xTaskRemoveFromEventList+0xc4>)
 800b930:	2201      	movs	r2, #1
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	e001      	b.n	800b93a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b936:	2300      	movs	r3, #0
 800b938:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b93a:	697b      	ldr	r3, [r7, #20]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3718      	adds	r7, #24
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	240012ec 	.word	0x240012ec
 800b948:	240012cc 	.word	0x240012cc
 800b94c:	24000df4 	.word	0x24000df4
 800b950:	24001284 	.word	0x24001284
 800b954:	24000df0 	.word	0x24000df0
 800b958:	240012d8 	.word	0x240012d8

0800b95c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b964:	4b06      	ldr	r3, [pc, #24]	@ (800b980 <vTaskInternalSetTimeOutState+0x24>)
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b96c:	4b05      	ldr	r3, [pc, #20]	@ (800b984 <vTaskInternalSetTimeOutState+0x28>)
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	605a      	str	r2, [r3, #4]
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	240012dc 	.word	0x240012dc
 800b984:	240012c8 	.word	0x240012c8

0800b988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10b      	bne.n	800b9b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	613b      	str	r3, [r7, #16]
}
 800b9aa:	bf00      	nop
 800b9ac:	bf00      	nop
 800b9ae:	e7fd      	b.n	800b9ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10b      	bne.n	800b9ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	60fb      	str	r3, [r7, #12]
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	e7fd      	b.n	800b9ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b9ce:	f000 ff93 	bl	800c8f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b9d2:	4b1d      	ldr	r3, [pc, #116]	@ (800ba48 <xTaskCheckForTimeOut+0xc0>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	69ba      	ldr	r2, [r7, #24]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d102      	bne.n	800b9f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	61fb      	str	r3, [r7, #28]
 800b9f0:	e023      	b.n	800ba3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	4b15      	ldr	r3, [pc, #84]	@ (800ba4c <xTaskCheckForTimeOut+0xc4>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d007      	beq.n	800ba0e <xTaskCheckForTimeOut+0x86>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d302      	bcc.n	800ba0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	61fb      	str	r3, [r7, #28]
 800ba0c:	e015      	b.n	800ba3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d20b      	bcs.n	800ba30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	1ad2      	subs	r2, r2, r3
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff ff99 	bl	800b95c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	61fb      	str	r3, [r7, #28]
 800ba2e:	e004      	b.n	800ba3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba36:	2301      	movs	r3, #1
 800ba38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba3a:	f000 ff8f 	bl	800c95c <vPortExitCritical>

	return xReturn;
 800ba3e:	69fb      	ldr	r3, [r7, #28]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3720      	adds	r7, #32
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	240012c8 	.word	0x240012c8
 800ba4c:	240012dc 	.word	0x240012dc

0800ba50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba50:	b480      	push	{r7}
 800ba52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba54:	4b03      	ldr	r3, [pc, #12]	@ (800ba64 <vTaskMissedYield+0x14>)
 800ba56:	2201      	movs	r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
}
 800ba5a:	bf00      	nop
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	240012d8 	.word	0x240012d8

0800ba68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba70:	f000 f852 	bl	800bb18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba74:	4b06      	ldr	r3, [pc, #24]	@ (800ba90 <prvIdleTask+0x28>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d9f9      	bls.n	800ba70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba7c:	4b05      	ldr	r3, [pc, #20]	@ (800ba94 <prvIdleTask+0x2c>)
 800ba7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba8c:	e7f0      	b.n	800ba70 <prvIdleTask+0x8>
 800ba8e:	bf00      	nop
 800ba90:	24000df4 	.word	0x24000df4
 800ba94:	e000ed04 	.word	0xe000ed04

0800ba98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba9e:	2300      	movs	r3, #0
 800baa0:	607b      	str	r3, [r7, #4]
 800baa2:	e00c      	b.n	800babe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4a12      	ldr	r2, [pc, #72]	@ (800baf8 <prvInitialiseTaskLists+0x60>)
 800bab0:	4413      	add	r3, r2
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fe f97c 	bl	8009db0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	3301      	adds	r3, #1
 800babc:	607b      	str	r3, [r7, #4]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b37      	cmp	r3, #55	@ 0x37
 800bac2:	d9ef      	bls.n	800baa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bac4:	480d      	ldr	r0, [pc, #52]	@ (800bafc <prvInitialiseTaskLists+0x64>)
 800bac6:	f7fe f973 	bl	8009db0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800baca:	480d      	ldr	r0, [pc, #52]	@ (800bb00 <prvInitialiseTaskLists+0x68>)
 800bacc:	f7fe f970 	bl	8009db0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bad0:	480c      	ldr	r0, [pc, #48]	@ (800bb04 <prvInitialiseTaskLists+0x6c>)
 800bad2:	f7fe f96d 	bl	8009db0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bad6:	480c      	ldr	r0, [pc, #48]	@ (800bb08 <prvInitialiseTaskLists+0x70>)
 800bad8:	f7fe f96a 	bl	8009db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800badc:	480b      	ldr	r0, [pc, #44]	@ (800bb0c <prvInitialiseTaskLists+0x74>)
 800bade:	f7fe f967 	bl	8009db0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bae2:	4b0b      	ldr	r3, [pc, #44]	@ (800bb10 <prvInitialiseTaskLists+0x78>)
 800bae4:	4a05      	ldr	r2, [pc, #20]	@ (800bafc <prvInitialiseTaskLists+0x64>)
 800bae6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bae8:	4b0a      	ldr	r3, [pc, #40]	@ (800bb14 <prvInitialiseTaskLists+0x7c>)
 800baea:	4a05      	ldr	r2, [pc, #20]	@ (800bb00 <prvInitialiseTaskLists+0x68>)
 800baec:	601a      	str	r2, [r3, #0]
}
 800baee:	bf00      	nop
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	24000df4 	.word	0x24000df4
 800bafc:	24001254 	.word	0x24001254
 800bb00:	24001268 	.word	0x24001268
 800bb04:	24001284 	.word	0x24001284
 800bb08:	24001298 	.word	0x24001298
 800bb0c:	240012b0 	.word	0x240012b0
 800bb10:	2400127c 	.word	0x2400127c
 800bb14:	24001280 	.word	0x24001280

0800bb18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb1e:	e019      	b.n	800bb54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb20:	f000 feea 	bl	800c8f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb24:	4b10      	ldr	r3, [pc, #64]	@ (800bb68 <prvCheckTasksWaitingTermination+0x50>)
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	3304      	adds	r3, #4
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7fe f9c7 	bl	8009ec4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb36:	4b0d      	ldr	r3, [pc, #52]	@ (800bb6c <prvCheckTasksWaitingTermination+0x54>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	4a0b      	ldr	r2, [pc, #44]	@ (800bb6c <prvCheckTasksWaitingTermination+0x54>)
 800bb3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb40:	4b0b      	ldr	r3, [pc, #44]	@ (800bb70 <prvCheckTasksWaitingTermination+0x58>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3b01      	subs	r3, #1
 800bb46:	4a0a      	ldr	r2, [pc, #40]	@ (800bb70 <prvCheckTasksWaitingTermination+0x58>)
 800bb48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb4a:	f000 ff07 	bl	800c95c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f810 	bl	800bb74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb54:	4b06      	ldr	r3, [pc, #24]	@ (800bb70 <prvCheckTasksWaitingTermination+0x58>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e1      	bne.n	800bb20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb5c:	bf00      	nop
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	24001298 	.word	0x24001298
 800bb6c:	240012c4 	.word	0x240012c4
 800bb70:	240012ac 	.word	0x240012ac

0800bb74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	3354      	adds	r3, #84	@ 0x54
 800bb80:	4618      	mov	r0, r3
 800bb82:	f01d fe03 	bl	802978c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d108      	bne.n	800bba2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb94:	4618      	mov	r0, r3
 800bb96:	f001 f89f 	bl	800ccd8 <vPortFree>
				vPortFree( pxTCB );
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f001 f89c 	bl	800ccd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bba0:	e019      	b.n	800bbd6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d103      	bne.n	800bbb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f001 f893 	bl	800ccd8 <vPortFree>
	}
 800bbb2:	e010      	b.n	800bbd6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d00b      	beq.n	800bbd6 <prvDeleteTCB+0x62>
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	60fb      	str	r3, [r7, #12]
}
 800bbd0:	bf00      	nop
 800bbd2:	bf00      	nop
 800bbd4:	e7fd      	b.n	800bbd2 <prvDeleteTCB+0x5e>
	}
 800bbd6:	bf00      	nop
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
	...

0800bbe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbe6:	4b0c      	ldr	r3, [pc, #48]	@ (800bc18 <prvResetNextTaskUnblockTime+0x38>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d104      	bne.n	800bbfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bbf0:	4b0a      	ldr	r3, [pc, #40]	@ (800bc1c <prvResetNextTaskUnblockTime+0x3c>)
 800bbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bbf8:	e008      	b.n	800bc0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbfa:	4b07      	ldr	r3, [pc, #28]	@ (800bc18 <prvResetNextTaskUnblockTime+0x38>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	4a04      	ldr	r2, [pc, #16]	@ (800bc1c <prvResetNextTaskUnblockTime+0x3c>)
 800bc0a:	6013      	str	r3, [r2, #0]
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	2400127c 	.word	0x2400127c
 800bc1c:	240012e4 	.word	0x240012e4

0800bc20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc26:	4b0b      	ldr	r3, [pc, #44]	@ (800bc54 <xTaskGetSchedulerState+0x34>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d102      	bne.n	800bc34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	607b      	str	r3, [r7, #4]
 800bc32:	e008      	b.n	800bc46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc34:	4b08      	ldr	r3, [pc, #32]	@ (800bc58 <xTaskGetSchedulerState+0x38>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d102      	bne.n	800bc42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	607b      	str	r3, [r7, #4]
 800bc40:	e001      	b.n	800bc46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc42:	2300      	movs	r3, #0
 800bc44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc46:	687b      	ldr	r3, [r7, #4]
	}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr
 800bc54:	240012d0 	.word	0x240012d0
 800bc58:	240012ec 	.word	0x240012ec

0800bc5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d051      	beq.n	800bd16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc76:	4b2a      	ldr	r3, [pc, #168]	@ (800bd20 <xTaskPriorityInherit+0xc4>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d241      	bcs.n	800bd04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	db06      	blt.n	800bc96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc88:	4b25      	ldr	r3, [pc, #148]	@ (800bd20 <xTaskPriorityInherit+0xc4>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc8e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6959      	ldr	r1, [r3, #20]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc9e:	4613      	mov	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4a1f      	ldr	r2, [pc, #124]	@ (800bd24 <xTaskPriorityInherit+0xc8>)
 800bca8:	4413      	add	r3, r2
 800bcaa:	4299      	cmp	r1, r3
 800bcac:	d122      	bne.n	800bcf4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	3304      	adds	r3, #4
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fe f906 	bl	8009ec4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcb8:	4b19      	ldr	r3, [pc, #100]	@ (800bd20 <xTaskPriorityInherit+0xc4>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcc6:	4b18      	ldr	r3, [pc, #96]	@ (800bd28 <xTaskPriorityInherit+0xcc>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d903      	bls.n	800bcd6 <xTaskPriorityInherit+0x7a>
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcd2:	4a15      	ldr	r2, [pc, #84]	@ (800bd28 <xTaskPriorityInherit+0xcc>)
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcda:	4613      	mov	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4a10      	ldr	r2, [pc, #64]	@ (800bd24 <xTaskPriorityInherit+0xc8>)
 800bce4:	441a      	add	r2, r3
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	3304      	adds	r3, #4
 800bcea:	4619      	mov	r1, r3
 800bcec:	4610      	mov	r0, r2
 800bcee:	f7fe f88c 	bl	8009e0a <vListInsertEnd>
 800bcf2:	e004      	b.n	800bcfe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcf4:	4b0a      	ldr	r3, [pc, #40]	@ (800bd20 <xTaskPriorityInherit+0xc4>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	e008      	b.n	800bd16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd08:	4b05      	ldr	r3, [pc, #20]	@ (800bd20 <xTaskPriorityInherit+0xc4>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d201      	bcs.n	800bd16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd12:	2301      	movs	r3, #1
 800bd14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd16:	68fb      	ldr	r3, [r7, #12]
	}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	24000df0 	.word	0x24000df0
 800bd24:	24000df4 	.word	0x24000df4
 800bd28:	240012cc 	.word	0x240012cc

0800bd2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d058      	beq.n	800bdf4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd42:	4b2f      	ldr	r3, [pc, #188]	@ (800be00 <xTaskPriorityDisinherit+0xd4>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d00b      	beq.n	800bd64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	60fb      	str	r3, [r7, #12]
}
 800bd5e:	bf00      	nop
 800bd60:	bf00      	nop
 800bd62:	e7fd      	b.n	800bd60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10b      	bne.n	800bd84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	60bb      	str	r3, [r7, #8]
}
 800bd7e:	bf00      	nop
 800bd80:	bf00      	nop
 800bd82:	e7fd      	b.n	800bd80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd88:	1e5a      	subs	r2, r3, #1
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d02c      	beq.n	800bdf4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d128      	bne.n	800bdf4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	3304      	adds	r3, #4
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe f88c 	bl	8009ec4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdc4:	4b0f      	ldr	r3, [pc, #60]	@ (800be04 <xTaskPriorityDisinherit+0xd8>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d903      	bls.n	800bdd4 <xTaskPriorityDisinherit+0xa8>
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd0:	4a0c      	ldr	r2, [pc, #48]	@ (800be04 <xTaskPriorityDisinherit+0xd8>)
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdd8:	4613      	mov	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4a09      	ldr	r2, [pc, #36]	@ (800be08 <xTaskPriorityDisinherit+0xdc>)
 800bde2:	441a      	add	r2, r3
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	f7fe f80d 	bl	8009e0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdf4:	697b      	ldr	r3, [r7, #20]
	}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	24000df0 	.word	0x24000df0
 800be04:	240012cc 	.word	0x240012cc
 800be08:	24000df4 	.word	0x24000df4

0800be0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b088      	sub	sp, #32
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be1a:	2301      	movs	r3, #1
 800be1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d06c      	beq.n	800befe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10b      	bne.n	800be44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	60fb      	str	r3, [r7, #12]
}
 800be3e:	bf00      	nop
 800be40:	bf00      	nop
 800be42:	e7fd      	b.n	800be40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d902      	bls.n	800be54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	61fb      	str	r3, [r7, #28]
 800be52:	e002      	b.n	800be5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5e:	69fa      	ldr	r2, [r7, #28]
 800be60:	429a      	cmp	r2, r3
 800be62:	d04c      	beq.n	800befe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d147      	bne.n	800befe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be6e:	4b26      	ldr	r3, [pc, #152]	@ (800bf08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	69ba      	ldr	r2, [r7, #24]
 800be74:	429a      	cmp	r2, r3
 800be76:	d10b      	bne.n	800be90 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800be78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	60bb      	str	r3, [r7, #8]
}
 800be8a:	bf00      	nop
 800be8c:	bf00      	nop
 800be8e:	e7fd      	b.n	800be8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	69fa      	ldr	r2, [r7, #28]
 800be9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	db04      	blt.n	800beae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	6959      	ldr	r1, [r3, #20]
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	4613      	mov	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4a13      	ldr	r2, [pc, #76]	@ (800bf0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bebe:	4413      	add	r3, r2
 800bec0:	4299      	cmp	r1, r3
 800bec2:	d11c      	bne.n	800befe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	3304      	adds	r3, #4
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fd fffb 	bl	8009ec4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bed2:	4b0f      	ldr	r3, [pc, #60]	@ (800bf10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d903      	bls.n	800bee2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bede:	4a0c      	ldr	r2, [pc, #48]	@ (800bf10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bee0:	6013      	str	r3, [r2, #0]
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bee6:	4613      	mov	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4a07      	ldr	r2, [pc, #28]	@ (800bf0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bef0:	441a      	add	r2, r3
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	3304      	adds	r3, #4
 800bef6:	4619      	mov	r1, r3
 800bef8:	4610      	mov	r0, r2
 800befa:	f7fd ff86 	bl	8009e0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800befe:	bf00      	nop
 800bf00:	3720      	adds	r7, #32
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	24000df0 	.word	0x24000df0
 800bf0c:	24000df4 	.word	0x24000df4
 800bf10:	240012cc 	.word	0x240012cc

0800bf14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bf14:	b480      	push	{r7}
 800bf16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bf18:	4b07      	ldr	r3, [pc, #28]	@ (800bf38 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d004      	beq.n	800bf2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bf20:	4b05      	ldr	r3, [pc, #20]	@ (800bf38 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf26:	3201      	adds	r2, #1
 800bf28:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bf2a:	4b03      	ldr	r3, [pc, #12]	@ (800bf38 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
	}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	24000df0 	.word	0x24000df0

0800bf3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf46:	4b21      	ldr	r3, [pc, #132]	@ (800bfcc <prvAddCurrentTaskToDelayedList+0x90>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf4c:	4b20      	ldr	r3, [pc, #128]	@ (800bfd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	3304      	adds	r3, #4
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fd ffb6 	bl	8009ec4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5e:	d10a      	bne.n	800bf76 <prvAddCurrentTaskToDelayedList+0x3a>
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d007      	beq.n	800bf76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf66:	4b1a      	ldr	r3, [pc, #104]	@ (800bfd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	4819      	ldr	r0, [pc, #100]	@ (800bfd4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf70:	f7fd ff4b 	bl	8009e0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf74:	e026      	b.n	800bfc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf7e:	4b14      	ldr	r3, [pc, #80]	@ (800bfd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d209      	bcs.n	800bfa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf8e:	4b12      	ldr	r3, [pc, #72]	@ (800bfd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	4b0f      	ldr	r3, [pc, #60]	@ (800bfd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	3304      	adds	r3, #4
 800bf98:	4619      	mov	r1, r3
 800bf9a:	4610      	mov	r0, r2
 800bf9c:	f7fd ff59 	bl	8009e52 <vListInsert>
}
 800bfa0:	e010      	b.n	800bfc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfa2:	4b0e      	ldr	r3, [pc, #56]	@ (800bfdc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	4b0a      	ldr	r3, [pc, #40]	@ (800bfd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3304      	adds	r3, #4
 800bfac:	4619      	mov	r1, r3
 800bfae:	4610      	mov	r0, r2
 800bfb0:	f7fd ff4f 	bl	8009e52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bfe0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d202      	bcs.n	800bfc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bfbe:	4a08      	ldr	r2, [pc, #32]	@ (800bfe0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	6013      	str	r3, [r2, #0]
}
 800bfc4:	bf00      	nop
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	240012c8 	.word	0x240012c8
 800bfd0:	24000df0 	.word	0x24000df0
 800bfd4:	240012b0 	.word	0x240012b0
 800bfd8:	24001280 	.word	0x24001280
 800bfdc:	2400127c 	.word	0x2400127c
 800bfe0:	240012e4 	.word	0x240012e4

0800bfe4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08a      	sub	sp, #40	@ 0x28
 800bfe8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bfee:	f000 fb13 	bl	800c618 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bff2:	4b1d      	ldr	r3, [pc, #116]	@ (800c068 <xTimerCreateTimerTask+0x84>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d021      	beq.n	800c03e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bffe:	2300      	movs	r3, #0
 800c000:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c002:	1d3a      	adds	r2, r7, #4
 800c004:	f107 0108 	add.w	r1, r7, #8
 800c008:	f107 030c 	add.w	r3, r7, #12
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fd feb5 	bl	8009d7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	9202      	str	r2, [sp, #8]
 800c01a:	9301      	str	r3, [sp, #4]
 800c01c:	2302      	movs	r3, #2
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	2300      	movs	r3, #0
 800c022:	460a      	mov	r2, r1
 800c024:	4911      	ldr	r1, [pc, #68]	@ (800c06c <xTimerCreateTimerTask+0x88>)
 800c026:	4812      	ldr	r0, [pc, #72]	@ (800c070 <xTimerCreateTimerTask+0x8c>)
 800c028:	f7fe ffa2 	bl	800af70 <xTaskCreateStatic>
 800c02c:	4603      	mov	r3, r0
 800c02e:	4a11      	ldr	r2, [pc, #68]	@ (800c074 <xTimerCreateTimerTask+0x90>)
 800c030:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c032:	4b10      	ldr	r3, [pc, #64]	@ (800c074 <xTimerCreateTimerTask+0x90>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c03a:	2301      	movs	r3, #1
 800c03c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10b      	bne.n	800c05c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	613b      	str	r3, [r7, #16]
}
 800c056:	bf00      	nop
 800c058:	bf00      	nop
 800c05a:	e7fd      	b.n	800c058 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c05c:	697b      	ldr	r3, [r7, #20]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3718      	adds	r7, #24
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	24001320 	.word	0x24001320
 800c06c:	0802a494 	.word	0x0802a494
 800c070:	0800c1b1 	.word	0x0800c1b1
 800c074:	24001324 	.word	0x24001324

0800c078 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08a      	sub	sp, #40	@ 0x28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c086:	2300      	movs	r3, #0
 800c088:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10b      	bne.n	800c0a8 <xTimerGenericCommand+0x30>
	__asm volatile
 800c090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	623b      	str	r3, [r7, #32]
}
 800c0a2:	bf00      	nop
 800c0a4:	bf00      	nop
 800c0a6:	e7fd      	b.n	800c0a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c0a8:	4b19      	ldr	r3, [pc, #100]	@ (800c110 <xTimerGenericCommand+0x98>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d02a      	beq.n	800c106 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b05      	cmp	r3, #5
 800c0c0:	dc18      	bgt.n	800c0f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c0c2:	f7ff fdad 	bl	800bc20 <xTaskGetSchedulerState>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	d109      	bne.n	800c0e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c0cc:	4b10      	ldr	r3, [pc, #64]	@ (800c110 <xTimerGenericCommand+0x98>)
 800c0ce:	6818      	ldr	r0, [r3, #0]
 800c0d0:	f107 0110 	add.w	r1, r7, #16
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0d8:	f7fe f8d2 	bl	800a280 <xQueueGenericSend>
 800c0dc:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0de:	e012      	b.n	800c106 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c0e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c110 <xTimerGenericCommand+0x98>)
 800c0e2:	6818      	ldr	r0, [r3, #0]
 800c0e4:	f107 0110 	add.w	r1, r7, #16
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f7fe f8c8 	bl	800a280 <xQueueGenericSend>
 800c0f0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0f2:	e008      	b.n	800c106 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0f4:	4b06      	ldr	r3, [pc, #24]	@ (800c110 <xTimerGenericCommand+0x98>)
 800c0f6:	6818      	ldr	r0, [r3, #0]
 800c0f8:	f107 0110 	add.w	r1, r7, #16
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	f7fe f9c0 	bl	800a484 <xQueueGenericSendFromISR>
 800c104:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3728      	adds	r7, #40	@ 0x28
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	24001320 	.word	0x24001320

0800c114 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af02      	add	r7, sp, #8
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c11e:	4b23      	ldr	r3, [pc, #140]	@ (800c1ac <prvProcessExpiredTimer+0x98>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	3304      	adds	r3, #4
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fd fec9 	bl	8009ec4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c138:	f003 0304 	and.w	r3, r3, #4
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d023      	beq.n	800c188 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	699a      	ldr	r2, [r3, #24]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	18d1      	adds	r1, r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	6978      	ldr	r0, [r7, #20]
 800c14e:	f000 f8d5 	bl	800c2fc <prvInsertTimerInActiveList>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d020      	beq.n	800c19a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c158:	2300      	movs	r3, #0
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	2300      	movs	r3, #0
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	2100      	movs	r1, #0
 800c162:	6978      	ldr	r0, [r7, #20]
 800c164:	f7ff ff88 	bl	800c078 <xTimerGenericCommand>
 800c168:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d114      	bne.n	800c19a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	60fb      	str	r3, [r7, #12]
}
 800c182:	bf00      	nop
 800c184:	bf00      	nop
 800c186:	e7fd      	b.n	800c184 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c18e:	f023 0301 	bic.w	r3, r3, #1
 800c192:	b2da      	uxtb	r2, r3
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	6978      	ldr	r0, [r7, #20]
 800c1a0:	4798      	blx	r3
}
 800c1a2:	bf00      	nop
 800c1a4:	3718      	adds	r7, #24
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	24001318 	.word	0x24001318

0800c1b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1b8:	f107 0308 	add.w	r3, r7, #8
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 f859 	bl	800c274 <prvGetNextExpireTime>
 800c1c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f000 f805 	bl	800c1d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c1ce:	f000 f8d7 	bl	800c380 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1d2:	bf00      	nop
 800c1d4:	e7f0      	b.n	800c1b8 <prvTimerTask+0x8>
	...

0800c1d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c1e2:	f7ff f929 	bl	800b438 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1e6:	f107 0308 	add.w	r3, r7, #8
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 f866 	bl	800c2bc <prvSampleTimeNow>
 800c1f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d130      	bne.n	800c25a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10a      	bne.n	800c214 <prvProcessTimerOrBlockTask+0x3c>
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	429a      	cmp	r2, r3
 800c204:	d806      	bhi.n	800c214 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c206:	f7ff f925 	bl	800b454 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c20a:	68f9      	ldr	r1, [r7, #12]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff ff81 	bl	800c114 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c212:	e024      	b.n	800c25e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d008      	beq.n	800c22c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c21a:	4b13      	ldr	r3, [pc, #76]	@ (800c268 <prvProcessTimerOrBlockTask+0x90>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d101      	bne.n	800c228 <prvProcessTimerOrBlockTask+0x50>
 800c224:	2301      	movs	r3, #1
 800c226:	e000      	b.n	800c22a <prvProcessTimerOrBlockTask+0x52>
 800c228:	2300      	movs	r3, #0
 800c22a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c22c:	4b0f      	ldr	r3, [pc, #60]	@ (800c26c <prvProcessTimerOrBlockTask+0x94>)
 800c22e:	6818      	ldr	r0, [r3, #0]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	4619      	mov	r1, r3
 800c23a:	f7fe fe65 	bl	800af08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c23e:	f7ff f909 	bl	800b454 <xTaskResumeAll>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10a      	bne.n	800c25e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c248:	4b09      	ldr	r3, [pc, #36]	@ (800c270 <prvProcessTimerOrBlockTask+0x98>)
 800c24a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c24e:	601a      	str	r2, [r3, #0]
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	f3bf 8f6f 	isb	sy
}
 800c258:	e001      	b.n	800c25e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c25a:	f7ff f8fb 	bl	800b454 <xTaskResumeAll>
}
 800c25e:	bf00      	nop
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	2400131c 	.word	0x2400131c
 800c26c:	24001320 	.word	0x24001320
 800c270:	e000ed04 	.word	0xe000ed04

0800c274 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c27c:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b8 <prvGetNextExpireTime+0x44>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d101      	bne.n	800c28a <prvGetNextExpireTime+0x16>
 800c286:	2201      	movs	r2, #1
 800c288:	e000      	b.n	800c28c <prvGetNextExpireTime+0x18>
 800c28a:	2200      	movs	r2, #0
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d105      	bne.n	800c2a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c298:	4b07      	ldr	r3, [pc, #28]	@ (800c2b8 <prvGetNextExpireTime+0x44>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	60fb      	str	r3, [r7, #12]
 800c2a2:	e001      	b.n	800c2a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3714      	adds	r7, #20
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	24001318 	.word	0x24001318

0800c2bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c2c4:	f7ff f964 	bl	800b590 <xTaskGetTickCount>
 800c2c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f8 <prvSampleTimeNow+0x3c>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d205      	bcs.n	800c2e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c2d4:	f000 f93a 	bl	800c54c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	601a      	str	r2, [r3, #0]
 800c2de:	e002      	b.n	800c2e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c2e6:	4a04      	ldr	r2, [pc, #16]	@ (800c2f8 <prvSampleTimeNow+0x3c>)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	24001328 	.word	0x24001328

0800c2fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
 800c308:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c30a:	2300      	movs	r3, #0
 800c30c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d812      	bhi.n	800c348 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	1ad2      	subs	r2, r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	699b      	ldr	r3, [r3, #24]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d302      	bcc.n	800c336 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c330:	2301      	movs	r3, #1
 800c332:	617b      	str	r3, [r7, #20]
 800c334:	e01b      	b.n	800c36e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c336:	4b10      	ldr	r3, [pc, #64]	@ (800c378 <prvInsertTimerInActiveList+0x7c>)
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3304      	adds	r3, #4
 800c33e:	4619      	mov	r1, r3
 800c340:	4610      	mov	r0, r2
 800c342:	f7fd fd86 	bl	8009e52 <vListInsert>
 800c346:	e012      	b.n	800c36e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d206      	bcs.n	800c35e <prvInsertTimerInActiveList+0x62>
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	429a      	cmp	r2, r3
 800c356:	d302      	bcc.n	800c35e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c358:	2301      	movs	r3, #1
 800c35a:	617b      	str	r3, [r7, #20]
 800c35c:	e007      	b.n	800c36e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c35e:	4b07      	ldr	r3, [pc, #28]	@ (800c37c <prvInsertTimerInActiveList+0x80>)
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3304      	adds	r3, #4
 800c366:	4619      	mov	r1, r3
 800c368:	4610      	mov	r0, r2
 800c36a:	f7fd fd72 	bl	8009e52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c36e:	697b      	ldr	r3, [r7, #20]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3718      	adds	r7, #24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	2400131c 	.word	0x2400131c
 800c37c:	24001318 	.word	0x24001318

0800c380 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b08e      	sub	sp, #56	@ 0x38
 800c384:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c386:	e0ce      	b.n	800c526 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	da19      	bge.n	800c3c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c38e:	1d3b      	adds	r3, r7, #4
 800c390:	3304      	adds	r3, #4
 800c392:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10b      	bne.n	800c3b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39e:	f383 8811 	msr	BASEPRI, r3
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	61fb      	str	r3, [r7, #28]
}
 800c3ac:	bf00      	nop
 800c3ae:	bf00      	nop
 800c3b0:	e7fd      	b.n	800c3ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3b8:	6850      	ldr	r0, [r2, #4]
 800c3ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3bc:	6892      	ldr	r2, [r2, #8]
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f2c0 80ae 	blt.w	800c526 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d004      	beq.n	800c3e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fd fd72 	bl	8009ec4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3e0:	463b      	mov	r3, r7
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7ff ff6a 	bl	800c2bc <prvSampleTimeNow>
 800c3e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b09      	cmp	r3, #9
 800c3ee:	f200 8097 	bhi.w	800c520 <prvProcessReceivedCommands+0x1a0>
 800c3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f8 <prvProcessReceivedCommands+0x78>)
 800c3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f8:	0800c421 	.word	0x0800c421
 800c3fc:	0800c421 	.word	0x0800c421
 800c400:	0800c421 	.word	0x0800c421
 800c404:	0800c497 	.word	0x0800c497
 800c408:	0800c4ab 	.word	0x0800c4ab
 800c40c:	0800c4f7 	.word	0x0800c4f7
 800c410:	0800c421 	.word	0x0800c421
 800c414:	0800c421 	.word	0x0800c421
 800c418:	0800c497 	.word	0x0800c497
 800c41c:	0800c4ab 	.word	0x0800c4ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c422:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c426:	f043 0301 	orr.w	r3, r3, #1
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c436:	699b      	ldr	r3, [r3, #24]
 800c438:	18d1      	adds	r1, r2, r3
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c440:	f7ff ff5c 	bl	800c2fc <prvInsertTimerInActiveList>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d06c      	beq.n	800c524 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c450:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d061      	beq.n	800c524 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	441a      	add	r2, r3
 800c468:	2300      	movs	r3, #0
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	2300      	movs	r3, #0
 800c46e:	2100      	movs	r1, #0
 800c470:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c472:	f7ff fe01 	bl	800c078 <xTimerGenericCommand>
 800c476:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c478:	6a3b      	ldr	r3, [r7, #32]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d152      	bne.n	800c524 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	61bb      	str	r3, [r7, #24]
}
 800c490:	bf00      	nop
 800c492:	bf00      	nop
 800c494:	e7fd      	b.n	800c492 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c49c:	f023 0301 	bic.w	r3, r3, #1
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c4a8:	e03d      	b.n	800c526 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4b0:	f043 0301 	orr.w	r3, r3, #1
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c4:	699b      	ldr	r3, [r3, #24]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10b      	bne.n	800c4e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ce:	f383 8811 	msr	BASEPRI, r3
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	617b      	str	r3, [r7, #20]
}
 800c4dc:	bf00      	nop
 800c4de:	bf00      	nop
 800c4e0:	e7fd      	b.n	800c4de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e4:	699a      	ldr	r2, [r3, #24]
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e8:	18d1      	adds	r1, r2, r3
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4f0:	f7ff ff04 	bl	800c2fc <prvInsertTimerInActiveList>
					break;
 800c4f4:	e017      	b.n	800c526 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4fc:	f003 0302 	and.w	r3, r3, #2
 800c500:	2b00      	cmp	r3, #0
 800c502:	d103      	bne.n	800c50c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c506:	f000 fbe7 	bl	800ccd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c50a:	e00c      	b.n	800c526 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c512:	f023 0301 	bic.w	r3, r3, #1
 800c516:	b2da      	uxtb	r2, r3
 800c518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c51e:	e002      	b.n	800c526 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c520:	bf00      	nop
 800c522:	e000      	b.n	800c526 <prvProcessReceivedCommands+0x1a6>
					break;
 800c524:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c526:	4b08      	ldr	r3, [pc, #32]	@ (800c548 <prvProcessReceivedCommands+0x1c8>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	1d39      	adds	r1, r7, #4
 800c52c:	2200      	movs	r2, #0
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fe f8d6 	bl	800a6e0 <xQueueReceive>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	f47f af26 	bne.w	800c388 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c53c:	bf00      	nop
 800c53e:	bf00      	nop
 800c540:	3730      	adds	r7, #48	@ 0x30
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	24001320 	.word	0x24001320

0800c54c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b088      	sub	sp, #32
 800c550:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c552:	e049      	b.n	800c5e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c554:	4b2e      	ldr	r3, [pc, #184]	@ (800c610 <prvSwitchTimerLists+0xc4>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c55e:	4b2c      	ldr	r3, [pc, #176]	@ (800c610 <prvSwitchTimerLists+0xc4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	3304      	adds	r3, #4
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fd fca9 	bl	8009ec4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c580:	f003 0304 	and.w	r3, r3, #4
 800c584:	2b00      	cmp	r3, #0
 800c586:	d02f      	beq.n	800c5e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	693a      	ldr	r2, [r7, #16]
 800c58e:	4413      	add	r3, r2
 800c590:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	429a      	cmp	r2, r3
 800c598:	d90e      	bls.n	800c5b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	68ba      	ldr	r2, [r7, #8]
 800c59e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5a6:	4b1a      	ldr	r3, [pc, #104]	@ (800c610 <prvSwitchTimerLists+0xc4>)
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	f7fd fc4e 	bl	8009e52 <vListInsert>
 800c5b6:	e017      	b.n	800c5e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	2300      	movs	r3, #0
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f7ff fd58 	bl	800c078 <xTimerGenericCommand>
 800c5c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10b      	bne.n	800c5e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d4:	f383 8811 	msr	BASEPRI, r3
 800c5d8:	f3bf 8f6f 	isb	sy
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	603b      	str	r3, [r7, #0]
}
 800c5e2:	bf00      	nop
 800c5e4:	bf00      	nop
 800c5e6:	e7fd      	b.n	800c5e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5e8:	4b09      	ldr	r3, [pc, #36]	@ (800c610 <prvSwitchTimerLists+0xc4>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1b0      	bne.n	800c554 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c5f2:	4b07      	ldr	r3, [pc, #28]	@ (800c610 <prvSwitchTimerLists+0xc4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c5f8:	4b06      	ldr	r3, [pc, #24]	@ (800c614 <prvSwitchTimerLists+0xc8>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a04      	ldr	r2, [pc, #16]	@ (800c610 <prvSwitchTimerLists+0xc4>)
 800c5fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c600:	4a04      	ldr	r2, [pc, #16]	@ (800c614 <prvSwitchTimerLists+0xc8>)
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	6013      	str	r3, [r2, #0]
}
 800c606:	bf00      	nop
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	24001318 	.word	0x24001318
 800c614:	2400131c 	.word	0x2400131c

0800c618 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c61e:	f000 f96b 	bl	800c8f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c622:	4b15      	ldr	r3, [pc, #84]	@ (800c678 <prvCheckForValidListAndQueue+0x60>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d120      	bne.n	800c66c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c62a:	4814      	ldr	r0, [pc, #80]	@ (800c67c <prvCheckForValidListAndQueue+0x64>)
 800c62c:	f7fd fbc0 	bl	8009db0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c630:	4813      	ldr	r0, [pc, #76]	@ (800c680 <prvCheckForValidListAndQueue+0x68>)
 800c632:	f7fd fbbd 	bl	8009db0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c636:	4b13      	ldr	r3, [pc, #76]	@ (800c684 <prvCheckForValidListAndQueue+0x6c>)
 800c638:	4a10      	ldr	r2, [pc, #64]	@ (800c67c <prvCheckForValidListAndQueue+0x64>)
 800c63a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c63c:	4b12      	ldr	r3, [pc, #72]	@ (800c688 <prvCheckForValidListAndQueue+0x70>)
 800c63e:	4a10      	ldr	r2, [pc, #64]	@ (800c680 <prvCheckForValidListAndQueue+0x68>)
 800c640:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c642:	2300      	movs	r3, #0
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	4b11      	ldr	r3, [pc, #68]	@ (800c68c <prvCheckForValidListAndQueue+0x74>)
 800c648:	4a11      	ldr	r2, [pc, #68]	@ (800c690 <prvCheckForValidListAndQueue+0x78>)
 800c64a:	2110      	movs	r1, #16
 800c64c:	200a      	movs	r0, #10
 800c64e:	f7fd fccd 	bl	8009fec <xQueueGenericCreateStatic>
 800c652:	4603      	mov	r3, r0
 800c654:	4a08      	ldr	r2, [pc, #32]	@ (800c678 <prvCheckForValidListAndQueue+0x60>)
 800c656:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c658:	4b07      	ldr	r3, [pc, #28]	@ (800c678 <prvCheckForValidListAndQueue+0x60>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d005      	beq.n	800c66c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c660:	4b05      	ldr	r3, [pc, #20]	@ (800c678 <prvCheckForValidListAndQueue+0x60>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	490b      	ldr	r1, [pc, #44]	@ (800c694 <prvCheckForValidListAndQueue+0x7c>)
 800c666:	4618      	mov	r0, r3
 800c668:	f7fe fbfa 	bl	800ae60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c66c:	f000 f976 	bl	800c95c <vPortExitCritical>
}
 800c670:	bf00      	nop
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	24001320 	.word	0x24001320
 800c67c:	240012f0 	.word	0x240012f0
 800c680:	24001304 	.word	0x24001304
 800c684:	24001318 	.word	0x24001318
 800c688:	2400131c 	.word	0x2400131c
 800c68c:	240013cc 	.word	0x240013cc
 800c690:	2400132c 	.word	0x2400132c
 800c694:	0802a49c 	.word	0x0802a49c

0800c698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	3b04      	subs	r3, #4
 800c6a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c6b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	3b04      	subs	r3, #4
 800c6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	f023 0201 	bic.w	r2, r3, #1
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	3b04      	subs	r3, #4
 800c6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c6c8:	4a0c      	ldr	r2, [pc, #48]	@ (800c6fc <pxPortInitialiseStack+0x64>)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	3b14      	subs	r3, #20
 800c6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	3b04      	subs	r3, #4
 800c6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f06f 0202 	mvn.w	r2, #2
 800c6e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	3b20      	subs	r3, #32
 800c6ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	0800c701 	.word	0x0800c701

0800c700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c706:	2300      	movs	r3, #0
 800c708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c70a:	4b13      	ldr	r3, [pc, #76]	@ (800c758 <prvTaskExitError+0x58>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c712:	d00b      	beq.n	800c72c <prvTaskExitError+0x2c>
	__asm volatile
 800c714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c718:	f383 8811 	msr	BASEPRI, r3
 800c71c:	f3bf 8f6f 	isb	sy
 800c720:	f3bf 8f4f 	dsb	sy
 800c724:	60fb      	str	r3, [r7, #12]
}
 800c726:	bf00      	nop
 800c728:	bf00      	nop
 800c72a:	e7fd      	b.n	800c728 <prvTaskExitError+0x28>
	__asm volatile
 800c72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c730:	f383 8811 	msr	BASEPRI, r3
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	60bb      	str	r3, [r7, #8]
}
 800c73e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c740:	bf00      	nop
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d0fc      	beq.n	800c742 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c748:	bf00      	nop
 800c74a:	bf00      	nop
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	24000014 	.word	0x24000014
 800c75c:	00000000 	.word	0x00000000

0800c760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c760:	4b07      	ldr	r3, [pc, #28]	@ (800c780 <pxCurrentTCBConst2>)
 800c762:	6819      	ldr	r1, [r3, #0]
 800c764:	6808      	ldr	r0, [r1, #0]
 800c766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76a:	f380 8809 	msr	PSP, r0
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f04f 0000 	mov.w	r0, #0
 800c776:	f380 8811 	msr	BASEPRI, r0
 800c77a:	4770      	bx	lr
 800c77c:	f3af 8000 	nop.w

0800c780 <pxCurrentTCBConst2>:
 800c780:	24000df0 	.word	0x24000df0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c784:	bf00      	nop
 800c786:	bf00      	nop

0800c788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c788:	4808      	ldr	r0, [pc, #32]	@ (800c7ac <prvPortStartFirstTask+0x24>)
 800c78a:	6800      	ldr	r0, [r0, #0]
 800c78c:	6800      	ldr	r0, [r0, #0]
 800c78e:	f380 8808 	msr	MSP, r0
 800c792:	f04f 0000 	mov.w	r0, #0
 800c796:	f380 8814 	msr	CONTROL, r0
 800c79a:	b662      	cpsie	i
 800c79c:	b661      	cpsie	f
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	df00      	svc	0
 800c7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7aa:	bf00      	nop
 800c7ac:	e000ed08 	.word	0xe000ed08

0800c7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c7b6:	4b47      	ldr	r3, [pc, #284]	@ (800c8d4 <xPortStartScheduler+0x124>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a47      	ldr	r2, [pc, #284]	@ (800c8d8 <xPortStartScheduler+0x128>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d10b      	bne.n	800c7d8 <xPortStartScheduler+0x28>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	60fb      	str	r3, [r7, #12]
}
 800c7d2:	bf00      	nop
 800c7d4:	bf00      	nop
 800c7d6:	e7fd      	b.n	800c7d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c7d8:	4b3e      	ldr	r3, [pc, #248]	@ (800c8d4 <xPortStartScheduler+0x124>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a3f      	ldr	r2, [pc, #252]	@ (800c8dc <xPortStartScheduler+0x12c>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d10b      	bne.n	800c7fa <xPortStartScheduler+0x4a>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	613b      	str	r3, [r7, #16]
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop
 800c7f8:	e7fd      	b.n	800c7f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c7fa:	4b39      	ldr	r3, [pc, #228]	@ (800c8e0 <xPortStartScheduler+0x130>)
 800c7fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	b2db      	uxtb	r3, r3
 800c804:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	22ff      	movs	r2, #255	@ 0xff
 800c80a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	b2db      	uxtb	r3, r3
 800c812:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	b2db      	uxtb	r3, r3
 800c818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	4b31      	ldr	r3, [pc, #196]	@ (800c8e4 <xPortStartScheduler+0x134>)
 800c820:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c822:	4b31      	ldr	r3, [pc, #196]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c824:	2207      	movs	r2, #7
 800c826:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c828:	e009      	b.n	800c83e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c82a:	4b2f      	ldr	r3, [pc, #188]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	3b01      	subs	r3, #1
 800c830:	4a2d      	ldr	r2, [pc, #180]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c832:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c834:	78fb      	ldrb	r3, [r7, #3]
 800c836:	b2db      	uxtb	r3, r3
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c83e:	78fb      	ldrb	r3, [r7, #3]
 800c840:	b2db      	uxtb	r3, r3
 800c842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c846:	2b80      	cmp	r3, #128	@ 0x80
 800c848:	d0ef      	beq.n	800c82a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c84a:	4b27      	ldr	r3, [pc, #156]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f1c3 0307 	rsb	r3, r3, #7
 800c852:	2b04      	cmp	r3, #4
 800c854:	d00b      	beq.n	800c86e <xPortStartScheduler+0xbe>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	60bb      	str	r3, [r7, #8]
}
 800c868:	bf00      	nop
 800c86a:	bf00      	nop
 800c86c:	e7fd      	b.n	800c86a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c86e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	021b      	lsls	r3, r3, #8
 800c874:	4a1c      	ldr	r2, [pc, #112]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c878:	4b1b      	ldr	r3, [pc, #108]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c880:	4a19      	ldr	r2, [pc, #100]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	b2da      	uxtb	r2, r3
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c88c:	4b17      	ldr	r3, [pc, #92]	@ (800c8ec <xPortStartScheduler+0x13c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a16      	ldr	r2, [pc, #88]	@ (800c8ec <xPortStartScheduler+0x13c>)
 800c892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c898:	4b14      	ldr	r3, [pc, #80]	@ (800c8ec <xPortStartScheduler+0x13c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a13      	ldr	r2, [pc, #76]	@ (800c8ec <xPortStartScheduler+0x13c>)
 800c89e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c8a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8a4:	f000 f8da 	bl	800ca5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8a8:	4b11      	ldr	r3, [pc, #68]	@ (800c8f0 <xPortStartScheduler+0x140>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8ae:	f000 f8f9 	bl	800caa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c8b2:	4b10      	ldr	r3, [pc, #64]	@ (800c8f4 <xPortStartScheduler+0x144>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a0f      	ldr	r2, [pc, #60]	@ (800c8f4 <xPortStartScheduler+0x144>)
 800c8b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c8bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8be:	f7ff ff63 	bl	800c788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8c2:	f7fe ff2f 	bl	800b724 <vTaskSwitchContext>
	prvTaskExitError();
 800c8c6:	f7ff ff1b 	bl	800c700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	e000ed00 	.word	0xe000ed00
 800c8d8:	410fc271 	.word	0x410fc271
 800c8dc:	410fc270 	.word	0x410fc270
 800c8e0:	e000e400 	.word	0xe000e400
 800c8e4:	2400141c 	.word	0x2400141c
 800c8e8:	24001420 	.word	0x24001420
 800c8ec:	e000ed20 	.word	0xe000ed20
 800c8f0:	24000014 	.word	0x24000014
 800c8f4:	e000ef34 	.word	0xe000ef34

0800c8f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	607b      	str	r3, [r7, #4]
}
 800c910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c912:	4b10      	ldr	r3, [pc, #64]	@ (800c954 <vPortEnterCritical+0x5c>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3301      	adds	r3, #1
 800c918:	4a0e      	ldr	r2, [pc, #56]	@ (800c954 <vPortEnterCritical+0x5c>)
 800c91a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c91c:	4b0d      	ldr	r3, [pc, #52]	@ (800c954 <vPortEnterCritical+0x5c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d110      	bne.n	800c946 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c924:	4b0c      	ldr	r3, [pc, #48]	@ (800c958 <vPortEnterCritical+0x60>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00b      	beq.n	800c946 <vPortEnterCritical+0x4e>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	603b      	str	r3, [r7, #0]
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	e7fd      	b.n	800c942 <vPortEnterCritical+0x4a>
	}
}
 800c946:	bf00      	nop
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	24000014 	.word	0x24000014
 800c958:	e000ed04 	.word	0xe000ed04

0800c95c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c962:	4b12      	ldr	r3, [pc, #72]	@ (800c9ac <vPortExitCritical+0x50>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10b      	bne.n	800c982 <vPortExitCritical+0x26>
	__asm volatile
 800c96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96e:	f383 8811 	msr	BASEPRI, r3
 800c972:	f3bf 8f6f 	isb	sy
 800c976:	f3bf 8f4f 	dsb	sy
 800c97a:	607b      	str	r3, [r7, #4]
}
 800c97c:	bf00      	nop
 800c97e:	bf00      	nop
 800c980:	e7fd      	b.n	800c97e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c982:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ac <vPortExitCritical+0x50>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3b01      	subs	r3, #1
 800c988:	4a08      	ldr	r2, [pc, #32]	@ (800c9ac <vPortExitCritical+0x50>)
 800c98a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c98c:	4b07      	ldr	r3, [pc, #28]	@ (800c9ac <vPortExitCritical+0x50>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d105      	bne.n	800c9a0 <vPortExitCritical+0x44>
 800c994:	2300      	movs	r3, #0
 800c996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	f383 8811 	msr	BASEPRI, r3
}
 800c99e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr
 800c9ac:	24000014 	.word	0x24000014

0800c9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9b0:	f3ef 8009 	mrs	r0, PSP
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	4b15      	ldr	r3, [pc, #84]	@ (800ca10 <pxCurrentTCBConst>)
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	f01e 0f10 	tst.w	lr, #16
 800c9c0:	bf08      	it	eq
 800c9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ca:	6010      	str	r0, [r2, #0]
 800c9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c9d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c9d4:	f380 8811 	msr	BASEPRI, r0
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f7fe fea0 	bl	800b724 <vTaskSwitchContext>
 800c9e4:	f04f 0000 	mov.w	r0, #0
 800c9e8:	f380 8811 	msr	BASEPRI, r0
 800c9ec:	bc09      	pop	{r0, r3}
 800c9ee:	6819      	ldr	r1, [r3, #0]
 800c9f0:	6808      	ldr	r0, [r1, #0]
 800c9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f6:	f01e 0f10 	tst.w	lr, #16
 800c9fa:	bf08      	it	eq
 800c9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca00:	f380 8809 	msr	PSP, r0
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	f3af 8000 	nop.w

0800ca10 <pxCurrentTCBConst>:
 800ca10:	24000df0 	.word	0x24000df0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop

0800ca18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	607b      	str	r3, [r7, #4]
}
 800ca30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca32:	f7fe fdbd 	bl	800b5b0 <xTaskIncrementTick>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d003      	beq.n	800ca44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca3c:	4b06      	ldr	r3, [pc, #24]	@ (800ca58 <xPortSysTickHandler+0x40>)
 800ca3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca42:	601a      	str	r2, [r3, #0]
 800ca44:	2300      	movs	r3, #0
 800ca46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	f383 8811 	msr	BASEPRI, r3
}
 800ca4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	e000ed04 	.word	0xe000ed04

0800ca5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca60:	4b0b      	ldr	r3, [pc, #44]	@ (800ca90 <vPortSetupTimerInterrupt+0x34>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca66:	4b0b      	ldr	r3, [pc, #44]	@ (800ca94 <vPortSetupTimerInterrupt+0x38>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca98 <vPortSetupTimerInterrupt+0x3c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a0a      	ldr	r2, [pc, #40]	@ (800ca9c <vPortSetupTimerInterrupt+0x40>)
 800ca72:	fba2 2303 	umull	r2, r3, r2, r3
 800ca76:	099b      	lsrs	r3, r3, #6
 800ca78:	4a09      	ldr	r2, [pc, #36]	@ (800caa0 <vPortSetupTimerInterrupt+0x44>)
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca7e:	4b04      	ldr	r3, [pc, #16]	@ (800ca90 <vPortSetupTimerInterrupt+0x34>)
 800ca80:	2207      	movs	r2, #7
 800ca82:	601a      	str	r2, [r3, #0]
}
 800ca84:	bf00      	nop
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	e000e010 	.word	0xe000e010
 800ca94:	e000e018 	.word	0xe000e018
 800ca98:	24000004 	.word	0x24000004
 800ca9c:	10624dd3 	.word	0x10624dd3
 800caa0:	e000e014 	.word	0xe000e014

0800caa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800caa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cab4 <vPortEnableVFP+0x10>
 800caa8:	6801      	ldr	r1, [r0, #0]
 800caaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800caae:	6001      	str	r1, [r0, #0]
 800cab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cab2:	bf00      	nop
 800cab4:	e000ed88 	.word	0xe000ed88

0800cab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cabe:	f3ef 8305 	mrs	r3, IPSR
 800cac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2b0f      	cmp	r3, #15
 800cac8:	d915      	bls.n	800caf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800caca:	4a18      	ldr	r2, [pc, #96]	@ (800cb2c <vPortValidateInterruptPriority+0x74>)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	4413      	add	r3, r2
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cad4:	4b16      	ldr	r3, [pc, #88]	@ (800cb30 <vPortValidateInterruptPriority+0x78>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	7afa      	ldrb	r2, [r7, #11]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d20b      	bcs.n	800caf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	607b      	str	r3, [r7, #4]
}
 800caf0:	bf00      	nop
 800caf2:	bf00      	nop
 800caf4:	e7fd      	b.n	800caf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800caf6:	4b0f      	ldr	r3, [pc, #60]	@ (800cb34 <vPortValidateInterruptPriority+0x7c>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cafe:	4b0e      	ldr	r3, [pc, #56]	@ (800cb38 <vPortValidateInterruptPriority+0x80>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d90b      	bls.n	800cb1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0a:	f383 8811 	msr	BASEPRI, r3
 800cb0e:	f3bf 8f6f 	isb	sy
 800cb12:	f3bf 8f4f 	dsb	sy
 800cb16:	603b      	str	r3, [r7, #0]
}
 800cb18:	bf00      	nop
 800cb1a:	bf00      	nop
 800cb1c:	e7fd      	b.n	800cb1a <vPortValidateInterruptPriority+0x62>
	}
 800cb1e:	bf00      	nop
 800cb20:	3714      	adds	r7, #20
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	e000e3f0 	.word	0xe000e3f0
 800cb30:	2400141c 	.word	0x2400141c
 800cb34:	e000ed0c 	.word	0xe000ed0c
 800cb38:	24001420 	.word	0x24001420

0800cb3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08a      	sub	sp, #40	@ 0x28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb48:	f7fe fc76 	bl	800b438 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb4c:	4b5c      	ldr	r3, [pc, #368]	@ (800ccc0 <pvPortMalloc+0x184>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d101      	bne.n	800cb58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb54:	f000 f924 	bl	800cda0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb58:	4b5a      	ldr	r3, [pc, #360]	@ (800ccc4 <pvPortMalloc+0x188>)
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4013      	ands	r3, r2
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f040 8095 	bne.w	800cc90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d01e      	beq.n	800cbaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cb6c:	2208      	movs	r2, #8
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4413      	add	r3, r2
 800cb72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f003 0307 	and.w	r3, r3, #7
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d015      	beq.n	800cbaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f023 0307 	bic.w	r3, r3, #7
 800cb84:	3308      	adds	r3, #8
 800cb86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f003 0307 	and.w	r3, r3, #7
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00b      	beq.n	800cbaa <pvPortMalloc+0x6e>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	617b      	str	r3, [r7, #20]
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop
 800cba8:	e7fd      	b.n	800cba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d06f      	beq.n	800cc90 <pvPortMalloc+0x154>
 800cbb0:	4b45      	ldr	r3, [pc, #276]	@ (800ccc8 <pvPortMalloc+0x18c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d86a      	bhi.n	800cc90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbba:	4b44      	ldr	r3, [pc, #272]	@ (800cccc <pvPortMalloc+0x190>)
 800cbbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbbe:	4b43      	ldr	r3, [pc, #268]	@ (800cccc <pvPortMalloc+0x190>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbc4:	e004      	b.n	800cbd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d903      	bls.n	800cbe2 <pvPortMalloc+0xa6>
 800cbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1f1      	bne.n	800cbc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cbe2:	4b37      	ldr	r3, [pc, #220]	@ (800ccc0 <pvPortMalloc+0x184>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d051      	beq.n	800cc90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbec:	6a3b      	ldr	r3, [r7, #32]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2208      	movs	r2, #8
 800cbf2:	4413      	add	r3, r2
 800cbf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	6a3b      	ldr	r3, [r7, #32]
 800cbfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc00:	685a      	ldr	r2, [r3, #4]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	1ad2      	subs	r2, r2, r3
 800cc06:	2308      	movs	r3, #8
 800cc08:	005b      	lsls	r3, r3, #1
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d920      	bls.n	800cc50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4413      	add	r3, r2
 800cc14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	f003 0307 	and.w	r3, r3, #7
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00b      	beq.n	800cc38 <pvPortMalloc+0xfc>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	613b      	str	r3, [r7, #16]
}
 800cc32:	bf00      	nop
 800cc34:	bf00      	nop
 800cc36:	e7fd      	b.n	800cc34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	1ad2      	subs	r2, r2, r3
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc4a:	69b8      	ldr	r0, [r7, #24]
 800cc4c:	f000 f90a 	bl	800ce64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc50:	4b1d      	ldr	r3, [pc, #116]	@ (800ccc8 <pvPortMalloc+0x18c>)
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	4a1b      	ldr	r2, [pc, #108]	@ (800ccc8 <pvPortMalloc+0x18c>)
 800cc5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc5e:	4b1a      	ldr	r3, [pc, #104]	@ (800ccc8 <pvPortMalloc+0x18c>)
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	4b1b      	ldr	r3, [pc, #108]	@ (800ccd0 <pvPortMalloc+0x194>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d203      	bcs.n	800cc72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc6a:	4b17      	ldr	r3, [pc, #92]	@ (800ccc8 <pvPortMalloc+0x18c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a18      	ldr	r2, [pc, #96]	@ (800ccd0 <pvPortMalloc+0x194>)
 800cc70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	4b13      	ldr	r3, [pc, #76]	@ (800ccc4 <pvPortMalloc+0x188>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	431a      	orrs	r2, r3
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc82:	2200      	movs	r2, #0
 800cc84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc86:	4b13      	ldr	r3, [pc, #76]	@ (800ccd4 <pvPortMalloc+0x198>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	4a11      	ldr	r2, [pc, #68]	@ (800ccd4 <pvPortMalloc+0x198>)
 800cc8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc90:	f7fe fbe0 	bl	800b454 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	f003 0307 	and.w	r3, r3, #7
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00b      	beq.n	800ccb6 <pvPortMalloc+0x17a>
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	60fb      	str	r3, [r7, #12]
}
 800ccb0:	bf00      	nop
 800ccb2:	bf00      	nop
 800ccb4:	e7fd      	b.n	800ccb2 <pvPortMalloc+0x176>
	return pvReturn;
 800ccb6:	69fb      	ldr	r3, [r7, #28]
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3728      	adds	r7, #40	@ 0x28
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	2400502c 	.word	0x2400502c
 800ccc4:	24005040 	.word	0x24005040
 800ccc8:	24005030 	.word	0x24005030
 800cccc:	24005024 	.word	0x24005024
 800ccd0:	24005034 	.word	0x24005034
 800ccd4:	24005038 	.word	0x24005038

0800ccd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d04f      	beq.n	800cd8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccea:	2308      	movs	r3, #8
 800ccec:	425b      	negs	r3, r3
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	685a      	ldr	r2, [r3, #4]
 800ccfc:	4b25      	ldr	r3, [pc, #148]	@ (800cd94 <vPortFree+0xbc>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4013      	ands	r3, r2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10b      	bne.n	800cd1e <vPortFree+0x46>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	60fb      	str	r3, [r7, #12]
}
 800cd18:	bf00      	nop
 800cd1a:	bf00      	nop
 800cd1c:	e7fd      	b.n	800cd1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00b      	beq.n	800cd3e <vPortFree+0x66>
	__asm volatile
 800cd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	60bb      	str	r3, [r7, #8]
}
 800cd38:	bf00      	nop
 800cd3a:	bf00      	nop
 800cd3c:	e7fd      	b.n	800cd3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	4b14      	ldr	r3, [pc, #80]	@ (800cd94 <vPortFree+0xbc>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4013      	ands	r3, r2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d01e      	beq.n	800cd8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d11a      	bne.n	800cd8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	4b0e      	ldr	r3, [pc, #56]	@ (800cd94 <vPortFree+0xbc>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	43db      	mvns	r3, r3
 800cd5e:	401a      	ands	r2, r3
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd64:	f7fe fb68 	bl	800b438 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	4b0a      	ldr	r3, [pc, #40]	@ (800cd98 <vPortFree+0xc0>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4413      	add	r3, r2
 800cd72:	4a09      	ldr	r2, [pc, #36]	@ (800cd98 <vPortFree+0xc0>)
 800cd74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd76:	6938      	ldr	r0, [r7, #16]
 800cd78:	f000 f874 	bl	800ce64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd7c:	4b07      	ldr	r3, [pc, #28]	@ (800cd9c <vPortFree+0xc4>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3301      	adds	r3, #1
 800cd82:	4a06      	ldr	r2, [pc, #24]	@ (800cd9c <vPortFree+0xc4>)
 800cd84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd86:	f7fe fb65 	bl	800b454 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd8a:	bf00      	nop
 800cd8c:	3718      	adds	r7, #24
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	24005040 	.word	0x24005040
 800cd98:	24005030 	.word	0x24005030
 800cd9c:	2400503c 	.word	0x2400503c

0800cda0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cda6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cdaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cdac:	4b27      	ldr	r3, [pc, #156]	@ (800ce4c <prvHeapInit+0xac>)
 800cdae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f003 0307 	and.w	r3, r3, #7
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00c      	beq.n	800cdd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	3307      	adds	r3, #7
 800cdbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f023 0307 	bic.w	r3, r3, #7
 800cdc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	4a1f      	ldr	r2, [pc, #124]	@ (800ce4c <prvHeapInit+0xac>)
 800cdd0:	4413      	add	r3, r2
 800cdd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cdd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ce50 <prvHeapInit+0xb0>)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cdde:	4b1c      	ldr	r3, [pc, #112]	@ (800ce50 <prvHeapInit+0xb0>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	4413      	add	r3, r2
 800cdea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdec:	2208      	movs	r2, #8
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	1a9b      	subs	r3, r3, r2
 800cdf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f023 0307 	bic.w	r3, r3, #7
 800cdfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	4a15      	ldr	r2, [pc, #84]	@ (800ce54 <prvHeapInit+0xb4>)
 800ce00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce02:	4b14      	ldr	r3, [pc, #80]	@ (800ce54 <prvHeapInit+0xb4>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2200      	movs	r2, #0
 800ce08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce0a:	4b12      	ldr	r3, [pc, #72]	@ (800ce54 <prvHeapInit+0xb4>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	1ad2      	subs	r2, r2, r3
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce20:	4b0c      	ldr	r3, [pc, #48]	@ (800ce54 <prvHeapInit+0xb4>)
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ce58 <prvHeapInit+0xb8>)
 800ce2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	4a09      	ldr	r2, [pc, #36]	@ (800ce5c <prvHeapInit+0xbc>)
 800ce36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce38:	4b09      	ldr	r3, [pc, #36]	@ (800ce60 <prvHeapInit+0xc0>)
 800ce3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ce3e:	601a      	str	r2, [r3, #0]
}
 800ce40:	bf00      	nop
 800ce42:	3714      	adds	r7, #20
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	24001424 	.word	0x24001424
 800ce50:	24005024 	.word	0x24005024
 800ce54:	2400502c 	.word	0x2400502c
 800ce58:	24005034 	.word	0x24005034
 800ce5c:	24005030 	.word	0x24005030
 800ce60:	24005040 	.word	0x24005040

0800ce64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce6c:	4b28      	ldr	r3, [pc, #160]	@ (800cf10 <prvInsertBlockIntoFreeList+0xac>)
 800ce6e:	60fb      	str	r3, [r7, #12]
 800ce70:	e002      	b.n	800ce78 <prvInsertBlockIntoFreeList+0x14>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d8f7      	bhi.n	800ce72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d108      	bne.n	800cea6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	685a      	ldr	r2, [r3, #4]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	441a      	add	r2, r3
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	68ba      	ldr	r2, [r7, #8]
 800ceb0:	441a      	add	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d118      	bne.n	800ceec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	4b15      	ldr	r3, [pc, #84]	@ (800cf14 <prvInsertBlockIntoFreeList+0xb0>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d00d      	beq.n	800cee2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	441a      	add	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	e008      	b.n	800cef4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cee2:	4b0c      	ldr	r3, [pc, #48]	@ (800cf14 <prvInsertBlockIntoFreeList+0xb0>)
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	601a      	str	r2, [r3, #0]
 800ceea:	e003      	b.n	800cef4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cef4:	68fa      	ldr	r2, [r7, #12]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d002      	beq.n	800cf02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf02:	bf00      	nop
 800cf04:	3714      	adds	r7, #20
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	24005024 	.word	0x24005024
 800cf14:	2400502c 	.word	0x2400502c

0800cf18 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	af00      	add	r7, sp, #0
}
 800cf1c:	bf00      	nop
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800cf2a:	f004 fb2b 	bl	8011584 <touchgfx_components_init>
    touchgfx_init();
 800cf2e:	f004 faff 	bl	8011530 <touchgfx_init>
}
 800cf32:	bf00      	nop
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b082      	sub	sp, #8
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800cf3e:	f004 fb29 	bl	8011594 <touchgfx_taskEntry>
}
 800cf42:	bf00      	nop
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
	...

0800cf4c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
    {
 800cf54:	4a04      	ldr	r2, [pc, #16]	@ (800cf68 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	601a      	str	r2, [r3, #0]
    }
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr
 800cf68:	0802aff8 	.word	0x0802aff8

0800cf6c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
    }
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7ff ffe9 	bl	800cf4c <_ZN8touchgfx12FontProviderD1Ev>
 800cf7a:	2104      	movs	r1, #4
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f01b ffd6 	bl	8028f2e <_ZdlPvj>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800cf98:	887b      	ldrh	r3, [r7, #2]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d104      	bne.n	800cfa8 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
    {
    case Typography::DIGITALCLOCK:
        // Asap_Regular_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800cf9e:	f002 fbc3 	bl	800f728 <_ZN17TypedTextDatabase8getFontsEv>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	e000      	b.n	800cfaa <_ZN23ApplicationFontProvider7getFontEt+0x1e>
    default:
        return 0;
 800cfa8:	2300      	movs	r3, #0
    }
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
	...

0800cfb4 <_ZN23ApplicationFontProviderD1Ev>:
{
    static const touchgfx::FontId DIGITALCLOCK = 0; // Asap_Regular_24_4bpp
    static const uint16_t NUMBER_OF_FONTS = 1;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	4a05      	ldr	r2, [pc, #20]	@ (800cfd4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	601a      	str	r2, [r3, #0]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7ff ffc1 	bl	800cf4c <_ZN8touchgfx12FontProviderD1Ev>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	0802afe4 	.word	0x0802afe4

0800cfd8 <_ZN23ApplicationFontProviderD0Ev>:
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff ffe7 	bl	800cfb4 <_ZN23ApplicationFontProviderD1Ev>
 800cfe6:	2104      	movs	r1, #4
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f01b ffa0 	bl	8028f2e <_ZdlPvj>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4618      	mov	r0, r3
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
    {
 800d000:	4a04      	ldr	r2, [pc, #16]	@ (800d014 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	601a      	str	r2, [r3, #0]
    }
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4618      	mov	r0, r3
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr
 800d014:	0802b430 	.word	0x0802b430

0800d018 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
    }
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff ffe9 	bl	800cff8 <_ZN8touchgfx4FontD1Ev>
 800d026:	2114      	movs	r1, #20
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f01b ff80 	bl	8028f2e <_ZdlPvj>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4618      	mov	r0, r3
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d038:	b590      	push	{r4, r7, lr}
 800d03a:	b087      	sub	sp, #28
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	460b      	mov	r3, r1
 800d042:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d044:	887b      	ldrh	r3, [r7, #2]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d101      	bne.n	800d04e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d04a:	2300      	movs	r3, #0
 800d04c:	e010      	b.n	800d070 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d04e:	2300      	movs	r3, #0
 800d050:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d052:	2300      	movs	r3, #0
 800d054:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3308      	adds	r3, #8
 800d05c:	681c      	ldr	r4, [r3, #0]
 800d05e:	f107 030f 	add.w	r3, r7, #15
 800d062:	f107 0210 	add.w	r2, r7, #16
 800d066:	8879      	ldrh	r1, [r7, #2]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	47a0      	blx	r4
 800d06c:	6178      	str	r0, [r7, #20]
        return glyph;
 800d06e:	697b      	ldr	r3, [r7, #20]
    }
 800d070:	4618      	mov	r0, r3
 800d072:	371c      	adds	r7, #28
 800d074:	46bd      	mov	sp, r7
 800d076:	bd90      	pop	{r4, r7, pc}

0800d078 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	89db      	ldrh	r3, [r3, #14]
    }
 800d084:	4618      	mov	r0, r3
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800d09c:	4618      	mov	r0, r3
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	88db      	ldrh	r3, [r3, #6]
    }
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	889b      	ldrh	r3, [r3, #4]
    }
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	7a9b      	ldrb	r3, [r3, #10]
 800d0e4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d0e8:	b2db      	uxtb	r3, r3
    }
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800d0f6:	b480      	push	{r7}
 800d0f8:	b083      	sub	sp, #12
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	7a9b      	ldrb	r3, [r3, #10]
 800d102:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d106:	b2db      	uxtb	r3, r3
    }
 800d108:	4618      	mov	r0, r3
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
    {
        return false;
 800d11c:	2300      	movs	r3, #0
    }
 800d11e:	4618      	mov	r0, r3
 800d120:	370c      	adds	r7, #12
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr

0800d12a <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800d12a:	b480      	push	{r7}
 800d12c:	b083      	sub	sp, #12
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d132:	f04f 0300 	mov.w	r3, #0
 800d136:	ee07 3a90 	vmov	s15, r3
    }
 800d13a:	eeb0 0a67 	vmov.f32	s0, s15
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	4a05      	ldr	r2, [pc, #20]	@ (800d168 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff ff4d 	bl	800cff8 <_ZN8touchgfx4FontD1Ev>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4618      	mov	r0, r3
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	0802c504 	.word	0x0802c504

0800d16c <_ZN8touchgfx9ConstFontD0Ev>:
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7ff ffe7 	bl	800d148 <_ZN8touchgfx9ConstFontD1Ev>
 800d17a:	211c      	movs	r1, #28
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f01b fed6 	bl	8028f2e <_ZdlPvj>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4618      	mov	r0, r3
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	4a05      	ldr	r2, [pc, #20]	@ (800d1ac <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff ffd3 	bl	800d148 <_ZN8touchgfx9ConstFontD1Ev>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	0802b01c 	.word	0x0802b01c

0800d1b0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff ffe7 	bl	800d18c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d1be:	212c      	movs	r1, #44	@ 0x2c
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f01b feb4 	bl	8028f2e <_ZdlPvj>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800d1d0:	b480      	push	{r7}
 800d1d2:	af00      	add	r7, sp, #0
    {
        return instance;
 800d1d4:	4b03      	ldr	r3, [pc, #12]	@ (800d1e4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
    }
 800d1d8:	4618      	mov	r0, r3
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
 800d1e4:	24006600 	.word	0x24006600

0800d1e8 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
    {
 800d1f0:	4a04      	ldr	r2, [pc, #16]	@ (800d204 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	601a      	str	r2, [r3, #0]
    }
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	0802b00c 	.word	0x0802b00c

0800d208 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
    }
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7ff ffe9 	bl	800d1e8 <_ZN8touchgfx9TypedTextD1Ev>
 800d216:	2108      	movs	r1, #8
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f01b fe88 	bl	8028f2e <_ZdlPvj>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4618      	mov	r0, r3
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800d234:	4618      	mov	r0, r3
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800d24c:	4618      	mov	r0, r3
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800d258:	b580      	push	{r7, lr}
 800d25a:	b08e      	sub	sp, #56	@ 0x38
 800d25c:	af0a      	add	r7, sp, #40	@ 0x28
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	4611      	mov	r1, r2
 800d264:	461a      	mov	r2, r3
 800d266:	460b      	mov	r3, r1
 800d268:	80fb      	strh	r3, [r7, #6]
 800d26a:	4613      	mov	r3, r2
 800d26c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	88b9      	ldrh	r1, [r7, #4]
 800d272:	88fa      	ldrh	r2, [r7, #6]
 800d274:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d278:	9308      	str	r3, [sp, #32]
 800d27a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d27c:	9307      	str	r3, [sp, #28]
 800d27e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d282:	9306      	str	r3, [sp, #24]
 800d284:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d288:	9305      	str	r3, [sp, #20]
 800d28a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d28e:	9304      	str	r3, [sp, #16]
 800d290:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d294:	9303      	str	r3, [sp, #12]
 800d296:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d29a:	9302      	str	r3, [sp, #8]
 800d29c:	7f3b      	ldrb	r3, [r7, #28]
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	8b3b      	ldrh	r3, [r7, #24]
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	68b9      	ldr	r1, [r7, #8]
 800d2a8:	f00b f9be 	bl	8018628 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800d2ac:	4a09      	ldr	r2, [pc, #36]	@ (800d2d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2b6:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2bc:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2c2:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2c8:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	0802b01c 	.word	0x0802b01c

0800d2d8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b087      	sub	sp, #28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	3302      	adds	r3, #2
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	041b      	lsls	r3, r3, #16
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	69db      	ldr	r3, [r3, #28]
 800d304:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	889b      	ldrh	r3, [r3, #4]
 800d30a:	0adb      	lsrs	r3, r3, #11
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	4413      	add	r3, r2
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800d318:	68ba      	ldr	r2, [r7, #8]
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	4413      	add	r3, r2
}
 800d31e:	4618      	mov	r0, r3
 800d320:	371c      	adds	r7, #28
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800d32a:	b480      	push	{r7}
 800d32c:	b089      	sub	sp, #36	@ 0x24
 800d32e:	af00      	add	r7, sp, #0
 800d330:	60f8      	str	r0, [r7, #12]
 800d332:	460b      	mov	r3, r1
 800d334:	607a      	str	r2, [r7, #4]
 800d336:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d003      	beq.n	800d346 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	7b1b      	ldrb	r3, [r3, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d101      	bne.n	800d34a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800d346:	2300      	movs	r3, #0
 800d348:	e032      	b.n	800d3b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6a1a      	ldr	r2, [r3, #32]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	7b5b      	ldrb	r3, [r3, #13]
 800d356:	b21b      	sxth	r3, r3
 800d358:	021b      	lsls	r3, r3, #8
 800d35a:	b21b      	sxth	r3, r3
 800d35c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d360:	b219      	sxth	r1, r3
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	7adb      	ldrb	r3, [r3, #11]
 800d366:	b21b      	sxth	r3, r3
 800d368:	430b      	orrs	r3, r1
 800d36a:	b21b      	sxth	r3, r3
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7b1b      	ldrb	r3, [r3, #12]
 800d378:	837b      	strh	r3, [r7, #26]
 800d37a:	e013      	b.n	800d3a4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	897a      	ldrh	r2, [r7, #10]
 800d382:	429a      	cmp	r2, r3
 800d384:	d103      	bne.n	800d38e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d38c:	e010      	b.n	800d3b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	881b      	ldrh	r3, [r3, #0]
 800d392:	897a      	ldrh	r2, [r7, #10]
 800d394:	429a      	cmp	r2, r3
 800d396:	d309      	bcc.n	800d3ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d398:	8b7b      	ldrh	r3, [r7, #26]
 800d39a:	3b01      	subs	r3, #1
 800d39c:	837b      	strh	r3, [r7, #26]
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	61fb      	str	r3, [r7, #28]
 800d3a4:	8b7b      	ldrh	r3, [r7, #26]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1e8      	bne.n	800d37c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800d3aa:	e000      	b.n	800d3ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800d3ac:	bf00      	nop
        }
    }
    return 0;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3724      	adds	r7, #36	@ 0x24
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Asap_Regular_24_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Asap_Regular_24_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_24_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_24_4bpp(glyphs_Asap_Regular_24_4bpp, 21, 24, 24, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_24_4bpp, kerning_Asap_Regular_24_4bpp, 0, 0, 0, 0);
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	4801      	ldr	r0, [pc, #4]	@ (800d3c8 <__tcf_0+0xc>)
 800d3c2:	f7ff fee3 	bl	800d18c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	24005044 	.word	0x24005044

0800d3cc <_Z28getFont_Asap_Regular_24_4bppv>:
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b08e      	sub	sp, #56	@ 0x38
 800d3d0:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont Asap_Regular_24_4bpp(glyphs_Asap_Regular_24_4bpp, 21, 24, 24, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_24_4bpp, kerning_Asap_Regular_24_4bpp, 0, 0, 0, 0);
 800d3d2:	4b21      	ldr	r3, [pc, #132]	@ (800d458 <_Z28getFont_Asap_Regular_24_4bppv+0x8c>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f3bf 8f5b 	dmb	ish
 800d3da:	f003 0301 	and.w	r3, r3, #1
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	bf0c      	ite	eq
 800d3e2:	2301      	moveq	r3, #1
 800d3e4:	2300      	movne	r3, #0
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d030      	beq.n	800d44e <_Z28getFont_Asap_Regular_24_4bppv+0x82>
 800d3ec:	481a      	ldr	r0, [pc, #104]	@ (800d458 <_Z28getFont_Asap_Regular_24_4bppv+0x8c>)
 800d3ee:	f7f5 fb49 	bl	8002a84 <__cxa_guard_acquire>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	bf14      	ite	ne
 800d3f8:	2301      	movne	r3, #1
 800d3fa:	2300      	moveq	r3, #0
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d025      	beq.n	800d44e <_Z28getFont_Asap_Regular_24_4bppv+0x82>
 800d402:	2300      	movs	r3, #0
 800d404:	930c      	str	r3, [sp, #48]	@ 0x30
 800d406:	2300      	movs	r3, #0
 800d408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d40a:	2300      	movs	r3, #0
 800d40c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d40e:	2300      	movs	r3, #0
 800d410:	9309      	str	r3, [sp, #36]	@ 0x24
 800d412:	4b12      	ldr	r3, [pc, #72]	@ (800d45c <_Z28getFont_Asap_Regular_24_4bppv+0x90>)
 800d414:	9308      	str	r3, [sp, #32]
 800d416:	4b12      	ldr	r3, [pc, #72]	@ (800d460 <_Z28getFont_Asap_Regular_24_4bppv+0x94>)
 800d418:	9307      	str	r3, [sp, #28]
 800d41a:	2300      	movs	r3, #0
 800d41c:	9306      	str	r3, [sp, #24]
 800d41e:	2300      	movs	r3, #0
 800d420:	9305      	str	r3, [sp, #20]
 800d422:	2301      	movs	r3, #1
 800d424:	9304      	str	r3, [sp, #16]
 800d426:	2304      	movs	r3, #4
 800d428:	9303      	str	r3, [sp, #12]
 800d42a:	2300      	movs	r3, #0
 800d42c:	9302      	str	r3, [sp, #8]
 800d42e:	2300      	movs	r3, #0
 800d430:	9301      	str	r3, [sp, #4]
 800d432:	2318      	movs	r3, #24
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	2318      	movs	r3, #24
 800d438:	2215      	movs	r2, #21
 800d43a:	490a      	ldr	r1, [pc, #40]	@ (800d464 <_Z28getFont_Asap_Regular_24_4bppv+0x98>)
 800d43c:	480a      	ldr	r0, [pc, #40]	@ (800d468 <_Z28getFont_Asap_Regular_24_4bppv+0x9c>)
 800d43e:	f7ff ff0b 	bl	800d258 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d442:	480a      	ldr	r0, [pc, #40]	@ (800d46c <_Z28getFont_Asap_Regular_24_4bppv+0xa0>)
 800d444:	f01b ff5e 	bl	8029304 <atexit>
 800d448:	4803      	ldr	r0, [pc, #12]	@ (800d458 <_Z28getFont_Asap_Regular_24_4bppv+0x8c>)
 800d44a:	f7f5 fb83 	bl	8002b54 <__cxa_guard_release>
    return Asap_Regular_24_4bpp;
 800d44e:	4b06      	ldr	r3, [pc, #24]	@ (800d468 <_Z28getFont_Asap_Regular_24_4bppv+0x9c>)
}
 800d450:	4618      	mov	r0, r3
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	24005070 	.word	0x24005070
 800d45c:	0802ca0c 	.word	0x0802ca0c
 800d460:	0802ca10 	.word	0x0802ca10
 800d464:	0802d528 	.word	0x0802d528
 800d468:	24005044 	.word	0x24005044
 800d46c:	0800d3bd 	.word	0x0800d3bd

0800d470 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	4618      	mov	r0, r3
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d492:	bf00      	nop
 800d494:	370c      	adds	r7, #12
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d49e:	b480      	push	{r7}
 800d4a0:	b083      	sub	sp, #12
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d4a8:	bf00      	nop
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d4be:	bf00      	nop
 800d4c0:	370c      	adds	r7, #12
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800d4ca:	b480      	push	{r7}
 800d4cc:	b083      	sub	sp, #12
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800d4d6:	bf00      	nop
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800d4e2:	b480      	push	{r7}
 800d4e4:	b083      	sub	sp, #12
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
    {
    }
 800d4ea:	bf00      	nop
 800d4ec:	370c      	adds	r7, #12
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800d4f6:	b480      	push	{r7}
 800d4f8:	b083      	sub	sp, #12
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
    {
    }
 800d4fe:	bf00      	nop
 800d500:	370c      	adds	r7, #12
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
	...

0800d50c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
    {
 800d514:	4a04      	ldr	r2, [pc, #16]	@ (800d528 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	601a      	str	r2, [r3, #0]
    }
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4618      	mov	r0, r3
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr
 800d528:	0802b1a4 	.word	0x0802b1a4

0800d52c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
    }
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7ff ffe9 	bl	800d50c <_ZN8touchgfx15UIEventListenerD1Ev>
 800d53a:	2104      	movs	r1, #4
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f01b fcf6 	bl	8028f2e <_ZdlPvj>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4618      	mov	r0, r3
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
    {
    }
 800d554:	bf00      	nop
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	460b      	mov	r3, r1
 800d56a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800d56c:	bf00      	nop
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr

0800d578 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	683a      	ldr	r2, [r7, #0]
 800d586:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800d58a:	6810      	ldr	r0, [r2, #0]
 800d58c:	6851      	ldr	r1, [r2, #4]
 800d58e:	c303      	stmia	r3!, {r0, r1}
    }
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	3304      	adds	r3, #4
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f009 fdcb 	bl	8017144 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800d5ae:	bf00      	nop
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
	...

0800d5b8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
    {
 800d5c0:	4a04      	ldr	r2, [pc, #16]	@ (800d5d4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	601a      	str	r2, [r3, #0]
    }
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr
 800d5d4:	0802b18c 	.word	0x0802b18c

0800d5d8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
    }
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff ffe9 	bl	800d5b8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d5e6:	2104      	movs	r1, #4
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f01b fca0 	bl	8028f2e <_ZdlPvj>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800d5f8:	b480      	push	{r7}
 800d5fa:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800d5fc:	4b0b      	ldr	r3, [pc, #44]	@ (800d62c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d604:	2b00      	cmp	r3, #0
 800d606:	d008      	beq.n	800d61a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800d608:	4b08      	ldr	r3, [pc, #32]	@ (800d62c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d003      	beq.n	800d61a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800d612:	4b06      	ldr	r3, [pc, #24]	@ (800d62c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d618:	e002      	b.n	800d620 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800d61a:	4b04      	ldr	r3, [pc, #16]	@ (800d62c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	689b      	ldr	r3, [r3, #8]
    }
 800d620:	4618      	mov	r0, r3
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	24006600 	.word	0x24006600

0800d630 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800d638:	4a07      	ldr	r2, [pc, #28]	@ (800d658 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	601a      	str	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	605a      	str	r2, [r3, #4]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	721a      	strb	r2, [r3, #8]
    {
    }
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4618      	mov	r0, r3
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr
 800d658:	0802b168 	.word	0x0802b168

0800d65c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
    {
 800d664:	4a04      	ldr	r2, [pc, #16]	@ (800d678 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	601a      	str	r2, [r3, #0]
    }
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4618      	mov	r0, r3
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	0802b168 	.word	0x0802b168

0800d67c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
    }
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7ff ffe9 	bl	800d65c <_ZN8touchgfx10TransitionD1Ev>
 800d68a:	210c      	movs	r1, #12
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f01b fc4e 	bl	8028f2e <_ZdlPvj>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4618      	mov	r0, r3
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
    {
    }
 800d6a4:	bf00      	nop
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
    {
    }
 800d6b8:	bf00      	nop
 800d6ba:	370c      	adds	r7, #12
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
    {
    }
 800d6cc:	bf00      	nop
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800d6e0:	f009 fcf2 	bl	80170c8 <_ZN8touchgfx11Application11getInstanceEv>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	323c      	adds	r2, #60	@ 0x3c
 800d6ea:	6812      	ldr	r2, [r2, #0]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	4790      	blx	r2
    }
 800d6f0:	bf00      	nop
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	683a      	ldr	r2, [r7, #0]
 800d706:	605a      	str	r2, [r3, #4]
    }
 800d708:	bf00      	nop
 800d70a:	370c      	adds	r7, #12
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	4a05      	ldr	r2, [pc, #20]	@ (800d734 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	601a      	str	r2, [r3, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4618      	mov	r0, r3
 800d726:	f7ff fef1 	bl	800d50c <_ZN8touchgfx15UIEventListenerD1Ev>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4618      	mov	r0, r3
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	0802c448 	.word	0x0802c448

0800d738 <_ZN8touchgfx11ApplicationD0Ev>:
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff ffe7 	bl	800d714 <_ZN8touchgfx11ApplicationD1Ev>
 800d746:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f01b fbef 	bl	8028f2e <_ZdlPvj>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4618      	mov	r0, r3
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
	...

0800d75c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	4618      	mov	r0, r3
 800d768:	f009 fdbe 	bl	80172e8 <_ZN8touchgfx11ApplicationC1Ev>
 800d76c:	4a09      	ldr	r2, [pc, #36]	@ (800d794 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4a04      	ldr	r2, [pc, #16]	@ (800d798 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800d786:	6013      	str	r3, [r2, #0]
    }
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	0802b114 	.word	0x0802b114
 800d798:	2400664c 	.word	0x2400664c

0800d79c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 f804 	bl	800d7b2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800d7aa:	bf00      	nop
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b082      	sub	sp, #8
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00f      	beq.n	800d7e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	330c      	adds	r3, #12
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	4798      	blx	r3
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d001      	beq.n	800d7e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e000      	b.n	800d7e6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00e      	beq.n	800d808 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	3308      	adds	r3, #8
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800d808:	bf00      	nop
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	601a      	str	r2, [r3, #0]
    }
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	4a05      	ldr	r2, [pc, #20]	@ (800d84c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff ff69 	bl	800d714 <_ZN8touchgfx11ApplicationD1Ev>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4618      	mov	r0, r3
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	0802b114 	.word	0x0802b114

0800d850 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7ff ffe7 	bl	800d82c <_ZN8touchgfx14MVPApplicationD1Ev>
 800d85e:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f01b fb63 	bl	8028f2e <_ZdlPvj>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4618      	mov	r0, r3
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
	...

0800d874 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	4a05      	ldr	r2, [pc, #20]	@ (800d894 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff fe97 	bl	800d5b8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4618      	mov	r0, r3
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	0802b0fc 	.word	0x0802b0fc

0800d898 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7ff ffe7 	bl	800d874 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d8a6:	2110      	movs	r1, #16
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f01b fb40 	bl	8028f2e <_ZdlPvj>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	4a08      	ldr	r2, [pc, #32]	@ (800d8e4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	601a      	str	r2, [r3, #0]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7ff ffd1 	bl	800d874 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7ff ffa9 	bl	800d82c <_ZN8touchgfx14MVPApplicationD1Ev>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	0802b0a8 	.word	0x0802b0a8

0800d8e8 <_ZN23FrontendApplicationBaseD0Ev>:
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7ff ffe1 	bl	800d8b8 <_ZN23FrontendApplicationBaseD1Ev>
 800d8f6:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f01b fb17 	bl	8028f2e <_ZdlPvj>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4618      	mov	r0, r3
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b082      	sub	sp, #8
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
    {
        gotomainScreenNoTransition();
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 f888 	bl	800da28 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv>
    }
 800d918:	bf00      	nop
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2201      	movs	r2, #1
 800d92c:	721a      	strb	r2, [r3, #8]
    }
 800d92e:	bf00      	nop
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800d93a:	b480      	push	{r7}
 800d93c:	b083      	sub	sp, #12
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	605a      	str	r2, [r3, #4]
    }
 800d94a:	bf00      	nop
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
	...

0800d958 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/mainView.hpp>
#include <gui/main_screen/mainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	4618      	mov	r0, r3
 800d968:	f7ff fef8 	bl	800d75c <_ZN8touchgfx14MVPApplicationC1Ev>
 800d96c:	4a19      	ldr	r2, [pc, #100]	@ (800d9d4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800d978:	4618      	mov	r0, r3
 800d97a:	f000 f8ab 	bl	800dad4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800d98e:	f7ff fc1f 	bl	800d1d0 <_ZN8touchgfx3HAL11getInstanceEv>
 800d992:	4603      	mov	r3, r0
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	3208      	adds	r2, #8
 800d998:	6812      	ldr	r2, [r2, #0]
 800d99a:	2100      	movs	r1, #0
 800d99c:	4618      	mov	r0, r3
 800d99e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	f001 fe49 	bl	800f638 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800d9a6:	f7ff fe27 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f013 ff1e 	bl	80217ee <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800d9b2:	f7ff fe21 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f013 ff93 	bl	80218e4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800d9be:	f7ff fe1b 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f013 ff99 	bl	80218fc <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	0802b0a8 	.word	0x0802b0a8

0800d9d8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	683a      	ldr	r2, [r7, #0]
 800d9fe:	4611      	mov	r1, r2
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff ffe9 	bl	800d9d8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	685a      	ldr	r2, [r3, #4]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	605a      	str	r2, [r3, #4]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	3308      	adds	r3, #8
 800da14:	3208      	adds	r2, #8
 800da16:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da1a:	e883 0003 	stmia.w	r3, {r0, r1}
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	4618      	mov	r0, r3
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv>:
 */

// main

void FrontendApplicationBase::gotomainScreenNoTransition()
{
 800da28:	b590      	push	{r4, r7, lr}
 800da2a:	b089      	sub	sp, #36	@ 0x24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomainScreenNoTransitionImpl);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800da36:	4b10      	ldr	r3, [pc, #64]	@ (800da78 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv+0x50>)
 800da38:	61bb      	str	r3, [r7, #24]
 800da3a:	2300      	movs	r3, #0
 800da3c:	61fb      	str	r3, [r7, #28]
 800da3e:	f107 0008 	add.w	r0, r7, #8
 800da42:	f107 0318 	add.w	r3, r7, #24
 800da46:	cb0c      	ldmia	r3, {r2, r3}
 800da48:	6879      	ldr	r1, [r7, #4]
 800da4a:	f000 f85f 	bl	800db0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800da4e:	f107 0308 	add.w	r3, r7, #8
 800da52:	4619      	mov	r1, r3
 800da54:	4620      	mov	r0, r4
 800da56:	f7ff ffcb 	bl	800d9f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800da5a:	f107 0308 	add.w	r3, r7, #8
 800da5e:	4618      	mov	r0, r3
 800da60:	f7ff ff08 	bl	800d874 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800da70:	bf00      	nop
 800da72:	3724      	adds	r7, #36	@ 0x24
 800da74:	46bd      	mov	sp, r7
 800da76:	bd90      	pop	{r4, r7, pc}
 800da78:	0800da7d 	.word	0x0800da7d

0800da7c <_ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenNoTransitionImpl()
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af02      	add	r7, sp, #8
 800da82:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<mainView, mainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800da90:	461a      	mov	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	4b04      	ldr	r3, [pc, #16]	@ (800daac <_ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv+0x30>)
 800da9c:	4804      	ldr	r0, [pc, #16]	@ (800dab0 <_ZN23FrontendApplicationBase30gotomainScreenNoTransitionImplEv+0x34>)
 800da9e:	f000 f867 	bl	800db70 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800daa2:	bf00      	nop
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	24006640 	.word	0x24006640
 800dab0:	2400663c 	.word	0x2400663c

0800dab4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	4a04      	ldr	r2, [pc, #16]	@ (800dad0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	601a      	str	r2, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4618      	mov	r0, r3
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	0802b18c 	.word	0x0802b18c

0800dad4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4618      	mov	r0, r3
 800dae0:	f7ff ffe8 	bl	800dab4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800dae4:	4a08      	ldr	r2, [pc, #32]	@ (800db08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	601a      	str	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	605a      	str	r2, [r3, #4]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	609a      	str	r2, [r3, #8]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	60da      	str	r2, [r3, #12]
    {
    }
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4618      	mov	r0, r3
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	0802b0fc 	.word	0x0802b0fc

0800db0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	4639      	mov	r1, r7
 800db18:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	4618      	mov	r0, r3
 800db20:	f7ff ffc8 	bl	800dab4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800db24:	4a08      	ldr	r2, [pc, #32]	@ (800db48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	601a      	str	r2, [r3, #0]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	605a      	str	r2, [r3, #4]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	3308      	adds	r3, #8
 800db34:	463a      	mov	r2, r7
 800db36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db3a:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	4618      	mov	r0, r3
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	0802b0fc 	.word	0x0802b0fc

0800db4c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff fd6a 	bl	800d630 <_ZN8touchgfx10TransitionC1Ev>
 800db5c:	4a03      	ldr	r2, [pc, #12]	@ (800db6c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	601a      	str	r2, [r3, #0]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4618      	mov	r0, r3
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	0802b084 	.word	0x0802b084

0800db70 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800db70:	b590      	push	{r4, r7, lr}
 800db72:	b08f      	sub	sp, #60	@ 0x3c
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
 800db7c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	689a      	ldr	r2, [r3, #8]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3320      	adds	r3, #32
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4610      	mov	r0, r2
 800db8e:	4798      	blx	r3
 800db90:	4603      	mov	r3, r0
 800db92:	f240 42fb 	movw	r2, #1275	@ 0x4fb
 800db96:	4293      	cmp	r3, r2
 800db98:	d805      	bhi.n	800dba6 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800db9a:	4b7d      	ldr	r3, [pc, #500]	@ (800dd90 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800db9c:	4a7d      	ldr	r2, [pc, #500]	@ (800dd94 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800db9e:	21a3      	movs	r1, #163	@ 0xa3
 800dba0:	487d      	ldr	r0, [pc, #500]	@ (800dd98 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800dba2:	f01b fb91 	bl	80292c8 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685a      	ldr	r2, [r3, #4]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	3320      	adds	r3, #32
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	4798      	blx	r3
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b0f      	cmp	r3, #15
 800dbbc:	d805      	bhi.n	800dbca <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800dbbe:	4b77      	ldr	r3, [pc, #476]	@ (800dd9c <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800dbc0:	4a74      	ldr	r2, [pc, #464]	@ (800dd94 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800dbc2:	21a4      	movs	r1, #164	@ 0xa4
 800dbc4:	4874      	ldr	r0, [pc, #464]	@ (800dd98 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800dbc6:	f01b fb7f 	bl	80292c8 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68da      	ldr	r2, [r3, #12]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	3320      	adds	r3, #32
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4610      	mov	r0, r2
 800dbda:	4798      	blx	r3
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b0b      	cmp	r3, #11
 800dbe0:	d805      	bhi.n	800dbee <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800dbe2:	4b6f      	ldr	r3, [pc, #444]	@ (800dda0 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800dbe4:	4a6b      	ldr	r2, [pc, #428]	@ (800dd94 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800dbe6:	21a5      	movs	r1, #165	@ 0xa5
 800dbe8:	486b      	ldr	r0, [pc, #428]	@ (800dd98 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800dbea:	f01b fb6d 	bl	80292c8 <__assert_func>
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800dbfa:	f009 fa65 	bl	80170c8 <_ZN8touchgfx11Application11getInstanceEv>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff fccb 	bl	800d59c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800dc06:	6a3b      	ldr	r3, [r7, #32]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d008      	beq.n	800dc20 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 800dc0e:	6a3b      	ldr	r3, [r7, #32]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	6a3b      	ldr	r3, [r7, #32]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	330c      	adds	r3, #12
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	4798      	blx	r3
    if (*currentTrans)
 800dc20:	6a3b      	ldr	r3, [r7, #32]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d007      	beq.n	800dc38 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 800dc28:	6a3b      	ldr	r3, [r7, #32]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	6a3b      	ldr	r3, [r7, #32]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4610      	mov	r0, r2
 800dc36:	4798      	blx	r3
    if (*currentScreen)
 800dc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d008      	beq.n	800dc52 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 800dc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	3314      	adds	r3, #20
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4610      	mov	r0, r2
 800dc50:	4798      	blx	r3
    if (*currentPresenter)
 800dc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d008      	beq.n	800dc6c <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	3304      	adds	r3, #4
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4610      	mov	r0, r2
 800dc6a:	4798      	blx	r3
    if (*currentScreen)
 800dc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d007      	beq.n	800dc84 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 800dc74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4610      	mov	r0, r2
 800dc82:	4798      	blx	r3
    if (*currentPresenter)
 800dc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d008      	beq.n	800dc9e <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	3308      	adds	r3, #8
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	4798      	blx	r3
}
 800dc9e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	2100      	movs	r1, #0
 800dca6:	4618      	mov	r0, r3
 800dca8:	f000 f87c 	bl	800dda4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800dcac:	4603      	mov	r3, r0
 800dcae:	4619      	mov	r1, r3
 800dcb0:	200c      	movs	r0, #12
 800dcb2:	f7ff fbdd 	bl	800d470 <_ZnwjPv>
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f7ff ff47 	bl	800db4c <_ZN8touchgfx12NoTransitionC1Ev>
 800dcbe:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 f87f 	bl	800ddca <_ZN8touchgfx17AbstractPartition2atI8mainViewEERT_t>
 800dccc:	4603      	mov	r3, r0
 800dcce:	4619      	mov	r1, r3
 800dcd0:	f240 40fc 	movw	r0, #1276	@ 0x4fc
 800dcd4:	f7ff fbcc 	bl	800d470 <_ZnwjPv>
 800dcd8:	4604      	mov	r4, r0
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f001 fe90 	bl	800fa00 <_ZN8mainViewC1Ev>
 800dce0:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	2100      	movs	r1, #0
 800dce8:	4618      	mov	r0, r3
 800dcea:	f000 f881 	bl	800ddf0 <_ZN8touchgfx17AbstractPartition2atI13mainPresenterEERT_t>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	2010      	movs	r0, #16
 800dcf4:	f7ff fbbc 	bl	800d470 <_ZnwjPv>
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f001 fe27 	bl	800f950 <_ZN13mainPresenterC1ER8mainView>
 800dd02:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd08:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd0e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd14:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800dd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800dd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd1e:	3304      	adds	r3, #4
 800dd20:	e000      	b.n	800dd24 <_ZN8touchgfx14makeTransitionI8mainView13mainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800dd22:	2300      	movs	r3, #0
 800dd24:	4619      	mov	r1, r3
 800dd26:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800dd28:	f7ff fd72 	bl	800d810 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800dd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2e:	3304      	adds	r3, #4
 800dd30:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7ff fe01 	bl	800d93a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800dd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f000 f86a 	bl	800de16 <_ZN8touchgfx4ViewI13mainPresenterE4bindERS1_>
 800dd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd44:	61fb      	str	r3, [r7, #28]
 800dd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd48:	61bb      	str	r3, [r7, #24]
 800dd4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd4c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	330c      	adds	r3, #12
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	69f8      	ldr	r0, [r7, #28]
 800dd58:	4798      	blx	r3
    newPresenter->activate();
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	69b8      	ldr	r0, [r7, #24]
 800dd62:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800dd64:	6979      	ldr	r1, [r7, #20]
 800dd66:	69f8      	ldr	r0, [r7, #28]
 800dd68:	f00b f81e 	bl	8018da8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	3310      	adds	r3, #16
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	6978      	ldr	r0, [r7, #20]
 800dd76:	4798      	blx	r3
    newTransition->invalidate();
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3314      	adds	r3, #20
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	6978      	ldr	r0, [r7, #20]
 800dd82:	4798      	blx	r3
}
 800dd84:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800dd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	373c      	adds	r7, #60	@ 0x3c
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd90      	pop	{r4, r7, pc}
 800dd90:	0802a4a4 	.word	0x0802a4a4
 800dd94:	0802a534 	.word	0x0802a534
 800dd98:	0802a600 	.word	0x0802a600
 800dd9c:	0802a644 	.word	0x0802a644
 800dda0:	0802a6e8 	.word	0x0802a6e8

0800dda4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	460b      	mov	r3, r1
 800ddae:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	3324      	adds	r3, #36	@ 0x24
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	887a      	ldrh	r2, [r7, #2]
 800ddba:	4611      	mov	r1, r2
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	4798      	blx	r3
 800ddc0:	4603      	mov	r3, r0
    }
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <_ZN8touchgfx17AbstractPartition2atI8mainViewEERT_t>:
    T& at(const uint16_t index)
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b082      	sub	sp, #8
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3324      	adds	r3, #36	@ 0x24
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	887a      	ldrh	r2, [r7, #2]
 800dde0:	4611      	mov	r1, r2
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	4798      	blx	r3
 800dde6:	4603      	mov	r3, r0
    }
 800dde8:	4618      	mov	r0, r3
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <_ZN8touchgfx17AbstractPartition2atI13mainPresenterEERT_t>:
    T& at(const uint16_t index)
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	3324      	adds	r3, #36	@ 0x24
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	887a      	ldrh	r2, [r7, #2]
 800de06:	4611      	mov	r1, r2
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	4798      	blx	r3
 800de0c:	4603      	mov	r3, r0
    }
 800de0e:	4618      	mov	r0, r3
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <_ZN8touchgfx4ViewI13mainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800de16:	b480      	push	{r7}
 800de18:	b083      	sub	sp, #12
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800de26:	bf00      	nop
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
	...

0800de34 <_ZN8touchgfx12NoTransitionD1Ev>:
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	4a05      	ldr	r2, [pc, #20]	@ (800de54 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	601a      	str	r2, [r3, #0]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4618      	mov	r0, r3
 800de46:	f7ff fc09 	bl	800d65c <_ZN8touchgfx10TransitionD1Ev>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4618      	mov	r0, r3
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	0802b084 	.word	0x0802b084

0800de58 <_ZN8touchgfx12NoTransitionD0Ev>:
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f7ff ffe7 	bl	800de34 <_ZN8touchgfx12NoTransitionD1Ev>
 800de66:	210c      	movs	r1, #12
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f01b f860 	bl	8028f2e <_ZdlPvj>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	68d2      	ldr	r2, [r2, #12]
 800de88:	1052      	asrs	r2, r2, #1
 800de8a:	1899      	adds	r1, r3, r2
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	f003 0301 	and.w	r3, r3, #1
 800de94:	2b00      	cmp	r3, #0
 800de96:	d102      	bne.n	800de9e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	e00a      	b.n	800deb4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	68d2      	ldr	r2, [r2, #12]
 800dea6:	1052      	asrs	r2, r2, #1
 800dea8:	4413      	add	r3, r2
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	6892      	ldr	r2, [r2, #8]
 800deb0:	4413      	add	r3, r2
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4608      	mov	r0, r1
 800deb6:	4798      	blx	r3
    }
 800deb8:	bf00      	nop
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d010      	beq.n	800def2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d107      	bne.n	800dee8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	f003 0301 	and.w	r3, r3, #1
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d101      	bne.n	800dee8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800dee4:	2301      	movs	r3, #1
 800dee6:	e000      	b.n	800deea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800dee8:	2300      	movs	r3, #0
 800deea:	2b01      	cmp	r3, #1
 800deec:	d001      	beq.n	800def2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800deee:	2301      	movs	r3, #1
 800def0:	e000      	b.n	800def4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800def2:	2300      	movs	r3, #0
    }
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
        : color(col)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	683a      	ldr	r2, [r7, #0]
 800df0e:	601a      	str	r2, [r3, #0]
    {
    }
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	4618      	mov	r0, r3
 800df14:	370c      	adds	r7, #12
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr

0800df1e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800df1e:	b480      	push	{r7}
 800df20:	b083      	sub	sp, #12
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2200      	movs	r2, #0
 800df2a:	801a      	strh	r2, [r3, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	805a      	strh	r2, [r3, #2]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	809a      	strh	r2, [r3, #4]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	80da      	strh	r2, [r3, #6]
    {
    }
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4618      	mov	r0, r3
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	4608      	mov	r0, r1
 800df56:	4611      	mov	r1, r2
 800df58:	461a      	mov	r2, r3
 800df5a:	4603      	mov	r3, r0
 800df5c:	817b      	strh	r3, [r7, #10]
 800df5e:	460b      	mov	r3, r1
 800df60:	813b      	strh	r3, [r7, #8]
 800df62:	4613      	mov	r3, r2
 800df64:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	897a      	ldrh	r2, [r7, #10]
 800df6a:	801a      	strh	r2, [r3, #0]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	893a      	ldrh	r2, [r7, #8]
 800df70:	805a      	strh	r2, [r3, #2]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	88fa      	ldrh	r2, [r7, #6]
 800df76:	809a      	strh	r2, [r3, #4]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	8b3a      	ldrh	r2, [r7, #24]
 800df7c:	80da      	strh	r2, [r3, #6]
    {
    }
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	4618      	mov	r0, r3
 800df82:	3714      	adds	r7, #20
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	460b      	mov	r3, r1
 800df96:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	887a      	ldrh	r2, [r7, #2]
 800df9c:	801a      	strh	r2, [r3, #0]
    {
    }
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800dfb4:	4a14      	ldr	r2, [pc, #80]	@ (800e008 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	601a      	str	r2, [r3, #0]
        : rect(),
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	3304      	adds	r3, #4
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7ff ffad 	bl	800df1e <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	330c      	adds	r3, #12
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7ff ffa8 	bl	800df1e <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4618      	mov	r0, r3
 800e000:	3708      	adds	r7, #8
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	0802c49c 	.word	0x0802c49c

0800e00c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e00c:	b480      	push	{r7}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
    {
 800e014:	4a04      	ldr	r2, [pc, #16]	@ (800e028 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	601a      	str	r2, [r3, #0]
    }
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4618      	mov	r0, r3
 800e01e:	370c      	adds	r7, #12
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr
 800e028:	0802c49c 	.word	0x0802c49c

0800e02c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
    }
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7ff ffe9 	bl	800e00c <_ZN8touchgfx8DrawableD1Ev>
 800e03a:	2128      	movs	r1, #40	@ 0x28
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f01a ff76 	bl	8028f2e <_ZdlPvj>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4618      	mov	r0, r3
 800e046:	3708      	adds	r7, #8
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d005      	beq.n	800e06a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3314      	adds	r3, #20
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	4798      	blx	r3
        }
    }
 800e06a:	bf00      	nop
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800e072:	b480      	push	{r7}
 800e074:	b083      	sub	sp, #12
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e07a:	2300      	movs	r3, #0
    }
 800e07c:	4618      	mov	r0, r3
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	4608      	mov	r0, r1
 800e092:	4611      	mov	r1, r2
 800e094:	461a      	mov	r2, r3
 800e096:	4603      	mov	r3, r0
 800e098:	817b      	strh	r3, [r7, #10]
 800e09a:	460b      	mov	r3, r1
 800e09c:	813b      	strh	r3, [r7, #8]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e0a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e0a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	f000 f82a 	bl	800e106 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800e0b2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e0b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f000 f87e 	bl	800e1be <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800e0c2:	bf00      	nop
 800e0c4:	3710      	adds	r7, #16
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e0ca:	b480      	push	{r7}
 800e0cc:	b083      	sub	sp, #12
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	887a      	ldrh	r2, [r7, #2]
 800e0da:	809a      	strh	r2, [r3, #4]
    }
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	887a      	ldrh	r2, [r7, #2]
 800e0f8:	80da      	strh	r2, [r3, #6]
    }
 800e0fa:	bf00      	nop
 800e0fc:	370c      	adds	r7, #12
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr

0800e106 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800e106:	b580      	push	{r7, lr}
 800e108:	b082      	sub	sp, #8
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	460b      	mov	r3, r1
 800e110:	807b      	strh	r3, [r7, #2]
 800e112:	4613      	mov	r3, r2
 800e114:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	3330      	adds	r3, #48	@ 0x30
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e122:	4611      	mov	r1, r2
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	4798      	blx	r3
        setY(y);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	3334      	adds	r3, #52	@ 0x34
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e134:	4611      	mov	r1, r2
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	4798      	blx	r3
    }
 800e13a:	bf00      	nop
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800e142:	b480      	push	{r7}
 800e144:	b083      	sub	sp, #12
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	460b      	mov	r3, r1
 800e14c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	887a      	ldrh	r2, [r7, #2]
 800e152:	811a      	strh	r2, [r3, #8]
    }
 800e154:	bf00      	nop
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	460b      	mov	r3, r1
 800e16a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	887a      	ldrh	r2, [r7, #2]
 800e170:	815a      	strh	r2, [r3, #10]
    }
 800e172:	bf00      	nop
 800e174:	370c      	adds	r7, #12
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr

0800e17e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800e17e:	b480      	push	{r7}
 800e180:	b083      	sub	sp, #12
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
    {
    }
 800e186:	bf00      	nop
 800e188:	370c      	adds	r7, #12
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e192:	b480      	push	{r7}
 800e194:	b083      	sub	sp, #12
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
 800e19a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e19c:	bf00      	nop
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e1b2:	bf00      	nop
 800e1b4:	370c      	adds	r7, #12
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b082      	sub	sp, #8
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	807b      	strh	r3, [r7, #2]
 800e1ca:	4613      	mov	r3, r2
 800e1cc:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	3338      	adds	r3, #56	@ 0x38
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e1da:	4611      	mov	r1, r2
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	4798      	blx	r3
        setHeight(height);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	333c      	adds	r3, #60	@ 0x3c
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	4798      	blx	r3
    }
 800e1f2:	bf00      	nop
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e1fa:	b480      	push	{r7}
 800e1fc:	b083      	sub	sp, #12
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
 800e202:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e204:	bf00      	nop
 800e206:	370c      	adds	r7, #12
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
    {
    }
 800e218:	bf00      	nop
 800e21a:	370c      	adds	r7, #12
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	78fa      	ldrb	r2, [r7, #3]
 800e234:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 800e238:	bf00      	nop
 800e23a:	370c      	adds	r7, #12
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr

0800e244 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800e252:	4618      	mov	r0, r3
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr

0800e25e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e25e:	b480      	push	{r7}
 800e260:	b083      	sub	sp, #12
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800e26c:	4618      	mov	r0, r3
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	460b      	mov	r3, r1
 800e282:	807b      	strh	r3, [r7, #2]
 800e284:	4613      	mov	r3, r2
 800e286:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3354      	adds	r3, #84	@ 0x54
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	8879      	ldrh	r1, [r7, #2]
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e298:	b292      	uxth	r2, r2
 800e29a:	1a8a      	subs	r2, r1, r2
 800e29c:	b292      	uxth	r2, r2
 800e29e:	b210      	sxth	r0, r2
 800e2a0:	8839      	ldrh	r1, [r7, #0]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e2a8:	b292      	uxth	r2, r2
 800e2aa:	1a8a      	subs	r2, r1, r2
 800e2ac:	b292      	uxth	r2, r2
 800e2ae:	b212      	sxth	r2, r2
 800e2b0:	4601      	mov	r1, r0
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	4798      	blx	r3
    }
 800e2b6:	bf00      	nop
 800e2b8:	3708      	adds	r7, #8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800e2be:	b480      	push	{r7}
 800e2c0:	b083      	sub	sp, #12
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e2cc:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e2d4:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e2dc:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800e2de:	bf00      	nop
 800e2e0:	370c      	adds	r7, #12
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr

0800e2ea <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b084      	sub	sp, #16
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	60f8      	str	r0, [r7, #12]
 800e2f2:	60b9      	str	r1, [r7, #8]
 800e2f4:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f7ff ffe1 	bl	800e2be <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	601a      	str	r2, [r3, #0]
    }
 800e30a:	bf00      	nop
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800e312:	b580      	push	{r7, lr}
 800e314:	b084      	sub	sp, #16
 800e316:	af00      	add	r7, sp, #0
 800e318:	60f8      	str	r0, [r7, #12]
 800e31a:	607b      	str	r3, [r7, #4]
 800e31c:	460b      	mov	r3, r1
 800e31e:	817b      	strh	r3, [r7, #10]
 800e320:	4613      	mov	r3, r2
 800e322:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	4618      	mov	r0, r3
 800e328:	f7ff ff8c 	bl	800e244 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d008      	beq.n	800e344 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	4618      	mov	r0, r3
 800e336:	f7ff ff92 	bl	800e25e <_ZNK8touchgfx8Drawable11isTouchableEv>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e340:	2301      	movs	r3, #1
 800e342:	e000      	b.n	800e346 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800e344:	2300      	movs	r3, #0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	601a      	str	r2, [r3, #0]
        }
    }
 800e350:	bf00      	nop
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	4a05      	ldr	r2, [pc, #20]	@ (800e378 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4618      	mov	r0, r3
 800e36a:	f7ff fe4f 	bl	800e00c <_ZN8touchgfx8DrawableD1Ev>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4618      	mov	r0, r3
 800e372:	3708      	adds	r7, #8
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	0802bbf8 	.word	0x0802bbf8

0800e37c <_ZN8touchgfx9ContainerD0Ev>:
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7ff ffe7 	bl	800e358 <_ZN8touchgfx9ContainerD1Ev>
 800e38a:	212c      	movs	r1, #44	@ 0x2c
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f01a fdce 	bl	8028f2e <_ZdlPvj>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4618      	mov	r0, r3
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
    {
 800e3a4:	4a06      	ldr	r2, [pc, #24]	@ (800e3c0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	601a      	str	r2, [r3, #0]
    }
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7ff ffd2 	bl	800e358 <_ZN8touchgfx9ContainerD1Ev>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	0802c5a8 	.word	0x0802c5a8

0800e3c4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
    }
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7ff ffe5 	bl	800e39c <_ZN8touchgfx6ScreenD1Ev>
 800e3d2:	213c      	movs	r1, #60	@ 0x3c
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f01a fdaa 	bl	8028f2e <_ZdlPvj>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
    {
    }
 800e3ec:	bf00      	nop
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
    {
    }
 800e400:	bf00      	nop
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
    {
    }
 800e414:	bf00      	nop
 800e416:	370c      	adds	r7, #12
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
    {
    }
 800e428:	bf00      	nop
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	460b      	mov	r3, r1
 800e43e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800e440:	bf00      	nop
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	3304      	adds	r3, #4
 800e45a:	6839      	ldr	r1, [r7, #0]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f004 fa5e 	bl	801291e <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800e462:	bf00      	nop
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
	...

0800e46c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4618      	mov	r0, r3
 800e478:	f7ff fd98 	bl	800dfac <_ZN8touchgfx8DrawableC1Ev>
 800e47c:	4a03      	ldr	r2, [pc, #12]	@ (800e48c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	0802b2c4 	.word	0x0802b2c4

0800e490 <_ZN8touchgfx6WidgetD1Ev>:
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	4a05      	ldr	r2, [pc, #20]	@ (800e4b0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7ff fdb3 	bl	800e00c <_ZN8touchgfx8DrawableD1Ev>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	0802b2c4 	.word	0x0802b2c4

0800e4b4 <_ZN8touchgfx6WidgetD0Ev>:
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b082      	sub	sp, #8
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f7ff ffe7 	bl	800e490 <_ZN8touchgfx6WidgetD1Ev>
 800e4c2:	2128      	movs	r1, #40	@ 0x28
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f01a fd32 	bl	8028f2e <_ZdlPvj>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	2326      	movs	r3, #38	@ 0x26
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	f01b f908 	bl	80296fa <memset>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7ff ffbd 	bl	800e46c <_ZN8touchgfx6WidgetC1Ev>
 800e4f2:	4a09      	ldr	r2, [pc, #36]	@ (800e518 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	601a      	str	r2, [r3, #0]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	22ff      	movs	r2, #255	@ 0xff
 800e4fc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	3328      	adds	r3, #40	@ 0x28
 800e504:	2100      	movs	r1, #0
 800e506:	4618      	mov	r0, r3
 800e508:	f7ff fcfa 	bl	800df00 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4618      	mov	r0, r3
 800e510:	3708      	adds	r7, #8
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	0802c1a4 	.word	0x0802c1a4

0800e51c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	683a      	ldr	r2, [r7, #0]
 800e52a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800e52c:	bf00      	nop
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	460b      	mov	r3, r1
 800e542:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800e544:	4a06      	ldr	r2, [pc, #24]	@ (800e560 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	601a      	str	r2, [r3, #0]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	887a      	ldrh	r2, [r7, #2]
 800e54e:	809a      	strh	r2, [r3, #4]
    }
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4618      	mov	r0, r3
 800e554:	370c      	adds	r7, #12
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	0802b00c 	.word	0x0802b00c

0800e564 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 800e564:	b590      	push	{r4, r7, lr}
 800e566:	b087      	sub	sp, #28
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6178      	str	r0, [r7, #20]
 800e56c:	460b      	mov	r3, r1
 800e56e:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e576:	4611      	mov	r1, r2
 800e578:	4618      	mov	r0, r3
 800e57a:	f7ff fde2 	bl	800e142 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	3384      	adds	r3, #132	@ 0x84
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	697c      	ldr	r4, [r7, #20]
 800e588:	463a      	mov	r2, r7
 800e58a:	6979      	ldr	r1, [r7, #20]
 800e58c:	4610      	mov	r0, r2
 800e58e:	4798      	blx	r3
 800e590:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800e594:	463a      	mov	r2, r7
 800e596:	ca07      	ldmia	r2, {r0, r1, r2}
 800e598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e59c:	bf00      	nop
 800e59e:	371c      	adds	r7, #28
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd90      	pop	{r4, r7, pc}

0800e5a4 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800e5a4:	b590      	push	{r4, r7, lr}
 800e5a6:	b087      	sub	sp, #28
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6178      	str	r0, [r7, #20]
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800e5b6:	4611      	mov	r1, r2
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7ff fdd1 	bl	800e160 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	3384      	adds	r3, #132	@ 0x84
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	697c      	ldr	r4, [r7, #20]
 800e5c8:	463a      	mov	r2, r7
 800e5ca:	6979      	ldr	r1, [r7, #20]
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	4798      	blx	r3
 800e5d0:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800e5d4:	463a      	mov	r2, r7
 800e5d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800e5d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800e5dc:	bf00      	nop
 800e5de:	371c      	adds	r7, #28
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd90      	pop	{r4, r7, pc}

0800e5e4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff fc95 	bl	800df1e <_ZN8touchgfx4RectC1Ev>
    }
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	460b      	mov	r3, r1
 800e606:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	78fa      	ldrb	r2, [r7, #3]
 800e60c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    }
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800e61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	460b      	mov	r3, r1
 800e626:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800e628:	687e      	ldr	r6, [r7, #4]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	3334      	adds	r3, #52	@ 0x34
 800e630:	681c      	ldr	r4, [r3, #0]
 800e632:	887d      	ldrh	r5, [r7, #2]
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 f867 	bl	800e708 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800e63a:	4603      	mov	r3, r0
 800e63c:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e63e:	4b1c      	ldr	r3, [pc, #112]	@ (800e6b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d105      	bne.n	800e652 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800e646:	4b1b      	ldr	r3, [pc, #108]	@ (800e6b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800e648:	4a1b      	ldr	r2, [pc, #108]	@ (800e6b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800e64a:	216c      	movs	r1, #108	@ 0x6c
 800e64c:	481b      	ldr	r0, [pc, #108]	@ (800e6bc <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800e64e:	f01a fe3b 	bl	80292c8 <__assert_func>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	889a      	ldrh	r2, [r3, #4]
 800e65a:	4b19      	ldr	r3, [pc, #100]	@ (800e6c0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	429a      	cmp	r2, r3
 800e660:	bf34      	ite	cc
 800e662:	2301      	movcc	r3, #1
 800e664:	2300      	movcs	r3, #0
 800e666:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d105      	bne.n	800e678 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800e66c:	4b15      	ldr	r3, [pc, #84]	@ (800e6c4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800e66e:	4a12      	ldr	r2, [pc, #72]	@ (800e6b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800e670:	216d      	movs	r1, #109	@ 0x6d
 800e672:	4812      	ldr	r0, [pc, #72]	@ (800e6bc <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800e674:	f01a fe28 	bl	80292c8 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800e678:	4b13      	ldr	r3, [pc, #76]	@ (800e6c8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	4b0c      	ldr	r3, [pc, #48]	@ (800e6b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800e67e:	6819      	ldr	r1, [r3, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	889b      	ldrh	r3, [r3, #4]
 800e684:	005b      	lsls	r3, r3, #1
 800e686:	440b      	add	r3, r1
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	4413      	add	r3, r2
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	3230      	adds	r2, #48	@ 0x30
 800e694:	6812      	ldr	r2, [r2, #0]
 800e696:	4618      	mov	r0, r3
 800e698:	4790      	blx	r2
 800e69a:	4603      	mov	r3, r0
 800e69c:	1aeb      	subs	r3, r5, r3
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	b21b      	sxth	r3, r3
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	47a0      	blx	r4
    }
 800e6a8:	bf00      	nop
 800e6aa:	3714      	adds	r7, #20
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6b0:	24006650 	.word	0x24006650
 800e6b4:	0802a78c 	.word	0x0802a78c
 800e6b8:	0802a7d0 	.word	0x0802a7d0
 800e6bc:	0802a80c 	.word	0x0802a80c
 800e6c0:	24006654 	.word	0x24006654
 800e6c4:	0802a850 	.word	0x0802a850
 800e6c8:	24006658 	.word	0x24006658

0800e6cc <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	807b      	strh	r3, [r7, #2]
 800e6d8:	4613      	mov	r3, r2
 800e6da:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	3330      	adds	r3, #48	@ 0x30
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800e6ea:	4610      	mov	r0, r2
 800e6ec:	4798      	blx	r3
        setBaselineY(baselineY);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	3364      	adds	r3, #100	@ 0x64
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	4798      	blx	r3
    }
 800e700:	bf00      	nop
 800e702:	3708      	adds	r7, #8
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	3328      	adds	r3, #40	@ 0x28
    }
 800e714:	4618      	mov	r0, r3
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e728:	2300      	movs	r3, #0
    }
 800e72a:	4618      	mov	r0, r3
 800e72c:	370c      	adds	r7, #12
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr

0800e736 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800e736:	b580      	push	{r7, lr}
 800e738:	b084      	sub	sp, #16
 800e73a:	af02      	add	r7, sp, #8
 800e73c:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f04f 33ff 	mov.w	r3, #4294967295
 800e744:	9300      	str	r3, [sp, #0]
 800e746:	f04f 33ff 	mov.w	r3, #4294967295
 800e74a:	2200      	movs	r2, #0
 800e74c:	2100      	movs	r1, #0
 800e74e:	f7ff fbfd 	bl	800df4c <_ZN8touchgfx4RectC1Essss>
              text(0)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2200      	movs	r2, #0
 800e756:	609a      	str	r2, [r3, #8]
        {
        }
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4618      	mov	r0, r3
 800e75c:	3708      	adds	r7, #8
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
	...

0800e764 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	4a08      	ldr	r2, [pc, #32]	@ (800e790 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	601a      	str	r2, [r3, #0]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	3328      	adds	r3, #40	@ 0x28
 800e776:	4618      	mov	r0, r3
 800e778:	f7fe fd36 	bl	800d1e8 <_ZN8touchgfx9TypedTextD1Ev>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4618      	mov	r0, r3
 800e780:	f7ff fe86 	bl	800e490 <_ZN8touchgfx6WidgetD1Ev>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4618      	mov	r0, r3
 800e788:	3708      	adds	r7, #8
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	0802c114 	.word	0x0802c114

0800e794 <_ZN8touchgfx8TextAreaD0Ev>:
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7ff ffe1 	bl	800e764 <_ZN8touchgfx8TextAreaD1Ev>
 800e7a2:	2148      	movs	r1, #72	@ 0x48
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f01a fbc2 	bl	8028f2e <_ZdlPvj>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    {
    }

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7ff fc44 	bl	800e04c <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800e7c4:	bf00      	nop
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7ff ffad 	bl	800e736 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	4a05      	ldr	r2, [pc, #20]	@ (800e804 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	601a      	str	r2, [r3, #0]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7ff ffb5 	bl	800e764 <_ZN8touchgfx8TextAreaD1Ev>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	0802c280 	.word	0x0802c280

0800e808 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7ff ffe7 	bl	800e7e4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800e816:	2148      	movs	r1, #72	@ 0x48
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f01a fb88 	bl	8028f2e <_ZdlPvj>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4618      	mov	r0, r3
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 800e834:	4618      	mov	r0, r3
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
     *
     * @param  dm The new display mode.
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	460b      	mov	r3, r1
 800e84a:	70fb      	strb	r3, [r7, #3]
    {
        displayMode = dm;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	78fa      	ldrb	r2, [r7, #3]
 800e850:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    }
 800e854:	bf00      	nop
 800e856:	370c      	adds	r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	4618      	mov	r0, r3
 800e86c:	2326      	movs	r3, #38	@ 0x26
 800e86e:	461a      	mov	r2, r3
 800e870:	2100      	movs	r1, #0
 800e872:	f01a ff42 	bl	80296fa <memset>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	4618      	mov	r0, r3
 800e87a:	f7ff fdf7 	bl	800e46c <_ZN8touchgfx6WidgetC1Ev>
 800e87e:	4a0a      	ldr	r2, [pc, #40]	@ (800e8a8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	601a      	str	r2, [r3, #0]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	629a      	str	r2, [r3, #40]	@ 0x28
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2101      	movs	r1, #1
 800e896:	4618      	mov	r0, r3
 800e898:	f7ff fcc4 	bl	800e224 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3708      	adds	r7, #8
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	0802bdf4 	.word	0x0802bdf4

0800e8ac <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	4a05      	ldr	r2, [pc, #20]	@ (800e8cc <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	601a      	str	r2, [r3, #0]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff fde7 	bl	800e490 <_ZN8touchgfx6WidgetD1Ev>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	0802bdf4 	.word	0x0802bdf4

0800e8d0 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f7ff ffe7 	bl	800e8ac <_ZN8touchgfx14AbstractButtonD1Ev>
 800e8de:	2130      	movs	r1, #48	@ 0x30
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f01a fb24 	bl	8028f2e <_ZdlPvj>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3708      	adds	r7, #8
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7ff ffb0 	bl	800e860 <_ZN8touchgfx14AbstractButtonC1Ev>
 800e900:	4a0c      	ldr	r2, [pc, #48]	@ (800e934 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	332e      	adds	r3, #46	@ 0x2e
 800e90a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e90e:	4618      	mov	r0, r3
 800e910:	f7ff fb3c 	bl	800df8c <_ZN8touchgfx6BitmapC1Et>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	3330      	adds	r3, #48	@ 0x30
 800e918:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7ff fb35 	bl	800df8c <_ZN8touchgfx6BitmapC1Et>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	22ff      	movs	r2, #255	@ 0xff
 800e926:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	4618      	mov	r0, r3
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	0802c20c 	.word	0x0802c20c

0800e938 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	889a      	ldrh	r2, [r3, #4]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	809a      	strh	r2, [r3, #4]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4618      	mov	r0, r3
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	3334      	adds	r3, #52	@ 0x34
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	4618      	mov	r0, r3
 800e96a:	f7ff ffe5 	bl	800e938 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 f820 	bl	800e9b4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800e974:	bf00      	nop
 800e976:	3708      	adds	r7, #8
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	683a      	ldr	r2, [r7, #0]
 800e98a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800e98c:	bf00      	nop
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	683a      	ldr	r2, [r7, #0]
 800e9a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
 800e9a8:	bf00      	nop
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800e9b4:	b590      	push	{r4, r7, lr}
 800e9b6:	b08b      	sub	sp, #44	@ 0x2c
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	3334      	adds	r3, #52	@ 0x34
 800e9c0:	61fb      	str	r3, [r7, #28]
        return typedTextId < numberOfTypedTexts;
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	889a      	ldrh	r2, [r3, #4]
 800e9c6:	4b46      	ldr	r3, [pc, #280]	@ (800eae0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800e9c8:	881b      	ldrh	r3, [r3, #0]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	bf34      	ite	cc
 800e9ce:	2301      	movcc	r3, #1
 800e9d0:	2300      	movcs	r3, #0
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d07a      	beq.n	800eace <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11a>
        {
            const Font* f = typedText.getFont();
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	3334      	adds	r3, #52	@ 0x34
 800e9dc:	613b      	str	r3, [r7, #16]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e9de:	4b41      	ldr	r3, [pc, #260]	@ (800eae4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d105      	bne.n	800e9f2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x3e>
 800e9e6:	4b40      	ldr	r3, [pc, #256]	@ (800eae8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 800e9e8:	4a40      	ldr	r2, [pc, #256]	@ (800eaec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 800e9ea:	216c      	movs	r1, #108	@ 0x6c
 800e9ec:	4840      	ldr	r0, [pc, #256]	@ (800eaf0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800e9ee:	f01a fc6b 	bl	80292c8 <__assert_func>
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	60fb      	str	r3, [r7, #12]
        return typedTextId < numberOfTypedTexts;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	889a      	ldrh	r2, [r3, #4]
 800e9fa:	4b39      	ldr	r3, [pc, #228]	@ (800eae0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800e9fc:	881b      	ldrh	r3, [r3, #0]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	bf34      	ite	cc
 800ea02:	2301      	movcc	r3, #1
 800ea04:	2300      	movcs	r3, #0
 800ea06:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d105      	bne.n	800ea18 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
 800ea0c:	4b39      	ldr	r3, [pc, #228]	@ (800eaf4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 800ea0e:	4a37      	ldr	r2, [pc, #220]	@ (800eaec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 800ea10:	216d      	movs	r1, #109	@ 0x6d
 800ea12:	4837      	ldr	r0, [pc, #220]	@ (800eaf0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800ea14:	f01a fc58 	bl	80292c8 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800ea18:	4b37      	ldr	r3, [pc, #220]	@ (800eaf8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x144>)
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	4b31      	ldr	r3, [pc, #196]	@ (800eae4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800ea1e:	6819      	ldr	r1, [r3, #0]
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	889b      	ldrh	r3, [r3, #4]
 800ea24:	005b      	lsls	r3, r3, #1
 800ea26:	440b      	add	r3, r1
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	4413      	add	r3, r2
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	627b      	str	r3, [r7, #36]	@ 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	3334      	adds	r3, #52	@ 0x34
 800ea36:	61bb      	str	r3, [r7, #24]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800ea38:	4b2a      	ldr	r3, [pc, #168]	@ (800eae4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d105      	bne.n	800ea4c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>
 800ea40:	4b29      	ldr	r3, [pc, #164]	@ (800eae8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 800ea42:	4a2e      	ldr	r2, [pc, #184]	@ (800eafc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x148>)
 800ea44:	2160      	movs	r1, #96	@ 0x60
 800ea46:	482a      	ldr	r0, [pc, #168]	@ (800eaf0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800ea48:	f01a fc3e 	bl	80292c8 <__assert_func>
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	617b      	str	r3, [r7, #20]
        return typedTextId < numberOfTypedTexts;
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	889a      	ldrh	r2, [r3, #4]
 800ea54:	4b22      	ldr	r3, [pc, #136]	@ (800eae0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 800ea56:	881b      	ldrh	r3, [r3, #0]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	bf34      	ite	cc
 800ea5c:	2301      	movcc	r3, #1
 800ea5e:	2300      	movcs	r3, #0
 800ea60:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d105      	bne.n	800ea72 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xbe>
 800ea66:	4b23      	ldr	r3, [pc, #140]	@ (800eaf4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 800ea68:	4a24      	ldr	r2, [pc, #144]	@ (800eafc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x148>)
 800ea6a:	2161      	movs	r1, #97	@ 0x61
 800ea6c:	4820      	ldr	r0, [pc, #128]	@ (800eaf0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 800ea6e:	f01a fc2b 	bl	80292c8 <__assert_func>
        return texts->getText(typedTextId);
 800ea72:	4b23      	ldr	r3, [pc, #140]	@ (800eb00 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x14c>)
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	889b      	ldrh	r3, [r3, #4]
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	f000 fe31 	bl	800f6e4 <_ZNK8touchgfx5Texts7getTextEt>
 800ea82:	4603      	mov	r3, r0
 800ea84:	bf00      	nop
 800ea86:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800ea88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	3338      	adds	r3, #56	@ 0x38
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea92:	4798      	blx	r3
 800ea94:	4603      	mov	r3, r0
 800ea96:	461c      	mov	r4, r3
 800ea98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3348      	adds	r3, #72	@ 0x48
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	6a39      	ldr	r1, [r7, #32]
 800eaa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eaa4:	4798      	blx	r3
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	fb14 f303 	smulbb	r3, r4, r3
 800eaac:	b29c      	uxth	r4, r3
 800eaae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	3324      	adds	r3, #36	@ 0x24
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	6a39      	ldr	r1, [r7, #32]
 800eab8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eaba:	4798      	blx	r3
 800eabc:	4603      	mov	r3, r0
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	4423      	add	r3, r4
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	b21a      	sxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 800eacc:	e003      	b.n	800ead6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x122>
            textHeightIncludingSpacing = 0;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    }
 800ead6:	bf00      	nop
 800ead8:	372c      	adds	r7, #44	@ 0x2c
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd90      	pop	{r4, r7, pc}
 800eade:	bf00      	nop
 800eae0:	24006654 	.word	0x24006654
 800eae4:	24006650 	.word	0x24006650
 800eae8:	0802a78c 	.word	0x0802a78c
 800eaec:	0802a7d0 	.word	0x0802a7d0
 800eaf0:	0802a80c 	.word	0x0802a80c
 800eaf4:	0802a850 	.word	0x0802a850
 800eaf8:	24006658 	.word	0x24006658
 800eafc:	0802a890 	.word	0x0802a890
 800eb00:	2400665c 	.word	0x2400665c

0800eb04 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	8812      	ldrh	r2, [r2, #0]
 800eb16:	869a      	strh	r2, [r3, #52]	@ 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	68b9      	ldr	r1, [r7, #8]
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f006 fb66 	bl	80151f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800eb24:	bf00      	nop
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <_ZN8touchgfx4ViewI13mainPresenterED1Ev>:
class View : public Screen
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	4a05      	ldr	r2, [pc, #20]	@ (800eb4c <_ZN8touchgfx4ViewI13mainPresenterED1Ev+0x20>)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	601a      	str	r2, [r3, #0]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7ff fc2d 	bl	800e39c <_ZN8touchgfx6ScreenD1Ev>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	0802b200 	.word	0x0802b200

0800eb50 <_ZN8touchgfx4ViewI13mainPresenterED0Ev>:
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f7ff ffe7 	bl	800eb2c <_ZN8touchgfx4ViewI13mainPresenterED1Ev>
 800eb5e:	2140      	movs	r1, #64	@ 0x40
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f01a f9e4 	bl	8028f2e <_ZdlPvj>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	4a05      	ldr	r2, [pc, #20]	@ (800eb90 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	601a      	str	r2, [r3, #0]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7ff fc85 	bl	800e490 <_ZN8touchgfx6WidgetD1Ev>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	0802c1a4 	.word	0x0802c1a4

0800eb94 <_ZN8touchgfx3BoxD0Ev>:
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f7ff ffe7 	bl	800eb70 <_ZN8touchgfx3BoxD1Ev>
 800eba2:	212c      	movs	r1, #44	@ 0x2c
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f01a f9c2 	bl	8028f2e <_ZdlPvj>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4618      	mov	r0, r3
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <_ZN8touchgfx13AbstractClockD1Ev>:
 * Superclass of clock widgets. Allows the hour, minute and second of the clock to be set and
 * read.
 *
 * @see AnalogClock, DigitalClock
 */
class AbstractClock : public Container
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	4a05      	ldr	r2, [pc, #20]	@ (800ebd4 <_ZN8touchgfx13AbstractClockD1Ev+0x20>)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	601a      	str	r2, [r3, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7ff fbc7 	bl	800e358 <_ZN8touchgfx9ContainerD1Ev>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	0802bb5c 	.word	0x0802bb5c

0800ebd8 <_ZN8touchgfx13AbstractClockD0Ev>:
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f7ff ffe7 	bl	800ebb4 <_ZN8touchgfx13AbstractClockD1Ev>
 800ebe6:	2130      	movs	r1, #48	@ 0x30
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f01a f9a0 	bl	8028f2e <_ZdlPvj>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	4a05      	ldr	r2, [pc, #20]	@ (800ec18 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	601a      	str	r2, [r3, #0]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7ff fdeb 	bl	800e7e4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4618      	mov	r0, r3
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	0802b234 	.word	0x0802b234

0800ec1c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f7ff ffe7 	bl	800ebf8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ec2a:	214c      	movs	r1, #76	@ 0x4c
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f01a f97e 	bl	8028f2e <_ZdlPvj>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4618      	mov	r0, r3
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <_ZN8touchgfx12DigitalClockD1Ev>:
class DigitalClock : public AbstractClock
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	4a08      	ldr	r2, [pc, #32]	@ (800ec68 <_ZN8touchgfx12DigitalClockD1Ev+0x2c>)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	3334      	adds	r3, #52	@ 0x34
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff ffd2 	bl	800ebf8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7ff ffac 	bl	800ebb4 <_ZN8touchgfx13AbstractClockD1Ev>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3708      	adds	r7, #8
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	0802b9b4 	.word	0x0802b9b4

0800ec6c <_ZN8touchgfx12DigitalClockD0Ev>:
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7ff ffe1 	bl	800ec3c <_ZN8touchgfx12DigitalClockD1Ev>
 800ec7a:	2198      	movs	r1, #152	@ 0x98
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f01a f956 	bl	8028f2e <_ZdlPvj>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4618      	mov	r0, r3
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	4a05      	ldr	r2, [pc, #20]	@ (800ecac <_ZN8touchgfx5ImageD1Ev+0x20>)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	601a      	str	r2, [r3, #0]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7ff fbf7 	bl	800e490 <_ZN8touchgfx6WidgetD1Ev>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4618      	mov	r0, r3
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	0802c310 	.word	0x0802c310

0800ecb0 <_ZN8touchgfx5ImageD0Ev>:
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff ffe7 	bl	800ec8c <_ZN8touchgfx5ImageD1Ev>
 800ecbe:	212c      	movs	r1, #44	@ 0x2c
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f01a f934 	bl	8028f2e <_ZdlPvj>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	4a05      	ldr	r2, [pc, #20]	@ (800ecf0 <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	601a      	str	r2, [r3, #0]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff ffd3 	bl	800ec8c <_ZN8touchgfx5ImageD1Ev>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4618      	mov	r0, r3
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	0802bf8c 	.word	0x0802bf8c

0800ecf4 <_ZN8touchgfx13TextureMapperD0Ev>:
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f7ff ffe7 	bl	800ecd0 <_ZN8touchgfx13TextureMapperD1Ev>
 800ed02:	2190      	movs	r1, #144	@ 0x90
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f01a f912 	bl	8028f2e <_ZdlPvj>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <_ZN8touchgfx22AnimationTextureMapperD1Ev>:
 * A TextureMapper with animation capabilities. Note that the angles of the TextureMapper is
 * normalized to lie in the range [0; 2PI[ at the beginning at the animation. The end
 * angles should be relative to this and are limited to values in the range [-32.7;
 * 32.7].
 */
class AnimationTextureMapper : public TextureMapper
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	4a05      	ldr	r2, [pc, #20]	@ (800ed34 <_ZN8touchgfx22AnimationTextureMapperD1Ev+0x20>)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7ff ffd3 	bl	800ecd0 <_ZN8touchgfx13TextureMapperD1Ev>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	0802be64 	.word	0x0802be64

0800ed38 <_ZN8touchgfx22AnimationTextureMapperD0Ev>:
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7ff ffe7 	bl	800ed14 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800ed46:	21ec      	movs	r1, #236	@ 0xec
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f01a f8f0 	bl	8028f2e <_ZdlPvj>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4618      	mov	r0, r3
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <_ZN8touchgfx11AnalogClockD1Ev>:
 * point of each hand as well as the global rotation point of the clock. You can
 * customize the behavior of the AnalogClock in respect to animations and relations
 * between the hands e.g. if the hour hand should move gradually towards the next hour
 * as the minute hand progresses (setHourHandMinuteCorrection())
 */
class AnalogClock : public AbstractClock
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	4a10      	ldr	r2, [pc, #64]	@ (800eda4 <_ZN8touchgfx11AnalogClockD1Ev+0x4c>)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	601a      	str	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7ff ffd1 	bl	800ed14 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7ff ffcb 	bl	800ed14 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	335c      	adds	r3, #92	@ 0x5c
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7ff ffc6 	bl	800ed14 <_ZN8touchgfx22AnimationTextureMapperD1Ev>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	3330      	adds	r3, #48	@ 0x30
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7ff ff7d 	bl	800ec8c <_ZN8touchgfx5ImageD1Ev>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7ff ff0d 	bl	800ebb4 <_ZN8touchgfx13AbstractClockD1Ev>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	0802ba74 	.word	0x0802ba74

0800eda8 <_ZN8touchgfx11AnalogClockD0Ev>:
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f7ff ffd1 	bl	800ed58 <_ZN8touchgfx11AnalogClockD1Ev>
 800edb6:	f44f 714c 	mov.w	r1, #816	@ 0x330
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f01a f8b7 	bl	8028f2e <_ZdlPvj>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4618      	mov	r0, r3
 800edc4:	3708      	adds	r7, #8
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
	...

0800edcc <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	4a05      	ldr	r2, [pc, #20]	@ (800edec <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	601a      	str	r2, [r3, #0]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4618      	mov	r0, r3
 800edde:	f7ff fd65 	bl	800e8ac <_ZN8touchgfx14AbstractButtonD1Ev>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4618      	mov	r0, r3
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	0802c20c 	.word	0x0802c20c

0800edf0 <_ZN8touchgfx6ButtonD0Ev>:
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f7ff ffe7 	bl	800edcc <_ZN8touchgfx6ButtonD1Ev>
 800edfe:	2134      	movs	r1, #52	@ 0x34
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f01a f894 	bl	8028f2e <_ZdlPvj>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	4a08      	ldr	r2, [pc, #32]	@ (800ee3c <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	601a      	str	r2, [r3, #0]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	3334      	adds	r3, #52	@ 0x34
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fe f9e0 	bl	800d1e8 <_ZN8touchgfx9TypedTextD1Ev>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7ff ffce 	bl	800edcc <_ZN8touchgfx6ButtonD1Ev>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	4618      	mov	r0, r3
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	0802c37c 	.word	0x0802c37c

0800ee40 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7ff ffe1 	bl	800ee10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800ee4e:	2148      	movs	r1, #72	@ 0x48
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f01a f86c 	bl	8028f2e <_ZdlPvj>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7ff fd40 	bl	800e8f0 <_ZN8touchgfx6ButtonC1Ev>
 800ee70:	4a07      	ldr	r2, [pc, #28]	@ (800ee90 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	601a      	str	r2, [r3, #0]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	3334      	adds	r3, #52	@ 0x34
 800ee7a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff f884 	bl	800df8c <_ZN8touchgfx6BitmapC1Et>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	4618      	mov	r0, r3
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	0802c0a0 	.word	0x0802c0a0

0800ee94 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	4a05      	ldr	r2, [pc, #20]	@ (800eeb4 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	601a      	str	r2, [r3, #0]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7ff ff91 	bl	800edcc <_ZN8touchgfx6ButtonD1Ev>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4618      	mov	r0, r3
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	0802c0a0 	.word	0x0802c0a0

0800eeb8 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7ff ffe7 	bl	800ee94 <_ZN8touchgfx12ToggleButtonD1Ev>
 800eec6:	2138      	movs	r1, #56	@ 0x38
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f01a f830 	bl	8028f2e <_ZdlPvj>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	4618      	mov	r0, r3
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <_ZN12mainViewBaseC1Ev>:
#include <gui_generated/main_screen/mainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

mainViewBase::mainViewBase()
 800eed8:	b590      	push	{r4, r7, lr}
 800eeda:	b097      	sub	sp, #92	@ 0x5c
 800eedc:	af02      	add	r7, sp, #8
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4618      	mov	r0, r3
 800eee4:	f000 fa44 	bl	800f370 <_ZN8touchgfx4ViewI13mainPresenterEC1Ev>
 800eee8:	4ae2      	ldr	r2, [pc, #904]	@ (800f274 <_ZN12mainViewBaseC1Ev+0x39c>)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	601a      	str	r2, [r3, #0]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	3340      	adds	r3, #64	@ 0x40
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7ff faee 	bl	800e4d4 <_ZN8touchgfx3BoxC1Ev>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	336c      	adds	r3, #108	@ 0x6c
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7ff fae9 	bl	800e4d4 <_ZN8touchgfx3BoxC1Ev>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	3398      	adds	r3, #152	@ 0x98
 800ef06:	4618      	mov	r0, r3
 800ef08:	f003 f8ac 	bl	8012064 <_ZN8touchgfx12DigitalClockC1Ev>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800ef12:	4618      	mov	r0, r3
 800ef14:	f003 fc1a 	bl	801274c <_ZN8touchgfx11AnalogClockC1Ev>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f503 638c 	add.w	r3, r3, #1120	@ 0x460
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f006 fbae 	bl	8015680 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7ff ff98 	bl	800ee60 <_ZN8touchgfx12ToggleButtonC1Ev>
{
    __background.setPosition(0, 0, 800, 480);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800ef36:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800ef3a:	9300      	str	r3, [sp, #0]
 800ef3c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800ef40:	2200      	movs	r2, #0
 800ef42:	2100      	movs	r1, #0
 800ef44:	f7ff f8a0 	bl	800e088 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800ef4e:	2300      	movs	r3, #0
 800ef50:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef54:	2300      	movs	r3, #0
 800ef56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ef60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ef64:	041a      	lsls	r2, r3, #16
 800ef66:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800ef6a:	021b      	lsls	r3, r3, #8
 800ef6c:	431a      	orrs	r2, r3
 800ef6e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800ef72:	4313      	orrs	r3, r2
 800ef74:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ef78:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ef7c:	4611      	mov	r1, r2
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fe ffbe 	bl	800df00 <_ZN8touchgfx9colortypeC1Em>
 800ef84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef86:	4619      	mov	r1, r3
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f7ff fac7 	bl	800e51c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	3340      	adds	r3, #64	@ 0x40
 800ef94:	4619      	mov	r1, r3
 800ef96:	4610      	mov	r0, r2
 800ef98:	f7ff fa58 	bl	800e44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 800, 480);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800efa2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800efac:	2200      	movs	r2, #0
 800efae:	2100      	movs	r1, #0
 800efb0:	f7ff f86a 	bl	800e088 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(22, 22, 22));
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800efba:	2316      	movs	r3, #22
 800efbc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800efc0:	2316      	movs	r3, #22
 800efc2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800efc6:	2316      	movs	r3, #22
 800efc8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800efcc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800efd0:	041a      	lsls	r2, r3, #16
 800efd2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800efd6:	021b      	lsls	r3, r3, #8
 800efd8:	431a      	orrs	r2, r3
 800efda:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800efde:	4313      	orrs	r3, r2
 800efe0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800efe4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800efe8:	4611      	mov	r1, r2
 800efea:	4618      	mov	r0, r3
 800efec:	f7fe ff88 	bl	800df00 <_ZN8touchgfx9colortypeC1Em>
 800eff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eff2:	4619      	mov	r1, r3
 800eff4:	4620      	mov	r0, r4
 800eff6:	f7ff fa91 	bl	800e51c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	336c      	adds	r3, #108	@ 0x6c
 800f000:	4619      	mov	r1, r3
 800f002:	4610      	mov	r0, r2
 800f004:	f7ff fa22 	bl	800e44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    digitalClock.setPosition(325, 333, 150, 30);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800f00e:	231e      	movs	r3, #30
 800f010:	9300      	str	r3, [sp, #0]
 800f012:	2396      	movs	r3, #150	@ 0x96
 800f014:	f240 124d 	movw	r2, #333	@ 0x14d
 800f018:	f240 1145 	movw	r1, #325	@ 0x145
 800f01c:	f7ff f834 	bl	800e088 <_ZN8touchgfx8Drawable11setPositionEssss>
    digitalClock.setColor(touchgfx::Color::getColorFromRGB(237, 62, 15));
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800f026:	23ed      	movs	r3, #237	@ 0xed
 800f028:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800f02c:	233e      	movs	r3, #62	@ 0x3e
 800f02e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 800f032:	230f      	movs	r3, #15
 800f034:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800f038:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800f03c:	041a      	lsls	r2, r3, #16
 800f03e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f042:	021b      	lsls	r3, r3, #8
 800f044:	431a      	orrs	r2, r3
 800f046:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800f04a:	4313      	orrs	r3, r2
 800f04c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f050:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f054:	4611      	mov	r1, r2
 800f056:	4618      	mov	r0, r3
 800f058:	f7fe ff52 	bl	800df00 <_ZN8touchgfx9colortypeC1Em>
 800f05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f05e:	4619      	mov	r1, r3
 800f060:	4620      	mov	r0, r4
 800f062:	f002 ff45 	bl	8011ef0 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
    digitalClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YS9N));
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800f06c:	f107 030c 	add.w	r3, r7, #12
 800f070:	2101      	movs	r1, #1
 800f072:	4618      	mov	r0, r3
 800f074:	f7ff fa60 	bl	800e538 <_ZN8touchgfx9TypedTextC1Et>
 800f078:	f107 030c 	add.w	r3, r7, #12
 800f07c:	4619      	mov	r1, r3
 800f07e:	4620      	mov	r0, r4
 800f080:	f002 ff41 	bl	8011f06 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
 800f084:	f107 030c 	add.w	r3, r7, #12
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fe f8ad 	bl	800d1e8 <_ZN8touchgfx9TypedTextD1Ev>
    digitalClock.displayLeadingZeroForHourIndicator(true);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	3398      	adds	r3, #152	@ 0x98
 800f092:	2101      	movs	r1, #1
 800f094:	4618      	mov	r0, r3
 800f096:	f003 f833 	bl	8012100 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    digitalClock.setDisplayMode(touchgfx::DigitalClock::DISPLAY_12_HOUR);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	3398      	adds	r3, #152	@ 0x98
 800f09e:	2102      	movs	r1, #2
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7ff fbcd 	bl	800e840 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>
    digitalClock.setTime12Hour(10, 10, 0, true);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	220a      	movs	r2, #10
 800f0b4:	210a      	movs	r1, #10
 800f0b6:	f003 fbd9 	bl	801286c <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>
    add(digitalClock);
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	3398      	adds	r3, #152	@ 0x98
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	f7ff f9c2 	bl	800e44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    analogClock.setXY(284, 30);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f0ce:	221e      	movs	r2, #30
 800f0d0:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7ff f816 	bl	800e106 <_ZN8touchgfx8Drawable5setXYEss>
    analogClock.setBackground(BITMAP_BLUE_CLOCKS_BACKGROUNDS_CLOCK_STANDARD_BACKGROUND_ID, 116, 116);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800f0e0:	2374      	movs	r3, #116	@ 0x74
 800f0e2:	2274      	movs	r2, #116	@ 0x74
 800f0e4:	2103      	movs	r1, #3
 800f0e6:	f003 f97b 	bl	80123e0 <_ZN8touchgfx11AnalogClock13setBackgroundEtss>
    analogClock.setupHourHand(BITMAP_BLUE_CLOCKS_HANDS_CLOCK_STANDARD_HOUR_HAND_ID, 7, 52);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800f0f0:	2334      	movs	r3, #52	@ 0x34
 800f0f2:	2207      	movs	r2, #7
 800f0f4:	2104      	movs	r1, #4
 800f0f6:	f003 f819 	bl	801212c <_ZN8touchgfx11AnalogClock13setupHourHandEtss>
    analogClock.setHourHandMinuteCorrection(true);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f100:	2101      	movs	r1, #1
 800f102:	4618      	mov	r0, r3
 800f104:	f003 f8bd 	bl	8012282 <_ZN8touchgfx11AnalogClock27setHourHandMinuteCorrectionEb>
    analogClock.setupMinuteHand(BITMAP_BLUE_CLOCKS_HANDS_CLOCK_STANDARD_MINUTE_HAND_ID, 7, 67);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800f10e:	2343      	movs	r3, #67	@ 0x43
 800f110:	2207      	movs	r2, #7
 800f112:	2105      	movs	r1, #5
 800f114:	f003 f816 	bl	8012144 <_ZN8touchgfx11AnalogClock15setupMinuteHandEtss>
    analogClock.setMinuteHandSecondCorrection(false);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f11e:	2100      	movs	r1, #0
 800f120:	4618      	mov	r0, r3
 800f122:	f003 f8c8 	bl	80122b6 <_ZN8touchgfx11AnalogClock29setMinuteHandSecondCorrectionEb>
    analogClock.setupSecondHand(BITMAP_BLUE_CLOCKS_HANDS_CLOCK_STANDARD_SECOND_HAND_ID, 3, 66);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800f12c:	2342      	movs	r3, #66	@ 0x42
 800f12e:	2203      	movs	r2, #3
 800f130:	2106      	movs	r1, #6
 800f132:	f003 f813 	bl	801215c <_ZN8touchgfx11AnalogClock15setupSecondHandEtss>
    analogClock.initializeTime24Hour(10, 10, 0);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800f13c:	2300      	movs	r3, #0
 800f13e:	220a      	movs	r2, #10
 800f140:	210a      	movs	r1, #10
 800f142:	f003 f817 	bl	8012174 <_ZN8touchgfx11AnalogClock20initializeTime24HourEhhh>
    analogClock.setAnimation(10, touchgfx::EasingEquations::cubicEaseInOut);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f14c:	4a4a      	ldr	r2, [pc, #296]	@ (800f278 <_ZN12mainViewBaseC1Ev+0x3a0>)
 800f14e:	210a      	movs	r1, #10
 800f150:	4618      	mov	r0, r3
 800f152:	f003 f874 	bl	801223e <_ZN8touchgfx11AnalogClock12setAnimationEtPFstsstE>
    add(analogClock);
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f15e:	4619      	mov	r1, r3
 800f160:	4610      	mov	r0, r2
 800f162:	f7ff f973 	bl	800e44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    buttonWithLabel1.setXY(568, 314);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f503 638c 	add.w	r3, r3, #1120	@ 0x460
 800f16c:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 800f170:	f44f 710e 	mov.w	r1, #568	@ 0x238
 800f174:	4618      	mov	r0, r3
 800f176:	f7fe ffc6 	bl	800e106 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f503 648c 	add.w	r4, r3, #1120	@ 0x460
 800f180:	f107 0314 	add.w	r3, r7, #20
 800f184:	2101      	movs	r1, #1
 800f186:	4618      	mov	r0, r3
 800f188:	f7fe ff00 	bl	800df8c <_ZN8touchgfx6BitmapC1Et>
 800f18c:	f107 0318 	add.w	r3, r7, #24
 800f190:	2102      	movs	r1, #2
 800f192:	4618      	mov	r0, r3
 800f194:	f7fe fefa 	bl	800df8c <_ZN8touchgfx6BitmapC1Et>
 800f198:	f107 0218 	add.w	r2, r7, #24
 800f19c:	f107 0314 	add.w	r3, r7, #20
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f006 f824 	bl	80151f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_L6CL));
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f503 648c 	add.w	r4, r3, #1120	@ 0x460
 800f1ae:	f107 031c 	add.w	r3, r7, #28
 800f1b2:	2102      	movs	r1, #2
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7ff f9bf 	bl	800e538 <_ZN8touchgfx9TypedTextC1Et>
 800f1ba:	f107 031c 	add.w	r3, r7, #28
 800f1be:	4619      	mov	r1, r3
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f7ff fbc9 	bl	800e958 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 800f1c6:	f107 031c 	add.w	r3, r7, #28
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fe f80c 	bl	800d1e8 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f503 648c 	add.w	r4, r3, #1120	@ 0x460
 800f1d6:	23ff      	movs	r3, #255	@ 0xff
 800f1d8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800f1dc:	23ff      	movs	r3, #255	@ 0xff
 800f1de:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800f1e2:	23ff      	movs	r3, #255	@ 0xff
 800f1e4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800f1e8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800f1ec:	041a      	lsls	r2, r3, #16
 800f1ee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800f1f2:	021b      	lsls	r3, r3, #8
 800f1f4:	431a      	orrs	r2, r3
 800f1f6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f200:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f204:	4611      	mov	r1, r2
 800f206:	4618      	mov	r0, r3
 800f208:	f7fe fe7a 	bl	800df00 <_ZN8touchgfx9colortypeC1Em>
 800f20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f20e:	4619      	mov	r1, r3
 800f210:	4620      	mov	r0, r4
 800f212:	f7ff fbb3 	bl	800e97c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f503 648c 	add.w	r4, r3, #1120	@ 0x460
 800f21c:	23ff      	movs	r3, #255	@ 0xff
 800f21e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f222:	23ff      	movs	r3, #255	@ 0xff
 800f224:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800f228:	23ff      	movs	r3, #255	@ 0xff
 800f22a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800f22e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f232:	041a      	lsls	r2, r3, #16
 800f234:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800f238:	021b      	lsls	r3, r3, #8
 800f23a:	431a      	orrs	r2, r3
 800f23c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800f240:	4313      	orrs	r3, r2
 800f242:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f246:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f24a:	4611      	mov	r1, r2
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fe fe57 	bl	800df00 <_ZN8touchgfx9colortypeC1Em>
 800f252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f254:	4619      	mov	r1, r3
 800f256:	4620      	mov	r0, r4
 800f258:	f7ff fb9e 	bl	800e998 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    add(buttonWithLabel1);
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f503 638c 	add.w	r3, r3, #1120	@ 0x460
 800f264:	4619      	mov	r1, r3
 800f266:	4610      	mov	r0, r2
 800f268:	f7ff f8f0 	bl	800e44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    toggleButton1.setXY(63, 325);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 800f272:	e003      	b.n	800f27c <_ZN12mainViewBaseC1Ev+0x3a4>
 800f274:	0802b1cc 	.word	0x0802b1cc
 800f278:	08018db5 	.word	0x08018db5
 800f27c:	f240 1245 	movw	r2, #325	@ 0x145
 800f280:	213f      	movs	r1, #63	@ 0x3f
 800f282:	4618      	mov	r0, r3
 800f284:	f7fe ff3f 	bl	800e106 <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f503 6495 	add.w	r4, r3, #1192	@ 0x4a8
 800f28e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f292:	2107      	movs	r1, #7
 800f294:	4618      	mov	r0, r3
 800f296:	f7fe fe79 	bl	800df8c <_ZN8touchgfx6BitmapC1Et>
 800f29a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f29e:	2108      	movs	r1, #8
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fe fe73 	bl	800df8c <_ZN8touchgfx6BitmapC1Et>
 800f2a6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f2aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	f7ff fc27 	bl	800eb04 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    add(toggleButton1);
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 800f2be:	4619      	mov	r1, r3
 800f2c0:	4610      	mov	r0, r2
 800f2c2:	f7ff f8c3 	bl	800e44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3754      	adds	r7, #84	@ 0x54
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd90      	pop	{r4, r7, pc}

0800f2d0 <_ZN12mainViewBaseD1Ev>:

mainViewBase::~mainViewBase()
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	4a16      	ldr	r2, [pc, #88]	@ (800f334 <_ZN12mainViewBaseD1Ev+0x64>)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	601a      	str	r2, [r3, #0]
{

}
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff fdd5 	bl	800ee94 <_ZN8touchgfx12ToggleButtonD1Ev>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f503 638c 	add.w	r3, r3, #1120	@ 0x460
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff fd8d 	bl	800ee10 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7ff fd2b 	bl	800ed58 <_ZN8touchgfx11AnalogClockD1Ev>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	3398      	adds	r3, #152	@ 0x98
 800f306:	4618      	mov	r0, r3
 800f308:	f7ff fc98 	bl	800ec3c <_ZN8touchgfx12DigitalClockD1Ev>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	336c      	adds	r3, #108	@ 0x6c
 800f310:	4618      	mov	r0, r3
 800f312:	f7ff fc2d 	bl	800eb70 <_ZN8touchgfx3BoxD1Ev>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	3340      	adds	r3, #64	@ 0x40
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7ff fc28 	bl	800eb70 <_ZN8touchgfx3BoxD1Ev>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4618      	mov	r0, r3
 800f324:	f7ff fc02 	bl	800eb2c <_ZN8touchgfx4ViewI13mainPresenterED1Ev>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4618      	mov	r0, r3
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	0802b1cc 	.word	0x0802b1cc

0800f338 <_ZN12mainViewBaseD0Ev>:
mainViewBase::~mainViewBase()
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
}
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f7ff ffc5 	bl	800f2d0 <_ZN12mainViewBaseD1Ev>
 800f346:	f44f 619c 	mov.w	r1, #1248	@ 0x4e0
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f019 fdef 	bl	8028f2e <_ZdlPvj>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	4618      	mov	r0, r3
 800f354:	3708      	adds	r7, #8
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}

0800f35a <_ZN12mainViewBase11setupScreenEv>:

void mainViewBase::setupScreen()
{
 800f35a:	b480      	push	{r7}
 800f35c:	b083      	sub	sp, #12
 800f35e:	af00      	add	r7, sp, #0
 800f360:	6078      	str	r0, [r7, #4]

}
 800f362:	bf00      	nop
 800f364:	370c      	adds	r7, #12
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
	...

0800f370 <_ZN8touchgfx4ViewI13mainPresenterEC1Ev>:
    View()
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f009 fb68 	bl	8018a50 <_ZN8touchgfx6ScreenC1Ev>
 800f380:	4a05      	ldr	r2, [pc, #20]	@ (800f398 <_ZN8touchgfx4ViewI13mainPresenterEC1Ev+0x28>)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	601a      	str	r2, [r3, #0]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2200      	movs	r2, #0
 800f38a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4618      	mov	r0, r3
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	0802b200 	.word	0x0802b200

0800f39c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800f39c:	b480      	push	{r7}
 800f39e:	af00      	add	r7, sp, #0
    return bitmap_database;
 800f3a0:	4b02      	ldr	r3, [pc, #8]	@ (800f3ac <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr
 800f3ac:	0802b324 	.word	0x0802b324

0800f3b0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800f3b4:	230d      	movs	r3, #13
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800f3c0:	b480      	push	{r7}
 800f3c2:	b085      	sub	sp, #20
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	607a      	str	r2, [r7, #4]
 800f3cc:	817b      	strh	r3, [r7, #10]
        return 0;
 800f3ce:	2300      	movs	r3, #0
    }
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3714      	adds	r7, #20
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
        return 0;
 800f3e4:	2300      	movs	r3, #0
    }
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	370c      	adds	r7, #12
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr

0800f3f2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f3f2:	b480      	push	{r7}
 800f3f4:	b083      	sub	sp, #12
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
        return 0;
 800f3fa:	2300      	movs	r3, #0
    }
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800f408:	b480      	push	{r7}
 800f40a:	b085      	sub	sp, #20
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	4613      	mov	r3, r2
 800f414:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800f416:	4a07      	ldr	r2, [pc, #28]	@ (800f434 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	6013      	str	r3, [r2, #0]
        fonts = f;
 800f41c:	4a06      	ldr	r2, [pc, #24]	@ (800f438 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800f422:	4a06      	ldr	r2, [pc, #24]	@ (800f43c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800f424:	88fb      	ldrh	r3, [r7, #6]
 800f426:	8013      	strh	r3, [r2, #0]
    }
 800f428:	bf00      	nop
 800f42a:	3714      	adds	r7, #20
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	24006650 	.word	0x24006650
 800f438:	24006658 	.word	0x24006658
 800f43c:	24006654 	.word	0x24006654

0800f440 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f440:	b40e      	push	{r1, r2, r3}
 800f442:	b580      	push	{r7, lr}
 800f444:	b085      	sub	sp, #20
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800f44a:	f107 0320 	add.w	r3, r7, #32
 800f44e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	69fa      	ldr	r2, [r7, #28]
 800f454:	2100      	movs	r1, #0
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f008 ff0e 	bl	8018278 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f45c:	4603      	mov	r3, r0
 800f45e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f460:	89fb      	ldrh	r3, [r7, #14]
}
 800f462:	4618      	mov	r0, r3
 800f464:	3714      	adds	r7, #20
 800f466:	46bd      	mov	sp, r7
 800f468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f46c:	b003      	add	sp, #12
 800f46e:	4770      	bx	lr

0800f470 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f470:	b40c      	push	{r2, r3}
 800f472:	b580      	push	{r7, lr}
 800f474:	b084      	sub	sp, #16
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	460b      	mov	r3, r1
 800f47c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800f47e:	f107 031c 	add.w	r3, r7, #28
 800f482:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800f484:	78f9      	ldrb	r1, [r7, #3]
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	69ba      	ldr	r2, [r7, #24]
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f008 fef4 	bl	8018278 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f490:	4603      	mov	r3, r0
 800f492:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f494:	89fb      	ldrh	r3, [r7, #14]
}
 800f496:	4618      	mov	r0, r3
 800f498:	3710      	adds	r7, #16
 800f49a:	46bd      	mov	sp, r7
 800f49c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f4a0:	b002      	add	sp, #8
 800f4a2:	4770      	bx	lr

0800f4a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b08a      	sub	sp, #40	@ 0x28
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d016      	beq.n	800f4e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	3322      	adds	r3, #34	@ 0x22
 800f4bc:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800f4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c0:	8adb      	ldrh	r3, [r3, #22]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d105      	bne.n	800f4d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800f4c6:	4b43      	ldr	r3, [pc, #268]	@ (800f5d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f4c8:	4a43      	ldr	r2, [pc, #268]	@ (800f5d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f4ca:	21c5      	movs	r1, #197	@ 0xc5
 800f4cc:	4843      	ldr	r0, [pc, #268]	@ (800f5dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f4ce:	f019 fefb 	bl	80292c8 <__assert_func>
            return buffer[pos];
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d4:	8a9b      	ldrh	r3, [r3, #20]
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d001      	beq.n	800f4e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e000      	b.n	800f4e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d06a      	beq.n	800f5c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f00a fa2b 	bl	8019948 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	3322      	adds	r3, #34	@ 0x22
 800f4f6:	623b      	str	r3, [r7, #32]
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800f4fc:	6a3b      	ldr	r3, [r7, #32]
 800f4fe:	8adb      	ldrh	r3, [r3, #22]
 800f500:	8bfa      	ldrh	r2, [r7, #30]
 800f502:	429a      	cmp	r2, r3
 800f504:	d305      	bcc.n	800f512 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800f506:	4b36      	ldr	r3, [pc, #216]	@ (800f5e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800f508:	4a36      	ldr	r2, [pc, #216]	@ (800f5e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800f50a:	21cb      	movs	r1, #203	@ 0xcb
 800f50c:	4833      	ldr	r0, [pc, #204]	@ (800f5dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f50e:	f019 fedb 	bl	80292c8 <__assert_func>
            const uint16_t index = pos + offset;
 800f512:	6a3b      	ldr	r3, [r7, #32]
 800f514:	8a9a      	ldrh	r2, [r3, #20]
 800f516:	8bfb      	ldrh	r3, [r7, #30]
 800f518:	4413      	add	r3, r2
 800f51a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800f51c:	8bbb      	ldrh	r3, [r7, #28]
 800f51e:	2b09      	cmp	r3, #9
 800f520:	d801      	bhi.n	800f526 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800f522:	8bbb      	ldrh	r3, [r7, #28]
 800f524:	e001      	b.n	800f52a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800f526:	8bbb      	ldrh	r3, [r7, #28]
 800f528:	3b0a      	subs	r3, #10
 800f52a:	6a3a      	ldr	r2, [r7, #32]
 800f52c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f530:	f640 123f 	movw	r2, #2367	@ 0x93f
 800f534:	4293      	cmp	r3, r2
 800f536:	bf0c      	ite	eq
 800f538:	2301      	moveq	r3, #1
 800f53a:	2300      	movne	r3, #0
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d03f      	beq.n	800f5c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	3322      	adds	r3, #34	@ 0x22
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	3222      	adds	r2, #34	@ 0x22
 800f54a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800f54c:	68ba      	ldr	r2, [r7, #8]
 800f54e:	8ad2      	ldrh	r2, [r2, #22]
 800f550:	2a00      	cmp	r2, #0
 800f552:	d105      	bne.n	800f560 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800f554:	4b1f      	ldr	r3, [pc, #124]	@ (800f5d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f556:	4a20      	ldr	r2, [pc, #128]	@ (800f5d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f558:	21c5      	movs	r1, #197	@ 0xc5
 800f55a:	4820      	ldr	r0, [pc, #128]	@ (800f5dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f55c:	f019 feb4 	bl	80292c8 <__assert_func>
            return buffer[pos];
 800f560:	68ba      	ldr	r2, [r7, #8]
 800f562:	8a92      	ldrh	r2, [r2, #20]
 800f564:	4611      	mov	r1, r2
 800f566:	68ba      	ldr	r2, [r7, #8]
 800f568:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800f56c:	613b      	str	r3, [r7, #16]
 800f56e:	4613      	mov	r3, r2
 800f570:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	8adb      	ldrh	r3, [r3, #22]
 800f576:	2b01      	cmp	r3, #1
 800f578:	d806      	bhi.n	800f588 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800f57a:	4b1b      	ldr	r3, [pc, #108]	@ (800f5e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800f57c:	4a1b      	ldr	r2, [pc, #108]	@ (800f5ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800f57e:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800f582:	4816      	ldr	r0, [pc, #88]	@ (800f5dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f584:	f019 fea0 	bl	80292c8 <__assert_func>
            const uint16_t index = pos + 1;
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	8a9b      	ldrh	r3, [r3, #20]
 800f58c:	3301      	adds	r3, #1
 800f58e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800f590:	89bb      	ldrh	r3, [r7, #12]
 800f592:	2b09      	cmp	r3, #9
 800f594:	d801      	bhi.n	800f59a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800f596:	89bb      	ldrh	r3, [r7, #12]
 800f598:	e000      	b.n	800f59c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800f59a:	2300      	movs	r3, #0
 800f59c:	693a      	ldr	r2, [r7, #16]
 800f59e:	89f9      	ldrh	r1, [r7, #14]
 800f5a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800f5a4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	3322      	adds	r3, #34	@ 0x22
 800f5aa:	61bb      	str	r3, [r7, #24]
 800f5ac:	f640 133f 	movw	r3, #2367	@ 0x93f
 800f5b0:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	8a9b      	ldrh	r3, [r3, #20]
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	8afa      	ldrh	r2, [r7, #22]
 800f5bc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800f5c0:	bf00      	nop
        }
    }
    return getNextChar();
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f00a f8c2 	bl	801974c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f5c8:	4603      	mov	r3, r0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3728      	adds	r7, #40	@ 0x28
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	0802a8dc 	.word	0x0802a8dc
 800f5d8:	0802a8e8 	.word	0x0802a8e8
 800f5dc:	0802a994 	.word	0x0802a994
 800f5e0:	0802a9dc 	.word	0x0802a9dc
 800f5e4:	0802a9ec 	.word	0x0802a9ec
 800f5e8:	0802aac0 	.word	0x0802aac0
 800f5ec:	0802aacc 	.word	0x0802aacc

0800f5f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f00a f870 	bl	80196de <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800f5fe:	bf00      	nop
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b088      	sub	sp, #32
 800f60a:	af02      	add	r7, sp, #8
 800f60c:	60f8      	str	r0, [r7, #12]
 800f60e:	1d38      	adds	r0, r7, #4
 800f610:	e880 0006 	stmia.w	r0, {r1, r2}
 800f614:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800f616:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f61a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800f61c:	1d39      	adds	r1, r7, #4
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	9301      	str	r3, [sp, #4]
 800f622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f624:	9300      	str	r3, [sp, #0]
 800f626:	6a3b      	ldr	r3, [r7, #32]
 800f628:	683a      	ldr	r2, [r7, #0]
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f007 f8d8 	bl	80167e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800f630:	bf00      	nop
 800f632:	3718      	adds	r7, #24
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800f638:	b590      	push	{r4, r7, lr}
 800f63a:	b085      	sub	sp, #20
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	4603      	mov	r3, r0
 800f640:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800f642:	2300      	movs	r3, #0
 800f644:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800f646:	88fb      	ldrh	r3, [r7, #6]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d127      	bne.n	800f69c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800f64c:	88fb      	ldrh	r3, [r7, #6]
 800f64e:	4a1e      	ldr	r2, [pc, #120]	@ (800f6c8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d016      	beq.n	800f686 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800f658:	88fb      	ldrh	r3, [r7, #6]
 800f65a:	4a1b      	ldr	r2, [pc, #108]	@ (800f6c8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f660:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	4413      	add	r3, r2
 800f66a:	4a18      	ldr	r2, [pc, #96]	@ (800f6cc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f66c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	68ba      	ldr	r2, [r7, #8]
 800f674:	4413      	add	r3, r2
 800f676:	4a16      	ldr	r2, [pc, #88]	@ (800f6d0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f678:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	68ba      	ldr	r2, [r7, #8]
 800f680:	4413      	add	r3, r2
 800f682:	60fb      	str	r3, [r7, #12]
 800f684:	e00a      	b.n	800f69c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800f686:	4b11      	ldr	r3, [pc, #68]	@ (800f6cc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f688:	4a12      	ldr	r2, [pc, #72]	@ (800f6d4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800f68a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800f68c:	4a12      	ldr	r2, [pc, #72]	@ (800f6d8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800f68e:	4b10      	ldr	r3, [pc, #64]	@ (800f6d0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f690:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800f692:	88fb      	ldrh	r3, [r7, #6]
 800f694:	4a11      	ldr	r2, [pc, #68]	@ (800f6dc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800f696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f69a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00d      	beq.n	800f6be <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800f6a2:	4a0f      	ldr	r2, [pc, #60]	@ (800f6e0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800f6a4:	88fb      	ldrh	r3, [r7, #6]
 800f6a6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800f6a8:	f000 f83e 	bl	800f728 <_ZN17TypedTextDatabase8getFontsEv>
 800f6ac:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800f6ae:	f000 f833 	bl	800f718 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	4621      	mov	r1, r4
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f7ff fea5 	bl	800f408 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800f6be:	bf00      	nop
 800f6c0:	3714      	adds	r7, #20
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd90      	pop	{r4, r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	24005074 	.word	0x24005074
 800f6cc:	2400507c 	.word	0x2400507c
 800f6d0:	24005080 	.word	0x24005080
 800f6d4:	0802d65c 	.word	0x0802d65c
 800f6d8:	0802d650 	.word	0x0802d650
 800f6dc:	0802d67c 	.word	0x0802d67c
 800f6e0:	24005078 	.word	0x24005078

0800f6e4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800f6f0:	4b07      	ldr	r3, [pc, #28]	@ (800f710 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	4b07      	ldr	r3, [pc, #28]	@ (800f714 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800f6f6:	6819      	ldr	r1, [r3, #0]
 800f6f8:	887b      	ldrh	r3, [r7, #2]
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	440b      	add	r3, r1
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	005b      	lsls	r3, r3, #1
 800f702:	4413      	add	r3, r2
}
 800f704:	4618      	mov	r0, r3
 800f706:	370c      	adds	r7, #12
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr
 800f710:	2400507c 	.word	0x2400507c
 800f714:	24005080 	.word	0x24005080

0800f718 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800f718:	b480      	push	{r7}
 800f71a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800f71c:	2303      	movs	r3, #3
}
 800f71e:	4618      	mov	r0, r3
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800f728:	b480      	push	{r7}
 800f72a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800f72c:	4b02      	ldr	r3, [pc, #8]	@ (800f738 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800f72e:	4618      	mov	r0, r3
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr
 800f738:	24005084 	.word	0x24005084

0800f73c <_Z41__static_initialization_and_destruction_0v>:
    case 0:
        touchgfx_fonts[0] = &(getFont_Asap_Regular_24_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800f73c:	b580      	push	{r7, lr}
 800f73e:	af00      	add	r7, sp, #0
    &(getFont_Asap_Regular_24_4bpp())
 800f740:	f7fd fe44 	bl	800d3cc <_Z28getFont_Asap_Regular_24_4bppv>
 800f744:	4603      	mov	r3, r0
};
 800f746:	4a02      	ldr	r2, [pc, #8]	@ (800f750 <_Z41__static_initialization_and_destruction_0v+0x14>)
 800f748:	6013      	str	r3, [r2, #0]
} // namespace TypedTextDatabase
 800f74a:	bf00      	nop
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	24005084 	.word	0x24005084

0800f754 <_GLOBAL__sub_I_touchgfx_fonts>:
 800f754:	b580      	push	{r7, lr}
 800f756:	af00      	add	r7, sp, #0
 800f758:	f7ff fff0 	bl	800f73c <_Z41__static_initialization_and_destruction_0v>
 800f75c:	bd80      	pop	{r7, pc}
	...

0800f760 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	4a05      	ldr	r2, [pc, #20]	@ (800f780 <_ZN19FrontendApplicationD1Ev+0x20>)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	601a      	str	r2, [r3, #0]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4618      	mov	r0, r3
 800f772:	f7fe f8a1 	bl	800d8b8 <_ZN23FrontendApplicationBaseD1Ev>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4618      	mov	r0, r3
 800f77a:	3708      	adds	r7, #8
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	0802b494 	.word	0x0802b494

0800f784 <_ZN19FrontendApplicationD0Ev>:
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f7ff ffe7 	bl	800f760 <_ZN19FrontendApplicationD1Ev>
 800f792:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f019 fbc9 	bl	8028f2e <_ZdlPvj>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3708      	adds	r7, #8
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b082      	sub	sp, #8
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 fa61 	bl	800fc7c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f007 fd1f 	bl	8017200 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800f7c2:	bf00      	nop
 800f7c4:	3708      	adds	r7, #8
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
	...

0800f7cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	68b9      	ldr	r1, [r7, #8]
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fe f8ba 	bl	800d958 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800f7e4:	4a03      	ldr	r2, [pc, #12]	@ (800f7f4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	601a      	str	r2, [r3, #0]
{
}
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	0802b494 	.word	0x0802b494

0800f7f8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800f7f8:	b480      	push	{r7}
 800f7fa:	b083      	sub	sp, #12
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
    {
    }
 800f800:	bf00      	nop
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
    {
    }
 800f814:	bf00      	nop
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
    {
 800f828:	4a04      	ldr	r2, [pc, #16]	@ (800f83c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	601a      	str	r2, [r3, #0]
    }
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4618      	mov	r0, r3
 800f832:	370c      	adds	r7, #12
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr
 800f83c:	0802b520 	.word	0x0802b520

0800f840 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
    }
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7ff ffe9 	bl	800f820 <_ZN8touchgfx9PresenterD1Ev>
 800f84e:	2104      	movs	r1, #4
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f019 fb6c 	bl	8028f2e <_ZdlPvj>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	4618      	mov	r0, r3
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800f860:	b480      	push	{r7}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
    {
 800f868:	4a04      	ldr	r2, [pc, #16]	@ (800f87c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	601a      	str	r2, [r3, #0]
    }
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4618      	mov	r0, r3
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr
 800f87c:	0802b520 	.word	0x0802b520

0800f880 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	4a06      	ldr	r2, [pc, #24]	@ (800f8a4 <_ZN13ModelListenerC1Ev+0x24>)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	601a      	str	r2, [r3, #0]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2200      	movs	r2, #0
 800f892:	605a      	str	r2, [r3, #4]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4618      	mov	r0, r3
 800f898:	370c      	adds	r7, #12
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop
 800f8a4:	0802b510 	.word	0x0802b510

0800f8a8 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800f8a8:	b480      	push	{r7}
 800f8aa:	b083      	sub	sp, #12
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	4a04      	ldr	r2, [pc, #16]	@ (800f8c4 <_ZN13ModelListenerD1Ev+0x1c>)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	601a      	str	r2, [r3, #0]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr
 800f8c4:	0802b510 	.word	0x0802b510

0800f8c8 <_ZN13ModelListenerD0Ev>:
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f7ff ffe9 	bl	800f8a8 <_ZN13ModelListenerD1Ev>
 800f8d6:	2108      	movs	r1, #8
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f019 fb28 	bl	8028f2e <_ZdlPvj>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3708      	adds	r7, #8
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <_ZN13mainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainPresenter() {};
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	4a09      	ldr	r2, [pc, #36]	@ (800f918 <_ZN13mainPresenterD1Ev+0x30>)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	601a      	str	r2, [r3, #0]
 800f8f6:	4a09      	ldr	r2, [pc, #36]	@ (800f91c <_ZN13mainPresenterD1Ev+0x34>)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	605a      	str	r2, [r3, #4]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	3304      	adds	r3, #4
 800f900:	4618      	mov	r0, r3
 800f902:	f7ff ffd1 	bl	800f8a8 <_ZN13ModelListenerD1Ev>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4618      	mov	r0, r3
 800f90a:	f7ff ff89 	bl	800f820 <_ZN8touchgfx9PresenterD1Ev>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4618      	mov	r0, r3
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	0802b4e8 	.word	0x0802b4e8
 800f91c:	0802b500 	.word	0x0802b500

0800f920 <_ZThn4_N13mainPresenterD1Ev>:
 800f920:	f1a0 0004 	sub.w	r0, r0, #4
 800f924:	e7e0      	b.n	800f8e8 <_ZN13mainPresenterD1Ev>
 800f926:	bf00      	nop

0800f928 <_ZN13mainPresenterD0Ev>:
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7ff ffd9 	bl	800f8e8 <_ZN13mainPresenterD1Ev>
 800f936:	2110      	movs	r1, #16
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f019 faf8 	bl	8028f2e <_ZdlPvj>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4618      	mov	r0, r3
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <_ZThn4_N13mainPresenterD0Ev>:
 800f948:	f1a0 0004 	sub.w	r0, r0, #4
 800f94c:	e7ec      	b.n	800f928 <_ZN13mainPresenterD0Ev>
	...

0800f950 <_ZN13mainPresenterC1ER8mainView>:
#include <gui/main_screen/mainView.hpp>
#include <gui/main_screen/mainPresenter.hpp>

mainPresenter::mainPresenter(mainView& v)
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
    : view(v)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7ff ff7f 	bl	800f860 <_ZN8touchgfx9PresenterC1Ev>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	3304      	adds	r3, #4
 800f966:	4618      	mov	r0, r3
 800f968:	f7ff ff8a 	bl	800f880 <_ZN13ModelListenerC1Ev>
 800f96c:	4a06      	ldr	r2, [pc, #24]	@ (800f988 <_ZN13mainPresenterC1ER8mainView+0x38>)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	601a      	str	r2, [r3, #0]
 800f972:	4a06      	ldr	r2, [pc, #24]	@ (800f98c <_ZN13mainPresenterC1ER8mainView+0x3c>)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	605a      	str	r2, [r3, #4]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	683a      	ldr	r2, [r7, #0]
 800f97c:	60da      	str	r2, [r3, #12]
{
}
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4618      	mov	r0, r3
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	0802b4e8 	.word	0x0802b4e8
 800f98c:	0802b500 	.word	0x0802b500

0800f990 <_ZN13mainPresenter8activateEv>:

void mainPresenter::activate()
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
}
 800f998:	bf00      	nop
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <_ZN13mainPresenter10deactivateEv>:

void mainPresenter::deactivate()
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
}
 800f9ac:	bf00      	nop
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr

0800f9b8 <_ZN8mainViewD1Ev>:

class mainView : public mainViewBase
{
public:
    mainView();
    virtual ~mainView() {}
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	4a05      	ldr	r2, [pc, #20]	@ (800f9d8 <_ZN8mainViewD1Ev+0x20>)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	601a      	str	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7ff fc81 	bl	800f2d0 <_ZN12mainViewBaseD1Ev>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	0802b538 	.word	0x0802b538

0800f9dc <_ZN8mainViewD0Ev>:
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7ff ffe7 	bl	800f9b8 <_ZN8mainViewD1Ev>
 800f9ea:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f019 fa9d 	bl	8028f2e <_ZdlPvj>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <_ZN8mainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

mainView::mainView() :
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
    tickCounter(0)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7ff fa64 	bl	800eed8 <_ZN12mainViewBaseC1Ev>
 800fa10:	4a05      	ldr	r2, [pc, #20]	@ (800fa28 <_ZN8mainViewC1Ev+0x28>)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	601a      	str	r2, [r3, #0]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
{
}
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4618      	mov	r0, r3
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	0802b538 	.word	0x0802b538

0800fa2c <_ZN8mainView11setupScreenEv>:

void mainView::setupScreen()
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
    mainViewBase::setupScreen();
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7ff fc8f 	bl	800f35a <_ZN12mainViewBase11setupScreenEv>
    digitalHours = digitalClock.getCurrentHour();
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	3398      	adds	r3, #152	@ 0x98
 800fa40:	4618      	mov	r0, r3
 800fa42:	f002 ff43 	bl	80128cc <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 800fa46:	4603      	mov	r3, r0
 800fa48:	461a      	mov	r2, r3
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
    digitalMinutes = digitalClock.getCurrentMinute();
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	3398      	adds	r3, #152	@ 0x98
 800fa54:	4618      	mov	r0, r3
 800fa56:	f002 ff52 	bl	80128fe <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8c3 24f4 	str.w	r2, [r3, #1268]	@ 0x4f4
    digitalSeconds = digitalClock.getCurrentSecond();
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	3398      	adds	r3, #152	@ 0x98
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f002 ff4b 	bl	8012904 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	461a      	mov	r2, r3
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

    analogHours = analogClock.getCurrentHour();
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f002 ff24 	bl	80128cc <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 800fa84:	4603      	mov	r3, r0
 800fa86:	461a      	mov	r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
    analogMinutes = analogClock.getCurrentMinute();
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800fa94:	4618      	mov	r0, r3
 800fa96:	f002 ff32 	bl	80128fe <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
    analogSeconds = analogClock.getCurrentSecond();
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800faaa:	4618      	mov	r0, r3
 800faac:	f002 ff2a 	bl	8012904 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 800fab0:	4603      	mov	r3, r0
 800fab2:	461a      	mov	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
}
 800faba:	bf00      	nop
 800fabc:	3708      	adds	r7, #8
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <_ZN8mainView14tearDownScreenEv>:

void mainView::tearDownScreen()
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b082      	sub	sp, #8
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
    mainViewBase::tearDownScreen();
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4618      	mov	r0, r3
 800face:	f7fe fc9d 	bl	800e40c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800fad2:	bf00      	nop
 800fad4:	3708      	adds	r7, #8
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
	...

0800fadc <_ZN8mainView15handleTickEventEv>:

void mainView::handleTickEvent()
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
    tickCounter++;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800faea:	1c5a      	adds	r2, r3, #1
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0

    if (tickCounter % 40 == 0)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8d3 14e0 	ldr.w	r1, [r3, #1248]	@ 0x4e0
 800faf8:	4b58      	ldr	r3, [pc, #352]	@ (800fc5c <_ZN8mainView15handleTickEventEv+0x180>)
 800fafa:	fb83 2301 	smull	r2, r3, r3, r1
 800fafe:	111a      	asrs	r2, r3, #4
 800fb00:	17cb      	asrs	r3, r1, #31
 800fb02:	1ad2      	subs	r2, r2, r3
 800fb04:	4613      	mov	r3, r2
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	4413      	add	r3, r2
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	1aca      	subs	r2, r1, r3
 800fb0e:	2a00      	cmp	r2, #0
 800fb10:	f040 80a0 	bne.w	800fc54 <_ZN8mainView15handleTickEventEv+0x178>
    {
        if (++digitalSeconds >= 60)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800fb1a:	1c5a      	adds	r2, r3, #1
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800fb28:	2b3b      	cmp	r3, #59	@ 0x3b
 800fb2a:	bfcc      	ite	gt
 800fb2c:	2301      	movgt	r3, #1
 800fb2e:	2300      	movle	r3, #0
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d02d      	beq.n	800fb92 <_ZN8mainView15handleTickEventEv+0xb6>
        {
            digitalSeconds = 0;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8
            if (++digitalMinutes >= 60)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800fb44:	1c5a      	adds	r2, r3, #1
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8c3 24f4 	str.w	r2, [r3, #1268]	@ 0x4f4
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800fb52:	2b3b      	cmp	r3, #59	@ 0x3b
 800fb54:	bfcc      	ite	gt
 800fb56:	2301      	movgt	r3, #1
 800fb58:	2300      	movle	r3, #0
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d018      	beq.n	800fb92 <_ZN8mainView15handleTickEventEv+0xb6>
            {
                digitalMinutes = 0;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2200      	movs	r2, #0
 800fb64:	f8c3 24f4 	str.w	r2, [r3, #1268]	@ 0x4f4
                if (++digitalHours >= 24)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800fb6e:	1c5a      	adds	r2, r3, #1
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800fb7c:	2b17      	cmp	r3, #23
 800fb7e:	bfcc      	ite	gt
 800fb80:	2301      	movgt	r3, #1
 800fb82:	2300      	movle	r3, #0
 800fb84:	b2db      	uxtb	r3, r3
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d003      	beq.n	800fb92 <_ZN8mainView15handleTickEventEv+0xb6>
                {
                    digitalHours = 0;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f8c3 24f0 	str.w	r2, [r3, #1264]	@ 0x4f0
                }
            }
        }

        if (++analogSeconds >= 60)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800fb98:	1c5a      	adds	r2, r3, #1
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800fba6:	2b3b      	cmp	r3, #59	@ 0x3b
 800fba8:	bfcc      	ite	gt
 800fbaa:	2301      	movgt	r3, #1
 800fbac:	2300      	movle	r3, #0
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d02d      	beq.n	800fc10 <_ZN8mainView15handleTickEventEv+0x134>
        {
            analogSeconds = 0;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	f8c3 24ec 	str.w	r2, [r3, #1260]	@ 0x4ec
            if (++analogMinutes >= 60)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800fbc2:	1c5a      	adds	r2, r3, #1
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800fbd0:	2b3b      	cmp	r3, #59	@ 0x3b
 800fbd2:	bfcc      	ite	gt
 800fbd4:	2301      	movgt	r3, #1
 800fbd6:	2300      	movle	r3, #0
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d018      	beq.n	800fc10 <_ZN8mainView15handleTickEventEv+0x134>
            {
                analogMinutes = 0;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
                if (++analogHours >= 24)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 800fbec:	1c5a      	adds	r2, r3, #1
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 800fbfa:	2b17      	cmp	r3, #23
 800fbfc:	bfcc      	ite	gt
 800fbfe:	2301      	movgt	r3, #1
 800fc00:	2300      	movle	r3, #0
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d003      	beq.n	800fc10 <_ZN8mainView15handleTickEventEv+0x134>
                {
                    analogHours = 0;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f8c3 24e4 	str.w	r2, [r3, #1252]	@ 0x4e4
                }
            }
        }

        // Update the clocks
        digitalClock.setTime24Hour(digitalHours, digitalMinutes, digitalSeconds);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	@ 0x4f0
 800fc1c:	b2d9      	uxtb	r1, r3
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	@ 0x4f4
 800fc24:	b2da      	uxtb	r2, r3
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	@ 0x4f8
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	f002 fe03 	bl	8012838 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
        analogClock.setTime24Hour(analogHours, analogMinutes, analogSeconds);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f503 7098 	add.w	r0, r3, #304	@ 0x130
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	@ 0x4e4
 800fc3e:	b2d9      	uxtb	r1, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	@ 0x4e8
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	@ 0x4ec
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	f002 fdf2 	bl	8012838 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
    }
}
 800fc54:	bf00      	nop
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	66666667 	.word	0x66666667

0800fc60 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	601a      	str	r2, [r3, #0]
{
}
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4618      	mov	r0, r3
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <_ZN5Model4tickEv>:

void Model::tick()
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
    {
 800fc98:	4a04      	ldr	r2, [pc, #16]	@ (800fcac <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	601a      	str	r2, [r3, #0]
    }
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4618      	mov	r0, r3
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	0802b584 	.word	0x0802b584

0800fcb0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
    }
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f7ff ffe9 	bl	800fc90 <_ZN8touchgfx15TouchControllerD1Ev>
 800fcbe:	2104      	movs	r1, #4
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f019 f934 	bl	8028f2e <_ZdlPvj>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800fcd8:	bf00      	nop
 800fcda:	370c      	adds	r7, #12
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr

0800fce4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	60f8      	str	r0, [r7, #12]
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3714      	adds	r7, #20
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
	...

0800fd00 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	4a05      	ldr	r2, [pc, #20]	@ (800fd20 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	601a      	str	r2, [r3, #0]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7ff ffbd 	bl	800fc90 <_ZN8touchgfx15TouchControllerD1Ev>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}
 800fd20:	0802b56c 	.word	0x0802b56c

0800fd24 <_ZN20STM32TouchControllerD0Ev>:
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7ff ffe7 	bl	800fd00 <_ZN20STM32TouchControllerD1Ev>
 800fd32:	2104      	movs	r1, #4
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f019 f8fa 	bl	8028f2e <_ZdlPvj>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800fd44:	b480      	push	{r7}
 800fd46:	af00      	add	r7, sp, #0

}
 800fd48:	bf00      	nop
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr
	...

0800fd54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b083      	sub	sp, #12
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fd5e:	79fb      	ldrb	r3, [r7, #7]
 800fd60:	2b03      	cmp	r3, #3
 800fd62:	d80c      	bhi.n	800fd7e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800fd64:	a201      	add	r2, pc, #4	@ (adr r2, 800fd6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800fd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd6a:	bf00      	nop
 800fd6c:	0800fd7d 	.word	0x0800fd7d
 800fd70:	0800fd7d 	.word	0x0800fd7d
 800fd74:	0800fd7d 	.word	0x0800fd7d
 800fd78:	0800fd7d 	.word	0x0800fd7d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800fd7c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800fd7e:	bf00      	nop
 800fd80:	370c      	adds	r7, #12
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr
 800fd8a:	bf00      	nop

0800fd8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	4603      	mov	r3, r0
 800fd94:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fd96:	79fb      	ldrb	r3, [r7, #7]
 800fd98:	2b03      	cmp	r3, #3
 800fd9a:	d80c      	bhi.n	800fdb6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800fd9c:	a201      	add	r2, pc, #4	@ (adr r2, 800fda4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800fd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fda2:	bf00      	nop
 800fda4:	0800fdb5 	.word	0x0800fdb5
 800fda8:	0800fdb5 	.word	0x0800fdb5
 800fdac:	0800fdb5 	.word	0x0800fdb5
 800fdb0:	0800fdb5 	.word	0x0800fdb5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800fdb4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800fdb6:	bf00      	nop
 800fdb8:	370c      	adds	r7, #12
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop

0800fdc4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	4603      	mov	r3, r0
 800fdcc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fdce:	79fb      	ldrb	r3, [r7, #7]
 800fdd0:	2b03      	cmp	r3, #3
 800fdd2:	d80c      	bhi.n	800fdee <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800fdd4:	a201      	add	r2, pc, #4	@ (adr r2, 800fddc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800fdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdda:	bf00      	nop
 800fddc:	0800fded 	.word	0x0800fded
 800fde0:	0800fded 	.word	0x0800fded
 800fde4:	0800fded 	.word	0x0800fded
 800fde8:	0800fded 	.word	0x0800fded
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800fdec:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800fdee:	bf00      	nop
 800fdf0:	370c      	adds	r7, #12
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr
 800fdfa:	bf00      	nop

0800fdfc <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
    {
 800fe04:	4a04      	ldr	r2, [pc, #16]	@ (800fe18 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	601a      	str	r2, [r3, #0]
    }
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	370c      	adds	r7, #12
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr
 800fe18:	0802bc94 	.word	0x0802bc94

0800fe1c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
    }
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f7ff ffe9 	bl	800fdfc <_ZN8touchgfx3HALD1Ev>
 800fe2a:	2184      	movs	r1, #132	@ 0x84
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f019 f87e 	bl	8028f2e <_ZdlPvj>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800fe3c:	b480      	push	{r7}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	460b      	mov	r3, r1
 800fe46:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	78fa      	ldrb	r2, [r7, #3]
 800fe4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2201      	movs	r2, #1
 800fe54:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 800fe58:	bf00      	nop
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	807b      	strh	r3, [r7, #2]
 800fe70:	4613      	mov	r3, r2
 800fe72:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800fe74:	4b0c      	ldr	r3, [pc, #48]	@ (800fea8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800fe76:	881b      	ldrh	r3, [r3, #0]
 800fe78:	887a      	ldrh	r2, [r7, #2]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d304      	bcc.n	800fe88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800fe7e:	4b0b      	ldr	r3, [pc, #44]	@ (800feac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800fe80:	881b      	ldrh	r3, [r3, #0]
 800fe82:	883a      	ldrh	r2, [r7, #0]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d205      	bcs.n	800fe94 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800fe88:	4b09      	ldr	r3, [pc, #36]	@ (800feb0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800fe8a:	4a0a      	ldr	r2, [pc, #40]	@ (800feb4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800fe8c:	21a3      	movs	r1, #163	@ 0xa3
 800fe8e:	480a      	ldr	r0, [pc, #40]	@ (800feb8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800fe90:	f019 fa1a 	bl	80292c8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800fe94:	4a09      	ldr	r2, [pc, #36]	@ (800febc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800fe96:	887b      	ldrh	r3, [r7, #2]
 800fe98:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800fe9a:	4a09      	ldr	r2, [pc, #36]	@ (800fec0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800fe9c:	883b      	ldrh	r3, [r7, #0]
 800fe9e:	8013      	strh	r3, [r2, #0]
    }
 800fea0:	bf00      	nop
 800fea2:	3708      	adds	r7, #8
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	240065f4 	.word	0x240065f4
 800feac:	240065f6 	.word	0x240065f6
 800feb0:	0802ab80 	.word	0x0802ab80
 800feb4:	0802abe4 	.word	0x0802abe4
 800feb8:	0802ac28 	.word	0x0802ac28
 800febc:	240065fa 	.word	0x240065fa
 800fec0:	240065fc 	.word	0x240065fc

0800fec4 <_ZN8touchgfx3HAL11submitGPU2DEv>:
    virtual void submitGPU2D()
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
    }
 800fecc:	bf00      	nop
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d009      	beq.n	800fefe <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	685a      	ldr	r2, [r3, #4]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4610      	mov	r0, r2
 800fef8:	4798      	blx	r3
 800fefa:	4603      	mov	r3, r0
 800fefc:	e000      	b.n	800ff00 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800fefe:	2300      	movs	r3, #0
    }
 800ff00:	4618      	mov	r0, r3
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    }

    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f003 fd7b 	bl	8013a0c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	33bc      	adds	r3, #188	@ 0xbc
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	4798      	blx	r3
    }
 800ff22:	bf00      	nop
 800ff24:	3708      	adds	r7, #8
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800ff2a:	b480      	push	{r7}
 800ff2c:	b083      	sub	sp, #12
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
 800ff32:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800ff34:	2300      	movs	r3, #0
    }
 800ff36:	4618      	mov	r0, r3
 800ff38:	370c      	adds	r7, #12
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
	...

0800ff44 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	607a      	str	r2, [r7, #4]
 800ff50:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d106      	bne.n	800ff66 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800ff58:	4b0f      	ldr	r3, [pc, #60]	@ (800ff98 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800ff5a:	4a10      	ldr	r2, [pc, #64]	@ (800ff9c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800ff5c:	f240 21ff 	movw	r1, #767	@ 0x2ff
 800ff60:	480f      	ldr	r0, [pc, #60]	@ (800ffa0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800ff62:	f019 f9b1 	bl	80292c8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	68ba      	ldr	r2, [r7, #8]
 800ff6a:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	bf14      	ite	ne
 800ff78:	2301      	movne	r3, #1
 800ff7a:	2300      	moveq	r3, #0
 800ff7c:	b2da      	uxtb	r2, r3
 800ff7e:	4b09      	ldr	r3, [pc, #36]	@ (800ffa4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800ff80:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	3390      	adds	r3, #144	@ 0x90
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	6839      	ldr	r1, [r7, #0]
 800ff8c:	68f8      	ldr	r0, [r7, #12]
 800ff8e:	4798      	blx	r3
    }
 800ff90:	bf00      	nop
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	0802ac6c 	.word	0x0802ac6c
 800ff9c:	0802aca4 	.word	0x0802aca4
 800ffa0:	0802ac28 	.word	0x0802ac28
 800ffa4:	240065fe 	.word	0x240065fe

0800ffa8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800ffa8:	b480      	push	{r7}
 800ffaa:	b083      	sub	sp, #12
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	683a      	ldr	r2, [r7, #0]
 800ffb6:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	bf14      	ite	ne
 800ffbe:	2301      	movne	r3, #1
 800ffc0:	2300      	moveq	r3, #0
 800ffc2:	b2da      	uxtb	r2, r3
 800ffc4:	4b03      	ldr	r3, [pc, #12]	@ (800ffd4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800ffc6:	701a      	strb	r2, [r3, #0]
    }
 800ffc8:	bf00      	nop
 800ffca:	370c      	adds	r7, #12
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr
 800ffd4:	240065ff 	.word	0x240065ff

0800ffd8 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     * Only applicable on LTDC systems and when the partial framebuffer strategy is
     * enabled.
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	807b      	strh	r3, [r7, #2]
    {
    }
 800ffe4:	bf00      	nop
 800ffe6:	370c      	adds	r7, #12
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800fff8:	2300      	movs	r3, #0
    }
 800fffa:	4618      	mov	r0, r3
 800fffc:	370c      	adds	r7, #12
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr

08010006 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8010006:	b580      	push	{r7, lr}
 8010008:	b082      	sub	sp, #8
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
 801000e:	460b      	mov	r3, r1
 8010010:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010016:	2b00      	cmp	r3, #0
 8010018:	d004      	beq.n	8010024 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801001e:	887a      	ldrh	r2, [r7, #2]
 8010020:	4610      	mov	r0, r2
 8010022:	4798      	blx	r3
        }
    }
 8010024:	bf00      	nop
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	685a      	ldr	r2, [r3, #4]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	3318      	adds	r3, #24
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4610      	mov	r0, r2
 8010044:	4798      	blx	r3
 8010046:	4603      	mov	r3, r0
    }
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This occurrence will lead to tearing on the display.
     *
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
 8010050:	b480      	push	{r7}
 8010052:	b083      	sub	sp, #12
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
    {
    }
 8010058:	bf00      	nop
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010078:	429a      	cmp	r2, r3
 801007a:	d011      	beq.n	80100a0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 801007c:	4b14      	ldr	r3, [pc, #80]	@ (80100d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801007e:	781b      	ldrb	r3, [r3, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d11e      	bne.n	80100c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8010084:	4b13      	ldr	r3, [pc, #76]	@ (80100d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801008a:	4b13      	ldr	r3, [pc, #76]	@ (80100d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801008c:	881a      	ldrh	r2, [r3, #0]
 801008e:	4b11      	ldr	r3, [pc, #68]	@ (80100d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010090:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8010092:	4a11      	ldr	r2, [pc, #68]	@ (80100d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010094:	89bb      	ldrh	r3, [r7, #12]
 8010096:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8010098:	4b0d      	ldr	r3, [pc, #52]	@ (80100d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801009a:	2201      	movs	r2, #1
 801009c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801009e:	e010      	b.n	80100c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80100a0:	4b0b      	ldr	r3, [pc, #44]	@ (80100d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d00c      	beq.n	80100c2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80100a8:	4b0a      	ldr	r3, [pc, #40]	@ (80100d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80100aa:	881b      	ldrh	r3, [r3, #0]
 80100ac:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80100ae:	4b0a      	ldr	r3, [pc, #40]	@ (80100d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80100b0:	881a      	ldrh	r2, [r3, #0]
 80100b2:	4b08      	ldr	r3, [pc, #32]	@ (80100d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80100b4:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80100b6:	4a08      	ldr	r2, [pc, #32]	@ (80100d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80100b8:	89fb      	ldrh	r3, [r7, #14]
 80100ba:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80100bc:	4b04      	ldr	r3, [pc, #16]	@ (80100d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80100be:	2200      	movs	r2, #0
 80100c0:	701a      	strb	r2, [r3, #0]
    }
 80100c2:	bf00      	nop
 80100c4:	3714      	adds	r7, #20
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	240065f8 	.word	0x240065f8
 80100d4:	240065f6 	.word	0x240065f6
 80100d8:	240065f4 	.word	0x240065f4

080100dc <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Invalidate texture cache(s).
     *
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
    {
    }
 80100e4:	bf00      	nop
 80100e6:	370c      	adds	r7, #12
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr

080100f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4618      	mov	r0, r3
 80100fc:	f002 fea1 	bl	8012e42 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8010100:	bf00      	nop
 8010102:	3708      	adds	r7, #8
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	4a05      	ldr	r2, [pc, #20]	@ (8010128 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	601a      	str	r2, [r3, #0]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4618      	mov	r0, r3
 801011a:	f7ff fe6f 	bl	800fdfc <_ZN8touchgfx3HALD1Ev>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	4618      	mov	r0, r3
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	0802b7d0 	.word	0x0802b7d0

0801012c <_ZN20TouchGFXGeneratedHALD0Ev>:
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7ff ffe7 	bl	8010108 <_ZN20TouchGFXGeneratedHALD1Ev>
 801013a:	2184      	movs	r1, #132	@ 0x84
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f018 fef6 	bl	8028f2e <_ZdlPvj>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	4618      	mov	r0, r3
 8010146:	3708      	adds	r7, #8
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff ffca 	bl	80100f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 801015c:	bf00      	nop
 801015e:	3708      	adds	r7, #8
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <_ZN11TouchGFXHAL10initializeEv>:
#include "GT811.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of initialize().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.
	BSP_LCD_Init();
 801016c:	f7f0 fc5a 	bl	8000a24 <BSP_LCD_Init>
	GT811_Init();
 8010170:	f7f0 fdd2 	bl	8000d18 <GT811_Init>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8010174:	2000      	movs	r0, #0
 8010176:	f7f0 fcdd 	bl	8000b34 <BSP_LCD_Clear>

    TouchGFXGeneratedHAL::initialize();
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4618      	mov	r0, r3
 801017e:	f001 fc3d 	bl	80119fc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8010182:	bf00      	nop
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 801018a:	b580      	push	{r7, lr}
 801018c:	b082      	sub	sp, #8
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	4618      	mov	r0, r3
 8010196:	f001 fcdb 	bl	8011b50 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 801019a:	4603      	mov	r3, r0
}
 801019c:	4618      	mov	r0, r3
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6839      	ldr	r1, [r7, #0]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f001 fcda 	bl	8011b6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80101b8:	bf00      	nop
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6839      	ldr	r1, [r7, #0]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f001 fce2 	bl	8011b98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80101d4:	bf00      	nop
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	60b9      	str	r1, [r7, #8]
 80101e6:	607a      	str	r2, [r7, #4]
 80101e8:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	68b9      	ldr	r1, [r7, #8]
 80101f2:	f001 fcdf 	bl	8011bb4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80101f6:	4603      	mov	r3, r0
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3710      	adds	r7, #16
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	4618      	mov	r0, r3
 801020c:	f001 fc2c 	bl	8011a68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8010210:	bf00      	nop
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	4618      	mov	r0, r3
 8010224:	f001 fc30 	bl	8011a88 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8010228:	bf00      	nop
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	4618      	mov	r0, r3
 801023c:	f001 fc32 	bl	8011aa4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8010240:	bf00      	nop
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	4618      	mov	r0, r3
 8010254:	f001 fc34 	bl	8011ac0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8010258:	bf00      	nop
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	4618      	mov	r0, r3
 801026c:	f001 fc56 	bl	8011b1c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8010270:	4603      	mov	r3, r0
}
 8010272:	4618      	mov	r0, r3
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b082      	sub	sp, #8
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	4618      	mov	r0, r3
 8010286:	f001 fc56 	bl	8011b36 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 801028a:	bf00      	nop
 801028c:	3708      	adds	r7, #8
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
	...

08010294 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	4a05      	ldr	r2, [pc, #20]	@ (80102b4 <_ZN11TouchGFXHALD1Ev+0x20>)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	601a      	str	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7ff ff2f 	bl	8010108 <_ZN20TouchGFXGeneratedHALD1Ev>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4618      	mov	r0, r3
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	0802b59c 	.word	0x0802b59c

080102b8 <_ZN11TouchGFXHALD0Ev>:
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f7ff ffe7 	bl	8010294 <_ZN11TouchGFXHALD1Ev>
 80102c6:	2184      	movs	r1, #132	@ 0x84
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f018 fe30 	bl	8028f2e <_ZdlPvj>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	4618      	mov	r0, r3
 80102d2:	3708      	adds	r7, #8
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80102dc:	2200      	movs	r2, #0
 80102de:	2101      	movs	r1, #1
 80102e0:	2001      	movs	r0, #1
 80102e2:	f7f9 fae0 	bl	80098a6 <osSemaphoreNew>
 80102e6:	4603      	mov	r3, r0
 80102e8:	4a0f      	ldr	r2, [pc, #60]	@ (8010328 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80102ea:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80102ec:	4b0e      	ldr	r3, [pc, #56]	@ (8010328 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d105      	bne.n	8010300 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80102f4:	4b0d      	ldr	r3, [pc, #52]	@ (801032c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80102f6:	4a0e      	ldr	r2, [pc, #56]	@ (8010330 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80102f8:	2128      	movs	r1, #40	@ 0x28
 80102fa:	480e      	ldr	r0, [pc, #56]	@ (8010334 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80102fc:	f018 ffe4 	bl	80292c8 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8010300:	2200      	movs	r2, #0
 8010302:	2104      	movs	r1, #4
 8010304:	2001      	movs	r0, #1
 8010306:	f7f9 fbed 	bl	8009ae4 <osMessageQueueNew>
 801030a:	4603      	mov	r3, r0
 801030c:	4a0a      	ldr	r2, [pc, #40]	@ (8010338 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801030e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8010310:	4b09      	ldr	r3, [pc, #36]	@ (8010338 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d105      	bne.n	8010324 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8010318:	4b08      	ldr	r3, [pc, #32]	@ (801033c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801031a:	4a05      	ldr	r2, [pc, #20]	@ (8010330 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 801031c:	212c      	movs	r1, #44	@ 0x2c
 801031e:	4805      	ldr	r0, [pc, #20]	@ (8010334 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8010320:	f018 ffd2 	bl	80292c8 <__assert_func>
}
 8010324:	bf00      	nop
 8010326:	bd80      	pop	{r7, pc}
 8010328:	24005088 	.word	0x24005088
 801032c:	0802acf4 	.word	0x0802acf4
 8010330:	0802ad40 	.word	0x0802ad40
 8010334:	0802ad70 	.word	0x0802ad70
 8010338:	2400508c 	.word	0x2400508c
 801033c:	0802ad9c 	.word	0x0802ad9c

08010340 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8010340:	b580      	push	{r7, lr}
 8010342:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8010344:	4b04      	ldr	r3, [pc, #16]	@ (8010358 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f04f 31ff 	mov.w	r1, #4294967295
 801034c:	4618      	mov	r0, r3
 801034e:	f7f9 fb33 	bl	80099b8 <osSemaphoreAcquire>
}
 8010352:	bf00      	nop
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	24005088 	.word	0x24005088

0801035c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801035c:	b580      	push	{r7, lr}
 801035e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8010360:	4b03      	ldr	r3, [pc, #12]	@ (8010370 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4618      	mov	r0, r3
 8010366:	f7f9 fb79 	bl	8009a5c <osSemaphoreRelease>
}
 801036a:	bf00      	nop
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	24005088 	.word	0x24005088

08010374 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8010374:	b580      	push	{r7, lr}
 8010376:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8010378:	4b03      	ldr	r3, [pc, #12]	@ (8010388 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2100      	movs	r1, #0
 801037e:	4618      	mov	r0, r3
 8010380:	f7f9 fb1a 	bl	80099b8 <osSemaphoreAcquire>
}
 8010384:	bf00      	nop
 8010386:	bd80      	pop	{r7, pc}
 8010388:	24005088 	.word	0x24005088

0801038c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 801038c:	b580      	push	{r7, lr}
 801038e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8010390:	4b03      	ldr	r3, [pc, #12]	@ (80103a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4618      	mov	r0, r3
 8010396:	f7f9 fb61 	bl	8009a5c <osSemaphoreRelease>
}
 801039a:	bf00      	nop
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	24005088 	.word	0x24005088

080103a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80103a8:	4b04      	ldr	r3, [pc, #16]	@ (80103bc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80103aa:	6818      	ldr	r0, [r3, #0]
 80103ac:	2300      	movs	r3, #0
 80103ae:	2200      	movs	r2, #0
 80103b0:	4903      	ldr	r1, [pc, #12]	@ (80103c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80103b2:	f7f9 fc0b 	bl	8009bcc <osMessageQueuePut>
}
 80103b6:	bf00      	nop
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	2400508c 	.word	0x2400508c
 80103c0:	24000018 	.word	0x24000018

080103c4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80103ca:	4b09      	ldr	r3, [pc, #36]	@ (80103f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80103cc:	6818      	ldr	r0, [r3, #0]
 80103ce:	1d39      	adds	r1, r7, #4
 80103d0:	2300      	movs	r3, #0
 80103d2:	2200      	movs	r2, #0
 80103d4:	f7f9 fc5a 	bl	8009c8c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80103d8:	4b05      	ldr	r3, [pc, #20]	@ (80103f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80103da:	6818      	ldr	r0, [r3, #0]
 80103dc:	1d39      	adds	r1, r7, #4
 80103de:	f04f 33ff 	mov.w	r3, #4294967295
 80103e2:	2200      	movs	r2, #0
 80103e4:	f7f9 fc52 	bl	8009c8c <osMessageQueueGet>
}
 80103e8:	bf00      	nop
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	2400508c 	.word	0x2400508c

080103f4 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	4603      	mov	r3, r0
 80103fc:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 80103fe:	88fb      	ldrh	r3, [r7, #6]
 8010400:	4618      	mov	r0, r3
 8010402:	f7f9 fa35 	bl	8009870 <osDelay>
}
 8010406:	bf00      	nop
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
	...

08010410 <__NVIC_EnableIRQ>:
{
 8010410:	b480      	push	{r7}
 8010412:	b083      	sub	sp, #12
 8010414:	af00      	add	r7, sp, #0
 8010416:	4603      	mov	r3, r0
 8010418:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801041a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801041e:	2b00      	cmp	r3, #0
 8010420:	db0b      	blt.n	801043a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010422:	88fb      	ldrh	r3, [r7, #6]
 8010424:	f003 021f 	and.w	r2, r3, #31
 8010428:	4907      	ldr	r1, [pc, #28]	@ (8010448 <__NVIC_EnableIRQ+0x38>)
 801042a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801042e:	095b      	lsrs	r3, r3, #5
 8010430:	2001      	movs	r0, #1
 8010432:	fa00 f202 	lsl.w	r2, r0, r2
 8010436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801043a:	bf00      	nop
 801043c:	370c      	adds	r7, #12
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr
 8010446:	bf00      	nop
 8010448:	e000e100 	.word	0xe000e100

0801044c <__NVIC_DisableIRQ>:
{
 801044c:	b480      	push	{r7}
 801044e:	b083      	sub	sp, #12
 8010450:	af00      	add	r7, sp, #0
 8010452:	4603      	mov	r3, r0
 8010454:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801045a:	2b00      	cmp	r3, #0
 801045c:	db12      	blt.n	8010484 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801045e:	88fb      	ldrh	r3, [r7, #6]
 8010460:	f003 021f 	and.w	r2, r3, #31
 8010464:	490a      	ldr	r1, [pc, #40]	@ (8010490 <__NVIC_DisableIRQ+0x44>)
 8010466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801046a:	095b      	lsrs	r3, r3, #5
 801046c:	2001      	movs	r0, #1
 801046e:	fa00 f202 	lsl.w	r2, r0, r2
 8010472:	3320      	adds	r3, #32
 8010474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010478:	f3bf 8f4f 	dsb	sy
}
 801047c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801047e:	f3bf 8f6f 	isb	sy
}
 8010482:	bf00      	nop
}
 8010484:	bf00      	nop
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr
 8010490:	e000e100 	.word	0xe000e100

08010494 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
        : color(0)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	601a      	str	r2, [r3, #0]
    }
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4618      	mov	r0, r3
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
        return color;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
    }
 80104bc:	4618      	mov	r0, r3
 80104be:	370c      	adds	r7, #12
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr

080104c8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
    {
 80104d0:	4a04      	ldr	r2, [pc, #16]	@ (80104e4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	601a      	str	r2, [r3, #0]
    }
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4618      	mov	r0, r3
 80104da:	370c      	adds	r7, #12
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr
 80104e4:	0802b6d8 	.word	0x0802b6d8

080104e8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
    }
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f7ff ffe9 	bl	80104c8 <_ZN8touchgfx9DMA_QueueD1Ev>
 80104f6:	2104      	movs	r1, #4
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f018 fd18 	bl	8028f2e <_ZdlPvj>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4618      	mov	r0, r3
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	3344      	adds	r3, #68	@ 0x44
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	4798      	blx	r3
    }
 801051c:	bf00      	nop
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
    {
 801052c:	4a04      	ldr	r2, [pc, #16]	@ (8010540 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	601a      	str	r2, [r3, #0]
    }
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4618      	mov	r0, r3
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr
 8010540:	0802bd80 	.word	0x0802bd80

08010544 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
    }
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f7ff ffe9 	bl	8010524 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010552:	210c      	movs	r1, #12
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f018 fcea 	bl	8028f2e <_ZdlPvj>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4618      	mov	r0, r3
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8010564:	b480      	push	{r7}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801056e:	4a09      	ldr	r2, [pc, #36]	@ (8010594 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	601a      	str	r2, [r3, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	683a      	ldr	r2, [r7, #0]
 8010578:	605a      	str	r2, [r3, #4]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	721a      	strb	r2, [r3, #8]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	725a      	strb	r2, [r3, #9]
    {
    }
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	4618      	mov	r0, r3
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr
 8010594:	0802bd80 	.word	0x0802bd80

08010598 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8010598:	b480      	push	{r7}
 801059a:	b083      	sub	sp, #12
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80105a0:	2301      	movs	r3, #1
    }
 80105a2:	4618      	mov	r0, r3
 80105a4:	370c      	adds	r7, #12
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr

080105ae <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b082      	sub	sp, #8
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	3328      	adds	r3, #40	@ 0x28
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4610      	mov	r0, r2
 80105c2:	4798      	blx	r3
    }
 80105c4:	bf00      	nop
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	685a      	ldr	r2, [r3, #4]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	3314      	adds	r3, #20
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	4610      	mov	r0, r2
 80105e4:	4798      	blx	r3
    }
 80105e6:	bf00      	nop
 80105e8:	3708      	adds	r7, #8
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}

080105ee <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80105ee:	b580      	push	{r7, lr}
 80105f0:	b082      	sub	sp, #8
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80105f6:	f7fc fdeb 	bl	800d1d0 <_ZN8touchgfx3HAL11getInstanceEv>
 80105fa:	4603      	mov	r3, r0
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7ff ffe5 	bl	80105cc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8010602:	bf00      	nop
 8010604:	3708      	adds	r7, #8
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}

0801060a <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 801060a:	b480      	push	{r7}
 801060c:	b083      	sub	sp, #12
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        while (1)
 8010612:	bf00      	nop
 8010614:	e7fd      	b.n	8010612 <DMA2D_XferErrorCallback+0x8>
	...

08010618 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	4a05      	ldr	r2, [pc, #20]	@ (8010638 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	601a      	str	r2, [r3, #0]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4618      	mov	r0, r3
 801062a:	f7ff ff4d 	bl	80104c8 <_ZN8touchgfx9DMA_QueueD1Ev>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4618      	mov	r0, r3
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	0802bdd0 	.word	0x0802bdd0

0801063c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f7ff ffe7 	bl	8010618 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801064a:	2114      	movs	r1, #20
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f018 fc6e 	bl	8028f2e <_ZdlPvj>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4618      	mov	r0, r3
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	330c      	adds	r3, #12
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff ff13 	bl	8010494 <_ZN8touchgfx9colortypeC1Ev>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <_ZN8STM32DMAC1Ev>:

        }
    }
}

STM32DMA::STM32DMA()
 8010678:	b5b0      	push	{r4, r5, r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	330c      	adds	r3, #12
 8010686:	4619      	mov	r1, r3
 8010688:	4610      	mov	r0, r2
 801068a:	f7ff ff6b 	bl	8010564 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801068e:	4a0e      	ldr	r2, [pc, #56]	@ (80106c8 <_ZN8STM32DMAC1Ev+0x50>)
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	601a      	str	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f103 000c 	add.w	r0, r3, #12
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	3320      	adds	r3, #32
 801069e:	2260      	movs	r2, #96	@ 0x60
 80106a0:	4619      	mov	r1, r3
 80106a2:	f003 faeb 	bl	8013c7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	3320      	adds	r3, #32
 80106aa:	245f      	movs	r4, #95	@ 0x5f
 80106ac:	461d      	mov	r5, r3
 80106ae:	e004      	b.n	80106ba <_ZN8STM32DMAC1Ev+0x42>
 80106b0:	4628      	mov	r0, r5
 80106b2:	f7ff ffd3 	bl	801065c <_ZN8touchgfx6BlitOpC1Ev>
 80106b6:	3c01      	subs	r4, #1
 80106b8:	3524      	adds	r5, #36	@ 0x24
 80106ba:	2c00      	cmp	r4, #0
 80106bc:	daf8      	bge.n	80106b0 <_ZN8STM32DMAC1Ev+0x38>
{
}
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	3708      	adds	r7, #8
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bdb0      	pop	{r4, r5, r7, pc}
 80106c8:	0802b688 	.word	0x0802b688

080106cc <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	4a09      	ldr	r2, [pc, #36]	@ (80106fc <_ZN8STM32DMAD1Ev+0x30>)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80106da:	205a      	movs	r0, #90	@ 0x5a
 80106dc:	f7ff feb6 	bl	801044c <__NVIC_DisableIRQ>
}
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	330c      	adds	r3, #12
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7ff ff97 	bl	8010618 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7ff ff19 	bl	8010524 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4618      	mov	r0, r3
 80106f6:	3708      	adds	r7, #8
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	0802b688 	.word	0x0802b688

08010700 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
}
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7ff ffdf 	bl	80106cc <_ZN8STM32DMAD1Ev>
 801070e:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f018 fc0b 	bl	8028f2e <_ZdlPvj>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	4618      	mov	r0, r3
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
	...

08010724 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b084      	sub	sp, #16
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801072c:	4b13      	ldr	r3, [pc, #76]	@ (801077c <_ZN8STM32DMA10initializeEv+0x58>)
 801072e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010732:	4a12      	ldr	r2, [pc, #72]	@ (801077c <_ZN8STM32DMA10initializeEv+0x58>)
 8010734:	f043 0310 	orr.w	r3, r3, #16
 8010738:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 801073c:	4b0f      	ldr	r3, [pc, #60]	@ (801077c <_ZN8STM32DMA10initializeEv+0x58>)
 801073e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010742:	f003 0310 	and.w	r3, r3, #16
 8010746:	60fb      	str	r3, [r7, #12]
 8010748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 801074a:	4b0c      	ldr	r3, [pc, #48]	@ (801077c <_ZN8STM32DMA10initializeEv+0x58>)
 801074c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801074e:	4a0b      	ldr	r2, [pc, #44]	@ (801077c <_ZN8STM32DMA10initializeEv+0x58>)
 8010750:	f043 0310 	orr.w	r3, r3, #16
 8010754:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8010756:	4b09      	ldr	r3, [pc, #36]	@ (801077c <_ZN8STM32DMA10initializeEv+0x58>)
 8010758:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801075a:	4a08      	ldr	r2, [pc, #32]	@ (801077c <_ZN8STM32DMA10initializeEv+0x58>)
 801075c:	f023 0310 	bic.w	r3, r3, #16
 8010760:	67d3      	str	r3, [r2, #124]	@ 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8010762:	4b07      	ldr	r3, [pc, #28]	@ (8010780 <_ZN8STM32DMA10initializeEv+0x5c>)
 8010764:	4a07      	ldr	r2, [pc, #28]	@ (8010784 <_ZN8STM32DMA10initializeEv+0x60>)
 8010766:	621a      	str	r2, [r3, #32]

    /* Add transfer error callback function */
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8010768:	4b05      	ldr	r3, [pc, #20]	@ (8010780 <_ZN8STM32DMA10initializeEv+0x5c>)
 801076a:	4a07      	ldr	r2, [pc, #28]	@ (8010788 <_ZN8STM32DMA10initializeEv+0x64>)
 801076c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 801076e:	205a      	movs	r0, #90	@ 0x5a
 8010770:	f7ff fe4e 	bl	8010410 <__NVIC_EnableIRQ>
}
 8010774:	bf00      	nop
 8010776:	3710      	adds	r7, #16
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	58024400 	.word	0x58024400
 8010780:	24000354 	.word	0x24000354
 8010784:	080105ef 	.word	0x080105ef
 8010788:	0801060b 	.word	0x0801060b

0801078c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	460b      	mov	r3, r1
 8010796:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8010798:	2300      	movs	r3, #0
 801079a:	60fb      	str	r3, [r7, #12]

    switch (format)
 801079c:	78fb      	ldrb	r3, [r7, #3]
 801079e:	2b0b      	cmp	r3, #11
 80107a0:	d826      	bhi.n	80107f0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80107a2:	a201      	add	r2, pc, #4	@ (adr r2, 80107a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80107a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a8:	080107e5 	.word	0x080107e5
 80107ac:	080107df 	.word	0x080107df
 80107b0:	080107d9 	.word	0x080107d9
 80107b4:	080107f1 	.word	0x080107f1
 80107b8:	080107f1 	.word	0x080107f1
 80107bc:	080107f1 	.word	0x080107f1
 80107c0:	080107f1 	.word	0x080107f1
 80107c4:	080107eb 	.word	0x080107eb
 80107c8:	080107eb 	.word	0x080107eb
 80107cc:	080107eb 	.word	0x080107eb
 80107d0:	080107eb 	.word	0x080107eb
 80107d4:	080107eb 	.word	0x080107eb
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80107d8:	2300      	movs	r3, #0
 80107da:	60fb      	str	r3, [r7, #12]
        break;
 80107dc:	e00e      	b.n	80107fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80107de:	2301      	movs	r3, #1
 80107e0:	60fb      	str	r3, [r7, #12]
        break;
 80107e2:	e00b      	b.n	80107fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80107e4:	2302      	movs	r3, #2
 80107e6:	60fb      	str	r3, [r7, #12]
        break;
 80107e8:	e008      	b.n	80107fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80107ea:	2305      	movs	r3, #5
 80107ec:	60fb      	str	r3, [r7, #12]
        break;
 80107ee:	e005      	b.n	80107fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80107f0:	4b05      	ldr	r3, [pc, #20]	@ (8010808 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80107f2:	4a06      	ldr	r2, [pc, #24]	@ (801080c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80107f4:	216f      	movs	r1, #111	@ 0x6f
 80107f6:	4806      	ldr	r0, [pc, #24]	@ (8010810 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80107f8:	f018 fd66 	bl	80292c8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80107fc:	68fb      	ldr	r3, [r7, #12]
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3710      	adds	r7, #16
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	0802ade0 	.word	0x0802ade0
 801080c:	0802adfc 	.word	0x0802adfc
 8010810:	0802ae48 	.word	0x0802ae48

08010814 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b084      	sub	sp, #16
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	460b      	mov	r3, r1
 801081e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8010820:	2300      	movs	r3, #0
 8010822:	60fb      	str	r3, [r7, #12]

    switch (format)
 8010824:	78fb      	ldrb	r3, [r7, #3]
 8010826:	2b0a      	cmp	r3, #10
 8010828:	d821      	bhi.n	801086e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 801082a:	a201      	add	r2, pc, #4	@ (adr r2, 8010830 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010830:	08010869 	.word	0x08010869
 8010834:	08010863 	.word	0x08010863
 8010838:	0801085d 	.word	0x0801085d
 801083c:	0801086f 	.word	0x0801086f
 8010840:	0801086f 	.word	0x0801086f
 8010844:	0801086f 	.word	0x0801086f
 8010848:	0801086f 	.word	0x0801086f
 801084c:	08010863 	.word	0x08010863
 8010850:	08010863 	.word	0x08010863
 8010854:	08010863 	.word	0x08010863
 8010858:	08010863 	.word	0x08010863
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801085c:	2300      	movs	r3, #0
 801085e:	60fb      	str	r3, [r7, #12]
        break;
 8010860:	e00b      	b.n	801087a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8010862:	2301      	movs	r3, #1
 8010864:	60fb      	str	r3, [r7, #12]
        break;
 8010866:	e008      	b.n	801087a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8010868:	2302      	movs	r3, #2
 801086a:	60fb      	str	r3, [r7, #12]
        break;
 801086c:	e005      	b.n	801087a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 801086e:	4b05      	ldr	r3, [pc, #20]	@ (8010884 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8010870:	4a05      	ldr	r2, [pc, #20]	@ (8010888 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8010872:	2190      	movs	r1, #144	@ 0x90
 8010874:	4805      	ldr	r0, [pc, #20]	@ (801088c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8010876:	f018 fd27 	bl	80292c8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801087a:	68fb      	ldr	r3, [r7, #12]
}
 801087c:	4618      	mov	r0, r3
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	0802ade0 	.word	0x0802ade0
 8010888:	0802ae74 	.word	0x0802ae74
 801088c:	0802ae48 	.word	0x0802ae48

08010890 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8010890:	b480      	push	{r7}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8010898:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 801089c:	4618      	mov	r0, r3
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80108a8:	b590      	push	{r4, r7, lr}
 80108aa:	b089      	sub	sp, #36	@ 0x24
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	7f5b      	ldrb	r3, [r3, #29]
 80108b6:	4619      	mov	r1, r3
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f7ff ff67 	bl	801078c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80108be:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	7f9b      	ldrb	r3, [r3, #30]
 80108c4:	4619      	mov	r1, r3
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7ff ff60 	bl	801078c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80108cc:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	7f9b      	ldrb	r3, [r3, #30]
 80108d2:	4619      	mov	r1, r3
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f7ff ff9d 	bl	8010814 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80108da:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	8b5b      	ldrh	r3, [r3, #26]
 80108e0:	461a      	mov	r2, r3
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	8a9b      	ldrh	r3, [r3, #20]
 80108e6:	1ad2      	subs	r2, r2, r3
 80108e8:	4b93      	ldr	r3, [pc, #588]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80108ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	8b5b      	ldrh	r3, [r3, #26]
 80108f0:	461a      	mov	r2, r3
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	8a9b      	ldrh	r3, [r3, #20]
 80108f6:	1ad2      	subs	r2, r2, r3
 80108f8:	4b8f      	ldr	r3, [pc, #572]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80108fa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	8b1b      	ldrh	r3, [r3, #24]
 8010900:	461a      	mov	r2, r3
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	8a9b      	ldrh	r3, [r3, #20]
 8010906:	1ad2      	subs	r2, r2, r3
 8010908:	4b8b      	ldr	r3, [pc, #556]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801090a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801090c:	4a8a      	ldr	r2, [pc, #552]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	8adb      	ldrh	r3, [r3, #22]
 8010916:	461a      	mov	r2, r3
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	8a9b      	ldrh	r3, [r3, #20]
 801091c:	041b      	lsls	r3, r3, #16
 801091e:	431a      	orrs	r2, r3
 8010920:	4b85      	ldr	r3, [pc, #532]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010922:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	691a      	ldr	r2, [r3, #16]
 8010928:	4b83      	ldr	r3, [pc, #524]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801092a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	685a      	ldr	r2, [r3, #4]
 8010930:	4b81      	ldr	r3, [pc, #516]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010932:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801093c:	d035      	beq.n	80109aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 801093e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010942:	f200 80dc 	bhi.w	8010afe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
 8010946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801094a:	d014      	beq.n	8010976 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 801094c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010950:	f200 80d5 	bhi.w	8010afe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
 8010954:	2b80      	cmp	r3, #128	@ 0x80
 8010956:	d056      	beq.n	8010a06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15e>
 8010958:	2b80      	cmp	r3, #128	@ 0x80
 801095a:	f200 80d0 	bhi.w	8010afe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
 801095e:	2b40      	cmp	r3, #64	@ 0x40
 8010960:	f000 80b9 	beq.w	8010ad6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22e>
 8010964:	2b40      	cmp	r3, #64	@ 0x40
 8010966:	f200 80ca 	bhi.w	8010afe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
 801096a:	2b04      	cmp	r3, #4
 801096c:	d037      	beq.n	80109de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 801096e:	2b20      	cmp	r3, #32
 8010970:	f000 80b1 	beq.w	8010ad6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22e>
 8010974:	e0c3      	b.n	8010afe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x256>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	7f1b      	ldrb	r3, [r3, #28]
 801097a:	061a      	lsls	r2, r3, #24
 801097c:	496e      	ldr	r1, [pc, #440]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801097e:	4b6f      	ldr	r3, [pc, #444]	@ (8010b3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010980:	4313      	orrs	r3, r2
 8010982:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	330c      	adds	r3, #12
 8010988:	4c6b      	ldr	r4, [pc, #428]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801098a:	4618      	mov	r0, r3
 801098c:	f7ff fd90 	bl	80104b0 <_ZNK8touchgfx9colortypecvmEv>
 8010990:	4603      	mov	r3, r0
 8010992:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010994:	4a68      	ldr	r2, [pc, #416]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	691a      	ldr	r2, [r3, #16]
 801099e:	4b66      	ldr	r3, [pc, #408]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80109a0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80109a2:	4b65      	ldr	r3, [pc, #404]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80109a4:	4a66      	ldr	r2, [pc, #408]	@ (8010b40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80109a6:	601a      	str	r2, [r3, #0]
        break;
 80109a8:	e0c1      	b.n	8010b2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	7f1b      	ldrb	r3, [r3, #28]
 80109ae:	061a      	lsls	r2, r3, #24
 80109b0:	4961      	ldr	r1, [pc, #388]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80109b2:	4b64      	ldr	r3, [pc, #400]	@ (8010b44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80109b4:	4313      	orrs	r3, r2
 80109b6:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	330c      	adds	r3, #12
 80109bc:	4c5e      	ldr	r4, [pc, #376]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80109be:	4618      	mov	r0, r3
 80109c0:	f7ff fd76 	bl	80104b0 <_ZNK8touchgfx9colortypecvmEv>
 80109c4:	4603      	mov	r3, r0
 80109c6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80109c8:	4a5b      	ldr	r2, [pc, #364]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	691a      	ldr	r2, [r3, #16]
 80109d2:	4b59      	ldr	r3, [pc, #356]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80109d4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80109d6:	4b58      	ldr	r3, [pc, #352]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80109d8:	4a59      	ldr	r2, [pc, #356]	@ (8010b40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80109da:	601a      	str	r2, [r3, #0]
        break;
 80109dc:	e0a7      	b.n	8010b2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	7f1b      	ldrb	r3, [r3, #28]
 80109e2:	061a      	lsls	r2, r3, #24
 80109e4:	69bb      	ldr	r3, [r7, #24]
 80109e6:	4313      	orrs	r3, r2
 80109e8:	4a53      	ldr	r2, [pc, #332]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80109ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80109ee:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80109f0:	4a51      	ldr	r2, [pc, #324]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	691a      	ldr	r2, [r3, #16]
 80109fa:	4b4f      	ldr	r3, [pc, #316]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80109fc:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80109fe:	4b4e      	ldr	r3, [pc, #312]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a00:	4a4f      	ldr	r2, [pc, #316]	@ (8010b40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8010a02:	601a      	str	r2, [r3, #0]
        break;
 8010a04:	e093      	b.n	8010b2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8010a06:	2301      	movs	r3, #1
 8010a08:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	1d1a      	adds	r2, r3, #4
 8010a14:	4b48      	ldr	r3, [pc, #288]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a16:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	7f1b      	ldrb	r3, [r3, #28]
 8010a1c:	061a      	lsls	r2, r3, #24
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	4313      	orrs	r3, r2
 8010a22:	4a45      	ldr	r2, [pc, #276]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010a28:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010a2a:	4a43      	ldr	r2, [pc, #268]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	691a      	ldr	r2, [r3, #16]
 8010a34:	4b40      	ldr	r3, [pc, #256]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a36:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	881b      	ldrh	r3, [r3, #0]
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d002      	beq.n	8010a48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
 8010a42:	2b01      	cmp	r3, #1
 8010a44:	d00c      	beq.n	8010a60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>
 8010a46:	e01f      	b.n	8010a88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8010a48:	4b3b      	ldr	r3, [pc, #236]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a4a:	69da      	ldr	r2, [r3, #28]
 8010a4c:	4b3e      	ldr	r3, [pc, #248]	@ (8010b48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8010a4e:	4013      	ands	r3, r2
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	8852      	ldrh	r2, [r2, #2]
 8010a54:	3a01      	subs	r2, #1
 8010a56:	0212      	lsls	r2, r2, #8
 8010a58:	4937      	ldr	r1, [pc, #220]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a5a:	4313      	orrs	r3, r2
 8010a5c:	61cb      	str	r3, [r1, #28]
                break;
 8010a5e:	e01a      	b.n	8010a96 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ee>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	7f1b      	ldrb	r3, [r3, #28]
 8010a64:	2bff      	cmp	r3, #255	@ 0xff
 8010a66:	d101      	bne.n	8010a6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>
                {
                    blend = false;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8010a6c:	4b32      	ldr	r3, [pc, #200]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a6e:	69da      	ldr	r2, [r3, #28]
 8010a70:	4b35      	ldr	r3, [pc, #212]	@ (8010b48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8010a72:	4013      	ands	r3, r2
 8010a74:	68fa      	ldr	r2, [r7, #12]
 8010a76:	8852      	ldrh	r2, [r2, #2]
 8010a78:	3a01      	subs	r2, #1
 8010a7a:	0212      	lsls	r2, r2, #8
 8010a7c:	4313      	orrs	r3, r2
 8010a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a80:	f043 0310 	orr.w	r3, r3, #16
 8010a84:	61d3      	str	r3, [r2, #28]
                break;
 8010a86:	e006      	b.n	8010a96 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ee>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8010a88:	4b30      	ldr	r3, [pc, #192]	@ (8010b4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8010a8a:	4a31      	ldr	r2, [pc, #196]	@ (8010b50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8010a8c:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8010a90:	4830      	ldr	r0, [pc, #192]	@ (8010b54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8010a92:	f018 fc19 	bl	80292c8 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8010a96:	4b28      	ldr	r3, [pc, #160]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a98:	69db      	ldr	r3, [r3, #28]
 8010a9a:	4a27      	ldr	r2, [pc, #156]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010a9c:	f043 0320 	orr.w	r3, r3, #32
 8010aa0:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8010aa2:	bf00      	nop
 8010aa4:	4b24      	ldr	r3, [pc, #144]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010aa6:	69db      	ldr	r3, [r3, #28]
 8010aa8:	f003 0320 	and.w	r3, r3, #32
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	bf14      	ite	ne
 8010ab0:	2301      	movne	r3, #1
 8010ab2:	2300      	moveq	r3, #0
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d1f4      	bne.n	8010aa4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fc>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8010aba:	4b1f      	ldr	r3, [pc, #124]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010abc:	2210      	movs	r2, #16
 8010abe:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8010ac0:	7ffb      	ldrb	r3, [r7, #31]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d003      	beq.n	8010ace <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8010b40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8010aca:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
            }
        }
        break;
 8010acc:	e02f      	b.n	8010b2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010ace:	4b1a      	ldr	r3, [pc, #104]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010ad0:	4a21      	ldr	r2, [pc, #132]	@ (8010b58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8010ad2:	601a      	str	r2, [r3, #0]
        break;
 8010ad4:	e02b      	b.n	8010b2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	7f1b      	ldrb	r3, [r3, #28]
 8010ada:	061a      	lsls	r2, r3, #24
 8010adc:	69bb      	ldr	r3, [r7, #24]
 8010ade:	4313      	orrs	r3, r2
 8010ae0:	4a15      	ldr	r2, [pc, #84]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010ae6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010ae8:	4a13      	ldr	r2, [pc, #76]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	691a      	ldr	r2, [r3, #16]
 8010af2:	4b11      	ldr	r3, [pc, #68]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010af4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010af6:	4b10      	ldr	r3, [pc, #64]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010af8:	4a11      	ldr	r2, [pc, #68]	@ (8010b40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8010afa:	601a      	str	r2, [r3, #0]
        break;
 8010afc:	e017      	b.n	8010b2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	7f1b      	ldrb	r3, [r3, #28]
 8010b02:	061a      	lsls	r2, r3, #24
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	4313      	orrs	r3, r2
 8010b08:	4a0b      	ldr	r2, [pc, #44]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010b0e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	7f5a      	ldrb	r2, [r3, #29]
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	7f9b      	ldrb	r3, [r3, #30]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d003      	beq.n	8010b24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010b1c:	4b06      	ldr	r3, [pc, #24]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8010b58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8010b20:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
        }
        break;
 8010b22:	e003      	b.n	8010b2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x284>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8010b24:	4b04      	ldr	r3, [pc, #16]	@ (8010b38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8010b26:	f242 3201 	movw	r2, #8961	@ 0x2301
 8010b2a:	601a      	str	r2, [r3, #0]
        break;
 8010b2c:	bf00      	nop
    }
}
 8010b2e:	bf00      	nop
 8010b30:	3724      	adds	r7, #36	@ 0x24
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd90      	pop	{r4, r7, pc}
 8010b36:	bf00      	nop
 8010b38:	52001000 	.word	0x52001000
 8010b3c:	0002000a 	.word	0x0002000a
 8010b40:	00022301 	.word	0x00022301
 8010b44:	00020009 	.word	0x00020009
 8010b48:	ffff00ef 	.word	0xffff00ef
 8010b4c:	0802aec0 	.word	0x0802aec0
 8010b50:	0802aedc 	.word	0x0802aedc
 8010b54:	0802ae48 	.word	0x0802ae48
 8010b58:	00012301 	.word	0x00012301

08010b5c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8010b5c:	b590      	push	{r4, r7, lr}
 8010b5e:	b085      	sub	sp, #20
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	7f9b      	ldrb	r3, [r3, #30]
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f7ff fe51 	bl	8010814 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8010b72:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8010b74:	4a3a      	ldr	r2, [pc, #232]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	8adb      	ldrh	r3, [r3, #22]
 8010b7e:	461a      	mov	r2, r3
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	8a9b      	ldrh	r3, [r3, #20]
 8010b84:	041b      	lsls	r3, r3, #16
 8010b86:	431a      	orrs	r2, r3
 8010b88:	4b35      	ldr	r3, [pc, #212]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010b8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	691a      	ldr	r2, [r3, #16]
 8010b90:	4b33      	ldr	r3, [pc, #204]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010b92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	8b5b      	ldrh	r3, [r3, #26]
 8010b98:	461a      	mov	r2, r3
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	8a9b      	ldrh	r3, [r3, #20]
 8010b9e:	1ad2      	subs	r2, r2, r3
 8010ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010ba2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	2b08      	cmp	r3, #8
 8010baa:	d12d      	bne.n	8010c08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	8b5b      	ldrh	r3, [r3, #26]
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	8a9b      	ldrh	r3, [r3, #20]
 8010bb6:	1ad2      	subs	r2, r2, r3
 8010bb8:	4b29      	ldr	r3, [pc, #164]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010bba:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	8b5b      	ldrh	r3, [r3, #26]
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	8a9b      	ldrh	r3, [r3, #20]
 8010bc6:	1ad2      	subs	r2, r2, r3
 8010bc8:	4b25      	ldr	r3, [pc, #148]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010bca:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010bcc:	4a24      	ldr	r2, [pc, #144]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	7f1b      	ldrb	r3, [r3, #28]
 8010bd6:	061a      	lsls	r2, r3, #24
 8010bd8:	4921      	ldr	r1, [pc, #132]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010bda:	4b22      	ldr	r3, [pc, #136]	@ (8010c64 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	330c      	adds	r3, #12
 8010be4:	4c1e      	ldr	r4, [pc, #120]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7ff fc62 	bl	80104b0 <_ZNK8touchgfx9colortypecvmEv>
 8010bec:	4603      	mov	r3, r0
 8010bee:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	691a      	ldr	r2, [r3, #16]
 8010bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010bf6:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	691a      	ldr	r2, [r3, #16]
 8010bfc:	4b18      	ldr	r3, [pc, #96]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010bfe:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8010c00:	4b17      	ldr	r3, [pc, #92]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010c02:	4a19      	ldr	r2, [pc, #100]	@ (8010c68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8010c04:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
    }
}
 8010c06:	e027      	b.n	8010c58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8010c08:	4a15      	ldr	r2, [pc, #84]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8010c0e:	4b14      	ldr	r3, [pc, #80]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010c10:	2200      	movs	r2, #0
 8010c12:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	330c      	adds	r3, #12
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff fc49 	bl	80104b0 <_ZNK8touchgfx9colortypecvmEv>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	0a1b      	lsrs	r3, r3, #8
 8010c22:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	330c      	adds	r3, #12
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7ff fc40 	bl	80104b0 <_ZNK8touchgfx9colortypecvmEv>
 8010c30:	4603      	mov	r3, r0
 8010c32:	095b      	lsrs	r3, r3, #5
 8010c34:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010c38:	431c      	orrs	r4, r3
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	330c      	adds	r3, #12
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7ff fc36 	bl	80104b0 <_ZNK8touchgfx9colortypecvmEv>
 8010c44:	4603      	mov	r3, r0
 8010c46:	08db      	lsrs	r3, r3, #3
 8010c48:	f003 031f 	and.w	r3, r3, #31
 8010c4c:	4a04      	ldr	r2, [pc, #16]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010c4e:	4323      	orrs	r3, r4
 8010c50:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8010c52:	4b03      	ldr	r3, [pc, #12]	@ (8010c60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8010c54:	4a05      	ldr	r2, [pc, #20]	@ (8010c6c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8010c56:	601a      	str	r2, [r3, #0]
}
 8010c58:	bf00      	nop
 8010c5a:	3714      	adds	r7, #20
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd90      	pop	{r4, r7, pc}
 8010c60:	52001000 	.word	0x52001000
 8010c64:	00010009 	.word	0x00010009
 8010c68:	00022301 	.word	0x00022301
 8010c6c:	00032301 	.word	0x00032301

08010c70 <_ZN8touchgfx5paint8tearDownEv>:
 * @fn void tearDown();
 *
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
 8010c70:	b480      	push	{r7}
 8010c72:	af00      	add	r7, sp, #0
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8010c74:	bf00      	nop
 8010c76:	4b09      	ldr	r3, [pc, #36]	@ (8010c9c <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f003 0301 	and.w	r3, r3, #1
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	bf14      	ite	ne
 8010c82:	2301      	movne	r3, #1
 8010c84:	2300      	moveq	r3, #0
 8010c86:	b2db      	uxtb	r3, r3
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d1f4      	bne.n	8010c76 <_ZN8touchgfx5paint8tearDownEv+0x6>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8010c8c:	4b03      	ldr	r3, [pc, #12]	@ (8010c9c <_ZN8touchgfx5paint8tearDownEv+0x2c>)
 8010c8e:	2223      	movs	r2, #35	@ 0x23
 8010c90:	609a      	str	r2, [r3, #8]
}
 8010c92:	bf00      	nop
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr
 8010c9c:	52001000 	.word	0x52001000

08010ca0 <_ZN8touchgfx5paint9flushLineEPmi>:
/** Flushes a line of pixels in the data cache if used.
 *
 * @brief Flushes decoded RGB pixels when rendering compressed images
 */
void flushLine(uint32_t* addr, int sizebytes)
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b087      	sub	sp, #28
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
    // This function is used when decompressing data to flush
    // the currently decoded data in the cache to allow the DMA2D
    // to blend the pixels correctly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8010caa:	4b1b      	ldr	r3, [pc, #108]	@ (8010d18 <_ZN8touchgfx5paint9flushLineEPmi+0x78>)
 8010cac:	695b      	ldr	r3, [r3, #20]
 8010cae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	bf14      	ite	ne
 8010cb6:	2301      	movne	r3, #1
 8010cb8:	2300      	moveq	r3, #0
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d025      	beq.n	8010d0c <_ZN8touchgfx5paint9flushLineEPmi+0x6c>
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	617b      	str	r3, [r7, #20]
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	dd1d      	ble.n	8010d0a <_ZN8touchgfx5paint9flushLineEPmi+0x6a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	f003 021f 	and.w	r2, r3, #31
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	4413      	add	r3, r2
 8010cd8:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8010cde:	f3bf 8f4f 	dsb	sy
}
 8010ce2:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8010ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8010d18 <_ZN8touchgfx5paint9flushLineEPmi+0x78>)
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	3320      	adds	r3, #32
 8010cf0:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	3b20      	subs	r3, #32
 8010cf6:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	dcf2      	bgt.n	8010ce4 <_ZN8touchgfx5paint9flushLineEPmi+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
 8010cfe:	f3bf 8f4f 	dsb	sy
}
 8010d02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010d04:	f3bf 8f6f 	isb	sy
}
 8010d08:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8010d0a:	bf00      	nop
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8010d0c:	bf00      	nop
 8010d0e:	371c      	adds	r7, #28
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr
 8010d18:	e000ed00 	.word	0xe000ed00

08010d1c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
    }
}

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b085      	sub	sp, #20
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	60f8      	str	r0, [r7, #12]
 8010d24:	60b9      	str	r1, [r7, #8]
 8010d26:	607a      	str	r2, [r7, #4]
 8010d28:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8010d2a:	bf00      	nop
 8010d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	f003 0301 	and.w	r3, r3, #1
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	bf14      	ite	ne
 8010d38:	2301      	movne	r3, #1
 8010d3a:	2300      	moveq	r3, #0
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1f4      	bne.n	8010d2c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8010d42:	4b1a      	ldr	r3, [pc, #104]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d44:	2223      	movs	r2, #35	@ 0x23
 8010d46:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8010d48:	4b18      	ldr	r3, [pc, #96]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d4a:	2202      	movs	r2, #2
 8010d4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	041b      	lsls	r3, r3, #16
 8010d52:	4a16      	ldr	r2, [pc, #88]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d54:	f043 0301 	orr.w	r3, r3, #1
 8010d58:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8010d5a:	4a14      	ldr	r2, [pc, #80]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8010d60:	4a12      	ldr	r2, [pc, #72]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	60d3      	str	r3, [r2, #12]

    if (alpha < 0xFF)
 8010d66:	78fb      	ldrb	r3, [r7, #3]
 8010d68:	2bff      	cmp	r3, #255	@ 0xff
 8010d6a:	d00f      	beq.n	8010d8c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x70>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8010d6c:	78fb      	ldrb	r3, [r7, #3]
 8010d6e:	061b      	lsls	r3, r3, #24
 8010d70:	4a0e      	ldr	r2, [pc, #56]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d72:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 8010d76:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010d78:	4b0c      	ldr	r3, [pc, #48]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d7a:	2202      	movs	r2, #2
 8010d7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8010d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	6153      	str	r3, [r2, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8010d84:	4b09      	ldr	r3, [pc, #36]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d86:	4a0a      	ldr	r2, [pc, #40]	@ (8010db0 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x94>)
 8010d88:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8010d8a:	e008      	b.n	8010d9e <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8010d8c:	78fb      	ldrb	r3, [r7, #3]
 8010d8e:	061b      	lsls	r3, r3, #24
 8010d90:	4a06      	ldr	r2, [pc, #24]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d92:	f043 1302 	orr.w	r3, r3, #131074	@ 0x20002
 8010d96:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8010d98:	4b04      	ldr	r3, [pc, #16]	@ (8010dac <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x90>)
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	601a      	str	r2, [r3, #0]
}
 8010d9e:	bf00      	nop
 8010da0:	3714      	adds	r7, #20
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr
 8010daa:	bf00      	nop
 8010dac:	52001000 	.word	0x52001000
 8010db0:	00020001 	.word	0x00020001

08010db4 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	60f8      	str	r0, [r7, #12]
 8010dbc:	60b9      	str	r1, [r7, #8]
 8010dbe:	607a      	str	r2, [r7, #4]
 8010dc0:	70fb      	strb	r3, [r7, #3]
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8010dc2:	bf00      	nop
 8010dc4:	4b18      	ldr	r3, [pc, #96]	@ (8010e28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f003 0301 	and.w	r3, r3, #1
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	bf14      	ite	ne
 8010dd0:	2301      	movne	r3, #1
 8010dd2:	2300      	moveq	r3, #0
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d1f4      	bne.n	8010dc4 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x10>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8010dda:	4b13      	ldr	r3, [pc, #76]	@ (8010e28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010ddc:	2223      	movs	r2, #35	@ 0x23
 8010dde:	609a      	str	r2, [r3, #8]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8010de0:	4b11      	ldr	r3, [pc, #68]	@ (8010e28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010de2:	2202      	movs	r2, #2
 8010de4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	041b      	lsls	r3, r3, #16
 8010dea:	4a0f      	ldr	r2, [pc, #60]	@ (8010e28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010dec:	f043 0301 	orr.w	r3, r3, #1
 8010df0:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8010df2:	4a0d      	ldr	r2, [pc, #52]	@ (8010e28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8010df8:	4a0b      	ldr	r2, [pc, #44]	@ (8010e28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	60d3      	str	r3, [r2, #12]

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8010dfe:	78fb      	ldrb	r3, [r7, #3]
 8010e00:	061b      	lsls	r3, r3, #24
 8010e02:	4a09      	ldr	r2, [pc, #36]	@ (8010e28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010e08:	61d3      	str	r3, [r2, #28]

    /* Write DMA2D BGPFCCR register */
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010e0a:	4b07      	ldr	r3, [pc, #28]	@ (8010e28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010e0c:	2202      	movs	r2, #2
 8010e0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8010e10:	4a05      	ldr	r2, [pc, #20]	@ (8010e28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	6153      	str	r3, [r2, #20]

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8010e16:	4b04      	ldr	r3, [pc, #16]	@ (8010e28 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x74>)
 8010e18:	4a04      	ldr	r2, [pc, #16]	@ (8010e2c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x78>)
 8010e1a:	601a      	str	r2, [r3, #0]
}
 8010e1c:	bf00      	nop
 8010e1e:	3714      	adds	r7, #20
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr
 8010e28:	52001000 	.word	0x52001000
 8010e2c:	00020001 	.word	0x00020001

08010e30 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8010e38:	4a04      	ldr	r2, [pc, #16]	@ (8010e4c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6013      	str	r3, [r2, #0]
    }
 8010e3e:	bf00      	nop
 8010e40:	370c      	adds	r7, #12
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr
 8010e4a:	bf00      	nop
 8010e4c:	2400665c 	.word	0x2400665c

08010e50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	607a      	str	r2, [r7, #4]
 8010e5c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8010e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8010e8c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	68ba      	ldr	r2, [r7, #8]
 8010e68:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	683a      	ldr	r2, [r7, #0]
 8010e74:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	69ba      	ldr	r2, [r7, #24]
 8010e7a:	611a      	str	r2, [r3, #16]
    {
    }
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3714      	adds	r7, #20
 8010e82:	46bd      	mov	sp, r7
 8010e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e88:	4770      	bx	lr
 8010e8a:	bf00      	nop
 8010e8c:	0802b7c0 	.word	0x0802b7c0

08010e90 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
    {
 8010e98:	4a04      	ldr	r2, [pc, #16]	@ (8010eac <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	601a      	str	r2, [r3, #0]
    }
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	370c      	adds	r7, #12
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr
 8010eac:	0802b7c0 	.word	0x0802b7c0

08010eb0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
    }
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f7ff ffe9 	bl	8010e90 <_ZN8touchgfx7MVPHeapD1Ev>
 8010ebe:	2114      	movs	r1, #20
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f018 f834 	bl	8028f2e <_ZdlPvj>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
    {
 8010ed8:	4a04      	ldr	r2, [pc, #16]	@ (8010eec <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	601a      	str	r2, [r3, #0]
    }
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	0802c3f0 	.word	0x0802c3f0

08010ef0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
    }
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f7ff ffe9 	bl	8010ed0 <_ZN8touchgfx3LCDD1Ev>
 8010efe:	210c      	movs	r1, #12
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f018 f814 	bl	8028f2e <_ZdlPvj>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
            : startX(0),
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	801a      	strh	r2, [r3, #0]
              startY(0),
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	805a      	strh	r2, [r3, #2]
              downX(0),
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	809a      	strh	r2, [r3, #4]
              downY(0),
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2200      	movs	r2, #0
 8010f34:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2200      	movs	r2, #0
 8010f46:	739a      	strb	r2, [r3, #14]
        {
        }
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	370c      	adds	r7, #12
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b082      	sub	sp, #8
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7ff ffd5 	bl	8010f10 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	611a      	str	r2, [r3, #16]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	829a      	strh	r2, [r3, #20]
    {
    }
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	4618      	mov	r0, r3
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
 8010f88:	603b      	str	r3, [r7, #0]
          maxBlockLines(20)
 8010f8a:	4a65      	ldr	r2, [pc, #404]	@ (8011120 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a4>)
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	68ba      	ldr	r2, [r7, #8]
 8010f94:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	683a      	ldr	r2, [r7, #0]
 8010fa0:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2200      	movs	r2, #0
 8010fac:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	619a      	str	r2, [r3, #24]
          gestures(),
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	331c      	adds	r3, #28
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7ff ffcc 	bl	8010f56 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2200      	movs	r2, #0
 8010fca:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2201      	movs	r2, #1
 8010fea:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	2200      	movs	r2, #0
 8011002:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	3350      	adds	r3, #80	@ 0x50
 8011008:	4618      	mov	r0, r3
 801100a:	f7fc ff88 	bl	800df1e <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2200      	movs	r2, #0
 8011012:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	2200      	movs	r2, #0
 801101a:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2200      	movs	r2, #0
 8011020:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2200      	movs	r2, #0
 8011026:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2201      	movs	r2, #1
 801102c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2200      	movs	r2, #0
 8011034:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	2200      	movs	r2, #0
 801103c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2201      	movs	r2, #1
 8011044:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2200      	movs	r2, #0
 801104c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	2200      	movs	r2, #0
 8011054:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2200      	movs	r2, #0
 801105c:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2200      	movs	r2, #0
 8011064:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2200      	movs	r2, #0
 801106c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2200      	movs	r2, #0
 8011074:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2200      	movs	r2, #0
 801107a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	2200      	movs	r2, #0
 8011082:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2201      	movs	r2, #1
 801108a:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE),
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2201      	movs	r2, #1
 8011092:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
          isFrontPorchEntered(false),
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2200      	movs	r2, #0
 801109a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
          numberOfBlocks(4),
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2204      	movs	r2, #4
 80110a2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 80110a6:	8bbb      	ldrh	r3, [r7, #28]
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 80110ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 80110c0:	4a18      	ldr	r2, [pc, #96]	@ (8011124 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1a8>)
 80110c2:	fba2 2303 	umull	r2, r3, r2, r3
 80110c6:	085b      	lsrs	r3, r3, #1
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
          maxBlockLines(20)
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2214      	movs	r2, #20
 80110d4:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
        instance = this;
 80110d8:	4a13      	ldr	r2, [pc, #76]	@ (8011128 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1ac>)
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80110de:	4a13      	ldr	r2, [pc, #76]	@ (801112c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 80110e0:	8b3b      	ldrh	r3, [r7, #24]
 80110e2:	8013      	strh	r3, [r2, #0]
 80110e4:	4b11      	ldr	r3, [pc, #68]	@ (801112c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b0>)
 80110e6:	881a      	ldrh	r2, [r3, #0]
 80110e8:	4b11      	ldr	r3, [pc, #68]	@ (8011130 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b4>)
 80110ea:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80110ec:	4a11      	ldr	r2, [pc, #68]	@ (8011134 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 80110ee:	8bbb      	ldrh	r3, [r7, #28]
 80110f0:	8013      	strh	r3, [r2, #0]
 80110f2:	4b10      	ldr	r3, [pc, #64]	@ (8011134 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1b8>)
 80110f4:	881a      	ldrh	r2, [r3, #0]
 80110f6:	4b10      	ldr	r3, [pc, #64]	@ (8011138 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1bc>)
 80110f8:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80110fa:	4b10      	ldr	r3, [pc, #64]	@ (801113c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x1c0>)
 80110fc:	2200      	movs	r2, #0
 80110fe:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011100:	8b3a      	ldrh	r2, [r7, #24]
 8011102:	8bbb      	ldrh	r3, [r7, #28]
 8011104:	429a      	cmp	r2, r3
 8011106:	bf34      	ite	cc
 8011108:	2301      	movcc	r3, #1
 801110a:	2300      	movcs	r3, #0
 801110c:	b2db      	uxtb	r3, r3
 801110e:	461a      	mov	r2, r3
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	4618      	mov	r0, r3
 801111a:	3710      	adds	r7, #16
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	0802bc94 	.word	0x0802bc94
 8011124:	aaaaaaab 	.word	0xaaaaaaab
 8011128:	24006600 	.word	0x24006600
 801112c:	240065f4 	.word	0x240065f4
 8011130:	240065fa 	.word	0x240065fa
 8011134:	240065f6 	.word	0x240065f6
 8011138:	240065fc 	.word	0x240065fc
 801113c:	240065f8 	.word	0x240065f8

08011140 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
    {
        app.gotomainScreenNoTransition();
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	4618      	mov	r0, r3
 801114e:	f7fc fc6b 	bl	800da28 <_ZN23FrontendApplicationBase26gotomainScreenNoTransitionEv>
    }
 8011152:	bf00      	nop
 8011154:	3708      	adds	r7, #8
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
	...

0801115c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 801115c:	b580      	push	{r7, lr}
 801115e:	b086      	sub	sp, #24
 8011160:	af02      	add	r7, sp, #8
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
 8011168:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801116a:	68f8      	ldr	r0, [r7, #12]
 801116c:	69bb      	ldr	r3, [r7, #24]
 801116e:	9300      	str	r3, [sp, #0]
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	68b9      	ldr	r1, [r7, #8]
 8011176:	f7ff fe6b 	bl	8010e50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801117a:	4a04      	ldr	r2, [pc, #16]	@ (801118c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	601a      	str	r2, [r3, #0]
    {

    }
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	4618      	mov	r0, r3
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	0802b7ac 	.word	0x0802b7ac

08011190 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8011190:	b580      	push	{r7, lr}
 8011192:	b082      	sub	sp, #8
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	4a05      	ldr	r2, [pc, #20]	@ (80111b0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	601a      	str	r2, [r3, #0]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7ff fe75 	bl	8010e90 <_ZN8touchgfx7MVPHeapD1Ev>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	4618      	mov	r0, r3
 80111aa:	3708      	adds	r7, #8
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	0802b7ac 	.word	0x0802b7ac

080111b4 <_ZN16FrontendHeapBaseD0Ev>:
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f7ff ffe7 	bl	8011190 <_ZN16FrontendHeapBaseD1Ev>
 80111c2:	2114      	movs	r1, #20
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f017 feb2 	bl	8028f2e <_ZdlPvj>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4618      	mov	r0, r3
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	4a05      	ldr	r2, [pc, #20]	@ (80111f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	601a      	str	r2, [r3, #0]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f000 fe2c 	bl	8011e42 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4618      	mov	r0, r3
 80111ee:	3708      	adds	r7, #8
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	0802b778 	.word	0x0802b778

080111f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7ff ffe7 	bl	80111d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011206:	2118      	movs	r1, #24
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f017 fe90 	bl	8028f2e <_ZdlPvj>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	4a05      	ldr	r2, [pc, #20]	@ (8011238 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	601a      	str	r2, [r3, #0]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	4618      	mov	r0, r3
 801122a:	f000 fe0a 	bl	8011e42 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4618      	mov	r0, r3
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	0802b744 	.word	0x0802b744

0801123c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f7ff ffe7 	bl	8011218 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801124a:	f240 5104 	movw	r1, #1284	@ 0x504
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f017 fe6d 	bl	8028f2e <_ZdlPvj>
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	4618      	mov	r0, r3
 8011258:	3708      	adds	r7, #8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
	...

08011260 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	4a05      	ldr	r2, [pc, #20]	@ (8011280 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	601a      	str	r2, [r3, #0]
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4618      	mov	r0, r3
 8011272:	f000 fde6 	bl	8011e42 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	4618      	mov	r0, r3
 801127a:	3708      	adds	r7, #8
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	0802b710 	.word	0x0802b710

08011284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7ff ffe7 	bl	8011260 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011292:	2114      	movs	r1, #20
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f017 fe4a 	bl	8028f2e <_ZdlPvj>
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	4618      	mov	r0, r3
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	4a10      	ldr	r2, [pc, #64]	@ (80112f0 <_ZN12FrontendHeapD1Ev+0x4c>)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	601a      	str	r2, [r3, #0]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7fe fa51 	bl	800f760 <_ZN19FrontendApplicationD1Ev>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7ff ffcb 	bl	8011260 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	332c      	adds	r3, #44	@ 0x2c
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7ff ffa2 	bl	8011218 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	3314      	adds	r3, #20
 80112d8:	4618      	mov	r0, r3
 80112da:	f7ff ff7b 	bl	80111d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7ff ff55 	bl	8011190 <_ZN16FrontendHeapBaseD1Ev>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4618      	mov	r0, r3
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	0802b6fc 	.word	0x0802b6fc

080112f4 <_ZN12FrontendHeapD0Ev>:
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f7ff ffd1 	bl	80112a4 <_ZN12FrontendHeapD1Ev>
 8011302:	f240 61a4 	movw	r1, #1700	@ 0x6a4
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f017 fe11 	bl	8028f2e <_ZdlPvj>
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	4618      	mov	r0, r3
 8011310:	3708      	adds	r7, #8
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
	...

08011318 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8011318:	b580      	push	{r7, lr}
 801131a:	af00      	add	r7, sp, #0
 801131c:	4801      	ldr	r0, [pc, #4]	@ (8011324 <__tcf_0+0xc>)
 801131e:	f7ff ffc1 	bl	80112a4 <_ZN12FrontendHeapD1Ev>
 8011322:	bd80      	pop	{r7, pc}
 8011324:	24005090 	.word	0x24005090

08011328 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8011328:	b580      	push	{r7, lr}
 801132a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801132c:	4b11      	ldr	r3, [pc, #68]	@ (8011374 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f3bf 8f5b 	dmb	ish
 8011334:	f003 0301 	and.w	r3, r3, #1
 8011338:	2b00      	cmp	r3, #0
 801133a:	bf0c      	ite	eq
 801133c:	2301      	moveq	r3, #1
 801133e:	2300      	movne	r3, #0
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	d013      	beq.n	801136e <_ZN12FrontendHeap11getInstanceEv+0x46>
 8011346:	480b      	ldr	r0, [pc, #44]	@ (8011374 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8011348:	f7f1 fb9c 	bl	8002a84 <__cxa_guard_acquire>
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	bf14      	ite	ne
 8011352:	2301      	movne	r3, #1
 8011354:	2300      	moveq	r3, #0
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b00      	cmp	r3, #0
 801135a:	d008      	beq.n	801136e <_ZN12FrontendHeap11getInstanceEv+0x46>
 801135c:	4806      	ldr	r0, [pc, #24]	@ (8011378 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801135e:	f000 f845 	bl	80113ec <_ZN12FrontendHeapC1Ev>
 8011362:	4806      	ldr	r0, [pc, #24]	@ (801137c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8011364:	f017 ffce 	bl	8029304 <atexit>
 8011368:	4802      	ldr	r0, [pc, #8]	@ (8011374 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801136a:	f7f1 fbf3 	bl	8002b54 <__cxa_guard_release>
        return instance;
 801136e:	4b02      	ldr	r3, [pc, #8]	@ (8011378 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8011370:	4618      	mov	r0, r3
 8011372:	bd80      	pop	{r7, pc}
 8011374:	24005734 	.word	0x24005734
 8011378:	24005090 	.word	0x24005090
 801137c:	08011319 	.word	0x08011319

08011380 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	4618      	mov	r0, r3
 801138c:	f000 fd5a 	bl	8011e44 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011390:	4a03      	ldr	r2, [pc, #12]	@ (80113a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	601a      	str	r2, [r3, #0]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	4618      	mov	r0, r3
 801139a:	3708      	adds	r7, #8
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	0802b778 	.word	0x0802b778

080113a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f000 fd48 	bl	8011e44 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80113b4:	4a03      	ldr	r2, [pc, #12]	@ (80113c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	601a      	str	r2, [r3, #0]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	4618      	mov	r0, r3
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	0802b744 	.word	0x0802b744

080113c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4618      	mov	r0, r3
 80113d4:	f000 fd36 	bl	8011e44 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80113d8:	4a03      	ldr	r2, [pc, #12]	@ (80113e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	601a      	str	r2, [r3, #0]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	4618      	mov	r0, r3
 80113e2:	3708      	adds	r7, #8
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}
 80113e8:	0802b710 	.word	0x0802b710

080113ec <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80113ec:	b590      	push	{r4, r7, lr}
 80113ee:	b085      	sub	sp, #20
 80113f0:	af02      	add	r7, sp, #8
 80113f2:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f103 0114 	add.w	r1, r3, #20
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f503 64a6 	add.w	r4, r3, #1328	@ 0x530
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f203 5344 	addw	r3, r3, #1348	@ 0x544
        app(model, *this)
 801140e:	9300      	str	r3, [sp, #0]
 8011410:	4623      	mov	r3, r4
 8011412:	f7ff fea3 	bl	801115c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8011416:	4a18      	ldr	r2, [pc, #96]	@ (8011478 <_ZN12FrontendHeapC1Ev+0x8c>)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	601a      	str	r2, [r3, #0]
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	3314      	adds	r3, #20
 8011420:	4618      	mov	r0, r3
 8011422:	f7ff ffad 	bl	8011380 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	332c      	adds	r3, #44	@ 0x2c
 801142a:	4618      	mov	r0, r3
 801142c:	f7ff ffba 	bl	80113a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 8011436:	4618      	mov	r0, r3
 8011438:	f7ff ffc6 	bl	80113c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f203 5044 	addw	r0, r3, #1348	@ 0x544
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	4619      	mov	r1, r3
 801144c:	f7fe f9be 	bl	800f7cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8011456:	4618      	mov	r0, r3
 8011458:	f7fe fc02 	bl	800fc60 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 8011464:	4619      	mov	r1, r3
 8011466:	4610      	mov	r0, r2
 8011468:	f7ff fe6a 	bl	8011140 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	4618      	mov	r0, r3
 8011470:	370c      	adds	r7, #12
 8011472:	46bd      	mov	sp, r7
 8011474:	bd90      	pop	{r4, r7, pc}
 8011476:	bf00      	nop
 8011478:	0802b6fc 	.word	0x0802b6fc

0801147c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 801147c:	b580      	push	{r7, lr}
 801147e:	b086      	sub	sp, #24
 8011480:	af02      	add	r7, sp, #8
 8011482:	60f8      	str	r0, [r7, #12]
 8011484:	60b9      	str	r1, [r7, #8]
 8011486:	607a      	str	r2, [r7, #4]
 8011488:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 801148a:	68f8      	ldr	r0, [r7, #12]
 801148c:	8bbb      	ldrh	r3, [r7, #28]
 801148e:	9301      	str	r3, [sp, #4]
 8011490:	8b3b      	ldrh	r3, [r7, #24]
 8011492:	9300      	str	r3, [sp, #0]
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	68b9      	ldr	r1, [r7, #8]
 801149a:	f7ff fd6f 	bl	8010f7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801149e:	4a04      	ldr	r2, [pc, #16]	@ (80114b0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	601a      	str	r2, [r3, #0]
    }
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	4618      	mov	r0, r3
 80114a8:	3710      	adds	r7, #16
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
 80114ae:	bf00      	nop
 80114b0:	0802b7d0 	.word	0x0802b7d0

080114b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b086      	sub	sp, #24
 80114b8:	af02      	add	r7, sp, #8
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	607a      	str	r2, [r7, #4]
 80114c0:	603b      	str	r3, [r7, #0]
 80114c2:	68f8      	ldr	r0, [r7, #12]
 80114c4:	8bbb      	ldrh	r3, [r7, #28]
 80114c6:	9301      	str	r3, [sp, #4]
 80114c8:	8b3b      	ldrh	r3, [r7, #24]
 80114ca:	9300      	str	r3, [sp, #0]
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	687a      	ldr	r2, [r7, #4]
 80114d0:	68b9      	ldr	r1, [r7, #8]
 80114d2:	f7ff ffd3 	bl	801147c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80114d6:	4a04      	ldr	r2, [pc, #16]	@ (80114e8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	601a      	str	r2, [r3, #0]
    }
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	4618      	mov	r0, r3
 80114e0:	3710      	adds	r7, #16
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	0802b59c 	.word	0x0802b59c

080114ec <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	4a04      	ldr	r2, [pc, #16]	@ (8011508 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	601a      	str	r2, [r3, #0]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	4618      	mov	r0, r3
 80114fe:	370c      	adds	r7, #12
 8011500:	46bd      	mov	sp, r7
 8011502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011506:	4770      	bx	lr
 8011508:	0802b584 	.word	0x0802b584

0801150c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	4618      	mov	r0, r3
 8011518:	f7ff ffe8 	bl	80114ec <_ZN8touchgfx15TouchControllerC1Ev>
 801151c:	4a03      	ldr	r2, [pc, #12]	@ (801152c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	601a      	str	r2, [r3, #0]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	4618      	mov	r0, r3
 8011526:	3708      	adds	r7, #8
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}
 801152c:	0802b56c 	.word	0x0802b56c

08011530 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8011530:	b590      	push	{r4, r7, lr}
 8011532:	b085      	sub	sp, #20
 8011534:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8011536:	f7fd ff31 	bl	800f39c <_ZN14BitmapDatabase11getInstanceEv>
 801153a:	4604      	mov	r4, r0
 801153c:	f7fd ff38 	bl	800f3b0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8011540:	4603      	mov	r3, r0
 8011542:	4619      	mov	r1, r3
 8011544:	2300      	movs	r3, #0
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	2300      	movs	r3, #0
 801154a:	2200      	movs	r2, #0
 801154c:	4620      	mov	r0, r4
 801154e:	f009 f99b 	bl	801a888 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8011552:	4809      	ldr	r0, [pc, #36]	@ (8011578 <touchgfx_init+0x48>)
 8011554:	f7ff fc6c 	bl	8010e30 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8011558:	2000      	movs	r0, #0
 801155a:	f7fe f86d 	bl	800f638 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801155e:	4807      	ldr	r0, [pc, #28]	@ (801157c <touchgfx_init+0x4c>)
 8011560:	f009 f8fa 	bl	801a758 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8011564:	f7ff fee0 	bl	8011328 <_ZN12FrontendHeap11getInstanceEv>
 8011568:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801156a:	4805      	ldr	r0, [pc, #20]	@ (8011580 <touchgfx_init+0x50>)
 801156c:	f7fe fdfa 	bl	8010164 <_ZN11TouchGFXHAL10initializeEv>
}
 8011570:	bf00      	nop
 8011572:	370c      	adds	r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	bd90      	pop	{r4, r7, pc}
 8011578:	24006568 	.word	0x24006568
 801157c:	2400001c 	.word	0x2400001c
 8011580:	2400656c 	.word	0x2400656c

08011584 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8011584:	b480      	push	{r7}
 8011586:	af00      	add	r7, sp, #0
}
 8011588:	bf00      	nop
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr
	...

08011594 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8011594:	b580      	push	{r7, lr}
 8011596:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8011598:	4802      	ldr	r0, [pc, #8]	@ (80115a4 <touchgfx_taskEntry+0x10>)
 801159a:	f001 fcbc 	bl	8012f16 <_ZN8touchgfx3HAL9taskEntryEv>
}
 801159e:	bf00      	nop
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	2400656c 	.word	0x2400656c

080115a8 <_Z41__static_initialization_and_destruction_0v>:
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af02      	add	r7, sp, #8
static STM32TouchController tc;
 80115ae:	480c      	ldr	r0, [pc, #48]	@ (80115e0 <_Z41__static_initialization_and_destruction_0v+0x38>)
 80115b0:	f7ff ffac 	bl	801150c <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80115b4:	480b      	ldr	r0, [pc, #44]	@ (80115e4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80115b6:	f7ff f85f 	bl	8010678 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80115ba:	480b      	ldr	r0, [pc, #44]	@ (80115e8 <_Z41__static_initialization_and_destruction_0v+0x40>)
 80115bc:	f00e fa6c 	bl	801fa98 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80115c0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80115c4:	9301      	str	r3, [sp, #4]
 80115c6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80115ca:	9300      	str	r3, [sp, #0]
 80115cc:	4b04      	ldr	r3, [pc, #16]	@ (80115e0 <_Z41__static_initialization_and_destruction_0v+0x38>)
 80115ce:	4a06      	ldr	r2, [pc, #24]	@ (80115e8 <_Z41__static_initialization_and_destruction_0v+0x40>)
 80115d0:	4904      	ldr	r1, [pc, #16]	@ (80115e4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80115d2:	4806      	ldr	r0, [pc, #24]	@ (80115ec <_Z41__static_initialization_and_destruction_0v+0x44>)
 80115d4:	f7ff ff6e 	bl	80114b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80115d8:	bf00      	nop
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	24005738 	.word	0x24005738
 80115e4:	2400573c 	.word	0x2400573c
 80115e8:	240064dc 	.word	0x240064dc
 80115ec:	2400656c 	.word	0x2400656c

080115f0 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	4a05      	ldr	r2, [pc, #20]	@ (8011610 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	601a      	str	r2, [r3, #0]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4618      	mov	r0, r3
 8011602:	f7ff fc65 	bl	8010ed0 <_ZN8touchgfx3LCDD1Ev>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	4618      	mov	r0, r3
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	0802c878 	.word	0x0802c878

08011614 <_ZN8touchgfx8LCD16bppD0Ev>:
 8011614:	b580      	push	{r7, lr}
 8011616:	b082      	sub	sp, #8
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f7ff ffe7 	bl	80115f0 <_ZN8touchgfx8LCD16bppD1Ev>
 8011622:	218c      	movs	r1, #140	@ 0x8c
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f017 fc82 	bl	8028f2e <_ZdlPvj>
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	4618      	mov	r0, r3
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <_Z41__static_initialization_and_destruction_1v>:
 8011634:	b580      	push	{r7, lr}
 8011636:	af00      	add	r7, sp, #0
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8011638:	4808      	ldr	r0, [pc, #32]	@ (801165c <_Z41__static_initialization_and_destruction_1v+0x28>)
 801163a:	f7fe fe2b 	bl	8010294 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801163e:	4808      	ldr	r0, [pc, #32]	@ (8011660 <_Z41__static_initialization_and_destruction_1v+0x2c>)
 8011640:	f7fb fcb8 	bl	800cfb4 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8011644:	4807      	ldr	r0, [pc, #28]	@ (8011664 <_Z41__static_initialization_and_destruction_1v+0x30>)
 8011646:	f7ff ffd3 	bl	80115f0 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 801164a:	4807      	ldr	r0, [pc, #28]	@ (8011668 <_Z41__static_initialization_and_destruction_1v+0x34>)
 801164c:	f7ff f83e 	bl	80106cc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8011650:	4806      	ldr	r0, [pc, #24]	@ (801166c <_Z41__static_initialization_and_destruction_1v+0x38>)
 8011652:	f7fe fb55 	bl	800fd00 <_ZN20STM32TouchControllerD1Ev>
}
 8011656:	bf00      	nop
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	2400656c 	.word	0x2400656c
 8011660:	2400001c 	.word	0x2400001c
 8011664:	240064dc 	.word	0x240064dc
 8011668:	2400573c 	.word	0x2400573c
 801166c:	24005738 	.word	0x24005738

08011670 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8011670:	b480      	push	{r7}
 8011672:	b083      	sub	sp, #12
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8011678:	2301      	movs	r3, #1
    }
 801167a:	4618      	mov	r0, r3
 801167c:	370c      	adds	r7, #12
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr

08011686 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8011686:	b480      	push	{r7}
 8011688:	b083      	sub	sp, #12
 801168a:	af00      	add	r7, sp, #0
 801168c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801168e:	230c      	movs	r3, #12
    }
 8011690:	4618      	mov	r0, r3
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 801169c:	b480      	push	{r7}
 801169e:	b083      	sub	sp, #12
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	460b      	mov	r3, r1
 80116a6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80116a8:	887a      	ldrh	r2, [r7, #2]
 80116aa:	4613      	mov	r3, r2
 80116ac:	005b      	lsls	r3, r3, #1
 80116ae:	4413      	add	r3, r2
 80116b0:	009b      	lsls	r3, r3, #2
 80116b2:	3308      	adds	r3, #8
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	4413      	add	r3, r2
    }
 80116b8:	4618      	mov	r0, r3
 80116ba:	370c      	adds	r7, #12
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr

080116c4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80116c4:	b480      	push	{r7}
 80116c6:	b083      	sub	sp, #12
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	460b      	mov	r3, r1
 80116ce:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80116d0:	887a      	ldrh	r2, [r7, #2]
 80116d2:	4613      	mov	r3, r2
 80116d4:	005b      	lsls	r3, r3, #1
 80116d6:	4413      	add	r3, r2
 80116d8:	009b      	lsls	r3, r3, #2
 80116da:	3308      	adds	r3, #8
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	4413      	add	r3, r2
    }
 80116e0:	4618      	mov	r0, r3
 80116e2:	370c      	adds	r7, #12
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr

080116ec <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80116ec:	b480      	push	{r7}
 80116ee:	b083      	sub	sp, #12
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80116f4:	2301      	movs	r3, #1
    }
 80116f6:	4618      	mov	r0, r3
 80116f8:	370c      	adds	r7, #12
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr

08011702 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8011702:	b480      	push	{r7}
 8011704:	b083      	sub	sp, #12
 8011706:	af00      	add	r7, sp, #0
 8011708:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801170a:	f240 43fc 	movw	r3, #1276	@ 0x4fc
    }
 801170e:	4618      	mov	r0, r3
 8011710:	370c      	adds	r7, #12
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr

0801171a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801171a:	b480      	push	{r7}
 801171c:	b083      	sub	sp, #12
 801171e:	af00      	add	r7, sp, #0
 8011720:	6078      	str	r0, [r7, #4]
 8011722:	460b      	mov	r3, r1
 8011724:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011726:	887b      	ldrh	r3, [r7, #2]
 8011728:	f240 42fc 	movw	r2, #1276	@ 0x4fc
 801172c:	fb02 f303 	mul.w	r3, r2, r3
 8011730:	3308      	adds	r3, #8
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	4413      	add	r3, r2
    }
 8011736:	4618      	mov	r0, r3
 8011738:	370c      	adds	r7, #12
 801173a:	46bd      	mov	sp, r7
 801173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011740:	4770      	bx	lr

08011742 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8mainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8011742:	b480      	push	{r7}
 8011744:	b083      	sub	sp, #12
 8011746:	af00      	add	r7, sp, #0
 8011748:	6078      	str	r0, [r7, #4]
 801174a:	460b      	mov	r3, r1
 801174c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801174e:	887b      	ldrh	r3, [r7, #2]
 8011750:	f240 42fc 	movw	r2, #1276	@ 0x4fc
 8011754:	fb02 f303 	mul.w	r3, r2, r3
 8011758:	3308      	adds	r3, #8
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	4413      	add	r3, r2
    }
 801175e:	4618      	mov	r0, r3
 8011760:	370c      	adds	r7, #12
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr

0801176a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801176a:	b480      	push	{r7}
 801176c:	b083      	sub	sp, #12
 801176e:	af00      	add	r7, sp, #0
 8011770:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8011772:	2301      	movs	r3, #1
    }
 8011774:	4618      	mov	r0, r3
 8011776:	370c      	adds	r7, #12
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr

08011780 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8011780:	b480      	push	{r7}
 8011782:	b083      	sub	sp, #12
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8011788:	2310      	movs	r3, #16
    }
 801178a:	4618      	mov	r0, r3
 801178c:	370c      	adds	r7, #12
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr

08011796 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8011796:	b480      	push	{r7}
 8011798:	b083      	sub	sp, #12
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
 801179e:	460b      	mov	r3, r1
 80117a0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80117a2:	887b      	ldrh	r3, [r7, #2]
 80117a4:	011b      	lsls	r3, r3, #4
 80117a6:	3308      	adds	r3, #8
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	4413      	add	r3, r2
    }
 80117ac:	4618      	mov	r0, r3
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13mainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	460b      	mov	r3, r1
 80117c2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80117c4:	887b      	ldrh	r3, [r7, #2]
 80117c6:	011b      	lsls	r3, r3, #4
 80117c8:	3308      	adds	r3, #8
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	4413      	add	r3, r2
    }
 80117ce:	4618      	mov	r0, r3
 80117d0:	370c      	adds	r7, #12
 80117d2:	46bd      	mov	sp, r7
 80117d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d8:	4770      	bx	lr

080117da <_GLOBAL__sub_I_touchgfx_init>:
 80117da:	b580      	push	{r7, lr}
 80117dc:	af00      	add	r7, sp, #0
 80117de:	f7ff fee3 	bl	80115a8 <_Z41__static_initialization_and_destruction_0v>
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <_GLOBAL__sub_D_touchgfx_init>:
 80117e4:	b580      	push	{r7, lr}
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	f7ff ff24 	bl	8011634 <_Z41__static_initialization_and_destruction_1v>
 80117ec:	bd80      	pop	{r7, pc}

080117ee <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80117ee:	b580      	push	{r7, lr}
 80117f0:	b082      	sub	sp, #8
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	3320      	adds	r3, #32
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	4798      	blx	r3
        isFrontPorchEntered = true;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2201      	movs	r2, #1
 8011806:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    }
 801180a:	bf00      	nop
 801180c:	3708      	adds	r7, #8
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8011812:	b480      	push	{r7}
 8011814:	b083      	sub	sp, #12
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011820:	3301      	adds	r3, #1
 8011822:	b2da      	uxtb	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2200      	movs	r2, #0
 801182e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    }
 8011832:	bf00      	nop
 8011834:	370c      	adds	r7, #12
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr
	...

08011840 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	460b      	mov	r3, r1
 801184a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 801184c:	78fb      	ldrb	r3, [r7, #3]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d002      	beq.n	8011858 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8011852:	78fb      	ldrb	r3, [r7, #3]
 8011854:	2b03      	cmp	r3, #3
 8011856:	d105      	bne.n	8011864 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	78fa      	ldrb	r2, [r7, #3]
 801185c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 8011860:	2301      	movs	r3, #1
 8011862:	e04a      	b.n	80118fa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xba>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8011864:	78fb      	ldrb	r3, [r7, #3]
 8011866:	2b01      	cmp	r3, #1
 8011868:	d123      	bne.n	80118b2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801186e:	2b00      	cmp	r3, #0
 8011870:	d014      	beq.n	801189c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	33a8      	adds	r3, #168	@ 0xa8
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	4798      	blx	r3
 801187e:	4603      	mov	r3, r0
 8011880:	461a      	mov	r2, r3
 8011882:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011886:	429a      	cmp	r2, r3
 8011888:	d008      	beq.n	801189c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801188a:	4b1e      	ldr	r3, [pc, #120]	@ (8011904 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xc4>)
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	f083 0301 	eor.w	r3, r3, #1
 8011892:	b2db      	uxtb	r3, r3
 8011894:	2b00      	cmp	r3, #0
 8011896:	d001      	beq.n	801189c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011898:	2301      	movs	r3, #1
 801189a:	e000      	b.n	801189e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 801189c:	2300      	movs	r3, #0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d005      	beq.n	80118ae <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	78fa      	ldrb	r2, [r7, #3]
 80118a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 80118aa:	2301      	movs	r3, #1
 80118ac:	e025      	b.n	80118fa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xba>
            return false;
 80118ae:	2300      	movs	r3, #0
 80118b0:	e023      	b.n	80118fa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xba>
        if (s == REFRESH_STRATEGY_PARTIAL_BUFFER_TFT_CTRL)
 80118b2:	78fb      	ldrb	r3, [r7, #3]
 80118b4:	2b02      	cmp	r3, #2
 80118b6:	d11f      	bne.n	80118f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xb8>
            if (getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	33a8      	adds	r3, #168	@ 0xa8
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	4798      	blx	r3
 80118c4:	4603      	mov	r3, r0
 80118c6:	461a      	mov	r2, r3
 80118c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d008      	beq.n	80118e2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xa2>
 80118d0:	4b0c      	ldr	r3, [pc, #48]	@ (8011904 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xc4>)
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	f083 0301 	eor.w	r3, r3, #1
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d001      	beq.n	80118e2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xa2>
 80118de:	2301      	movs	r3, #1
 80118e0:	e000      	b.n	80118e4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xa4>
 80118e2:	2300      	movs	r3, #0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d005      	beq.n	80118f4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xb4>
                refreshStrategy = s;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	78fa      	ldrb	r2, [r7, #3]
 80118ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 80118f0:	2301      	movs	r3, #1
 80118f2:	e002      	b.n	80118fa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xba>
            return false;
 80118f4:	2300      	movs	r3, #0
 80118f6:	e000      	b.n	80118fa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0xba>
        return false;
 80118f8:	2300      	movs	r3, #0
    }
 80118fa:	4618      	mov	r0, r3
 80118fc:	3708      	adds	r7, #8
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	240065fe 	.word	0x240065fe

08011908 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8011908:	b480      	push	{r7}
 801190a:	b083      	sub	sp, #12
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	683a      	ldr	r2, [r7, #0]
 8011916:	639a      	str	r2, [r3, #56]	@ 0x38
    }
 8011918:	bf00      	nop
 801191a:	370c      	adds	r7, #12
 801191c:	46bd      	mov	sp, r7
 801191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011922:	4770      	bx	lr

08011924 <__NVIC_EnableIRQ>:
{
 8011924:	b480      	push	{r7}
 8011926:	b083      	sub	sp, #12
 8011928:	af00      	add	r7, sp, #0
 801192a:	4603      	mov	r3, r0
 801192c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011932:	2b00      	cmp	r3, #0
 8011934:	db0b      	blt.n	801194e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011936:	88fb      	ldrh	r3, [r7, #6]
 8011938:	f003 021f 	and.w	r2, r3, #31
 801193c:	4907      	ldr	r1, [pc, #28]	@ (801195c <__NVIC_EnableIRQ+0x38>)
 801193e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011942:	095b      	lsrs	r3, r3, #5
 8011944:	2001      	movs	r0, #1
 8011946:	fa00 f202 	lsl.w	r2, r0, r2
 801194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801194e:	bf00      	nop
 8011950:	370c      	adds	r7, #12
 8011952:	46bd      	mov	sp, r7
 8011954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011958:	4770      	bx	lr
 801195a:	bf00      	nop
 801195c:	e000e100 	.word	0xe000e100

08011960 <__NVIC_DisableIRQ>:
{
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	4603      	mov	r3, r0
 8011968:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801196a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801196e:	2b00      	cmp	r3, #0
 8011970:	db12      	blt.n	8011998 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011972:	88fb      	ldrh	r3, [r7, #6]
 8011974:	f003 021f 	and.w	r2, r3, #31
 8011978:	490a      	ldr	r1, [pc, #40]	@ (80119a4 <__NVIC_DisableIRQ+0x44>)
 801197a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801197e:	095b      	lsrs	r3, r3, #5
 8011980:	2001      	movs	r0, #1
 8011982:	fa00 f202 	lsl.w	r2, r0, r2
 8011986:	3320      	adds	r3, #32
 8011988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801198c:	f3bf 8f4f 	dsb	sy
}
 8011990:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011992:	f3bf 8f6f 	isb	sy
}
 8011996:	bf00      	nop
}
 8011998:	bf00      	nop
 801199a:	370c      	adds	r7, #12
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr
 80119a4:	e000e100 	.word	0xe000e100

080119a8 <__NVIC_SetPriority>:
{
 80119a8:	b480      	push	{r7}
 80119aa:	b083      	sub	sp, #12
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	4603      	mov	r3, r0
 80119b0:	6039      	str	r1, [r7, #0]
 80119b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80119b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	db0a      	blt.n	80119d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	b2da      	uxtb	r2, r3
 80119c0:	490c      	ldr	r1, [pc, #48]	@ (80119f4 <__NVIC_SetPriority+0x4c>)
 80119c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119c6:	0112      	lsls	r2, r2, #4
 80119c8:	b2d2      	uxtb	r2, r2
 80119ca:	440b      	add	r3, r1
 80119cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80119d0:	e00a      	b.n	80119e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	b2da      	uxtb	r2, r3
 80119d6:	4908      	ldr	r1, [pc, #32]	@ (80119f8 <__NVIC_SetPriority+0x50>)
 80119d8:	88fb      	ldrh	r3, [r7, #6]
 80119da:	f003 030f 	and.w	r3, r3, #15
 80119de:	3b04      	subs	r3, #4
 80119e0:	0112      	lsls	r2, r2, #4
 80119e2:	b2d2      	uxtb	r2, r2
 80119e4:	440b      	add	r3, r1
 80119e6:	761a      	strb	r2, [r3, #24]
}
 80119e8:	bf00      	nop
 80119ea:	370c      	adds	r7, #12
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr
 80119f4:	e000e100 	.word	0xe000e100
 80119f8:	e000ed00 	.word	0xe000ed00

080119fc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80119fc:	b5b0      	push	{r4, r5, r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f001 fa71 	bl	8012eee <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8011a0c:	687d      	ldr	r5, [r7, #4]
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	3368      	adds	r3, #104	@ 0x68
 8011a14:	681c      	ldr	r4, [r3, #0]
 8011a16:	f005 fb57 	bl	80170c8 <_ZN8touchgfx11Application11getInstanceEv>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	4628      	mov	r0, r5
 8011a20:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	490e      	ldr	r1, [pc, #56]	@ (8011a60 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x64>)
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7ff ff6e 	bl	8011908 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    if (!setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL))
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2101      	movs	r1, #1
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff ff05 	bl	8011840 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
 8011a36:	4603      	mov	r3, r0
 8011a38:	f083 0301 	eor.w	r3, r3, #1
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d001      	beq.n	8011a46 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4a>
    {
        while (1);
 8011a42:	bf00      	nop
 8011a44:	e7fd      	b.n	8011a42 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x46>
    }
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	338c      	adds	r3, #140	@ 0x8c
 8011a4e:	681c      	ldr	r4, [r3, #0]
 8011a50:	2300      	movs	r3, #0
 8011a52:	2200      	movs	r2, #0
 8011a54:	4903      	ldr	r1, [pc, #12]	@ (8011a64 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x68>)
 8011a56:	47a0      	blx	r4
}
 8011a58:	bf00      	nop
 8011a5a:	3708      	adds	r7, #8
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8011a60:	080103f5 	.word	0x080103f5
 8011a64:	d0000000 	.word	0xd0000000

08011a68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8011a70:	2109      	movs	r1, #9
 8011a72:	205a      	movs	r0, #90	@ 0x5a
 8011a74:	f7ff ff98 	bl	80119a8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8011a78:	2109      	movs	r1, #9
 8011a7a:	2058      	movs	r0, #88	@ 0x58
 8011a7c:	f7ff ff94 	bl	80119a8 <__NVIC_SetPriority>
}
 8011a80:	bf00      	nop
 8011a82:	3708      	adds	r7, #8
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}

08011a88 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8011a90:	205a      	movs	r0, #90	@ 0x5a
 8011a92:	f7ff ff47 	bl	8011924 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8011a96:	2058      	movs	r0, #88	@ 0x58
 8011a98:	f7ff ff44 	bl	8011924 <__NVIC_EnableIRQ>
}
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8011aac:	205a      	movs	r0, #90	@ 0x5a
 8011aae:	f7ff ff57 	bl	8011960 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8011ab2:	2058      	movs	r0, #88	@ 0x58
 8011ab4:	f7ff ff54 	bl	8011960 <__NVIC_DisableIRQ>
}
 8011ab8:	bf00      	nop
 8011aba:	3708      	adds	r7, #8
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & LTDC_BPCR_AVBP_Msk) - 1;
 8011ac8:	4b11      	ldr	r3, [pc, #68]	@ (8011b10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011aca:	68db      	ldr	r3, [r3, #12]
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	3b01      	subs	r3, #1
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8011b14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8011ada:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & LTDC_AWCR_AAH_Msk) - 1;
 8011adc:	4b0c      	ldr	r3, [pc, #48]	@ (8011b10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011ade:	691b      	ldr	r3, [r3, #16]
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	b29a      	uxth	r2, r3
 8011aec:	4b0a      	ldr	r3, [pc, #40]	@ (8011b18 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8011aee:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8011af0:	4b08      	ldr	r3, [pc, #32]	@ (8011b14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8011af2:	881a      	ldrh	r2, [r3, #0]
 8011af4:	4b06      	ldr	r3, [pc, #24]	@ (8011b10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011af6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8011af8:	4b05      	ldr	r3, [pc, #20]	@ (8011b10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011afc:	4a04      	ldr	r2, [pc, #16]	@ (8011b10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011afe:	f043 0301 	orr.w	r3, r3, #1
 8011b02:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8011b04:	bf00      	nop
 8011b06:	370c      	adds	r7, #12
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr
 8011b10:	50001000 	.word	0x50001000
 8011b14:	240065f0 	.word	0x240065f0
 8011b18:	240065f2 	.word	0x240065f2

08011b1c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	4618      	mov	r0, r3
 8011b28:	f001 f9c8 	bl	8012ebc <_ZN8touchgfx3HAL10beginFrameEv>
 8011b2c:	4603      	mov	r3, r0
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3708      	adds	r7, #8
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}

08011b36 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8011b36:	b580      	push	{r7, lr}
 8011b38:	b082      	sub	sp, #8
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	4618      	mov	r0, r3
 8011b42:	f001 f9c7 	bl	8012ed4 <_ZN8touchgfx3HAL8endFrameEv>
}
 8011b46:	bf00      	nop
 8011b48:	3708      	adds	r7, #8
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
	...

08011b50 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8011b58:	4b03      	ldr	r3, [pc, #12]	@ (8011b68 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8011b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr
 8011b68:	50001084 	.word	0x50001084

08011b6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8011b76:	4a06      	ldr	r2, [pc, #24]	@ (8011b90 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8011b7c:	4b05      	ldr	r3, [pc, #20]	@ (8011b94 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8011b7e:	2201      	movs	r2, #1
 8011b80:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8011b82:	bf00      	nop
 8011b84:	370c      	adds	r7, #12
 8011b86:	46bd      	mov	sp, r7
 8011b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop
 8011b90:	50001084 	.word	0x50001084
 8011b94:	50001000 	.word	0x50001000

08011b98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6839      	ldr	r1, [r7, #0]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f001 f951 	bl	8012e4e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8011bac:	bf00      	nop
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b084      	sub	sp, #16
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	60f8      	str	r0, [r7, #12]
 8011bbc:	60b9      	str	r1, [r7, #8]
 8011bbe:	607a      	str	r2, [r7, #4]
 8011bc0:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8011bc2:	68f8      	ldr	r0, [r7, #12]
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	687a      	ldr	r2, [r7, #4]
 8011bc8:	68b9      	ldr	r1, [r7, #8]
 8011bca:	f001 fac4 	bl	8013156 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8011bce:	4603      	mov	r3, r0
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3710      	adds	r7, #16
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8011bd8:	b480      	push	{r7}
 8011bda:	b085      	sub	sp, #20
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & LTDC_CPSR_CYPOS_Msk);
 8011be0:	4b0d      	ldr	r3, [pc, #52]	@ (8011c18 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8011be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011be4:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & LTDC_BPCR_AVBP_Msk) + 1;
 8011be6:	4b0c      	ldr	r3, [pc, #48]	@ (8011c18 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8011be8:	68db      	ldr	r3, [r3, #12]
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8011bf6:	89fa      	ldrh	r2, [r7, #14]
 8011bf8:	89bb      	ldrh	r3, [r7, #12]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d304      	bcc.n	8011c08 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8011bfe:	89fa      	ldrh	r2, [r7, #14]
 8011c00:	89bb      	ldrh	r3, [r7, #12]
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	e000      	b.n	8011c0a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	50001000 	.word	0x50001000

08011c1c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b087      	sub	sp, #28
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8011c24:	4b25      	ldr	r3, [pc, #148]	@ (8011cbc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011c26:	695b      	ldr	r3, [r3, #20]
 8011c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	bf14      	ite	ne
 8011c30:	2301      	movne	r3, #1
 8011c32:	2300      	moveq	r3, #0
 8011c34:	b2db      	uxtb	r3, r3
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d03a      	beq.n	8011cb0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8011c3a:	4b20      	ldr	r3, [pc, #128]	@ (8011cbc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011c42:	f3bf 8f4f 	dsb	sy
}
 8011c46:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8011c48:	4b1c      	ldr	r3, [pc, #112]	@ (8011cbc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011c4e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	0b5b      	lsrs	r3, r3, #13
 8011c54:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011c58:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	08db      	lsrs	r3, r3, #3
 8011c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011c62:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	015a      	lsls	r2, r3, #5
 8011c68:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8011c6c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011c72:	4912      	ldr	r1, [pc, #72]	@ (8011cbc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011c74:	4313      	orrs	r3, r2
 8011c76:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	1e5a      	subs	r2, r3, #1
 8011c7e:	60fa      	str	r2, [r7, #12]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	bf14      	ite	ne
 8011c84:	2301      	movne	r3, #1
 8011c86:	2300      	moveq	r3, #0
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d1ea      	bne.n	8011c64 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	1e5a      	subs	r2, r3, #1
 8011c92:	613a      	str	r2, [r7, #16]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	bf14      	ite	ne
 8011c98:	2301      	movne	r3, #1
 8011c9a:	2300      	moveq	r3, #0
 8011c9c:	b2db      	uxtb	r3, r3
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d1db      	bne.n	8011c5a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011ca2:	f3bf 8f4f 	dsb	sy
}
 8011ca6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011ca8:	f3bf 8f6f 	isb	sy
}
 8011cac:	bf00      	nop
}
 8011cae:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8011cb0:	bf00      	nop
 8011cb2:	371c      	adds	r7, #28
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr
 8011cbc:	e000ed00 	.word	0xe000ed00

08011cc0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b087      	sub	sp, #28
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write-Back cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX in
    // order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8011cc8:	4b25      	ldr	r3, [pc, #148]	@ (8011d60 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8011cca:	695b      	ldr	r3, [r3, #20]
 8011ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	bf14      	ite	ne
 8011cd4:	2301      	movne	r3, #1
 8011cd6:	2300      	moveq	r3, #0
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d03a      	beq.n	8011d54 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8011cde:	4b20      	ldr	r3, [pc, #128]	@ (8011d60 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011ce6:	f3bf 8f4f 	dsb	sy
}
 8011cea:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8011cec:	4b1c      	ldr	r3, [pc, #112]	@ (8011d60 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8011cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011cf2:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	0b5b      	lsrs	r3, r3, #13
 8011cf8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011cfc:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	08db      	lsrs	r3, r3, #3
 8011d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011d06:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	015a      	lsls	r2, r3, #5
 8011d0c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8011d10:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8011d12:	68fa      	ldr	r2, [r7, #12]
 8011d14:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011d16:	4912      	ldr	r1, [pc, #72]	@ (8011d60 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8011d18:	4313      	orrs	r3, r2
 8011d1a:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	1e5a      	subs	r2, r3, #1
 8011d22:	60fa      	str	r2, [r7, #12]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	bf14      	ite	ne
 8011d28:	2301      	movne	r3, #1
 8011d2a:	2300      	moveq	r3, #0
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1ea      	bne.n	8011d08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	1e5a      	subs	r2, r3, #1
 8011d36:	613a      	str	r2, [r7, #16]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	bf14      	ite	ne
 8011d3c:	2301      	movne	r3, #1
 8011d3e:	2300      	moveq	r3, #0
 8011d40:	b2db      	uxtb	r3, r3
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d1db      	bne.n	8011cfe <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011d46:	f3bf 8f4f 	dsb	sy
}
 8011d4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011d4c:	f3bf 8f6f 	isb	sy
}
 8011d50:	bf00      	nop
}
 8011d52:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8011d54:	bf00      	nop
 8011d56:	371c      	adds	r7, #28
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr
 8011d60:	e000ed00 	.word	0xe000ed00

08011d64 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8011d6c:	f7fb fa30 	bl	800d1d0 <_ZN8touchgfx3HAL11getInstanceEv>
 8011d70:	4603      	mov	r3, r0
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	bf0c      	ite	eq
 8011d76:	2301      	moveq	r3, #1
 8011d78:	2300      	movne	r3, #0
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d132      	bne.n	8011de6 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8011d80:	4b1b      	ldr	r3, [pc, #108]	@ (8011df0 <HAL_LTDC_LineEventCallback+0x8c>)
 8011d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d84:	4a1b      	ldr	r2, [pc, #108]	@ (8011df4 <HAL_LTDC_LineEventCallback+0x90>)
 8011d86:	8812      	ldrh	r2, [r2, #0]
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	bf0c      	ite	eq
 8011d8c:	2301      	moveq	r3, #1
 8011d8e:	2300      	movne	r3, #0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d017      	beq.n	8011dc6 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8011d96:	4b18      	ldr	r3, [pc, #96]	@ (8011df8 <HAL_LTDC_LineEventCallback+0x94>)
 8011d98:	881b      	ldrh	r3, [r3, #0]
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f7f2 f9ff 	bl	80041a0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8011da2:	f7fb fa15 	bl	800d1d0 <_ZN8touchgfx3HAL11getInstanceEv>
 8011da6:	4603      	mov	r3, r0
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7ff fd32 	bl	8011812 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8011dae:	f7fe faf9 	bl	80103a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8011db2:	f7fb fa0d 	bl	800d1d0 <_ZN8touchgfx3HAL11getInstanceEv>
 8011db6:	4603      	mov	r3, r0
 8011db8:	4618      	mov	r0, r3
 8011dba:	f001 fe27 	bl	8013a0c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8011dbe:	2000      	movs	r0, #0
 8011dc0:	f7fd ffc8 	bl	800fd54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011dc4:	e010      	b.n	8011de8 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8011dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8011df4 <HAL_LTDC_LineEventCallback+0x90>)
 8011dc8:	881b      	ldrh	r3, [r3, #0]
 8011dca:	4619      	mov	r1, r3
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f7f2 f9e7 	bl	80041a0 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8011dd2:	f7fb f9fd 	bl	800d1d0 <_ZN8touchgfx3HAL11getInstanceEv>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7ff fd08 	bl	80117ee <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8011dde:	2000      	movs	r0, #0
 8011de0:	f7fd ffd4 	bl	800fd8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011de4:	e000      	b.n	8011de8 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8011de6:	bf00      	nop
        }
    }
 8011de8:	3708      	adds	r7, #8
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	50001000 	.word	0x50001000
 8011df4:	240065f0 	.word	0x240065f0
 8011df8:	240065f2 	.word	0x240065f2

08011dfc <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011dfc:	8880      	ldrh	r0, [r0, #4]
 8011dfe:	4770      	bx	lr

08011e00 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011e00:	b570      	push	{r4, r5, r6, lr}
 8011e02:	6803      	ldr	r3, [r0, #0]
 8011e04:	460c      	mov	r4, r1
 8011e06:	2100      	movs	r1, #0
 8011e08:	4605      	mov	r5, r0
 8011e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e0c:	4798      	blx	r3
 8011e0e:	4606      	mov	r6, r0
 8011e10:	682b      	ldr	r3, [r5, #0]
 8011e12:	4628      	mov	r0, r5
 8011e14:	1ba4      	subs	r4, r4, r6
 8011e16:	6a1b      	ldr	r3, [r3, #32]
 8011e18:	b2a4      	uxth	r4, r4
 8011e1a:	4798      	blx	r3
 8011e1c:	fbb4 f0f0 	udiv	r0, r4, r0
 8011e20:	bd70      	pop	{r4, r5, r6, pc}

08011e22 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011e22:	2300      	movs	r3, #0
 8011e24:	8083      	strh	r3, [r0, #4]
 8011e26:	4770      	bx	lr

08011e28 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011e28:	b510      	push	{r4, lr}
 8011e2a:	6803      	ldr	r3, [r0, #0]
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	8881      	ldrh	r1, [r0, #4]
 8011e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e32:	4798      	blx	r3
 8011e34:	88a3      	ldrh	r3, [r4, #4]
 8011e36:	3301      	adds	r3, #1
 8011e38:	80a3      	strh	r3, [r4, #4]
 8011e3a:	bd10      	pop	{r4, pc}

08011e3c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011e3c:	6803      	ldr	r3, [r0, #0]
 8011e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e40:	4718      	bx	r3

08011e42 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011e42:	4770      	bx	lr

08011e44 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011e44:	4a02      	ldr	r2, [pc, #8]	@ (8011e50 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8011e46:	6002      	str	r2, [r0, #0]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	8082      	strh	r2, [r0, #4]
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop
 8011e50:	0802b8bc 	.word	0x0802b8bc

08011e54 <_ZN8touchgfx9Container13getFirstChildEv>:
 8011e54:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8011e56:	4770      	bx	lr

08011e58 <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 8011e58:	f890 002f 	ldrb.w	r0, [r0, #47]	@ 0x2f
 8011e5c:	4770      	bx	lr

08011e5e <_ZNK8touchgfx12DigitalClock17invalidateContentEv>:
 8011e5e:	b510      	push	{r4, lr}
 8011e60:	6803      	ldr	r3, [r0, #0]
 8011e62:	4604      	mov	r4, r0
 8011e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011e68:	4798      	blx	r3
 8011e6a:	b110      	cbz	r0, 8011e72 <_ZNK8touchgfx12DigitalClock17invalidateContentEv+0x14>
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f7fc f8ed 	bl	800e04c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011e72:	bd10      	pop	{r4, pc}

08011e74 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8011e74:	b508      	push	{r3, lr}
 8011e76:	3034      	adds	r0, #52	@ 0x34
 8011e78:	f820 1c2c 	strh.w	r1, [r0, #-44]
 8011e7c:	f7fc fb72 	bl	800e564 <_ZN8touchgfx8TextArea8setWidthEs>
 8011e80:	bd08      	pop	{r3, pc}

08011e82 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8011e82:	b508      	push	{r3, lr}
 8011e84:	3034      	adds	r0, #52	@ 0x34
 8011e86:	f820 1c2a 	strh.w	r1, [r0, #-42]
 8011e8a:	f7fc fb8b 	bl	800e5a4 <_ZN8touchgfx8TextArea9setHeightEs>
 8011e8e:	bd08      	pop	{r3, pc}

08011e90 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8011e90:	4a11      	ldr	r2, [pc, #68]	@ (8011ed8 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x48>)
 8011e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e96:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	8812      	ldrh	r2, [r2, #0]
 8011e9e:	460d      	mov	r5, r1
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d916      	bls.n	8011ed2 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x42>
 8011ea4:	6802      	ldr	r2, [r0, #0]
 8011ea6:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8011eaa:	6d96      	ldr	r6, [r2, #88]	@ 0x58
 8011eac:	4a0b      	ldr	r2, [pc, #44]	@ (8011edc <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x4c>)
 8011eae:	6812      	ldr	r2, [r2, #0]
 8011eb0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8011ee0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x50>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011ebc:	6803      	ldr	r3, [r0, #0]
 8011ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ec0:	4798      	blx	r3
 8011ec2:	1a2a      	subs	r2, r5, r0
 8011ec4:	4639      	mov	r1, r7
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	4633      	mov	r3, r6
 8011eca:	b212      	sxth	r2, r2
 8011ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed0:	4718      	bx	r3
 8011ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed6:	bf00      	nop
 8011ed8:	24006654 	.word	0x24006654
 8011edc:	24006650 	.word	0x24006650
 8011ee0:	24006658 	.word	0x24006658

08011ee4 <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8011ee4:	f880 106a 	strb.w	r1, [r0, #106]	@ 0x6a
 8011ee8:	4770      	bx	lr

08011eea <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8011eea:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 8011eee:	4770      	bx	lr

08011ef0 <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8011ef0:	b508      	push	{r3, lr}
 8011ef2:	3034      	adds	r0, #52	@ 0x34
 8011ef4:	6301      	str	r1, [r0, #48]	@ 0x30
 8011ef6:	f7fc f8a9 	bl	800e04c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011efa:	bd08      	pop	{r3, pc}

08011efc <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8011efc:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8011efe:	4770      	bx	lr

08011f00 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 8011f00:	3034      	adds	r0, #52	@ 0x34
 8011f02:	f002 bdef 	b.w	8014ae4 <_ZNK8touchgfx8TextArea12getTextWidthEv>

08011f06 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8011f06:	b538      	push	{r3, r4, r5, lr}
 8011f08:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8011f0c:	460d      	mov	r5, r1
 8011f0e:	4620      	mov	r0, r4
 8011f10:	f7fc f89c 	bl	800e04c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011f14:	4620      	mov	r0, r4
 8011f16:	4629      	mov	r1, r5
 8011f18:	f003 f918 	bl	801514c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f7fc f895 	bl	800e04c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011f22:	bd38      	pop	{r3, r4, r5, pc}

08011f24 <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8011f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f28:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	4630      	mov	r0, r6
 8011f30:	f7fc f88c 	bl	800e04c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011f34:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8011f38:	bb0b      	cbnz	r3, 8011f7e <_ZN8touchgfx12DigitalClock11updateClockEv+0x5a>
 8011f3a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8011f3e:	4620      	mov	r0, r4
 8011f40:	4a40      	ldr	r2, [pc, #256]	@ (8012044 <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 8011f42:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 8011f46:	4d40      	ldr	r5, [pc, #256]	@ (8012048 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	bf08      	it	eq
 8011f4c:	4615      	moveq	r5, r2
 8011f4e:	f000 fcc3 	bl	80128d8 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8011f52:	4680      	mov	r8, r0
 8011f54:	4620      	mov	r0, r4
 8011f56:	f000 fcd2 	bl	80128fe <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8011f5a:	4681      	mov	r9, r0
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	f000 fcc7 	bl	80128f0 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8011f62:	2800      	cmp	r0, #0
 8011f64:	462a      	mov	r2, r5
 8011f66:	f04f 010c 	mov.w	r1, #12
 8011f6a:	bf14      	ite	ne
 8011f6c:	2341      	movne	r3, #65	@ 0x41
 8011f6e:	2350      	moveq	r3, #80	@ 0x50
 8011f70:	4638      	mov	r0, r7
 8011f72:	e9cd 9300 	strd	r9, r3, [sp]
 8011f76:	4643      	mov	r3, r8
 8011f78:	f008 fbe0 	bl	801a73c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011f7c:	e017      	b.n	8011fae <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	d11b      	bne.n	8011fba <_ZN8touchgfx12DigitalClock11updateClockEv+0x96>
 8011f82:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8011f86:	4620      	mov	r0, r4
 8011f88:	4a30      	ldr	r2, [pc, #192]	@ (801204c <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8011f8a:	4d31      	ldr	r5, [pc, #196]	@ (8012050 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	bf08      	it	eq
 8011f90:	4615      	moveq	r5, r2
 8011f92:	f000 fc9e 	bl	80128d2 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8011f96:	4607      	mov	r7, r0
 8011f98:	4620      	mov	r0, r4
 8011f9a:	f000 fcb0 	bl	80128fe <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8011f9e:	462a      	mov	r2, r5
 8011fa0:	9000      	str	r0, [sp, #0]
 8011fa2:	463b      	mov	r3, r7
 8011fa4:	210c      	movs	r1, #12
 8011fa6:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8011faa:	f008 fbc7 	bl	801a73c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011fae:	4630      	mov	r0, r6
 8011fb0:	f7fc f84c 	bl	800e04c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8011fb4:	b004      	add	sp, #16
 8011fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fba:	2b02      	cmp	r3, #2
 8011fbc:	d126      	bne.n	801200c <_ZN8touchgfx12DigitalClock11updateClockEv+0xe8>
 8011fbe:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	4a23      	ldr	r2, [pc, #140]	@ (8012054 <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 8011fc6:	f104 0780 	add.w	r7, r4, #128	@ 0x80
 8011fca:	4d23      	ldr	r5, [pc, #140]	@ (8012058 <_ZN8touchgfx12DigitalClock11updateClockEv+0x134>)
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	bf08      	it	eq
 8011fd0:	4615      	moveq	r5, r2
 8011fd2:	f000 fc81 	bl	80128d8 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8011fd6:	4680      	mov	r8, r0
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f000 fc90 	bl	80128fe <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8011fde:	4681      	mov	r9, r0
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	f000 fc8f 	bl	8012904 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8011fe6:	4682      	mov	sl, r0
 8011fe8:	4620      	mov	r0, r4
 8011fea:	f000 fc81 	bl	80128f0 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	f8cd 9000 	str.w	r9, [sp]
 8011ff4:	462a      	mov	r2, r5
 8011ff6:	bf14      	ite	ne
 8011ff8:	2341      	movne	r3, #65	@ 0x41
 8011ffa:	2350      	moveq	r3, #80	@ 0x50
 8011ffc:	210c      	movs	r1, #12
 8011ffe:	4638      	mov	r0, r7
 8012000:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012004:	4643      	mov	r3, r8
 8012006:	f008 fb99 	bl	801a73c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801200a:	e7d0      	b.n	8011fae <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 801200c:	2b03      	cmp	r3, #3
 801200e:	d1ce      	bne.n	8011fae <_ZN8touchgfx12DigitalClock11updateClockEv+0x8a>
 8012010:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8012014:	4620      	mov	r0, r4
 8012016:	4a11      	ldr	r2, [pc, #68]	@ (801205c <_ZN8touchgfx12DigitalClock11updateClockEv+0x138>)
 8012018:	4d11      	ldr	r5, [pc, #68]	@ (8012060 <_ZN8touchgfx12DigitalClock11updateClockEv+0x13c>)
 801201a:	2b00      	cmp	r3, #0
 801201c:	bf08      	it	eq
 801201e:	4615      	moveq	r5, r2
 8012020:	f000 fc57 	bl	80128d2 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8012024:	4607      	mov	r7, r0
 8012026:	4620      	mov	r0, r4
 8012028:	f000 fc69 	bl	80128fe <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 801202c:	4680      	mov	r8, r0
 801202e:	4620      	mov	r0, r4
 8012030:	f000 fc68 	bl	8012904 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8012034:	463b      	mov	r3, r7
 8012036:	462a      	mov	r2, r5
 8012038:	210c      	movs	r1, #12
 801203a:	e9cd 8000 	strd	r8, r0, [sp]
 801203e:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8012042:	e799      	b.n	8011f78 <_ZN8touchgfx12DigitalClock11updateClockEv+0x54>
 8012044:	0802b8e8 	.word	0x0802b8e8
 8012048:	0802b912 	.word	0x0802b912
 801204c:	0802b8f4 	.word	0x0802b8f4
 8012050:	0802b932 	.word	0x0802b932
 8012054:	0802b90f 	.word	0x0802b90f
 8012058:	0802b8fc 	.word	0x0802b8fc
 801205c:	0802b92f 	.word	0x0802b92f
 8012060:	0802b920 	.word	0x0802b920

08012064 <_ZN8touchgfx12DigitalClockC1Ev>:
 8012064:	b510      	push	{r4, lr}
 8012066:	4604      	mov	r4, r0
 8012068:	f000 fc14 	bl	8012894 <_ZN8touchgfx13AbstractClockC1Ev>
 801206c:	2201      	movs	r2, #1
 801206e:	4b21      	ldr	r3, [pc, #132]	@ (80120f4 <_ZN8touchgfx12DigitalClockC1Ev+0x90>)
 8012070:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 8012074:	4620      	mov	r0, r4
 8012076:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801207a:	4a1f      	ldr	r2, [pc, #124]	@ (80120f8 <_ZN8touchgfx12DigitalClockC1Ev+0x94>)
 801207c:	6023      	str	r3, [r4, #0]
 801207e:	2303      	movs	r3, #3
 8012080:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8012082:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012086:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
 801208a:	2300      	movs	r3, #0
 801208c:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
 8012090:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 8012094:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 8012098:	4a18      	ldr	r2, [pc, #96]	@ (80120fc <_ZN8touchgfx12DigitalClockC1Ev+0x98>)
 801209a:	66a1      	str	r1, [r4, #104]	@ 0x68
 801209c:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 80120a0:	6362      	str	r2, [r4, #52]	@ 0x34
 80120a2:	4622      	mov	r2, r4
 80120a4:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80120a8:	8723      	strh	r3, [r4, #56]	@ 0x38
 80120aa:	8763      	strh	r3, [r4, #58]	@ 0x3a
 80120ac:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 80120ae:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80120b0:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 80120b4:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 80120b8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 80120bc:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 80120c0:	6523      	str	r3, [r4, #80]	@ 0x50
 80120c2:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 80120c6:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 80120ca:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 80120ce:	6663      	str	r3, [r4, #100]	@ 0x64
 80120d0:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 80120d4:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80120d8:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
 80120dc:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
 80120e0:	67a3      	str	r3, [r4, #120]	@ 0x78
 80120e2:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80120e6:	f822 3f80 	strh.w	r3, [r2, #128]!
 80120ea:	67e2      	str	r2, [r4, #124]	@ 0x7c
 80120ec:	f000 fc17 	bl	801291e <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80120f0:	4620      	mov	r0, r4
 80120f2:	bd10      	pop	{r4, pc}
 80120f4:	0802b9b4 	.word	0x0802b9b4
 80120f8:	0802b00c 	.word	0x0802b00c
 80120fc:	0802b234 	.word	0x0802b234

08012100 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 8012100:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 8012104:	4770      	bx	lr

08012106 <_ZN8touchgfx11AnalogClock20getAnimationDurationEv>:
 8012106:	f8b0 0324 	ldrh.w	r0, [r0, #804]	@ 0x324
 801210a:	4770      	bx	lr

0801210c <_ZNK8touchgfx11AnalogClock17invalidateContentEv>:
 801210c:	b510      	push	{r4, lr}
 801210e:	6803      	ldr	r3, [r0, #0]
 8012110:	4604      	mov	r4, r0
 8012112:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8012116:	4798      	blx	r3
 8012118:	b110      	cbz	r0, 8012120 <_ZNK8touchgfx11AnalogClock17invalidateContentEv+0x14>
 801211a:	4620      	mov	r0, r4
 801211c:	f7fb ff96 	bl	800e04c <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8012120:	bd10      	pop	{r4, pc}

08012122 <_ZN8touchgfx11AnalogClock17setRotationCenterEss>:
 8012122:	f8a0 1326 	strh.w	r1, [r0, #806]	@ 0x326
 8012126:	f8a0 2328 	strh.w	r2, [r0, #808]	@ 0x328
 801212a:	4770      	bx	lr

0801212c <_ZN8touchgfx11AnalogClock13setupHourHandEtss>:
 801212c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801212e:	6805      	ldr	r5, [r0, #0]
 8012130:	9300      	str	r3, [sp, #0]
 8012132:	4613      	mov	r3, r2
 8012134:	f8d5 50d4 	ldr.w	r5, [r5, #212]	@ 0xd4
 8012138:	460a      	mov	r2, r1
 801213a:	f100 015c 	add.w	r1, r0, #92	@ 0x5c
 801213e:	47a8      	blx	r5
 8012140:	b003      	add	sp, #12
 8012142:	bd30      	pop	{r4, r5, pc}

08012144 <_ZN8touchgfx11AnalogClock15setupMinuteHandEtss>:
 8012144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012146:	6805      	ldr	r5, [r0, #0]
 8012148:	9300      	str	r3, [sp, #0]
 801214a:	4613      	mov	r3, r2
 801214c:	f8d5 50d4 	ldr.w	r5, [r5, #212]	@ 0xd4
 8012150:	460a      	mov	r2, r1
 8012152:	f500 71a4 	add.w	r1, r0, #328	@ 0x148
 8012156:	47a8      	blx	r5
 8012158:	b003      	add	sp, #12
 801215a:	bd30      	pop	{r4, r5, pc}

0801215c <_ZN8touchgfx11AnalogClock15setupSecondHandEtss>:
 801215c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801215e:	6805      	ldr	r5, [r0, #0]
 8012160:	9300      	str	r3, [sp, #0]
 8012162:	4613      	mov	r3, r2
 8012164:	f8d5 50d4 	ldr.w	r5, [r5, #212]	@ 0xd4
 8012168:	460a      	mov	r2, r1
 801216a:	f500 710d 	add.w	r1, r0, #564	@ 0x234
 801216e:	47a8      	blx	r5
 8012170:	b003      	add	sp, #12
 8012172:	bd30      	pop	{r4, r5, pc}

08012174 <_ZN8touchgfx11AnalogClock20initializeTime24HourEhhh>:
 8012174:	b570      	push	{r4, r5, r6, lr}
 8012176:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 801217a:	2601      	movs	r6, #1
 801217c:	4604      	mov	r4, r0
 801217e:	f8a0 532a 	strh.w	r5, [r0, #810]	@ 0x32a
 8012182:	f880 532c 	strb.w	r5, [r0, #812]	@ 0x32c
 8012186:	f8b0 5324 	ldrh.w	r5, [r0, #804]	@ 0x324
 801218a:	f8a0 6324 	strh.w	r6, [r0, #804]	@ 0x324
 801218e:	6806      	ldr	r6, [r0, #0]
 8012190:	f8d6 6088 	ldr.w	r6, [r6, #136]	@ 0x88
 8012194:	47b0      	blx	r6
 8012196:	f8a4 5324 	strh.w	r5, [r4, #804]	@ 0x324
 801219a:	bd70      	pop	{r4, r5, r6, pc}

0801219c <_ZN8touchgfx11AnalogClock20initializeTime12HourEhhhb>:
 801219c:	b4f0      	push	{r4, r5, r6, r7}
 801219e:	6804      	ldr	r4, [r0, #0]
 80121a0:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80121a4:	f8d4 50c4 	ldr.w	r5, [r4, #196]	@ 0xc4
 80121a8:	240c      	movs	r4, #12
 80121aa:	2e00      	cmp	r6, #0
 80121ac:	46ac      	mov	ip, r5
 80121ae:	fbb1 f7f4 	udiv	r7, r1, r4
 80121b2:	fb07 1114 	mls	r1, r7, r4, r1
 80121b6:	bf18      	it	ne
 80121b8:	2400      	movne	r4, #0
 80121ba:	fa54 f181 	uxtab	r1, r4, r1
 80121be:	bcf0      	pop	{r4, r5, r6, r7}
 80121c0:	b2c9      	uxtb	r1, r1
 80121c2:	4760      	bx	ip

080121c4 <_ZN8touchgfx11AnalogClock8setAlphaEh>:
 80121c4:	f880 1058 	strb.w	r1, [r0, #88]	@ 0x58
 80121c8:	f880 1084 	strb.w	r1, [r0, #132]	@ 0x84
 80121cc:	f880 1170 	strb.w	r1, [r0, #368]	@ 0x170
 80121d0:	f880 125c 	strb.w	r1, [r0, #604]	@ 0x25c
 80121d4:	4770      	bx	lr

080121d6 <_ZNK8touchgfx11AnalogClock8getAlphaEv>:
 80121d6:	f890 0058 	ldrb.w	r0, [r0, #88]	@ 0x58
 80121da:	4770      	bx	lr

080121dc <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh>:
 80121dc:	ee07 1a90 	vmov	s15, r1
 80121e0:	ee07 3a10 	vmov	s14, r3
 80121e4:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 801221c <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh+0x40>
 80121e8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80121ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80121f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121f4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80121f8:	ee86 0a87 	vdiv.f32	s0, s13, s14
 80121fc:	ee07 2a10 	vmov	s14, r2
 8012200:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8012204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012208:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8012220 <_ZNK8touchgfx11AnalogClock23convertHandValueToAngleEhhh+0x44>
 801220c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8012210:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012214:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012218:	4770      	bx	lr
 801221a:	bf00      	nop
 801221c:	42700000 	.word	0x42700000
 8012220:	40490fdb 	.word	0x40490fdb

08012224 <_ZNK8touchgfx11AnalogClock27getHourHandMinuteCorrectionEv>:
 8012224:	f890 032d 	ldrb.w	r0, [r0, #813]	@ 0x32d
 8012228:	4770      	bx	lr

0801222a <_ZNK8touchgfx11AnalogClock29getMinuteHandSecondCorrectionEv>:
 801222a:	f890 032e 	ldrb.w	r0, [r0, #814]	@ 0x32e
 801222e:	4770      	bx	lr

08012230 <_ZNK8touchgfx11AnalogClock16animationEnabledEv>:
 8012230:	f8b0 0324 	ldrh.w	r0, [r0, #804]	@ 0x324
 8012234:	2801      	cmp	r0, #1
 8012236:	bf94      	ite	ls
 8012238:	2000      	movls	r0, #0
 801223a:	2001      	movhi	r0, #1
 801223c:	4770      	bx	lr

0801223e <_ZN8touchgfx11AnalogClock12setAnimationEtPFstsstE>:
 801223e:	f8a0 1324 	strh.w	r1, [r0, #804]	@ 0x324
 8012242:	f8c0 2320 	str.w	r2, [r0, #800]	@ 0x320
 8012246:	4770      	bx	lr

08012248 <_ZN8touchgfx11AnalogClock13setBackgroundEt>:
 8012248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801224a:	4606      	mov	r6, r0
 801224c:	6803      	ldr	r3, [r0, #0]
 801224e:	a802      	add	r0, sp, #8
 8012250:	460c      	mov	r4, r1
 8012252:	f8d3 7098 	ldr.w	r7, [r3, #152]	@ 0x98
 8012256:	f820 1d08 	strh.w	r1, [r0, #-8]!
 801225a:	f008 fb29 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801225e:	4605      	mov	r5, r0
 8012260:	a802      	add	r0, sp, #8
 8012262:	f820 4d04 	strh.w	r4, [r0, #-4]!
 8012266:	f008 fb57 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801226a:	2202      	movs	r2, #2
 801226c:	4621      	mov	r1, r4
 801226e:	fb90 f3f2 	sdiv	r3, r0, r2
 8012272:	fb95 f2f2 	sdiv	r2, r5, r2
 8012276:	b21b      	sxth	r3, r3
 8012278:	4630      	mov	r0, r6
 801227a:	b212      	sxth	r2, r2
 801227c:	47b8      	blx	r7
 801227e:	b003      	add	sp, #12
 8012280:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012282 <_ZN8touchgfx11AnalogClock27setHourHandMinuteCorrectionEb>:
 8012282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012286:	4604      	mov	r4, r0
 8012288:	6803      	ldr	r3, [r0, #0]
 801228a:	f880 132d 	strb.w	r1, [r0, #813]	@ 0x32d
 801228e:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8012292:	f000 fb1b 	bl	80128cc <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 8012296:	4606      	mov	r6, r0
 8012298:	4620      	mov	r0, r4
 801229a:	f000 fb30 	bl	80128fe <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 801229e:	4607      	mov	r7, r0
 80122a0:	4620      	mov	r0, r4
 80122a2:	f000 fb2f 	bl	8012904 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 80122a6:	463a      	mov	r2, r7
 80122a8:	4603      	mov	r3, r0
 80122aa:	4631      	mov	r1, r6
 80122ac:	4620      	mov	r0, r4
 80122ae:	46ac      	mov	ip, r5
 80122b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122b4:	4760      	bx	ip

080122b6 <_ZN8touchgfx11AnalogClock29setMinuteHandSecondCorrectionEb>:
 80122b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ba:	4604      	mov	r4, r0
 80122bc:	6803      	ldr	r3, [r0, #0]
 80122be:	f880 132e 	strb.w	r1, [r0, #814]	@ 0x32e
 80122c2:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80122c6:	f000 fb01 	bl	80128cc <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>
 80122ca:	4606      	mov	r6, r0
 80122cc:	4620      	mov	r0, r4
 80122ce:	f000 fb16 	bl	80128fe <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 80122d2:	4607      	mov	r7, r0
 80122d4:	4620      	mov	r0, r4
 80122d6:	f000 fb15 	bl	8012904 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 80122da:	463a      	mov	r2, r7
 80122dc:	4603      	mov	r3, r0
 80122de:	4631      	mov	r1, r6
 80122e0:	4620      	mov	r0, r4
 80122e2:	46ac      	mov	ip, r5
 80122e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122e8:	4760      	bx	ip
	...

080122ec <_ZN8touchgfx11AnalogClock9setupHandERNS_13TextureMapperEtss>:
 80122ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122ee:	461f      	mov	r7, r3
 80122f0:	460c      	mov	r4, r1
 80122f2:	4605      	mov	r5, r0
 80122f4:	4616      	mov	r6, r2
 80122f6:	ed2d 8b02 	vpush	{d8}
 80122fa:	6803      	ldr	r3, [r0, #0]
 80122fc:	b083      	sub	sp, #12
 80122fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012300:	4798      	blx	r3
 8012302:	a902      	add	r1, sp, #8
 8012304:	6823      	ldr	r3, [r4, #0]
 8012306:	4620      	mov	r0, r4
 8012308:	f821 6d04 	strh.w	r6, [r1, #-4]!
 801230c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801230e:	4798      	blx	r3
 8012310:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 8012314:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012318:	4620      	mov	r0, r4
 801231a:	f7fb ff50 	bl	800e1be <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801231e:	6823      	ldr	r3, [r4, #0]
 8012320:	4620      	mov	r0, r4
 8012322:	2100      	movs	r1, #0
 8012324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012326:	4798      	blx	r3
 8012328:	6823      	ldr	r3, [r4, #0]
 801232a:	4620      	mov	r0, r4
 801232c:	2100      	movs	r1, #0
 801232e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012330:	4798      	blx	r3
 8012332:	6823      	ldr	r3, [r4, #0]
 8012334:	f9b5 2328 	ldrsh.w	r2, [r5, #808]	@ 0x328
 8012338:	4620      	mov	r0, r4
 801233a:	f9b5 1326 	ldrsh.w	r1, [r5, #806]	@ 0x326
 801233e:	f8d3 60d0 	ldr.w	r6, [r3, #208]	@ 0xd0
 8012342:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8012346:	1bc9      	subs	r1, r1, r7
 8012348:	1ad2      	subs	r2, r2, r3
 801234a:	47b0      	blx	r6
 801234c:	6823      	ldr	r3, [r4, #0]
 801234e:	4620      	mov	r0, r4
 8012350:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80123dc <_ZN8touchgfx11AnalogClock9setupHandERNS_13TextureMapperEtss+0xf0>
 8012354:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8012358:	4798      	blx	r3
 801235a:	f9b5 2326 	ldrsh.w	r2, [r5, #806]	@ 0x326
 801235e:	6823      	ldr	r3, [r4, #0]
 8012360:	4620      	mov	r0, r4
 8012362:	ee08 2a10 	vmov	s16, r2
 8012366:	f9b5 2328 	ldrsh.w	r2, [r5, #808]	@ 0x328
 801236a:	f8d3 60a4 	ldr.w	r6, [r3, #164]	@ 0xa4
 801236e:	ee08 2a90 	vmov	s17, r2
 8012372:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8012376:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801237a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801237e:	4798      	blx	r3
 8012380:	4620      	mov	r0, r4
 8012382:	eeb0 1a40 	vmov.f32	s2, s0
 8012386:	eeb0 0a48 	vmov.f32	s0, s16
 801238a:	eef0 0a68 	vmov.f32	s1, s17
 801238e:	47b0      	blx	r6
 8012390:	6823      	ldr	r3, [r4, #0]
 8012392:	4620      	mov	r0, r4
 8012394:	f8d3 60b8 	ldr.w	r6, [r3, #184]	@ 0xb8
 8012398:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801239c:	4798      	blx	r3
 801239e:	6823      	ldr	r3, [r4, #0]
 80123a0:	eeb0 8a40 	vmov.f32	s16, s0
 80123a4:	4620      	mov	r0, r4
 80123a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80123aa:	4798      	blx	r3
 80123ac:	4620      	mov	r0, r4
 80123ae:	eef0 0a40 	vmov.f32	s1, s0
 80123b2:	eeb0 0a48 	vmov.f32	s0, s16
 80123b6:	47b0      	blx	r6
 80123b8:	6823      	ldr	r3, [r4, #0]
 80123ba:	4620      	mov	r0, r4
 80123bc:	2101      	movs	r1, #1
 80123be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80123c0:	4798      	blx	r3
 80123c2:	682b      	ldr	r3, [r5, #0]
 80123c4:	4621      	mov	r1, r4
 80123c6:	4628      	mov	r0, r5
 80123c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80123ca:	4798      	blx	r3
 80123cc:	2301      	movs	r3, #1
 80123ce:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 80123d2:	b003      	add	sp, #12
 80123d4:	ecbd 8b02 	vpop	{d8}
 80123d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123da:	bf00      	nop
 80123dc:	43960000 	.word	0x43960000

080123e0 <_ZN8touchgfx11AnalogClock13setBackgroundEtss>:
 80123e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123e2:	4616      	mov	r6, r2
 80123e4:	aa02      	add	r2, sp, #8
 80123e6:	4604      	mov	r4, r0
 80123e8:	3030      	adds	r0, #48	@ 0x30
 80123ea:	f822 1d04 	strh.w	r1, [r2, #-4]!
 80123ee:	4611      	mov	r1, r2
 80123f0:	461f      	mov	r7, r3
 80123f2:	f003 f813 	bl	801541c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80123f6:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	@ 0x3a
 80123fa:	4620      	mov	r0, r4
 80123fc:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 8012400:	f7fb fedd 	bl	800e1be <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012404:	6823      	ldr	r3, [r4, #0]
 8012406:	463a      	mov	r2, r7
 8012408:	4631      	mov	r1, r6
 801240a:	f8d3 509c 	ldr.w	r5, [r3, #156]	@ 0x9c
 801240e:	4620      	mov	r0, r4
 8012410:	47a8      	blx	r5
 8012412:	b003      	add	sp, #12
 8012414:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012416 <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 8012416:	6802      	ldr	r2, [r0, #0]
 8012418:	eeb0 1a40 	vmov.f32	s2, s0
 801241c:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8012420:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8012422:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8012426:	4710      	bx	r2

08012428 <_ZN8touchgfx11AnalogClock11updateClockEv>:
 8012428:	b530      	push	{r4, r5, lr}
 801242a:	ed2d 8b02 	vpush	{d8}
 801242e:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 8012432:	b083      	sub	sp, #12
 8012434:	4604      	mov	r4, r0
 8012436:	2b00      	cmp	r3, #0
 8012438:	f000 8085 	beq.w	8012546 <_ZN8touchgfx11AnalogClock11updateClockEv+0x11e>
 801243c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8012440:	200c      	movs	r0, #12
 8012442:	f894 532a 	ldrb.w	r5, [r4, #810]	@ 0x32a
 8012446:	fbb3 f2f0 	udiv	r2, r3, r0
 801244a:	fbb5 f1f0 	udiv	r1, r5, r0
 801244e:	fb00 3212 	mls	r2, r0, r2, r3
 8012452:	f894 332d 	ldrb.w	r3, [r4, #813]	@ 0x32d
 8012456:	fb00 5111 	mls	r1, r0, r1, r5
 801245a:	b2d2      	uxtb	r2, r2
 801245c:	b2c9      	uxtb	r1, r1
 801245e:	428a      	cmp	r2, r1
 8012460:	d107      	bne.n	8012472 <_ZN8touchgfx11AnalogClock11updateClockEv+0x4a>
 8012462:	2b00      	cmp	r3, #0
 8012464:	d06f      	beq.n	8012546 <_ZN8touchgfx11AnalogClock11updateClockEv+0x11e>
 8012466:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801246a:	f894 132b 	ldrb.w	r1, [r4, #811]	@ 0x32b
 801246e:	4288      	cmp	r0, r1
 8012470:	d069      	beq.n	8012546 <_ZN8touchgfx11AnalogClock11updateClockEv+0x11e>
 8012472:	6821      	ldr	r1, [r4, #0]
 8012474:	f8d1 50d8 	ldr.w	r5, [r1, #216]	@ 0xd8
 8012478:	b10b      	cbz	r3, 801247e <_ZN8touchgfx11AnalogClock11updateClockEv+0x56>
 801247a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801247e:	210c      	movs	r1, #12
 8012480:	4620      	mov	r0, r4
 8012482:	47a8      	blx	r5
 8012484:	f894 232a 	ldrb.w	r2, [r4, #810]	@ 0x32a
 8012488:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801248c:	210c      	movs	r1, #12
 801248e:	eeb0 8a40 	vmov.f32	s16, s0
 8012492:	ed94 0a26 	vldr	s0, [r4, #152]	@ 0x98
 8012496:	1a9b      	subs	r3, r3, r2
 8012498:	f103 021e 	add.w	r2, r3, #30
 801249c:	fb92 f3f1 	sdiv	r3, r2, r1
 80124a0:	fb01 2313 	mls	r3, r1, r3, r2
 80124a4:	3b06      	subs	r3, #6
 80124a6:	b21b      	sxth	r3, r3
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	dd28      	ble.n	80124fe <_ZN8touchgfx11AnalogClock11updateClockEv+0xd6>
 80124ac:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80124b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b4:	d50c      	bpl.n	80124d0 <_ZN8touchgfx11AnalogClock11updateClockEv+0xa8>
 80124b6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8012748 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 80124ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80124be:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80124c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124c6:	d4f8      	bmi.n	80124ba <_ZN8touchgfx11AnalogClock11updateClockEv+0x92>
 80124c8:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80124cc:	f7ff ffa3 	bl	8012416 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80124d0:	6823      	ldr	r3, [r4, #0]
 80124d2:	4620      	mov	r0, r4
 80124d4:	f104 055c 	add.w	r5, r4, #92	@ 0x5c
 80124d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80124dc:	4798      	blx	r3
 80124de:	b9f0      	cbnz	r0, 801251e <_ZN8touchgfx11AnalogClock11updateClockEv+0xf6>
 80124e0:	6823      	ldr	r3, [r4, #0]
 80124e2:	4620      	mov	r0, r4
 80124e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80124e8:	4798      	blx	r3
 80124ea:	b110      	cbz	r0, 80124f2 <_ZN8touchgfx11AnalogClock11updateClockEv+0xca>
 80124ec:	4628      	mov	r0, r5
 80124ee:	f001 fcd4 	bl	8013e9a <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 80124f2:	eeb0 0a48 	vmov.f32	s0, s16
 80124f6:	4628      	mov	r0, r5
 80124f8:	f7ff ff8d 	bl	8012416 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80124fc:	e023      	b.n	8012546 <_ZN8touchgfx11AnalogClock11updateClockEv+0x11e>
 80124fe:	d0e7      	beq.n	80124d0 <_ZN8touchgfx11AnalogClock11updateClockEv+0xa8>
 8012500:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8012504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012508:	dde2      	ble.n	80124d0 <_ZN8touchgfx11AnalogClock11updateClockEv+0xa8>
 801250a:	eddf 7a8f 	vldr	s15, [pc, #572]	@ 8012748 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 801250e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012512:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8012516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801251a:	dcf8      	bgt.n	801250e <_ZN8touchgfx11AnalogClock11updateClockEv+0xe6>
 801251c:	e7d4      	b.n	80124c8 <_ZN8touchgfx11AnalogClock11updateClockEv+0xa0>
 801251e:	4628      	mov	r0, r5
 8012520:	f001 fc71 	bl	8013e06 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 8012524:	4603      	mov	r3, r0
 8012526:	2800      	cmp	r0, #0
 8012528:	d1da      	bne.n	80124e0 <_ZN8touchgfx11AnalogClock11updateClockEv+0xb8>
 801252a:	f8d4 1320 	ldr.w	r1, [r4, #800]	@ 0x320
 801252e:	4628      	mov	r0, r5
 8012530:	f8b4 2324 	ldrh.w	r2, [r4, #804]	@ 0x324
 8012534:	eeb0 0a48 	vmov.f32	s0, s16
 8012538:	9100      	str	r1, [sp, #0]
 801253a:	2102      	movs	r1, #2
 801253c:	f001 fc66 	bl	8013e0c <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 8012540:	4628      	mov	r0, r5
 8012542:	f001 fc77 	bl	8013e34 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 8012546:	f894 316d 	ldrb.w	r3, [r4, #365]	@ 0x16d
 801254a:	2b00      	cmp	r3, #0
 801254c:	d079      	beq.n	8012642 <_ZN8touchgfx11AnalogClock11updateClockEv+0x21a>
 801254e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012552:	f894 132b 	ldrb.w	r1, [r4, #811]	@ 0x32b
 8012556:	f894 332e 	ldrb.w	r3, [r4, #814]	@ 0x32e
 801255a:	4291      	cmp	r1, r2
 801255c:	d107      	bne.n	801256e <_ZN8touchgfx11AnalogClock11updateClockEv+0x146>
 801255e:	2b00      	cmp	r3, #0
 8012560:	d06f      	beq.n	8012642 <_ZN8touchgfx11AnalogClock11updateClockEv+0x21a>
 8012562:	f894 032c 	ldrb.w	r0, [r4, #812]	@ 0x32c
 8012566:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 801256a:	4288      	cmp	r0, r1
 801256c:	d069      	beq.n	8012642 <_ZN8touchgfx11AnalogClock11updateClockEv+0x21a>
 801256e:	6821      	ldr	r1, [r4, #0]
 8012570:	f8d1 50d8 	ldr.w	r5, [r1, #216]	@ 0xd8
 8012574:	b10b      	cbz	r3, 801257a <_ZN8touchgfx11AnalogClock11updateClockEv+0x152>
 8012576:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801257a:	213c      	movs	r1, #60	@ 0x3c
 801257c:	4620      	mov	r0, r4
 801257e:	47a8      	blx	r5
 8012580:	f894 232b 	ldrb.w	r2, [r4, #811]	@ 0x32b
 8012584:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012588:	213c      	movs	r1, #60	@ 0x3c
 801258a:	eeb0 8a40 	vmov.f32	s16, s0
 801258e:	ed94 0a61 	vldr	s0, [r4, #388]	@ 0x184
 8012592:	1a9b      	subs	r3, r3, r2
 8012594:	f103 025a 	add.w	r2, r3, #90	@ 0x5a
 8012598:	fb92 f3f1 	sdiv	r3, r2, r1
 801259c:	fb01 2313 	mls	r3, r1, r3, r2
 80125a0:	3b1e      	subs	r3, #30
 80125a2:	b21b      	sxth	r3, r3
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	dd28      	ble.n	80125fa <_ZN8touchgfx11AnalogClock11updateClockEv+0x1d2>
 80125a8:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80125ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b0:	dd0c      	ble.n	80125cc <_ZN8touchgfx11AnalogClock11updateClockEv+0x1a4>
 80125b2:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8012748 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 80125b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80125ba:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80125be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c2:	d4f8      	bmi.n	80125b6 <_ZN8touchgfx11AnalogClock11updateClockEv+0x18e>
 80125c4:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 80125c8:	f7ff ff25 	bl	8012416 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80125cc:	6823      	ldr	r3, [r4, #0]
 80125ce:	4620      	mov	r0, r4
 80125d0:	f504 75a4 	add.w	r5, r4, #328	@ 0x148
 80125d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80125d8:	4798      	blx	r3
 80125da:	b9f0      	cbnz	r0, 801261a <_ZN8touchgfx11AnalogClock11updateClockEv+0x1f2>
 80125dc:	6823      	ldr	r3, [r4, #0]
 80125de:	4620      	mov	r0, r4
 80125e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80125e4:	4798      	blx	r3
 80125e6:	b110      	cbz	r0, 80125ee <_ZN8touchgfx11AnalogClock11updateClockEv+0x1c6>
 80125e8:	4628      	mov	r0, r5
 80125ea:	f001 fc56 	bl	8013e9a <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 80125ee:	eeb0 0a48 	vmov.f32	s0, s16
 80125f2:	4628      	mov	r0, r5
 80125f4:	f7ff ff0f 	bl	8012416 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80125f8:	e023      	b.n	8012642 <_ZN8touchgfx11AnalogClock11updateClockEv+0x21a>
 80125fa:	d0e7      	beq.n	80125cc <_ZN8touchgfx11AnalogClock11updateClockEv+0x1a4>
 80125fc:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8012600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012604:	d5e2      	bpl.n	80125cc <_ZN8touchgfx11AnalogClock11updateClockEv+0x1a4>
 8012606:	eddf 7a50 	vldr	s15, [pc, #320]	@ 8012748 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 801260a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801260e:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8012612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012616:	dcf8      	bgt.n	801260a <_ZN8touchgfx11AnalogClock11updateClockEv+0x1e2>
 8012618:	e7d4      	b.n	80125c4 <_ZN8touchgfx11AnalogClock11updateClockEv+0x19c>
 801261a:	4628      	mov	r0, r5
 801261c:	f001 fbf3 	bl	8013e06 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 8012620:	4603      	mov	r3, r0
 8012622:	2800      	cmp	r0, #0
 8012624:	d1da      	bne.n	80125dc <_ZN8touchgfx11AnalogClock11updateClockEv+0x1b4>
 8012626:	f8d4 1320 	ldr.w	r1, [r4, #800]	@ 0x320
 801262a:	4628      	mov	r0, r5
 801262c:	f8b4 2324 	ldrh.w	r2, [r4, #804]	@ 0x324
 8012630:	eeb0 0a48 	vmov.f32	s0, s16
 8012634:	9100      	str	r1, [sp, #0]
 8012636:	2102      	movs	r1, #2
 8012638:	f001 fbe8 	bl	8013e0c <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 801263c:	4628      	mov	r0, r5
 801263e:	f001 fbf9 	bl	8013e34 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 8012642:	f894 3259 	ldrb.w	r3, [r4, #601]	@ 0x259
 8012646:	2b00      	cmp	r3, #0
 8012648:	d06d      	beq.n	8012726 <_ZN8touchgfx11AnalogClock11updateClockEv+0x2fe>
 801264a:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 801264e:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 8012652:	4293      	cmp	r3, r2
 8012654:	d067      	beq.n	8012726 <_ZN8touchgfx11AnalogClock11updateClockEv+0x2fe>
 8012656:	6823      	ldr	r3, [r4, #0]
 8012658:	213c      	movs	r1, #60	@ 0x3c
 801265a:	4620      	mov	r0, r4
 801265c:	f8d3 50d8 	ldr.w	r5, [r3, #216]	@ 0xd8
 8012660:	2300      	movs	r3, #0
 8012662:	47a8      	blx	r5
 8012664:	f894 232c 	ldrb.w	r2, [r4, #812]	@ 0x32c
 8012668:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801266c:	213c      	movs	r1, #60	@ 0x3c
 801266e:	eeb0 8a40 	vmov.f32	s16, s0
 8012672:	ed94 0a9c 	vldr	s0, [r4, #624]	@ 0x270
 8012676:	1a9b      	subs	r3, r3, r2
 8012678:	f103 025a 	add.w	r2, r3, #90	@ 0x5a
 801267c:	fb92 f3f1 	sdiv	r3, r2, r1
 8012680:	fb01 2313 	mls	r3, r1, r3, r2
 8012684:	3b1e      	subs	r3, #30
 8012686:	b21b      	sxth	r3, r3
 8012688:	2b00      	cmp	r3, #0
 801268a:	dd28      	ble.n	80126de <_ZN8touchgfx11AnalogClock11updateClockEv+0x2b6>
 801268c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8012690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012694:	dd0c      	ble.n	80126b0 <_ZN8touchgfx11AnalogClock11updateClockEv+0x288>
 8012696:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8012748 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 801269a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801269e:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80126a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a6:	d4f8      	bmi.n	801269a <_ZN8touchgfx11AnalogClock11updateClockEv+0x272>
 80126a8:	f504 700d 	add.w	r0, r4, #564	@ 0x234
 80126ac:	f7ff feb3 	bl	8012416 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80126b0:	6823      	ldr	r3, [r4, #0]
 80126b2:	4620      	mov	r0, r4
 80126b4:	f504 750d 	add.w	r5, r4, #564	@ 0x234
 80126b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80126bc:	4798      	blx	r3
 80126be:	b9f0      	cbnz	r0, 80126fe <_ZN8touchgfx11AnalogClock11updateClockEv+0x2d6>
 80126c0:	6823      	ldr	r3, [r4, #0]
 80126c2:	4620      	mov	r0, r4
 80126c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80126c8:	4798      	blx	r3
 80126ca:	b110      	cbz	r0, 80126d2 <_ZN8touchgfx11AnalogClock11updateClockEv+0x2aa>
 80126cc:	4628      	mov	r0, r5
 80126ce:	f001 fbe4 	bl	8013e9a <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>
 80126d2:	eeb0 0a48 	vmov.f32	s0, s16
 80126d6:	4628      	mov	r0, r5
 80126d8:	f7ff fe9d 	bl	8012416 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80126dc:	e023      	b.n	8012726 <_ZN8touchgfx11AnalogClock11updateClockEv+0x2fe>
 80126de:	d0e7      	beq.n	80126b0 <_ZN8touchgfx11AnalogClock11updateClockEv+0x288>
 80126e0:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80126e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e8:	d5e2      	bpl.n	80126b0 <_ZN8touchgfx11AnalogClock11updateClockEv+0x288>
 80126ea:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8012748 <_ZN8touchgfx11AnalogClock11updateClockEv+0x320>
 80126ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80126f2:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80126f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126fa:	dcf8      	bgt.n	80126ee <_ZN8touchgfx11AnalogClock11updateClockEv+0x2c6>
 80126fc:	e7d4      	b.n	80126a8 <_ZN8touchgfx11AnalogClock11updateClockEv+0x280>
 80126fe:	4628      	mov	r0, r5
 8012700:	f001 fb81 	bl	8013e06 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>
 8012704:	4603      	mov	r3, r0
 8012706:	2800      	cmp	r0, #0
 8012708:	d1da      	bne.n	80126c0 <_ZN8touchgfx11AnalogClock11updateClockEv+0x298>
 801270a:	f8d4 1320 	ldr.w	r1, [r4, #800]	@ 0x320
 801270e:	4628      	mov	r0, r5
 8012710:	f8b4 2324 	ldrh.w	r2, [r4, #804]	@ 0x324
 8012714:	eeb0 0a48 	vmov.f32	s0, s16
 8012718:	9100      	str	r1, [sp, #0]
 801271a:	2102      	movs	r1, #2
 801271c:	f001 fb76 	bl	8013e0c <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>
 8012720:	4628      	mov	r0, r5
 8012722:	f001 fb87 	bl	8013e34 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>
 8012726:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801272a:	f884 332a 	strb.w	r3, [r4, #810]	@ 0x32a
 801272e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012732:	f884 332b 	strb.w	r3, [r4, #811]	@ 0x32b
 8012736:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801273a:	f884 332c 	strb.w	r3, [r4, #812]	@ 0x32c
 801273e:	b003      	add	sp, #12
 8012740:	ecbd 8b02 	vpop	{d8}
 8012744:	bd30      	pop	{r4, r5, pc}
 8012746:	bf00      	nop
 8012748:	40c90fdb 	.word	0x40c90fdb

0801274c <_ZN8touchgfx11AnalogClockC1Ev>:
 801274c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012750:	4604      	mov	r4, r0
 8012752:	2500      	movs	r5, #0
 8012754:	ed2d 8b02 	vpush	{d8}
 8012758:	b083      	sub	sp, #12
 801275a:	4626      	mov	r6, r4
 801275c:	f000 f89a 	bl	8012894 <_ZN8touchgfx13AbstractClockC1Ev>
 8012760:	4b31      	ldr	r3, [pc, #196]	@ (8012828 <_ZN8touchgfx11AnalogClockC1Ev+0xdc>)
 8012762:	2201      	movs	r2, #1
 8012764:	a902      	add	r1, sp, #8
 8012766:	f846 3b30 	str.w	r3, [r6], #48
 801276a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801276e:	f884 2055 	strb.w	r2, [r4, #85]	@ 0x55
 8012772:	f104 095c 	add.w	r9, r4, #92	@ 0x5c
 8012776:	4a2d      	ldr	r2, [pc, #180]	@ (801282c <_ZN8touchgfx11AnalogClockC1Ev+0xe0>)
 8012778:	4630      	mov	r0, r6
 801277a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801277e:	f504 78a4 	add.w	r8, r4, #328	@ 0x148
 8012782:	6322      	str	r2, [r4, #48]	@ 0x30
 8012784:	f504 770d 	add.w	r7, r4, #564	@ 0x234
 8012788:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
 801278c:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
 8012790:	86a5      	strh	r5, [r4, #52]	@ 0x34
 8012792:	86e5      	strh	r5, [r4, #54]	@ 0x36
 8012794:	8725      	strh	r5, [r4, #56]	@ 0x38
 8012796:	8765      	strh	r5, [r4, #58]	@ 0x3a
 8012798:	87a5      	strh	r5, [r4, #60]	@ 0x3c
 801279a:	87e5      	strh	r5, [r4, #62]	@ 0x3e
 801279c:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 80127a0:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 80127a4:	64e5      	str	r5, [r4, #76]	@ 0x4c
 80127a6:	f8a4 5050 	strh.w	r5, [r4, #80]	@ 0x50
 80127aa:	f8a4 5052 	strh.w	r5, [r4, #82]	@ 0x52
 80127ae:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 80127b2:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 8012830 <_ZN8touchgfx11AnalogClockC1Ev+0xe4>
 80127b6:	e9c4 5511 	strd	r5, r5, [r4, #68]	@ 0x44
 80127ba:	f002 fe2f 	bl	801541c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80127be:	4648      	mov	r0, r9
 80127c0:	f001 fc90 	bl	80140e4 <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 80127c4:	4640      	mov	r0, r8
 80127c6:	f001 fc8d 	bl	80140e4 <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 80127ca:	4638      	mov	r0, r7
 80127cc:	f001 fc8a 	bl	80140e4 <_ZN8touchgfx22AnimationTextureMapperC1Ev>
 80127d0:	4b18      	ldr	r3, [pc, #96]	@ (8012834 <_ZN8touchgfx11AnalogClockC1Ev+0xe8>)
 80127d2:	4631      	mov	r1, r6
 80127d4:	4620      	mov	r0, r4
 80127d6:	f8c4 3320 	str.w	r3, [r4, #800]	@ 0x320
 80127da:	f8c4 5324 	str.w	r5, [r4, #804]	@ 0x324
 80127de:	f8c4 5328 	str.w	r5, [r4, #808]	@ 0x328
 80127e2:	f884 532c 	strb.w	r5, [r4, #812]	@ 0x32c
 80127e6:	f884 532d 	strb.w	r5, [r4, #813]	@ 0x32d
 80127ea:	f884 532e 	strb.w	r5, [r4, #814]	@ 0x32e
 80127ee:	f000 f896 	bl	801291e <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80127f2:	eeb0 0a48 	vmov.f32	s0, s16
 80127f6:	4648      	mov	r0, r9
 80127f8:	f7ff fe0d 	bl	8012416 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 80127fc:	eeb0 0a48 	vmov.f32	s0, s16
 8012800:	4640      	mov	r0, r8
 8012802:	f7ff fe08 	bl	8012416 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8012806:	4638      	mov	r0, r7
 8012808:	eeb0 0a48 	vmov.f32	s0, s16
 801280c:	f7ff fe03 	bl	8012416 <_ZN8touchgfx13TextureMapper12updateZAngleEf>
 8012810:	4620      	mov	r0, r4
 8012812:	f884 5081 	strb.w	r5, [r4, #129]	@ 0x81
 8012816:	f884 516d 	strb.w	r5, [r4, #365]	@ 0x16d
 801281a:	f884 5259 	strb.w	r5, [r4, #601]	@ 0x259
 801281e:	b003      	add	sp, #12
 8012820:	ecbd 8b02 	vpop	{d8}
 8012824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012828:	0802ba74 	.word	0x0802ba74
 801282c:	0802c310 	.word	0x0802c310
 8012830:	00000000 	.word	0x00000000
 8012834:	08018e3f 	.word	0x08018e3f

08012838 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 8012838:	b470      	push	{r4, r5, r6}
 801283a:	2518      	movs	r5, #24
 801283c:	fbb1 f6f5 	udiv	r6, r1, r5
 8012840:	fb06 1115 	mls	r1, r6, r5, r1
 8012844:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8012848:	213c      	movs	r1, #60	@ 0x3c
 801284a:	fbb2 f5f1 	udiv	r5, r2, r1
 801284e:	fb05 2211 	mls	r2, r5, r1, r2
 8012852:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 8012856:	fbb3 f2f1 	udiv	r2, r3, r1
 801285a:	fb02 3311 	mls	r3, r2, r1, r3
 801285e:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
 8012862:	6803      	ldr	r3, [r0, #0]
 8012864:	bc70      	pop	{r4, r5, r6}
 8012866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801286a:	4718      	bx	r3

0801286c <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 801286c:	b4f0      	push	{r4, r5, r6, r7}
 801286e:	6804      	ldr	r4, [r0, #0]
 8012870:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8012874:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 8012878:	240c      	movs	r4, #12
 801287a:	2e00      	cmp	r6, #0
 801287c:	46ac      	mov	ip, r5
 801287e:	fbb1 f7f4 	udiv	r7, r1, r4
 8012882:	fb07 1114 	mls	r1, r7, r4, r1
 8012886:	bf18      	it	ne
 8012888:	2400      	movne	r4, #0
 801288a:	fa54 f181 	uxtab	r1, r4, r1
 801288e:	bcf0      	pop	{r4, r5, r6, r7}
 8012890:	b2c9      	uxtb	r1, r1
 8012892:	4760      	bx	ip

08012894 <_ZN8touchgfx13AbstractClockC1Ev>:
 8012894:	2101      	movs	r1, #1
 8012896:	2200      	movs	r2, #0
 8012898:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801289c:	490a      	ldr	r1, [pc, #40]	@ (80128c8 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 801289e:	8082      	strh	r2, [r0, #4]
 80128a0:	80c2      	strh	r2, [r0, #6]
 80128a2:	8102      	strh	r2, [r0, #8]
 80128a4:	8142      	strh	r2, [r0, #10]
 80128a6:	8182      	strh	r2, [r0, #12]
 80128a8:	81c2      	strh	r2, [r0, #14]
 80128aa:	8202      	strh	r2, [r0, #16]
 80128ac:	8242      	strh	r2, [r0, #18]
 80128ae:	61c2      	str	r2, [r0, #28]
 80128b0:	8402      	strh	r2, [r0, #32]
 80128b2:	8442      	strh	r2, [r0, #34]	@ 0x22
 80128b4:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80128b8:	6001      	str	r1, [r0, #0]
 80128ba:	6282      	str	r2, [r0, #40]	@ 0x28
 80128bc:	8582      	strh	r2, [r0, #44]	@ 0x2c
 80128be:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
 80128c2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80128c6:	4770      	bx	lr
 80128c8:	0802bb5c 	.word	0x0802bb5c

080128cc <_ZNK8touchgfx13AbstractClock14getCurrentHourEv>:
 80128cc:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80128d0:	4770      	bx	lr

080128d2 <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 80128d2:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80128d6:	4770      	bx	lr

080128d8 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 80128d8:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80128dc:	220c      	movs	r2, #12
 80128de:	f100 030b 	add.w	r3, r0, #11
 80128e2:	fb93 f0f2 	sdiv	r0, r3, r2
 80128e6:	fb02 3010 	mls	r0, r2, r0, r3
 80128ea:	3001      	adds	r0, #1
 80128ec:	b2c0      	uxtb	r0, r0
 80128ee:	4770      	bx	lr

080128f0 <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 80128f0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80128f4:	280b      	cmp	r0, #11
 80128f6:	bf8c      	ite	hi
 80128f8:	2000      	movhi	r0, #0
 80128fa:	2001      	movls	r0, #1
 80128fc:	4770      	bx	lr

080128fe <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 80128fe:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8012902:	4770      	bx	lr

08012904 <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 8012904:	f890 002e 	ldrb.w	r0, [r0, #46]	@ 0x2e
 8012908:	4770      	bx	lr

0801290a <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801290a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801290c:	2000      	movs	r0, #0
 801290e:	b12b      	cbz	r3, 801291c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012910:	b920      	cbnz	r0, 801291c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012912:	1a5a      	subs	r2, r3, r1
 8012914:	699b      	ldr	r3, [r3, #24]
 8012916:	4250      	negs	r0, r2
 8012918:	4150      	adcs	r0, r2
 801291a:	e7f8      	b.n	801290e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801291c:	4770      	bx	lr

0801291e <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801291e:	2300      	movs	r3, #0
 8012920:	6148      	str	r0, [r1, #20]
 8012922:	618b      	str	r3, [r1, #24]
 8012924:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012926:	b913      	cbnz	r3, 801292e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012928:	6281      	str	r1, [r0, #40]	@ 0x28
 801292a:	4770      	bx	lr
 801292c:	4613      	mov	r3, r2
 801292e:	699a      	ldr	r2, [r3, #24]
 8012930:	2a00      	cmp	r2, #0
 8012932:	d1fb      	bne.n	801292c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012934:	6199      	str	r1, [r3, #24]
 8012936:	4770      	bx	lr

08012938 <_ZN8touchgfx9Container9removeAllEv>:
 8012938:	2200      	movs	r2, #0
 801293a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801293c:	b123      	cbz	r3, 8012948 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801293e:	6999      	ldr	r1, [r3, #24]
 8012940:	6281      	str	r1, [r0, #40]	@ 0x28
 8012942:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012946:	e7f8      	b.n	801293a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012948:	4770      	bx	lr

0801294a <_ZN8touchgfx9Container6unlinkEv>:
 801294a:	2300      	movs	r3, #0
 801294c:	6283      	str	r3, [r0, #40]	@ 0x28
 801294e:	4770      	bx	lr

08012950 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012950:	2200      	movs	r2, #0
 8012952:	8002      	strh	r2, [r0, #0]
 8012954:	8042      	strh	r2, [r0, #2]
 8012956:	8082      	strh	r2, [r0, #4]
 8012958:	80c2      	strh	r2, [r0, #6]
 801295a:	4770      	bx	lr

0801295c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801295c:	b570      	push	{r4, r5, r6, lr}
 801295e:	460d      	mov	r5, r1
 8012960:	4616      	mov	r6, r2
 8012962:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012964:	b13c      	cbz	r4, 8012976 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012966:	6823      	ldr	r3, [r4, #0]
 8012968:	4620      	mov	r0, r4
 801296a:	4632      	mov	r2, r6
 801296c:	4629      	mov	r1, r5
 801296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012970:	4798      	blx	r3
 8012972:	69a4      	ldr	r4, [r4, #24]
 8012974:	e7f6      	b.n	8012964 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012976:	bd70      	pop	{r4, r5, r6, pc}

08012978 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012978:	b538      	push	{r3, r4, r5, lr}
 801297a:	460d      	mov	r5, r1
 801297c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801297e:	b134      	cbz	r4, 801298e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012980:	682b      	ldr	r3, [r5, #0]
 8012982:	4621      	mov	r1, r4
 8012984:	4628      	mov	r0, r5
 8012986:	689b      	ldr	r3, [r3, #8]
 8012988:	4798      	blx	r3
 801298a:	69a4      	ldr	r4, [r4, #24]
 801298c:	e7f7      	b.n	801297e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801298e:	bd38      	pop	{r3, r4, r5, pc}

08012990 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012990:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012992:	b19b      	cbz	r3, 80129bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012994:	428b      	cmp	r3, r1
 8012996:	d109      	bne.n	80129ac <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012998:	699a      	ldr	r2, [r3, #24]
 801299a:	2100      	movs	r1, #0
 801299c:	6159      	str	r1, [r3, #20]
 801299e:	6282      	str	r2, [r0, #40]	@ 0x28
 80129a0:	b902      	cbnz	r2, 80129a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80129a2:	4770      	bx	lr
 80129a4:	6199      	str	r1, [r3, #24]
 80129a6:	4770      	bx	lr
 80129a8:	4613      	mov	r3, r2
 80129aa:	b13a      	cbz	r2, 80129bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80129ac:	699a      	ldr	r2, [r3, #24]
 80129ae:	428a      	cmp	r2, r1
 80129b0:	d1fa      	bne.n	80129a8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80129b2:	698a      	ldr	r2, [r1, #24]
 80129b4:	619a      	str	r2, [r3, #24]
 80129b6:	2300      	movs	r3, #0
 80129b8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80129bc:	4770      	bx	lr

080129be <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80129be:	b410      	push	{r4}
 80129c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80129c2:	4604      	mov	r4, r0
 80129c4:	b92b      	cbnz	r3, 80129d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80129c6:	6803      	ldr	r3, [r0, #0]
 80129c8:	4611      	mov	r1, r2
 80129ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80129d0:	4718      	bx	r3
 80129d2:	b941      	cbnz	r1, 80129e6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80129d4:	6193      	str	r3, [r2, #24]
 80129d6:	6282      	str	r2, [r0, #40]	@ 0x28
 80129d8:	6154      	str	r4, [r2, #20]
 80129da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129de:	4770      	bx	lr
 80129e0:	4603      	mov	r3, r0
 80129e2:	2800      	cmp	r0, #0
 80129e4:	d0f9      	beq.n	80129da <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80129e6:	4299      	cmp	r1, r3
 80129e8:	6998      	ldr	r0, [r3, #24]
 80129ea:	d1f9      	bne.n	80129e0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80129ec:	6190      	str	r0, [r2, #24]
 80129ee:	618a      	str	r2, [r1, #24]
 80129f0:	e7f2      	b.n	80129d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080129f2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80129f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f6:	461f      	mov	r7, r3
 80129f8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80129fc:	460d      	mov	r5, r1
 80129fe:	4616      	mov	r6, r2
 8012a00:	b103      	cbz	r3, 8012a04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012a02:	6038      	str	r0, [r7, #0]
 8012a04:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012a06:	b314      	cbz	r4, 8012a4e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012a08:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012a0c:	b1eb      	cbz	r3, 8012a4a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a0e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012a12:	428d      	cmp	r5, r1
 8012a14:	db19      	blt.n	8012a4a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a16:	b289      	uxth	r1, r1
 8012a18:	8923      	ldrh	r3, [r4, #8]
 8012a1a:	440b      	add	r3, r1
 8012a1c:	b21b      	sxth	r3, r3
 8012a1e:	429d      	cmp	r5, r3
 8012a20:	da13      	bge.n	8012a4a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a22:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012a26:	4296      	cmp	r6, r2
 8012a28:	db0f      	blt.n	8012a4a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a2a:	b292      	uxth	r2, r2
 8012a2c:	8963      	ldrh	r3, [r4, #10]
 8012a2e:	4413      	add	r3, r2
 8012a30:	b21b      	sxth	r3, r3
 8012a32:	429e      	cmp	r6, r3
 8012a34:	da09      	bge.n	8012a4a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a36:	6823      	ldr	r3, [r4, #0]
 8012a38:	1ab2      	subs	r2, r6, r2
 8012a3a:	1a69      	subs	r1, r5, r1
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8012a42:	b212      	sxth	r2, r2
 8012a44:	463b      	mov	r3, r7
 8012a46:	b209      	sxth	r1, r1
 8012a48:	47c0      	blx	r8
 8012a4a:	69a4      	ldr	r4, [r4, #24]
 8012a4c:	e7db      	b.n	8012a06 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012a54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a58:	4c6d      	ldr	r4, [pc, #436]	@ (8012c10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012a5a:	b0a1      	sub	sp, #132	@ 0x84
 8012a5c:	4606      	mov	r6, r0
 8012a5e:	6824      	ldr	r4, [r4, #0]
 8012a60:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8012a62:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8012a66:	2400      	movs	r4, #0
 8012a68:	9303      	str	r3, [sp, #12]
 8012a6a:	802c      	strh	r4, [r5, #0]
 8012a6c:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8012a6e:	802c      	strh	r4, [r5, #0]
 8012a70:	601c      	str	r4, [r3, #0]
 8012a72:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012a76:	f7ff ffbc 	bl	80129f2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012a7a:	f1b9 0f03 	cmp.w	r9, #3
 8012a7e:	f340 80c1 	ble.w	8012c04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8012a82:	4631      	mov	r1, r6
 8012a84:	a80c      	add	r0, sp, #48	@ 0x30
 8012a86:	f005 fdbd 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012a8a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8012a8e:	9306      	str	r3, [sp, #24]
 8012a90:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012a94:	9307      	str	r3, [sp, #28]
 8012a96:	9b03      	ldr	r3, [sp, #12]
 8012a98:	f8d3 a000 	ldr.w	sl, [r3]
 8012a9c:	f1ba 0f00 	cmp.w	sl, #0
 8012aa0:	f000 80b3 	beq.w	8012c0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8012aa4:	4651      	mov	r1, sl
 8012aa6:	a810      	add	r0, sp, #64	@ 0x40
 8012aa8:	f005 fdac 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012aac:	2002      	movs	r0, #2
 8012aae:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8012ab2:	9b01      	ldr	r3, [sp, #4]
 8012ab4:	9a06      	ldr	r2, [sp, #24]
 8012ab6:	fb91 f1f0 	sdiv	r1, r1, r0
 8012aba:	189d      	adds	r5, r3, r2
 8012abc:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8012ac0:	9a07      	ldr	r2, [sp, #28]
 8012ac2:	4419      	add	r1, r3
 8012ac4:	9b02      	ldr	r3, [sp, #8]
 8012ac6:	4413      	add	r3, r2
 8012ac8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8012acc:	1a6d      	subs	r5, r5, r1
 8012ace:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8012ad2:	fb92 f2f0 	sdiv	r2, r2, r0
 8012ad6:	440a      	add	r2, r1
 8012ad8:	1a9b      	subs	r3, r3, r2
 8012ada:	435b      	muls	r3, r3
 8012adc:	fb05 3505 	mla	r5, r5, r5, r3
 8012ae0:	4f4c      	ldr	r7, [pc, #304]	@ (8012c14 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012ae2:	ac10      	add	r4, sp, #64	@ 0x40
 8012ae4:	f1b9 0f0c 	cmp.w	r9, #12
 8012ae8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012aec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012af0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012af4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012afc:	f04f 0303 	mov.w	r3, #3
 8012b00:	bfd8      	it	le
 8012b02:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012b06:	f04f 0400 	mov.w	r4, #0
 8012b0a:	f8cd 9000 	str.w	r9, [sp]
 8012b0e:	bfcc      	ite	gt
 8012b10:	4698      	movgt	r8, r3
 8012b12:	fb92 f8f3 	sdivle	r8, r2, r3
 8012b16:	1c63      	adds	r3, r4, #1
 8012b18:	aa10      	add	r2, sp, #64	@ 0x40
 8012b1a:	f004 0401 	and.w	r4, r4, #1
 8012b1e:	f04f 0b00 	mov.w	fp, #0
 8012b22:	9308      	str	r3, [sp, #32]
 8012b24:	9b00      	ldr	r3, [sp, #0]
 8012b26:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012b2a:	fb93 f3f8 	sdiv	r3, r3, r8
 8012b2e:	3404      	adds	r4, #4
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	9304      	str	r3, [sp, #16]
 8012b34:	9a04      	ldr	r2, [sp, #16]
 8012b36:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012b3a:	fb13 f302 	smulbb	r3, r3, r2
 8012b3e:	9a01      	ldr	r2, [sp, #4]
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	1899      	adds	r1, r3, r2
 8012b44:	9305      	str	r3, [sp, #20]
 8012b46:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012b4a:	b209      	sxth	r1, r1
 8012b4c:	4299      	cmp	r1, r3
 8012b4e:	db4d      	blt.n	8012bec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012b50:	8932      	ldrh	r2, [r6, #8]
 8012b52:	4413      	add	r3, r2
 8012b54:	b21b      	sxth	r3, r3
 8012b56:	4299      	cmp	r1, r3
 8012b58:	da48      	bge.n	8012bec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012b5a:	9b04      	ldr	r3, [sp, #16]
 8012b5c:	6827      	ldr	r7, [r4, #0]
 8012b5e:	fb17 f703 	smulbb	r7, r7, r3
 8012b62:	9b02      	ldr	r3, [sp, #8]
 8012b64:	b2bf      	uxth	r7, r7
 8012b66:	18fa      	adds	r2, r7, r3
 8012b68:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012b6c:	b212      	sxth	r2, r2
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	db3c      	blt.n	8012bec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012b72:	8970      	ldrh	r0, [r6, #10]
 8012b74:	4403      	add	r3, r0
 8012b76:	b21b      	sxth	r3, r3
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	da37      	bge.n	8012bec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	4630      	mov	r0, r6
 8012b80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b82:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012b84:	f7ff ff35 	bl	80129f2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012b88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012b8a:	b37a      	cbz	r2, 8012bec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012b8c:	4552      	cmp	r2, sl
 8012b8e:	d02d      	beq.n	8012bec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012b90:	4611      	mov	r1, r2
 8012b92:	a80e      	add	r0, sp, #56	@ 0x38
 8012b94:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b96:	f005 fd35 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012b9a:	f04f 0e02 	mov.w	lr, #2
 8012b9e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8012ba2:	9a06      	ldr	r2, [sp, #24]
 8012ba4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8012ba8:	9b01      	ldr	r3, [sp, #4]
 8012baa:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8012bae:	4413      	add	r3, r2
 8012bb0:	9a07      	ldr	r2, [sp, #28]
 8012bb2:	fb91 f1fe 	sdiv	r1, r1, lr
 8012bb6:	fb9c fcfe 	sdiv	ip, ip, lr
 8012bba:	4401      	add	r1, r0
 8012bbc:	1a58      	subs	r0, r3, r1
 8012bbe:	9b02      	ldr	r3, [sp, #8]
 8012bc0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8012bc4:	4413      	add	r3, r2
 8012bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012bc8:	448c      	add	ip, r1
 8012bca:	eba3 030c 	sub.w	r3, r3, ip
 8012bce:	435b      	muls	r3, r3
 8012bd0:	fb00 3300 	mla	r3, r0, r0, r3
 8012bd4:	42ab      	cmp	r3, r5
 8012bd6:	d208      	bcs.n	8012bea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012bd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012bda:	461d      	mov	r5, r3
 8012bdc:	9803      	ldr	r0, [sp, #12]
 8012bde:	6001      	str	r1, [r0, #0]
 8012be0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8012be2:	9805      	ldr	r0, [sp, #20]
 8012be4:	8008      	strh	r0, [r1, #0]
 8012be6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8012be8:	800f      	strh	r7, [r1, #0]
 8012bea:	4692      	mov	sl, r2
 8012bec:	f10b 0b01 	add.w	fp, fp, #1
 8012bf0:	3408      	adds	r4, #8
 8012bf2:	f1bb 0f04 	cmp.w	fp, #4
 8012bf6:	d19d      	bne.n	8012b34 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012bf8:	9b00      	ldr	r3, [sp, #0]
 8012bfa:	9c08      	ldr	r4, [sp, #32]
 8012bfc:	444b      	add	r3, r9
 8012bfe:	4544      	cmp	r4, r8
 8012c00:	9300      	str	r3, [sp, #0]
 8012c02:	d188      	bne.n	8012b16 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012c04:	b021      	add	sp, #132	@ 0x84
 8012c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c0a:	f04f 35ff 	mov.w	r5, #4294967295
 8012c0e:	e767      	b.n	8012ae0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012c10:	24006600 	.word	0x24006600
 8012c14:	0802af1c 	.word	0x0802af1c

08012c18 <_ZN8touchgfx4RectaNERKS0_>:
 8012c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c1c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012c20:	888c      	ldrh	r4, [r1, #4]
 8012c22:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012c26:	443c      	add	r4, r7
 8012c28:	b2a4      	uxth	r4, r4
 8012c2a:	fa0f f884 	sxth.w	r8, r4
 8012c2e:	45c1      	cmp	r9, r8
 8012c30:	da2f      	bge.n	8012c92 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012c32:	8882      	ldrh	r2, [r0, #4]
 8012c34:	444a      	add	r2, r9
 8012c36:	b292      	uxth	r2, r2
 8012c38:	fa0f fe82 	sxth.w	lr, r2
 8012c3c:	4577      	cmp	r7, lr
 8012c3e:	da28      	bge.n	8012c92 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012c40:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012c44:	88cb      	ldrh	r3, [r1, #6]
 8012c46:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012c4a:	442b      	add	r3, r5
 8012c4c:	b21b      	sxth	r3, r3
 8012c4e:	429e      	cmp	r6, r3
 8012c50:	da1f      	bge.n	8012c92 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012c52:	88c3      	ldrh	r3, [r0, #6]
 8012c54:	4433      	add	r3, r6
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	fa0f fc83 	sxth.w	ip, r3
 8012c5c:	4565      	cmp	r5, ip
 8012c5e:	da18      	bge.n	8012c92 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012c60:	454f      	cmp	r7, r9
 8012c62:	bfb8      	it	lt
 8012c64:	464f      	movlt	r7, r9
 8012c66:	42b5      	cmp	r5, r6
 8012c68:	bfb8      	it	lt
 8012c6a:	4635      	movlt	r5, r6
 8012c6c:	45f0      	cmp	r8, lr
 8012c6e:	bfd8      	it	le
 8012c70:	4622      	movle	r2, r4
 8012c72:	1bd2      	subs	r2, r2, r7
 8012c74:	8082      	strh	r2, [r0, #4]
 8012c76:	884a      	ldrh	r2, [r1, #2]
 8012c78:	88c9      	ldrh	r1, [r1, #6]
 8012c7a:	8007      	strh	r7, [r0, #0]
 8012c7c:	440a      	add	r2, r1
 8012c7e:	8045      	strh	r5, [r0, #2]
 8012c80:	b292      	uxth	r2, r2
 8012c82:	b211      	sxth	r1, r2
 8012c84:	458c      	cmp	ip, r1
 8012c86:	bfa8      	it	ge
 8012c88:	4613      	movge	r3, r2
 8012c8a:	1b5b      	subs	r3, r3, r5
 8012c8c:	80c3      	strh	r3, [r0, #6]
 8012c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c92:	2300      	movs	r3, #0
 8012c94:	8003      	strh	r3, [r0, #0]
 8012c96:	8043      	strh	r3, [r0, #2]
 8012c98:	8083      	strh	r3, [r0, #4]
 8012c9a:	80c3      	strh	r3, [r0, #6]
 8012c9c:	e7f7      	b.n	8012c8e <_ZN8touchgfx4RectaNERKS0_+0x76>

08012c9e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012c9e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	dd06      	ble.n	8012cb4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012ca6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012caa:	2800      	cmp	r0, #0
 8012cac:	bfcc      	ite	gt
 8012cae:	2000      	movgt	r0, #0
 8012cb0:	2001      	movle	r0, #1
 8012cb2:	4770      	bx	lr
 8012cb4:	2001      	movs	r0, #1
 8012cb6:	4770      	bx	lr

08012cb8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8012cc2:	8003      	strh	r3, [r0, #0]
 8012cc4:	8043      	strh	r3, [r0, #2]
 8012cc6:	8083      	strh	r3, [r0, #4]
 8012cc8:	80c3      	strh	r3, [r0, #6]
 8012cca:	2d00      	cmp	r5, #0
 8012ccc:	d040      	beq.n	8012d50 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012cce:	1d28      	adds	r0, r5, #4
 8012cd0:	f7ff ffe5 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012cd4:	b988      	cbnz	r0, 8012cfa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f7ff ffe1 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012cdc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012ce0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012ce4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012ce8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012cec:	b138      	cbz	r0, 8012cfe <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012cee:	8022      	strh	r2, [r4, #0]
 8012cf0:	8063      	strh	r3, [r4, #2]
 8012cf2:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012cf6:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012cfa:	69ad      	ldr	r5, [r5, #24]
 8012cfc:	e7e5      	b.n	8012cca <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012cfe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012d02:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012d06:	4290      	cmp	r0, r2
 8012d08:	4607      	mov	r7, r0
 8012d0a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8012d0e:	460e      	mov	r6, r1
 8012d10:	bfa8      	it	ge
 8012d12:	4617      	movge	r7, r2
 8012d14:	4299      	cmp	r1, r3
 8012d16:	4472      	add	r2, lr
 8012d18:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012d1c:	bfa8      	it	ge
 8012d1e:	461e      	movge	r6, r3
 8012d20:	4440      	add	r0, r8
 8012d22:	4471      	add	r1, lr
 8012d24:	4463      	add	r3, ip
 8012d26:	b200      	sxth	r0, r0
 8012d28:	8027      	strh	r7, [r4, #0]
 8012d2a:	b212      	sxth	r2, r2
 8012d2c:	8066      	strh	r6, [r4, #2]
 8012d2e:	b209      	sxth	r1, r1
 8012d30:	b21b      	sxth	r3, r3
 8012d32:	4290      	cmp	r0, r2
 8012d34:	bfac      	ite	ge
 8012d36:	ebc7 0200 	rsbge	r2, r7, r0
 8012d3a:	ebc7 0202 	rsblt	r2, r7, r2
 8012d3e:	4299      	cmp	r1, r3
 8012d40:	bfac      	ite	ge
 8012d42:	ebc6 0301 	rsbge	r3, r6, r1
 8012d46:	ebc6 0303 	rsblt	r3, r6, r3
 8012d4a:	80a2      	strh	r2, [r4, #4]
 8012d4c:	80e3      	strh	r3, [r4, #6]
 8012d4e:	e7d4      	b.n	8012cfa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012d50:	4620      	mov	r0, r4
 8012d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d56 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012d56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012d5a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8012d5e:	b383      	cbz	r3, 8012dc2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012d60:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012d62:	b374      	cbz	r4, 8012dc2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012d64:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012d68:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012d6c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012d70:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012d74:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012d78:	b303      	cbz	r3, 8012dbc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012d7a:	4668      	mov	r0, sp
 8012d7c:	1d21      	adds	r1, r4, #4
 8012d7e:	f8ad 5000 	strh.w	r5, [sp]
 8012d82:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012d86:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012d8a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012d8e:	f7ff ff43 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8012d92:	4668      	mov	r0, sp
 8012d94:	f7ff ff83 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012d98:	b980      	cbnz	r0, 8012dbc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012d9a:	f8bd 3000 	ldrh.w	r3, [sp]
 8012d9e:	4669      	mov	r1, sp
 8012da0:	88a2      	ldrh	r2, [r4, #4]
 8012da2:	4620      	mov	r0, r4
 8012da4:	1a9b      	subs	r3, r3, r2
 8012da6:	88e2      	ldrh	r2, [r4, #6]
 8012da8:	f8ad 3000 	strh.w	r3, [sp]
 8012dac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012db0:	1a9b      	subs	r3, r3, r2
 8012db2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012db6:	6823      	ldr	r3, [r4, #0]
 8012db8:	689b      	ldr	r3, [r3, #8]
 8012dba:	4798      	blx	r3
 8012dbc:	69a4      	ldr	r4, [r4, #24]
 8012dbe:	2c00      	cmp	r4, #0
 8012dc0:	d1d8      	bne.n	8012d74 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012dc2:	b002      	add	sp, #8
 8012dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012dc8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012dc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012dca:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8012dce:	460d      	mov	r5, r1
 8012dd0:	4616      	mov	r6, r2
 8012dd2:	b323      	cbz	r3, 8012e1e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012dd4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012dd6:	b314      	cbz	r4, 8012e1e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012dd8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012ddc:	b1eb      	cbz	r3, 8012e1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012dde:	6828      	ldr	r0, [r5, #0]
 8012de0:	466b      	mov	r3, sp
 8012de2:	6869      	ldr	r1, [r5, #4]
 8012de4:	c303      	stmia	r3!, {r0, r1}
 8012de6:	4668      	mov	r0, sp
 8012de8:	1d21      	adds	r1, r4, #4
 8012dea:	f7ff ff15 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8012dee:	4668      	mov	r0, sp
 8012df0:	f7ff ff55 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012df4:	b988      	cbnz	r0, 8012e1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012df6:	f8bd 3000 	ldrh.w	r3, [sp]
 8012dfa:	4669      	mov	r1, sp
 8012dfc:	88a2      	ldrh	r2, [r4, #4]
 8012dfe:	4620      	mov	r0, r4
 8012e00:	1a9b      	subs	r3, r3, r2
 8012e02:	88e2      	ldrh	r2, [r4, #6]
 8012e04:	f8ad 3000 	strh.w	r3, [sp]
 8012e08:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012e0c:	1a9b      	subs	r3, r3, r2
 8012e0e:	4632      	mov	r2, r6
 8012e10:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012e14:	6823      	ldr	r3, [r4, #0]
 8012e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012e18:	4798      	blx	r3
 8012e1a:	69a4      	ldr	r4, [r4, #24]
 8012e1c:	e7db      	b.n	8012dd6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012e1e:	b002      	add	sp, #8
 8012e20:	bd70      	pop	{r4, r5, r6, pc}

08012e22 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8012e22:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8012e26:	4770      	bx	lr

08012e28 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8012e28:	4770      	bx	lr

08012e2a <_ZN8touchgfx3HAL10FlushCacheEv>:
 8012e2a:	4770      	bx	lr

08012e2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8012e2c:	6803      	ldr	r3, [r0, #0]
 8012e2e:	b513      	push	{r0, r1, r4, lr}
 8012e30:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8012e34:	2300      	movs	r3, #0
 8012e36:	e9cd 3300 	strd	r3, r3, [sp]
 8012e3a:	466b      	mov	r3, sp
 8012e3c:	47a0      	blx	r4
 8012e3e:	b002      	add	sp, #8
 8012e40:	bd10      	pop	{r4, pc}

08012e42 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8012e42:	2301      	movs	r3, #1
 8012e44:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8012e48:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8012e4c:	4770      	bx	lr

08012e4e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012e4e:	2301      	movs	r3, #1
 8012e50:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8012e54:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8012e58:	4770      	bx	lr

08012e5a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012e5a:	6843      	ldr	r3, [r0, #4]
 8012e5c:	2201      	movs	r2, #1
 8012e5e:	725a      	strb	r2, [r3, #9]
 8012e60:	6840      	ldr	r0, [r0, #4]
 8012e62:	6803      	ldr	r3, [r0, #0]
 8012e64:	691b      	ldr	r3, [r3, #16]
 8012e66:	4718      	bx	r3

08012e68 <_ZN8touchgfx3HAL8flushDMAEv>:
 8012e68:	6840      	ldr	r0, [r0, #4]
 8012e6a:	6803      	ldr	r3, [r0, #0]
 8012e6c:	689b      	ldr	r3, [r3, #8]
 8012e6e:	4718      	bx	r3

08012e70 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012e70:	b530      	push	{r4, r5, lr}
 8012e72:	b08b      	sub	sp, #44	@ 0x2c
 8012e74:	6804      	ldr	r4, [r0, #0]
 8012e76:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8012e7a:	9509      	str	r5, [sp, #36]	@ 0x24
 8012e7c:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8012e80:	9508      	str	r5, [sp, #32]
 8012e82:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8012e86:	9507      	str	r5, [sp, #28]
 8012e88:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8012e8c:	9506      	str	r5, [sp, #24]
 8012e8e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8012e92:	9505      	str	r5, [sp, #20]
 8012e94:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8012e98:	9504      	str	r5, [sp, #16]
 8012e9a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8012e9e:	9503      	str	r5, [sp, #12]
 8012ea0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8012ea4:	9502      	str	r5, [sp, #8]
 8012ea6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8012eaa:	e9cd 3500 	strd	r3, r5, [sp]
 8012eae:	4613      	mov	r3, r2
 8012eb0:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	47a0      	blx	r4
 8012eb6:	b00b      	add	sp, #44	@ 0x2c
 8012eb8:	bd30      	pop	{r4, r5, pc}
	...

08012ebc <_ZN8touchgfx3HAL10beginFrameEv>:
 8012ebc:	4b04      	ldr	r3, [pc, #16]	@ (8012ed0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	b123      	cbz	r3, 8012ecc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012ec2:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8012ec6:	f080 0001 	eor.w	r0, r0, #1
 8012eca:	4770      	bx	lr
 8012ecc:	2001      	movs	r0, #1
 8012ece:	4770      	bx	lr
 8012ed0:	240065fe 	.word	0x240065fe

08012ed4 <_ZN8touchgfx3HAL8endFrameEv>:
 8012ed4:	b510      	push	{r4, lr}
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	6840      	ldr	r0, [r0, #4]
 8012eda:	6803      	ldr	r3, [r0, #0]
 8012edc:	689b      	ldr	r3, [r3, #8]
 8012ede:	4798      	blx	r3
 8012ee0:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8012ee4:	b113      	cbz	r3, 8012eec <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8012eec:	bd10      	pop	{r4, pc}

08012eee <_ZN8touchgfx3HAL10initializeEv>:
 8012eee:	b510      	push	{r4, lr}
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	f7fd f9f1 	bl	80102d8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8012ef6:	f7fc ff25 	bl	800fd44 <_ZN8touchgfx4GPIO4initEv>
 8012efa:	6860      	ldr	r0, [r4, #4]
 8012efc:	6803      	ldr	r3, [r0, #0]
 8012efe:	68db      	ldr	r3, [r3, #12]
 8012f00:	4798      	blx	r3
 8012f02:	68e0      	ldr	r0, [r4, #12]
 8012f04:	6803      	ldr	r3, [r0, #0]
 8012f06:	689b      	ldr	r3, [r3, #8]
 8012f08:	4798      	blx	r3
 8012f0a:	6823      	ldr	r3, [r4, #0]
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f14:	4718      	bx	r3

08012f16 <_ZN8touchgfx3HAL9taskEntryEv>:
 8012f16:	b508      	push	{r3, lr}
 8012f18:	6803      	ldr	r3, [r0, #0]
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f20:	4798      	blx	r3
 8012f22:	6823      	ldr	r3, [r4, #0]
 8012f24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012f26:	4620      	mov	r0, r4
 8012f28:	4798      	blx	r3
 8012f2a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012f2e:	2b02      	cmp	r3, #2
 8012f30:	d001      	beq.n	8012f36 <_ZN8touchgfx3HAL9taskEntryEv+0x20>
 8012f32:	f7fd fa47 	bl	80103c4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f3a:	e7f4      	b.n	8012f26 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08012f3c <_ZN8touchgfx3HAL4tickEv>:
 8012f3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012f3e:	6803      	ldr	r3, [r0, #0]
 8012f40:	4604      	mov	r4, r0
 8012f42:	4d62      	ldr	r5, [pc, #392]	@ (80130cc <_ZN8touchgfx3HAL4tickEv+0x190>)
 8012f44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8012f48:	4798      	blx	r3
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	f000 809e 	beq.w	801308c <_ZN8touchgfx3HAL4tickEv+0x150>
 8012f50:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012f54:	2b02      	cmp	r3, #2
 8012f56:	d002      	beq.n	8012f5e <_ZN8touchgfx3HAL4tickEv+0x22>
 8012f58:	2001      	movs	r0, #1
 8012f5a:	f7fc fefb 	bl	800fd54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012f5e:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8012f62:	2600      	movs	r6, #0
 8012f64:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8012f68:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8012f6c:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8012f70:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8012f74:	b133      	cbz	r3, 8012f84 <_ZN8touchgfx3HAL4tickEv+0x48>
 8012f76:	6823      	ldr	r3, [r4, #0]
 8012f78:	4620      	mov	r0, r4
 8012f7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8012f7e:	4798      	blx	r3
 8012f80:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8012f84:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8012f88:	2601      	movs	r6, #1
 8012f8a:	6862      	ldr	r2, [r4, #4]
 8012f8c:	f083 0301 	eor.w	r3, r3, #1
 8012f90:	702e      	strb	r6, [r5, #0]
 8012f92:	7253      	strb	r3, [r2, #9]
 8012f94:	f004 f898 	bl	80170c8 <_ZN8touchgfx11Application11getInstanceEv>
 8012f98:	6803      	ldr	r3, [r0, #0]
 8012f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f9c:	4798      	blx	r3
 8012f9e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8012fa2:	b90b      	cbnz	r3, 8012fa8 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8012fa4:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8012fa8:	f004 f88e 	bl	80170c8 <_ZN8touchgfx11Application11getInstanceEv>
 8012fac:	6803      	ldr	r3, [r0, #0]
 8012fae:	695b      	ldr	r3, [r3, #20]
 8012fb0:	4798      	blx	r3
 8012fb2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8012fb4:	6803      	ldr	r3, [r0, #0]
 8012fb6:	691b      	ldr	r3, [r3, #16]
 8012fb8:	4798      	blx	r3
 8012fba:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8012fbe:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8012fc2:	3b01      	subs	r3, #1
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8012fca:	b10a      	cbz	r2, 8012fd0 <_ZN8touchgfx3HAL4tickEv+0x94>
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d1eb      	bne.n	8012fa8 <_ZN8touchgfx3HAL4tickEv+0x6c>
 8012fd0:	4a3f      	ldr	r2, [pc, #252]	@ (80130d0 <_ZN8touchgfx3HAL4tickEv+0x194>)
 8012fd2:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8012fd6:	7813      	ldrb	r3, [r2, #0]
 8012fd8:	3301      	adds	r3, #1
 8012fda:	b25b      	sxtb	r3, r3
 8012fdc:	4299      	cmp	r1, r3
 8012fde:	7013      	strb	r3, [r2, #0]
 8012fe0:	dc10      	bgt.n	8013004 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	68e0      	ldr	r0, [r4, #12]
 8012fe6:	a902      	add	r1, sp, #8
 8012fe8:	7013      	strb	r3, [r2, #0]
 8012fea:	aa03      	add	r2, sp, #12
 8012fec:	6803      	ldr	r3, [r0, #0]
 8012fee:	68db      	ldr	r3, [r3, #12]
 8012ff0:	4798      	blx	r3
 8012ff2:	6823      	ldr	r3, [r4, #0]
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	d059      	beq.n	80130ac <_ZN8touchgfx3HAL4tickEv+0x170>
 8012ff8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013002:	4798      	blx	r3
 8013004:	2300      	movs	r3, #0
 8013006:	6960      	ldr	r0, [r4, #20]
 8013008:	f88d 3007 	strb.w	r3, [sp, #7]
 801300c:	b158      	cbz	r0, 8013026 <_ZN8touchgfx3HAL4tickEv+0xea>
 801300e:	6803      	ldr	r3, [r0, #0]
 8013010:	f10d 0107 	add.w	r1, sp, #7
 8013014:	68db      	ldr	r3, [r3, #12]
 8013016:	4798      	blx	r3
 8013018:	b128      	cbz	r0, 8013026 <_ZN8touchgfx3HAL4tickEv+0xea>
 801301a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801301c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013020:	6803      	ldr	r3, [r0, #0]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	4798      	blx	r3
 8013026:	f104 001c 	add.w	r0, r4, #28
 801302a:	f015 fecb 	bl	8028dc4 <_ZN8touchgfx8Gestures4tickEv>
 801302e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8013032:	b30b      	cbz	r3, 8013078 <_ZN8touchgfx3HAL4tickEv+0x13c>
 8013034:	6920      	ldr	r0, [r4, #16]
 8013036:	6803      	ldr	r3, [r0, #0]
 8013038:	691b      	ldr	r3, [r3, #16]
 801303a:	4798      	blx	r3
 801303c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801303e:	4606      	mov	r6, r0
 8013040:	b903      	cbnz	r3, 8013044 <_ZN8touchgfx3HAL4tickEv+0x108>
 8013042:	6760      	str	r0, [r4, #116]	@ 0x74
 8013044:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8013046:	4a23      	ldr	r2, [pc, #140]	@ (80130d4 <_ZN8touchgfx3HAL4tickEv+0x198>)
 8013048:	1af3      	subs	r3, r6, r3
 801304a:	4293      	cmp	r3, r2
 801304c:	d914      	bls.n	8013078 <_ZN8touchgfx3HAL4tickEv+0x13c>
 801304e:	6920      	ldr	r0, [r4, #16]
 8013050:	6803      	ldr	r3, [r0, #0]
 8013052:	699b      	ldr	r3, [r3, #24]
 8013054:	4798      	blx	r3
 8013056:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8013058:	2264      	movs	r2, #100	@ 0x64
 801305a:	1af3      	subs	r3, r6, r3
 801305c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013060:	fbb0 f0f3 	udiv	r0, r0, r3
 8013064:	2800      	cmp	r0, #0
 8013066:	dc26      	bgt.n	80130b6 <_ZN8touchgfx3HAL4tickEv+0x17a>
 8013068:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 801306c:	6920      	ldr	r0, [r4, #16]
 801306e:	2100      	movs	r1, #0
 8013070:	6803      	ldr	r3, [r0, #0]
 8013072:	69db      	ldr	r3, [r3, #28]
 8013074:	4798      	blx	r3
 8013076:	6766      	str	r6, [r4, #116]	@ 0x74
 8013078:	6823      	ldr	r3, [r4, #0]
 801307a:	4620      	mov	r0, r4
 801307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013080:	4798      	blx	r3
 8013082:	f004 f821 	bl	80170c8 <_ZN8touchgfx11Application11getInstanceEv>
 8013086:	6803      	ldr	r3, [r0, #0]
 8013088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801308a:	4798      	blx	r3
 801308c:	6823      	ldr	r3, [r4, #0]
 801308e:	4620      	mov	r0, r4
 8013090:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8013094:	4798      	blx	r3
 8013096:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801309a:	2b02      	cmp	r3, #2
 801309c:	d002      	beq.n	80130a4 <_ZN8touchgfx3HAL4tickEv+0x168>
 801309e:	2001      	movs	r0, #1
 80130a0:	f7fc fe74 	bl	800fd8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80130a4:	2300      	movs	r3, #0
 80130a6:	702b      	strb	r3, [r5, #0]
 80130a8:	b004      	add	sp, #16
 80130aa:	bd70      	pop	{r4, r5, r6, pc}
 80130ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80130b0:	4620      	mov	r0, r4
 80130b2:	4798      	blx	r3
 80130b4:	e7a6      	b.n	8013004 <_ZN8touchgfx3HAL4tickEv+0xc8>
 80130b6:	2863      	cmp	r0, #99	@ 0x63
 80130b8:	bfcb      	itete	gt
 80130ba:	2300      	movgt	r3, #0
 80130bc:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 80130c0:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 80130c4:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 80130c8:	e7d0      	b.n	801306c <_ZN8touchgfx3HAL4tickEv+0x130>
 80130ca:	bf00      	nop
 80130cc:	24006604 	.word	0x24006604
 80130d0:	24006605 	.word	0x24006605
 80130d4:	05f5e100 	.word	0x05f5e100

080130d8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80130d8:	b510      	push	{r4, lr}
 80130da:	4604      	mov	r4, r0
 80130dc:	f7fd f93e 	bl	801035c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80130e0:	2200      	movs	r2, #0
 80130e2:	6863      	ldr	r3, [r4, #4]
 80130e4:	729a      	strb	r2, [r3, #10]
 80130e6:	bd10      	pop	{r4, pc}

080130e8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80130e8:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80130ea:	301c      	adds	r0, #28
 80130ec:	f015 be68 	b.w	8028dc0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080130f0 <_ZN8touchgfx3HAL5touchEll>:
 80130f0:	b530      	push	{r4, r5, lr}
 80130f2:	b087      	sub	sp, #28
 80130f4:	4604      	mov	r4, r0
 80130f6:	a804      	add	r0, sp, #16
 80130f8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80130fc:	f003 fdba 	bl	8016c74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8013100:	9b04      	ldr	r3, [sp, #16]
 8013102:	a906      	add	r1, sp, #24
 8013104:	a803      	add	r0, sp, #12
 8013106:	f8ad 300c 	strh.w	r3, [sp, #12]
 801310a:	9b05      	ldr	r3, [sp, #20]
 801310c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8013110:	f003 fe02 	bl	8016d18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013114:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8013118:	f104 001c 	add.w	r0, r4, #28
 801311c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013120:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013124:	b189      	cbz	r1, 801314a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013126:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	4613      	mov	r3, r2
 801312e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8013132:	462a      	mov	r2, r5
 8013134:	f015 fe54 	bl	8028de0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013138:	b128      	cbz	r0, 8013146 <_ZN8touchgfx3HAL5touchEll+0x56>
 801313a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801313e:	6623      	str	r3, [r4, #96]	@ 0x60
 8013140:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013144:	6663      	str	r3, [r4, #100]	@ 0x64
 8013146:	b007      	add	sp, #28
 8013148:	bd30      	pop	{r4, r5, pc}
 801314a:	f015 fe89 	bl	8028e60 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801314e:	2301      	movs	r3, #1
 8013150:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8013154:	e7f1      	b.n	801313a <_ZN8touchgfx3HAL5touchEll+0x4a>

08013156 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013156:	b510      	push	{r4, lr}
 8013158:	2b00      	cmp	r3, #0
 801315a:	d046      	beq.n	80131ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801315c:	ea81 0002 	eor.w	r0, r1, r2
 8013160:	07c4      	lsls	r4, r0, #31
 8013162:	d508      	bpl.n	8013176 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013164:	440b      	add	r3, r1
 8013166:	3a01      	subs	r2, #1
 8013168:	428b      	cmp	r3, r1
 801316a:	d93e      	bls.n	80131ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801316c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013170:	f801 0b01 	strb.w	r0, [r1], #1
 8013174:	e7f8      	b.n	8013168 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8013176:	07d0      	lsls	r0, r2, #31
 8013178:	bf42      	ittt	mi
 801317a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801317e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8013182:	f801 0b01 	strbmi.w	r0, [r1], #1
 8013186:	2b01      	cmp	r3, #1
 8013188:	d911      	bls.n	80131ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801318a:	ea81 0402 	eor.w	r4, r1, r2
 801318e:	4610      	mov	r0, r2
 8013190:	07a4      	lsls	r4, r4, #30
 8013192:	d022      	beq.n	80131da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8013194:	f023 0401 	bic.w	r4, r3, #1
 8013198:	440c      	add	r4, r1
 801319a:	428c      	cmp	r4, r1
 801319c:	4602      	mov	r2, r0
 801319e:	d904      	bls.n	80131aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80131a0:	8812      	ldrh	r2, [r2, #0]
 80131a2:	3002      	adds	r0, #2
 80131a4:	f821 2b02 	strh.w	r2, [r1], #2
 80131a8:	e7f7      	b.n	801319a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80131aa:	f003 0301 	and.w	r3, r3, #1
 80131ae:	f023 0003 	bic.w	r0, r3, #3
 80131b2:	4408      	add	r0, r1
 80131b4:	4288      	cmp	r0, r1
 80131b6:	4614      	mov	r4, r2
 80131b8:	d904      	bls.n	80131c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80131ba:	6824      	ldr	r4, [r4, #0]
 80131bc:	3204      	adds	r2, #4
 80131be:	f841 4b04 	str.w	r4, [r1], #4
 80131c2:	e7f7      	b.n	80131b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80131c4:	f003 0303 	and.w	r3, r3, #3
 80131c8:	3a01      	subs	r2, #1
 80131ca:	440b      	add	r3, r1
 80131cc:	428b      	cmp	r3, r1
 80131ce:	d90c      	bls.n	80131ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80131d0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80131d4:	f801 0b01 	strb.w	r0, [r1], #1
 80131d8:	e7f8      	b.n	80131cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80131da:	0790      	lsls	r0, r2, #30
 80131dc:	d0e7      	beq.n	80131ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80131de:	f832 0b02 	ldrh.w	r0, [r2], #2
 80131e2:	3b02      	subs	r3, #2
 80131e4:	f821 0b02 	strh.w	r0, [r1], #2
 80131e8:	e7e1      	b.n	80131ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80131ea:	2001      	movs	r0, #1
 80131ec:	bd10      	pop	{r4, pc}

080131ee <_ZN8touchgfx3HAL7noTouchEv>:
 80131ee:	b510      	push	{r4, lr}
 80131f0:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80131f4:	4604      	mov	r4, r0
 80131f6:	b153      	cbz	r3, 801320e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80131f8:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80131fc:	2101      	movs	r1, #1
 80131fe:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8013202:	301c      	adds	r0, #28
 8013204:	f015 fe2c 	bl	8028e60 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013208:	2300      	movs	r3, #0
 801320a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 801320e:	bd10      	pop	{r4, pc}

08013210 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8013210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013214:	b085      	sub	sp, #20
 8013216:	4604      	mov	r4, r0
 8013218:	2000      	movs	r0, #0
 801321a:	4699      	mov	r9, r3
 801321c:	ad04      	add	r5, sp, #16
 801321e:	460f      	mov	r7, r1
 8013220:	4690      	mov	r8, r2
 8013222:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013226:	69a0      	ldr	r0, [r4, #24]
 8013228:	6806      	ldr	r6, [r0, #0]
 801322a:	9501      	str	r5, [sp, #4]
 801322c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8013230:	9500      	str	r5, [sp, #0]
 8013232:	6835      	ldr	r5, [r6, #0]
 8013234:	47a8      	blx	r5
 8013236:	4d10      	ldr	r5, [pc, #64]	@ (8013278 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013238:	4606      	mov	r6, r0
 801323a:	f8a5 9000 	strh.w	r9, [r5]
 801323e:	f7fa f9db 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 8013242:	6803      	ldr	r3, [r0, #0]
 8013244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013246:	4798      	blx	r3
 8013248:	b128      	cbz	r0, 8013256 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801324a:	2801      	cmp	r0, #1
 801324c:	d00b      	beq.n	8013266 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801324e:	4630      	mov	r0, r6
 8013250:	b005      	add	sp, #20
 8013252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013256:	882b      	ldrh	r3, [r5, #0]
 8013258:	fb08 7203 	mla	r2, r8, r3, r7
 801325c:	9b03      	ldr	r3, [sp, #12]
 801325e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013262:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8013264:	e7f3      	b.n	801324e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013266:	882a      	ldrh	r2, [r5, #0]
 8013268:	9b03      	ldr	r3, [sp, #12]
 801326a:	fb08 7202 	mla	r2, r8, r2, r7
 801326e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013272:	1a9a      	subs	r2, r3, r2
 8013274:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8013276:	e7ea      	b.n	801324e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013278:	240065fa 	.word	0x240065fa

0801327c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 801327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801327e:	4b15      	ldr	r3, [pc, #84]	@ (80132d4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 8013280:	460f      	mov	r7, r1
 8013282:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 8013286:	4606      	mov	r6, r0
 8013288:	881b      	ldrh	r3, [r3, #0]
 801328a:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 801328c:	fb93 f4f4 	sdiv	r4, r3, r4
 8013290:	f7fa f9b2 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 8013294:	6803      	ldr	r3, [r0, #0]
 8013296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013298:	4798      	blx	r3
 801329a:	2801      	cmp	r0, #1
 801329c:	d00b      	beq.n	80132b6 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 801329e:	d303      	bcc.n	80132a8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 80132a0:	2802      	cmp	r0, #2
 80132a2:	d010      	beq.n	80132c6 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 80132a4:	63f5      	str	r5, [r6, #60]	@ 0x3c
 80132a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132a8:	4b0b      	ldr	r3, [pc, #44]	@ (80132d8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 80132aa:	437c      	muls	r4, r7
 80132ac:	8819      	ldrh	r1, [r3, #0]
 80132ae:	434c      	muls	r4, r1
 80132b0:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 80132b4:	e7f6      	b.n	80132a4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 80132b6:	4b08      	ldr	r3, [pc, #32]	@ (80132d8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 80132b8:	437c      	muls	r4, r7
 80132ba:	8819      	ldrh	r1, [r3, #0]
 80132bc:	434c      	muls	r4, r1
 80132be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80132c2:	1b2d      	subs	r5, r5, r4
 80132c4:	e7ee      	b.n	80132a4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 80132c6:	4b04      	ldr	r3, [pc, #16]	@ (80132d8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 80132c8:	437c      	muls	r4, r7
 80132ca:	8819      	ldrh	r1, [r3, #0]
 80132cc:	434c      	muls	r4, r1
 80132ce:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 80132d2:	e7e7      	b.n	80132a4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 80132d4:	240065fc 	.word	0x240065fc
 80132d8:	240065fa 	.word	0x240065fa

080132dc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80132dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132de:	b08b      	sub	sp, #44	@ 0x2c
 80132e0:	4617      	mov	r7, r2
 80132e2:	4604      	mov	r4, r0
 80132e4:	460e      	mov	r6, r1
 80132e6:	461d      	mov	r5, r3
 80132e8:	f7fa f986 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 80132ec:	6803      	ldr	r3, [r0, #0]
 80132ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132f0:	4798      	blx	r3
 80132f2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80132f6:	9007      	str	r0, [sp, #28]
 80132f8:	4631      	mov	r1, r6
 80132fa:	6822      	ldr	r2, [r4, #0]
 80132fc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013300:	4b0c      	ldr	r3, [pc, #48]	@ (8013334 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8013302:	4620      	mov	r0, r4
 8013304:	881b      	ldrh	r3, [r3, #0]
 8013306:	9306      	str	r3, [sp, #24]
 8013308:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801330c:	9305      	str	r3, [sp, #20]
 801330e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8013312:	9304      	str	r3, [sp, #16]
 8013314:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013318:	9303      	str	r3, [sp, #12]
 801331a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801331e:	9302      	str	r3, [sp, #8]
 8013320:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8013324:	e9cd 5300 	strd	r5, r3, [sp]
 8013328:	463b      	mov	r3, r7
 801332a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801332c:	2200      	movs	r2, #0
 801332e:	47a8      	blx	r5
 8013330:	b00b      	add	sp, #44	@ 0x2c
 8013332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013334:	240065fa 	.word	0x240065fa

08013338 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8013338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801333c:	4698      	mov	r8, r3
 801333e:	6803      	ldr	r3, [r0, #0]
 8013340:	b08b      	sub	sp, #44	@ 0x2c
 8013342:	4617      	mov	r7, r2
 8013344:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8013346:	460e      	mov	r6, r1
 8013348:	4b13      	ldr	r3, [pc, #76]	@ (8013398 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801334a:	4604      	mov	r4, r0
 801334c:	f8b3 9000 	ldrh.w	r9, [r3]
 8013350:	f7fa f952 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 8013354:	6803      	ldr	r3, [r0, #0]
 8013356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013358:	4798      	blx	r3
 801335a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801335e:	2200      	movs	r2, #0
 8013360:	4631      	mov	r1, r6
 8013362:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013366:	2302      	movs	r3, #2
 8013368:	4620      	mov	r0, r4
 801336a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801336e:	2301      	movs	r3, #1
 8013370:	9305      	str	r3, [sp, #20]
 8013372:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8013376:	9304      	str	r3, [sp, #16]
 8013378:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801337c:	9303      	str	r3, [sp, #12]
 801337e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8013382:	9302      	str	r3, [sp, #8]
 8013384:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013388:	e9cd 8300 	strd	r8, r3, [sp]
 801338c:	463b      	mov	r3, r7
 801338e:	47a8      	blx	r5
 8013390:	b00b      	add	sp, #44	@ 0x2c
 8013392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013396:	bf00      	nop
 8013398:	240065fa 	.word	0x240065fa

0801339c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801339c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133a0:	4698      	mov	r8, r3
 80133a2:	6803      	ldr	r3, [r0, #0]
 80133a4:	b087      	sub	sp, #28
 80133a6:	460e      	mov	r6, r1
 80133a8:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 80133aa:	4617      	mov	r7, r2
 80133ac:	4b0f      	ldr	r3, [pc, #60]	@ (80133ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80133ae:	4604      	mov	r4, r0
 80133b0:	f8b3 9000 	ldrh.w	r9, [r3]
 80133b4:	f7fa f920 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 80133b8:	6803      	ldr	r3, [r0, #0]
 80133ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133bc:	4798      	blx	r3
 80133be:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 80133c2:	463a      	mov	r2, r7
 80133c4:	4631      	mov	r1, r6
 80133c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80133ca:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80133ce:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80133d2:	4620      	mov	r0, r4
 80133d4:	9302      	str	r3, [sp, #8]
 80133d6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80133da:	9301      	str	r3, [sp, #4]
 80133dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80133e0:	9300      	str	r3, [sp, #0]
 80133e2:	4643      	mov	r3, r8
 80133e4:	47a8      	blx	r5
 80133e6:	b007      	add	sp, #28
 80133e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133ec:	240065fa 	.word	0x240065fa

080133f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80133f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f4:	4604      	mov	r4, r0
 80133f6:	b08f      	sub	sp, #60	@ 0x3c
 80133f8:	4610      	mov	r0, r2
 80133fa:	460d      	mov	r5, r1
 80133fc:	4691      	mov	r9, r2
 80133fe:	461e      	mov	r6, r3
 8013400:	f007 f9c2 	bl	801a788 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013404:	2800      	cmp	r0, #0
 8013406:	f000 809d 	beq.w	8013544 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801340a:	6823      	ldr	r3, [r4, #0]
 801340c:	4620      	mov	r0, r4
 801340e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80135a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8013412:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8013416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013418:	4798      	blx	r3
 801341a:	6823      	ldr	r3, [r4, #0]
 801341c:	4620      	mov	r0, r4
 801341e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80135ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8013422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013424:	4798      	blx	r3
 8013426:	f8bb 3000 	ldrh.w	r3, [fp]
 801342a:	4f5c      	ldr	r7, [pc, #368]	@ (801359c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801342c:	9301      	str	r3, [sp, #4]
 801342e:	f8ba 3000 	ldrh.w	r3, [sl]
 8013432:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8013436:	4640      	mov	r0, r8
 8013438:	9302      	str	r3, [sp, #8]
 801343a:	883b      	ldrh	r3, [r7, #0]
 801343c:	9303      	str	r3, [sp, #12]
 801343e:	4b58      	ldr	r3, [pc, #352]	@ (80135a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013440:	881a      	ldrh	r2, [r3, #0]
 8013442:	9305      	str	r3, [sp, #20]
 8013444:	9204      	str	r2, [sp, #16]
 8013446:	f007 fa33 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801344a:	8038      	strh	r0, [r7, #0]
 801344c:	4640      	mov	r0, r8
 801344e:	f007 fa63 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013452:	9b05      	ldr	r3, [sp, #20]
 8013454:	b280      	uxth	r0, r0
 8013456:	8018      	strh	r0, [r3, #0]
 8013458:	4b52      	ldr	r3, [pc, #328]	@ (80135a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d174      	bne.n	801354a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8013460:	883b      	ldrh	r3, [r7, #0]
 8013462:	f8aa 0000 	strh.w	r0, [sl]
 8013466:	f8ab 3000 	strh.w	r3, [fp]
 801346a:	4648      	mov	r0, r9
 801346c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8013470:	f007 f98a 	bl	801a788 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013474:	2200      	movs	r2, #0
 8013476:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801347a:	4611      	mov	r1, r2
 801347c:	4628      	mov	r0, r5
 801347e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8013482:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8013486:	f7fa fe3e 	bl	800e106 <_ZN8touchgfx8Drawable5setXYEss>
 801348a:	2301      	movs	r3, #1
 801348c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8013490:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8013494:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013498:	2b00      	cmp	r3, #0
 801349a:	dd5c      	ble.n	8013556 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801349c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	dd58      	ble.n	8013556 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80134a4:	462a      	mov	r2, r5
 80134a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80134a8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80134ac:	6851      	ldr	r1, [r2, #4]
 80134ae:	c303      	stmia	r3!, {r0, r1}
 80134b0:	4631      	mov	r1, r6
 80134b2:	a80a      	add	r0, sp, #40	@ 0x28
 80134b4:	f7ff fbb0 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 80134b8:	4b38      	ldr	r3, [pc, #224]	@ (801359c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80134ba:	2100      	movs	r1, #0
 80134bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80134c0:	4b37      	ldr	r3, [pc, #220]	@ (80135a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80134c2:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80134c6:	aa0a      	add	r2, sp, #40	@ 0x28
 80134c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80134cc:	910c      	str	r1, [sp, #48]	@ 0x30
 80134ce:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80134d2:	ab08      	add	r3, sp, #32
 80134d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80134dc:	4618      	mov	r0, r3
 80134de:	a90c      	add	r1, sp, #48	@ 0x30
 80134e0:	f7ff fb9a 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 80134e4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d13c      	bne.n	8013564 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80134ea:	2000      	movs	r0, #0
 80134ec:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 80134f0:	2600      	movs	r6, #0
 80134f2:	696b      	ldr	r3, [r5, #20]
 80134f4:	a908      	add	r1, sp, #32
 80134f6:	682a      	ldr	r2, [r5, #0]
 80134f8:	4628      	mov	r0, r5
 80134fa:	9305      	str	r3, [sp, #20]
 80134fc:	616e      	str	r6, [r5, #20]
 80134fe:	6892      	ldr	r2, [r2, #8]
 8013500:	4790      	blx	r2
 8013502:	9b05      	ldr	r3, [sp, #20]
 8013504:	4652      	mov	r2, sl
 8013506:	4649      	mov	r1, r9
 8013508:	616b      	str	r3, [r5, #20]
 801350a:	4628      	mov	r0, r5
 801350c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8013510:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8013514:	f7fa fdf7 	bl	800e106 <_ZN8touchgfx8Drawable5setXYEss>
 8013518:	9a01      	ldr	r2, [sp, #4]
 801351a:	4b23      	ldr	r3, [pc, #140]	@ (80135a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801351c:	4620      	mov	r0, r4
 801351e:	801a      	strh	r2, [r3, #0]
 8013520:	9a02      	ldr	r2, [sp, #8]
 8013522:	4b22      	ldr	r3, [pc, #136]	@ (80135ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8013524:	801a      	strh	r2, [r3, #0]
 8013526:	9a03      	ldr	r2, [sp, #12]
 8013528:	4b1c      	ldr	r3, [pc, #112]	@ (801359c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801352a:	801a      	strh	r2, [r3, #0]
 801352c:	4b1c      	ldr	r3, [pc, #112]	@ (80135a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801352e:	9a04      	ldr	r2, [sp, #16]
 8013530:	801a      	strh	r2, [r3, #0]
 8013532:	6823      	ldr	r3, [r4, #0]
 8013534:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8013538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801353a:	4798      	blx	r3
 801353c:	6823      	ldr	r3, [r4, #0]
 801353e:	4620      	mov	r0, r4
 8013540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013542:	4798      	blx	r3
 8013544:	b00f      	add	sp, #60	@ 0x3c
 8013546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801354a:	883b      	ldrh	r3, [r7, #0]
 801354c:	f8ab 0000 	strh.w	r0, [fp]
 8013550:	f8aa 3000 	strh.w	r3, [sl]
 8013554:	e789      	b.n	801346a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8013556:	462a      	mov	r2, r5
 8013558:	ab0a      	add	r3, sp, #40	@ 0x28
 801355a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801355e:	6851      	ldr	r1, [r2, #4]
 8013560:	c303      	stmia	r3!, {r0, r1}
 8013562:	e7a9      	b.n	80134b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8013564:	a807      	add	r0, sp, #28
 8013566:	f007 fb19 	bl	801ab9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801356a:	4606      	mov	r6, r0
 801356c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801356e:	6803      	ldr	r3, [r0, #0]
 8013570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013572:	4798      	blx	r3
 8013574:	4286      	cmp	r6, r0
 8013576:	d1b8      	bne.n	80134ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8013578:	f7fa f83e 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 801357c:	6803      	ldr	r3, [r0, #0]
 801357e:	4606      	mov	r6, r0
 8013580:	a807      	add	r0, sp, #28
 8013582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013584:	9305      	str	r3, [sp, #20]
 8013586:	f007 fb09 	bl	801ab9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801358a:	9b05      	ldr	r3, [sp, #20]
 801358c:	4601      	mov	r1, r0
 801358e:	4630      	mov	r0, r6
 8013590:	4798      	blx	r3
 8013592:	f080 0001 	eor.w	r0, r0, #1
 8013596:	b2c0      	uxtb	r0, r0
 8013598:	e7a8      	b.n	80134ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801359a:	bf00      	nop
 801359c:	240065f4 	.word	0x240065f4
 80135a0:	240065f6 	.word	0x240065f6
 80135a4:	240065f8 	.word	0x240065f8
 80135a8:	240065fa 	.word	0x240065fa
 80135ac:	240065fc 	.word	0x240065fc

080135b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80135b0:	4b07      	ldr	r3, [pc, #28]	@ (80135d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80135b2:	b510      	push	{r4, lr}
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	4604      	mov	r4, r0
 80135b8:	b13b      	cbz	r3, 80135ca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80135ba:	6803      	ldr	r3, [r0, #0]
 80135bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135be:	4798      	blx	r3
 80135c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80135c2:	4283      	cmp	r3, r0
 80135c4:	d101      	bne.n	80135ca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80135c6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80135c8:	bd10      	pop	{r4, pc}
 80135ca:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80135cc:	e7fc      	b.n	80135c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80135ce:	bf00      	nop
 80135d0:	240065fe 	.word	0x240065fe

080135d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80135d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135d8:	461d      	mov	r5, r3
 80135da:	b08a      	sub	sp, #40	@ 0x28
 80135dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80135e0:	4690      	mov	r8, r2
 80135e2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 80135e6:	2400      	movs	r4, #0
 80135e8:	4607      	mov	r7, r0
 80135ea:	fb06 8505 	mla	r5, r6, r5, r8
 80135ee:	9404      	str	r4, [sp, #16]
 80135f0:	f88d 4020 	strb.w	r4, [sp, #32]
 80135f4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80135f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80135fc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013600:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013604:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013608:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801360c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013610:	f7ff ffce 	bl	80135b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013614:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801361e:	a901      	add	r1, sp, #4
 8013620:	9505      	str	r5, [sp, #20]
 8013622:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013626:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801362a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801362e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8013632:	6803      	ldr	r3, [r0, #0]
 8013634:	685b      	ldr	r3, [r3, #4]
 8013636:	4798      	blx	r3
 8013638:	b00a      	add	sp, #40	@ 0x28
 801363a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801363e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801363e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013642:	b08b      	sub	sp, #44	@ 0x2c
 8013644:	2400      	movs	r4, #0
 8013646:	4691      	mov	r9, r2
 8013648:	461d      	mov	r5, r3
 801364a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801364e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013652:	4688      	mov	r8, r1
 8013654:	4607      	mov	r7, r0
 8013656:	9404      	str	r4, [sp, #16]
 8013658:	fb06 9505 	mla	r5, r6, r5, r9
 801365c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013660:	f7ff ffa6 	bl	80135b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013664:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013668:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013672:	a901      	add	r1, sp, #4
 8013674:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8013678:	9505      	str	r5, [sp, #20]
 801367a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801367e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8013682:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013686:	f8cd 8010 	str.w	r8, [sp, #16]
 801368a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801368e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013692:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8013696:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801369a:	6803      	ldr	r3, [r0, #0]
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	4798      	blx	r3
 80136a0:	b00b      	add	sp, #44	@ 0x2c
 80136a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080136a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80136a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ac:	b08a      	sub	sp, #40	@ 0x28
 80136ae:	4698      	mov	r8, r3
 80136b0:	2300      	movs	r3, #0
 80136b2:	4606      	mov	r6, r0
 80136b4:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80136b8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80136bc:	2d0b      	cmp	r5, #11
 80136be:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80136c2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80136c6:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80136ca:	9304      	str	r3, [sp, #16]
 80136cc:	d137      	bne.n	801373e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80136ce:	2380      	movs	r3, #128	@ 0x80
 80136d0:	f88d 0020 	strb.w	r0, [sp, #32]
 80136d4:	4630      	mov	r0, r6
 80136d6:	9203      	str	r2, [sp, #12]
 80136d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80136dc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80136e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80136e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80136e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80136ec:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80136f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80136f4:	f7ff ff5c 	bl	80135b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80136f8:	2c0b      	cmp	r4, #11
 80136fa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80136fe:	f8ad 701e 	strh.w	r7, [sp, #30]
 8013702:	bf94      	ite	ls
 8013704:	4b19      	ldrls	r3, [pc, #100]	@ (801376c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8013706:	2100      	movhi	r1, #0
 8013708:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801370c:	bf98      	it	ls
 801370e:	5d19      	ldrbls	r1, [r3, r4]
 8013710:	fb02 8307 	mla	r3, r2, r7, r8
 8013714:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013718:	10c9      	asrs	r1, r1, #3
 801371a:	fb01 0003 	mla	r0, r1, r3, r0
 801371e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8013722:	a901      	add	r1, sp, #4
 8013724:	9005      	str	r0, [sp, #20]
 8013726:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801372a:	2300      	movs	r3, #0
 801372c:	6870      	ldr	r0, [r6, #4]
 801372e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8013732:	6803      	ldr	r3, [r0, #0]
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	4798      	blx	r3
 8013738:	b00a      	add	sp, #40	@ 0x28
 801373a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801373e:	2d02      	cmp	r5, #2
 8013740:	d109      	bne.n	8013756 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8013742:	28ff      	cmp	r0, #255	@ 0xff
 8013744:	d105      	bne.n	8013752 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8013746:	f1bc 0f00 	cmp.w	ip, #0
 801374a:	bf14      	ite	ne
 801374c:	2340      	movne	r3, #64	@ 0x40
 801374e:	2320      	moveq	r3, #32
 8013750:	e7be      	b.n	80136d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013752:	2340      	movs	r3, #64	@ 0x40
 8013754:	e7bc      	b.n	80136d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013756:	28ff      	cmp	r0, #255	@ 0xff
 8013758:	d105      	bne.n	8013766 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801375a:	f1bc 0f00 	cmp.w	ip, #0
 801375e:	bf14      	ite	ne
 8013760:	2304      	movne	r3, #4
 8013762:	2301      	moveq	r3, #1
 8013764:	e7b4      	b.n	80136d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013766:	2304      	movs	r3, #4
 8013768:	e7b2      	b.n	80136d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801376a:	bf00      	nop
 801376c:	0802bc80 	.word	0x0802bc80

08013770 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8013770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013774:	b08b      	sub	sp, #44	@ 0x2c
 8013776:	461d      	mov	r5, r3
 8013778:	2400      	movs	r4, #0
 801377a:	4688      	mov	r8, r1
 801377c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8013780:	4693      	mov	fp, r2
 8013782:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8013786:	4607      	mov	r7, r0
 8013788:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801378c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8013790:	9404      	str	r4, [sp, #16]
 8013792:	bf14      	ite	ne
 8013794:	2308      	movne	r3, #8
 8013796:	2302      	moveq	r3, #2
 8013798:	fb05 b50a 	mla	r5, r5, sl, fp
 801379c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80137a0:	f7ff ff06 	bl	80135b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80137a4:	2e0b      	cmp	r6, #11
 80137a6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80137aa:	a901      	add	r1, sp, #4
 80137ac:	bf98      	it	ls
 80137ae:	4b13      	ldrls	r3, [pc, #76]	@ (80137fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80137b0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80137b4:	bf98      	it	ls
 80137b6:	5d9c      	ldrbls	r4, [r3, r6]
 80137b8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80137bc:	10e4      	asrs	r4, r4, #3
 80137be:	f8cd 8010 	str.w	r8, [sp, #16]
 80137c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80137c6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80137ca:	fb04 0405 	mla	r4, r4, r5, r0
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80137d4:	2300      	movs	r3, #0
 80137d6:	9405      	str	r4, [sp, #20]
 80137d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80137dc:	f88d 9020 	strb.w	r9, [sp, #32]
 80137e0:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80137e4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80137e8:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 80137ec:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80137f0:	6803      	ldr	r3, [r0, #0]
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	4798      	blx	r3
 80137f6:	b00b      	add	sp, #44	@ 0x2c
 80137f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137fc:	0802bc80 	.word	0x0802bc80

08013800 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013804:	461e      	mov	r6, r3
 8013806:	4b0a      	ldr	r3, [pc, #40]	@ (8013830 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013808:	460f      	mov	r7, r1
 801380a:	4690      	mov	r8, r2
 801380c:	881d      	ldrh	r5, [r3, #0]
 801380e:	f7f9 fef3 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 8013812:	6803      	ldr	r3, [r0, #0]
 8013814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013816:	4798      	blx	r3
 8013818:	280b      	cmp	r0, #11
 801381a:	bf96      	itet	ls
 801381c:	4b05      	ldrls	r3, [pc, #20]	@ (8013834 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801381e:	2400      	movhi	r4, #0
 8013820:	5c1c      	ldrbls	r4, [r3, r0]
 8013822:	fb08 7005 	mla	r0, r8, r5, r7
 8013826:	10e4      	asrs	r4, r4, #3
 8013828:	fb04 6000 	mla	r0, r4, r0, r6
 801382c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013830:	240065fa 	.word	0x240065fa
 8013834:	0802bc80 	.word	0x0802bc80

08013838 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8013838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801383a:	b08b      	sub	sp, #44	@ 0x2c
 801383c:	461f      	mov	r7, r3
 801383e:	4604      	mov	r4, r0
 8013840:	4616      	mov	r6, r2
 8013842:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8013846:	2500      	movs	r5, #0
 8013848:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801384c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8013850:	9504      	str	r5, [sp, #16]
 8013852:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013856:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801385a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801385e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013862:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013866:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801386a:	f88d 3020 	strb.w	r3, [sp, #32]
 801386e:	f7ff fe9f 	bl	80135b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013872:	463a      	mov	r2, r7
 8013874:	4631      	mov	r1, r6
 8013876:	4603      	mov	r3, r0
 8013878:	4620      	mov	r0, r4
 801387a:	f7ff ffc1 	bl	8013800 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801387e:	4b0e      	ldr	r3, [pc, #56]	@ (80138b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8013880:	9005      	str	r0, [sp, #20]
 8013882:	881b      	ldrh	r3, [r3, #0]
 8013884:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013888:	f7f9 feb6 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 801388c:	6803      	ldr	r3, [r0, #0]
 801388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013890:	4798      	blx	r3
 8013892:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013894:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8013898:	a901      	add	r1, sp, #4
 801389a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801389e:	9304      	str	r3, [sp, #16]
 80138a0:	6860      	ldr	r0, [r4, #4]
 80138a2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80138a6:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80138aa:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80138ae:	6803      	ldr	r3, [r0, #0]
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	4798      	blx	r3
 80138b4:	b00b      	add	sp, #44	@ 0x2c
 80138b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138b8:	240065fa 	.word	0x240065fa

080138bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80138bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138be:	b08d      	sub	sp, #52	@ 0x34
 80138c0:	2501      	movs	r5, #1
 80138c2:	4604      	mov	r4, r0
 80138c4:	466b      	mov	r3, sp
 80138c6:	9503      	str	r5, [sp, #12]
 80138c8:	e883 0006 	stmia.w	r3, {r1, r2}
 80138cc:	2300      	movs	r3, #0
 80138ce:	f8bd 6000 	ldrh.w	r6, [sp]
 80138d2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80138d6:	9306      	str	r3, [sp, #24]
 80138d8:	6803      	ldr	r3, [r0, #0]
 80138da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80138dc:	4798      	blx	r3
 80138de:	463a      	mov	r2, r7
 80138e0:	4631      	mov	r1, r6
 80138e2:	4603      	mov	r3, r0
 80138e4:	4620      	mov	r0, r4
 80138e6:	f7ff ff8b 	bl	8013800 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80138ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80138ec:	9004      	str	r0, [sp, #16]
 80138ee:	9307      	str	r3, [sp, #28]
 80138f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80138f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80138f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80138fc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013900:	4b0e      	ldr	r3, [pc, #56]	@ (801393c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8013902:	881b      	ldrh	r3, [r3, #0]
 8013904:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013908:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801390c:	f7f9 fe74 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 8013910:	6803      	ldr	r3, [r0, #0]
 8013912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013914:	4798      	blx	r3
 8013916:	23ff      	movs	r3, #255	@ 0xff
 8013918:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 801391c:	a903      	add	r1, sp, #12
 801391e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8013922:	6860      	ldr	r0, [r4, #4]
 8013924:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8013928:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801392c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8013930:	6803      	ldr	r3, [r0, #0]
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	4798      	blx	r3
 8013936:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8013938:	b00d      	add	sp, #52	@ 0x34
 801393a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801393c:	240065fa 	.word	0x240065fa

08013940 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013944:	b08c      	sub	sp, #48	@ 0x30
 8013946:	461e      	mov	r6, r3
 8013948:	2300      	movs	r3, #0
 801394a:	4604      	mov	r4, r0
 801394c:	466d      	mov	r5, sp
 801394e:	9306      	str	r3, [sp, #24]
 8013950:	6803      	ldr	r3, [r0, #0]
 8013952:	e885 0006 	stmia.w	r5, {r1, r2}
 8013956:	2501      	movs	r5, #1
 8013958:	f8bd 7000 	ldrh.w	r7, [sp]
 801395c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8013960:	9503      	str	r5, [sp, #12]
 8013962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013964:	4798      	blx	r3
 8013966:	4642      	mov	r2, r8
 8013968:	4639      	mov	r1, r7
 801396a:	4603      	mov	r3, r0
 801396c:	4620      	mov	r0, r4
 801396e:	f7ff ff47 	bl	8013800 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013972:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013976:	9004      	str	r0, [sp, #16]
 8013978:	f8ad 3020 	strh.w	r3, [sp, #32]
 801397c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013980:	9607      	str	r6, [sp, #28]
 8013982:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013986:	4b10      	ldr	r3, [pc, #64]	@ (80139c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013988:	881b      	ldrh	r3, [r3, #0]
 801398a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801398e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013990:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013994:	f7f9 fe30 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 8013998:	6803      	ldr	r3, [r0, #0]
 801399a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801399c:	4798      	blx	r3
 801399e:	23ff      	movs	r3, #255	@ 0xff
 80139a0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80139a4:	a903      	add	r1, sp, #12
 80139a6:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80139aa:	6860      	ldr	r0, [r4, #4]
 80139ac:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80139b0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80139b4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80139b8:	6803      	ldr	r3, [r0, #0]
 80139ba:	685b      	ldr	r3, [r3, #4]
 80139bc:	4798      	blx	r3
 80139be:	4630      	mov	r0, r6
 80139c0:	b00c      	add	sp, #48	@ 0x30
 80139c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139c6:	bf00      	nop
 80139c8:	240065fa 	.word	0x240065fa

080139cc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80139cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ce:	b085      	sub	sp, #20
 80139d0:	4605      	mov	r5, r0
 80139d2:	ac02      	add	r4, sp, #8
 80139d4:	e884 0006 	stmia.w	r4, {r1, r2}
 80139d8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80139dc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80139e0:	f7ff fde6 	bl	80135b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80139e4:	4631      	mov	r1, r6
 80139e6:	4603      	mov	r3, r0
 80139e8:	463a      	mov	r2, r7
 80139ea:	4628      	mov	r0, r5
 80139ec:	f7ff ff08 	bl	8013800 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80139f0:	4a05      	ldr	r2, [pc, #20]	@ (8013a08 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80139f2:	682b      	ldr	r3, [r5, #0]
 80139f4:	8812      	ldrh	r2, [r2, #0]
 80139f6:	9200      	str	r2, [sp, #0]
 80139f8:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 80139fa:	4603      	mov	r3, r0
 80139fc:	4628      	mov	r0, r5
 80139fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013a02:	47b0      	blx	r6
 8013a04:	b005      	add	sp, #20
 8013a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a08:	240065fa 	.word	0x240065fa

08013a0c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013a0c:	b570      	push	{r4, r5, r6, lr}
 8013a0e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8013a12:	4604      	mov	r4, r0
 8013a14:	b19b      	cbz	r3, 8013a3e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013a16:	2002      	movs	r0, #2
 8013a18:	f7fc f9d4 	bl	800fdc4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013a24:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8013a28:	6823      	ldr	r3, [r4, #0]
 8013a2a:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 8013a2e:	f7ff fdbf 	bl	80135b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a32:	4601      	mov	r1, r0
 8013a34:	4620      	mov	r0, r4
 8013a36:	462b      	mov	r3, r5
 8013a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a3c:	4718      	bx	r3
 8013a3e:	bd70      	pop	{r4, r5, r6, pc}

08013a40 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013a40:	b538      	push	{r3, r4, r5, lr}
 8013a42:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8013a46:	4604      	mov	r4, r0
 8013a48:	460d      	mov	r5, r1
 8013a4a:	428b      	cmp	r3, r1
 8013a4c:	d006      	beq.n	8013a5c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013a4e:	6803      	ldr	r3, [r0, #0]
 8013a50:	b929      	cbnz	r1, 8013a5e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013a52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013a56:	4798      	blx	r3
 8013a58:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8013a5c:	bd38      	pop	{r3, r4, r5, pc}
 8013a5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013a62:	e7f8      	b.n	8013a56 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013a64 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013a64:	4b0c      	ldr	r3, [pc, #48]	@ (8013a98 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 8013a66:	b510      	push	{r4, lr}
 8013a68:	781b      	ldrb	r3, [r3, #0]
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	b953      	cbnz	r3, 8013a84 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8013a6e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8013a72:	b93b      	cbnz	r3, 8013a84 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8013a74:	6840      	ldr	r0, [r0, #4]
 8013a76:	f000 f90d 	bl	8013c94 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013a7a:	b118      	cbz	r0, 8013a84 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8013a7c:	6862      	ldr	r2, [r4, #4]
 8013a7e:	7a53      	ldrb	r3, [r2, #9]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d0fc      	beq.n	8013a7e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 8013a84:	f7fc fc5c 	bl	8010340 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013a88:	4620      	mov	r0, r4
 8013a8a:	2100      	movs	r1, #0
 8013a8c:	f7ff ffd8 	bl	8013a40 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013a90:	4620      	mov	r0, r4
 8013a92:	f7ff fd8d 	bl	80135b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a96:	bd10      	pop	{r4, pc}
 8013a98:	240065fe 	.word	0x240065fe

08013a9c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013a9c:	4770      	bx	lr

08013a9e <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8013a9e:	2000      	movs	r0, #0
 8013aa0:	4770      	bx	lr

08013aa2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013aa2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013aa6:	1a13      	subs	r3, r2, r0
 8013aa8:	4258      	negs	r0, r3
 8013aaa:	4158      	adcs	r0, r3
 8013aac:	4770      	bx	lr

08013aae <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013aae:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013ab2:	1a9b      	subs	r3, r3, r2
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	bfdc      	itt	le
 8013ab8:	6882      	ldrle	r2, [r0, #8]
 8013aba:	189b      	addle	r3, r3, r2
 8013abc:	2b01      	cmp	r3, #1
 8013abe:	bfcc      	ite	gt
 8013ac0:	2000      	movgt	r0, #0
 8013ac2:	2001      	movle	r0, #1
 8013ac4:	4770      	bx	lr

08013ac6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013ac6:	6902      	ldr	r2, [r0, #16]
 8013ac8:	6843      	ldr	r3, [r0, #4]
 8013aca:	2024      	movs	r0, #36	@ 0x24
 8013acc:	fb00 3002 	mla	r0, r0, r2, r3
 8013ad0:	4770      	bx	lr

08013ad2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013ad2:	6803      	ldr	r3, [r0, #0]
 8013ad4:	691b      	ldr	r3, [r3, #16]
 8013ad6:	4718      	bx	r3

08013ad8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013ad8:	2301      	movs	r3, #1
 8013ada:	b570      	push	{r4, r5, r6, lr}
 8013adc:	7203      	strb	r3, [r0, #8]
 8013ade:	4604      	mov	r4, r0
 8013ae0:	6840      	ldr	r0, [r0, #4]
 8013ae2:	6803      	ldr	r3, [r0, #0]
 8013ae4:	699b      	ldr	r3, [r3, #24]
 8013ae6:	4798      	blx	r3
 8013ae8:	6803      	ldr	r3, [r0, #0]
 8013aea:	4605      	mov	r5, r0
 8013aec:	2b40      	cmp	r3, #64	@ 0x40
 8013aee:	d00c      	beq.n	8013b0a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013af0:	d810      	bhi.n	8013b14 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013af2:	2b04      	cmp	r3, #4
 8013af4:	d01d      	beq.n	8013b32 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013af6:	d804      	bhi.n	8013b02 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013af8:	2b01      	cmp	r3, #1
 8013afa:	d006      	beq.n	8013b0a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d02c      	beq.n	8013b5a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013b00:	bd70      	pop	{r4, r5, r6, pc}
 8013b02:	2b08      	cmp	r3, #8
 8013b04:	d01d      	beq.n	8013b42 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013b06:	2b20      	cmp	r3, #32
 8013b08:	d1fa      	bne.n	8013b00 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013b0a:	6823      	ldr	r3, [r4, #0]
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b10:	4798      	blx	r3
 8013b12:	e013      	b.n	8013b3c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013b18:	d0f7      	beq.n	8013b0a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013b1a:	d804      	bhi.n	8013b26 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013b1c:	2b80      	cmp	r3, #128	@ 0x80
 8013b1e:	d0f4      	beq.n	8013b0a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013b24:	e7f0      	b.n	8013b08 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013b2a:	d0ee      	beq.n	8013b0a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013b30:	e7e5      	b.n	8013afe <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013b32:	6823      	ldr	r3, [r4, #0]
 8013b34:	7f01      	ldrb	r1, [r0, #28]
 8013b36:	4620      	mov	r0, r4
 8013b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b3a:	4798      	blx	r3
 8013b3c:	6823      	ldr	r3, [r4, #0]
 8013b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b40:	e006      	b.n	8013b50 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013b42:	6823      	ldr	r3, [r4, #0]
 8013b44:	7f01      	ldrb	r1, [r0, #28]
 8013b46:	4620      	mov	r0, r4
 8013b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b4a:	4798      	blx	r3
 8013b4c:	6823      	ldr	r3, [r4, #0]
 8013b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b50:	4629      	mov	r1, r5
 8013b52:	4620      	mov	r0, r4
 8013b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b58:	4718      	bx	r3
 8013b5a:	6823      	ldr	r3, [r4, #0]
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b60:	4798      	blx	r3
 8013b62:	e7f3      	b.n	8013b4c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013b64 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013b64:	4770      	bx	lr

08013b66 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013b66:	4770      	bx	lr

08013b68 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013b68:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013b6c:	b510      	push	{r4, lr}
 8013b6e:	1ad2      	subs	r2, r2, r3
 8013b70:	2a00      	cmp	r2, #0
 8013b72:	bfdc      	itt	le
 8013b74:	6884      	ldrle	r4, [r0, #8]
 8013b76:	1912      	addle	r2, r2, r4
 8013b78:	2a01      	cmp	r2, #1
 8013b7a:	dd16      	ble.n	8013baa <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013b7c:	6842      	ldr	r2, [r0, #4]
 8013b7e:	2424      	movs	r4, #36	@ 0x24
 8013b80:	fb04 2303 	mla	r3, r4, r3, r2
 8013b84:	f101 0220 	add.w	r2, r1, #32
 8013b88:	f851 4b04 	ldr.w	r4, [r1], #4
 8013b8c:	4291      	cmp	r1, r2
 8013b8e:	f843 4b04 	str.w	r4, [r3], #4
 8013b92:	d1f9      	bne.n	8013b88 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013b94:	780a      	ldrb	r2, [r1, #0]
 8013b96:	701a      	strb	r2, [r3, #0]
 8013b98:	68c3      	ldr	r3, [r0, #12]
 8013b9a:	6882      	ldr	r2, [r0, #8]
 8013b9c:	f3bf 8f5b 	dmb	ish
 8013ba0:	3301      	adds	r3, #1
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	bfd8      	it	le
 8013ba6:	1a9b      	suble	r3, r3, r2
 8013ba8:	60c3      	str	r3, [r0, #12]
 8013baa:	bd10      	pop	{r4, pc}

08013bac <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013bac:	6903      	ldr	r3, [r0, #16]
 8013bae:	6882      	ldr	r2, [r0, #8]
 8013bb0:	f3bf 8f5b 	dmb	ish
 8013bb4:	3301      	adds	r3, #1
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	bfd8      	it	le
 8013bba:	1a9b      	suble	r3, r3, r2
 8013bbc:	6103      	str	r3, [r0, #16]
 8013bbe:	4770      	bx	lr

08013bc0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013bc0:	b570      	push	{r4, r5, r6, lr}
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	460e      	mov	r6, r1
 8013bc6:	6860      	ldr	r0, [r4, #4]
 8013bc8:	6803      	ldr	r3, [r0, #0]
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	4798      	blx	r3
 8013bce:	2800      	cmp	r0, #0
 8013bd0:	d1f9      	bne.n	8013bc6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8013c08 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013bd4:	6828      	ldr	r0, [r5, #0]
 8013bd6:	6803      	ldr	r3, [r0, #0]
 8013bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bdc:	4798      	blx	r3
 8013bde:	f7fc fbc9 	bl	8010374 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013be2:	6828      	ldr	r0, [r5, #0]
 8013be4:	2101      	movs	r1, #1
 8013be6:	f7ff ff2b 	bl	8013a40 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013bea:	6860      	ldr	r0, [r4, #4]
 8013bec:	4631      	mov	r1, r6
 8013bee:	6803      	ldr	r3, [r0, #0]
 8013bf0:	689b      	ldr	r3, [r3, #8]
 8013bf2:	4798      	blx	r3
 8013bf4:	6823      	ldr	r3, [r4, #0]
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bfa:	4798      	blx	r3
 8013bfc:	6828      	ldr	r0, [r5, #0]
 8013bfe:	6803      	ldr	r3, [r0, #0]
 8013c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013c06:	4718      	bx	r3
 8013c08:	24006600 	.word	0x24006600

08013c0c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013c0c:	b508      	push	{r3, lr}
 8013c0e:	f7fc fb97 	bl	8010340 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013c12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013c16:	f7fc bba1 	b.w	801035c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013c1a <_ZN8touchgfx13DMA_Interface5startEv>:
 8013c1a:	b510      	push	{r4, lr}
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	6840      	ldr	r0, [r0, #4]
 8013c20:	6803      	ldr	r3, [r0, #0]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	4798      	blx	r3
 8013c26:	b948      	cbnz	r0, 8013c3c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013c28:	7a63      	ldrb	r3, [r4, #9]
 8013c2a:	b13b      	cbz	r3, 8013c3c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013c2c:	7a23      	ldrb	r3, [r4, #8]
 8013c2e:	b92b      	cbnz	r3, 8013c3c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013c30:	6823      	ldr	r3, [r4, #0]
 8013c32:	4620      	mov	r0, r4
 8013c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c3a:	4718      	bx	r3
 8013c3c:	bd10      	pop	{r4, pc}

08013c3e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013c3e:	b570      	push	{r4, r5, r6, lr}
 8013c40:	4604      	mov	r4, r0
 8013c42:	6840      	ldr	r0, [r0, #4]
 8013c44:	6803      	ldr	r3, [r0, #0]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	4798      	blx	r3
 8013c4a:	4605      	mov	r5, r0
 8013c4c:	b930      	cbnz	r0, 8013c5c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013c4e:	7a23      	ldrb	r3, [r4, #8]
 8013c50:	b123      	cbz	r3, 8013c5c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013c52:	6860      	ldr	r0, [r4, #4]
 8013c54:	6803      	ldr	r3, [r0, #0]
 8013c56:	695b      	ldr	r3, [r3, #20]
 8013c58:	4798      	blx	r3
 8013c5a:	7225      	strb	r5, [r4, #8]
 8013c5c:	6860      	ldr	r0, [r4, #4]
 8013c5e:	6803      	ldr	r3, [r0, #0]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	4798      	blx	r3
 8013c64:	b928      	cbnz	r0, 8013c72 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013c66:	6823      	ldr	r3, [r4, #0]
 8013c68:	4620      	mov	r0, r4
 8013c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c70:	4718      	bx	r3
 8013c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c76:	f7fc bb89 	b.w	801038c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08013c7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013c7c:	b510      	push	{r4, lr}
 8013c7e:	6082      	str	r2, [r0, #8]
 8013c80:	2200      	movs	r2, #0
 8013c82:	4c03      	ldr	r4, [pc, #12]	@ (8013c90 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013c84:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013c88:	e9c0 4100 	strd	r4, r1, [r0]
 8013c8c:	bd10      	pop	{r4, pc}
 8013c8e:	bf00      	nop
 8013c90:	0802bdd0 	.word	0x0802bdd0

08013c94 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013c94:	6840      	ldr	r0, [r0, #4]
 8013c96:	6803      	ldr	r3, [r0, #0]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	4718      	bx	r3

08013c9c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8013c9c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8013ca0:	4770      	bx	lr

08013ca2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8013ca2:	b510      	push	{r4, lr}
 8013ca4:	4604      	mov	r4, r0
 8013ca6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013ca8:	b150      	cbz	r0, 8013cc0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013caa:	6803      	ldr	r3, [r0, #0]
 8013cac:	68db      	ldr	r3, [r3, #12]
 8013cae:	4798      	blx	r3
 8013cb0:	b130      	cbz	r0, 8013cc0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013cb2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013cb4:	4621      	mov	r1, r4
 8013cb6:	6803      	ldr	r3, [r0, #0]
 8013cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cbc:	689b      	ldr	r3, [r3, #8]
 8013cbe:	4718      	bx	r3
 8013cc0:	bd10      	pop	{r4, pc}

08013cc2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8013cc2:	790b      	ldrb	r3, [r1, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	bf0c      	ite	eq
 8013cc8:	2301      	moveq	r3, #1
 8013cca:	2300      	movne	r3, #0
 8013ccc:	b570      	push	{r4, r5, r6, lr}
 8013cce:	4604      	mov	r4, r0
 8013cd0:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8013cd4:	460e      	mov	r6, r1
 8013cd6:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8013cda:	d109      	bne.n	8013cf0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8013cdc:	b14d      	cbz	r5, 8013cf2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8013cde:	7933      	ldrb	r3, [r6, #4]
 8013ce0:	2b01      	cmp	r3, #1
 8013ce2:	d10c      	bne.n	8013cfe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013ce4:	6823      	ldr	r3, [r4, #0]
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cee:	4718      	bx	r3
 8013cf0:	b12d      	cbz	r5, 8013cfe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013cf2:	6823      	ldr	r3, [r4, #0]
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	695b      	ldr	r3, [r3, #20]
 8013cf8:	4798      	blx	r3
 8013cfa:	2d00      	cmp	r5, #0
 8013cfc:	d1ef      	bne.n	8013cde <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8013cfe:	bd70      	pop	{r4, r5, r6, pc}

08013d00 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8013d00:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8013d04:	4770      	bx	lr

08013d06 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8013d06:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8013d0a:	4770      	bx	lr

08013d0c <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8013d0c:	6802      	ldr	r2, [r0, #0]
 8013d0e:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8013d12:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8013d14:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8013d18:	4710      	bx	r2

08013d1a <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8013d1a:	6802      	ldr	r2, [r0, #0]
 8013d1c:	eef0 0a40 	vmov.f32	s1, s0
 8013d20:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8013d24:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8013d26:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8013d2a:	4710      	bx	r2

08013d2c <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8013d2c:	6802      	ldr	r2, [r0, #0]
 8013d2e:	eeb0 1a40 	vmov.f32	s2, s0
 8013d32:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8013d36:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8013d38:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8013d3c:	4710      	bx	r2

08013d3e <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8013d3e:	6802      	ldr	r2, [r0, #0]
 8013d40:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8013d44:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8013d46:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8013d4a:	4710      	bx	r2

08013d4c <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8013d4c:	6802      	ldr	r2, [r0, #0]
 8013d4e:	eef0 0a40 	vmov.f32	s1, s0
 8013d52:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8013d56:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8013d58:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8013d5c:	4710      	bx	r2

08013d5e <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8013d5e:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8013d62:	4770      	bx	lr

08013d64 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8013d64:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8013d68:	4770      	bx	lr

08013d6a <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 8013d6a:	ed90 0a0f 	vldr	s0, [r0, #60]	@ 0x3c
 8013d6e:	4770      	bx	lr

08013d70 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8013d70:	ed90 0a10 	vldr	s0, [r0, #64]	@ 0x40
 8013d74:	4770      	bx	lr

08013d76 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8013d76:	ed90 0a11 	vldr	s0, [r0, #68]	@ 0x44
 8013d7a:	4770      	bx	lr

08013d7c <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 8013d7c:	ed90 0a12 	vldr	s0, [r0, #72]	@ 0x48
 8013d80:	4770      	bx	lr

08013d82 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8013d82:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8013d86:	4770      	bx	lr

08013d88 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8013d88:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 8013d8c:	4770      	bx	lr

08013d8e <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8013d8e:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 8013d92:	4770      	bx	lr

08013d94 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8013d94:	ed90 0a16 	vldr	s0, [r0, #88]	@ 0x58
 8013d98:	4770      	bx	lr

08013d9a <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8013d9a:	ee07 2a90 	vmov	s15, r2
 8013d9e:	6803      	ldr	r3, [r0, #0]
 8013da0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013da4:	ee07 1a90 	vmov	s15, r1
 8013da8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013dac:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013db0:	4718      	bx	r3

08013db2 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8013db2:	ed90 0a0b 	vldr	s0, [r0, #44]	@ 0x2c
 8013db6:	4770      	bx	lr

08013db8 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8013db8:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8013dbc:	4770      	bx	lr

08013dbe <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8013dbe:	ed90 0a17 	vldr	s0, [r0, #92]	@ 0x5c
 8013dc2:	4770      	bx	lr

08013dc4 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8013dc4:	ed90 0a1a 	vldr	s0, [r0, #104]	@ 0x68
 8013dc8:	4770      	bx	lr

08013dca <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8013dca:	ed90 0a1d 	vldr	s0, [r0, #116]	@ 0x74
 8013dce:	4770      	bx	lr

08013dd0 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8013dd0:	ed90 0a20 	vldr	s0, [r0, #128]	@ 0x80
 8013dd4:	4770      	bx	lr

08013dd6 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8013dd6:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 8013dda:	4770      	bx	lr

08013ddc <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8013ddc:	ed90 0a1b 	vldr	s0, [r0, #108]	@ 0x6c
 8013de0:	4770      	bx	lr

08013de2 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8013de2:	ed90 0a1e 	vldr	s0, [r0, #120]	@ 0x78
 8013de6:	4770      	bx	lr

08013de8 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8013de8:	ed90 0a21 	vldr	s0, [r0, #132]	@ 0x84
 8013dec:	4770      	bx	lr

08013dee <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8013dee:	ed90 0a19 	vldr	s0, [r0, #100]	@ 0x64
 8013df2:	4770      	bx	lr

08013df4 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8013df4:	ed90 0a1c 	vldr	s0, [r0, #112]	@ 0x70
 8013df8:	4770      	bx	lr

08013dfa <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8013dfa:	ed90 0a1f 	vldr	s0, [r0, #124]	@ 0x7c
 8013dfe:	4770      	bx	lr

08013e00 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8013e00:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8013e04:	4770      	bx	lr

08013e06 <_ZNK8touchgfx22AnimationTextureMapper31isTextureMapperAnimationRunningEv>:
 8013e06:	f890 00ea 	ldrb.w	r0, [r0, #234]	@ 0xea
 8013e0a:	4770      	bx	lr

08013e0c <_ZN8touchgfx22AnimationTextureMapper14setupAnimationENS0_18AnimationParameterEfttPFstsstE>:
 8013e0c:	b510      	push	{r4, lr}
 8013e0e:	2414      	movs	r4, #20
 8013e10:	fb04 0101 	mla	r1, r4, r1, r0
 8013e14:	2001      	movs	r0, #1
 8013e16:	f8a1 309c 	strh.w	r3, [r1, #156]	@ 0x9c
 8013e1a:	9b02      	ldr	r3, [sp, #8]
 8013e1c:	f881 0090 	strb.w	r0, [r1, #144]	@ 0x90
 8013e20:	ed81 0a26 	vstr	s0, [r1, #152]	@ 0x98
 8013e24:	f8a1 209e 	strh.w	r2, [r1, #158]	@ 0x9e
 8013e28:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
 8013e2c:	bd10      	pop	{r4, pc}

08013e2e <_ZN8touchgfx22AnimationTextureMapper16getAnimationStepEv>:
 8013e2e:	f8b0 00e8 	ldrh.w	r0, [r0, #232]	@ 0xe8
 8013e32:	4770      	bx	lr

08013e34 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv>:
 8013e34:	b510      	push	{r4, lr}
 8013e36:	f890 30ea 	ldrb.w	r3, [r0, #234]	@ 0xea
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	b92b      	cbnz	r3, 8013e4a <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x16>
 8013e3e:	f003 f943 	bl	80170c8 <_ZN8touchgfx11Application11getInstanceEv>
 8013e42:	4621      	mov	r1, r4
 8013e44:	3004      	adds	r0, #4
 8013e46:	f003 fa0d 	bl	8017264 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013e50:	f8a4 30e8 	strh.w	r3, [r4, #232]	@ 0xe8
 8013e54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013e56:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8013e5a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8013e5c:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8013e60:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013e62:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
 8013e66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013e68:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	f884 30ea 	strb.w	r3, [r4, #234]	@ 0xea
 8013e72:	4623      	mov	r3, r4
 8013e74:	f893 1090 	ldrb.w	r1, [r3, #144]	@ 0x90
 8013e78:	b129      	cbz	r1, 8013e86 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x52>
 8013e7a:	f8b3 109c 	ldrh.w	r1, [r3, #156]	@ 0x9c
 8013e7e:	f8b3 009e 	ldrh.w	r0, [r3, #158]	@ 0x9e
 8013e82:	42c1      	cmn	r1, r0
 8013e84:	d108      	bne.n	8013e98 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x64>
 8013e86:	3314      	adds	r3, #20
 8013e88:	4293      	cmp	r3, r2
 8013e8a:	d1f3      	bne.n	8013e74 <_ZN8touchgfx22AnimationTextureMapper14startAnimationEv+0x40>
 8013e8c:	6823      	ldr	r3, [r4, #0]
 8013e8e:	4620      	mov	r0, r4
 8013e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e96:	4718      	bx	r3
 8013e98:	bd10      	pop	{r4, pc}

08013e9a <_ZN8touchgfx22AnimationTextureMapper37cancelAnimationTextureMapperAnimationEv>:
 8013e9a:	b510      	push	{r4, lr}
 8013e9c:	4604      	mov	r4, r0
 8013e9e:	f003 f913 	bl	80170c8 <_ZN8touchgfx11Application11getInstanceEv>
 8013ea2:	3004      	adds	r0, #4
 8013ea4:	4621      	mov	r1, r4
 8013ea6:	f003 f934 	bl	8017112 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8013eaa:	2300      	movs	r3, #0
 8013eac:	f884 30ea 	strb.w	r3, [r4, #234]	@ 0xea
 8013eb0:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 8013eb4:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 8013eb8:	f884 30b8 	strb.w	r3, [r4, #184]	@ 0xb8
 8013ebc:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
 8013ec0:	bd10      	pop	{r4, pc}

08013ec2 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 8013ec2:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
 8013ec6:	edc0 0a0c 	vstr	s1, [r0, #48]	@ 0x30
 8013eca:	f000 b9b5 	b.w	8014238 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08013ece <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 8013ece:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013ed2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eda:	fe30 0a27 	vselgt.f32	s0, s0, s15
 8013ede:	ed80 0a16 	vstr	s0, [r0, #88]	@ 0x58
 8013ee2:	f000 b9a9 	b.w	8014238 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08013ee6 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8013ee6:	ed80 0a14 	vstr	s0, [r0, #80]	@ 0x50
 8013eea:	edc0 0a15 	vstr	s1, [r0, #84]	@ 0x54
 8013eee:	f000 b9a3 	b.w	8014238 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08013ef2 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 8013ef2:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 8013ef6:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8013efa:	f000 b99d 	b.w	8014238 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08013efe <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8013efe:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 8013f02:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8013f06:	ed80 1a13 	vstr	s2, [r0, #76]	@ 0x4c
 8013f0a:	f000 b995 	b.w	8014238 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
	...

08013f10 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv>:
 8013f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f14:	ed2d 8b06 	vpush	{d8-d10}
 8013f18:	f890 30ea 	ldrb.w	r3, [r0, #234]	@ 0xea
 8013f1c:	b083      	sub	sp, #12
 8013f1e:	4604      	mov	r4, r0
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	f000 80c3 	beq.w	80140ac <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 8013f26:	2600      	movs	r6, #0
 8013f28:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	@ 0xe8
 8013f2c:	ed90 8a0d 	vldr	s16, [r0, #52]	@ 0x34
 8013f30:	4605      	mov	r5, r0
 8013f32:	3301      	adds	r3, #1
 8013f34:	edd0 8a0e 	vldr	s17, [r0, #56]	@ 0x38
 8013f38:	ed90 9a0f 	vldr	s18, [r0, #60]	@ 0x3c
 8013f3c:	46b2      	mov	sl, r6
 8013f3e:	edd0 9a10 	vldr	s19, [r0, #64]	@ 0x40
 8013f42:	46b0      	mov	r8, r6
 8013f44:	46b3      	mov	fp, r6
 8013f46:	eddf aa5c 	vldr	s21, [pc, #368]	@ 80140b8 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1a8>
 8013f4a:	f8a0 30e8 	strh.w	r3, [r0, #232]	@ 0xe8
 8013f4e:	9601      	str	r6, [sp, #4]
 8013f50:	f895 9090 	ldrb.w	r9, [r5, #144]	@ 0x90
 8013f54:	f1b9 0f00 	cmp.w	r9, #0
 8013f58:	d049      	beq.n	8013fee <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xde>
 8013f5a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	@ 0xe8
 8013f5e:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
 8013f62:	4298      	cmp	r0, r3
 8013f64:	d337      	bcc.n	8013fd6 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc6>
 8013f66:	ed95 7a26 	vldr	s14, [r5, #152]	@ 0x98
 8013f6a:	edd5 7a25 	vldr	s15, [r5, #148]	@ 0x94
 8013f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f76:	dd73      	ble.n	8014060 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x150>
 8013f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f7c:	ed9f aa4f 	vldr	s20, [pc, #316]	@ 80140bc <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1ac>
 8013f80:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8013f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f88:	ee17 2a90 	vmov	r2, s15
 8013f8c:	b212      	sxth	r2, r2
 8013f8e:	1ac0      	subs	r0, r0, r3
 8013f90:	2100      	movs	r1, #0
 8013f92:	f8b5 309e 	ldrh.w	r3, [r5, #158]	@ 0x9e
 8013f96:	b280      	uxth	r0, r0
 8013f98:	f8d5 70a0 	ldr.w	r7, [r5, #160]	@ 0xa0
 8013f9c:	47b8      	blx	r7
 8013f9e:	ee07 0a90 	vmov	s15, r0
 8013fa2:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8013fa6:	f1b8 0f02 	cmp.w	r8, #2
 8013faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013fae:	eec7 7a2a 	vdiv.f32	s15, s14, s21
 8013fb2:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8013fb6:	d05f      	beq.n	8014078 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x168>
 8013fb8:	f1b8 0f03 	cmp.w	r8, #3
 8013fbc:	d061      	beq.n	8014082 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x172>
 8013fbe:	f1b8 0f01 	cmp.w	r8, #1
 8013fc2:	bf15      	itete	ne
 8013fc4:	ed94 8a25 	vldrne	s16, [r4, #148]	@ 0x94
 8013fc8:	edd4 8a2a 	vldreq	s17, [r4, #168]	@ 0xa8
 8013fcc:	ee37 8a88 	vaddne.f32	s16, s15, s16
 8013fd0:	ee77 8aa8 	vaddeq.f32	s17, s15, s17
 8013fd4:	46ca      	mov	sl, r9
 8013fd6:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
 8013fda:	f8b5 109e 	ldrh.w	r1, [r5, #158]	@ 0x9e
 8013fde:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	@ 0xe8
 8013fe2:	440b      	add	r3, r1
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	bf34      	ite	cc
 8013fe8:	464e      	movcc	r6, r9
 8013fea:	f885 b090 	strbcs.w	fp, [r5, #144]	@ 0x90
 8013fee:	f108 0801 	add.w	r8, r8, #1
 8013ff2:	3514      	adds	r5, #20
 8013ff4:	f1b8 0f04 	cmp.w	r8, #4
 8013ff8:	d1aa      	bne.n	8013f50 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x40>
 8013ffa:	f1ba 0f00 	cmp.w	sl, #0
 8013ffe:	d147      	bne.n	8014090 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x180>
 8014000:	9b01      	ldr	r3, [sp, #4]
 8014002:	b19b      	cbz	r3, 801402c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11c>
 8014004:	6823      	ldr	r3, [r4, #0]
 8014006:	eeb0 0a69 	vmov.f32	s0, s19
 801400a:	4620      	mov	r0, r4
 801400c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8014010:	4798      	blx	r3
 8014012:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8014016:	b148      	cbz	r0, 801402c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11c>
 8014018:	6803      	ldr	r3, [r0, #0]
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	4798      	blx	r3
 801401e:	b128      	cbz	r0, 801402c <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x11c>
 8014020:	f8d4 00e0 	ldr.w	r0, [r4, #224]	@ 0xe0
 8014024:	4621      	mov	r1, r4
 8014026:	6803      	ldr	r3, [r0, #0]
 8014028:	689b      	ldr	r3, [r3, #8]
 801402a:	4798      	blx	r3
 801402c:	2e00      	cmp	r6, #0
 801402e:	d13d      	bne.n	80140ac <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 8014030:	6823      	ldr	r3, [r4, #0]
 8014032:	4620      	mov	r0, r4
 8014034:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8014038:	4798      	blx	r3
 801403a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 801403e:	2800      	cmp	r0, #0
 8014040:	d034      	beq.n	80140ac <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 8014042:	6803      	ldr	r3, [r0, #0]
 8014044:	68db      	ldr	r3, [r3, #12]
 8014046:	4798      	blx	r3
 8014048:	b380      	cbz	r0, 80140ac <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x19c>
 801404a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	@ 0xe4
 801404e:	4621      	mov	r1, r4
 8014050:	6803      	ldr	r3, [r0, #0]
 8014052:	689b      	ldr	r3, [r3, #8]
 8014054:	b003      	add	sp, #12
 8014056:	ecbd 8b06 	vpop	{d8-d10}
 801405a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801405e:	4718      	bx	r3
 8014060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014064:	ed9f aa16 	vldr	s20, [pc, #88]	@ 80140c0 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x1b0>
 8014068:	ee67 7aaa 	vmul.f32	s15, s15, s21
 801406c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014070:	ee17 2a90 	vmov	r2, s15
 8014074:	b212      	sxth	r2, r2
 8014076:	e78a      	b.n	8013f8e <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x7e>
 8014078:	ed94 9a2f 	vldr	s18, [r4, #188]	@ 0xbc
 801407c:	ee37 9a89 	vadd.f32	s18, s15, s18
 8014080:	e7a8      	b.n	8013fd4 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc4>
 8014082:	edd4 9a34 	vldr	s19, [r4, #208]	@ 0xd0
 8014086:	f8cd 9004 	str.w	r9, [sp, #4]
 801408a:	ee77 9aa9 	vadd.f32	s19, s15, s19
 801408e:	e7a2      	b.n	8013fd6 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xc6>
 8014090:	6823      	ldr	r3, [r4, #0]
 8014092:	eeb0 1a49 	vmov.f32	s2, s18
 8014096:	eef0 0a68 	vmov.f32	s1, s17
 801409a:	4620      	mov	r0, r4
 801409c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801409e:	eeb0 0a48 	vmov.f32	s0, s16
 80140a2:	4798      	blx	r3
 80140a4:	9b01      	ldr	r3, [sp, #4]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d0b3      	beq.n	8014012 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0x102>
 80140aa:	e7ab      	b.n	8014004 <_ZN8touchgfx22AnimationTextureMapper15handleTickEventEv+0xf4>
 80140ac:	b003      	add	sp, #12
 80140ae:	ecbd 8b06 	vpop	{d8-d10}
 80140b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140b6:	bf00      	nop
 80140b8:	447a0000 	.word	0x447a0000
 80140bc:	00000001 	.word	0x00000001
 80140c0:	ffffffff 	.word	0xffffffff

080140c4 <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 80140c4:	b513      	push	{r0, r1, r4, lr}
 80140c6:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80140ca:	4604      	mov	r4, r0
 80140cc:	b143      	cbz	r3, 80140e0 <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 80140ce:	4601      	mov	r1, r0
 80140d0:	4668      	mov	r0, sp
 80140d2:	f000 fa1c 	bl	801450e <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80140d6:	6823      	ldr	r3, [r4, #0]
 80140d8:	4669      	mov	r1, sp
 80140da:	4620      	mov	r0, r4
 80140dc:	691b      	ldr	r3, [r3, #16]
 80140de:	4798      	blx	r3
 80140e0:	b002      	add	sp, #8
 80140e2:	bd10      	pop	{r4, pc}

080140e4 <_ZN8touchgfx22AnimationTextureMapperC1Ev>:
 80140e4:	b513      	push	{r0, r1, r4, lr}
 80140e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80140ea:	a902      	add	r1, sp, #8
 80140ec:	4604      	mov	r4, r0
 80140ee:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80140f2:	f000 f855 	bl	80141a0 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 80140f6:	4b0a      	ldr	r3, [pc, #40]	@ (8014120 <_ZN8touchgfx22AnimationTextureMapperC1Ev+0x3c>)
 80140f8:	4620      	mov	r0, r4
 80140fa:	6023      	str	r3, [r4, #0]
 80140fc:	2300      	movs	r3, #0
 80140fe:	e9c4 3338 	strd	r3, r3, [r4, #224]	@ 0xe0
 8014102:	f8a4 30e8 	strh.w	r3, [r4, #232]	@ 0xe8
 8014106:	f884 30ea 	strb.w	r3, [r4, #234]	@ 0xea
 801410a:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
 801410e:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 8014112:	f884 30b8 	strb.w	r3, [r4, #184]	@ 0xb8
 8014116:	f884 30cc 	strb.w	r3, [r4, #204]	@ 0xcc
 801411a:	b002      	add	sp, #8
 801411c:	bd10      	pop	{r4, pc}
 801411e:	bf00      	nop
 8014120:	0802be64 	.word	0x0802be64

08014124 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8014124:	b510      	push	{r4, lr}
 8014126:	ed2d 8b04 	vpush	{d8-d9}
 801412a:	6803      	ldr	r3, [r0, #0]
 801412c:	4604      	mov	r4, r0
 801412e:	eeb0 8a40 	vmov.f32	s16, s0
 8014132:	eef0 8a60 	vmov.f32	s17, s1
 8014136:	699b      	ldr	r3, [r3, #24]
 8014138:	eeb0 9a41 	vmov.f32	s18, s2
 801413c:	4798      	blx	r3
 801413e:	6823      	ldr	r3, [r4, #0]
 8014140:	4620      	mov	r0, r4
 8014142:	eef0 0a68 	vmov.f32	s1, s17
 8014146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014148:	eeb0 1a49 	vmov.f32	s2, s18
 801414c:	eeb0 0a48 	vmov.f32	s0, s16
 8014150:	4798      	blx	r3
 8014152:	6823      	ldr	r3, [r4, #0]
 8014154:	4620      	mov	r0, r4
 8014156:	699b      	ldr	r3, [r3, #24]
 8014158:	ecbd 8b04 	vpop	{d8-d9}
 801415c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014160:	4718      	bx	r3

08014162 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8014162:	b510      	push	{r4, lr}
 8014164:	ed2d 8b02 	vpush	{d8}
 8014168:	6803      	ldr	r3, [r0, #0]
 801416a:	4604      	mov	r4, r0
 801416c:	eeb0 8a40 	vmov.f32	s16, s0
 8014170:	699b      	ldr	r3, [r3, #24]
 8014172:	4798      	blx	r3
 8014174:	6823      	ldr	r3, [r4, #0]
 8014176:	4620      	mov	r0, r4
 8014178:	eeb0 0a48 	vmov.f32	s0, s16
 801417c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014180:	4798      	blx	r3
 8014182:	6823      	ldr	r3, [r4, #0]
 8014184:	4620      	mov	r0, r4
 8014186:	699b      	ldr	r3, [r3, #24]
 8014188:	ecbd 8b02 	vpop	{d8}
 801418c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014190:	4718      	bx	r3

08014192 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8014192:	2200      	movs	r2, #0
 8014194:	8002      	strh	r2, [r0, #0]
 8014196:	8042      	strh	r2, [r0, #2]
 8014198:	8082      	strh	r2, [r0, #4]
 801419a:	80c2      	strh	r2, [r0, #6]
 801419c:	4770      	bx	lr
	...

080141a0 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 80141a0:	b538      	push	{r3, r4, r5, lr}
 80141a2:	2301      	movs	r3, #1
 80141a4:	2500      	movs	r5, #0
 80141a6:	4604      	mov	r4, r0
 80141a8:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 80141ac:	4b1f      	ldr	r3, [pc, #124]	@ (801422c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 80141ae:	8085      	strh	r5, [r0, #4]
 80141b0:	80c5      	strh	r5, [r0, #6]
 80141b2:	8105      	strh	r5, [r0, #8]
 80141b4:	8145      	strh	r5, [r0, #10]
 80141b6:	8185      	strh	r5, [r0, #12]
 80141b8:	81c5      	strh	r5, [r0, #14]
 80141ba:	8205      	strh	r5, [r0, #16]
 80141bc:	8245      	strh	r5, [r0, #18]
 80141be:	61c5      	str	r5, [r0, #28]
 80141c0:	8405      	strh	r5, [r0, #32]
 80141c2:	8445      	strh	r5, [r0, #34]	@ 0x22
 80141c4:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 80141c8:	6003      	str	r3, [r0, #0]
 80141ca:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80141ce:	880b      	ldrh	r3, [r1, #0]
 80141d0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80141d2:	23ff      	movs	r3, #255	@ 0xff
 80141d4:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80141d8:	f001 f920 	bl	801541c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80141dc:	4b14      	ldr	r3, [pc, #80]	@ (8014230 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 80141de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80141e2:	4914      	ldr	r1, [pc, #80]	@ (8014234 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 80141e4:	6023      	str	r3, [r4, #0]
 80141e6:	2300      	movs	r3, #0
 80141e8:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 80141ec:	4620      	mov	r0, r4
 80141ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80141f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80141f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80141f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80141f6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80141f8:	6463      	str	r3, [r4, #68]	@ 0x44
 80141fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80141fc:	6523      	str	r3, [r4, #80]	@ 0x50
 80141fe:	6563      	str	r3, [r4, #84]	@ 0x54
 8014200:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8014202:	6623      	str	r3, [r4, #96]	@ 0x60
 8014204:	66a3      	str	r3, [r4, #104]	@ 0x68
 8014206:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8014208:	6763      	str	r3, [r4, #116]	@ 0x74
 801420a:	67a3      	str	r3, [r4, #120]	@ 0x78
 801420c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8014210:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8014214:	230c      	movs	r3, #12
 8014216:	6422      	str	r2, [r4, #64]	@ 0x40
 8014218:	64e1      	str	r1, [r4, #76]	@ 0x4c
 801421a:	65a1      	str	r1, [r4, #88]	@ 0x58
 801421c:	6662      	str	r2, [r4, #100]	@ 0x64
 801421e:	6722      	str	r2, [r4, #112]	@ 0x70
 8014220:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8014222:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 8014226:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
 801422a:	bd38      	pop	{r3, r4, r5, pc}
 801422c:	0802c310 	.word	0x0802c310
 8014230:	0802bf8c 	.word	0x0802bf8c
 8014234:	447a0000 	.word	0x447a0000

08014238 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8014238:	b570      	push	{r4, r5, r6, lr}
 801423a:	ed2d 8b04 	vpush	{d8-d9}
 801423e:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8014242:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8014244:	4604      	mov	r4, r0
 8014246:	add0      	add	r5, sp, #832	@ 0x340
 8014248:	f825 3d40 	strh.w	r3, [r5, #-64]!
 801424c:	4628      	mov	r0, r5
 801424e:	f006 fb2f 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014252:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8014254:	4606      	mov	r6, r0
 8014256:	4628      	mov	r0, r5
 8014258:	f8ad 3300 	strh.w	r3, [sp, #768]	@ 0x300
 801425c:	f006 fb5c 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014260:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014264:	1c72      	adds	r2, r6, #1
 8014266:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801426a:	3001      	adds	r0, #1
 801426c:	ee07 2a90 	vmov	s15, r2
 8014270:	ed94 6a0b 	vldr	s12, [r4, #44]	@ 0x2c
 8014274:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8014278:	ee06 0a90 	vmov	s13, r0
 801427c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8014280:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014286:	ed94 9a11 	vldr	s18, [r4, #68]	@ 0x44
 801428a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801428e:	9312      	str	r3, [sp, #72]	@ 0x48
 8014290:	9316      	str	r3, [sp, #88]	@ 0x58
 8014292:	a830      	add	r0, sp, #192	@ 0xc0
 8014294:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014298:	931a      	str	r3, [sp, #104]	@ 0x68
 801429a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801429e:	931e      	str	r3, [sp, #120]	@ 0x78
 80142a0:	2300      	movs	r3, #0
 80142a2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80142a6:	edcd 5a11 	vstr	s11, [sp, #68]	@ 0x44
 80142aa:	ae70      	add	r6, sp, #448	@ 0x1c0
 80142ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80142ae:	9321      	str	r3, [sp, #132]	@ 0x84
 80142b0:	9322      	str	r3, [sp, #136]	@ 0x88
 80142b2:	9324      	str	r3, [sp, #144]	@ 0x90
 80142b4:	9325      	str	r3, [sp, #148]	@ 0x94
 80142b6:	9326      	str	r3, [sp, #152]	@ 0x98
 80142b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80142ba:	9329      	str	r3, [sp, #164]	@ 0xa4
 80142bc:	932a      	str	r3, [sp, #168]	@ 0xa8
 80142be:	932c      	str	r3, [sp, #176]	@ 0xb0
 80142c0:	932d      	str	r3, [sp, #180]	@ 0xb4
 80142c2:	932e      	str	r3, [sp, #184]	@ 0xb8
 80142c4:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 80142c8:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 80142cc:	edcd 5a15 	vstr	s11, [sp, #84]	@ 0x54
 80142d0:	ed8d 7a17 	vstr	s14, [sp, #92]	@ 0x5c
 80142d4:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
 80142d8:	edcd 6a19 	vstr	s13, [sp, #100]	@ 0x64
 80142dc:	ed8d 7a1b 	vstr	s14, [sp, #108]	@ 0x6c
 80142e0:	ed8d 6a1c 	vstr	s12, [sp, #112]	@ 0x70
 80142e4:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 80142e8:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
 80142ec:	edd4 8a12 	vldr	s17, [r4, #72]	@ 0x48
 80142f0:	ed94 8a13 	vldr	s16, [r4, #76]	@ 0x4c
 80142f4:	f005 fb78 	bl	80199e8 <_ZN8touchgfx9Matrix4x4C1Ev>
 80142f8:	eeb1 0a49 	vneg.f32	s0, s18
 80142fc:	a830      	add	r0, sp, #192	@ 0xc0
 80142fe:	f005 fc43 	bl	8019b88 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8014302:	eeb1 0a68 	vneg.f32	s0, s17
 8014306:	f005 fc4d 	bl	8019ba4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801430a:	eeb1 0a48 	vneg.f32	s0, s16
 801430e:	f005 fc58 	bl	8019bc2 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8014312:	a840      	add	r0, sp, #256	@ 0x100
 8014314:	f005 fb68 	bl	80199e8 <_ZN8touchgfx9Matrix4x4C1Ev>
 8014318:	ed94 0a0d 	vldr	s0, [r4, #52]	@ 0x34
 801431c:	a840      	add	r0, sp, #256	@ 0x100
 801431e:	f005 fbb7 	bl	8019a90 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8014322:	ed94 0a0e 	vldr	s0, [r4, #56]	@ 0x38
 8014326:	f005 fbdd 	bl	8019ae4 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 801432a:	ed94 0a0f 	vldr	s0, [r4, #60]	@ 0x3c
 801432e:	f005 fc02 	bl	8019b36 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8014332:	a850      	add	r0, sp, #320	@ 0x140
 8014334:	f005 fb58 	bl	80199e8 <_ZN8touchgfx9Matrix4x4C1Ev>
 8014338:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 801433c:	a850      	add	r0, sp, #320	@ 0x140
 801433e:	f005 fc4f 	bl	8019be0 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8014342:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8014346:	f005 fc57 	bl	8019bf8 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 801434a:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 801434e:	f005 fc60 	bl	8019c12 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8014352:	a860      	add	r0, sp, #384	@ 0x180
 8014354:	f005 fb48 	bl	80199e8 <_ZN8touchgfx9Matrix4x4C1Ev>
 8014358:	eeb0 0a49 	vmov.f32	s0, s18
 801435c:	a860      	add	r0, sp, #384	@ 0x180
 801435e:	f005 fc13 	bl	8019b88 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8014362:	eeb0 0a68 	vmov.f32	s0, s17
 8014366:	f005 fc1d 	bl	8019ba4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801436a:	eeb0 0a48 	vmov.f32	s0, s16
 801436e:	f005 fc28 	bl	8019bc2 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8014372:	aa50      	add	r2, sp, #320	@ 0x140
 8014374:	a960      	add	r1, sp, #384	@ 0x180
 8014376:	a8b0      	add	r0, sp, #704	@ 0x2c0
 8014378:	f005 fb4e 	bl	8019a18 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801437c:	4628      	mov	r0, r5
 801437e:	aa40      	add	r2, sp, #256	@ 0x100
 8014380:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8014382:	f005 fb49 	bl	8019a18 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8014386:	4629      	mov	r1, r5
 8014388:	aa30      	add	r2, sp, #192	@ 0xc0
 801438a:	a870      	add	r0, sp, #448	@ 0x1c0
 801438c:	f005 fb44 	bl	8019a18 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8014390:	a880      	add	r0, sp, #512	@ 0x200
 8014392:	f005 fb29 	bl	80199e8 <_ZN8touchgfx9Matrix4x4C1Ev>
 8014396:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 801439a:	a880      	add	r0, sp, #512	@ 0x200
 801439c:	eeb1 0a40 	vneg.f32	s0, s0
 80143a0:	f005 fbf2 	bl	8019b88 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80143a4:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 80143a8:	a880      	add	r0, sp, #512	@ 0x200
 80143aa:	eeb1 0a40 	vneg.f32	s0, s0
 80143ae:	f005 fbf9 	bl	8019ba4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80143b2:	a890      	add	r0, sp, #576	@ 0x240
 80143b4:	f005 fb18 	bl	80199e8 <_ZN8touchgfx9Matrix4x4C1Ev>
 80143b8:	ed94 0a16 	vldr	s0, [r4, #88]	@ 0x58
 80143bc:	a890      	add	r0, sp, #576	@ 0x240
 80143be:	f005 fb57 	bl	8019a70 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 80143c2:	a8a0      	add	r0, sp, #640	@ 0x280
 80143c4:	f005 fb10 	bl	80199e8 <_ZN8touchgfx9Matrix4x4C1Ev>
 80143c8:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 80143cc:	a8a0      	add	r0, sp, #640	@ 0x280
 80143ce:	f005 fbdb 	bl	8019b88 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80143d2:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 80143d6:	f005 fbe5 	bl	8019ba4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80143da:	aa90      	add	r2, sp, #576	@ 0x240
 80143dc:	a9a0      	add	r1, sp, #640	@ 0x280
 80143de:	a8b0      	add	r0, sp, #704	@ 0x2c0
 80143e0:	f005 fb1a 	bl	8019a18 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80143e4:	4628      	mov	r0, r5
 80143e6:	aa80      	add	r2, sp, #512	@ 0x200
 80143e8:	a9b0      	add	r1, sp, #704	@ 0x2c0
 80143ea:	f005 fb15 	bl	8019a18 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80143ee:	4629      	mov	r1, r5
 80143f0:	466d      	mov	r5, sp
 80143f2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80143f4:	4668      	mov	r0, sp
 80143f6:	f005 fb0f 	bl	8019a18 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80143fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80143fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014400:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014404:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014406:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801440a:	2500      	movs	r5, #0
 801440c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8014410:	0129      	lsls	r1, r5, #4
 8014412:	ab20      	add	r3, sp, #128	@ 0x80
 8014414:	3501      	adds	r5, #1
 8014416:	a870      	add	r0, sp, #448	@ 0x1c0
 8014418:	185e      	adds	r6, r3, r1
 801441a:	ab10      	add	r3, sp, #64	@ 0x40
 801441c:	4419      	add	r1, r3
 801441e:	f005 fab3 	bl	8019988 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8014422:	2d04      	cmp	r5, #4
 8014424:	ed86 0a00 	vstr	s0, [r6]
 8014428:	edc6 0a01 	vstr	s1, [r6, #4]
 801442c:	ed86 1a02 	vstr	s2, [r6, #8]
 8014430:	edc6 1a03 	vstr	s3, [r6, #12]
 8014434:	d1ec      	bne.n	8014410 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8014436:	edd4 7a16 	vldr	s15, [r4, #88]	@ 0x58
 801443a:	eddd 6a20 	vldr	s13, [sp, #128]	@ 0x80
 801443e:	ed9d 7a22 	vldr	s14, [sp, #136]	@ 0x88
 8014442:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8014446:	ed84 7a19 	vstr	s14, [r4, #100]	@ 0x64
 801444a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801444e:	eddd 6a21 	vldr	s13, [sp, #132]	@ 0x84
 8014452:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8014456:	ed84 6a17 	vstr	s12, [r4, #92]	@ 0x5c
 801445a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801445e:	eddd 6a24 	vldr	s13, [sp, #144]	@ 0x90
 8014462:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8014466:	ed84 7a1c 	vstr	s14, [r4, #112]	@ 0x70
 801446a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801446e:	ed84 6a18 	vstr	s12, [r4, #96]	@ 0x60
 8014472:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8014476:	eddd 6a25 	vldr	s13, [sp, #148]	@ 0x94
 801447a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801447e:	ed84 6a1a 	vstr	s12, [r4, #104]	@ 0x68
 8014482:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8014486:	eddd 6a28 	vldr	s13, [sp, #160]	@ 0xa0
 801448a:	ed9d 7a2a 	vldr	s14, [sp, #168]	@ 0xa8
 801448e:	ed84 7a1f 	vstr	s14, [r4, #124]	@ 0x7c
 8014492:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8014496:	ed84 6a1b 	vstr	s12, [r4, #108]	@ 0x6c
 801449a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801449e:	eddd 6a29 	vldr	s13, [sp, #164]	@ 0xa4
 80144a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80144a6:	ed84 6a1d 	vstr	s12, [r4, #116]	@ 0x74
 80144aa:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80144ae:	eddd 6a2c 	vldr	s13, [sp, #176]	@ 0xb0
 80144b2:	ed9d 7a2e 	vldr	s14, [sp, #184]	@ 0xb8
 80144b6:	ed84 7a22 	vstr	s14, [r4, #136]	@ 0x88
 80144ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80144be:	ed84 6a1e 	vstr	s12, [r4, #120]	@ 0x78
 80144c2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80144c6:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 80144ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80144ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80144d2:	ed84 6a20 	vstr	s12, [r4, #128]	@ 0x80
 80144d6:	edc4 6a21 	vstr	s13, [r4, #132]	@ 0x84
 80144da:	f50d 7d50 	add.w	sp, sp, #832	@ 0x340
 80144de:	ecbd 8b04 	vpop	{d8-d9}
 80144e2:	bd70      	pop	{r4, r5, r6, pc}

080144e4 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 80144e4:	b510      	push	{r4, lr}
 80144e6:	4604      	mov	r4, r0
 80144e8:	f000 ff98 	bl	801541c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80144ec:	4620      	mov	r0, r4
 80144ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144f2:	f7ff bea1 	b.w	8014238 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080144f6 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 80144f6:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
 80144fa:	edc0 0a0e 	vstr	s1, [r0, #56]	@ 0x38
 80144fe:	ed80 1a0f 	vstr	s2, [r0, #60]	@ 0x3c
 8014502:	f7ff be99 	b.w	8014238 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08014506 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 8014506:	ed80 0a10 	vstr	s0, [r0, #64]	@ 0x40
 801450a:	f7ff be95 	b.w	8014238 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801450e <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 801450e:	b510      	push	{r4, lr}
 8014510:	edd1 5a1a 	vldr	s11, [r1, #104]	@ 0x68
 8014514:	edd1 7a17 	vldr	s15, [r1, #92]	@ 0x5c
 8014518:	ed91 6a1d 	vldr	s12, [r1, #116]	@ 0x74
 801451c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014520:	edd1 6a20 	vldr	s13, [r1, #128]	@ 0x80
 8014524:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8014528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801452c:	bf54      	ite	pl
 801452e:	eeb0 7a65 	vmovpl.f32	s14, s11
 8014532:	eeb0 7a67 	vmovmi.f32	s14, s15
 8014536:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801453a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801453e:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8014542:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454a:	fe37 7a26 	vselgt.f32	s14, s14, s13
 801454e:	febb 7a47 	vrintm.f32	s14, s14
 8014552:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801455a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801455e:	bf56      	itet	pl
 8014560:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 8014564:	2200      	movmi	r2, #0
 8014566:	ee17 3a10 	vmovpl	r3, s14
 801456a:	ee07 4a10 	vmov	s14, r4
 801456e:	bf58      	it	pl
 8014570:	b21a      	sxthpl	r2, r3
 8014572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014576:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801457a:	8002      	strh	r2, [r0, #0]
 801457c:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8014580:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8014584:	edd1 5a1b 	vldr	s11, [r1, #108]	@ 0x6c
 8014588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801458c:	bf58      	it	pl
 801458e:	eef0 7a46 	vmovpl.f32	s15, s12
 8014592:	ed91 6a1e 	vldr	s12, [r1, #120]	@ 0x78
 8014596:	eef4 6ae7 	vcmpe.f32	s13, s15
 801459a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801459e:	bf58      	it	pl
 80145a0:	eef0 7a66 	vmovpl.f32	s15, s13
 80145a4:	edd1 6a21 	vldr	s13, [r1, #132]	@ 0x84
 80145a8:	fefa 7a67 	vrintp.f32	s15, s15
 80145ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80145b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b4:	bfdc      	itt	le
 80145b6:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80145ba:	ee17 3a90 	vmovle	r3, s15
 80145be:	edd1 7a18 	vldr	s15, [r1, #96]	@ 0x60
 80145c2:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80145c6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80145ca:	bfd8      	it	le
 80145cc:	b21c      	sxthle	r4, r3
 80145ce:	1aa2      	subs	r2, r4, r2
 80145d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145d4:	8082      	strh	r2, [r0, #4]
 80145d6:	bf54      	ite	pl
 80145d8:	eeb0 7a65 	vmovpl.f32	s14, s11
 80145dc:	eeb0 7a67 	vmovmi.f32	s14, s15
 80145e0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80145e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e8:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80145ec:	eef4 6ac7 	vcmpe.f32	s13, s14
 80145f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f4:	fe37 7a26 	vselgt.f32	s14, s14, s13
 80145f8:	febb 7a47 	vrintm.f32	s14, s14
 80145fc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014604:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014608:	bf56      	itet	pl
 801460a:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 801460e:	2300      	movmi	r3, #0
 8014610:	ee17 3a10 	vmovpl	r3, s14
 8014614:	ee07 1a10 	vmov	s14, r1
 8014618:	bf58      	it	pl
 801461a:	b21b      	sxthpl	r3, r3
 801461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014620:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014624:	8043      	strh	r3, [r0, #2]
 8014626:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801462a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014632:	bf58      	it	pl
 8014634:	eef0 7a46 	vmovpl.f32	s15, s12
 8014638:	eef4 6ae7 	vcmpe.f32	s13, s15
 801463c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014640:	bf58      	it	pl
 8014642:	eef0 7a66 	vmovpl.f32	s15, s13
 8014646:	fefa 7a67 	vrintp.f32	s15, s15
 801464a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014652:	bfde      	ittt	le
 8014654:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8014658:	ee17 1a90 	vmovle	r1, s15
 801465c:	b209      	sxthle	r1, r1
 801465e:	1acb      	subs	r3, r1, r3
 8014660:	80c3      	strh	r3, [r0, #6]
 8014662:	bd10      	pop	{r4, pc}

08014664 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8014664:	4603      	mov	r3, r0
 8014666:	3026      	adds	r0, #38	@ 0x26
 8014668:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801466c:	b90b      	cbnz	r3, 8014672 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 801466e:	f004 b86d 	b.w	801874c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8014672:	f004 b87b 	b.w	801876c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08014678 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8014678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801467c:	ed2d 8b04 	vpush	{d8-d9}
 8014680:	b0b3      	sub	sp, #204	@ 0xcc
 8014682:	4604      	mov	r4, r0
 8014684:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8014688:	2500      	movs	r5, #0
 801468a:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801468e:	469b      	mov	fp, r3
 8014690:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014694:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8014698:	4648      	mov	r0, r9
 801469a:	9206      	str	r2, [sp, #24]
 801469c:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 80146a0:	9511      	str	r5, [sp, #68]	@ 0x44
 80146a2:	ad13      	add	r5, sp, #76	@ 0x4c
 80146a4:	f8dd a100 	ldr.w	sl, [sp, #256]	@ 0x100
 80146a8:	f8dd 8108 	ldr.w	r8, [sp, #264]	@ 0x108
 80146ac:	9f43      	ldr	r7, [sp, #268]	@ 0x10c
 80146ae:	f7fe fab3 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 80146b2:	4621      	mov	r1, r4
 80146b4:	a81e      	add	r0, sp, #120	@ 0x78
 80146b6:	f7ff ff2a 	bl	801450e <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80146ba:	e899 0003 	ldmia.w	r9, {r0, r1}
 80146be:	e885 0003 	stmia.w	r5, {r0, r1}
 80146c2:	4628      	mov	r0, r5
 80146c4:	a91e      	add	r1, sp, #120	@ 0x78
 80146c6:	f7fe faa7 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 80146ca:	6821      	ldr	r1, [r4, #0]
 80146cc:	4620      	mov	r0, r4
 80146ce:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 80146d0:	4629      	mov	r1, r5
 80146d2:	47b0      	blx	r6
 80146d4:	4621      	mov	r1, r4
 80146d6:	a815      	add	r0, sp, #84	@ 0x54
 80146d8:	1d26      	adds	r6, r4, #4
 80146da:	f003 ff93 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80146de:	a815      	add	r0, sp, #84	@ 0x54
 80146e0:	f002 fb48 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80146e4:	4631      	mov	r1, r6
 80146e6:	4648      	mov	r0, r9
 80146e8:	f002 fb88 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80146ec:	4628      	mov	r0, r5
 80146ee:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 80146f2:	f002 fb3f 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80146f6:	4628      	mov	r0, r5
 80146f8:	f006 f9cc 	bl	801aa94 <_ZNK8touchgfx6Bitmap7getDataEv>
 80146fc:	9007      	str	r0, [sp, #28]
 80146fe:	2800      	cmp	r0, #0
 8014700:	f000 80dc 	beq.w	80148bc <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x244>
 8014704:	f8db 200c 	ldr.w	r2, [fp, #12]
 8014708:	a809      	add	r0, sp, #36	@ 0x24
 801470a:	f8db 1000 	ldr.w	r1, [fp]
 801470e:	920c      	str	r2, [sp, #48]	@ 0x30
 8014710:	f8da 2000 	ldr.w	r2, [sl]
 8014714:	9109      	str	r1, [sp, #36]	@ 0x24
 8014716:	920d      	str	r2, [sp, #52]	@ 0x34
 8014718:	f8da 2004 	ldr.w	r2, [sl, #4]
 801471c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8014720:	920e      	str	r2, [sp, #56]	@ 0x38
 8014722:	f8da 2008 	ldr.w	r2, [sl, #8]
 8014726:	910a      	str	r1, [sp, #40]	@ 0x28
 8014728:	920f      	str	r2, [sp, #60]	@ 0x3c
 801472a:	f8db 1008 	ldr.w	r1, [fp, #8]
 801472e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8014732:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014734:	a90d      	add	r1, sp, #52	@ 0x34
 8014736:	9210      	str	r2, [sp, #64]	@ 0x40
 8014738:	4632      	mov	r2, r6
 801473a:	f002 fb43 	bl	8016dc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801473e:	4632      	mov	r2, r6
 8014740:	a90e      	add	r1, sp, #56	@ 0x38
 8014742:	a80a      	add	r0, sp, #40	@ 0x28
 8014744:	f002 fb3e 	bl	8016dc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8014748:	4632      	mov	r2, r6
 801474a:	a90f      	add	r1, sp, #60	@ 0x3c
 801474c:	a80b      	add	r0, sp, #44	@ 0x2c
 801474e:	f002 fb39 	bl	8016dc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8014752:	4632      	mov	r2, r6
 8014754:	a910      	add	r1, sp, #64	@ 0x40
 8014756:	a80c      	add	r0, sp, #48	@ 0x30
 8014758:	f002 fb34 	bl	8016dc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801475c:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8014760:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014762:	eef0 6a67 	vmov.f32	s13, s15
 8014766:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801476a:	ed97 4a00 	vldr	s8, [r7]
 801476e:	eeb0 7a67 	vmov.f32	s14, s15
 8014772:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8014776:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801477a:	ed97 5a01 	vldr	s10, [r7, #4]
 801477e:	eeb0 6a67 	vmov.f32	s12, s15
 8014782:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8014786:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801478a:	edd8 3a00 	vldr	s7, [r8]
 801478e:	edd8 4a01 	vldr	s9, [r8, #4]
 8014792:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8014796:	ed93 9a00 	vldr	s18, [r3]
 801479a:	ed93 8a01 	vldr	s16, [r3, #4]
 801479e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80147a2:	ee16 6a10 	vmov	r6, s12
 80147a6:	eeb0 6a67 	vmov.f32	s12, s15
 80147aa:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80147ae:	edd8 5a02 	vldr	s11, [r8, #8]
 80147b2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80147b6:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80147ba:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 80147be:	edcd 3a21 	vstr	s7, [sp, #132]	@ 0x84
 80147c2:	ee16 0a10 	vmov	r0, s12
 80147c6:	eeb0 6a67 	vmov.f32	s12, s15
 80147ca:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 80147ce:	ed8d 4a22 	vstr	s8, [sp, #136]	@ 0x88
 80147d2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80147d6:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 80147da:	edcd 4a26 	vstr	s9, [sp, #152]	@ 0x98
 80147de:	ed8d 5a27 	vstr	s10, [sp, #156]	@ 0x9c
 80147e2:	ee16 1a10 	vmov	r1, s12
 80147e6:	eeb0 6a67 	vmov.f32	s12, s15
 80147ea:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 80147ee:	edd3 8a02 	vldr	s17, [r3, #8]
 80147f2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80147f6:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80147fa:	9624      	str	r6, [sp, #144]	@ 0x90
 80147fc:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8014800:	68ff      	ldr	r7, [r7, #12]
 8014802:	ee16 2a10 	vmov	r2, s12
 8014806:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 801480a:	ed8d 9a20 	vstr	s18, [sp, #128]	@ 0x80
 801480e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8014812:	ed8d 8a25 	vstr	s16, [sp, #148]	@ 0x94
 8014816:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 801481a:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 801481e:	9b06      	ldr	r3, [sp, #24]
 8014820:	4628      	mov	r0, r5
 8014822:	922d      	str	r2, [sp, #180]	@ 0xb4
 8014824:	4a28      	ldr	r2, [pc, #160]	@ (80148c8 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>)
 8014826:	9317      	str	r3, [sp, #92]	@ 0x5c
 8014828:	8812      	ldrh	r2, [r2, #0]
 801482a:	9b07      	ldr	r3, [sp, #28]
 801482c:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 8014830:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8014834:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 8014838:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 801483c:	9218      	str	r2, [sp, #96]	@ 0x60
 801483e:	9319      	str	r3, [sp, #100]	@ 0x64
 8014840:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8014844:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8014848:	9731      	str	r7, [sp, #196]	@ 0xc4
 801484a:	f006 f953 	bl	801aaf4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801484e:	901a      	str	r0, [sp, #104]	@ 0x68
 8014850:	4628      	mov	r0, r5
 8014852:	f006 f82d 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014856:	901b      	str	r0, [sp, #108]	@ 0x6c
 8014858:	4628      	mov	r0, r5
 801485a:	f006 f85d 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801485e:	901c      	str	r0, [sp, #112]	@ 0x70
 8014860:	4628      	mov	r0, r5
 8014862:	f006 f825 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014866:	eeb4 9a48 	vcmp.f32	s18, s16
 801486a:	901d      	str	r0, [sp, #116]	@ 0x74
 801486c:	f8b4 608c 	ldrh.w	r6, [r4, #140]	@ 0x8c
 8014870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014874:	d107      	bne.n	8014886 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x20e>
 8014876:	eeb4 8a68 	vcmp.f32	s16, s17
 801487a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014882:	bf08      	it	eq
 8014884:	461e      	moveq	r6, r3
 8014886:	4b11      	ldr	r3, [pc, #68]	@ (80148cc <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x254>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801488e:	b10a      	cbz	r2, 8014894 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>
 8014890:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8014892:	b905      	cbnz	r5, 8014896 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21e>
 8014894:	689d      	ldr	r5, [r3, #8]
 8014896:	682b      	ldr	r3, [r5, #0]
 8014898:	4620      	mov	r0, r4
 801489a:	6c1f      	ldr	r7, [r3, #64]	@ 0x40
 801489c:	f7ff fee2 	bl	8014664 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 80148a0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80148a4:	aa1e      	add	r2, sp, #120	@ 0x78
 80148a6:	9604      	str	r6, [sp, #16]
 80148a8:	a917      	add	r1, sp, #92	@ 0x5c
 80148aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80148ae:	ab13      	add	r3, sp, #76	@ 0x4c
 80148b0:	4628      	mov	r0, r5
 80148b2:	9301      	str	r3, [sp, #4]
 80148b4:	ab15      	add	r3, sp, #84	@ 0x54
 80148b6:	9300      	str	r3, [sp, #0]
 80148b8:	ab19      	add	r3, sp, #100	@ 0x64
 80148ba:	47b8      	blx	r7
 80148bc:	b033      	add	sp, #204	@ 0xcc
 80148be:	ecbd 8b04 	vpop	{d8-d9}
 80148c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148c6:	bf00      	nop
 80148c8:	240065fa 	.word	0x240065fa
 80148cc:	24006600 	.word	0x24006600

080148d0 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 80148d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148d4:	ed2d 8b02 	vpush	{d8}
 80148d8:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80148dc:	b098      	sub	sp, #96	@ 0x60
 80148de:	4604      	mov	r4, r0
 80148e0:	4688      	mov	r8, r1
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d077      	beq.n	80149d6 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 80148e6:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80148ea:	4628      	mov	r0, r5
 80148ec:	f005 ffe0 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80148f0:	ee07 0a90 	vmov	s15, r0
 80148f4:	4628      	mov	r0, r5
 80148f6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80148fa:	f006 f80d 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80148fe:	4b4e      	ldr	r3, [pc, #312]	@ (8014a38 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8014900:	ee07 0a90 	vmov	s15, r0
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801490a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 801490e:	2b01      	cmp	r3, #1
 8014910:	d066      	beq.n	80149e0 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8014912:	eeb0 6a47 	vmov.f32	s12, s14
 8014916:	ee17 3a10 	vmov	r3, s14
 801491a:	eeb0 4a48 	vmov.f32	s8, s16
 801491e:	eeb0 7a48 	vmov.f32	s14, s16
 8014922:	eef0 4a67 	vmov.f32	s9, s15
 8014926:	eeb0 8a67 	vmov.f32	s16, s15
 801492a:	ed94 5a17 	vldr	s10, [r4, #92]	@ 0x5c
 801492e:	edd4 5a18 	vldr	s11, [r4, #96]	@ 0x60
 8014932:	ed94 3a1b 	vldr	s6, [r4, #108]	@ 0x6c
 8014936:	edd4 2a1d 	vldr	s5, [r4, #116]	@ 0x74
 801493a:	ee73 1a65 	vsub.f32	s3, s6, s11
 801493e:	ed94 2a1a 	vldr	s4, [r4, #104]	@ 0x68
 8014942:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8014946:	edd4 3a1e 	vldr	s7, [r4, #120]	@ 0x78
 801494a:	ee32 1a45 	vsub.f32	s2, s4, s10
 801494e:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8014950:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8014952:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8014956:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8014958:	ee73 1ae5 	vsub.f32	s3, s7, s11
 801495c:	f8d4 c080 	ldr.w	ip, [r4, #128]	@ 0x80
 8014960:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8014964:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8014968:	eee1 6a21 	vfma.f32	s13, s2, s3
 801496c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014974:	dd3d      	ble.n	80149f2 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8014976:	ed8d 5a04 	vstr	s10, [sp, #16]
 801497a:	ed8d 2a05 	vstr	s4, [sp, #20]
 801497e:	edcd 2a06 	vstr	s5, [sp, #24]
 8014982:	f8cd c01c 	str.w	ip, [sp, #28]
 8014986:	edcd 5a08 	vstr	s11, [sp, #32]
 801498a:	ed8d 3a09 	vstr	s6, [sp, #36]	@ 0x24
 801498e:	edcd 3a0a 	vstr	s7, [sp, #40]	@ 0x28
 8014992:	970b      	str	r7, [sp, #44]	@ 0x2c
 8014994:	960c      	str	r6, [sp, #48]	@ 0x30
 8014996:	950d      	str	r5, [sp, #52]	@ 0x34
 8014998:	920e      	str	r2, [sp, #56]	@ 0x38
 801499a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801499c:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 80149a0:	ed8d 4a11 	vstr	s8, [sp, #68]	@ 0x44
 80149a4:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
 80149a8:	edcd 4a13 	vstr	s9, [sp, #76]	@ 0x4c
 80149ac:	ed8d 8a14 	vstr	s16, [sp, #80]	@ 0x50
 80149b0:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 80149b4:	9316      	str	r3, [sp, #88]	@ 0x58
 80149b6:	ed8d 6a17 	vstr	s12, [sp, #92]	@ 0x5c
 80149ba:	ab14      	add	r3, sp, #80	@ 0x50
 80149bc:	2200      	movs	r2, #0
 80149be:	4641      	mov	r1, r8
 80149c0:	4620      	mov	r0, r4
 80149c2:	9303      	str	r3, [sp, #12]
 80149c4:	ab10      	add	r3, sp, #64	@ 0x40
 80149c6:	9302      	str	r3, [sp, #8]
 80149c8:	ab0c      	add	r3, sp, #48	@ 0x30
 80149ca:	9301      	str	r3, [sp, #4]
 80149cc:	ab08      	add	r3, sp, #32
 80149ce:	9300      	str	r3, [sp, #0]
 80149d0:	ab04      	add	r3, sp, #16
 80149d2:	f7ff fe51 	bl	8014678 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 80149d6:	b018      	add	sp, #96	@ 0x60
 80149d8:	ecbd 8b02 	vpop	{d8}
 80149dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149e0:	eeb0 6a48 	vmov.f32	s12, s16
 80149e4:	ee17 3a90 	vmov	r3, s15
 80149e8:	eef0 4a47 	vmov.f32	s9, s14
 80149ec:	eeb0 4a67 	vmov.f32	s8, s15
 80149f0:	e79b      	b.n	801492a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 80149f2:	ed8d 5a05 	vstr	s10, [sp, #20]
 80149f6:	ed8d 2a04 	vstr	s4, [sp, #16]
 80149fa:	f8cd c018 	str.w	ip, [sp, #24]
 80149fe:	edcd 2a07 	vstr	s5, [sp, #28]
 8014a02:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 8014a06:	ed8d 3a08 	vstr	s6, [sp, #32]
 8014a0a:	970a      	str	r7, [sp, #40]	@ 0x28
 8014a0c:	edcd 3a0b 	vstr	s7, [sp, #44]	@ 0x2c
 8014a10:	960d      	str	r6, [sp, #52]	@ 0x34
 8014a12:	950c      	str	r5, [sp, #48]	@ 0x30
 8014a14:	900e      	str	r0, [sp, #56]	@ 0x38
 8014a16:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014a18:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 8014a1c:	ed8d 4a10 	vstr	s8, [sp, #64]	@ 0x40
 8014a20:	edcd 4a12 	vstr	s9, [sp, #72]	@ 0x48
 8014a24:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 8014a28:	ed8d 8a15 	vstr	s16, [sp, #84]	@ 0x54
 8014a2c:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 8014a30:	ed8d 6a16 	vstr	s12, [sp, #88]	@ 0x58
 8014a34:	9317      	str	r3, [sp, #92]	@ 0x5c
 8014a36:	e7c0      	b.n	80149ba <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8014a38:	240065f8 	.word	0x240065f8

08014a3c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8014a3c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014a40:	b133      	cbz	r3, 8014a50 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8014a42:	790b      	ldrb	r3, [r1, #4]
 8014a44:	2b01      	cmp	r3, #1
 8014a46:	bf01      	itttt	eq
 8014a48:	8dc3      	ldrheq	r3, [r0, #46]	@ 0x2e
 8014a4a:	8e02      	ldrheq	r2, [r0, #48]	@ 0x30
 8014a4c:	8603      	strheq	r3, [r0, #48]	@ 0x30
 8014a4e:	85c2      	strheq	r2, [r0, #46]	@ 0x2e
 8014a50:	f7ff b937 	b.w	8013cc2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08014a54 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8014a54:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8014a58:	b12a      	cbz	r2, 8014a66 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8014a5a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8014a5e:	b112      	cbz	r2, 8014a66 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8014a60:	6803      	ldr	r3, [r0, #0]
 8014a62:	695b      	ldr	r3, [r3, #20]
 8014a64:	4718      	bx	r3
 8014a66:	4770      	bx	lr

08014a68 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8014a68:	2000      	movs	r0, #0
 8014a6a:	4770      	bx	lr

08014a6c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8014a6c:	4b07      	ldr	r3, [pc, #28]	@ (8014a8c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8014a6e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8014a70:	881b      	ldrh	r3, [r3, #0]
 8014a72:	4293      	cmp	r3, r2
 8014a74:	bf81      	itttt	hi
 8014a76:	4b06      	ldrhi	r3, [pc, #24]	@ (8014a90 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8014a78:	681b      	ldrhi	r3, [r3, #0]
 8014a7a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8014a7e:	7858      	ldrbhi	r0, [r3, #1]
 8014a80:	bf8c      	ite	hi
 8014a82:	f000 0003 	andhi.w	r0, r0, #3
 8014a86:	2000      	movls	r0, #0
 8014a88:	4770      	bx	lr
 8014a8a:	bf00      	nop
 8014a8c:	24006654 	.word	0x24006654
 8014a90:	24006650 	.word	0x24006650

08014a94 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8014a94:	4b11      	ldr	r3, [pc, #68]	@ (8014adc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8014a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a9a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	881b      	ldrh	r3, [r3, #0]
 8014aa0:	428b      	cmp	r3, r1
 8014aa2:	d918      	bls.n	8014ad6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8014aa4:	6803      	ldr	r3, [r0, #0]
 8014aa6:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8014aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8014ae0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8014aaa:	6818      	ldr	r0, [r3, #0]
 8014aac:	f7fa fe1a 	bl	800f6e4 <_ZNK8touchgfx5Texts7getTextEt>
 8014ab0:	6823      	ldr	r3, [r4, #0]
 8014ab2:	4606      	mov	r6, r0
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ab8:	4798      	blx	r3
 8014aba:	6823      	ldr	r3, [r4, #0]
 8014abc:	4607      	mov	r7, r0
 8014abe:	4620      	mov	r0, r4
 8014ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014ac4:	4798      	blx	r3
 8014ac6:	463a      	mov	r2, r7
 8014ac8:	4603      	mov	r3, r0
 8014aca:	4631      	mov	r1, r6
 8014acc:	4620      	mov	r0, r4
 8014ace:	46ac      	mov	ip, r5
 8014ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ad4:	4760      	bx	ip
 8014ad6:	2000      	movs	r0, #0
 8014ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014adc:	24006654 	.word	0x24006654
 8014ae0:	2400665c 	.word	0x2400665c

08014ae4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8014ae4:	4b18      	ldr	r3, [pc, #96]	@ (8014b48 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8014ae6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014aea:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8014aec:	4604      	mov	r4, r0
 8014aee:	881b      	ldrh	r3, [r3, #0]
 8014af0:	428b      	cmp	r3, r1
 8014af2:	d926      	bls.n	8014b42 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8014af4:	4b15      	ldr	r3, [pc, #84]	@ (8014b4c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8014afc:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8014b00:	4b13      	ldr	r3, [pc, #76]	@ (8014b50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8014b02:	7855      	ldrb	r5, [r2, #1]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8014b0a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8014b0e:	6833      	ldr	r3, [r6, #0]
 8014b10:	69df      	ldr	r7, [r3, #28]
 8014b12:	4b10      	ldr	r3, [pc, #64]	@ (8014b54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8014b14:	6818      	ldr	r0, [r3, #0]
 8014b16:	f7fa fde5 	bl	800f6e4 <_ZNK8touchgfx5Texts7getTextEt>
 8014b1a:	6823      	ldr	r3, [r4, #0]
 8014b1c:	4680      	mov	r8, r0
 8014b1e:	4620      	mov	r0, r4
 8014b20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b22:	4798      	blx	r3
 8014b24:	6823      	ldr	r3, [r4, #0]
 8014b26:	4681      	mov	r9, r0
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014b2e:	4798      	blx	r3
 8014b30:	464b      	mov	r3, r9
 8014b32:	9000      	str	r0, [sp, #0]
 8014b34:	4642      	mov	r2, r8
 8014b36:	4629      	mov	r1, r5
 8014b38:	4630      	mov	r0, r6
 8014b3a:	47b8      	blx	r7
 8014b3c:	b003      	add	sp, #12
 8014b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b42:	2000      	movs	r0, #0
 8014b44:	e7fa      	b.n	8014b3c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8014b46:	bf00      	nop
 8014b48:	24006654 	.word	0x24006654
 8014b4c:	24006650 	.word	0x24006650
 8014b50:	24006658 	.word	0x24006658
 8014b54:	2400665c 	.word	0x2400665c

08014b58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8014b58:	b40e      	push	{r1, r2, r3}
 8014b5a:	4b30      	ldr	r3, [pc, #192]	@ (8014c1c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8014b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b60:	881a      	ldrh	r2, [r3, #0]
 8014b62:	b09d      	sub	sp, #116	@ 0x74
 8014b64:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8014b66:	4604      	mov	r4, r0
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d954      	bls.n	8014c16 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8014b6c:	aa26      	add	r2, sp, #152	@ 0x98
 8014b6e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8014c20 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8014b72:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8014c24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8014b76:	9202      	str	r2, [sp, #8]
 8014b78:	f8d9 2000 	ldr.w	r2, [r9]
 8014b7c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8014b80:	f8d8 3000 	ldr.w	r3, [r8]
 8014b84:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014b88:	682b      	ldr	r3, [r5, #0]
 8014b8a:	4628      	mov	r0, r5
 8014b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014b8e:	4798      	blx	r3
 8014b90:	4606      	mov	r6, r0
 8014b92:	b207      	sxth	r7, r0
 8014b94:	a803      	add	r0, sp, #12
 8014b96:	f004 f97f 	bl	8018e98 <_ZN8touchgfx12TextProviderC1Ev>
 8014b9a:	682b      	ldr	r3, [r5, #0]
 8014b9c:	4628      	mov	r0, r5
 8014b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ba0:	4798      	blx	r3
 8014ba2:	682b      	ldr	r3, [r5, #0]
 8014ba4:	4682      	mov	sl, r0
 8014ba6:	4628      	mov	r0, r5
 8014ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014baa:	4798      	blx	r3
 8014bac:	4653      	mov	r3, sl
 8014bae:	9000      	str	r0, [sp, #0]
 8014bb0:	a803      	add	r0, sp, #12
 8014bb2:	9a02      	ldr	r2, [sp, #8]
 8014bb4:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8014bb6:	f004 f9ca 	bl	8018f4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014bba:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8014bbc:	f8d9 3000 	ldr.w	r3, [r9]
 8014bc0:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8014bc4:	8925      	ldrh	r5, [r4, #8]
 8014bc6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8014bca:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8014bce:	eba5 050c 	sub.w	r5, r5, ip
 8014bd2:	784a      	ldrb	r2, [r1, #1]
 8014bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8014bd8:	b22d      	sxth	r5, r5
 8014bda:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8014bde:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8014be2:	9500      	str	r5, [sp, #0]
 8014be4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014be8:	a803      	add	r0, sp, #12
 8014bea:	f001 fdc9 	bl	8016780 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8014bee:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8014bf2:	b203      	sxth	r3, r0
 8014bf4:	18b9      	adds	r1, r7, r2
 8014bf6:	2900      	cmp	r1, #0
 8014bf8:	dd0b      	ble.n	8014c12 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8014bfa:	3b01      	subs	r3, #1
 8014bfc:	fb13 f302 	smulbb	r3, r3, r2
 8014c00:	fb16 3300 	smlabb	r3, r6, r0, r3
 8014c04:	b21f      	sxth	r7, r3
 8014c06:	4638      	mov	r0, r7
 8014c08:	b01d      	add	sp, #116	@ 0x74
 8014c0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c0e:	b003      	add	sp, #12
 8014c10:	4770      	bx	lr
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	dcf7      	bgt.n	8014c06 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8014c16:	2700      	movs	r7, #0
 8014c18:	e7f5      	b.n	8014c06 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8014c1a:	bf00      	nop
 8014c1c:	24006654 	.word	0x24006654
 8014c20:	24006650 	.word	0x24006650
 8014c24:	24006658 	.word	0x24006658

08014c28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8014c28:	4bbd      	ldr	r3, [pc, #756]	@ (8014f20 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8014c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c2e:	460c      	mov	r4, r1
 8014c30:	881b      	ldrh	r3, [r3, #0]
 8014c32:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8014c34:	b0a9      	sub	sp, #164	@ 0xa4
 8014c36:	4680      	mov	r8, r0
 8014c38:	428b      	cmp	r3, r1
 8014c3a:	d809      	bhi.n	8014c50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8014c42:	6083      	str	r3, [r0, #8]
 8014c44:	e9c0 3200 	strd	r3, r2, [r0]
 8014c48:	4640      	mov	r0, r8
 8014c4a:	b029      	add	sp, #164	@ 0xa4
 8014c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c50:	4eb4      	ldr	r6, [pc, #720]	@ (8014f24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8014c52:	6833      	ldr	r3, [r6, #0]
 8014c54:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8014c58:	4bb3      	ldr	r3, [pc, #716]	@ (8014f28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014c60:	4bb2      	ldr	r3, [pc, #712]	@ (8014f2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014c62:	6818      	ldr	r0, [r3, #0]
 8014c64:	f7fa fd3e 	bl	800f6e4 <_ZNK8touchgfx5Texts7getTextEt>
 8014c68:	682b      	ldr	r3, [r5, #0]
 8014c6a:	4681      	mov	r9, r0
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c70:	4798      	blx	r3
 8014c72:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8014c74:	b203      	sxth	r3, r0
 8014c76:	4682      	mov	sl, r0
 8014c78:	4407      	add	r7, r0
 8014c7a:	a80f      	add	r0, sp, #60	@ 0x3c
 8014c7c:	9304      	str	r3, [sp, #16]
 8014c7e:	b2bb      	uxth	r3, r7
 8014c80:	9303      	str	r3, [sp, #12]
 8014c82:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	f040 80a5 	bne.w	8014dd6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8014c8c:	f004 f904 	bl	8018e98 <_ZN8touchgfx12TextProviderC1Ev>
 8014c90:	682b      	ldr	r3, [r5, #0]
 8014c92:	4628      	mov	r0, r5
 8014c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014c96:	4798      	blx	r3
 8014c98:	682b      	ldr	r3, [r5, #0]
 8014c9a:	4606      	mov	r6, r0
 8014c9c:	4628      	mov	r0, r5
 8014c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014ca0:	4798      	blx	r3
 8014ca2:	6823      	ldr	r3, [r4, #0]
 8014ca4:	4607      	mov	r7, r0
 8014ca6:	4620      	mov	r0, r4
 8014ca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014caa:	4798      	blx	r3
 8014cac:	6823      	ldr	r3, [r4, #0]
 8014cae:	4683      	mov	fp, r0
 8014cb0:	4620      	mov	r0, r4
 8014cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014cb6:	4798      	blx	r3
 8014cb8:	463b      	mov	r3, r7
 8014cba:	4649      	mov	r1, r9
 8014cbc:	4632      	mov	r2, r6
 8014cbe:	2600      	movs	r6, #0
 8014cc0:	e9cd b000 	strd	fp, r0, [sp]
 8014cc4:	a80f      	add	r0, sp, #60	@ 0x3c
 8014cc6:	4637      	mov	r7, r6
 8014cc8:	f004 f956 	bl	8018f78 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8014ccc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014cd0:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8014f24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8014cd4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014cd8:	bf0c      	ite	eq
 8014cda:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8014cde:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8014ce2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8014ce4:	4629      	mov	r1, r5
 8014ce6:	f8db 3000 	ldr.w	r3, [fp]
 8014cea:	a80f      	add	r0, sp, #60	@ 0x3c
 8014cec:	3701      	adds	r7, #1
 8014cee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014cf2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014cf6:	b2bf      	uxth	r7, r7
 8014cf8:	785b      	ldrb	r3, [r3, #1]
 8014cfa:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014cfe:	f001 fa46 	bl	801618e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8014d02:	9b03      	ldr	r3, [sp, #12]
 8014d04:	4286      	cmp	r6, r0
 8014d06:	eba9 0903 	sub.w	r9, r9, r3
 8014d0a:	bfb8      	it	lt
 8014d0c:	4606      	movlt	r6, r0
 8014d0e:	a80f      	add	r0, sp, #60	@ 0x3c
 8014d10:	fa0f f989 	sxth.w	r9, r9
 8014d14:	b236      	sxth	r6, r6
 8014d16:	f004 f8e6 	bl	8018ee6 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8014d1a:	b918      	cbnz	r0, 8014d24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014d1c:	7a2b      	ldrb	r3, [r5, #8]
 8014d1e:	444b      	add	r3, r9
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	dcde      	bgt.n	8014ce2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8014d24:	9b03      	ldr	r3, [sp, #12]
 8014d26:	4620      	mov	r0, r4
 8014d28:	9a04      	ldr	r2, [sp, #16]
 8014d2a:	fb13 f707 	smulbb	r7, r3, r7
 8014d2e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014d30:	f895 9009 	ldrb.w	r9, [r5, #9]
 8014d34:	1aff      	subs	r7, r7, r3
 8014d36:	b2bf      	uxth	r7, r7
 8014d38:	b23b      	sxth	r3, r7
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	bfa8      	it	ge
 8014d3e:	4657      	movge	r7, sl
 8014d40:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014d44:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014d48:	6823      	ldr	r3, [r4, #0]
 8014d4a:	444f      	add	r7, r9
 8014d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d4e:	bf08      	it	eq
 8014d50:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8014d54:	fa1f f987 	uxth.w	r9, r7
 8014d58:	bf18      	it	ne
 8014d5a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8014d5e:	4798      	blx	r3
 8014d60:	2801      	cmp	r0, #1
 8014d62:	fa0f f789 	sxth.w	r7, r9
 8014d66:	b2b3      	uxth	r3, r6
 8014d68:	f000 80e2 	beq.w	8014f30 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8014d6c:	2802      	cmp	r0, #2
 8014d6e:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8014d72:	f000 80e3 	beq.w	8014f3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8014d76:	7aea      	ldrb	r2, [r5, #11]
 8014d78:	b236      	sxth	r6, r6
 8014d7a:	7b2d      	ldrb	r5, [r5, #12]
 8014d7c:	1ab6      	subs	r6, r6, r2
 8014d7e:	442a      	add	r2, r5
 8014d80:	fa1f fa86 	uxth.w	sl, r6
 8014d84:	4413      	add	r3, r2
 8014d86:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8014d8a:	fa0f fb8a 	sxth.w	fp, sl
 8014d8e:	b29b      	uxth	r3, r3
 8014d90:	2a02      	cmp	r2, #2
 8014d92:	b21e      	sxth	r6, r3
 8014d94:	f000 80d6 	beq.w	8014f44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8014d98:	2a03      	cmp	r2, #3
 8014d9a:	f000 80de 	beq.w	8014f5a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8014d9e:	2a01      	cmp	r2, #1
 8014da0:	f040 80e6 	bne.w	8014f70 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8014da4:	8925      	ldrh	r5, [r4, #8]
 8014da6:	4633      	mov	r3, r6
 8014da8:	463e      	mov	r6, r7
 8014daa:	eba5 0909 	sub.w	r9, r5, r9
 8014dae:	461f      	mov	r7, r3
 8014db0:	465d      	mov	r5, fp
 8014db2:	fa0f fb89 	sxth.w	fp, r9
 8014db6:	4b5d      	ldr	r3, [pc, #372]	@ (8014f2c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014db8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8014dba:	6818      	ldr	r0, [r3, #0]
 8014dbc:	f7fa fc92 	bl	800f6e4 <_ZNK8touchgfx5Texts7getTextEt>
 8014dc0:	f8a8 b000 	strh.w	fp, [r8]
 8014dc4:	f8a8 5002 	strh.w	r5, [r8, #2]
 8014dc8:	f8a8 6004 	strh.w	r6, [r8, #4]
 8014dcc:	f8a8 7006 	strh.w	r7, [r8, #6]
 8014dd0:	f8c8 0008 	str.w	r0, [r8, #8]
 8014dd4:	e738      	b.n	8014c48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8014dd6:	f004 f85f 	bl	8018e98 <_ZN8touchgfx12TextProviderC1Ev>
 8014dda:	682b      	ldr	r3, [r5, #0]
 8014ddc:	4628      	mov	r0, r5
 8014dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014de0:	4798      	blx	r3
 8014de2:	682b      	ldr	r3, [r5, #0]
 8014de4:	4607      	mov	r7, r0
 8014de6:	4628      	mov	r0, r5
 8014de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014dea:	4798      	blx	r3
 8014dec:	6823      	ldr	r3, [r4, #0]
 8014dee:	4683      	mov	fp, r0
 8014df0:	4620      	mov	r0, r4
 8014df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014df4:	4798      	blx	r3
 8014df6:	6822      	ldr	r2, [r4, #0]
 8014df8:	9005      	str	r0, [sp, #20]
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8014e00:	4790      	blx	r2
 8014e02:	9b05      	ldr	r3, [sp, #20]
 8014e04:	463a      	mov	r2, r7
 8014e06:	4649      	mov	r1, r9
 8014e08:	9001      	str	r0, [sp, #4]
 8014e0a:	a80f      	add	r0, sp, #60	@ 0x3c
 8014e0c:	9300      	str	r3, [sp, #0]
 8014e0e:	465b      	mov	r3, fp
 8014e10:	f004 f8b2 	bl	8018f78 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8014e14:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014e18:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8014e1c:	af0f      	add	r7, sp, #60	@ 0x3c
 8014e1e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8014e22:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014e26:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8014e28:	bf0a      	itet	eq
 8014e2a:	464a      	moveq	r2, r9
 8014e2c:	461a      	movne	r2, r3
 8014e2e:	4699      	moveq	r9, r3
 8014e30:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8014e34:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8014e38:	1ad2      	subs	r2, r2, r3
 8014e3a:	6833      	ldr	r3, [r6, #0]
 8014e3c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8014e40:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8014e44:	7859      	ldrb	r1, [r3, #1]
 8014e46:	2300      	movs	r3, #0
 8014e48:	9707      	str	r7, [sp, #28]
 8014e4a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8014e4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014e52:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8014e56:	f88d 1020 	strb.w	r1, [sp, #32]
 8014e5a:	9509      	str	r5, [sp, #36]	@ 0x24
 8014e5c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8014e60:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8014e64:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8014e68:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014e6c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8014e70:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8014e74:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8014e78:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8014e7c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8014e80:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8014e84:	b350      	cbz	r0, 8014edc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014e86:	682b      	ldr	r3, [r5, #0]
 8014e88:	4628      	mov	r0, r5
 8014e8a:	695b      	ldr	r3, [r3, #20]
 8014e8c:	4798      	blx	r3
 8014e8e:	4607      	mov	r7, r0
 8014e90:	b320      	cbz	r0, 8014edc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e94:	4639      	mov	r1, r7
 8014e96:	6803      	ldr	r3, [r0, #0]
 8014e98:	68db      	ldr	r3, [r3, #12]
 8014e9a:	4798      	blx	r3
 8014e9c:	4606      	mov	r6, r0
 8014e9e:	b1e8      	cbz	r0, 8014edc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014ea0:	7b43      	ldrb	r3, [r0, #13]
 8014ea2:	7a82      	ldrb	r2, [r0, #10]
 8014ea4:	005b      	lsls	r3, r3, #1
 8014ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014eaa:	4313      	orrs	r3, r2
 8014eac:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8014eb0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8014eb4:	2b06      	cmp	r3, #6
 8014eb6:	d111      	bne.n	8014edc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014eb8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014eba:	4632      	mov	r2, r6
 8014ebc:	4639      	mov	r1, r7
 8014ebe:	6803      	ldr	r3, [r0, #0]
 8014ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ec2:	4798      	blx	r3
 8014ec4:	7b73      	ldrb	r3, [r6, #13]
 8014ec6:	005b      	lsls	r3, r3, #1
 8014ec8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014ecc:	7ab3      	ldrb	r3, [r6, #10]
 8014ece:	4313      	orrs	r3, r2
 8014ed0:	4418      	add	r0, r3
 8014ed2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8014ed6:	4418      	add	r0, r3
 8014ed8:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8014edc:	2600      	movs	r6, #0
 8014ede:	4637      	mov	r7, r6
 8014ee0:	a806      	add	r0, sp, #24
 8014ee2:	3701      	adds	r7, #1
 8014ee4:	f001 fb49 	bl	801657a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8014ee8:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8014eec:	9b03      	ldr	r3, [sp, #12]
 8014eee:	b2bf      	uxth	r7, r7
 8014ef0:	4286      	cmp	r6, r0
 8014ef2:	eba9 0903 	sub.w	r9, r9, r3
 8014ef6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8014efa:	bfb8      	it	lt
 8014efc:	4606      	movlt	r6, r0
 8014efe:	fa0f f989 	sxth.w	r9, r9
 8014f02:	b236      	sxth	r6, r6
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	f43f af0d 	beq.w	8014d24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014f0a:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	f47f af08 	bne.w	8014d24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014f14:	7a2b      	ldrb	r3, [r5, #8]
 8014f16:	444b      	add	r3, r9
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	dce1      	bgt.n	8014ee0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8014f1c:	e702      	b.n	8014d24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8014f1e:	bf00      	nop
 8014f20:	24006654 	.word	0x24006654
 8014f24:	24006650 	.word	0x24006650
 8014f28:	24006658 	.word	0x24006658
 8014f2c:	2400665c 	.word	0x2400665c
 8014f30:	ebaa 0606 	sub.w	r6, sl, r6
 8014f34:	2002      	movs	r0, #2
 8014f36:	fb96 f6f0 	sdiv	r6, r6, r0
 8014f3a:	e71c      	b.n	8014d76 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8014f3c:	441e      	add	r6, r3
 8014f3e:	ebaa 0606 	sub.w	r6, sl, r6
 8014f42:	e718      	b.n	8014d76 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8014f44:	8925      	ldrh	r5, [r4, #8]
 8014f46:	1aed      	subs	r5, r5, r3
 8014f48:	eba5 050a 	sub.w	r5, r5, sl
 8014f4c:	fa0f fb85 	sxth.w	fp, r5
 8014f50:	8965      	ldrh	r5, [r4, #10]
 8014f52:	eba5 0509 	sub.w	r5, r5, r9
 8014f56:	b22d      	sxth	r5, r5
 8014f58:	e72d      	b.n	8014db6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8014f5a:	8965      	ldrh	r5, [r4, #10]
 8014f5c:	f04f 0b00 	mov.w	fp, #0
 8014f60:	1aed      	subs	r5, r5, r3
 8014f62:	4633      	mov	r3, r6
 8014f64:	463e      	mov	r6, r7
 8014f66:	eba5 050a 	sub.w	r5, r5, sl
 8014f6a:	461f      	mov	r7, r3
 8014f6c:	b22d      	sxth	r5, r5
 8014f6e:	e722      	b.n	8014db6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8014f70:	2500      	movs	r5, #0
 8014f72:	e720      	b.n	8014db6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08014f74 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8014f74:	b513      	push	{r0, r1, r4, lr}
 8014f76:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	b1fb      	cbz	r3, 8014fbe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014f7e:	4b16      	ldr	r3, [pc, #88]	@ (8014fd8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8014f80:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8014f82:	881b      	ldrh	r3, [r3, #0]
 8014f84:	428b      	cmp	r3, r1
 8014f86:	d91a      	bls.n	8014fbe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014f88:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	dd16      	ble.n	8014fbe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014f90:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	dd12      	ble.n	8014fbe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014f98:	4b10      	ldr	r3, [pc, #64]	@ (8014fdc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8014f9a:	6818      	ldr	r0, [r3, #0]
 8014f9c:	f7fa fba2 	bl	800f6e4 <_ZNK8touchgfx5Texts7getTextEt>
 8014fa0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8014fa4:	6822      	ldr	r2, [r4, #0]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	db06      	blt.n	8014fb8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8014faa:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	db02      	blt.n	8014fb8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8014fb2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8014fb4:	4298      	cmp	r0, r3
 8014fb6:	d004      	beq.n	8014fc2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8014fb8:	6953      	ldr	r3, [r2, #20]
 8014fba:	4620      	mov	r0, r4
 8014fbc:	4798      	blx	r3
 8014fbe:	b002      	add	sp, #8
 8014fc0:	bd10      	pop	{r4, pc}
 8014fc2:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8014fc6:	466b      	mov	r3, sp
 8014fc8:	6912      	ldr	r2, [r2, #16]
 8014fca:	c903      	ldmia	r1, {r0, r1}
 8014fcc:	e883 0003 	stmia.w	r3, {r0, r1}
 8014fd0:	4619      	mov	r1, r3
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	4790      	blx	r2
 8014fd6:	e7f2      	b.n	8014fbe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014fd8:	24006654 	.word	0x24006654
 8014fdc:	2400665c 	.word	0x2400665c

08014fe0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8014fe0:	4b45      	ldr	r3, [pc, #276]	@ (80150f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8014fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fe6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8014fe8:	b08e      	sub	sp, #56	@ 0x38
 8014fea:	881b      	ldrh	r3, [r3, #0]
 8014fec:	4604      	mov	r4, r0
 8014fee:	4293      	cmp	r3, r2
 8014ff0:	d97e      	bls.n	80150f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014ff2:	6808      	ldr	r0, [r1, #0]
 8014ff4:	ab05      	add	r3, sp, #20
 8014ff6:	6849      	ldr	r1, [r1, #4]
 8014ff8:	4d40      	ldr	r5, [pc, #256]	@ (80150fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8014ffa:	c303      	stmia	r3!, {r0, r1}
 8014ffc:	4611      	mov	r1, r2
 8014ffe:	6828      	ldr	r0, [r5, #0]
 8015000:	f7fa fb70 	bl	800f6e4 <_ZNK8touchgfx5Texts7getTextEt>
 8015004:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8015008:	2b00      	cmp	r3, #0
 801500a:	db11      	blt.n	8015030 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801500c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8015010:	2b00      	cmp	r3, #0
 8015012:	db0d      	blt.n	8015030 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015014:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015016:	4298      	cmp	r0, r3
 8015018:	d10a      	bne.n	8015030 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801501a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801501e:	ab09      	add	r3, sp, #36	@ 0x24
 8015020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015024:	e883 0003 	stmia.w	r3, {r0, r1}
 8015028:	4619      	mov	r1, r3
 801502a:	a805      	add	r0, sp, #20
 801502c:	f7fd fdf4 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8015030:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015034:	2b00      	cmp	r3, #0
 8015036:	dd5b      	ble.n	80150f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015038:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801503c:	2b00      	cmp	r3, #0
 801503e:	dd57      	ble.n	80150f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015040:	4f2f      	ldr	r7, [pc, #188]	@ (8015100 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8015042:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801504a:	4b2e      	ldr	r3, [pc, #184]	@ (8015104 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8015052:	2e00      	cmp	r6, #0
 8015054:	d04c      	beq.n	80150f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015056:	6823      	ldr	r3, [r4, #0]
 8015058:	4620      	mov	r0, r4
 801505a:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 801505e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015060:	4798      	blx	r3
 8015062:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 801506a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801506e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8015072:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8015076:	785b      	ldrb	r3, [r3, #1]
 8015078:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 801507c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015080:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015082:	9609      	str	r6, [sp, #36]	@ 0x24
 8015084:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015088:	4b1f      	ldr	r3, [pc, #124]	@ (8015108 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801508a:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8015094:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015096:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 801509a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 801509e:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80150a2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80150a6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80150aa:	b10a      	cbz	r2, 80150b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80150ac:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80150ae:	b906      	cbnz	r6, 80150b2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80150b0:	689e      	ldr	r6, [r3, #8]
 80150b2:	af07      	add	r7, sp, #28
 80150b4:	4621      	mov	r1, r4
 80150b6:	4638      	mov	r0, r7
 80150b8:	f003 faa4 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80150bc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80150be:	6828      	ldr	r0, [r5, #0]
 80150c0:	f7fa fb10 	bl	800f6e4 <_ZNK8touchgfx5Texts7getTextEt>
 80150c4:	6823      	ldr	r3, [r4, #0]
 80150c6:	4605      	mov	r5, r0
 80150c8:	4620      	mov	r0, r4
 80150ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80150cc:	4798      	blx	r3
 80150ce:	6823      	ldr	r3, [r4, #0]
 80150d0:	4680      	mov	r8, r0
 80150d2:	4620      	mov	r0, r4
 80150d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80150d8:	4798      	blx	r3
 80150da:	ab09      	add	r3, sp, #36	@ 0x24
 80150dc:	9501      	str	r5, [sp, #4]
 80150de:	9300      	str	r3, [sp, #0]
 80150e0:	ab05      	add	r3, sp, #20
 80150e2:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80150e6:	4630      	mov	r0, r6
 80150e8:	e897 0006 	ldmia.w	r7, {r1, r2}
 80150ec:	f7fa fa8b 	bl	800f606 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80150f0:	b00e      	add	sp, #56	@ 0x38
 80150f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150f6:	bf00      	nop
 80150f8:	24006654 	.word	0x24006654
 80150fc:	2400665c 	.word	0x2400665c
 8015100:	24006650 	.word	0x24006650
 8015104:	24006658 	.word	0x24006658
 8015108:	24006600 	.word	0x24006600

0801510c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801510c:	b538      	push	{r3, r4, r5, lr}
 801510e:	4b0e      	ldr	r3, [pc, #56]	@ (8015148 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8015110:	4604      	mov	r4, r0
 8015112:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015114:	881b      	ldrh	r3, [r3, #0]
 8015116:	429a      	cmp	r2, r3
 8015118:	d214      	bcs.n	8015144 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801511a:	6803      	ldr	r3, [r0, #0]
 801511c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801511e:	4798      	blx	r3
 8015120:	6823      	ldr	r3, [r4, #0]
 8015122:	4605      	mov	r5, r0
 8015124:	4620      	mov	r0, r4
 8015126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015128:	4798      	blx	r3
 801512a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801512e:	b22d      	sxth	r5, r5
 8015130:	4601      	mov	r1, r0
 8015132:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8015136:	bf06      	itte	eq
 8015138:	4602      	moveq	r2, r0
 801513a:	4629      	moveq	r1, r5
 801513c:	462a      	movne	r2, r5
 801513e:	4620      	mov	r0, r4
 8015140:	f7f9 f83d 	bl	800e1be <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015144:	bd38      	pop	{r3, r4, r5, pc}
 8015146:	bf00      	nop
 8015148:	24006654 	.word	0x24006654

0801514c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801514c:	b530      	push	{r4, r5, lr}
 801514e:	888b      	ldrh	r3, [r1, #4]
 8015150:	b085      	sub	sp, #20
 8015152:	4604      	mov	r4, r0
 8015154:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8015156:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801515a:	b923      	cbnz	r3, 8015166 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801515c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015160:	b90b      	cbnz	r3, 8015166 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8015162:	f7ff ffd3 	bl	801510c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8015166:	6823      	ldr	r3, [r4, #0]
 8015168:	466d      	mov	r5, sp
 801516a:	4621      	mov	r1, r4
 801516c:	343c      	adds	r4, #60	@ 0x3c
 801516e:	4628      	mov	r0, r5
 8015170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015174:	4798      	blx	r3
 8015176:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801517a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801517e:	b005      	add	sp, #20
 8015180:	bd30      	pop	{r4, r5, pc}

08015182 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015182:	2300      	movs	r3, #0
 8015184:	8083      	strh	r3, [r0, #4]
 8015186:	80c3      	strh	r3, [r0, #6]
 8015188:	8003      	strh	r3, [r0, #0]
 801518a:	8043      	strh	r3, [r0, #2]
 801518c:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8015190:	2bff      	cmp	r3, #255	@ 0xff
 8015192:	bf01      	itttt	eq
 8015194:	890b      	ldrheq	r3, [r1, #8]
 8015196:	8083      	strheq	r3, [r0, #4]
 8015198:	894b      	ldrheq	r3, [r1, #10]
 801519a:	80c3      	strheq	r3, [r0, #6]
 801519c:	4770      	bx	lr
	...

080151a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80151a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80151a2:	4604      	mov	r4, r0
 80151a4:	466b      	mov	r3, sp
 80151a6:	6808      	ldr	r0, [r1, #0]
 80151a8:	6849      	ldr	r1, [r1, #4]
 80151aa:	c303      	stmia	r3!, {r0, r1}
 80151ac:	6823      	ldr	r3, [r4, #0]
 80151ae:	4669      	mov	r1, sp
 80151b0:	4620      	mov	r0, r4
 80151b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151b4:	4798      	blx	r3
 80151b6:	4b08      	ldr	r3, [pc, #32]	@ (80151d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80151be:	b10a      	cbz	r2, 80151c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80151c0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80151c2:	b900      	cbnz	r0, 80151c6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80151c4:	6898      	ldr	r0, [r3, #8]
 80151c6:	6803      	ldr	r3, [r0, #0]
 80151c8:	4669      	mov	r1, sp
 80151ca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80151cc:	6a1d      	ldr	r5, [r3, #32]
 80151ce:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80151d2:	47a8      	blx	r5
 80151d4:	b003      	add	sp, #12
 80151d6:	bd30      	pop	{r4, r5, pc}
 80151d8:	24006600 	.word	0x24006600

080151dc <_ZNK8touchgfx3Box17invalidateContentEv>:
 80151dc:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80151e0:	b12a      	cbz	r2, 80151ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80151e2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80151e6:	b112      	cbz	r2, 80151ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80151e8:	6803      	ldr	r3, [r0, #0]
 80151ea:	695b      	ldr	r3, [r3, #20]
 80151ec:	4718      	bx	r3
 80151ee:	4770      	bx	lr

080151f0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80151f0:	b570      	push	{r4, r5, r6, lr}
 80151f2:	880b      	ldrh	r3, [r1, #0]
 80151f4:	4605      	mov	r5, r0
 80151f6:	4604      	mov	r4, r0
 80151f8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80151fa:	8813      	ldrh	r3, [r2, #0]
 80151fc:	f825 3f30 	strh.w	r3, [r5, #48]!
 8015200:	4628      	mov	r0, r5
 8015202:	f005 fb55 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015206:	4606      	mov	r6, r0
 8015208:	4628      	mov	r0, r5
 801520a:	f005 fb85 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801520e:	6823      	ldr	r3, [r4, #0]
 8015210:	4605      	mov	r5, r0
 8015212:	4631      	mov	r1, r6
 8015214:	4620      	mov	r0, r4
 8015216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015218:	4798      	blx	r3
 801521a:	6823      	ldr	r3, [r4, #0]
 801521c:	4629      	mov	r1, r5
 801521e:	4620      	mov	r0, r4
 8015220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015226:	4718      	bx	r3

08015228 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8015228:	b510      	push	{r4, lr}
 801522a:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 801522e:	4604      	mov	r4, r0
 8015230:	2bff      	cmp	r3, #255	@ 0xff
 8015232:	d006      	beq.n	8015242 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8015234:	2300      	movs	r3, #0
 8015236:	8003      	strh	r3, [r0, #0]
 8015238:	8043      	strh	r3, [r0, #2]
 801523a:	8083      	strh	r3, [r0, #4]
 801523c:	80c3      	strh	r3, [r0, #6]
 801523e:	4620      	mov	r0, r4
 8015240:	bd10      	pop	{r4, pc}
 8015242:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8015246:	b11b      	cbz	r3, 8015250 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8015248:	3130      	adds	r1, #48	@ 0x30
 801524a:	f005 fb99 	bl	801a980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801524e:	e7f6      	b.n	801523e <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8015250:	312e      	adds	r1, #46	@ 0x2e
 8015252:	e7fa      	b.n	801524a <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08015254 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8015254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015258:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801525c:	b08a      	sub	sp, #40	@ 0x28
 801525e:	4604      	mov	r4, r0
 8015260:	4688      	mov	r8, r1
 8015262:	2b00      	cmp	r3, #0
 8015264:	d066      	beq.n	8015334 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8015266:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8015268:	a805      	add	r0, sp, #20
 801526a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801526e:	f005 fb1f 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015272:	4607      	mov	r7, r0
 8015274:	a805      	add	r0, sp, #20
 8015276:	f005 fb4f 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801527a:	f9b8 6000 	ldrsh.w	r6, [r8]
 801527e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8015282:	2300      	movs	r3, #0
 8015284:	4432      	add	r2, r6
 8015286:	9306      	str	r3, [sp, #24]
 8015288:	b292      	uxth	r2, r2
 801528a:	fa0f fc82 	sxth.w	ip, r2
 801528e:	459c      	cmp	ip, r3
 8015290:	dd52      	ble.n	8015338 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8015292:	42b7      	cmp	r7, r6
 8015294:	dd50      	ble.n	8015338 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8015296:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801529a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801529e:	442b      	add	r3, r5
 80152a0:	b29b      	uxth	r3, r3
 80152a2:	b219      	sxth	r1, r3
 80152a4:	2900      	cmp	r1, #0
 80152a6:	dd47      	ble.n	8015338 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80152a8:	42a8      	cmp	r0, r5
 80152aa:	dd45      	ble.n	8015338 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80152ac:	4567      	cmp	r7, ip
 80152ae:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80152b2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80152b6:	bfb8      	it	lt
 80152b8:	b2ba      	uxthlt	r2, r7
 80152ba:	4288      	cmp	r0, r1
 80152bc:	f8ad 6018 	strh.w	r6, [sp, #24]
 80152c0:	bfb8      	it	lt
 80152c2:	b283      	uxthlt	r3, r0
 80152c4:	1b92      	subs	r2, r2, r6
 80152c6:	f8ad 501a 	strh.w	r5, [sp, #26]
 80152ca:	1b5b      	subs	r3, r3, r5
 80152cc:	f8ad 201c 	strh.w	r2, [sp, #28]
 80152d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80152d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80152d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80152dc:	429a      	cmp	r2, r3
 80152de:	d026      	beq.n	801532e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80152e0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	dd22      	ble.n	801532e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80152e8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	dd1e      	ble.n	801532e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80152f0:	2300      	movs	r3, #0
 80152f2:	a908      	add	r1, sp, #32
 80152f4:	4620      	mov	r0, r4
 80152f6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80152fa:	6823      	ldr	r3, [r4, #0]
 80152fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152fe:	4798      	blx	r3
 8015300:	4b0f      	ldr	r3, [pc, #60]	@ (8015340 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015308:	b10a      	cbz	r2, 801530e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801530a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801530c:	b900      	cbnz	r0, 8015310 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801530e:	6898      	ldr	r0, [r3, #8]
 8015310:	2501      	movs	r5, #1
 8015312:	6801      	ldr	r1, [r0, #0]
 8015314:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8015318:	9502      	str	r5, [sp, #8]
 801531a:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801531e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015322:	9401      	str	r4, [sp, #4]
 8015324:	ac06      	add	r4, sp, #24
 8015326:	9400      	str	r4, [sp, #0]
 8015328:	688c      	ldr	r4, [r1, #8]
 801532a:	a905      	add	r1, sp, #20
 801532c:	47a0      	blx	r4
 801532e:	b00a      	add	sp, #40	@ 0x28
 8015330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015334:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8015336:	e797      	b.n	8015268 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8015338:	2300      	movs	r3, #0
 801533a:	9307      	str	r3, [sp, #28]
 801533c:	e7ca      	b.n	80152d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801533e:	bf00      	nop
 8015340:	24006600 	.word	0x24006600

08015344 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8015344:	4b30      	ldr	r3, [pc, #192]	@ (8015408 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8015346:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801534a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801534c:	b08d      	sub	sp, #52	@ 0x34
 801534e:	881b      	ldrh	r3, [r3, #0]
 8015350:	4604      	mov	r4, r0
 8015352:	460f      	mov	r7, r1
 8015354:	4293      	cmp	r3, r2
 8015356:	d954      	bls.n	8015402 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8015358:	4b2c      	ldr	r3, [pc, #176]	@ (801540c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801535a:	6819      	ldr	r1, [r3, #0]
 801535c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8015360:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8015364:	4a2a      	ldr	r2, [pc, #168]	@ (8015410 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8015366:	6812      	ldr	r2, [r2, #0]
 8015368:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801536c:	2900      	cmp	r1, #0
 801536e:	d048      	beq.n	8015402 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8015370:	785a      	ldrb	r2, [r3, #1]
 8015372:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8015376:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801537a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801537e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8015382:	4b24      	ldr	r3, [pc, #144]	@ (8015414 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8015384:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8015388:	681a      	ldr	r2, [r3, #0]
 801538a:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 801538e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8015392:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8015396:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015398:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 801539c:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80153a0:	9107      	str	r1, [sp, #28]
 80153a2:	f88d 8020 	strb.w	r8, [sp, #32]
 80153a6:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 80153aa:	9609      	str	r6, [sp, #36]	@ 0x24
 80153ac:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 80153b0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80153b4:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 80153b8:	b10b      	cbz	r3, 80153be <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80153ba:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 80153bc:	b905      	cbnz	r5, 80153c0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80153be:	6895      	ldr	r5, [r2, #8]
 80153c0:	ae05      	add	r6, sp, #20
 80153c2:	4621      	mov	r1, r4
 80153c4:	4630      	mov	r0, r6
 80153c6:	f003 f91d 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80153ca:	4b13      	ldr	r3, [pc, #76]	@ (8015418 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80153cc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80153ce:	6818      	ldr	r0, [r3, #0]
 80153d0:	f7fa f988 	bl	800f6e4 <_ZNK8touchgfx5Texts7getTextEt>
 80153d4:	6823      	ldr	r3, [r4, #0]
 80153d6:	4680      	mov	r8, r0
 80153d8:	4620      	mov	r0, r4
 80153da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80153dc:	4798      	blx	r3
 80153de:	6823      	ldr	r3, [r4, #0]
 80153e0:	4681      	mov	r9, r0
 80153e2:	4620      	mov	r0, r4
 80153e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80153e8:	4798      	blx	r3
 80153ea:	ab07      	add	r3, sp, #28
 80153ec:	f8cd 8004 	str.w	r8, [sp, #4]
 80153f0:	9300      	str	r3, [sp, #0]
 80153f2:	463b      	mov	r3, r7
 80153f4:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80153f8:	4628      	mov	r0, r5
 80153fa:	e896 0006 	ldmia.w	r6, {r1, r2}
 80153fe:	f7fa f902 	bl	800f606 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015402:	b00d      	add	sp, #52	@ 0x34
 8015404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015408:	24006654 	.word	0x24006654
 801540c:	24006650 	.word	0x24006650
 8015410:	24006658 	.word	0x24006658
 8015414:	24006600 	.word	0x24006600
 8015418:	2400665c 	.word	0x2400665c

0801541c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801541c:	b570      	push	{r4, r5, r6, lr}
 801541e:	880b      	ldrh	r3, [r1, #0]
 8015420:	460d      	mov	r5, r1
 8015422:	4604      	mov	r4, r0
 8015424:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8015426:	4608      	mov	r0, r1
 8015428:	f005 fa42 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801542c:	4606      	mov	r6, r0
 801542e:	4628      	mov	r0, r5
 8015430:	f005 fa72 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015434:	6823      	ldr	r3, [r4, #0]
 8015436:	4605      	mov	r5, r0
 8015438:	4631      	mov	r1, r6
 801543a:	4620      	mov	r0, r4
 801543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801543e:	4798      	blx	r3
 8015440:	6823      	ldr	r3, [r4, #0]
 8015442:	4629      	mov	r1, r5
 8015444:	4620      	mov	r0, r4
 8015446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801544c:	4718      	bx	r3

0801544e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801544e:	b510      	push	{r4, lr}
 8015450:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8015454:	4604      	mov	r4, r0
 8015456:	2bff      	cmp	r3, #255	@ 0xff
 8015458:	d006      	beq.n	8015468 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801545a:	2300      	movs	r3, #0
 801545c:	8003      	strh	r3, [r0, #0]
 801545e:	8043      	strh	r3, [r0, #2]
 8015460:	8083      	strh	r3, [r0, #4]
 8015462:	80c3      	strh	r3, [r0, #6]
 8015464:	4620      	mov	r0, r4
 8015466:	bd10      	pop	{r4, pc}
 8015468:	3126      	adds	r1, #38	@ 0x26
 801546a:	f005 fa89 	bl	801a980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801546e:	e7f9      	b.n	8015464 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08015470 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8015470:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8015474:	b12a      	cbz	r2, 8015482 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015476:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801547a:	b112      	cbz	r2, 8015482 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801547c:	6803      	ldr	r3, [r0, #0]
 801547e:	695b      	ldr	r3, [r3, #20]
 8015480:	4718      	bx	r3
 8015482:	4770      	bx	lr

08015484 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8015484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015488:	4604      	mov	r4, r0
 801548a:	b088      	sub	sp, #32
 801548c:	2500      	movs	r5, #0
 801548e:	460f      	mov	r7, r1
 8015490:	f854 3b26 	ldr.w	r3, [r4], #38
 8015494:	a904      	add	r1, sp, #16
 8015496:	4606      	mov	r6, r0
 8015498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801549a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801549e:	4798      	blx	r3
 80154a0:	4620      	mov	r0, r4
 80154a2:	f005 fa05 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80154a6:	4680      	mov	r8, r0
 80154a8:	4620      	mov	r0, r4
 80154aa:	f005 fa35 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80154ae:	9506      	str	r5, [sp, #24]
 80154b0:	ad06      	add	r5, sp, #24
 80154b2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80154b6:	4639      	mov	r1, r7
 80154b8:	f8ad 801c 	strh.w	r8, [sp, #28]
 80154bc:	4628      	mov	r0, r5
 80154be:	f7fd fbab 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 80154c2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	dd19      	ble.n	80154fe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80154ca:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	dd15      	ble.n	80154fe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80154d2:	4b0c      	ldr	r3, [pc, #48]	@ (8015504 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80154da:	b10a      	cbz	r2, 80154e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80154dc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80154de:	b900      	cbnz	r0, 80154e2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80154e0:	6898      	ldr	r0, [r3, #8]
 80154e2:	2701      	movs	r7, #1
 80154e4:	6801      	ldr	r1, [r0, #0]
 80154e6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80154ea:	9702      	str	r7, [sp, #8]
 80154ec:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80154f0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80154f4:	e9cd 5600 	strd	r5, r6, [sp]
 80154f8:	688d      	ldr	r5, [r1, #8]
 80154fa:	4621      	mov	r1, r4
 80154fc:	47a8      	blx	r5
 80154fe:	b008      	add	sp, #32
 8015500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015504:	24006600 	.word	0x24006600

08015508 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8015508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801550c:	b08d      	sub	sp, #52	@ 0x34
 801550e:	4604      	mov	r4, r0
 8015510:	460f      	mov	r7, r1
 8015512:	f7ff fe9f 	bl	8015254 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8015516:	4a55      	ldr	r2, [pc, #340]	@ (801566c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8015518:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801551a:	8812      	ldrh	r2, [r2, #0]
 801551c:	429a      	cmp	r2, r3
 801551e:	f240 8082 	bls.w	8015626 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8015522:	4d53      	ldr	r5, [pc, #332]	@ (8015670 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8015524:	682a      	ldr	r2, [r5, #0]
 8015526:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801552a:	4b52      	ldr	r3, [pc, #328]	@ (8015674 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8015532:	2200      	movs	r2, #0
 8015534:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8015538:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801553c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8015540:	2a03      	cmp	r2, #3
 8015542:	d811      	bhi.n	8015568 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8015544:	e8df f002 	tbb	[pc, r2]
 8015548:	89727902 	.word	0x89727902
 801554c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015550:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8015554:	1ad2      	subs	r2, r2, r3
 8015556:	2002      	movs	r0, #2
 8015558:	f8ad 1010 	strh.w	r1, [sp, #16]
 801555c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015560:	fb92 f2f0 	sdiv	r2, r2, r0
 8015564:	f8ad 200e 	strh.w	r2, [sp, #14]
 8015568:	f10d 080c 	add.w	r8, sp, #12
 801556c:	f10d 0914 	add.w	r9, sp, #20
 8015570:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015574:	e889 0003 	stmia.w	r9, {r0, r1}
 8015578:	4639      	mov	r1, r7
 801557a:	4648      	mov	r0, r9
 801557c:	f7fd fb4c 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8015580:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015584:	2b00      	cmp	r3, #0
 8015586:	dd4e      	ble.n	8015626 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8015588:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801558c:	2b00      	cmp	r3, #0
 801558e:	dd4a      	ble.n	8015626 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8015590:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015594:	4641      	mov	r1, r8
 8015596:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801559a:	4620      	mov	r0, r4
 801559c:	1a9b      	subs	r3, r3, r2
 801559e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80155a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80155a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80155aa:	1a9b      	subs	r3, r3, r2
 80155ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80155b0:	6823      	ldr	r3, [r4, #0]
 80155b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155b4:	4798      	blx	r3
 80155b6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d053      	beq.n	8015666 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 80155be:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80155c0:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80155c2:	682b      	ldr	r3, [r5, #0]
 80155c4:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 80155c8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80155cc:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 80155d0:	785b      	ldrb	r3, [r3, #1]
 80155d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80155d4:	f3c3 0501 	ubfx	r5, r3, #0, #2
 80155d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80155dc:	9607      	str	r6, [sp, #28]
 80155de:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 80155e2:	2300      	movs	r3, #0
 80155e4:	f88d 5020 	strb.w	r5, [sp, #32]
 80155e8:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80155ec:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 80155f0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80155f4:	4b20      	ldr	r3, [pc, #128]	@ (8015678 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 80155f6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015600:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8015604:	b10a      	cbz	r2, 801560a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8015606:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015608:	b904      	cbnz	r4, 801560c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 801560a:	689c      	ldr	r4, [r3, #8]
 801560c:	4b1b      	ldr	r3, [pc, #108]	@ (801567c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801560e:	6818      	ldr	r0, [r3, #0]
 8015610:	f7fa f868 	bl	800f6e4 <_ZNK8touchgfx5Texts7getTextEt>
 8015614:	ab07      	add	r3, sp, #28
 8015616:	9001      	str	r0, [sp, #4]
 8015618:	4620      	mov	r0, r4
 801561a:	9300      	str	r3, [sp, #0]
 801561c:	464b      	mov	r3, r9
 801561e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8015622:	f7f9 fff0 	bl	800f606 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015626:	b00d      	add	sp, #52	@ 0x34
 8015628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801562c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8015630:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8015634:	1ad2      	subs	r2, r2, r3
 8015636:	3201      	adds	r2, #1
 8015638:	e78d      	b.n	8015556 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 801563a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801563e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8015642:	1ad2      	subs	r2, r2, r3
 8015644:	3201      	adds	r2, #1
 8015646:	2002      	movs	r0, #2
 8015648:	f8ad 3010 	strh.w	r3, [sp, #16]
 801564c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015650:	fb92 f2f0 	sdiv	r2, r2, r0
 8015654:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015658:	e786      	b.n	8015568 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801565a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801565e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8015662:	1ad2      	subs	r2, r2, r3
 8015664:	e7ef      	b.n	8015646 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 8015666:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8015668:	e7aa      	b.n	80155c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 801566a:	bf00      	nop
 801566c:	24006654 	.word	0x24006654
 8015670:	24006650 	.word	0x24006650
 8015674:	24006658 	.word	0x24006658
 8015678:	24006600 	.word	0x24006600
 801567c:	2400665c 	.word	0x2400665c

08015680 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8015680:	2101      	movs	r1, #1
 8015682:	2200      	movs	r2, #0
 8015684:	b510      	push	{r4, lr}
 8015686:	4c13      	ldr	r4, [pc, #76]	@ (80156d4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8015688:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801568c:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8015690:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015694:	6004      	str	r4, [r0, #0]
 8015696:	4c10      	ldr	r4, [pc, #64]	@ (80156d8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8015698:	8082      	strh	r2, [r0, #4]
 801569a:	80c2      	strh	r2, [r0, #6]
 801569c:	8102      	strh	r2, [r0, #8]
 801569e:	8142      	strh	r2, [r0, #10]
 80156a0:	8182      	strh	r2, [r0, #12]
 80156a2:	81c2      	strh	r2, [r0, #14]
 80156a4:	8202      	strh	r2, [r0, #16]
 80156a6:	8242      	strh	r2, [r0, #18]
 80156a8:	61c2      	str	r2, [r0, #28]
 80156aa:	8402      	strh	r2, [r0, #32]
 80156ac:	8442      	strh	r2, [r0, #34]	@ 0x22
 80156ae:	6282      	str	r2, [r0, #40]	@ 0x28
 80156b0:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 80156b4:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 80156b6:	8601      	strh	r1, [r0, #48]	@ 0x30
 80156b8:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 80156bc:	6344      	str	r4, [r0, #52]	@ 0x34
 80156be:	8701      	strh	r1, [r0, #56]	@ 0x38
 80156c0:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 80156c4:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 80156c8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80156cc:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 80156d0:	bd10      	pop	{r4, pc}
 80156d2:	bf00      	nop
 80156d4:	0802c37c 	.word	0x0802c37c
 80156d8:	0802b00c 	.word	0x0802b00c

080156dc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80156dc:	b510      	push	{r4, lr}
 80156de:	6803      	ldr	r3, [r0, #0]
 80156e0:	460c      	mov	r4, r1
 80156e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156e4:	4798      	blx	r3
 80156e6:	1b03      	subs	r3, r0, r4
 80156e8:	4258      	negs	r0, r3
 80156ea:	4158      	adcs	r0, r3
 80156ec:	bd10      	pop	{r4, pc}
	...

080156f0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80156f0:	4b01      	ldr	r3, [pc, #4]	@ (80156f8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80156f2:	6019      	str	r1, [r3, #0]
 80156f4:	4770      	bx	lr
 80156f6:	bf00      	nop
 80156f8:	24006608 	.word	0x24006608

080156fc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80156fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015700:	4696      	mov	lr, r2
 8015702:	b097      	sub	sp, #92	@ 0x5c
 8015704:	4605      	mov	r5, r0
 8015706:	4614      	mov	r4, r2
 8015708:	460e      	mov	r6, r1
 801570a:	461f      	mov	r7, r3
 801570c:	f10d 0c1c 	add.w	ip, sp, #28
 8015710:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8015714:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8015718:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801571c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015720:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015724:	f8de 3000 	ldr.w	r3, [lr]
 8015728:	f104 0e14 	add.w	lr, r4, #20
 801572c:	f8cc 3000 	str.w	r3, [ip]
 8015730:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015734:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015738:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801573c:	f8de 3000 	ldr.w	r3, [lr]
 8015740:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8015744:	f8cc 3000 	str.w	r3, [ip]
 8015748:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801574c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015750:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015754:	f8de 3000 	ldr.w	r3, [lr]
 8015758:	4631      	mov	r1, r6
 801575a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801575c:	4628      	mov	r0, r5
 801575e:	f8cc 3000 	str.w	r3, [ip]
 8015762:	682b      	ldr	r3, [r5, #0]
 8015764:	9201      	str	r2, [sp, #4]
 8015766:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015768:	f8cd 8008 	str.w	r8, [sp, #8]
 801576c:	9200      	str	r2, [sp, #0]
 801576e:	aa07      	add	r2, sp, #28
 8015770:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015774:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8015778:	463b      	mov	r3, r7
 801577a:	47d8      	blx	fp
 801577c:	46a6      	mov	lr, r4
 801577e:	f10d 0c1c 	add.w	ip, sp, #28
 8015782:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015786:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801578a:	f8de 3000 	ldr.w	r3, [lr]
 801578e:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8015792:	343c      	adds	r4, #60	@ 0x3c
 8015794:	f8cc 3000 	str.w	r3, [ip]
 8015798:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801579c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80157a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157a4:	f8de 3000 	ldr.w	r3, [lr]
 80157a8:	f8cc 3000 	str.w	r3, [ip]
 80157ac:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80157b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157b6:	6823      	ldr	r3, [r4, #0]
 80157b8:	4631      	mov	r1, r6
 80157ba:	4628      	mov	r0, r5
 80157bc:	f8cc 3000 	str.w	r3, [ip]
 80157c0:	682b      	ldr	r3, [r5, #0]
 80157c2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80157c6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80157c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80157cc:	9201      	str	r2, [sp, #4]
 80157ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80157d0:	9200      	str	r2, [sp, #0]
 80157d2:	aa07      	add	r2, sp, #28
 80157d4:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80157d6:	463b      	mov	r3, r7
 80157d8:	47a0      	blx	r4
 80157da:	b017      	add	sp, #92	@ 0x5c
 80157dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157e0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80157e0:	2000      	movs	r0, #0
 80157e2:	4770      	bx	lr

080157e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80157e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e8:	b08d      	sub	sp, #52	@ 0x34
 80157ea:	4688      	mov	r8, r1
 80157ec:	f8d3 c000 	ldr.w	ip, [r3]
 80157f0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80157f2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80157f6:	680f      	ldr	r7, [r1, #0]
 80157f8:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80157fc:	eba7 070c 	sub.w	r7, r7, ip
 8015800:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8015804:	edd3 6a07 	vldr	s13, [r3, #28]
 8015808:	42bc      	cmp	r4, r7
 801580a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801580c:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8015810:	bfa8      	it	ge
 8015812:	463c      	movge	r4, r7
 8015814:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015818:	f9ba 1000 	ldrsh.w	r1, [sl]
 801581c:	ee07 4a90 	vmov	s15, r4
 8015820:	eb09 0e0c 	add.w	lr, r9, ip
 8015824:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8015828:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801582c:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8015830:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8015834:	4571      	cmp	r1, lr
 8015836:	ee25 4a04 	vmul.f32	s8, s10, s8
 801583a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801583e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8015842:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015846:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801584a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801584e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015852:	ee36 0a84 	vadd.f32	s0, s13, s8
 8015856:	ee61 1a87 	vmul.f32	s3, s3, s14
 801585a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801585e:	f340 808c 	ble.w	801597a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8015862:	eba1 060e 	sub.w	r6, r1, lr
 8015866:	fb96 f5f4 	sdiv	r5, r6, r4
 801586a:	ee07 5a10 	vmov	s14, r5
 801586e:	2d00      	cmp	r5, #0
 8015870:	fb04 6615 	mls	r6, r4, r5, r6
 8015874:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015878:	eea7 0a04 	vfma.f32	s0, s14, s8
 801587c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015880:	eea7 1a05 	vfma.f32	s2, s14, s10
 8015884:	dd12      	ble.n	80158ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8015886:	ee70 6a44 	vsub.f32	s13, s0, s8
 801588a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801588e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015892:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801589a:	bf14      	ite	ne
 801589c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80158a0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80158a4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80158a8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80158ac:	fb05 f204 	mul.w	r2, r5, r4
 80158b0:	1abf      	subs	r7, r7, r2
 80158b2:	4494      	add	ip, r2
 80158b4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80158b8:	4411      	add	r1, r2
 80158ba:	eb09 020c 	add.w	r2, r9, ip
 80158be:	b209      	sxth	r1, r1
 80158c0:	443a      	add	r2, r7
 80158c2:	428a      	cmp	r2, r1
 80158c4:	bfc4      	itt	gt
 80158c6:	eba1 0209 	subgt.w	r2, r1, r9
 80158ca:	eba2 070c 	subgt.w	r7, r2, ip
 80158ce:	2f00      	cmp	r7, #0
 80158d0:	dd50      	ble.n	8015974 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80158d2:	fb97 f1f4 	sdiv	r1, r7, r4
 80158d6:	fb04 7211 	mls	r2, r4, r1, r7
 80158da:	b90a      	cbnz	r2, 80158e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80158dc:	3901      	subs	r1, #1
 80158de:	4622      	mov	r2, r4
 80158e0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80158e4:	6840      	ldr	r0, [r0, #4]
 80158e6:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80158ea:	44b6      	add	lr, r6
 80158ec:	f8d0 a000 	ldr.w	sl, [r0]
 80158f0:	2900      	cmp	r1, #0
 80158f2:	bfcc      	ite	gt
 80158f4:	46a1      	movgt	r9, r4
 80158f6:	4691      	movle	r9, r2
 80158f8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80158fa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80158fc:	fb04 e505 	mla	r5, r4, r5, lr
 8015900:	eef0 6a42 	vmov.f32	s13, s4
 8015904:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015908:	9008      	str	r0, [sp, #32]
 801590a:	eeb0 7a61 	vmov.f32	s14, s3
 801590e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8015910:	695b      	ldr	r3, [r3, #20]
 8015912:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015916:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801591a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801591e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8015920:	445b      	add	r3, fp
 8015922:	9307      	str	r3, [sp, #28]
 8015924:	ee16 3a90 	vmov	r3, s13
 8015928:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801592c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015930:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015934:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015938:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801593c:	ee17 7a90 	vmov	r7, s15
 8015940:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015944:	fb97 f7f4 	sdiv	r7, r7, r4
 8015948:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801594c:	ee17 ca90 	vmov	ip, s15
 8015950:	fb9c fcf4 	sdiv	ip, ip, r4
 8015954:	fb0c 3306 	mla	r3, ip, r6, r3
 8015958:	9302      	str	r3, [sp, #8]
 801595a:	ee17 3a10 	vmov	r3, s14
 801595e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015962:	fb07 3706 	mla	r7, r7, r6, r3
 8015966:	eba9 0306 	sub.w	r3, r9, r6
 801596a:	e9cd 4700 	strd	r4, r7, [sp]
 801596e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015972:	47a0      	blx	r4
 8015974:	b00d      	add	sp, #52	@ 0x34
 8015976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801597a:	2500      	movs	r5, #0
 801597c:	462e      	mov	r6, r5
 801597e:	e799      	b.n	80158b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015980 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015984:	b0db      	sub	sp, #364	@ 0x16c
 8015986:	461d      	mov	r5, r3
 8015988:	4614      	mov	r4, r2
 801598a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801598e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015990:	4629      	mov	r1, r5
 8015992:	930a      	str	r3, [sp, #40]	@ 0x28
 8015994:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8015998:	9009      	str	r0, [sp, #36]	@ 0x24
 801599a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801599c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 80159a0:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 80159a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80159a6:	6803      	ldr	r3, [r0, #0]
 80159a8:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80159aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80159ae:	47b8      	blx	r7
 80159b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159b2:	6058      	str	r0, [r3, #4]
 80159b4:	2800      	cmp	r0, #0
 80159b6:	f000 83a1 	beq.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80159ba:	682b      	ldr	r3, [r5, #0]
 80159bc:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80159c0:	ed94 7a02 	vldr	s14, [r4, #8]
 80159c4:	9314      	str	r3, [sp, #80]	@ 0x50
 80159c6:	686b      	ldr	r3, [r5, #4]
 80159c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80159cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80159ce:	4bc1      	ldr	r3, [pc, #772]	@ (8015cd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80159d0:	7819      	ldrb	r1, [r3, #0]
 80159d2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80159d6:	2900      	cmp	r1, #0
 80159d8:	bf16      	itet	ne
 80159da:	4619      	movne	r1, r3
 80159dc:	4611      	moveq	r1, r2
 80159de:	4613      	movne	r3, r2
 80159e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159e4:	9116      	str	r1, [sp, #88]	@ 0x58
 80159e6:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80159ea:	f240 8387 	bls.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80159ee:	ed94 7a07 	vldr	s14, [r4, #28]
 80159f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80159f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159fa:	f240 837f 	bls.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80159fe:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8015a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a0a:	f240 8377 	bls.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015a0e:	6822      	ldr	r2, [r4, #0]
 8015a10:	4bb1      	ldr	r3, [pc, #708]	@ (8015cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015a12:	429a      	cmp	r2, r3
 8015a14:	f2c0 8372 	blt.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015a18:	49b0      	ldr	r1, [pc, #704]	@ (8015cdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015a1a:	6963      	ldr	r3, [r4, #20]
 8015a1c:	428a      	cmp	r2, r1
 8015a1e:	f300 836d 	bgt.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015a22:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8015a26:	48ae      	ldr	r0, [pc, #696]	@ (8015ce0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015a28:	33ff      	adds	r3, #255	@ 0xff
 8015a2a:	4283      	cmp	r3, r0
 8015a2c:	f200 8366 	bhi.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015a30:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015a32:	4dac      	ldr	r5, [pc, #688]	@ (8015ce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015a34:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8015a38:	33ff      	adds	r3, #255	@ 0xff
 8015a3a:	42ab      	cmp	r3, r5
 8015a3c:	f200 835e 	bhi.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015a40:	6862      	ldr	r2, [r4, #4]
 8015a42:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8015a46:	33ff      	adds	r3, #255	@ 0xff
 8015a48:	4283      	cmp	r3, r0
 8015a4a:	f200 8357 	bhi.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015a4e:	69a1      	ldr	r1, [r4, #24]
 8015a50:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8015a54:	33ff      	adds	r3, #255	@ 0xff
 8015a56:	4283      	cmp	r3, r0
 8015a58:	f200 8350 	bhi.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015a5c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8015a5e:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8015a62:	30ff      	adds	r0, #255	@ 0xff
 8015a64:	42a8      	cmp	r0, r5
 8015a66:	f200 8349 	bhi.w	80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015a6a:	428a      	cmp	r2, r1
 8015a6c:	f280 8110 	bge.w	8015c90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015a70:	429a      	cmp	r2, r3
 8015a72:	f300 8119 	bgt.w	8015ca8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015a76:	4299      	cmp	r1, r3
 8015a78:	f280 811d 	bge.w	8015cb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8015a7c:	2502      	movs	r5, #2
 8015a7e:	2701      	movs	r7, #1
 8015a80:	46a9      	mov	r9, r5
 8015a82:	46b8      	mov	r8, r7
 8015a84:	f04f 0a00 	mov.w	sl, #0
 8015a88:	4621      	mov	r1, r4
 8015a8a:	a849      	add	r0, sp, #292	@ 0x124
 8015a8c:	f004 f8ce 	bl	8019c2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015a90:	4622      	mov	r2, r4
 8015a92:	4653      	mov	r3, sl
 8015a94:	a949      	add	r1, sp, #292	@ 0x124
 8015a96:	f8cd 9000 	str.w	r9, [sp]
 8015a9a:	a819      	add	r0, sp, #100	@ 0x64
 8015a9c:	f004 f9f6 	bl	8019e8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015aa0:	4622      	mov	r2, r4
 8015aa2:	4653      	mov	r3, sl
 8015aa4:	a949      	add	r1, sp, #292	@ 0x124
 8015aa6:	f8cd 8000 	str.w	r8, [sp]
 8015aaa:	a829      	add	r0, sp, #164	@ 0xa4
 8015aac:	f004 f9ee 	bl	8019e8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015ab0:	4643      	mov	r3, r8
 8015ab2:	4622      	mov	r2, r4
 8015ab4:	a949      	add	r1, sp, #292	@ 0x124
 8015ab6:	f8cd 9000 	str.w	r9, [sp]
 8015aba:	a839      	add	r0, sp, #228	@ 0xe4
 8015abc:	f004 f9e6 	bl	8019e8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015ac0:	42af      	cmp	r7, r5
 8015ac2:	af12      	add	r7, sp, #72	@ 0x48
 8015ac4:	bfb7      	itett	lt
 8015ac6:	2300      	movlt	r3, #0
 8015ac8:	2301      	movge	r3, #1
 8015aca:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8015acc:	ac19      	addlt	r4, sp, #100	@ 0x64
 8015ace:	bfb1      	iteee	lt
 8015ad0:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8015ad2:	ad19      	addge	r5, sp, #100	@ 0x64
 8015ad4:	930e      	strge	r3, [sp, #56]	@ 0x38
 8015ad6:	ac29      	addge	r4, sp, #164	@ 0xa4
 8015ad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ada:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015ade:	e887 0003 	stmia.w	r7, {r0, r1}
 8015ae2:	b928      	cbnz	r0, 8015af0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015ae4:	4b80      	ldr	r3, [pc, #512]	@ (8015ce8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015ae6:	6818      	ldr	r0, [r3, #0]
 8015ae8:	6803      	ldr	r3, [r0, #0]
 8015aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015aec:	4798      	blx	r3
 8015aee:	6038      	str	r0, [r7, #0]
 8015af0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015af2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015af6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015afa:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8015afc:	930c      	str	r3, [sp, #48]	@ 0x30
 8015afe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015b00:	6963      	ldr	r3, [r4, #20]
 8015b02:	440b      	add	r3, r1
 8015b04:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015b08:	4408      	add	r0, r1
 8015b0a:	b200      	sxth	r0, r0
 8015b0c:	4283      	cmp	r3, r0
 8015b0e:	900d      	str	r0, [sp, #52]	@ 0x34
 8015b10:	f280 80dd 	bge.w	8015cce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015b14:	428b      	cmp	r3, r1
 8015b16:	da08      	bge.n	8015b2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015b18:	2a00      	cmp	r2, #0
 8015b1a:	dd06      	ble.n	8015b2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015b1c:	1acb      	subs	r3, r1, r3
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	f2c0 80e4 	blt.w	8015cec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	f300 80e2 	bgt.w	8015cee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8015b2a:	6967      	ldr	r7, [r4, #20]
 8015b2c:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015b30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b32:	443b      	add	r3, r7
 8015b34:	461f      	mov	r7, r3
 8015b36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015b38:	1bdf      	subs	r7, r3, r7
 8015b3a:	4297      	cmp	r7, r2
 8015b3c:	bfa8      	it	ge
 8015b3e:	4617      	movge	r7, r2
 8015b40:	2f00      	cmp	r7, #0
 8015b42:	f340 8166 	ble.w	8015e12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8015b46:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015b48:	6829      	ldr	r1, [r5, #0]
 8015b4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015b4e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015b52:	4411      	add	r1, r2
 8015b54:	6820      	ldr	r0, [r4, #0]
 8015b56:	4299      	cmp	r1, r3
 8015b58:	dd1a      	ble.n	8015b90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015b5a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015b5e:	4402      	add	r2, r0
 8015b60:	440b      	add	r3, r1
 8015b62:	b21b      	sxth	r3, r3
 8015b64:	429a      	cmp	r2, r3
 8015b66:	dc13      	bgt.n	8015b90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015b68:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015b6a:	a912      	add	r1, sp, #72	@ 0x48
 8015b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	9206      	str	r2, [sp, #24]
 8015b74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015b76:	9500      	str	r5, [sp, #0]
 8015b78:	9205      	str	r2, [sp, #20]
 8015b7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015b7c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015b80:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015b82:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015b86:	aa49      	add	r2, sp, #292	@ 0x124
 8015b88:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8015b8c:	4623      	mov	r3, r4
 8015b8e:	47c8      	blx	r9
 8015b90:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015b94:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015b98:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8015b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015ba0:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015ba4:	68a1      	ldr	r1, [r4, #8]
 8015ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015baa:	ed94 6a08 	vldr	s12, [r4, #32]
 8015bae:	edd4 6a07 	vldr	s13, [r4, #28]
 8015bb2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015bb6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015bba:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015bbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015bc2:	edc4 6a07 	vstr	s13, [r4, #28]
 8015bc6:	441a      	add	r2, r3
 8015bc8:	6963      	ldr	r3, [r4, #20]
 8015bca:	3301      	adds	r3, #1
 8015bcc:	6022      	str	r2, [r4, #0]
 8015bce:	6163      	str	r3, [r4, #20]
 8015bd0:	69a3      	ldr	r3, [r4, #24]
 8015bd2:	3b01      	subs	r3, #1
 8015bd4:	61a3      	str	r3, [r4, #24]
 8015bd6:	6923      	ldr	r3, [r4, #16]
 8015bd8:	440b      	add	r3, r1
 8015bda:	68e1      	ldr	r1, [r4, #12]
 8015bdc:	428b      	cmp	r3, r1
 8015bde:	6123      	str	r3, [r4, #16]
 8015be0:	db15      	blt.n	8015c0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015be2:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015be6:	3201      	adds	r2, #1
 8015be8:	1a5b      	subs	r3, r3, r1
 8015bea:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015bee:	6022      	str	r2, [r4, #0]
 8015bf0:	6123      	str	r3, [r4, #16]
 8015bf2:	edc4 6a07 	vstr	s13, [r4, #28]
 8015bf6:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8015bfa:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015bfe:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015c02:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8015c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c0a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015c0e:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015c12:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8015c16:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8015c1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015c1e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8015c22:	68a9      	ldr	r1, [r5, #8]
 8015c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015c28:	ed95 6a08 	vldr	s12, [r5, #32]
 8015c2c:	edd5 6a07 	vldr	s13, [r5, #28]
 8015c30:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015c34:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015c38:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015c3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015c40:	edc5 6a07 	vstr	s13, [r5, #28]
 8015c44:	441a      	add	r2, r3
 8015c46:	696b      	ldr	r3, [r5, #20]
 8015c48:	3301      	adds	r3, #1
 8015c4a:	602a      	str	r2, [r5, #0]
 8015c4c:	616b      	str	r3, [r5, #20]
 8015c4e:	69ab      	ldr	r3, [r5, #24]
 8015c50:	3b01      	subs	r3, #1
 8015c52:	61ab      	str	r3, [r5, #24]
 8015c54:	692b      	ldr	r3, [r5, #16]
 8015c56:	440b      	add	r3, r1
 8015c58:	68e9      	ldr	r1, [r5, #12]
 8015c5a:	428b      	cmp	r3, r1
 8015c5c:	612b      	str	r3, [r5, #16]
 8015c5e:	db15      	blt.n	8015c8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015c60:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015c64:	3201      	adds	r2, #1
 8015c66:	1a5b      	subs	r3, r3, r1
 8015c68:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015c6c:	602a      	str	r2, [r5, #0]
 8015c6e:	612b      	str	r3, [r5, #16]
 8015c70:	edc5 6a07 	vstr	s13, [r5, #28]
 8015c74:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015c78:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015c7c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015c80:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c88:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015c8c:	3f01      	subs	r7, #1
 8015c8e:	e757      	b.n	8015b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015c90:	4299      	cmp	r1, r3
 8015c92:	dc13      	bgt.n	8015cbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015c94:	429a      	cmp	r2, r3
 8015c96:	da14      	bge.n	8015cc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015c98:	2502      	movs	r5, #2
 8015c9a:	2703      	movs	r7, #3
 8015c9c:	f04f 0800 	mov.w	r8, #0
 8015ca0:	46a9      	mov	r9, r5
 8015ca2:	f04f 0a01 	mov.w	sl, #1
 8015ca6:	e6ef      	b.n	8015a88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015ca8:	2501      	movs	r5, #1
 8015caa:	2700      	movs	r7, #0
 8015cac:	46a9      	mov	r9, r5
 8015cae:	46b8      	mov	r8, r7
 8015cb0:	f04f 0a02 	mov.w	sl, #2
 8015cb4:	e6e8      	b.n	8015a88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015cb6:	2501      	movs	r5, #1
 8015cb8:	2702      	movs	r7, #2
 8015cba:	e6e1      	b.n	8015a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015cbc:	2500      	movs	r5, #0
 8015cbe:	2701      	movs	r7, #1
 8015cc0:	e7f4      	b.n	8015cac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015cc2:	2702      	movs	r7, #2
 8015cc4:	2503      	movs	r5, #3
 8015cc6:	f04f 0900 	mov.w	r9, #0
 8015cca:	46b8      	mov	r8, r7
 8015ccc:	e7e9      	b.n	8015ca2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015cce:	4613      	mov	r3, r2
 8015cd0:	e728      	b.n	8015b24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015cd2:	bf00      	nop
 8015cd4:	240065f8 	.word	0x240065f8
 8015cd8:	fffd8f01 	.word	0xfffd8f01
 8015cdc:	00027100 	.word	0x00027100
 8015ce0:	0004e1ff 	.word	0x0004e1ff
 8015ce4:	0004e1fe 	.word	0x0004e1fe
 8015ce8:	24006600 	.word	0x24006600
 8015cec:	4613      	mov	r3, r2
 8015cee:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8015cf0:	469e      	mov	lr, r3
 8015cf2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8015cf4:	469c      	mov	ip, r3
 8015cf6:	9111      	str	r1, [sp, #68]	@ 0x44
 8015cf8:	f04f 0900 	mov.w	r9, #0
 8015cfc:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8015d00:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8015d04:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8015d08:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8015d0c:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8015d10:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8015d14:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8015d18:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8015d1c:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8015d20:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8015d24:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8015d28:	f1bc 0f00 	cmp.w	ip, #0
 8015d2c:	d147      	bne.n	8015dbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015d2e:	eb03 0c07 	add.w	ip, r3, r7
 8015d32:	1ad7      	subs	r7, r2, r3
 8015d34:	f1b9 0f00 	cmp.w	r9, #0
 8015d38:	d009      	beq.n	8015d4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015d3a:	9029      	str	r0, [sp, #164]	@ 0xa4
 8015d3c:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8015d40:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8015d44:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8015d48:	912d      	str	r1, [sp, #180]	@ 0xb4
 8015d4a:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8015d4e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015d50:	f04f 0800 	mov.w	r8, #0
 8015d54:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8015d58:	9111      	str	r1, [sp, #68]	@ 0x44
 8015d5a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015d5e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015d62:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8015d66:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8015d6a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8015d6e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015d72:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8015d76:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8015d7a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8015d7e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015d82:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8015d86:	f1be 0f00 	cmp.w	lr, #0
 8015d8a:	d031      	beq.n	8015df0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015d8c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015d8e:	4450      	add	r0, sl
 8015d90:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015d94:	4431      	add	r1, r6
 8015d96:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015d9a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015d9e:	4549      	cmp	r1, r9
 8015da0:	db08      	blt.n	8015db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015da2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015da6:	3001      	adds	r0, #1
 8015da8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015dac:	eba1 0109 	sub.w	r1, r1, r9
 8015db0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015db4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015db8:	f04f 0801 	mov.w	r8, #1
 8015dbc:	e7e3      	b.n	8015d86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015dbe:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015dc0:	4450      	add	r0, sl
 8015dc2:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015dc6:	4431      	add	r1, r6
 8015dc8:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015dcc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015dd0:	4541      	cmp	r1, r8
 8015dd2:	db08      	blt.n	8015de6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015dd4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015dd8:	3001      	adds	r0, #1
 8015dda:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015dde:	eba1 0108 	sub.w	r1, r1, r8
 8015de2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015de6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015dea:	f04f 0901 	mov.w	r9, #1
 8015dee:	e79b      	b.n	8015d28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015df0:	449c      	add	ip, r3
 8015df2:	1aff      	subs	r7, r7, r3
 8015df4:	f1b8 0f00 	cmp.w	r8, #0
 8015df8:	d009      	beq.n	8015e0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015dfa:	9019      	str	r0, [sp, #100]	@ 0x64
 8015dfc:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015e00:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015e04:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015e08:	911d      	str	r1, [sp, #116]	@ 0x74
 8015e0a:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015e0e:	1ad2      	subs	r2, r2, r3
 8015e10:	e68b      	b.n	8015b2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e14:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	f000 80d1 	beq.w	8015fbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015e1c:	ad19      	add	r5, sp, #100	@ 0x64
 8015e1e:	ac39      	add	r4, sp, #228	@ 0xe4
 8015e20:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015e22:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015e26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015e2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8015e2c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015e2e:	6963      	ldr	r3, [r4, #20]
 8015e30:	440b      	add	r3, r1
 8015e32:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015e36:	4408      	add	r0, r1
 8015e38:	b200      	sxth	r0, r0
 8015e3a:	4283      	cmp	r3, r0
 8015e3c:	900d      	str	r0, [sp, #52]	@ 0x34
 8015e3e:	f280 80c1 	bge.w	8015fc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015e42:	428b      	cmp	r3, r1
 8015e44:	da08      	bge.n	8015e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015e46:	2a00      	cmp	r2, #0
 8015e48:	dd06      	ble.n	8015e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015e4a:	1acb      	subs	r3, r1, r3
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	f2c0 80bb 	blt.w	8015fc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	f300 80b9 	bgt.w	8015fca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015e58:	6967      	ldr	r7, [r4, #20]
 8015e5a:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015e5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e60:	443b      	add	r3, r7
 8015e62:	461f      	mov	r7, r3
 8015e64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e66:	1bdf      	subs	r7, r3, r7
 8015e68:	4297      	cmp	r7, r2
 8015e6a:	bfa8      	it	ge
 8015e6c:	4617      	movge	r7, r2
 8015e6e:	2f00      	cmp	r7, #0
 8015e70:	f340 813c 	ble.w	80160ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015e74:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015e76:	6829      	ldr	r1, [r5, #0]
 8015e78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015e7c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015e80:	4411      	add	r1, r2
 8015e82:	6820      	ldr	r0, [r4, #0]
 8015e84:	4299      	cmp	r1, r3
 8015e86:	dd1a      	ble.n	8015ebe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015e88:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015e8c:	4402      	add	r2, r0
 8015e8e:	440b      	add	r3, r1
 8015e90:	b21b      	sxth	r3, r3
 8015e92:	429a      	cmp	r2, r3
 8015e94:	dc13      	bgt.n	8015ebe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015e96:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015e98:	a912      	add	r1, sp, #72	@ 0x48
 8015e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	9206      	str	r2, [sp, #24]
 8015ea2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015ea4:	9500      	str	r5, [sp, #0]
 8015ea6:	9205      	str	r2, [sp, #20]
 8015ea8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015eaa:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015eae:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015eb0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015eb4:	aa49      	add	r2, sp, #292	@ 0x124
 8015eb6:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8015eba:	4623      	mov	r3, r4
 8015ebc:	47c8      	blx	r9
 8015ebe:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015ec2:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015ec6:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8015eca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015ece:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015ed2:	68a1      	ldr	r1, [r4, #8]
 8015ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015ed8:	ed94 6a08 	vldr	s12, [r4, #32]
 8015edc:	edd4 6a07 	vldr	s13, [r4, #28]
 8015ee0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015ee4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015ee8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015eec:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015ef0:	edc4 6a07 	vstr	s13, [r4, #28]
 8015ef4:	441a      	add	r2, r3
 8015ef6:	6963      	ldr	r3, [r4, #20]
 8015ef8:	3301      	adds	r3, #1
 8015efa:	6022      	str	r2, [r4, #0]
 8015efc:	6163      	str	r3, [r4, #20]
 8015efe:	69a3      	ldr	r3, [r4, #24]
 8015f00:	3b01      	subs	r3, #1
 8015f02:	61a3      	str	r3, [r4, #24]
 8015f04:	6923      	ldr	r3, [r4, #16]
 8015f06:	440b      	add	r3, r1
 8015f08:	68e1      	ldr	r1, [r4, #12]
 8015f0a:	428b      	cmp	r3, r1
 8015f0c:	6123      	str	r3, [r4, #16]
 8015f0e:	db15      	blt.n	8015f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015f10:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015f14:	3201      	adds	r2, #1
 8015f16:	1a5b      	subs	r3, r3, r1
 8015f18:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015f1c:	6022      	str	r2, [r4, #0]
 8015f1e:	6123      	str	r3, [r4, #16]
 8015f20:	edc4 6a07 	vstr	s13, [r4, #28]
 8015f24:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8015f28:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015f2c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015f30:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8015f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f38:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015f3c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015f40:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8015f44:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8015f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015f4c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8015f50:	68a9      	ldr	r1, [r5, #8]
 8015f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015f56:	ed95 6a08 	vldr	s12, [r5, #32]
 8015f5a:	edd5 6a07 	vldr	s13, [r5, #28]
 8015f5e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015f62:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015f66:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015f6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015f6e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015f72:	441a      	add	r2, r3
 8015f74:	696b      	ldr	r3, [r5, #20]
 8015f76:	3301      	adds	r3, #1
 8015f78:	602a      	str	r2, [r5, #0]
 8015f7a:	616b      	str	r3, [r5, #20]
 8015f7c:	69ab      	ldr	r3, [r5, #24]
 8015f7e:	3b01      	subs	r3, #1
 8015f80:	61ab      	str	r3, [r5, #24]
 8015f82:	692b      	ldr	r3, [r5, #16]
 8015f84:	440b      	add	r3, r1
 8015f86:	68e9      	ldr	r1, [r5, #12]
 8015f88:	428b      	cmp	r3, r1
 8015f8a:	612b      	str	r3, [r5, #16]
 8015f8c:	db15      	blt.n	8015fba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015f8e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015f92:	3201      	adds	r2, #1
 8015f94:	1a5b      	subs	r3, r3, r1
 8015f96:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015f9a:	602a      	str	r2, [r5, #0]
 8015f9c:	612b      	str	r3, [r5, #16]
 8015f9e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015fa2:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015fa6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015faa:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015fae:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015fb6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015fba:	3f01      	subs	r7, #1
 8015fbc:	e757      	b.n	8015e6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015fbe:	ad39      	add	r5, sp, #228	@ 0xe4
 8015fc0:	ac19      	add	r4, sp, #100	@ 0x64
 8015fc2:	e72d      	b.n	8015e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015fc4:	4613      	mov	r3, r2
 8015fc6:	e744      	b.n	8015e52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015fc8:	4613      	mov	r3, r2
 8015fca:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8015fcc:	469e      	mov	lr, r3
 8015fce:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8015fd2:	461f      	mov	r7, r3
 8015fd4:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8015fd8:	f04f 0900 	mov.w	r9, #0
 8015fdc:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8015fe0:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8015fe4:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8015fe8:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8015fec:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8015ff0:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8015ff2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8015ff6:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8015ffa:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8015ffe:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8016002:	960e      	str	r6, [sp, #56]	@ 0x38
 8016004:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8016008:	2f00      	cmp	r7, #0
 801600a:	d146      	bne.n	801609a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801600c:	449c      	add	ip, r3
 801600e:	1ad7      	subs	r7, r2, r3
 8016010:	f1b9 0f00 	cmp.w	r9, #0
 8016014:	d009      	beq.n	801602a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016016:	9039      	str	r0, [sp, #228]	@ 0xe4
 8016018:	913d      	str	r1, [sp, #244]	@ 0xf4
 801601a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801601e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8016022:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8016026:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801602a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801602c:	f04f 0800 	mov.w	r8, #0
 8016030:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8016034:	910e      	str	r1, [sp, #56]	@ 0x38
 8016036:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801603a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801603e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8016042:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8016046:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801604a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801604e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8016052:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8016056:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801605a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801605e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8016062:	f1be 0f00 	cmp.w	lr, #0
 8016066:	d030      	beq.n	80160ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016068:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801606a:	4450      	add	r0, sl
 801606c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016070:	4431      	add	r1, r6
 8016072:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016076:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801607a:	4549      	cmp	r1, r9
 801607c:	db08      	blt.n	8016090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801607e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016082:	3001      	adds	r0, #1
 8016084:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016088:	eba1 0109 	sub.w	r1, r1, r9
 801608c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016090:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016094:	f04f 0801 	mov.w	r8, #1
 8016098:	e7e3      	b.n	8016062 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801609a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801609c:	4450      	add	r0, sl
 801609e:	ee37 7a24 	vadd.f32	s14, s14, s9
 80160a2:	4431      	add	r1, r6
 80160a4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80160a8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80160ac:	4541      	cmp	r1, r8
 80160ae:	db08      	blt.n	80160c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80160b0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80160b4:	3001      	adds	r0, #1
 80160b6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80160ba:	eba1 0108 	sub.w	r1, r1, r8
 80160be:	ee77 7a86 	vadd.f32	s15, s15, s12
 80160c2:	3f01      	subs	r7, #1
 80160c4:	f04f 0901 	mov.w	r9, #1
 80160c8:	e79e      	b.n	8016008 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80160ca:	449c      	add	ip, r3
 80160cc:	1aff      	subs	r7, r7, r3
 80160ce:	f1b8 0f00 	cmp.w	r8, #0
 80160d2:	d009      	beq.n	80160e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80160d4:	9019      	str	r0, [sp, #100]	@ 0x64
 80160d6:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80160da:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80160de:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80160e2:	911d      	str	r1, [sp, #116]	@ 0x74
 80160e4:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80160e8:	1ad2      	subs	r2, r2, r3
 80160ea:	e6b5      	b.n	8015e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80160ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	b923      	cbnz	r3, 80160fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80160f2:	4b04      	ldr	r3, [pc, #16]	@ (8016104 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80160f4:	6818      	ldr	r0, [r3, #0]
 80160f6:	6803      	ldr	r3, [r0, #0]
 80160f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80160fa:	4798      	blx	r3
 80160fc:	b05b      	add	sp, #364	@ 0x16c
 80160fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016102:	bf00      	nop
 8016104:	24006600 	.word	0x24006600

08016108 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8016108:	b570      	push	{r4, r5, r6, lr}
 801610a:	4604      	mov	r4, r0
 801610c:	2500      	movs	r5, #0
 801610e:	9805      	ldr	r0, [sp, #20]
 8016110:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8016114:	6061      	str	r1, [r4, #4]
 8016116:	8263      	strh	r3, [r4, #18]
 8016118:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801611c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016120:	8025      	strh	r5, [r4, #0]
 8016122:	7221      	strb	r1, [r4, #8]
 8016124:	7266      	strb	r6, [r4, #9]
 8016126:	60e0      	str	r0, [r4, #12]
 8016128:	8222      	strh	r2, [r4, #16]
 801612a:	82a3      	strh	r3, [r4, #20]
 801612c:	82e5      	strh	r5, [r4, #22]
 801612e:	8325      	strh	r5, [r4, #24]
 8016130:	8365      	strh	r5, [r4, #26]
 8016132:	83a5      	strh	r5, [r4, #28]
 8016134:	83e5      	strh	r5, [r4, #30]
 8016136:	8425      	strh	r5, [r4, #32]
 8016138:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 801613c:	b32e      	cbz	r6, 801618a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801613e:	6803      	ldr	r3, [r0, #0]
 8016140:	695b      	ldr	r3, [r3, #20]
 8016142:	4798      	blx	r3
 8016144:	4606      	mov	r6, r0
 8016146:	b300      	cbz	r0, 801618a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016148:	68e0      	ldr	r0, [r4, #12]
 801614a:	4631      	mov	r1, r6
 801614c:	6803      	ldr	r3, [r0, #0]
 801614e:	68db      	ldr	r3, [r3, #12]
 8016150:	4798      	blx	r3
 8016152:	4605      	mov	r5, r0
 8016154:	b1c8      	cbz	r0, 801618a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8016156:	7b43      	ldrb	r3, [r0, #13]
 8016158:	7a82      	ldrb	r2, [r0, #10]
 801615a:	005b      	lsls	r3, r3, #1
 801615c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016160:	4313      	orrs	r3, r2
 8016162:	8423      	strh	r3, [r4, #32]
 8016164:	7a63      	ldrb	r3, [r4, #9]
 8016166:	2b06      	cmp	r3, #6
 8016168:	d10f      	bne.n	801618a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801616a:	68e0      	ldr	r0, [r4, #12]
 801616c:	462a      	mov	r2, r5
 801616e:	4631      	mov	r1, r6
 8016170:	6803      	ldr	r3, [r0, #0]
 8016172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016174:	4798      	blx	r3
 8016176:	7b6b      	ldrb	r3, [r5, #13]
 8016178:	005b      	lsls	r3, r3, #1
 801617a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801617e:	7aab      	ldrb	r3, [r5, #10]
 8016180:	4313      	orrs	r3, r2
 8016182:	4418      	add	r0, r3
 8016184:	8c23      	ldrh	r3, [r4, #32]
 8016186:	4418      	add	r0, r3
 8016188:	8420      	strh	r0, [r4, #32]
 801618a:	4620      	mov	r0, r4
 801618c:	bd70      	pop	{r4, r5, r6, pc}

0801618e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801618e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016192:	2400      	movs	r4, #0
 8016194:	b085      	sub	sp, #20
 8016196:	4681      	mov	r9, r0
 8016198:	4688      	mov	r8, r1
 801619a:	4692      	mov	sl, r2
 801619c:	469b      	mov	fp, r3
 801619e:	4627      	mov	r7, r4
 80161a0:	4625      	mov	r5, r4
 80161a2:	4626      	mov	r6, r4
 80161a4:	4554      	cmp	r4, sl
 80161a6:	da2a      	bge.n	80161fe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80161a8:	2300      	movs	r3, #0
 80161aa:	9303      	str	r3, [sp, #12]
 80161ac:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80161b0:	429d      	cmp	r5, r3
 80161b2:	d004      	beq.n	80161be <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80161b4:	f242 030b 	movw	r3, #8203	@ 0x200b
 80161b8:	429d      	cmp	r5, r3
 80161ba:	bf18      	it	ne
 80161bc:	462f      	movne	r7, r5
 80161be:	ab03      	add	r3, sp, #12
 80161c0:	4642      	mov	r2, r8
 80161c2:	4659      	mov	r1, fp
 80161c4:	4648      	mov	r0, r9
 80161c6:	f003 f9f5 	bl	80195b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80161ca:	4605      	mov	r5, r0
 80161cc:	b1b8      	cbz	r0, 80161fe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80161ce:	280a      	cmp	r0, #10
 80161d0:	d015      	beq.n	80161fe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80161d2:	9a03      	ldr	r2, [sp, #12]
 80161d4:	b18a      	cbz	r2, 80161fa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80161d6:	7b50      	ldrb	r0, [r2, #13]
 80161d8:	4639      	mov	r1, r7
 80161da:	7a93      	ldrb	r3, [r2, #10]
 80161dc:	0040      	lsls	r0, r0, #1
 80161de:	8895      	ldrh	r5, [r2, #4]
 80161e0:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80161e4:	4303      	orrs	r3, r0
 80161e6:	4640      	mov	r0, r8
 80161e8:	9301      	str	r3, [sp, #4]
 80161ea:	f8d8 3000 	ldr.w	r3, [r8]
 80161ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161f0:	4798      	blx	r3
 80161f2:	9b01      	ldr	r3, [sp, #4]
 80161f4:	4418      	add	r0, r3
 80161f6:	4406      	add	r6, r0
 80161f8:	b2b6      	uxth	r6, r6
 80161fa:	3401      	adds	r4, #1
 80161fc:	e7d2      	b.n	80161a4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80161fe:	4630      	mov	r0, r6
 8016200:	b005      	add	sp, #20
 8016202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016206 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8016206:	2a02      	cmp	r2, #2
 8016208:	b530      	push	{r4, r5, lr}
 801620a:	d011      	beq.n	8016230 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801620c:	2a03      	cmp	r2, #3
 801620e:	d01c      	beq.n	801624a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8016210:	2a01      	cmp	r2, #1
 8016212:	d10c      	bne.n	801622e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016214:	888b      	ldrh	r3, [r1, #4]
 8016216:	8801      	ldrh	r1, [r0, #0]
 8016218:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801621c:	1a5b      	subs	r3, r3, r1
 801621e:	8844      	ldrh	r4, [r0, #2]
 8016220:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016224:	1a9b      	subs	r3, r3, r2
 8016226:	8004      	strh	r4, [r0, #0]
 8016228:	8081      	strh	r1, [r0, #4]
 801622a:	8043      	strh	r3, [r0, #2]
 801622c:	80c2      	strh	r2, [r0, #6]
 801622e:	bd30      	pop	{r4, r5, pc}
 8016230:	88cb      	ldrh	r3, [r1, #6]
 8016232:	8842      	ldrh	r2, [r0, #2]
 8016234:	1a9b      	subs	r3, r3, r2
 8016236:	88c2      	ldrh	r2, [r0, #6]
 8016238:	1a9b      	subs	r3, r3, r2
 801623a:	888a      	ldrh	r2, [r1, #4]
 801623c:	8801      	ldrh	r1, [r0, #0]
 801623e:	8043      	strh	r3, [r0, #2]
 8016240:	1a52      	subs	r2, r2, r1
 8016242:	8881      	ldrh	r1, [r0, #4]
 8016244:	1a52      	subs	r2, r2, r1
 8016246:	8002      	strh	r2, [r0, #0]
 8016248:	e7f1      	b.n	801622e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801624a:	88cb      	ldrh	r3, [r1, #6]
 801624c:	8841      	ldrh	r1, [r0, #2]
 801624e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016252:	1a5b      	subs	r3, r3, r1
 8016254:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016258:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801625c:	1a9b      	subs	r3, r3, r2
 801625e:	8045      	strh	r5, [r0, #2]
 8016260:	8082      	strh	r2, [r0, #4]
 8016262:	8003      	strh	r3, [r0, #0]
 8016264:	80c4      	strh	r4, [r0, #6]
 8016266:	e7e2      	b.n	801622e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08016268 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8016268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801626c:	b09f      	sub	sp, #124	@ 0x7c
 801626e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016270:	9312      	str	r3, [sp, #72]	@ 0x48
 8016272:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016274:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8016276:	8812      	ldrh	r2, [r2, #0]
 8016278:	889b      	ldrh	r3, [r3, #4]
 801627a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801627c:	4413      	add	r3, r2
 801627e:	900e      	str	r0, [sp, #56]	@ 0x38
 8016280:	6828      	ldr	r0, [r5, #0]
 8016282:	b21b      	sxth	r3, r3
 8016284:	9117      	str	r1, [sp, #92]	@ 0x5c
 8016286:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801628a:	9311      	str	r3, [sp, #68]	@ 0x44
 801628c:	6803      	ldr	r3, [r0, #0]
 801628e:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8016292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016294:	4798      	blx	r3
 8016296:	682b      	ldr	r3, [r5, #0]
 8016298:	9013      	str	r0, [sp, #76]	@ 0x4c
 801629a:	7b1a      	ldrb	r2, [r3, #12]
 801629c:	7adb      	ldrb	r3, [r3, #11]
 801629e:	9215      	str	r2, [sp, #84]	@ 0x54
 80162a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80162a2:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 80162a6:	2c00      	cmp	r4, #0
 80162a8:	d067      	beq.n	801637a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80162aa:	7c2b      	ldrb	r3, [r5, #16]
 80162ac:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80162ae:	2b06      	cmp	r3, #6
 80162b0:	bf14      	ite	ne
 80162b2:	2301      	movne	r3, #1
 80162b4:	2302      	moveq	r3, #2
 80162b6:	4413      	add	r3, r2
 80162b8:	f04f 0900 	mov.w	r9, #0
 80162bc:	9310      	str	r3, [sp, #64]	@ 0x40
 80162be:	464c      	mov	r4, r9
 80162c0:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80162c4:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80162c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162ca:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80162cc:	4293      	cmp	r3, r2
 80162ce:	f280 808b 	bge.w	80163e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80162d2:	2300      	movs	r3, #0
 80162d4:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80162d8:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 80162dc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80162e0:	429c      	cmp	r4, r3
 80162e2:	d006      	beq.n	80162f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 80162e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162e6:	f242 020b 	movw	r2, #8203	@ 0x200b
 80162ea:	4294      	cmp	r4, r2
 80162ec:	bf18      	it	ne
 80162ee:	4623      	movne	r3, r4
 80162f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80162f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162f4:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80162f6:	682a      	ldr	r2, [r5, #0]
 80162f8:	428b      	cmp	r3, r1
 80162fa:	db40      	blt.n	801637e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80162fc:	6813      	ldr	r3, [r2, #0]
 80162fe:	4610      	mov	r0, r2
 8016300:	695b      	ldr	r3, [r3, #20]
 8016302:	4798      	blx	r3
 8016304:	4604      	mov	r4, r0
 8016306:	6828      	ldr	r0, [r5, #0]
 8016308:	aa1d      	add	r2, sp, #116	@ 0x74
 801630a:	4621      	mov	r1, r4
 801630c:	6803      	ldr	r3, [r0, #0]
 801630e:	689f      	ldr	r7, [r3, #8]
 8016310:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8016314:	47b8      	blx	r7
 8016316:	901c      	str	r0, [sp, #112]	@ 0x70
 8016318:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801631c:	429c      	cmp	r4, r3
 801631e:	f000 80eb 	beq.w	80164f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016322:	f242 030b 	movw	r3, #8203	@ 0x200b
 8016326:	429c      	cmp	r4, r3
 8016328:	f000 80e6 	beq.w	80164f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801632c:	2c00      	cmp	r4, #0
 801632e:	f000 810d 	beq.w	801654c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8016332:	2c0a      	cmp	r4, #10
 8016334:	d05e      	beq.n	80163f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8016336:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016338:	b36a      	cbz	r2, 8016396 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801633a:	8894      	ldrh	r4, [r2, #4]
 801633c:	f1bb 0f00 	cmp.w	fp, #0
 8016340:	d03a      	beq.n	80163b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8016342:	f892 900d 	ldrb.w	r9, [r2, #13]
 8016346:	f1bb 0f01 	cmp.w	fp, #1
 801634a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801634e:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8016352:	f892 900a 	ldrb.w	r9, [r2, #10]
 8016356:	ea49 0903 	orr.w	r9, r9, r3
 801635a:	d133      	bne.n	80163c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 801635c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801635e:	eba6 0609 	sub.w	r6, r6, r9
 8016362:	2b00      	cmp	r3, #0
 8016364:	d14d      	bne.n	8016402 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8016366:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8016368:	eb09 0306 	add.w	r3, r9, r6
 801636c:	4413      	add	r3, r2
 801636e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016370:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016374:	4293      	cmp	r3, r2
 8016376:	da4e      	bge.n	8016416 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8016378:	e036      	b.n	80163e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801637a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801637c:	e79c      	b.n	80162b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801637e:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8016382:	4659      	mov	r1, fp
 8016384:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8016386:	9301      	str	r3, [sp, #4]
 8016388:	ab1d      	add	r3, sp, #116	@ 0x74
 801638a:	9300      	str	r3, [sp, #0]
 801638c:	ab1c      	add	r3, sp, #112	@ 0x70
 801638e:	f003 f95a 	bl	8019646 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8016392:	4604      	mov	r4, r0
 8016394:	e7c0      	b.n	8016318 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8016396:	6828      	ldr	r0, [r5, #0]
 8016398:	6803      	ldr	r3, [r0, #0]
 801639a:	691b      	ldr	r3, [r3, #16]
 801639c:	4798      	blx	r3
 801639e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80163a2:	4298      	cmp	r0, r3
 80163a4:	f000 80a8 	beq.w	80164f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80163a8:	f242 030b 	movw	r3, #8203	@ 0x200b
 80163ac:	4298      	cmp	r0, r3
 80163ae:	f000 80a3 	beq.w	80164f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80163b2:	f1bb 0f00 	cmp.w	fp, #0
 80163b6:	d100      	bne.n	80163ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80163b8:	444e      	add	r6, r9
 80163ba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80163bc:	2a00      	cmp	r2, #0
 80163be:	d1c0      	bne.n	8016342 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80163c0:	4691      	mov	r9, r2
 80163c2:	e099      	b.n	80164f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80163c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	f000 80c2 	beq.w	8016550 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 80163cc:	f1bb 0f00 	cmp.w	fp, #0
 80163d0:	d117      	bne.n	8016402 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80163d2:	6828      	ldr	r0, [r5, #0]
 80163d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80163d6:	6803      	ldr	r3, [r0, #0]
 80163d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163da:	4798      	blx	r3
 80163dc:	4406      	add	r6, r0
 80163de:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80163e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80163e2:	1af3      	subs	r3, r6, r3
 80163e4:	4293      	cmp	r3, r2
 80163e6:	dd16      	ble.n	8016416 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80163e8:	2c00      	cmp	r4, #0
 80163ea:	f000 80af 	beq.w	801654c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80163ee:	2c0a      	cmp	r4, #10
 80163f0:	f040 809d 	bne.w	801652e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 80163f4:	240a      	movs	r4, #10
 80163f6:	fab4 f084 	clz	r0, r4
 80163fa:	0940      	lsrs	r0, r0, #5
 80163fc:	b01f      	add	sp, #124	@ 0x7c
 80163fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016402:	6828      	ldr	r0, [r5, #0]
 8016404:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016406:	6803      	ldr	r3, [r0, #0]
 8016408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801640a:	4798      	blx	r3
 801640c:	f1bb 0f01 	cmp.w	fp, #1
 8016410:	eba6 0600 	sub.w	r6, r6, r0
 8016414:	d0a7      	beq.n	8016366 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8016416:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8016418:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801641a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801641e:	f9b3 8000 	ldrsh.w	r8, [r3]
 8016422:	7b43      	ldrb	r3, [r0, #13]
 8016424:	4431      	add	r1, r6
 8016426:	015b      	lsls	r3, r3, #5
 8016428:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801642c:	7983      	ldrb	r3, [r0, #6]
 801642e:	4313      	orrs	r3, r2
 8016430:	440b      	add	r3, r1
 8016432:	4543      	cmp	r3, r8
 8016434:	db60      	blt.n	80164f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016436:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016438:	4299      	cmp	r1, r3
 801643a:	da5d      	bge.n	80164f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801643c:	6828      	ldr	r0, [r5, #0]
 801643e:	45b0      	cmp	r8, r6
 8016440:	6803      	ldr	r3, [r0, #0]
 8016442:	bfcc      	ite	gt
 8016444:	eba8 0806 	subgt.w	r8, r8, r6
 8016448:	f04f 0800 	movle.w	r8, #0
 801644c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801644e:	bfc8      	it	gt
 8016450:	fa1f f888 	uxthgt.w	r8, r8
 8016454:	4798      	blx	r3
 8016456:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016458:	7b53      	ldrb	r3, [r2, #13]
 801645a:	00d9      	lsls	r1, r3, #3
 801645c:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8016460:	7a11      	ldrb	r1, [r2, #8]
 8016462:	4339      	orrs	r1, r7
 8016464:	065f      	lsls	r7, r3, #25
 8016466:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8016468:	bf48      	it	mi
 801646a:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801646e:	4407      	add	r7, r0
 8016470:	bf48      	it	mi
 8016472:	b209      	sxthmi	r1, r1
 8016474:	1a7f      	subs	r7, r7, r1
 8016476:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8016478:	b2bf      	uxth	r7, r7
 801647a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801647e:	fa0f fa87 	sxth.w	sl, r7
 8016482:	4551      	cmp	r1, sl
 8016484:	dd3c      	ble.n	8016500 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8016486:	011b      	lsls	r3, r3, #4
 8016488:	79d0      	ldrb	r0, [r2, #7]
 801648a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801648e:	4303      	orrs	r3, r0
 8016490:	449a      	add	sl, r3
 8016492:	4551      	cmp	r1, sl
 8016494:	dc30      	bgt.n	80164f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016496:	1bcf      	subs	r7, r1, r7
 8016498:	468a      	mov	sl, r1
 801649a:	b23f      	sxth	r7, r7
 801649c:	9219      	str	r2, [sp, #100]	@ 0x64
 801649e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80164a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80164a2:	6828      	ldr	r0, [r5, #0]
 80164a4:	2a00      	cmp	r2, #0
 80164a6:	d12d      	bne.n	8016504 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 80164a8:	9318      	str	r3, [sp, #96]	@ 0x60
 80164aa:	b2bf      	uxth	r7, r7
 80164ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80164ae:	6819      	ldr	r1, [r3, #0]
 80164b0:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 80164b2:	6801      	ldr	r1, [r0, #0]
 80164b4:	9314      	str	r3, [sp, #80]	@ 0x50
 80164b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80164b8:	4788      	blx	r1
 80164ba:	79a9      	ldrb	r1, [r5, #6]
 80164bc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80164be:	910b      	str	r1, [sp, #44]	@ 0x2c
 80164c0:	7ba9      	ldrb	r1, [r5, #14]
 80164c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80164c4:	910a      	str	r1, [sp, #40]	@ 0x28
 80164c6:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 80164ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80164cc:	68a9      	ldr	r1, [r5, #8]
 80164ce:	9306      	str	r3, [sp, #24]
 80164d0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80164d2:	9205      	str	r2, [sp, #20]
 80164d4:	9304      	str	r3, [sp, #16]
 80164d6:	f8cd a004 	str.w	sl, [sp, #4]
 80164da:	e9cd 8702 	strd	r8, r7, [sp, #8]
 80164de:	44b0      	add	r8, r6
 80164e0:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80164e2:	fa0f f388 	sxth.w	r3, r8
 80164e6:	9300      	str	r3, [sp, #0]
 80164e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80164ea:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80164ee:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80164f0:	681a      	ldr	r2, [r3, #0]
 80164f2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80164f4:	685b      	ldr	r3, [r3, #4]
 80164f6:	47b8      	blx	r7
 80164f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80164fa:	3301      	adds	r3, #1
 80164fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80164fe:	e6e3      	b.n	80162c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8016500:	2700      	movs	r7, #0
 8016502:	e7cb      	b.n	801649c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8016504:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016506:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801650a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801650c:	f8dc 1000 	ldr.w	r1, [ip]
 8016510:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8016514:	79aa      	ldrb	r2, [r5, #6]
 8016516:	9203      	str	r2, [sp, #12]
 8016518:	7baa      	ldrb	r2, [r5, #14]
 801651a:	9202      	str	r2, [sp, #8]
 801651c:	68aa      	ldr	r2, [r5, #8]
 801651e:	e9cd 0200 	strd	r0, r2, [sp]
 8016522:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016524:	4660      	mov	r0, ip
 8016526:	688f      	ldr	r7, [r1, #8]
 8016528:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801652a:	47b8      	blx	r7
 801652c:	e7e4      	b.n	80164f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801652e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8016530:	3501      	adds	r5, #1
 8016532:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8016534:	429d      	cmp	r5, r3
 8016536:	f6bf af5e 	bge.w	80163f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801653a:	4659      	mov	r1, fp
 801653c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801653e:	f7f8 ffb1 	bl	800f4a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016542:	4604      	mov	r4, r0
 8016544:	b110      	cbz	r0, 801654c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8016546:	280a      	cmp	r0, #10
 8016548:	d1f2      	bne.n	8016530 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 801654a:	e753      	b.n	80163f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801654c:	2400      	movs	r4, #0
 801654e:	e752      	b.n	80163f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8016550:	f1bb 0f00 	cmp.w	fp, #0
 8016554:	f43f af43 	beq.w	80163de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8016558:	e75d      	b.n	8016416 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801655a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801655a:	b530      	push	{r4, r5, lr}
 801655c:	8ac4      	ldrh	r4, [r0, #22]
 801655e:	8b45      	ldrh	r5, [r0, #26]
 8016560:	8343      	strh	r3, [r0, #26]
 8016562:	442c      	add	r4, r5
 8016564:	1ae4      	subs	r4, r4, r3
 8016566:	8b83      	ldrh	r3, [r0, #28]
 8016568:	82c4      	strh	r4, [r0, #22]
 801656a:	8b04      	ldrh	r4, [r0, #24]
 801656c:	4422      	add	r2, r4
 801656e:	440c      	add	r4, r1
 8016570:	1a59      	subs	r1, r3, r1
 8016572:	83c2      	strh	r2, [r0, #30]
 8016574:	8304      	strh	r4, [r0, #24]
 8016576:	8381      	strh	r1, [r0, #28]
 8016578:	bd30      	pop	{r4, r5, pc}

0801657a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801657a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801657e:	4604      	mov	r4, r0
 8016580:	8a47      	ldrh	r7, [r0, #18]
 8016582:	68c0      	ldr	r0, [r0, #12]
 8016584:	b085      	sub	sp, #20
 8016586:	6803      	ldr	r3, [r0, #0]
 8016588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801658a:	4798      	blx	r3
 801658c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8016590:	7a63      	ldrb	r3, [r4, #9]
 8016592:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8016596:	3b01      	subs	r3, #1
 8016598:	42b7      	cmp	r7, r6
 801659a:	bfac      	ite	ge
 801659c:	f04f 0900 	movge.w	r9, #0
 80165a0:	f04f 0901 	movlt.w	r9, #1
 80165a4:	2b05      	cmp	r3, #5
 80165a6:	d804      	bhi.n	80165b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80165a8:	e8df f003 	tbb	[pc, r3]
 80165ac:	470f0854 	.word	0x470f0854
 80165b0:	4c4c      	.short	0x4c4c
 80165b2:	2500      	movs	r5, #0
 80165b4:	46a9      	mov	r9, r5
 80165b6:	462e      	mov	r6, r5
 80165b8:	462f      	mov	r7, r5
 80165ba:	e00e      	b.n	80165da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80165bc:	42b7      	cmp	r7, r6
 80165be:	f04f 0500 	mov.w	r5, #0
 80165c2:	bfb4      	ite	lt
 80165c4:	2600      	movlt	r6, #0
 80165c6:	2601      	movge	r6, #1
 80165c8:	e7f6      	b.n	80165b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80165ca:	42b7      	cmp	r7, r6
 80165cc:	464d      	mov	r5, r9
 80165ce:	f04f 0900 	mov.w	r9, #0
 80165d2:	bfb4      	ite	lt
 80165d4:	2600      	movlt	r6, #0
 80165d6:	2601      	movge	r6, #1
 80165d8:	464f      	mov	r7, r9
 80165da:	f04f 0800 	mov.w	r8, #0
 80165de:	f8a4 8016 	strh.w	r8, [r4, #22]
 80165e2:	f8a4 8018 	strh.w	r8, [r4, #24]
 80165e6:	f8cd 8004 	str.w	r8, [sp, #4]
 80165ea:	2300      	movs	r3, #0
 80165ec:	9303      	str	r3, [sp, #12]
 80165ee:	8823      	ldrh	r3, [r4, #0]
 80165f0:	2b20      	cmp	r3, #32
 80165f2:	d033      	beq.n	801665c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 80165f4:	f242 010b 	movw	r1, #8203	@ 0x200b
 80165f8:	1a5a      	subs	r2, r3, r1
 80165fa:	f1d2 0a00 	rsbs	sl, r2, #0
 80165fe:	eb4a 0a02 	adc.w	sl, sl, r2
 8016602:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8016606:	4293      	cmp	r3, r2
 8016608:	d008      	beq.n	801661c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801660a:	428b      	cmp	r3, r1
 801660c:	9a01      	ldr	r2, [sp, #4]
 801660e:	bf0e      	itee	eq
 8016610:	f04f 0a01 	moveq.w	sl, #1
 8016614:	461a      	movne	r2, r3
 8016616:	f04f 0a00 	movne.w	sl, #0
 801661a:	9201      	str	r2, [sp, #4]
 801661c:	ab03      	add	r3, sp, #12
 801661e:	68e2      	ldr	r2, [r4, #12]
 8016620:	7a21      	ldrb	r1, [r4, #8]
 8016622:	6860      	ldr	r0, [r4, #4]
 8016624:	f002 ffc6 	bl	80195b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016628:	8020      	strh	r0, [r4, #0]
 801662a:	b9d8      	cbnz	r0, 8016664 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801662c:	8ba2      	ldrh	r2, [r4, #28]
 801662e:	2300      	movs	r3, #0
 8016630:	4611      	mov	r1, r2
 8016632:	4620      	mov	r0, r4
 8016634:	f7ff ff91 	bl	801655a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016638:	e06e      	b.n	8016718 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801663a:	2500      	movs	r5, #0
 801663c:	2701      	movs	r7, #1
 801663e:	46a9      	mov	r9, r5
 8016640:	462e      	mov	r6, r5
 8016642:	e7ca      	b.n	80165da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016644:	42b7      	cmp	r7, r6
 8016646:	f04f 0500 	mov.w	r5, #0
 801664a:	bfb4      	ite	lt
 801664c:	2700      	movlt	r7, #0
 801664e:	2701      	movge	r7, #1
 8016650:	462e      	mov	r6, r5
 8016652:	e7c2      	b.n	80165da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016654:	2500      	movs	r5, #0
 8016656:	2601      	movs	r6, #1
 8016658:	46a9      	mov	r9, r5
 801665a:	e7ad      	b.n	80165b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801665c:	9301      	str	r3, [sp, #4]
 801665e:	f04f 0a01 	mov.w	sl, #1
 8016662:	e7db      	b.n	801661c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8016664:	8b63      	ldrh	r3, [r4, #26]
 8016666:	280a      	cmp	r0, #10
 8016668:	f103 0301 	add.w	r3, r3, #1
 801666c:	8363      	strh	r3, [r4, #26]
 801666e:	d0dd      	beq.n	801662c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8016670:	9a03      	ldr	r2, [sp, #12]
 8016672:	bb62      	cbnz	r2, 80166ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8016674:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8016678:	4298      	cmp	r0, r3
 801667a:	d003      	beq.n	8016684 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801667c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8016680:	4298      	cmp	r0, r3
 8016682:	d1b2      	bne.n	80165ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016684:	8823      	ldrh	r3, [r4, #0]
 8016686:	8ba1      	ldrh	r1, [r4, #28]
 8016688:	2b20      	cmp	r3, #32
 801668a:	d003      	beq.n	8016694 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801668c:	f242 000b 	movw	r0, #8203	@ 0x200b
 8016690:	4283      	cmp	r3, r0
 8016692:	d131      	bne.n	80166f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8016694:	f1ba 0f00 	cmp.w	sl, #0
 8016698:	bf0a      	itet	eq
 801669a:	4688      	moveq	r8, r1
 801669c:	4650      	movne	r0, sl
 801669e:	2001      	moveq	r0, #1
 80166a0:	440a      	add	r2, r1
 80166a2:	8b23      	ldrh	r3, [r4, #24]
 80166a4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80166a8:	b292      	uxth	r2, r2
 80166aa:	83a2      	strh	r2, [r4, #28]
 80166ac:	4413      	add	r3, r2
 80166ae:	f1b9 0f00 	cmp.w	r9, #0
 80166b2:	d102      	bne.n	80166ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 80166b4:	2d00      	cmp	r5, #0
 80166b6:	d042      	beq.n	801673e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 80166b8:	b300      	cbz	r0, 80166fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 80166ba:	8c21      	ldrh	r1, [r4, #32]
 80166bc:	4419      	add	r1, r3
 80166be:	458c      	cmp	ip, r1
 80166c0:	da37      	bge.n	8016732 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80166c2:	8ae1      	ldrh	r1, [r4, #22]
 80166c4:	2900      	cmp	r1, #0
 80166c6:	d034      	beq.n	8016732 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80166c8:	4563      	cmp	r3, ip
 80166ca:	dd8e      	ble.n	80165ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80166cc:	e01d      	b.n	801670a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 80166ce:	8893      	ldrh	r3, [r2, #4]
 80166d0:	9901      	ldr	r1, [sp, #4]
 80166d2:	8023      	strh	r3, [r4, #0]
 80166d4:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80166d8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80166dc:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 80166e0:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80166e4:	ea4b 0b00 	orr.w	fp, fp, r0
 80166e8:	68e0      	ldr	r0, [r4, #12]
 80166ea:	6803      	ldr	r3, [r0, #0]
 80166ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166ee:	4798      	blx	r3
 80166f0:	eb0b 0200 	add.w	r2, fp, r0
 80166f4:	b292      	uxth	r2, r2
 80166f6:	e7c5      	b.n	8016684 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80166f8:	2000      	movs	r0, #0
 80166fa:	e7d1      	b.n	80166a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80166fc:	4563      	cmp	r3, ip
 80166fe:	f77f af74 	ble.w	80165ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016702:	8ae3      	ldrh	r3, [r4, #22]
 8016704:	2b00      	cmp	r3, #0
 8016706:	f43f af70 	beq.w	80165ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801670a:	2301      	movs	r3, #1
 801670c:	8c22      	ldrh	r2, [r4, #32]
 801670e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8016712:	8be3      	ldrh	r3, [r4, #30]
 8016714:	4413      	add	r3, r2
 8016716:	83e3      	strh	r3, [r4, #30]
 8016718:	68e0      	ldr	r0, [r4, #12]
 801671a:	6803      	ldr	r3, [r0, #0]
 801671c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801671e:	4798      	blx	r3
 8016720:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8016724:	4418      	add	r0, r3
 8016726:	8a63      	ldrh	r3, [r4, #18]
 8016728:	1a18      	subs	r0, r3, r0
 801672a:	8260      	strh	r0, [r4, #18]
 801672c:	b005      	add	sp, #20
 801672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016732:	2300      	movs	r3, #0
 8016734:	4611      	mov	r1, r2
 8016736:	4620      	mov	r0, r4
 8016738:	f7ff ff0f 	bl	801655a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801673c:	e755      	b.n	80165ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801673e:	4563      	cmp	r3, ip
 8016740:	dd14      	ble.n	801676c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8016742:	b117      	cbz	r7, 801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8016744:	2301      	movs	r3, #1
 8016746:	460a      	mov	r2, r1
 8016748:	e772      	b.n	8016630 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801674a:	2e00      	cmp	r6, #0
 801674c:	f43f af4d 	beq.w	80165ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016750:	2800      	cmp	r0, #0
 8016752:	f47f af4a 	bne.w	80165ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016756:	f1ba 0f00 	cmp.w	sl, #0
 801675a:	d002      	beq.n	8016762 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801675c:	2301      	movs	r3, #1
 801675e:	4642      	mov	r2, r8
 8016760:	e767      	b.n	8016632 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8016762:	8ae3      	ldrh	r3, [r4, #22]
 8016764:	2b00      	cmp	r3, #0
 8016766:	f43f af40 	beq.w	80165ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801676a:	e7d5      	b.n	8016718 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801676c:	2800      	cmp	r0, #0
 801676e:	f47f af3c 	bne.w	80165ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016772:	f1ba 0f00 	cmp.w	sl, #0
 8016776:	f43f af38 	beq.w	80165ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801677a:	2301      	movs	r3, #1
 801677c:	4642      	mov	r2, r8
 801677e:	e7da      	b.n	8016736 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08016780 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8016780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016782:	4605      	mov	r5, r0
 8016784:	b08f      	sub	sp, #60	@ 0x3c
 8016786:	4617      	mov	r7, r2
 8016788:	461c      	mov	r4, r3
 801678a:	460e      	mov	r6, r1
 801678c:	b1d1      	cbz	r1, 80167c4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	4620      	mov	r0, r4
 8016792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016794:	4798      	blx	r3
 8016796:	4240      	negs	r0, r0
 8016798:	9603      	str	r6, [sp, #12]
 801679a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801679e:	b200      	sxth	r0, r0
 80167a0:	9700      	str	r7, [sp, #0]
 80167a2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 80167a6:	4629      	mov	r1, r5
 80167a8:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80167ac:	2401      	movs	r4, #1
 80167ae:	a805      	add	r0, sp, #20
 80167b0:	f7ff fcaa 	bl	8016108 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80167b4:	a805      	add	r0, sp, #20
 80167b6:	f7ff fee0 	bl	801657a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80167ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80167be:	b163      	cbz	r3, 80167da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80167c0:	3401      	adds	r4, #1
 80167c2:	e7f7      	b.n	80167b4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80167c4:	2401      	movs	r4, #1
 80167c6:	f002 ffc1 	bl	801974c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80167ca:	280a      	cmp	r0, #10
 80167cc:	4628      	mov	r0, r5
 80167ce:	bf08      	it	eq
 80167d0:	3401      	addeq	r4, #1
 80167d2:	f002 ffbb 	bl	801974c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80167d6:	2800      	cmp	r0, #0
 80167d8:	d1f7      	bne.n	80167ca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80167da:	b2a0      	uxth	r0, r4
 80167dc:	b00f      	add	sp, #60	@ 0x3c
 80167de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080167e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80167e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e4:	b0e3      	sub	sp, #396	@ 0x18c
 80167e6:	461c      	mov	r4, r3
 80167e8:	4683      	mov	fp, r0
 80167ea:	4688      	mov	r8, r1
 80167ec:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	f000 8112 	beq.w	8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80167f4:	6823      	ldr	r3, [r4, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	f000 810e 	beq.w	8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80167fc:	7ba3      	ldrb	r3, [r4, #14]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	f000 810a 	beq.w	8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016804:	ad0a      	add	r5, sp, #40	@ 0x28
 8016806:	6810      	ldr	r0, [r2, #0]
 8016808:	6851      	ldr	r1, [r2, #4]
 801680a:	462b      	mov	r3, r5
 801680c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8016810:	c303      	stmia	r3!, {r0, r1}
 8016812:	2100      	movs	r1, #0
 8016814:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8016818:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801681c:	4628      	mov	r0, r5
 801681e:	910c      	str	r1, [sp, #48]	@ 0x30
 8016820:	a90c      	add	r1, sp, #48	@ 0x30
 8016822:	79a2      	ldrb	r2, [r4, #6]
 8016824:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016828:	f7ff fced 	bl	8016206 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801682c:	a90c      	add	r1, sp, #48	@ 0x30
 801682e:	79a2      	ldrb	r2, [r4, #6]
 8016830:	4608      	mov	r0, r1
 8016832:	f7ff fce8 	bl	8016206 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016836:	a817      	add	r0, sp, #92	@ 0x5c
 8016838:	f002 fb2e 	bl	8018e98 <_ZN8touchgfx12TextProviderC1Ev>
 801683c:	6820      	ldr	r0, [r4, #0]
 801683e:	6803      	ldr	r3, [r0, #0]
 8016840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016842:	4798      	blx	r3
 8016844:	4606      	mov	r6, r0
 8016846:	6820      	ldr	r0, [r4, #0]
 8016848:	6803      	ldr	r3, [r0, #0]
 801684a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801684c:	4798      	blx	r3
 801684e:	4633      	mov	r3, r6
 8016850:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8016852:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8016854:	9000      	str	r0, [sp, #0]
 8016856:	a817      	add	r0, sp, #92	@ 0x5c
 8016858:	f002 fb79 	bl	8018f4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801685c:	6820      	ldr	r0, [r4, #0]
 801685e:	f894 a004 	ldrb.w	sl, [r4, #4]
 8016862:	6803      	ldr	r3, [r0, #0]
 8016864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016866:	4798      	blx	r3
 8016868:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801686c:	6823      	ldr	r3, [r4, #0]
 801686e:	4607      	mov	r7, r0
 8016870:	4406      	add	r6, r0
 8016872:	a830      	add	r0, sp, #192	@ 0xc0
 8016874:	f893 9009 	ldrb.w	r9, [r3, #9]
 8016878:	f002 fb0e 	bl	8018e98 <_ZN8touchgfx12TextProviderC1Ev>
 801687c:	7c23      	ldrb	r3, [r4, #16]
 801687e:	b17b      	cbz	r3, 80168a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8016880:	6820      	ldr	r0, [r4, #0]
 8016882:	6803      	ldr	r3, [r0, #0]
 8016884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016886:	4798      	blx	r3
 8016888:	9009      	str	r0, [sp, #36]	@ 0x24
 801688a:	6820      	ldr	r0, [r4, #0]
 801688c:	6802      	ldr	r2, [r0, #0]
 801688e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8016890:	4790      	blx	r2
 8016892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016894:	9000      	str	r0, [sp, #0]
 8016896:	a830      	add	r0, sp, #192	@ 0xc0
 8016898:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801689a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801689c:	f002 fb57 	bl	8018f4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80168a0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80168a4:	a80e      	add	r0, sp, #56	@ 0x38
 80168a6:	7be2      	ldrb	r2, [r4, #15]
 80168a8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80168ac:	1a8a      	subs	r2, r1, r2
 80168ae:	7c21      	ldrb	r1, [r4, #16]
 80168b0:	9103      	str	r1, [sp, #12]
 80168b2:	b292      	uxth	r2, r2
 80168b4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80168b8:	9102      	str	r1, [sp, #8]
 80168ba:	6821      	ldr	r1, [r4, #0]
 80168bc:	9101      	str	r1, [sp, #4]
 80168be:	7961      	ldrb	r1, [r4, #5]
 80168c0:	9100      	str	r1, [sp, #0]
 80168c2:	a930      	add	r1, sp, #192	@ 0xc0
 80168c4:	f7ff fc20 	bl	8016108 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80168c8:	2e00      	cmp	r6, #0
 80168ca:	dc5b      	bgt.n	8016984 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80168cc:	af17      	add	r7, sp, #92	@ 0x5c
 80168ce:	f04f 0900 	mov.w	r9, #0
 80168d2:	7c23      	ldrb	r3, [r4, #16]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	f000 80b1 	beq.w	8016a3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80168da:	a80e      	add	r0, sp, #56	@ 0x38
 80168dc:	f7ff fe4d 	bl	801657a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80168e0:	f1ba 0f00 	cmp.w	sl, #0
 80168e4:	f000 80a5 	beq.w	8016a32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80168e8:	7c23      	ldrb	r3, [r4, #16]
 80168ea:	2264      	movs	r2, #100	@ 0x64
 80168ec:	4639      	mov	r1, r7
 80168ee:	a849      	add	r0, sp, #292	@ 0x124
 80168f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80168f2:	f013 f82d 	bl	8029950 <memcpy>
 80168f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	f000 80a7 	beq.w	8016a4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80168fe:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8016902:	7922      	ldrb	r2, [r4, #4]
 8016904:	2a01      	cmp	r2, #1
 8016906:	f040 808a 	bne.w	8016a1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801690a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801690e:	1ac0      	subs	r0, r0, r3
 8016910:	2302      	movs	r3, #2
 8016912:	fb90 f0f3 	sdiv	r0, r0, r3
 8016916:	b200      	sxth	r0, r0
 8016918:	7c23      	ldrb	r3, [r4, #16]
 801691a:	2b00      	cmp	r3, #0
 801691c:	f000 808b 	beq.w	8016a36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8016920:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8016924:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8016928:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801692c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016930:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8016934:	2100      	movs	r1, #0
 8016936:	4410      	add	r0, r2
 8016938:	4642      	mov	r2, r8
 801693a:	b200      	sxth	r0, r0
 801693c:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8016940:	9000      	str	r0, [sp, #0]
 8016942:	4658      	mov	r0, fp
 8016944:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8016948:	f7ff fc8e 	bl	8016268 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801694c:	2800      	cmp	r0, #0
 801694e:	d163      	bne.n	8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016950:	b2b2      	uxth	r2, r6
 8016952:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016956:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801695a:	4413      	add	r3, r2
 801695c:	1a8a      	subs	r2, r1, r2
 801695e:	b21b      	sxth	r3, r3
 8016960:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8016964:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8016968:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801696c:	2a00      	cmp	r2, #0
 801696e:	d153      	bne.n	8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016970:	6822      	ldr	r2, [r4, #0]
 8016972:	8869      	ldrh	r1, [r5, #2]
 8016974:	7a12      	ldrb	r2, [r2, #8]
 8016976:	1a9b      	subs	r3, r3, r2
 8016978:	88ea      	ldrh	r2, [r5, #6]
 801697a:	440a      	add	r2, r1
 801697c:	b212      	sxth	r2, r2
 801697e:	4293      	cmp	r3, r2
 8016980:	dda7      	ble.n	80168d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8016982:	e049      	b.n	8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016984:	7c23      	ldrb	r3, [r4, #16]
 8016986:	444f      	add	r7, r9
 8016988:	b1c3      	cbz	r3, 80169bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801698a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801698e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016992:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016996:	443b      	add	r3, r7
 8016998:	4293      	cmp	r3, r2
 801699a:	da97      	bge.n	80168cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801699c:	a80e      	add	r0, sp, #56	@ 0x38
 801699e:	f7ff fdec 	bl	801657a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80169a2:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 80169a6:	3b01      	subs	r3, #1
 80169a8:	b29b      	uxth	r3, r3
 80169aa:	454b      	cmp	r3, r9
 80169ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80169ae:	d021      	beq.n	80169f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80169b0:	7961      	ldrb	r1, [r4, #5]
 80169b2:	a817      	add	r0, sp, #92	@ 0x5c
 80169b4:	f7f8 fd76 	bl	800f4a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80169b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169ba:	e7f4      	b.n	80169a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80169bc:	fa1f f986 	uxth.w	r9, r6
 80169c0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80169c4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80169c8:	443b      	add	r3, r7
 80169ca:	4293      	cmp	r3, r2
 80169cc:	f6bf af7e 	bge.w	80168cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80169d0:	a817      	add	r0, sp, #92	@ 0x5c
 80169d2:	f002 febb 	bl	801974c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80169d6:	b1f8      	cbz	r0, 8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80169d8:	280a      	cmp	r0, #10
 80169da:	d1f1      	bne.n	80169c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80169dc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80169e0:	444b      	add	r3, r9
 80169e2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80169e6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80169ea:	eba3 0309 	sub.w	r3, r3, r9
 80169ee:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80169f2:	e7e5      	b.n	80169c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80169f4:	b2b3      	uxth	r3, r6
 80169f6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80169fa:	441a      	add	r2, r3
 80169fc:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8016a00:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8016a04:	1ad3      	subs	r3, r2, r3
 8016a06:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016a0a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8016a0e:	b11b      	cbz	r3, 8016a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016a10:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d0ba      	beq.n	801698e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8016a18:	b063      	add	sp, #396	@ 0x18c
 8016a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a1e:	2a02      	cmp	r2, #2
 8016a20:	d105      	bne.n	8016a2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8016a22:	7be2      	ldrb	r2, [r4, #15]
 8016a24:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8016a28:	1a80      	subs	r0, r0, r2
 8016a2a:	1ac0      	subs	r0, r0, r3
 8016a2c:	e773      	b.n	8016916 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8016a2e:	2000      	movs	r0, #0
 8016a30:	e772      	b.n	8016918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016a32:	7be0      	ldrb	r0, [r4, #15]
 8016a34:	e770      	b.n	8016918 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016a36:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016a3a:	e773      	b.n	8016924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8016a3c:	f1ba 0f00 	cmp.w	sl, #0
 8016a40:	d0f7      	beq.n	8016a32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016a42:	2264      	movs	r2, #100	@ 0x64
 8016a44:	4639      	mov	r1, r7
 8016a46:	a849      	add	r0, sp, #292	@ 0x124
 8016a48:	f012 ff82 	bl	8029950 <memcpy>
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016a52:	6821      	ldr	r1, [r4, #0]
 8016a54:	a849      	add	r0, sp, #292	@ 0x124
 8016a56:	f7ff fb9a 	bl	801618e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016a5a:	b203      	sxth	r3, r0
 8016a5c:	e751      	b.n	8016902 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08016a5e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016a5e:	2b03      	cmp	r3, #3
 8016a60:	d818      	bhi.n	8016a94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016a62:	e8df f003 	tbb	[pc, r3]
 8016a66:	0602      	.short	0x0602
 8016a68:	130d      	.short	0x130d
 8016a6a:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016a6e:	1850      	adds	r0, r2, r1
 8016a70:	4770      	bx	lr
 8016a72:	8803      	ldrh	r3, [r0, #0]
 8016a74:	8880      	ldrh	r0, [r0, #4]
 8016a76:	4418      	add	r0, r3
 8016a78:	b200      	sxth	r0, r0
 8016a7a:	1a80      	subs	r0, r0, r2
 8016a7c:	3801      	subs	r0, #1
 8016a7e:	4770      	bx	lr
 8016a80:	8803      	ldrh	r3, [r0, #0]
 8016a82:	8880      	ldrh	r0, [r0, #4]
 8016a84:	4418      	add	r0, r3
 8016a86:	b200      	sxth	r0, r0
 8016a88:	1a40      	subs	r0, r0, r1
 8016a8a:	e7f7      	b.n	8016a7c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016a8c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016a90:	4410      	add	r0, r2
 8016a92:	4770      	bx	lr
 8016a94:	2000      	movs	r0, #0
 8016a96:	4770      	bx	lr

08016a98 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016a98:	2b03      	cmp	r3, #3
 8016a9a:	d817      	bhi.n	8016acc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8016a9c:	e8df f003 	tbb	[pc, r3]
 8016aa0:	10090602 	.word	0x10090602
 8016aa4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016aa8:	1850      	adds	r0, r2, r1
 8016aaa:	4770      	bx	lr
 8016aac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016ab0:	e7fa      	b.n	8016aa8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016ab2:	8843      	ldrh	r3, [r0, #2]
 8016ab4:	88c0      	ldrh	r0, [r0, #6]
 8016ab6:	4418      	add	r0, r3
 8016ab8:	b200      	sxth	r0, r0
 8016aba:	1a80      	subs	r0, r0, r2
 8016abc:	3801      	subs	r0, #1
 8016abe:	4770      	bx	lr
 8016ac0:	8843      	ldrh	r3, [r0, #2]
 8016ac2:	88c0      	ldrh	r0, [r0, #6]
 8016ac4:	4418      	add	r0, r3
 8016ac6:	b200      	sxth	r0, r0
 8016ac8:	1a40      	subs	r0, r0, r1
 8016aca:	e7f7      	b.n	8016abc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016acc:	2000      	movs	r0, #0
 8016ace:	4770      	bx	lr

08016ad0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016ad0:	4b01      	ldr	r3, [pc, #4]	@ (8016ad8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	601a      	str	r2, [r3, #0]
 8016ad6:	4770      	bx	lr
 8016ad8:	24006608 	.word	0x24006608

08016adc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016adc:	4603      	mov	r3, r0
 8016ade:	b1c8      	cbz	r0, 8016b14 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016ae0:	0c02      	lsrs	r2, r0, #16
 8016ae2:	0412      	lsls	r2, r2, #16
 8016ae4:	b9a2      	cbnz	r2, 8016b10 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016ae6:	0403      	lsls	r3, r0, #16
 8016ae8:	2010      	movs	r0, #16
 8016aea:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8016aee:	bf04      	itt	eq
 8016af0:	021b      	lsleq	r3, r3, #8
 8016af2:	3008      	addeq	r0, #8
 8016af4:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8016af8:	bf04      	itt	eq
 8016afa:	011b      	lsleq	r3, r3, #4
 8016afc:	3004      	addeq	r0, #4
 8016afe:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8016b02:	bf04      	itt	eq
 8016b04:	009b      	lsleq	r3, r3, #2
 8016b06:	3002      	addeq	r0, #2
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	db04      	blt.n	8016b16 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016b0c:	3001      	adds	r0, #1
 8016b0e:	4770      	bx	lr
 8016b10:	2000      	movs	r0, #0
 8016b12:	e7ea      	b.n	8016aea <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016b14:	2020      	movs	r0, #32
 8016b16:	4770      	bx	lr

08016b18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8016b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b1c:	b087      	sub	sp, #28
 8016b1e:	460d      	mov	r5, r1
 8016b20:	4616      	mov	r6, r2
 8016b22:	4698      	mov	r8, r3
 8016b24:	4601      	mov	r1, r0
 8016b26:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8016b2a:	b120      	cbz	r0, 8016b36 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016b2c:	b11a      	cbz	r2, 8016b36 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016b2e:	2d1f      	cmp	r5, #31
 8016b30:	d801      	bhi.n	8016b36 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016b32:	2b1f      	cmp	r3, #31
 8016b34:	d904      	bls.n	8016b40 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8016b36:	2000      	movs	r0, #0
 8016b38:	6038      	str	r0, [r7, #0]
 8016b3a:	b007      	add	sp, #28
 8016b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b40:	b97d      	cbnz	r5, 8016b62 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8016b42:	b143      	cbz	r3, 8016b56 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8016b44:	4602      	mov	r2, r0
 8016b46:	462b      	mov	r3, r5
 8016b48:	4641      	mov	r1, r8
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	e9cd 4700 	strd	r4, r7, [sp]
 8016b50:	f7ff ffe2 	bl	8016b18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016b54:	e7f1      	b.n	8016b3a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016b56:	f04f 33ff 	mov.w	r3, #4294967295
 8016b5a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016b5e:	603b      	str	r3, [r7, #0]
 8016b60:	e7eb      	b.n	8016b3a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016b62:	fa32 fa05 	lsrs.w	sl, r2, r5
 8016b66:	d106      	bne.n	8016b76 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8016b68:	4346      	muls	r6, r0
 8016b6a:	fbb6 f0f4 	udiv	r0, r6, r4
 8016b6e:	fb04 6610 	mls	r6, r4, r0, r6
 8016b72:	603e      	str	r6, [r7, #0]
 8016b74:	e7e1      	b.n	8016b3a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016b76:	2201      	movs	r2, #1
 8016b78:	fa00 fb05 	lsl.w	fp, r0, r5
 8016b7c:	40aa      	lsls	r2, r5
 8016b7e:	fbbb f9f4 	udiv	r9, fp, r4
 8016b82:	3a01      	subs	r2, #1
 8016b84:	fb0a f309 	mul.w	r3, sl, r9
 8016b88:	fb04 b919 	mls	r9, r4, r9, fp
 8016b8c:	4016      	ands	r6, r2
 8016b8e:	9303      	str	r3, [sp, #12]
 8016b90:	4630      	mov	r0, r6
 8016b92:	f7ff ffa3 	bl	8016adc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016b96:	462b      	mov	r3, r5
 8016b98:	460a      	mov	r2, r1
 8016b9a:	4601      	mov	r1, r0
 8016b9c:	4630      	mov	r0, r6
 8016b9e:	e9cd 4700 	strd	r4, r7, [sp]
 8016ba2:	f7ff ffb9 	bl	8016b18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016ba6:	4606      	mov	r6, r0
 8016ba8:	4648      	mov	r0, r9
 8016baa:	eb05 0108 	add.w	r1, r5, r8
 8016bae:	f7ff ff95 	bl	8016adc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016bb2:	ab05      	add	r3, sp, #20
 8016bb4:	464a      	mov	r2, r9
 8016bb6:	e9cd 4300 	strd	r4, r3, [sp]
 8016bba:	4603      	mov	r3, r0
 8016bbc:	4650      	mov	r0, sl
 8016bbe:	f7ff ffab 	bl	8016b18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016bc2:	6839      	ldr	r1, [r7, #0]
 8016bc4:	9a05      	ldr	r2, [sp, #20]
 8016bc6:	9b03      	ldr	r3, [sp, #12]
 8016bc8:	4411      	add	r1, r2
 8016bca:	fbb1 f2f4 	udiv	r2, r1, r4
 8016bce:	18d3      	adds	r3, r2, r3
 8016bd0:	fb04 1412 	mls	r4, r4, r2, r1
 8016bd4:	441e      	add	r6, r3
 8016bd6:	603c      	str	r4, [r7, #0]
 8016bd8:	4430      	add	r0, r6
 8016bda:	e7ae      	b.n	8016b3a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08016bdc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016be0:	b085      	sub	sp, #20
 8016be2:	f1b0 0900 	subs.w	r9, r0, #0
 8016be6:	461d      	mov	r5, r3
 8016be8:	4617      	mov	r7, r2
 8016bea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8016bec:	bfbb      	ittet	lt
 8016bee:	f1c9 0900 	rsblt	r9, r9, #0
 8016bf2:	f04f 36ff 	movlt.w	r6, #4294967295
 8016bf6:	2601      	movge	r6, #1
 8016bf8:	6823      	ldrlt	r3, [r4, #0]
 8016bfa:	bfbc      	itt	lt
 8016bfc:	425b      	neglt	r3, r3
 8016bfe:	6023      	strlt	r3, [r4, #0]
 8016c00:	2a00      	cmp	r2, #0
 8016c02:	da04      	bge.n	8016c0e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016c04:	6823      	ldr	r3, [r4, #0]
 8016c06:	4257      	negs	r7, r2
 8016c08:	4276      	negs	r6, r6
 8016c0a:	425b      	negs	r3, r3
 8016c0c:	6023      	str	r3, [r4, #0]
 8016c0e:	2d00      	cmp	r5, #0
 8016c10:	4638      	mov	r0, r7
 8016c12:	bfba      	itte	lt
 8016c14:	426d      	neglt	r5, r5
 8016c16:	f04f 38ff 	movlt.w	r8, #4294967295
 8016c1a:	f04f 0801 	movge.w	r8, #1
 8016c1e:	f7ff ff5d 	bl	8016adc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016c22:	ab03      	add	r3, sp, #12
 8016c24:	463a      	mov	r2, r7
 8016c26:	e9cd 5300 	strd	r5, r3, [sp]
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	4648      	mov	r0, r9
 8016c2e:	f7ff ff73 	bl	8016b18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016c32:	6823      	ldr	r3, [r4, #0]
 8016c34:	9a03      	ldr	r2, [sp, #12]
 8016c36:	4546      	cmp	r6, r8
 8016c38:	441a      	add	r2, r3
 8016c3a:	fb92 f3f5 	sdiv	r3, r2, r5
 8016c3e:	4418      	add	r0, r3
 8016c40:	fb05 2313 	mls	r3, r5, r3, r2
 8016c44:	bf18      	it	ne
 8016c46:	4240      	negne	r0, r0
 8016c48:	1c72      	adds	r2, r6, #1
 8016c4a:	6023      	str	r3, [r4, #0]
 8016c4c:	d105      	bne.n	8016c5a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	f1c3 0200 	rsb	r2, r3, #0
 8016c54:	db0b      	blt.n	8016c6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8016c56:	6022      	str	r2, [r4, #0]
 8016c58:	e006      	b.n	8016c68 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016c5a:	2e01      	cmp	r6, #1
 8016c5c:	d104      	bne.n	8016c68 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	da02      	bge.n	8016c68 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016c62:	442b      	add	r3, r5
 8016c64:	3801      	subs	r0, #1
 8016c66:	6023      	str	r3, [r4, #0]
 8016c68:	b005      	add	sp, #20
 8016c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c6e:	3801      	subs	r0, #1
 8016c70:	1b52      	subs	r2, r2, r5
 8016c72:	e7f0      	b.n	8016c56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08016c74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016c74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016c78:	4c1c      	ldr	r4, [pc, #112]	@ (8016cec <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016c7a:	4605      	mov	r5, r0
 8016c7c:	6807      	ldr	r7, [r0, #0]
 8016c7e:	69a3      	ldr	r3, [r4, #24]
 8016c80:	b92b      	cbnz	r3, 8016c8e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016c82:	6840      	ldr	r0, [r0, #4]
 8016c84:	e9c5 7000 	strd	r7, r0, [r5]
 8016c88:	b004      	add	sp, #16
 8016c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c8e:	f04f 0802 	mov.w	r8, #2
 8016c92:	68a2      	ldr	r2, [r4, #8]
 8016c94:	ae04      	add	r6, sp, #16
 8016c96:	6820      	ldr	r0, [r4, #0]
 8016c98:	fb93 f1f8 	sdiv	r1, r3, r8
 8016c9c:	440a      	add	r2, r1
 8016c9e:	69e1      	ldr	r1, [r4, #28]
 8016ca0:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016ca4:	463a      	mov	r2, r7
 8016ca6:	9600      	str	r6, [sp, #0]
 8016ca8:	f7ff ff98 	bl	8016bdc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016cac:	69a3      	ldr	r3, [r4, #24]
 8016cae:	4607      	mov	r7, r0
 8016cb0:	686a      	ldr	r2, [r5, #4]
 8016cb2:	6a21      	ldr	r1, [r4, #32]
 8016cb4:	9600      	str	r6, [sp, #0]
 8016cb6:	6860      	ldr	r0, [r4, #4]
 8016cb8:	f7ff ff90 	bl	8016bdc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016cbc:	69a3      	ldr	r3, [r4, #24]
 8016cbe:	6962      	ldr	r2, [r4, #20]
 8016cc0:	4407      	add	r7, r0
 8016cc2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8016cc4:	9600      	str	r6, [sp, #0]
 8016cc6:	68e0      	ldr	r0, [r4, #12]
 8016cc8:	fb93 f8f8 	sdiv	r8, r3, r8
 8016ccc:	4442      	add	r2, r8
 8016cce:	9203      	str	r2, [sp, #12]
 8016cd0:	682a      	ldr	r2, [r5, #0]
 8016cd2:	f7ff ff83 	bl	8016bdc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016cd6:	4680      	mov	r8, r0
 8016cd8:	9600      	str	r6, [sp, #0]
 8016cda:	69a3      	ldr	r3, [r4, #24]
 8016cdc:	686a      	ldr	r2, [r5, #4]
 8016cde:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8016ce0:	6920      	ldr	r0, [r4, #16]
 8016ce2:	f7ff ff7b 	bl	8016bdc <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016ce6:	4440      	add	r0, r8
 8016ce8:	e7cc      	b.n	8016c84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016cea:	bf00      	nop
 8016cec:	2400660c 	.word	0x2400660c

08016cf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016cf0:	4b07      	ldr	r3, [pc, #28]	@ (8016d10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	2b01      	cmp	r3, #1
 8016cf6:	d109      	bne.n	8016d0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016cf8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016cfc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016d00:	8003      	strh	r3, [r0, #0]
 8016d02:	4b04      	ldr	r3, [pc, #16]	@ (8016d14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016d04:	881b      	ldrh	r3, [r3, #0]
 8016d06:	3b01      	subs	r3, #1
 8016d08:	1a9b      	subs	r3, r3, r2
 8016d0a:	800b      	strh	r3, [r1, #0]
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop
 8016d10:	240065f8 	.word	0x240065f8
 8016d14:	240065f4 	.word	0x240065f4

08016d18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016d18:	4b07      	ldr	r3, [pc, #28]	@ (8016d38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016d1a:	b510      	push	{r4, lr}
 8016d1c:	781b      	ldrb	r3, [r3, #0]
 8016d1e:	2b01      	cmp	r3, #1
 8016d20:	d108      	bne.n	8016d34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016d22:	4b06      	ldr	r3, [pc, #24]	@ (8016d3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016d24:	880c      	ldrh	r4, [r1, #0]
 8016d26:	881b      	ldrh	r3, [r3, #0]
 8016d28:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016d2c:	3b01      	subs	r3, #1
 8016d2e:	1b1b      	subs	r3, r3, r4
 8016d30:	8003      	strh	r3, [r0, #0]
 8016d32:	800a      	strh	r2, [r1, #0]
 8016d34:	bd10      	pop	{r4, pc}
 8016d36:	bf00      	nop
 8016d38:	240065f8 	.word	0x240065f8
 8016d3c:	240065f4 	.word	0x240065f4

08016d40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016d40:	4b0a      	ldr	r3, [pc, #40]	@ (8016d6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016d42:	b510      	push	{r4, lr}
 8016d44:	781b      	ldrb	r3, [r3, #0]
 8016d46:	2b01      	cmp	r3, #1
 8016d48:	d10e      	bne.n	8016d68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016d4a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016d4e:	8843      	ldrh	r3, [r0, #2]
 8016d50:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016d54:	18ca      	adds	r2, r1, r3
 8016d56:	4b06      	ldr	r3, [pc, #24]	@ (8016d70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016d58:	8044      	strh	r4, [r0, #2]
 8016d5a:	881b      	ldrh	r3, [r3, #0]
 8016d5c:	1a9b      	subs	r3, r3, r2
 8016d5e:	8003      	strh	r3, [r0, #0]
 8016d60:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016d64:	8081      	strh	r1, [r0, #4]
 8016d66:	80c3      	strh	r3, [r0, #6]
 8016d68:	bd10      	pop	{r4, pc}
 8016d6a:	bf00      	nop
 8016d6c:	240065f8 	.word	0x240065f8
 8016d70:	240065f4 	.word	0x240065f4

08016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016d74:	4b08      	ldr	r3, [pc, #32]	@ (8016d98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016d76:	781b      	ldrb	r3, [r3, #0]
 8016d78:	2b01      	cmp	r3, #1
 8016d7a:	d10c      	bne.n	8016d96 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016d7c:	8803      	ldrh	r3, [r0, #0]
 8016d7e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016d82:	8842      	ldrh	r2, [r0, #2]
 8016d84:	8002      	strh	r2, [r0, #0]
 8016d86:	185a      	adds	r2, r3, r1
 8016d88:	4b04      	ldr	r3, [pc, #16]	@ (8016d9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016d8a:	881b      	ldrh	r3, [r3, #0]
 8016d8c:	1a9b      	subs	r3, r3, r2
 8016d8e:	8043      	strh	r3, [r0, #2]
 8016d90:	88c3      	ldrh	r3, [r0, #6]
 8016d92:	80c1      	strh	r1, [r0, #6]
 8016d94:	8083      	strh	r3, [r0, #4]
 8016d96:	4770      	bx	lr
 8016d98:	240065f8 	.word	0x240065f8
 8016d9c:	240065f4 	.word	0x240065f4

08016da0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016da0:	4b07      	ldr	r3, [pc, #28]	@ (8016dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016da2:	b510      	push	{r4, lr}
 8016da4:	781b      	ldrb	r3, [r3, #0]
 8016da6:	2b01      	cmp	r3, #1
 8016da8:	d108      	bne.n	8016dbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016daa:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016dae:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016db2:	8003      	strh	r3, [r0, #0]
 8016db4:	8893      	ldrh	r3, [r2, #4]
 8016db6:	3b01      	subs	r3, #1
 8016db8:	1b1b      	subs	r3, r3, r4
 8016dba:	800b      	strh	r3, [r1, #0]
 8016dbc:	bd10      	pop	{r4, pc}
 8016dbe:	bf00      	nop
 8016dc0:	240065f8 	.word	0x240065f8

08016dc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8016dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8016df4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	2b01      	cmp	r3, #1
 8016dca:	d111      	bne.n	8016df0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8016dcc:	680b      	ldr	r3, [r1, #0]
 8016dce:	ed90 7a00 	vldr	s14, [r0]
 8016dd2:	6003      	str	r3, [r0, #0]
 8016dd4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8016dd8:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8016df8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8016ddc:	ee07 3a90 	vmov	s15, r3
 8016de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016de4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016de8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016dec:	edc1 7a00 	vstr	s15, [r1]
 8016df0:	4770      	bx	lr
 8016df2:	bf00      	nop
 8016df4:	240065f8 	.word	0x240065f8
 8016df8:	38d1b717 	.word	0x38d1b717

08016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8016e28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016dfe:	460a      	mov	r2, r1
 8016e00:	b510      	push	{r4, lr}
 8016e02:	781b      	ldrb	r3, [r3, #0]
 8016e04:	2b01      	cmp	r3, #1
 8016e06:	d10d      	bne.n	8016e24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016e08:	8881      	ldrh	r1, [r0, #4]
 8016e0a:	8803      	ldrh	r3, [r0, #0]
 8016e0c:	440b      	add	r3, r1
 8016e0e:	4601      	mov	r1, r0
 8016e10:	3b01      	subs	r3, #1
 8016e12:	f821 3b02 	strh.w	r3, [r1], #2
 8016e16:	f7ff ffc3 	bl	8016da0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016e1a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016e1e:	88c2      	ldrh	r2, [r0, #6]
 8016e20:	80c3      	strh	r3, [r0, #6]
 8016e22:	8082      	strh	r2, [r0, #4]
 8016e24:	bd10      	pop	{r4, pc}
 8016e26:	bf00      	nop
 8016e28:	240065f8 	.word	0x240065f8

08016e2c <_ZN8touchgfx11Application13requestRedrawEv>:
 8016e2c:	4b06      	ldr	r3, [pc, #24]	@ (8016e48 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016e2e:	2100      	movs	r1, #0
 8016e30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e34:	4b05      	ldr	r3, [pc, #20]	@ (8016e4c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016e36:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8016e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e3e:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8016e42:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8016e46:	4770      	bx	lr
 8016e48:	240065f4 	.word	0x240065f4
 8016e4c:	240065f6 	.word	0x240065f6

08016e50 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016e50:	4b03      	ldr	r3, [pc, #12]	@ (8016e60 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016e52:	6818      	ldr	r0, [r3, #0]
 8016e54:	b110      	cbz	r0, 8016e5c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016e56:	6803      	ldr	r3, [r0, #0]
 8016e58:	699b      	ldr	r3, [r3, #24]
 8016e5a:	4718      	bx	r3
 8016e5c:	4770      	bx	lr
 8016e5e:	bf00      	nop
 8016e60:	2400663c 	.word	0x2400663c

08016e64 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016e64:	4770      	bx	lr
	...

08016e68 <_ZN8touchgfx11Application4drawEv>:
 8016e68:	4b09      	ldr	r3, [pc, #36]	@ (8016e90 <_ZN8touchgfx11Application4drawEv+0x28>)
 8016e6a:	b507      	push	{r0, r1, r2, lr}
 8016e6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e70:	2100      	movs	r1, #0
 8016e72:	4b08      	ldr	r3, [pc, #32]	@ (8016e94 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016e74:	9100      	str	r1, [sp, #0]
 8016e76:	4669      	mov	r1, sp
 8016e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e7c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016e80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016e84:	6803      	ldr	r3, [r0, #0]
 8016e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016e88:	4798      	blx	r3
 8016e8a:	b003      	add	sp, #12
 8016e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016e90:	240065f4 	.word	0x240065f4
 8016e94:	240065f6 	.word	0x240065f6

08016e98 <_ZN8touchgfx11Application10invalidateEv>:
 8016e98:	4b09      	ldr	r3, [pc, #36]	@ (8016ec0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016e9a:	b082      	sub	sp, #8
 8016e9c:	2100      	movs	r1, #0
 8016e9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016ea2:	4b08      	ldr	r3, [pc, #32]	@ (8016ec4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016ea4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016ea8:	aa02      	add	r2, sp, #8
 8016eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eae:	9100      	str	r1, [sp, #0]
 8016eb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016eb4:	6803      	ldr	r3, [r0, #0]
 8016eb6:	e912 0006 	ldmdb	r2, {r1, r2}
 8016eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016ebc:	b002      	add	sp, #8
 8016ebe:	4718      	bx	r3
 8016ec0:	240065f4 	.word	0x240065f4
 8016ec4:	240065f6 	.word	0x240065f6

08016ec8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016ec8:	4b03      	ldr	r3, [pc, #12]	@ (8016ed8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016eca:	6818      	ldr	r0, [r3, #0]
 8016ecc:	b110      	cbz	r0, 8016ed4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016ece:	6803      	ldr	r3, [r0, #0]
 8016ed0:	69db      	ldr	r3, [r3, #28]
 8016ed2:	4718      	bx	r3
 8016ed4:	4770      	bx	lr
 8016ed6:	bf00      	nop
 8016ed8:	2400663c 	.word	0x2400663c

08016edc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016edc:	4b03      	ldr	r3, [pc, #12]	@ (8016eec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016ede:	6818      	ldr	r0, [r3, #0]
 8016ee0:	b110      	cbz	r0, 8016ee8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016ee2:	6803      	ldr	r3, [r0, #0]
 8016ee4:	6a1b      	ldr	r3, [r3, #32]
 8016ee6:	4718      	bx	r3
 8016ee8:	4770      	bx	lr
 8016eea:	bf00      	nop
 8016eec:	2400663c 	.word	0x2400663c

08016ef0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8016ef6:	4770      	bx	lr

08016ef8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016ef8:	4b03      	ldr	r3, [pc, #12]	@ (8016f08 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016efa:	6818      	ldr	r0, [r3, #0]
 8016efc:	b110      	cbz	r0, 8016f04 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016efe:	6803      	ldr	r3, [r0, #0]
 8016f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f02:	4718      	bx	r3
 8016f04:	4770      	bx	lr
 8016f06:	bf00      	nop
 8016f08:	2400663c 	.word	0x2400663c

08016f0c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016f0c:	b510      	push	{r4, lr}
 8016f0e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016f12:	888a      	ldrh	r2, [r1, #4]
 8016f14:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016f18:	4422      	add	r2, r4
 8016f1a:	b212      	sxth	r2, r2
 8016f1c:	4293      	cmp	r3, r2
 8016f1e:	da15      	bge.n	8016f4c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016f20:	8882      	ldrh	r2, [r0, #4]
 8016f22:	4413      	add	r3, r2
 8016f24:	b21b      	sxth	r3, r3
 8016f26:	429c      	cmp	r4, r3
 8016f28:	da10      	bge.n	8016f4c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016f2a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016f2e:	88c9      	ldrh	r1, [r1, #6]
 8016f30:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016f34:	4419      	add	r1, r3
 8016f36:	b209      	sxth	r1, r1
 8016f38:	428a      	cmp	r2, r1
 8016f3a:	da07      	bge.n	8016f4c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016f3c:	88c0      	ldrh	r0, [r0, #6]
 8016f3e:	4410      	add	r0, r2
 8016f40:	b200      	sxth	r0, r0
 8016f42:	4283      	cmp	r3, r0
 8016f44:	bfac      	ite	ge
 8016f46:	2000      	movge	r0, #0
 8016f48:	2001      	movlt	r0, #1
 8016f4a:	bd10      	pop	{r4, pc}
 8016f4c:	2000      	movs	r0, #0
 8016f4e:	e7fc      	b.n	8016f4a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016f50 <_ZN8touchgfx4Rect10restrictToEss>:
 8016f50:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	b510      	push	{r4, lr}
 8016f58:	da04      	bge.n	8016f64 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016f5a:	8884      	ldrh	r4, [r0, #4]
 8016f5c:	4423      	add	r3, r4
 8016f5e:	8083      	strh	r3, [r0, #4]
 8016f60:	2300      	movs	r3, #0
 8016f62:	8003      	strh	r3, [r0, #0]
 8016f64:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016f68:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016f6c:	1b09      	subs	r1, r1, r4
 8016f6e:	428b      	cmp	r3, r1
 8016f70:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016f74:	bfc8      	it	gt
 8016f76:	8081      	strhgt	r1, [r0, #4]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	da04      	bge.n	8016f86 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016f7c:	88c1      	ldrh	r1, [r0, #6]
 8016f7e:	440b      	add	r3, r1
 8016f80:	80c3      	strh	r3, [r0, #6]
 8016f82:	2300      	movs	r3, #0
 8016f84:	8043      	strh	r3, [r0, #2]
 8016f86:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016f8a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016f8e:	1a52      	subs	r2, r2, r1
 8016f90:	4293      	cmp	r3, r2
 8016f92:	bfc8      	it	gt
 8016f94:	80c2      	strhgt	r2, [r0, #6]
 8016f96:	bd10      	pop	{r4, pc}

08016f98 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016f98:	4b10      	ldr	r3, [pc, #64]	@ (8016fdc <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016f9a:	b510      	push	{r4, lr}
 8016f9c:	460c      	mov	r4, r1
 8016f9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8016fe0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016fa4:	4620      	mov	r0, r4
 8016fa6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016faa:	f7ff ffd1 	bl	8016f50 <_ZN8touchgfx4Rect10restrictToEss>
 8016fae:	4b0d      	ldr	r3, [pc, #52]	@ (8016fe4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016fb0:	6818      	ldr	r0, [r3, #0]
 8016fb2:	b190      	cbz	r0, 8016fda <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016fb4:	6803      	ldr	r3, [r0, #0]
 8016fb6:	4621      	mov	r1, r4
 8016fb8:	689b      	ldr	r3, [r3, #8]
 8016fba:	4798      	blx	r3
 8016fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8016fe8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016fbe:	6818      	ldr	r0, [r3, #0]
 8016fc0:	b118      	cbz	r0, 8016fca <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016fc2:	6803      	ldr	r3, [r0, #0]
 8016fc4:	4621      	mov	r1, r4
 8016fc6:	689b      	ldr	r3, [r3, #8]
 8016fc8:	4798      	blx	r3
 8016fca:	4b08      	ldr	r3, [pc, #32]	@ (8016fec <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016fcc:	4621      	mov	r1, r4
 8016fce:	6818      	ldr	r0, [r3, #0]
 8016fd0:	6803      	ldr	r3, [r0, #0]
 8016fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fd6:	69db      	ldr	r3, [r3, #28]
 8016fd8:	4718      	bx	r3
 8016fda:	bd10      	pop	{r4, pc}
 8016fdc:	240065f6 	.word	0x240065f6
 8016fe0:	240065f4 	.word	0x240065f4
 8016fe4:	2400663c 	.word	0x2400663c
 8016fe8:	24006638 	.word	0x24006638
 8016fec:	24006600 	.word	0x24006600

08016ff0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ff2:	4606      	mov	r6, r0
 8016ff4:	4608      	mov	r0, r1
 8016ff6:	460f      	mov	r7, r1
 8016ff8:	f7fb fe51 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ffc:	b9e8      	cbnz	r0, 801703a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016ffe:	f9b7 5000 	ldrsh.w	r5, [r7]
 8017002:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017006:	42a5      	cmp	r5, r4
 8017008:	db17      	blt.n	801703a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801700a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801700e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017012:	429a      	cmp	r2, r3
 8017014:	db11      	blt.n	801703a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017016:	88b9      	ldrh	r1, [r7, #4]
 8017018:	440d      	add	r5, r1
 801701a:	88b1      	ldrh	r1, [r6, #4]
 801701c:	440c      	add	r4, r1
 801701e:	b22d      	sxth	r5, r5
 8017020:	b224      	sxth	r4, r4
 8017022:	42a5      	cmp	r5, r4
 8017024:	dc09      	bgt.n	801703a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017026:	88f8      	ldrh	r0, [r7, #6]
 8017028:	4410      	add	r0, r2
 801702a:	88f2      	ldrh	r2, [r6, #6]
 801702c:	4413      	add	r3, r2
 801702e:	b200      	sxth	r0, r0
 8017030:	b21b      	sxth	r3, r3
 8017032:	4298      	cmp	r0, r3
 8017034:	bfcc      	ite	gt
 8017036:	2000      	movgt	r0, #0
 8017038:	2001      	movle	r0, #1
 801703a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801703c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801703e:	4604      	mov	r4, r0
 8017040:	4608      	mov	r0, r1
 8017042:	460d      	mov	r5, r1
 8017044:	f7fb fe2b 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017048:	b978      	cbnz	r0, 801706a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801704a:	4620      	mov	r0, r4
 801704c:	f7fb fe27 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017050:	f9b5 6000 	ldrsh.w	r6, [r5]
 8017054:	b150      	cbz	r0, 801706c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8017056:	8026      	strh	r6, [r4, #0]
 8017058:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801705c:	8063      	strh	r3, [r4, #2]
 801705e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017062:	80a3      	strh	r3, [r4, #4]
 8017064:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017068:	80e3      	strh	r3, [r4, #6]
 801706a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801706c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017070:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017074:	42b1      	cmp	r1, r6
 8017076:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801707a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801707e:	460f      	mov	r7, r1
 8017080:	88ed      	ldrh	r5, [r5, #6]
 8017082:	bfa8      	it	ge
 8017084:	4637      	movge	r7, r6
 8017086:	4293      	cmp	r3, r2
 8017088:	4618      	mov	r0, r3
 801708a:	4466      	add	r6, ip
 801708c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017090:	bfa8      	it	ge
 8017092:	4610      	movge	r0, r2
 8017094:	442a      	add	r2, r5
 8017096:	88e5      	ldrh	r5, [r4, #6]
 8017098:	4461      	add	r1, ip
 801709a:	b236      	sxth	r6, r6
 801709c:	8027      	strh	r7, [r4, #0]
 801709e:	442b      	add	r3, r5
 80170a0:	b209      	sxth	r1, r1
 80170a2:	b212      	sxth	r2, r2
 80170a4:	8060      	strh	r0, [r4, #2]
 80170a6:	b21b      	sxth	r3, r3
 80170a8:	428e      	cmp	r6, r1
 80170aa:	bfac      	ite	ge
 80170ac:	ebc7 0106 	rsbge	r1, r7, r6
 80170b0:	ebc7 0101 	rsblt	r1, r7, r1
 80170b4:	429a      	cmp	r2, r3
 80170b6:	bfac      	ite	ge
 80170b8:	ebc0 0202 	rsbge	r2, r0, r2
 80170bc:	ebc0 0203 	rsblt	r2, r0, r3
 80170c0:	80a1      	strh	r1, [r4, #4]
 80170c2:	80e2      	strh	r2, [r4, #6]
 80170c4:	e7d1      	b.n	801706a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080170c8 <_ZN8touchgfx11Application11getInstanceEv>:
 80170c8:	4b01      	ldr	r3, [pc, #4]	@ (80170d0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80170ca:	6818      	ldr	r0, [r3, #0]
 80170cc:	4770      	bx	lr
 80170ce:	bf00      	nop
 80170d0:	2400664c 	.word	0x2400664c

080170d4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80170d4:	2300      	movs	r3, #0
 80170d6:	b510      	push	{r4, lr}
 80170d8:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80170dc:	4604      	mov	r4, r0
 80170de:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80170e2:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80170e6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80170ea:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d90e      	bls.n	8017110 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80170f2:	18e2      	adds	r2, r4, r3
 80170f4:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80170f8:	b122      	cbz	r2, 8017104 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80170fa:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80170fe:	6803      	ldr	r3, [r0, #0]
 8017100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017102:	4798      	blx	r3
 8017104:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8017108:	3301      	adds	r3, #1
 801710a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801710e:	e7ea      	b.n	80170e6 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8017110:	bd10      	pop	{r4, pc}

08017112 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8017112:	b530      	push	{r4, r5, lr}
 8017114:	2200      	movs	r2, #0
 8017116:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 801711a:	b293      	uxth	r3, r2
 801711c:	429d      	cmp	r5, r3
 801711e:	d90e      	bls.n	801713e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8017120:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8017124:	428b      	cmp	r3, r1
 8017126:	d10b      	bne.n	8017140 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8017128:	1884      	adds	r4, r0, r2
 801712a:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801712e:	b13b      	cbz	r3, 8017140 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8017130:	3b01      	subs	r3, #1
 8017132:	b2db      	uxtb	r3, r3
 8017134:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8017138:	b90b      	cbnz	r3, 801713e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801713a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801713e:	bd30      	pop	{r4, r5, pc}
 8017140:	3201      	adds	r2, #1
 8017142:	e7ea      	b.n	801711a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08017144 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8017144:	2300      	movs	r3, #0
 8017146:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801714a:	30a4      	adds	r0, #164	@ 0xa4
 801714c:	f820 3c24 	strh.w	r3, [r0, #-36]
 8017150:	f802 3b01 	strb.w	r3, [r2], #1
 8017154:	4282      	cmp	r2, r0
 8017156:	d1fb      	bne.n	8017150 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8017158:	4770      	bx	lr
	...

0801715c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801715c:	b570      	push	{r4, r5, r6, lr}
 801715e:	4c0b      	ldr	r4, [pc, #44]	@ (801718c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017160:	4605      	mov	r5, r0
 8017162:	460e      	mov	r6, r1
 8017164:	6820      	ldr	r0, [r4, #0]
 8017166:	b110      	cbz	r0, 801716e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8017168:	6803      	ldr	r3, [r0, #0]
 801716a:	695b      	ldr	r3, [r3, #20]
 801716c:	4798      	blx	r3
 801716e:	1d28      	adds	r0, r5, #4
 8017170:	f7ff ffe8 	bl	8017144 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017174:	6026      	str	r6, [r4, #0]
 8017176:	6833      	ldr	r3, [r6, #0]
 8017178:	4630      	mov	r0, r6
 801717a:	68db      	ldr	r3, [r3, #12]
 801717c:	4798      	blx	r3
 801717e:	682b      	ldr	r3, [r5, #0]
 8017180:	4628      	mov	r0, r5
 8017182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017188:	4718      	bx	r3
 801718a:	bf00      	nop
 801718c:	2400663c 	.word	0x2400663c

08017190 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8017190:	2300      	movs	r3, #0
 8017192:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8017196:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801719a:	461a      	mov	r2, r3
 801719c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801719e:	461c      	mov	r4, r3
 80171a0:	461d      	mov	r5, r3
 80171a2:	459c      	cmp	ip, r3
 80171a4:	dd1a      	ble.n	80171dc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80171a6:	18c6      	adds	r6, r0, r3
 80171a8:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80171ac:	b16e      	cbz	r6, 80171ca <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d008      	beq.n	80171c4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80171b2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80171b6:	fa1f fe82 	uxth.w	lr, r2
 80171ba:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80171be:	1887      	adds	r7, r0, r2
 80171c0:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 80171c4:	3201      	adds	r2, #1
 80171c6:	3301      	adds	r3, #1
 80171c8:	e7eb      	b.n	80171a2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80171ca:	4299      	cmp	r1, r3
 80171cc:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80171d0:	bfa8      	it	ge
 80171d2:	3501      	addge	r5, #1
 80171d4:	429e      	cmp	r6, r3
 80171d6:	bfc8      	it	gt
 80171d8:	3401      	addgt	r4, #1
 80171da:	e7f4      	b.n	80171c6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80171dc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80171e0:	1b49      	subs	r1, r1, r5
 80171e2:	1b1b      	subs	r3, r3, r4
 80171e4:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80171e8:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80171ec:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80171f0:	4293      	cmp	r3, r2
 80171f2:	dd03      	ble.n	80171fc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80171f4:	3b01      	subs	r3, #1
 80171f6:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80171fa:	e7f7      	b.n	80171ec <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80171fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017200 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017200:	b570      	push	{r4, r5, r6, lr}
 8017202:	4d16      	ldr	r5, [pc, #88]	@ (801725c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8017204:	4604      	mov	r4, r0
 8017206:	6828      	ldr	r0, [r5, #0]
 8017208:	b140      	cbz	r0, 801721c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801720a:	7a03      	ldrb	r3, [r0, #8]
 801720c:	b933      	cbnz	r3, 801721c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801720e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8017212:	6803      	ldr	r3, [r0, #0]
 8017214:	689b      	ldr	r3, [r3, #8]
 8017216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801721a:	4718      	bx	r3
 801721c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8017220:	4e0f      	ldr	r6, [pc, #60]	@ (8017260 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8017222:	b973      	cbnz	r3, 8017242 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017224:	b168      	cbz	r0, 8017242 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017226:	7a03      	ldrb	r3, [r0, #8]
 8017228:	b15b      	cbz	r3, 8017242 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801722a:	6830      	ldr	r0, [r6, #0]
 801722c:	b110      	cbz	r0, 8017234 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801722e:	6803      	ldr	r3, [r0, #0]
 8017230:	691b      	ldr	r3, [r3, #16]
 8017232:	4798      	blx	r3
 8017234:	6828      	ldr	r0, [r5, #0]
 8017236:	6803      	ldr	r3, [r0, #0]
 8017238:	68db      	ldr	r3, [r3, #12]
 801723a:	4798      	blx	r3
 801723c:	2301      	movs	r3, #1
 801723e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8017242:	3404      	adds	r4, #4
 8017244:	4620      	mov	r0, r4
 8017246:	f7ff ff45 	bl	80170d4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801724a:	4620      	mov	r0, r4
 801724c:	f7ff ffa0 	bl	8017190 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8017250:	6830      	ldr	r0, [r6, #0]
 8017252:	b110      	cbz	r0, 801725a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8017254:	6803      	ldr	r3, [r0, #0]
 8017256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017258:	e7dd      	b.n	8017216 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801725a:	bd70      	pop	{r4, r5, r6, pc}
 801725c:	24006640 	.word	0x24006640
 8017260:	2400663c 	.word	0x2400663c

08017264 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8017264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017266:	2300      	movs	r3, #0
 8017268:	4604      	mov	r4, r0
 801726a:	460d      	mov	r5, r1
 801726c:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 8017270:	4618      	mov	r0, r3
 8017272:	b29a      	uxth	r2, r3
 8017274:	4291      	cmp	r1, r2
 8017276:	d912      	bls.n	801729e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 8017278:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801727c:	18e6      	adds	r6, r4, r3
 801727e:	42af      	cmp	r7, r5
 8017280:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8017284:	d105      	bne.n	8017292 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8017286:	2aff      	cmp	r2, #255	@ 0xff
 8017288:	d002      	beq.n	8017290 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801728a:	3201      	adds	r2, #1
 801728c:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8017290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017292:	2a00      	cmp	r2, #0
 8017294:	f103 0301 	add.w	r3, r3, #1
 8017298:	bf08      	it	eq
 801729a:	2001      	moveq	r0, #1
 801729c:	e7e9      	b.n	8017272 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801729e:	b120      	cbz	r0, 80172aa <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80172a0:	2920      	cmp	r1, #32
 80172a2:	d102      	bne.n	80172aa <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 80172a4:	4620      	mov	r0, r4
 80172a6:	f7ff ff73 	bl	8017190 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80172aa:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 80172ae:	2b1f      	cmp	r3, #31
 80172b0:	d8ee      	bhi.n	8017290 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80172b2:	18e2      	adds	r2, r4, r3
 80172b4:	2101      	movs	r1, #1
 80172b6:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 80172ba:	185a      	adds	r2, r3, r1
 80172bc:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 80172c0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80172c4:	e7e4      	b.n	8017290 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

080172c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80172c6:	4603      	mov	r3, r0
 80172c8:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80172cc:	2200      	movs	r2, #0
 80172ce:	801a      	strh	r2, [r3, #0]
 80172d0:	3308      	adds	r3, #8
 80172d2:	f823 2c06 	strh.w	r2, [r3, #-6]
 80172d6:	f823 2c04 	strh.w	r2, [r3, #-4]
 80172da:	f823 2c02 	strh.w	r2, [r3, #-2]
 80172de:	428b      	cmp	r3, r1
 80172e0:	d1f5      	bne.n	80172ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80172e2:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80172e6:	4770      	bx	lr

080172e8 <_ZN8touchgfx11ApplicationC1Ev>:
 80172e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ea:	4b1d      	ldr	r3, [pc, #116]	@ (8017360 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80172ec:	4606      	mov	r6, r0
 80172ee:	4604      	mov	r4, r0
 80172f0:	2500      	movs	r5, #0
 80172f2:	f846 3b04 	str.w	r3, [r6], #4
 80172f6:	22a8      	movs	r2, #168	@ 0xa8
 80172f8:	2100      	movs	r1, #0
 80172fa:	4630      	mov	r0, r6
 80172fc:	f012 f9fd 	bl	80296fa <memset>
 8017300:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8017304:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8017308:	4f16      	ldr	r7, [pc, #88]	@ (8017364 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801730a:	f7ff ffdc 	bl	80172c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801730e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8017312:	f7ff ffd8 	bl	80172c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017316:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801731a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801731e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8017322:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8017326:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801732a:	490f      	ldr	r1, [pc, #60]	@ (8017368 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801732c:	480f      	ldr	r0, [pc, #60]	@ (801736c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801732e:	f011 fcd5 	bl	8028cdc <CRC_Lock>
 8017332:	4b0f      	ldr	r3, [pc, #60]	@ (8017370 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8017334:	b158      	cbz	r0, 801734e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8017336:	801d      	strh	r5, [r3, #0]
 8017338:	2300      	movs	r3, #0
 801733a:	4a0e      	ldr	r2, [pc, #56]	@ (8017374 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801733c:	4630      	mov	r0, r6
 801733e:	6013      	str	r3, [r2, #0]
 8017340:	4a0d      	ldr	r2, [pc, #52]	@ (8017378 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8017342:	603b      	str	r3, [r7, #0]
 8017344:	6013      	str	r3, [r2, #0]
 8017346:	f7ff fefd 	bl	8017144 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801734a:	4620      	mov	r0, r4
 801734c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801734e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017352:	2002      	movs	r0, #2
 8017354:	801a      	strh	r2, [r3, #0]
 8017356:	6038      	str	r0, [r7, #0]
 8017358:	f001 fbb2 	bl	8018ac0 <_ZN8touchgfx6Screen4drawEv>
 801735c:	e7ec      	b.n	8017338 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801735e:	bf00      	nop
 8017360:	0802c448 	.word	0x0802c448
 8017364:	2400663c 	.word	0x2400663c
 8017368:	b5e8b5cd 	.word	0xb5e8b5cd
 801736c:	f407a5c2 	.word	0xf407a5c2
 8017370:	24000020 	.word	0x24000020
 8017374:	2400664c 	.word	0x2400664c
 8017378:	24006640 	.word	0x24006640

0801737c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801737c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8017380:	3b01      	subs	r3, #1
 8017382:	b29b      	uxth	r3, r3
 8017384:	428b      	cmp	r3, r1
 8017386:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801738a:	b510      	push	{r4, lr}
 801738c:	d908      	bls.n	80173a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801738e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017392:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017396:	681a      	ldr	r2, [r3, #0]
 8017398:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801739c:	685a      	ldr	r2, [r3, #4]
 801739e:	6062      	str	r2, [r4, #4]
 80173a0:	bd10      	pop	{r4, pc}
	...

080173a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80173a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173a8:	b08f      	sub	sp, #60	@ 0x3c
 80173aa:	4b92      	ldr	r3, [pc, #584]	@ (80175f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 80173ac:	4683      	mov	fp, r0
 80173ae:	ac0a      	add	r4, sp, #40	@ 0x28
 80173b0:	e884 0006 	stmia.w	r4, {r1, r2}
 80173b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80173b8:	4620      	mov	r0, r4
 80173ba:	4b8f      	ldr	r3, [pc, #572]	@ (80175f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 80173bc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80173c0:	f7ff fdc6 	bl	8016f50 <_ZN8touchgfx4Rect10restrictToEss>
 80173c4:	4620      	mov	r0, r4
 80173c6:	f7fb fc6a 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 80173ca:	2800      	cmp	r0, #0
 80173cc:	d170      	bne.n	80174b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80173ce:	4b8b      	ldr	r3, [pc, #556]	@ (80175fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80173d6:	2b02      	cmp	r3, #2
 80173d8:	d06a      	beq.n	80174b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80173da:	9403      	str	r4, [sp, #12]
 80173dc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80173e0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80173e4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80173e8:	9301      	str	r3, [sp, #4]
 80173ea:	35a4      	adds	r5, #164	@ 0xa4
 80173ec:	b15c      	cbz	r4, 8017406 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80173ee:	4629      	mov	r1, r5
 80173f0:	9803      	ldr	r0, [sp, #12]
 80173f2:	f7ff fdfd 	bl	8016ff0 <_ZNK8touchgfx4Rect8includesERKS0_>
 80173f6:	3c01      	subs	r4, #1
 80173f8:	b118      	cbz	r0, 8017402 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80173fa:	b2a1      	uxth	r1, r4
 80173fc:	9801      	ldr	r0, [sp, #4]
 80173fe:	f7ff ffbd 	bl	801737c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017402:	3d08      	subs	r5, #8
 8017404:	e7f2      	b.n	80173ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8017406:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801740a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801740e:	f8cd a010 	str.w	sl, [sp, #16]
 8017412:	9302      	str	r3, [sp, #8]
 8017414:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017418:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801741c:	9306      	str	r3, [sp, #24]
 801741e:	445c      	add	r4, fp
 8017420:	2500      	movs	r5, #0
 8017422:	4626      	mov	r6, r4
 8017424:	f8cd a014 	str.w	sl, [sp, #20]
 8017428:	462f      	mov	r7, r5
 801742a:	9b05      	ldr	r3, [sp, #20]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d073      	beq.n	8017518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 8017430:	9903      	ldr	r1, [sp, #12]
 8017432:	4630      	mov	r0, r6
 8017434:	f7ff fd6a 	bl	8016f0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017438:	b350      	cbz	r0, 8017490 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 801743a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801743e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017442:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8017446:	45e6      	cmp	lr, ip
 8017448:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801744c:	db33      	blt.n	80174b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 801744e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8017452:	88b3      	ldrh	r3, [r6, #4]
 8017454:	4472      	add	r2, lr
 8017456:	4463      	add	r3, ip
 8017458:	b212      	sxth	r2, r2
 801745a:	b21b      	sxth	r3, r3
 801745c:	429a      	cmp	r2, r3
 801745e:	dc2a      	bgt.n	80174b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8017460:	fa1f f289 	uxth.w	r2, r9
 8017464:	88f3      	ldrh	r3, [r6, #6]
 8017466:	45c8      	cmp	r8, r9
 8017468:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801746c:	4413      	add	r3, r2
 801746e:	fa1f fc88 	uxth.w	ip, r8
 8017472:	b29b      	uxth	r3, r3
 8017474:	fa0f fe83 	sxth.w	lr, r3
 8017478:	db0f      	blt.n	801749a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 801747a:	eba3 030c 	sub.w	r3, r3, ip
 801747e:	1ac9      	subs	r1, r1, r3
 8017480:	b209      	sxth	r1, r1
 8017482:	2900      	cmp	r1, #0
 8017484:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017488:	dd12      	ble.n	80174b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801748a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801748e:	4605      	mov	r5, r0
 8017490:	9b05      	ldr	r3, [sp, #20]
 8017492:	3e08      	subs	r6, #8
 8017494:	3b01      	subs	r3, #1
 8017496:	9305      	str	r3, [sp, #20]
 8017498:	e7c7      	b.n	801742a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 801749a:	4461      	add	r1, ip
 801749c:	b209      	sxth	r1, r1
 801749e:	4571      	cmp	r1, lr
 80174a0:	dc38      	bgt.n	8017514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80174a2:	eba2 020c 	sub.w	r2, r2, ip
 80174a6:	b212      	sxth	r2, r2
 80174a8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80174ac:	2a00      	cmp	r2, #0
 80174ae:	dcee      	bgt.n	801748e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80174b0:	b00f      	add	sp, #60	@ 0x3c
 80174b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174b6:	45c8      	cmp	r8, r9
 80174b8:	db2c      	blt.n	8017514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80174ba:	88f3      	ldrh	r3, [r6, #6]
 80174bc:	4499      	add	r9, r3
 80174be:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 80174c2:	4498      	add	r8, r3
 80174c4:	fa0f f989 	sxth.w	r9, r9
 80174c8:	fa0f f888 	sxth.w	r8, r8
 80174cc:	45c1      	cmp	r9, r8
 80174ce:	db21      	blt.n	8017514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80174d0:	fa1f f28c 	uxth.w	r2, ip
 80174d4:	88b3      	ldrh	r3, [r6, #4]
 80174d6:	45e6      	cmp	lr, ip
 80174d8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80174dc:	4413      	add	r3, r2
 80174de:	fa1f f88e 	uxth.w	r8, lr
 80174e2:	b29b      	uxth	r3, r3
 80174e4:	fa0f f983 	sxth.w	r9, r3
 80174e8:	db0a      	blt.n	8017500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 80174ea:	eba3 0308 	sub.w	r3, r3, r8
 80174ee:	1ac9      	subs	r1, r1, r3
 80174f0:	b209      	sxth	r1, r1
 80174f2:	2900      	cmp	r1, #0
 80174f4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80174f8:	ddda      	ble.n	80174b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80174fa:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80174fe:	e7c6      	b.n	801748e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8017500:	4441      	add	r1, r8
 8017502:	b209      	sxth	r1, r1
 8017504:	4549      	cmp	r1, r9
 8017506:	dc05      	bgt.n	8017514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8017508:	eba2 0208 	sub.w	r2, r2, r8
 801750c:	b212      	sxth	r2, r2
 801750e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8017512:	e7cb      	b.n	80174ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8017514:	4607      	mov	r7, r0
 8017516:	e7bb      	b.n	8017490 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8017518:	2d00      	cmp	r5, #0
 801751a:	d181      	bne.n	8017420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 801751c:	2f00      	cmp	r7, #0
 801751e:	f000 81df 	beq.w	80178e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017522:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8017526:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801752a:	b2b3      	uxth	r3, r6
 801752c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8017530:	9305      	str	r3, [sp, #20]
 8017532:	9a05      	ldr	r2, [sp, #20]
 8017534:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8017538:	4413      	add	r3, r2
 801753a:	b2ba      	uxth	r2, r7
 801753c:	4492      	add	sl, r2
 801753e:	b29b      	uxth	r3, r3
 8017540:	fa1f fa8a 	uxth.w	sl, sl
 8017544:	fa0f f883 	sxth.w	r8, r3
 8017548:	fa0f f98a 	sxth.w	r9, sl
 801754c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8017550:	9b04      	ldr	r3, [sp, #16]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d054      	beq.n	8017600 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 8017556:	9903      	ldr	r1, [sp, #12]
 8017558:	4620      	mov	r0, r4
 801755a:	f7ff fcd7 	bl	8016f0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801755e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017562:	b1c0      	cbz	r0, 8017596 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8017564:	f9b4 e000 	ldrsh.w	lr, [r4]
 8017568:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801756c:	4576      	cmp	r6, lr
 801756e:	dc22      	bgt.n	80175b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8017570:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017574:	44f4      	add	ip, lr
 8017576:	fa0f fc8c 	sxth.w	ip, ip
 801757a:	45e0      	cmp	r8, ip
 801757c:	db1b      	blt.n	80175b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 801757e:	428f      	cmp	r7, r1
 8017580:	fa1f fc81 	uxth.w	ip, r1
 8017584:	88e1      	ldrh	r1, [r4, #6]
 8017586:	dc0d      	bgt.n	80175a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8017588:	ebaa 0c0c 	sub.w	ip, sl, ip
 801758c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8017590:	eba1 010c 	sub.w	r1, r1, ip
 8017594:	80e1      	strh	r1, [r4, #6]
 8017596:	4628      	mov	r0, r5
 8017598:	9904      	ldr	r1, [sp, #16]
 801759a:	3c08      	subs	r4, #8
 801759c:	4605      	mov	r5, r0
 801759e:	3901      	subs	r1, #1
 80175a0:	9104      	str	r1, [sp, #16]
 80175a2:	e7d3      	b.n	801754c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 80175a4:	4461      	add	r1, ip
 80175a6:	b209      	sxth	r1, r1
 80175a8:	4549      	cmp	r1, r9
 80175aa:	dcf5      	bgt.n	8017598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80175ac:	eba2 0c0c 	sub.w	ip, r2, ip
 80175b0:	f8a4 c006 	strh.w	ip, [r4, #6]
 80175b4:	e7ef      	b.n	8017596 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80175b6:	428f      	cmp	r7, r1
 80175b8:	dcee      	bgt.n	8017598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80175ba:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80175be:	4461      	add	r1, ip
 80175c0:	b209      	sxth	r1, r1
 80175c2:	4589      	cmp	r9, r1
 80175c4:	dbe8      	blt.n	8017598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80175c6:	4576      	cmp	r6, lr
 80175c8:	fa1f fc8e 	uxth.w	ip, lr
 80175cc:	88a1      	ldrh	r1, [r4, #4]
 80175ce:	dc07      	bgt.n	80175e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 80175d0:	eba3 0c0c 	sub.w	ip, r3, ip
 80175d4:	f8a4 8000 	strh.w	r8, [r4]
 80175d8:	eba1 010c 	sub.w	r1, r1, ip
 80175dc:	80a1      	strh	r1, [r4, #4]
 80175de:	e7da      	b.n	8017596 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80175e0:	4461      	add	r1, ip
 80175e2:	b209      	sxth	r1, r1
 80175e4:	4588      	cmp	r8, r1
 80175e6:	dbd7      	blt.n	8017598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80175e8:	9905      	ldr	r1, [sp, #20]
 80175ea:	eba1 0c0c 	sub.w	ip, r1, ip
 80175ee:	f8a4 c004 	strh.w	ip, [r4, #4]
 80175f2:	e7d0      	b.n	8017596 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 80175f4:	240065f6 	.word	0x240065f6
 80175f8:	240065f4 	.word	0x240065f4
 80175fc:	24006600 	.word	0x24006600
 8017600:	2d00      	cmp	r5, #0
 8017602:	f000 816d 	beq.w	80178e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017606:	9b06      	ldr	r3, [sp, #24]
 8017608:	445b      	add	r3, fp
 801760a:	461c      	mov	r4, r3
 801760c:	9b02      	ldr	r3, [sp, #8]
 801760e:	3301      	adds	r3, #1
 8017610:	f000 8166 	beq.w	80178e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8017614:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8017618:	9803      	ldr	r0, [sp, #12]
 801761a:	4629      	mov	r1, r5
 801761c:	f7ff fce8 	bl	8016ff0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017620:	b120      	cbz	r0, 801762c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 8017622:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017626:	9801      	ldr	r0, [sp, #4]
 8017628:	f7ff fea8 	bl	801737c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801762c:	9903      	ldr	r1, [sp, #12]
 801762e:	4628      	mov	r0, r5
 8017630:	f7ff fc6c 	bl	8016f0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017634:	2800      	cmp	r0, #0
 8017636:	f000 809c 	beq.w	8017772 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 801763a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801763e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017642:	fa1f f189 	uxth.w	r1, r9
 8017646:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801764a:	9309      	str	r3, [sp, #36]	@ 0x24
 801764c:	eb01 0c03 	add.w	ip, r1, r3
 8017650:	b283      	uxth	r3, r0
 8017652:	4548      	cmp	r0, r9
 8017654:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8017658:	fa1f fa8c 	uxth.w	sl, ip
 801765c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8017660:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8017664:	eb03 050c 	add.w	r5, r3, ip
 8017668:	b2ad      	uxth	r5, r5
 801766a:	9505      	str	r5, [sp, #20]
 801766c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8017670:	9504      	str	r5, [sp, #16]
 8017672:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8017676:	f340 8099 	ble.w	80177ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 801767a:	1a5b      	subs	r3, r3, r1
 801767c:	4596      	cmp	lr, r2
 801767e:	fa0f f08a 	sxth.w	r0, sl
 8017682:	b29b      	uxth	r3, r3
 8017684:	b21e      	sxth	r6, r3
 8017686:	dd2e      	ble.n	80176e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8017688:	9f02      	ldr	r7, [sp, #8]
 801768a:	fa1f fe8e 	uxth.w	lr, lr
 801768e:	b292      	uxth	r2, r2
 8017690:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8017694:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017698:	9f04      	ldr	r7, [sp, #16]
 801769a:	ebae 0102 	sub.w	r1, lr, r2
 801769e:	44a6      	add	lr, r4
 80176a0:	1a3f      	subs	r7, r7, r0
 80176a2:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 80176a6:	b289      	uxth	r1, r1
 80176a8:	4402      	add	r2, r0
 80176aa:	fa0f fe8e 	sxth.w	lr, lr
 80176ae:	b20d      	sxth	r5, r1
 80176b0:	b212      	sxth	r2, r2
 80176b2:	436f      	muls	r7, r5
 80176b4:	ebae 0202 	sub.w	r2, lr, r2
 80176b8:	4372      	muls	r2, r6
 80176ba:	4297      	cmp	r7, r2
 80176bc:	db09      	blt.n	80176d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 80176be:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 80176c2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 80176c6:	449c      	add	ip, r3
 80176c8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80176cc:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80176d0:	e684      	b.n	80173dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80176d2:	4421      	add	r1, r4
 80176d4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 80176d8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 80176dc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80176e0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80176e4:	e67a      	b.n	80173dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80176e6:	9f04      	ldr	r7, [sp, #16]
 80176e8:	42b8      	cmp	r0, r7
 80176ea:	da27      	bge.n	801773c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 80176ec:	9902      	ldr	r1, [sp, #8]
 80176ee:	1a3f      	subs	r7, r7, r0
 80176f0:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 80176f4:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80176f8:	eb05 010e 	add.w	r1, r5, lr
 80176fc:	fa1f f881 	uxth.w	r8, r1
 8017700:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8017704:	4411      	add	r1, r2
 8017706:	fa0f f988 	sxth.w	r9, r8
 801770a:	eba2 020e 	sub.w	r2, r2, lr
 801770e:	eba1 0108 	sub.w	r1, r1, r8
 8017712:	4372      	muls	r2, r6
 8017714:	b289      	uxth	r1, r1
 8017716:	fa0f f881 	sxth.w	r8, r1
 801771a:	fb08 f707 	mul.w	r7, r8, r7
 801771e:	42ba      	cmp	r2, r7
 8017720:	dc06      	bgt.n	8017730 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 8017722:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8017726:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801772a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801772e:	e7ca      	b.n	80176c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8017730:	4429      	add	r1, r5
 8017732:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8017736:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801773a:	e64f      	b.n	80173dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801773c:	9805      	ldr	r0, [sp, #20]
 801773e:	2d06      	cmp	r5, #6
 8017740:	ebaa 0000 	sub.w	r0, sl, r0
 8017744:	b280      	uxth	r0, r0
 8017746:	fa0f fe80 	sxth.w	lr, r0
 801774a:	d817      	bhi.n	801777c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 801774c:	9b04      	ldr	r3, [sp, #16]
 801774e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8017752:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8017756:	1c6b      	adds	r3, r5, #1
 8017758:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801775c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8017760:	9b01      	ldr	r3, [sp, #4]
 8017762:	9801      	ldr	r0, [sp, #4]
 8017764:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017768:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801776c:	805a      	strh	r2, [r3, #2]
 801776e:	809e      	strh	r6, [r3, #4]
 8017770:	80d9      	strh	r1, [r3, #6]
 8017772:	9b02      	ldr	r3, [sp, #8]
 8017774:	3c08      	subs	r4, #8
 8017776:	3b01      	subs	r3, #1
 8017778:	9302      	str	r3, [sp, #8]
 801777a:	e747      	b.n	801760c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 801777c:	9a02      	ldr	r2, [sp, #8]
 801777e:	45b6      	cmp	lr, r6
 8017780:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017784:	db0d      	blt.n	80177a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8017786:	449c      	add	ip, r3
 8017788:	445a      	add	r2, fp
 801778a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801778e:	fa1f fc8c 	uxth.w	ip, ip
 8017792:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8017796:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801779a:	448c      	add	ip, r1
 801779c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 80177a0:	e61c      	b.n	80173dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80177a2:	445a      	add	r2, fp
 80177a4:	4484      	add	ip, r0
 80177a6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 80177aa:	e78f      	b.n	80176cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80177ac:	fa1f f18e 	uxth.w	r1, lr
 80177b0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 80177b4:	b293      	uxth	r3, r2
 80177b6:	4596      	cmp	lr, r2
 80177b8:	eb01 0806 	add.w	r8, r1, r6
 80177bc:	9306      	str	r3, [sp, #24]
 80177be:	fa1f f888 	uxth.w	r8, r8
 80177c2:	9f06      	ldr	r7, [sp, #24]
 80177c4:	fa0f f388 	sxth.w	r3, r8
 80177c8:	9307      	str	r3, [sp, #28]
 80177ca:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80177ce:	443b      	add	r3, r7
 80177d0:	b29b      	uxth	r3, r3
 80177d2:	9308      	str	r3, [sp, #32]
 80177d4:	da24      	bge.n	8017820 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 80177d6:	9905      	ldr	r1, [sp, #20]
 80177d8:	eba3 0308 	sub.w	r3, r3, r8
 80177dc:	eba2 020e 	sub.w	r2, r2, lr
 80177e0:	eba9 0000 	sub.w	r0, r9, r0
 80177e4:	ebaa 0401 	sub.w	r4, sl, r1
 80177e8:	b29b      	uxth	r3, r3
 80177ea:	b2a4      	uxth	r4, r4
 80177ec:	b219      	sxth	r1, r3
 80177ee:	b225      	sxth	r5, r4
 80177f0:	4348      	muls	r0, r1
 80177f2:	436a      	muls	r2, r5
 80177f4:	4282      	cmp	r2, r0
 80177f6:	9a02      	ldr	r2, [sp, #8]
 80177f8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80177fc:	445a      	add	r2, fp
 80177fe:	dc06      	bgt.n	801780e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8017800:	9b07      	ldr	r3, [sp, #28]
 8017802:	44a4      	add	ip, r4
 8017804:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8017808:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801780c:	e75e      	b.n	80176cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 801780e:	9904      	ldr	r1, [sp, #16]
 8017810:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8017814:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8017818:	4433      	add	r3, r6
 801781a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801781e:	e5dd      	b.n	80173dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8017820:	9f06      	ldr	r7, [sp, #24]
 8017822:	9b04      	ldr	r3, [sp, #16]
 8017824:	1bc9      	subs	r1, r1, r7
 8017826:	fa0f f78a 	sxth.w	r7, sl
 801782a:	b289      	uxth	r1, r1
 801782c:	429f      	cmp	r7, r3
 801782e:	fa0f fe81 	sxth.w	lr, r1
 8017832:	dd23      	ble.n	801787c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8017834:	9a05      	ldr	r2, [sp, #20]
 8017836:	eba9 0000 	sub.w	r0, r9, r0
 801783a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801783e:	ebaa 0202 	sub.w	r2, sl, r2
 8017842:	9d07      	ldr	r5, [sp, #28]
 8017844:	fb0e f000 	mul.w	r0, lr, r0
 8017848:	b292      	uxth	r2, r2
 801784a:	eba5 0a03 	sub.w	sl, r5, r3
 801784e:	9b02      	ldr	r3, [sp, #8]
 8017850:	b214      	sxth	r4, r2
 8017852:	00db      	lsls	r3, r3, #3
 8017854:	fb04 fa0a 	mul.w	sl, r4, sl
 8017858:	445b      	add	r3, fp
 801785a:	4550      	cmp	r0, sl
 801785c:	db03      	blt.n	8017866 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 801785e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8017862:	4494      	add	ip, r2
 8017864:	e732      	b.n	80176cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8017866:	9a04      	ldr	r2, [sp, #16]
 8017868:	4431      	add	r1, r6
 801786a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801786e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8017872:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8017876:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801787a:	e75c      	b.n	8017736 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 801787c:	9b08      	ldr	r3, [sp, #32]
 801787e:	2d06      	cmp	r5, #6
 8017880:	eba3 0308 	sub.w	r3, r3, r8
 8017884:	b29b      	uxth	r3, r3
 8017886:	b218      	sxth	r0, r3
 8017888:	d813      	bhi.n	80178b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 801788a:	9b07      	ldr	r3, [sp, #28]
 801788c:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8017890:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8017894:	1c6b      	adds	r3, r5, #1
 8017896:	9901      	ldr	r1, [sp, #4]
 8017898:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801789c:	9b01      	ldr	r3, [sp, #4]
 801789e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80178a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80178a6:	805a      	strh	r2, [r3, #2]
 80178a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80178aa:	f8a3 e006 	strh.w	lr, [r3, #6]
 80178ae:	809a      	strh	r2, [r3, #4]
 80178b0:	e75f      	b.n	8017772 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 80178b2:	9c02      	ldr	r4, [sp, #8]
 80178b4:	4570      	cmp	r0, lr
 80178b6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80178ba:	db0d      	blt.n	80178d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 80178bc:	4431      	add	r1, r6
 80178be:	9b06      	ldr	r3, [sp, #24]
 80178c0:	445c      	add	r4, fp
 80178c2:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80178c6:	b289      	uxth	r1, r1
 80178c8:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 80178cc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80178d0:	4419      	add	r1, r3
 80178d2:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 80178d6:	e581      	b.n	80173dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80178d8:	445c      	add	r4, fp
 80178da:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 80178de:	e79b      	b.n	8017818 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 80178e0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80178e4:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80178e8:	1e65      	subs	r5, r4, #1
 80178ea:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80178ee:	b2ad      	uxth	r5, r5
 80178f0:	42b5      	cmp	r5, r6
 80178f2:	d044      	beq.n	801797e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 80178f4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80178f8:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 80178fc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8017900:	4282      	cmp	r2, r0
 8017902:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8017906:	d11f      	bne.n	8017948 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8017908:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801790c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8017910:	459c      	cmp	ip, r3
 8017912:	d119      	bne.n	8017948 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8017914:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8017918:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801791c:	19d8      	adds	r0, r3, r7
 801791e:	b200      	sxth	r0, r0
 8017920:	4288      	cmp	r0, r1
 8017922:	d109      	bne.n	8017938 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8017924:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8017928:	4413      	add	r3, r2
 801792a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801792e:	4629      	mov	r1, r5
 8017930:	9801      	ldr	r0, [sp, #4]
 8017932:	f7ff fd23 	bl	801737c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017936:	e003      	b.n	8017940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8017938:	4411      	add	r1, r2
 801793a:	b209      	sxth	r1, r1
 801793c:	42b9      	cmp	r1, r7
 801793e:	d0f3      	beq.n	8017928 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8017940:	3d01      	subs	r5, #1
 8017942:	3c08      	subs	r4, #8
 8017944:	b2ad      	uxth	r5, r5
 8017946:	e7d3      	b.n	80178f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8017948:	42b9      	cmp	r1, r7
 801794a:	d1f9      	bne.n	8017940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 801794c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8017950:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017954:	4299      	cmp	r1, r3
 8017956:	d1f3      	bne.n	8017940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8017958:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801795c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8017960:	181f      	adds	r7, r3, r0
 8017962:	b23f      	sxth	r7, r7
 8017964:	42ba      	cmp	r2, r7
 8017966:	d105      	bne.n	8017974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 8017968:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801796c:	440b      	add	r3, r1
 801796e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017972:	e7dc      	b.n	801792e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 8017974:	440a      	add	r2, r1
 8017976:	b212      	sxth	r2, r2
 8017978:	4290      	cmp	r0, r2
 801797a:	d1e1      	bne.n	8017940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 801797c:	e7f6      	b.n	801796c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 801797e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8017982:	2e07      	cmp	r6, #7
 8017984:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8017988:	d812      	bhi.n	80179b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 801798a:	1c75      	adds	r5, r6, #1
 801798c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8017990:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8017994:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8017998:	9d01      	ldr	r5, [sp, #4]
 801799a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801799e:	442c      	add	r4, r5
 80179a0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80179a4:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80179a8:	8061      	strh	r1, [r4, #2]
 80179aa:	80a2      	strh	r2, [r4, #4]
 80179ac:	80e3      	strh	r3, [r4, #6]
 80179ae:	e57f      	b.n	80174b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80179b0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80179b4:	3e01      	subs	r6, #1
 80179b6:	445c      	add	r4, fp
 80179b8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80179bc:	f04f 37ff 	mov.w	r7, #4294967295
 80179c0:	2500      	movs	r5, #0
 80179c2:	9305      	str	r3, [sp, #20]
 80179c4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80179c8:	1e72      	subs	r2, r6, #1
 80179ca:	9302      	str	r3, [sp, #8]
 80179cc:	4691      	mov	r9, r2
 80179ce:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80179d2:	9304      	str	r3, [sp, #16]
 80179d4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 80179d8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80179dc:	6818      	ldr	r0, [r3, #0]
 80179de:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80179e2:	9207      	str	r2, [sp, #28]
 80179e4:	bf16      	itet	ne
 80179e6:	9905      	ldrne	r1, [sp, #20]
 80179e8:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80179ec:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80179f0:	9306      	str	r3, [sp, #24]
 80179f2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80179f6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80179fa:	fb18 f801 	smulbb	r8, r8, r1
 80179fe:	6859      	ldr	r1, [r3, #4]
 8017a00:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017a04:	4671      	mov	r1, lr
 8017a06:	a80c      	add	r0, sp, #48	@ 0x30
 8017a08:	f7ff fb18 	bl	801703c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017a0c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8017a10:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8017a14:	f04f 0c08 	mov.w	ip, #8
 8017a18:	9b04      	ldr	r3, [sp, #16]
 8017a1a:	9a02      	ldr	r2, [sp, #8]
 8017a1c:	fb10 f001 	smulbb	r0, r0, r1
 8017a20:	fb02 8803 	mla	r8, r2, r3, r8
 8017a24:	eba0 0108 	sub.w	r1, r0, r8
 8017a28:	fb90 f0fc 	sdiv	r0, r0, ip
 8017a2c:	4288      	cmp	r0, r1
 8017a2e:	dc20      	bgt.n	8017a72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8017a30:	4551      	cmp	r1, sl
 8017a32:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017a36:	da03      	bge.n	8017a40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69c>
 8017a38:	b1d9      	cbz	r1, 8017a72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8017a3a:	468a      	mov	sl, r1
 8017a3c:	464f      	mov	r7, r9
 8017a3e:	4635      	mov	r5, r6
 8017a40:	f109 39ff 	add.w	r9, r9, #4294967295
 8017a44:	f119 0f02 	cmn.w	r9, #2
 8017a48:	d1c6      	bne.n	80179d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8017a4a:	4616      	mov	r6, r2
 8017a4c:	3201      	adds	r2, #1
 8017a4e:	f1a4 0408 	sub.w	r4, r4, #8
 8017a52:	d1b7      	bne.n	80179c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8017a54:	9b01      	ldr	r3, [sp, #4]
 8017a56:	b2ac      	uxth	r4, r5
 8017a58:	00ed      	lsls	r5, r5, #3
 8017a5a:	1958      	adds	r0, r3, r5
 8017a5c:	1c7b      	adds	r3, r7, #1
 8017a5e:	d10b      	bne.n	8017a78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d4>
 8017a60:	4601      	mov	r1, r0
 8017a62:	9803      	ldr	r0, [sp, #12]
 8017a64:	f7ff faea 	bl	801703c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017a68:	4621      	mov	r1, r4
 8017a6a:	9801      	ldr	r0, [sp, #4]
 8017a6c:	f7ff fc86 	bl	801737c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017a70:	e4b4      	b.n	80173dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8017a72:	464f      	mov	r7, r9
 8017a74:	4635      	mov	r5, r6
 8017a76:	e7ed      	b.n	8017a54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b0>
 8017a78:	9b01      	ldr	r3, [sp, #4]
 8017a7a:	00ff      	lsls	r7, r7, #3
 8017a7c:	445d      	add	r5, fp
 8017a7e:	19d9      	adds	r1, r3, r7
 8017a80:	445f      	add	r7, fp
 8017a82:	f7ff fadb 	bl	801703c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017a86:	9b03      	ldr	r3, [sp, #12]
 8017a88:	cb03      	ldmia	r3!, {r0, r1}
 8017a8a:	9b03      	ldr	r3, [sp, #12]
 8017a8c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8017a90:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8017a94:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8017a98:	6869      	ldr	r1, [r5, #4]
 8017a9a:	c303      	stmia	r3!, {r0, r1}
 8017a9c:	e7e4      	b.n	8017a68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8017a9e:	bf00      	nop

08017aa0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8017aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8017aa8:	b0a1      	sub	sp, #132	@ 0x84
 8017aaa:	4604      	mov	r4, r0
 8017aac:	4630      	mov	r0, r6
 8017aae:	f7fb f8f6 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ab2:	4605      	mov	r5, r0
 8017ab4:	b948      	cbnz	r0, 8017aca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8017ab6:	6823      	ldr	r3, [r4, #0]
 8017ab8:	4620      	mov	r0, r4
 8017aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017abc:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017ac0:	4798      	blx	r3
 8017ac2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8017ac6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8017aca:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d149      	bne.n	8017b66 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 8017ad2:	4bb2      	ldr	r3, [pc, #712]	@ (8017d9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 8017ada:	1ebb      	subs	r3, r7, #2
 8017adc:	425f      	negs	r7, r3
 8017ade:	415f      	adcs	r7, r3
 8017ae0:	4baf      	ldr	r3, [pc, #700]	@ (8017da0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d040      	beq.n	8017b6a <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8017ae8:	4dae      	ldr	r5, [pc, #696]	@ (8017da4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 8017aea:	4628      	mov	r0, r5
 8017aec:	f7fb f8d7 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017af0:	4606      	mov	r6, r0
 8017af2:	2800      	cmp	r0, #0
 8017af4:	d139      	bne.n	8017b6a <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8017af6:	4628      	mov	r0, r5
 8017af8:	f7ff f922 	bl	8016d40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017afc:	6823      	ldr	r3, [r4, #0]
 8017afe:	6829      	ldr	r1, [r5, #0]
 8017b00:	4620      	mov	r0, r4
 8017b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017b04:	686a      	ldr	r2, [r5, #4]
 8017b06:	4798      	blx	r3
 8017b08:	802e      	strh	r6, [r5, #0]
 8017b0a:	806e      	strh	r6, [r5, #2]
 8017b0c:	80ae      	strh	r6, [r5, #4]
 8017b0e:	80ee      	strh	r6, [r5, #6]
 8017b10:	af0f      	add	r7, sp, #60	@ 0x3c
 8017b12:	4ea5      	ldr	r6, [pc, #660]	@ (8017da8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 8017b14:	4638      	mov	r0, r7
 8017b16:	f7ff fbd6 	bl	80172c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017b1a:	8835      	ldrh	r5, [r6, #0]
 8017b1c:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 8017b20:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8017b24:	462b      	mov	r3, r5
 8017b26:	4563      	cmp	r3, ip
 8017b28:	d224      	bcs.n	8017b74 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8017b2a:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8017b2e:	2907      	cmp	r1, #7
 8017b30:	d816      	bhi.n	8017b60 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8017b32:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8017b36:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8017b3a:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8017b3e:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 8017b42:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 8017b46:	1c4a      	adds	r2, r1, #1
 8017b48:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 8017b4c:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 8017b50:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 8017b54:	f8a2 a002 	strh.w	sl, [r2, #2]
 8017b58:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017b5c:	f8a2 e006 	strh.w	lr, [r2, #6]
 8017b60:	3301      	adds	r3, #1
 8017b62:	b29b      	uxth	r3, r3
 8017b64:	e7df      	b.n	8017b26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8017b66:	2701      	movs	r7, #1
 8017b68:	e7ba      	b.n	8017ae0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 8017b6a:	2f00      	cmp	r7, #0
 8017b6c:	d1d0      	bne.n	8017b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 8017b6e:	b021      	add	sp, #132	@ 0x84
 8017b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b74:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8017b78:	42ab      	cmp	r3, r5
 8017b7a:	d90c      	bls.n	8017b96 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 8017b7c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8017b80:	6822      	ldr	r2, [r4, #0]
 8017b82:	3501      	adds	r5, #1
 8017b84:	4620      	mov	r0, r4
 8017b86:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8017b88:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8017b8c:	b2ad      	uxth	r5, r5
 8017b8e:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8017b92:	47b8      	blx	r7
 8017b94:	e7ee      	b.n	8017b74 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8017b96:	4d81      	ldr	r5, [pc, #516]	@ (8017d9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8017b98:	6828      	ldr	r0, [r5, #0]
 8017b9a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8017b9e:	2b01      	cmp	r3, #1
 8017ba0:	f040 813d 	bne.w	8017e1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 8017ba4:	4a81      	ldr	r2, [pc, #516]	@ (8017dac <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 8017ba6:	8833      	ldrh	r3, [r6, #0]
 8017ba8:	7812      	ldrb	r2, [r2, #0]
 8017baa:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 8017bae:	2a01      	cmp	r2, #1
 8017bb0:	d014      	beq.n	8017bdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8017bb2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8017bb6:	f04f 0900 	mov.w	r9, #0
 8017bba:	32ae      	adds	r2, #174	@ 0xae
 8017bbc:	4283      	cmp	r3, r0
 8017bbe:	f102 0208 	add.w	r2, r2, #8
 8017bc2:	f280 8083 	bge.w	8017ccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8017bc6:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 8017bca:	3301      	adds	r3, #1
 8017bcc:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 8017bd0:	4439      	add	r1, r7
 8017bd2:	b209      	sxth	r1, r1
 8017bd4:	4589      	cmp	r9, r1
 8017bd6:	bfb8      	it	lt
 8017bd8:	4689      	movlt	r9, r1
 8017bda:	e7ef      	b.n	8017bbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 8017bdc:	4f74      	ldr	r7, [pc, #464]	@ (8017db0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 8017bde:	883a      	ldrh	r2, [r7, #0]
 8017be0:	4693      	mov	fp, r2
 8017be2:	4283      	cmp	r3, r0
 8017be4:	da08      	bge.n	8017bf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 8017be6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8017bea:	3301      	adds	r3, #1
 8017bec:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 8017bf0:	458b      	cmp	fp, r1
 8017bf2:	bfa8      	it	ge
 8017bf4:	468b      	movge	fp, r1
 8017bf6:	e7f4      	b.n	8017be2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 8017bf8:	2a0f      	cmp	r2, #15
 8017bfa:	f04f 0300 	mov.w	r3, #0
 8017bfe:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 8017db4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 8017c02:	bf8c      	ite	hi
 8017c04:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 8017c08:	f04f 0801 	movls.w	r8, #1
 8017c0c:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8017c10:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017c14:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8017c18:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017c1c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8017c20:	6828      	ldr	r0, [r5, #0]
 8017c22:	455b      	cmp	r3, fp
 8017c24:	f340 80c8 	ble.w	8017db8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017c28:	6803      	ldr	r3, [r0, #0]
 8017c2a:	f8b7 a000 	ldrh.w	sl, [r7]
 8017c2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017c32:	4798      	blx	r3
 8017c34:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8017c38:	ebaa 0000 	sub.w	r0, sl, r0
 8017c3c:	682b      	ldr	r3, [r5, #0]
 8017c3e:	ebac 0e08 	sub.w	lr, ip, r8
 8017c42:	b280      	uxth	r0, r0
 8017c44:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8017c48:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8017c4c:	4570      	cmp	r0, lr
 8017c4e:	dd05      	ble.n	8017c5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8017c50:	4558      	cmp	r0, fp
 8017c52:	dd03      	ble.n	8017c5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8017c54:	b901      	cbnz	r1, 8017c58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8017c56:	b392      	cbz	r2, 8017cbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 8017c58:	4658      	mov	r0, fp
 8017c5a:	e006      	b.n	8017c6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 8017c5c:	2900      	cmp	r1, #0
 8017c5e:	d1fb      	bne.n	8017c58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8017c60:	2a00      	cmp	r2, #0
 8017c62:	d1f9      	bne.n	8017c58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8017c64:	4558      	cmp	r0, fp
 8017c66:	bfb8      	it	lt
 8017c68:	4658      	movlt	r0, fp
 8017c6a:	f9b9 3000 	ldrsh.w	r3, [r9]
 8017c6e:	2200      	movs	r2, #0
 8017c70:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8017c74:	ebac 0000 	sub.w	r0, ip, r0
 8017c78:	f8b6 a000 	ldrh.w	sl, [r6]
 8017c7c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8017c80:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8017c84:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017c88:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017c8c:	4553      	cmp	r3, sl
 8017c8e:	ddc5      	ble.n	8017c1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8017c90:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8017c94:	ab0d      	add	r3, sp, #52	@ 0x34
 8017c96:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017c9a:	6851      	ldr	r1, [r2, #4]
 8017c9c:	c303      	stmia	r3!, {r0, r1}
 8017c9e:	a80d      	add	r0, sp, #52	@ 0x34
 8017ca0:	a90b      	add	r1, sp, #44	@ 0x2c
 8017ca2:	f7fa ffb9 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8017ca6:	a80d      	add	r0, sp, #52	@ 0x34
 8017ca8:	f7fa fff9 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017cac:	b920      	cbnz	r0, 8017cb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 8017cae:	6823      	ldr	r3, [r4, #0]
 8017cb0:	a90d      	add	r1, sp, #52	@ 0x34
 8017cb2:	4620      	mov	r0, r4
 8017cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017cb6:	4798      	blx	r3
 8017cb8:	f10a 0a01 	add.w	sl, sl, #1
 8017cbc:	e7e4      	b.n	8017c88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 8017cbe:	681a      	ldr	r2, [r3, #0]
 8017cc0:	2101      	movs	r1, #1
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8017cc8:	4790      	blx	r2
 8017cca:	e7a7      	b.n	8017c1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8017ccc:	4b39      	ldr	r3, [pc, #228]	@ (8017db4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 8017cce:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8017db0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 8017cd2:	881f      	ldrh	r7, [r3, #0]
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	2f0f      	cmp	r7, #15
 8017cd8:	bf8c      	ite	hi
 8017cda:	08ff      	lsrhi	r7, r7, #3
 8017cdc:	2701      	movls	r7, #1
 8017cde:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 8017ce2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8017ce6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8017cea:	6828      	ldr	r0, [r5, #0]
 8017cec:	4413      	add	r3, r2
 8017cee:	b21b      	sxth	r3, r3
 8017cf0:	454b      	cmp	r3, r9
 8017cf2:	da61      	bge.n	8017db8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017cf4:	6803      	ldr	r3, [r0, #0]
 8017cf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017cfa:	4798      	blx	r3
 8017cfc:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 8017d00:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8017d04:	682a      	ldr	r2, [r5, #0]
 8017d06:	4473      	add	r3, lr
 8017d08:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 8017d0c:	b21b      	sxth	r3, r3
 8017d0e:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 8017d12:	eb03 0e07 	add.w	lr, r3, r7
 8017d16:	4570      	cmp	r0, lr
 8017d18:	da0d      	bge.n	8017d36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8017d1a:	4548      	cmp	r0, r9
 8017d1c:	da0b      	bge.n	8017d36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 8017d1e:	f1bc 0f00 	cmp.w	ip, #0
 8017d22:	d138      	bne.n	8017d96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8017d24:	2900      	cmp	r1, #0
 8017d26:	d136      	bne.n	8017d96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8017d28:	6813      	ldr	r3, [r2, #0]
 8017d2a:	2101      	movs	r1, #1
 8017d2c:	4610      	mov	r0, r2
 8017d2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017d32:	4798      	blx	r3
 8017d34:	e7d5      	b.n	8017ce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8017d36:	f1bc 0f00 	cmp.w	ip, #0
 8017d3a:	d12c      	bne.n	8017d96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8017d3c:	bb59      	cbnz	r1, 8017d96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8017d3e:	4548      	cmp	r0, r9
 8017d40:	bfa8      	it	ge
 8017d42:	4648      	movge	r0, r9
 8017d44:	f9b8 2000 	ldrsh.w	r2, [r8]
 8017d48:	2100      	movs	r1, #0
 8017d4a:	1ac0      	subs	r0, r0, r3
 8017d4c:	f8b6 a000 	ldrh.w	sl, [r6]
 8017d50:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8017d54:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017d58:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8017d5c:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8017d60:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017d64:	4553      	cmp	r3, sl
 8017d66:	ddbc      	ble.n	8017ce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8017d68:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8017d6c:	ab0d      	add	r3, sp, #52	@ 0x34
 8017d6e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017d72:	6851      	ldr	r1, [r2, #4]
 8017d74:	c303      	stmia	r3!, {r0, r1}
 8017d76:	a80d      	add	r0, sp, #52	@ 0x34
 8017d78:	a90b      	add	r1, sp, #44	@ 0x2c
 8017d7a:	f7fa ff4d 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8017d7e:	a80d      	add	r0, sp, #52	@ 0x34
 8017d80:	f7fa ff8d 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d84:	b920      	cbnz	r0, 8017d90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>
 8017d86:	6823      	ldr	r3, [r4, #0]
 8017d88:	a90d      	add	r1, sp, #52	@ 0x34
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017d8e:	4798      	blx	r3
 8017d90:	f10a 0a01 	add.w	sl, sl, #1
 8017d94:	e7e4      	b.n	8017d60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c0>
 8017d96:	4648      	mov	r0, r9
 8017d98:	e7d4      	b.n	8017d44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a4>
 8017d9a:	bf00      	nop
 8017d9c:	24006600 	.word	0x24006600
 8017da0:	24006638 	.word	0x24006638
 8017da4:	24006644 	.word	0x24006644
 8017da8:	24000020 	.word	0x24000020
 8017dac:	240065f8 	.word	0x240065f8
 8017db0:	240065f4 	.word	0x240065f4
 8017db4:	240065f6 	.word	0x240065f6
 8017db8:	6828      	ldr	r0, [r5, #0]
 8017dba:	6803      	ldr	r3, [r0, #0]
 8017dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017dbe:	4798      	blx	r3
 8017dc0:	4ba4      	ldr	r3, [pc, #656]	@ (8018054 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 8017dc2:	781b      	ldrb	r3, [r3, #0]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	f43f aed2 	beq.w	8017b6e <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8017dca:	2300      	movs	r3, #0
 8017dcc:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 8017dd0:	a80f      	add	r0, sp, #60	@ 0x3c
 8017dd2:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 8017dd6:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8017dda:	4b9f      	ldr	r3, [pc, #636]	@ (8018058 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 8017ddc:	881b      	ldrh	r3, [r3, #0]
 8017dde:	42b3      	cmp	r3, r6
 8017de0:	f4bf aec5 	bcs.w	8017b6e <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8017de4:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8017de8:	2907      	cmp	r1, #7
 8017dea:	d815      	bhi.n	8017e18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 8017dec:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8017df0:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8017df4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8017df8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8017dfc:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8017e00:	1c4a      	adds	r2, r1, #1
 8017e02:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8017e06:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 8017e0a:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 8017e0e:	f8a2 e002 	strh.w	lr, [r2, #2]
 8017e12:	f8a2 c004 	strh.w	ip, [r2, #4]
 8017e16:	80d7      	strh	r7, [r2, #6]
 8017e18:	3301      	adds	r3, #1
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	e7df      	b.n	8017dde <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 8017e1e:	2b02      	cmp	r3, #2
 8017e20:	f040 80ce 	bne.w	8017fc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8017e24:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8017e28:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 8017e2c:	9308      	str	r3, [sp, #32]
 8017e2e:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 8017e32:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017e36:	9307      	str	r3, [sp, #28]
 8017e38:	b2bf      	uxth	r7, r7
 8017e3a:	6803      	ldr	r3, [r0, #0]
 8017e3c:	fa0f f887 	sxth.w	r8, r7
 8017e40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017e44:	4798      	blx	r3
 8017e46:	4b85      	ldr	r3, [pc, #532]	@ (801805c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 8017e48:	4682      	mov	sl, r0
 8017e4a:	2000      	movs	r0, #0
 8017e4c:	881b      	ldrh	r3, [r3, #0]
 8017e4e:	9302      	str	r3, [sp, #8]
 8017e50:	4b83      	ldr	r3, [pc, #524]	@ (8018060 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 8017e52:	881e      	ldrh	r6, [r3, #0]
 8017e54:	4b83      	ldr	r3, [pc, #524]	@ (8018064 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	2b01      	cmp	r3, #1
 8017e5a:	bf1e      	ittt	ne
 8017e5c:	9b02      	ldrne	r3, [sp, #8]
 8017e5e:	9602      	strne	r6, [sp, #8]
 8017e60:	461e      	movne	r6, r3
 8017e62:	f7f7 ff77 	bl	800fd54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017e66:	fb96 fbfb 	sdiv	fp, r6, fp
 8017e6a:	fb0b f808 	mul.w	r8, fp, r8
 8017e6e:	45c2      	cmp	sl, r8
 8017e70:	da0c      	bge.n	8017e8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 8017e72:	6828      	ldr	r0, [r5, #0]
 8017e74:	210a      	movs	r1, #10
 8017e76:	6803      	ldr	r3, [r0, #0]
 8017e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017e7c:	4798      	blx	r3
 8017e7e:	6828      	ldr	r0, [r5, #0]
 8017e80:	6803      	ldr	r3, [r0, #0]
 8017e82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017e86:	4798      	blx	r3
 8017e88:	4682      	mov	sl, r0
 8017e8a:	e7f0      	b.n	8017e6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 8017e8c:	2000      	movs	r0, #0
 8017e8e:	f04f 0800 	mov.w	r8, #0
 8017e92:	f7f7 ff7b 	bl	800fd8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017e96:	fa1f f38b 	uxth.w	r3, fp
 8017e9a:	4645      	mov	r5, r8
 8017e9c:	fb17 f703 	smulbb	r7, r7, r3
 8017ea0:	9304      	str	r3, [sp, #16]
 8017ea2:	b2bb      	uxth	r3, r7
 8017ea4:	4f70      	ldr	r7, [pc, #448]	@ (8018068 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 8017ea6:	9305      	str	r3, [sp, #20]
 8017ea8:	0973      	lsrs	r3, r6, #5
 8017eaa:	9306      	str	r3, [sp, #24]
 8017eac:	42b5      	cmp	r5, r6
 8017eae:	d087      	beq.n	8017dc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8017eb0:	6838      	ldr	r0, [r7, #0]
 8017eb2:	6803      	ldr	r3, [r0, #0]
 8017eb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017eb8:	4798      	blx	r3
 8017eba:	4582      	cmp	sl, r0
 8017ebc:	4681      	mov	r9, r0
 8017ebe:	d907      	bls.n	8017ed0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 8017ec0:	f1b8 0f00 	cmp.w	r8, #0
 8017ec4:	d007      	beq.n	8017ed6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 8017ec6:	6838      	ldr	r0, [r7, #0]
 8017ec8:	6803      	ldr	r3, [r0, #0]
 8017eca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017ece:	e776      	b.n	8017dbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8017ed0:	f1b8 0f00 	cmp.w	r8, #0
 8017ed4:	d003      	beq.n	8017ede <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 8017ed6:	454d      	cmp	r5, r9
 8017ed8:	d3f5      	bcc.n	8017ec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 8017eda:	f04f 0801 	mov.w	r8, #1
 8017ede:	9a04      	ldr	r2, [sp, #16]
 8017ee0:	fb95 f3fb 	sdiv	r3, r5, fp
 8017ee4:	9303      	str	r3, [sp, #12]
 8017ee6:	3301      	adds	r3, #1
 8017ee8:	fb13 f302 	smulbb	r3, r3, r2
 8017eec:	b299      	uxth	r1, r3
 8017eee:	f1b8 0f00 	cmp.w	r8, #0
 8017ef2:	d04d      	beq.n	8017f90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f0>
 8017ef4:	eb09 030b 	add.w	r3, r9, fp
 8017ef8:	42b3      	cmp	r3, r6
 8017efa:	bfa8      	it	ge
 8017efc:	4633      	movge	r3, r6
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	9807      	ldr	r0, [sp, #28]
 8017f02:	428b      	cmp	r3, r1
 8017f04:	bf94      	ite	ls
 8017f06:	ebc5 0203 	rsbls	r2, r5, r3
 8017f0a:	ebc5 0201 	rsbhi	r2, r5, r1
 8017f0e:	4282      	cmp	r2, r0
 8017f10:	bfa8      	it	ge
 8017f12:	4602      	movge	r2, r0
 8017f14:	9808      	ldr	r0, [sp, #32]
 8017f16:	fa1f fa82 	uxth.w	sl, r2
 8017f1a:	4582      	cmp	sl, r0
 8017f1c:	d205      	bcs.n	8017f2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8017f1e:	fa15 f082 	uxtah	r0, r5, r2
 8017f22:	4286      	cmp	r6, r0
 8017f24:	d001      	beq.n	8017f2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8017f26:	4299      	cmp	r1, r3
 8017f28:	d23f      	bcs.n	8017faa <_ZN8touchgfx11Application15drawCachedAreasEv+0x50a>
 8017f2a:	2001      	movs	r0, #1
 8017f2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f2e:	f7f7 ff11 	bl	800fd54 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017f32:	6838      	ldr	r0, [r7, #0]
 8017f34:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8017f38:	6803      	ldr	r3, [r0, #0]
 8017f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017f3e:	4798      	blx	r3
 8017f40:	4b48      	ldr	r3, [pc, #288]	@ (8018064 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8017f42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f44:	2000      	movs	r0, #0
 8017f46:	781b      	ldrb	r3, [r3, #0]
 8017f48:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8017f4c:	b212      	sxth	r2, r2
 8017f4e:	2b01      	cmp	r3, #1
 8017f50:	d122      	bne.n	8017f98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f8>
 8017f52:	1b73      	subs	r3, r6, r5
 8017f54:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 8017f58:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8017f5c:	eba3 030a 	sub.w	r3, r3, sl
 8017f60:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 8017f64:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8017f68:	6823      	ldr	r3, [r4, #0]
 8017f6a:	a90d      	add	r1, sp, #52	@ 0x34
 8017f6c:	4620      	mov	r0, r4
 8017f6e:	4455      	add	r5, sl
 8017f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017f72:	4798      	blx	r3
 8017f74:	6838      	ldr	r0, [r7, #0]
 8017f76:	9b03      	ldr	r3, [sp, #12]
 8017f78:	b2ad      	uxth	r5, r5
 8017f7a:	4259      	negs	r1, r3
 8017f7c:	6803      	ldr	r3, [r0, #0]
 8017f7e:	b209      	sxth	r1, r1
 8017f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017f84:	4798      	blx	r3
 8017f86:	2001      	movs	r0, #1
 8017f88:	f7f7 ff00 	bl	800fd8c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017f8c:	46ca      	mov	sl, r9
 8017f8e:	e78d      	b.n	8017eac <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 8017f90:	9b05      	ldr	r3, [sp, #20]
 8017f92:	eba9 0303 	sub.w	r3, r9, r3
 8017f96:	e7b2      	b.n	8017efe <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8017f98:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8017f9c:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 8017fa0:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8017fa4:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 8017fa8:	e7de      	b.n	8017f68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 8017faa:	6838      	ldr	r0, [r7, #0]
 8017fac:	6803      	ldr	r3, [r0, #0]
 8017fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017fb0:	4798      	blx	r3
 8017fb2:	6838      	ldr	r0, [r7, #0]
 8017fb4:	9906      	ldr	r1, [sp, #24]
 8017fb6:	6803      	ldr	r3, [r0, #0]
 8017fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017fbc:	4798      	blx	r3
 8017fbe:	e7e5      	b.n	8017f8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ec>
 8017fc0:	2b03      	cmp	r3, #3
 8017fc2:	f040 8133 	bne.w	801822c <_ZN8touchgfx11Application15drawCachedAreasEv+0x78c>
 8017fc6:	4b27      	ldr	r3, [pc, #156]	@ (8018064 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8017fc8:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8017fcc:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	f000 8095 	beq.w	8018102 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8017fd8:	8832      	ldrh	r2, [r6, #0]
 8017fda:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8017fde:	3201      	adds	r2, #1
 8017fe0:	b292      	uxth	r2, r2
 8017fe2:	2900      	cmp	r1, #0
 8017fe4:	f43f aeec 	beq.w	8017dc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8017fe8:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 8017fec:	4694      	mov	ip, r2
 8017fee:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 8017ff2:	f04f 0800 	mov.w	r8, #0
 8017ff6:	441d      	add	r5, r3
 8017ff8:	b22d      	sxth	r5, r5
 8017ffa:	fa1f f38c 	uxth.w	r3, ip
 8017ffe:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8018002:	4299      	cmp	r1, r3
 8018004:	f240 80bc 	bls.w	8018180 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e0>
 8018008:	4427      	add	r7, r4
 801800a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801800e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8018012:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8018016:	4283      	cmp	r3, r0
 8018018:	f340 809e 	ble.w	8018158 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b8>
 801801c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 8018020:	46e0      	mov	r8, ip
 8018022:	4405      	add	r5, r0
 8018024:	b22d      	sxth	r5, r5
 8018026:	429d      	cmp	r5, r3
 8018028:	bfa8      	it	ge
 801802a:	461d      	movge	r5, r3
 801802c:	f10c 0c01 	add.w	ip, ip, #1
 8018030:	e7e3      	b.n	8017ffa <_ZN8touchgfx11Application15drawCachedAreasEv+0x55a>
 8018032:	d10a      	bne.n	801804a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5aa>
 8018034:	4562      	cmp	r2, ip
 8018036:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 801803a:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801803e:	bfb8      	it	lt
 8018040:	4662      	movlt	r2, ip
 8018042:	4288      	cmp	r0, r1
 8018044:	bfb8      	it	lt
 8018046:	4698      	movlt	r8, r3
 8018048:	e084      	b.n	8018154 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 801804a:	428a      	cmp	r2, r1
 801804c:	bfb8      	it	lt
 801804e:	460a      	movlt	r2, r1
 8018050:	e080      	b.n	8018154 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 8018052:	bf00      	nop
 8018054:	240065fe 	.word	0x240065fe
 8018058:	24000020 	.word	0x24000020
 801805c:	240065f6 	.word	0x240065f6
 8018060:	240065f4 	.word	0x240065f4
 8018064:	240065f8 	.word	0x240065f8
 8018068:	24006600 	.word	0x24006600
 801806c:	19e1      	adds	r1, r4, r7
 801806e:	ab0d      	add	r3, sp, #52	@ 0x34
 8018070:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8018074:	6849      	ldr	r1, [r1, #4]
 8018076:	c303      	stmia	r3!, {r0, r1}
 8018078:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 801807c:	a80d      	add	r0, sp, #52	@ 0x34
 801807e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8018082:	454b      	cmp	r3, r9
 8018084:	440b      	add	r3, r1
 8018086:	bfb8      	it	lt
 8018088:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 801808c:	1a9b      	subs	r3, r3, r2
 801808e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8018092:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8018096:	f7fe fe6d 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801809a:	a80d      	add	r0, sp, #52	@ 0x34
 801809c:	f7fa fdff 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 80180a0:	bb78      	cbnz	r0, 8018102 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 80180a2:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 80180a6:	4427      	add	r7, r4
 80180a8:	6828      	ldr	r0, [r5, #0]
 80180aa:	45cc      	cmp	ip, r9
 80180ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80180b0:	f8d0 e000 	ldr.w	lr, [r0]
 80180b4:	bfd8      	it	le
 80180b6:	fa1f fc8c 	uxthle.w	ip, ip
 80180ba:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 80180be:	bfc8      	it	gt
 80180c0:	fa1f fc89 	uxthgt.w	ip, r9
 80180c4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80180c8:	f8cd c000 	str.w	ip, [sp]
 80180cc:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 80180d0:	47d8      	blx	fp
 80180d2:	4683      	mov	fp, r0
 80180d4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80180d8:	a80d      	add	r0, sp, #52	@ 0x34
 80180da:	f7fe fe31 	bl	8016d40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80180de:	6823      	ldr	r3, [r4, #0]
 80180e0:	4620      	mov	r0, r4
 80180e2:	a90d      	add	r1, sp, #52	@ 0x34
 80180e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80180e6:	4798      	blx	r3
 80180e8:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 80180ec:	eba0 000b 	sub.w	r0, r0, fp
 80180f0:	b200      	sxth	r0, r0
 80180f2:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 80180f6:	b920      	cbnz	r0, 8018102 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 80180f8:	fa1f f188 	uxth.w	r1, r8
 80180fc:	4650      	mov	r0, sl
 80180fe:	f7ff f93d 	bl	801737c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018102:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8018106:	f1bb 0f00 	cmp.w	fp, #0
 801810a:	f43f ae59 	beq.w	8017dc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801810e:	8833      	ldrh	r3, [r6, #0]
 8018110:	f04f 0800 	mov.w	r8, #0
 8018114:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8018118:	3301      	adds	r3, #1
 801811a:	b29b      	uxth	r3, r3
 801811c:	b299      	uxth	r1, r3
 801811e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8018122:	458b      	cmp	fp, r1
 8018124:	d9a2      	bls.n	801806c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 8018126:	4427      	add	r7, r4
 8018128:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801812c:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 8018130:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 8018134:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8018138:	4408      	add	r0, r1
 801813a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801813e:	4461      	add	r1, ip
 8018140:	b200      	sxth	r0, r0
 8018142:	b209      	sxth	r1, r1
 8018144:	4288      	cmp	r0, r1
 8018146:	f6bf af74 	bge.w	8018032 <_ZN8touchgfx11Application15drawCachedAreasEv+0x592>
 801814a:	4584      	cmp	ip, r0
 801814c:	4662      	mov	r2, ip
 801814e:	4698      	mov	r8, r3
 8018150:	bfb8      	it	lt
 8018152:	4602      	movlt	r2, r0
 8018154:	3301      	adds	r3, #1
 8018156:	e7e1      	b.n	801811c <_ZN8touchgfx11Application15drawCachedAreasEv+0x67c>
 8018158:	d10e      	bne.n	8018178 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d8>
 801815a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801815e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8018162:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8018166:	4473      	add	r3, lr
 8018168:	b21b      	sxth	r3, r3
 801816a:	429d      	cmp	r5, r3
 801816c:	bfa8      	it	ge
 801816e:	461d      	movge	r5, r3
 8018170:	4287      	cmp	r7, r0
 8018172:	bfb8      	it	lt
 8018174:	46e0      	movlt	r8, ip
 8018176:	e759      	b.n	801802c <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8018178:	4285      	cmp	r5, r0
 801817a:	bfa8      	it	ge
 801817c:	4605      	movge	r5, r0
 801817e:	e755      	b.n	801802c <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8018180:	eb0a 0007 	add.w	r0, sl, r7
 8018184:	4427      	add	r7, r4
 8018186:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801818a:	45cb      	cmp	fp, r9
 801818c:	bfbc      	itt	lt
 801818e:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 8018192:	445d      	addlt	r5, fp
 8018194:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8018198:	bfb8      	it	lt
 801819a:	b22d      	sxthlt	r5, r5
 801819c:	f7fa fd7f 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 80181a0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80181a4:	2800      	cmp	r0, #0
 80181a6:	f47f af1c 	bne.w	8017fe2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x542>
 80181aa:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80181ae:	fa1f fb8b 	uxth.w	fp, fp
 80181b2:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80181b6:	1aad      	subs	r5, r5, r2
 80181b8:	4829      	ldr	r0, [pc, #164]	@ (8018260 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7c0>)
 80181ba:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80181be:	454d      	cmp	r5, r9
 80181c0:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80181c4:	6800      	ldr	r0, [r0, #0]
 80181c6:	bfa8      	it	ge
 80181c8:	464d      	movge	r5, r9
 80181ca:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 80181ce:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80181d2:	b289      	uxth	r1, r1
 80181d4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80181d8:	b2ad      	uxth	r5, r5
 80181da:	f8d0 c000 	ldr.w	ip, [r0]
 80181de:	b292      	uxth	r2, r2
 80181e0:	455d      	cmp	r5, fp
 80181e2:	bf94      	ite	ls
 80181e4:	9500      	strls	r5, [sp, #0]
 80181e6:	f8cd b000 	strhi.w	fp, [sp]
 80181ea:	b29b      	uxth	r3, r3
 80181ec:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 80181f0:	47a8      	blx	r5
 80181f2:	6823      	ldr	r3, [r4, #0]
 80181f4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80181f8:	a90d      	add	r1, sp, #52	@ 0x34
 80181fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80181fc:	4620      	mov	r0, r4
 80181fe:	4798      	blx	r3
 8018200:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 8018204:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8018208:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801820c:	1a5b      	subs	r3, r3, r1
 801820e:	440a      	add	r2, r1
 8018210:	b21b      	sxth	r3, r3
 8018212:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8018216:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801821a:	2b00      	cmp	r3, #0
 801821c:	f47f aedc 	bne.w	8017fd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 8018220:	fa1f f188 	uxth.w	r1, r8
 8018224:	4650      	mov	r0, sl
 8018226:	f7ff f8a9 	bl	801737c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801822a:	e6d5      	b.n	8017fd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 801822c:	8835      	ldrh	r5, [r6, #0]
 801822e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8018232:	42ab      	cmp	r3, r5
 8018234:	f67f adc4 	bls.w	8017dc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8018238:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801823c:	ab0d      	add	r3, sp, #52	@ 0x34
 801823e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8018242:	6851      	ldr	r1, [r2, #4]
 8018244:	c303      	stmia	r3!, {r0, r1}
 8018246:	a80d      	add	r0, sp, #52	@ 0x34
 8018248:	f7fa fd29 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801824c:	b920      	cbnz	r0, 8018258 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b8>
 801824e:	6823      	ldr	r3, [r4, #0]
 8018250:	a90d      	add	r1, sp, #52	@ 0x34
 8018252:	4620      	mov	r0, r4
 8018254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018256:	4798      	blx	r3
 8018258:	3501      	adds	r5, #1
 801825a:	b2ad      	uxth	r5, r5
 801825c:	e7e7      	b.n	801822e <_ZN8touchgfx11Application15drawCachedAreasEv+0x78e>
 801825e:	bf00      	nop
 8018260:	24006600 	.word	0x24006600

08018264 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018264:	4b03      	ldr	r3, [pc, #12]	@ (8018274 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018266:	2200      	movs	r2, #0
 8018268:	801a      	strh	r2, [r3, #0]
 801826a:	805a      	strh	r2, [r3, #2]
 801826c:	809a      	strh	r2, [r3, #4]
 801826e:	80da      	strh	r2, [r3, #6]
 8018270:	4770      	bx	lr
 8018272:	bf00      	nop
 8018274:	24006644 	.word	0x24006644

08018278 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801827c:	b09d      	sub	sp, #116	@ 0x74
 801827e:	4606      	mov	r6, r0
 8018280:	4614      	mov	r4, r2
 8018282:	468a      	mov	sl, r1
 8018284:	a803      	add	r0, sp, #12
 8018286:	461d      	mov	r5, r3
 8018288:	f000 fe06 	bl	8018e98 <_ZN8touchgfx12TextProviderC1Ev>
 801828c:	6833      	ldr	r3, [r6, #0]
 801828e:	4630      	mov	r0, r6
 8018290:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8018294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018296:	4798      	blx	r3
 8018298:	6833      	ldr	r3, [r6, #0]
 801829a:	4607      	mov	r7, r0
 801829c:	4630      	mov	r0, r6
 801829e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80182a0:	4798      	blx	r3
 80182a2:	462a      	mov	r2, r5
 80182a4:	2500      	movs	r5, #0
 80182a6:	4621      	mov	r1, r4
 80182a8:	9000      	str	r0, [sp, #0]
 80182aa:	463b      	mov	r3, r7
 80182ac:	462c      	mov	r4, r5
 80182ae:	46a9      	mov	r9, r5
 80182b0:	46a8      	mov	r8, r5
 80182b2:	a803      	add	r0, sp, #12
 80182b4:	f000 fe4b 	bl	8018f4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80182b8:	2300      	movs	r3, #0
 80182ba:	9302      	str	r3, [sp, #8]
 80182bc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80182c0:	429c      	cmp	r4, r3
 80182c2:	d002      	beq.n	80182ca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80182c4:	455c      	cmp	r4, fp
 80182c6:	bf18      	it	ne
 80182c8:	4625      	movne	r5, r4
 80182ca:	ab02      	add	r3, sp, #8
 80182cc:	4632      	mov	r2, r6
 80182ce:	4651      	mov	r1, sl
 80182d0:	a803      	add	r0, sp, #12
 80182d2:	f001 f96f 	bl	80195b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80182d6:	4604      	mov	r4, r0
 80182d8:	b108      	cbz	r0, 80182de <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80182da:	280a      	cmp	r0, #10
 80182dc:	d10a      	bne.n	80182f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80182de:	45c1      	cmp	r9, r8
 80182e0:	bf38      	it	cc
 80182e2:	46c1      	movcc	r9, r8
 80182e4:	f04f 0800 	mov.w	r8, #0
 80182e8:	2c00      	cmp	r4, #0
 80182ea:	d1e5      	bne.n	80182b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80182ec:	4648      	mov	r0, r9
 80182ee:	b01d      	add	sp, #116	@ 0x74
 80182f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182f4:	9a02      	ldr	r2, [sp, #8]
 80182f6:	2a00      	cmp	r2, #0
 80182f8:	d0de      	beq.n	80182b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80182fa:	7b57      	ldrb	r7, [r2, #13]
 80182fc:	4629      	mov	r1, r5
 80182fe:	6833      	ldr	r3, [r6, #0]
 8018300:	007f      	lsls	r7, r7, #1
 8018302:	8894      	ldrh	r4, [r2, #4]
 8018304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018306:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801830a:	7a97      	ldrb	r7, [r2, #10]
 801830c:	4307      	orrs	r7, r0
 801830e:	4630      	mov	r0, r6
 8018310:	4798      	blx	r3
 8018312:	4438      	add	r0, r7
 8018314:	4480      	add	r8, r0
 8018316:	fa1f f888 	uxth.w	r8, r8
 801831a:	e7e5      	b.n	80182e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801831c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801831c:	b508      	push	{r3, lr}
 801831e:	6803      	ldr	r3, [r0, #0]
 8018320:	68db      	ldr	r3, [r3, #12]
 8018322:	4798      	blx	r3
 8018324:	b128      	cbz	r0, 8018332 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018326:	7b43      	ldrb	r3, [r0, #13]
 8018328:	7a80      	ldrb	r0, [r0, #10]
 801832a:	005b      	lsls	r3, r3, #1
 801832c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018330:	4318      	orrs	r0, r3
 8018332:	bd08      	pop	{r3, pc}

08018334 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018334:	b40e      	push	{r1, r2, r3}
 8018336:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018338:	b09e      	sub	sp, #120	@ 0x78
 801833a:	4605      	mov	r5, r0
 801833c:	ab23      	add	r3, sp, #140	@ 0x8c
 801833e:	a805      	add	r0, sp, #20
 8018340:	f853 4b04 	ldr.w	r4, [r3], #4
 8018344:	9303      	str	r3, [sp, #12]
 8018346:	f000 fda7 	bl	8018e98 <_ZN8touchgfx12TextProviderC1Ev>
 801834a:	682b      	ldr	r3, [r5, #0]
 801834c:	4628      	mov	r0, r5
 801834e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018350:	4798      	blx	r3
 8018352:	682b      	ldr	r3, [r5, #0]
 8018354:	4606      	mov	r6, r0
 8018356:	4628      	mov	r0, r5
 8018358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801835a:	4798      	blx	r3
 801835c:	4633      	mov	r3, r6
 801835e:	4621      	mov	r1, r4
 8018360:	ae1e      	add	r6, sp, #120	@ 0x78
 8018362:	2400      	movs	r4, #0
 8018364:	9000      	str	r0, [sp, #0]
 8018366:	9a03      	ldr	r2, [sp, #12]
 8018368:	a805      	add	r0, sp, #20
 801836a:	f000 fdf0 	bl	8018f4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801836e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8018372:	462a      	mov	r2, r5
 8018374:	4633      	mov	r3, r6
 8018376:	4621      	mov	r1, r4
 8018378:	a805      	add	r0, sp, #20
 801837a:	f001 f91b 	bl	80195b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801837e:	b300      	cbz	r0, 80183c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8018380:	280a      	cmp	r0, #10
 8018382:	d01a      	beq.n	80183ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018384:	9f04      	ldr	r7, [sp, #16]
 8018386:	b1c7      	cbz	r7, 80183ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018388:	7b78      	ldrb	r0, [r7, #13]
 801838a:	7a3b      	ldrb	r3, [r7, #8]
 801838c:	00c1      	lsls	r1, r0, #3
 801838e:	88ea      	ldrh	r2, [r5, #6]
 8018390:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8018394:	4319      	orrs	r1, r3
 8018396:	0643      	lsls	r3, r0, #25
 8018398:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801839c:	bf48      	it	mi
 801839e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80183a2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80183a6:	bf48      	it	mi
 80183a8:	b219      	sxthmi	r1, r3
 80183aa:	79fb      	ldrb	r3, [r7, #7]
 80183ac:	4303      	orrs	r3, r0
 80183ae:	4413      	add	r3, r2
 80183b0:	1a5b      	subs	r3, r3, r1
 80183b2:	b21b      	sxth	r3, r3
 80183b4:	429c      	cmp	r4, r3
 80183b6:	bfb8      	it	lt
 80183b8:	461c      	movlt	r4, r3
 80183ba:	4633      	mov	r3, r6
 80183bc:	462a      	mov	r2, r5
 80183be:	2100      	movs	r1, #0
 80183c0:	e7da      	b.n	8018378 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80183c2:	b2a0      	uxth	r0, r4
 80183c4:	b01e      	add	sp, #120	@ 0x78
 80183c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80183ca:	b003      	add	sp, #12
 80183cc:	4770      	bx	lr

080183ce <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80183ce:	7a43      	ldrb	r3, [r0, #9]
 80183d0:	8880      	ldrh	r0, [r0, #4]
 80183d2:	4418      	add	r0, r3
 80183d4:	b280      	uxth	r0, r0
 80183d6:	4770      	bx	lr

080183d8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80183d8:	6803      	ldr	r3, [r0, #0]
 80183da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80183dc:	4718      	bx	r3

080183de <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80183de:	b40e      	push	{r1, r2, r3}
 80183e0:	b570      	push	{r4, r5, r6, lr}
 80183e2:	b09d      	sub	sp, #116	@ 0x74
 80183e4:	4604      	mov	r4, r0
 80183e6:	ab21      	add	r3, sp, #132	@ 0x84
 80183e8:	a803      	add	r0, sp, #12
 80183ea:	f853 5b04 	ldr.w	r5, [r3], #4
 80183ee:	9302      	str	r3, [sp, #8]
 80183f0:	f000 fd52 	bl	8018e98 <_ZN8touchgfx12TextProviderC1Ev>
 80183f4:	6823      	ldr	r3, [r4, #0]
 80183f6:	4620      	mov	r0, r4
 80183f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80183fa:	4798      	blx	r3
 80183fc:	6823      	ldr	r3, [r4, #0]
 80183fe:	4606      	mov	r6, r0
 8018400:	4620      	mov	r0, r4
 8018402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018404:	2401      	movs	r4, #1
 8018406:	4798      	blx	r3
 8018408:	4633      	mov	r3, r6
 801840a:	9000      	str	r0, [sp, #0]
 801840c:	4629      	mov	r1, r5
 801840e:	9a02      	ldr	r2, [sp, #8]
 8018410:	a803      	add	r0, sp, #12
 8018412:	f000 fd9c 	bl	8018f4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018416:	a803      	add	r0, sp, #12
 8018418:	f001 f998 	bl	801974c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801841c:	b2a3      	uxth	r3, r4
 801841e:	b138      	cbz	r0, 8018430 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018420:	280a      	cmp	r0, #10
 8018422:	a803      	add	r0, sp, #12
 8018424:	bf04      	itt	eq
 8018426:	3301      	addeq	r3, #1
 8018428:	b21c      	sxtheq	r4, r3
 801842a:	f001 f98f 	bl	801974c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801842e:	e7f5      	b.n	801841c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018430:	4618      	mov	r0, r3
 8018432:	b01d      	add	sp, #116	@ 0x74
 8018434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018438:	b003      	add	sp, #12
 801843a:	4770      	bx	lr

0801843c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801843c:	b40e      	push	{r1, r2, r3}
 801843e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018440:	b09e      	sub	sp, #120	@ 0x78
 8018442:	4604      	mov	r4, r0
 8018444:	ab23      	add	r3, sp, #140	@ 0x8c
 8018446:	a805      	add	r0, sp, #20
 8018448:	f853 5b04 	ldr.w	r5, [r3], #4
 801844c:	9303      	str	r3, [sp, #12]
 801844e:	f000 fd23 	bl	8018e98 <_ZN8touchgfx12TextProviderC1Ev>
 8018452:	6823      	ldr	r3, [r4, #0]
 8018454:	4620      	mov	r0, r4
 8018456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018458:	4798      	blx	r3
 801845a:	6823      	ldr	r3, [r4, #0]
 801845c:	4606      	mov	r6, r0
 801845e:	4620      	mov	r0, r4
 8018460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018462:	4798      	blx	r3
 8018464:	4633      	mov	r3, r6
 8018466:	4629      	mov	r1, r5
 8018468:	9000      	str	r0, [sp, #0]
 801846a:	9a03      	ldr	r2, [sp, #12]
 801846c:	a805      	add	r0, sp, #20
 801846e:	f000 fd6e 	bl	8018f4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018472:	ad1e      	add	r5, sp, #120	@ 0x78
 8018474:	2100      	movs	r1, #0
 8018476:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801847a:	4622      	mov	r2, r4
 801847c:	a805      	add	r0, sp, #20
 801847e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018482:	462b      	mov	r3, r5
 8018484:	f001 f896 	bl	80195b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018488:	b1d8      	cbz	r0, 80184c2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801848a:	280a      	cmp	r0, #10
 801848c:	d012      	beq.n	80184b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801848e:	9804      	ldr	r0, [sp, #16]
 8018490:	b180      	cbz	r0, 80184b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018492:	7b47      	ldrb	r7, [r0, #13]
 8018494:	88e2      	ldrh	r2, [r4, #6]
 8018496:	00fb      	lsls	r3, r7, #3
 8018498:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801849c:	7a03      	ldrb	r3, [r0, #8]
 801849e:	430b      	orrs	r3, r1
 80184a0:	0679      	lsls	r1, r7, #25
 80184a2:	bf44      	itt	mi
 80184a4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80184a8:	b21b      	sxthmi	r3, r3
 80184aa:	1ad3      	subs	r3, r2, r3
 80184ac:	b21b      	sxth	r3, r3
 80184ae:	429e      	cmp	r6, r3
 80184b0:	bfa8      	it	ge
 80184b2:	461e      	movge	r6, r3
 80184b4:	462b      	mov	r3, r5
 80184b6:	4622      	mov	r2, r4
 80184b8:	2100      	movs	r1, #0
 80184ba:	a805      	add	r0, sp, #20
 80184bc:	f001 f87a 	bl	80195b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80184c0:	e7e2      	b.n	8018488 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80184c2:	4630      	mov	r0, r6
 80184c4:	b01e      	add	sp, #120	@ 0x78
 80184c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80184ca:	b003      	add	sp, #12
 80184cc:	4770      	bx	lr

080184ce <_ZNK8touchgfx8Drawable10invalidateEv>:
 80184ce:	b513      	push	{r0, r1, r4, lr}
 80184d0:	6803      	ldr	r3, [r0, #0]
 80184d2:	2400      	movs	r4, #0
 80184d4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80184d8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80184dc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80184e0:	4669      	mov	r1, sp
 80184e2:	691b      	ldr	r3, [r3, #16]
 80184e4:	9400      	str	r4, [sp, #0]
 80184e6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80184ea:	4798      	blx	r3
 80184ec:	b002      	add	sp, #8
 80184ee:	bd10      	pop	{r4, pc}

080184f0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80184f0:	b538      	push	{r3, r4, r5, lr}
 80184f2:	680b      	ldr	r3, [r1, #0]
 80184f4:	460c      	mov	r4, r1
 80184f6:	4605      	mov	r5, r0
 80184f8:	68db      	ldr	r3, [r3, #12]
 80184fa:	4798      	blx	r3
 80184fc:	6823      	ldr	r3, [r4, #0]
 80184fe:	4620      	mov	r0, r4
 8018500:	4629      	mov	r1, r5
 8018502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018504:	4798      	blx	r3
 8018506:	4628      	mov	r0, r5
 8018508:	bd38      	pop	{r3, r4, r5, pc}

0801850a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801850a:	b410      	push	{r4}
 801850c:	880a      	ldrh	r2, [r1, #0]
 801850e:	8884      	ldrh	r4, [r0, #4]
 8018510:	4422      	add	r2, r4
 8018512:	800a      	strh	r2, [r1, #0]
 8018514:	884a      	ldrh	r2, [r1, #2]
 8018516:	88c4      	ldrh	r4, [r0, #6]
 8018518:	4422      	add	r2, r4
 801851a:	804a      	strh	r2, [r1, #2]
 801851c:	6940      	ldr	r0, [r0, #20]
 801851e:	b120      	cbz	r0, 801852a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018520:	6803      	ldr	r3, [r0, #0]
 8018522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018528:	4718      	bx	r3
 801852a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801852e:	4770      	bx	lr

08018530 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018530:	b570      	push	{r4, r5, r6, lr}
 8018532:	8882      	ldrh	r2, [r0, #4]
 8018534:	460c      	mov	r4, r1
 8018536:	880b      	ldrh	r3, [r1, #0]
 8018538:	4605      	mov	r5, r0
 801853a:	4413      	add	r3, r2
 801853c:	800b      	strh	r3, [r1, #0]
 801853e:	884b      	ldrh	r3, [r1, #2]
 8018540:	88c2      	ldrh	r2, [r0, #6]
 8018542:	4413      	add	r3, r2
 8018544:	804b      	strh	r3, [r1, #2]
 8018546:	1d01      	adds	r1, r0, #4
 8018548:	4620      	mov	r0, r4
 801854a:	f7fa fb65 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 801854e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018552:	2b00      	cmp	r3, #0
 8018554:	dd0b      	ble.n	801856e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018556:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801855a:	2b00      	cmp	r3, #0
 801855c:	dd07      	ble.n	801856e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801855e:	6968      	ldr	r0, [r5, #20]
 8018560:	b128      	cbz	r0, 801856e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018562:	6803      	ldr	r3, [r0, #0]
 8018564:	4621      	mov	r1, r4
 8018566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801856c:	4718      	bx	r3
 801856e:	bd70      	pop	{r4, r5, r6, pc}

08018570 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018570:	b570      	push	{r4, r5, r6, lr}
 8018572:	8882      	ldrh	r2, [r0, #4]
 8018574:	460c      	mov	r4, r1
 8018576:	880b      	ldrh	r3, [r1, #0]
 8018578:	4605      	mov	r5, r0
 801857a:	4413      	add	r3, r2
 801857c:	800b      	strh	r3, [r1, #0]
 801857e:	884b      	ldrh	r3, [r1, #2]
 8018580:	88c2      	ldrh	r2, [r0, #6]
 8018582:	4413      	add	r3, r2
 8018584:	804b      	strh	r3, [r1, #2]
 8018586:	1d01      	adds	r1, r0, #4
 8018588:	4620      	mov	r0, r4
 801858a:	f7fa fb45 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 801858e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018592:	2b00      	cmp	r3, #0
 8018594:	dd19      	ble.n	80185ca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8018596:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801859a:	2b00      	cmp	r3, #0
 801859c:	dd15      	ble.n	80185ca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801859e:	6968      	ldr	r0, [r5, #20]
 80185a0:	b128      	cbz	r0, 80185ae <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80185a2:	6803      	ldr	r3, [r0, #0]
 80185a4:	4621      	mov	r1, r4
 80185a6:	691b      	ldr	r3, [r3, #16]
 80185a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185ac:	4718      	bx	r3
 80185ae:	4b07      	ldr	r3, [pc, #28]	@ (80185cc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	3304      	adds	r3, #4
 80185b4:	429d      	cmp	r5, r3
 80185b6:	d108      	bne.n	80185ca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80185b8:	f7fe fd86 	bl	80170c8 <_ZN8touchgfx11Application11getInstanceEv>
 80185bc:	6803      	ldr	r3, [r0, #0]
 80185be:	6821      	ldr	r1, [r4, #0]
 80185c0:	6862      	ldr	r2, [r4, #4]
 80185c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80185c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185c8:	4718      	bx	r3
 80185ca:	bd70      	pop	{r4, r5, r6, pc}
 80185cc:	2400663c 	.word	0x2400663c

080185d0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80185d0:	b570      	push	{r4, r5, r6, lr}
 80185d2:	4604      	mov	r4, r0
 80185d4:	4616      	mov	r6, r2
 80185d6:	460d      	mov	r5, r1
 80185d8:	b901      	cbnz	r1, 80185dc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80185da:	b192      	cbz	r2, 8018602 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80185dc:	6823      	ldr	r3, [r4, #0]
 80185de:	4620      	mov	r0, r4
 80185e0:	699b      	ldr	r3, [r3, #24]
 80185e2:	4798      	blx	r3
 80185e4:	88e2      	ldrh	r2, [r4, #6]
 80185e6:	88a1      	ldrh	r1, [r4, #4]
 80185e8:	4620      	mov	r0, r4
 80185ea:	4432      	add	r2, r6
 80185ec:	4429      	add	r1, r5
 80185ee:	b212      	sxth	r2, r2
 80185f0:	b209      	sxth	r1, r1
 80185f2:	f7f5 fd88 	bl	800e106 <_ZN8touchgfx8Drawable5setXYEss>
 80185f6:	6823      	ldr	r3, [r4, #0]
 80185f8:	4620      	mov	r0, r4
 80185fa:	699b      	ldr	r3, [r3, #24]
 80185fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018600:	4718      	bx	r3
 8018602:	bd70      	pop	{r4, r5, r6, pc}

08018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018604:	b510      	push	{r4, lr}
 8018606:	2300      	movs	r3, #0
 8018608:	4604      	mov	r4, r0
 801860a:	4608      	mov	r0, r1
 801860c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018610:	8023      	strh	r3, [r4, #0]
 8018612:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018616:	8063      	strh	r3, [r4, #2]
 8018618:	6803      	ldr	r3, [r0, #0]
 801861a:	80a1      	strh	r1, [r4, #4]
 801861c:	4621      	mov	r1, r4
 801861e:	80e2      	strh	r2, [r4, #6]
 8018620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018622:	4798      	blx	r3
 8018624:	4620      	mov	r0, r4
 8018626:	bd10      	pop	{r4, pc}

08018628 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8018628:	b530      	push	{r4, r5, lr}
 801862a:	8083      	strh	r3, [r0, #4]
 801862c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018630:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8018634:	80c3      	strh	r3, [r0, #6]
 8018636:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801863a:	6141      	str	r1, [r0, #20]
 801863c:	7203      	strb	r3, [r0, #8]
 801863e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018642:	8302      	strh	r2, [r0, #24]
 8018644:	7243      	strb	r3, [r0, #9]
 8018646:	7a83      	ldrb	r3, [r0, #10]
 8018648:	f365 0306 	bfi	r3, r5, #0, #7
 801864c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8018650:	f365 13c7 	bfi	r3, r5, #7, #1
 8018654:	7283      	strb	r3, [r0, #10]
 8018656:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801865a:	72c3      	strb	r3, [r0, #11]
 801865c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8018660:	7303      	strb	r3, [r0, #12]
 8018662:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8018666:	81c3      	strh	r3, [r0, #14]
 8018668:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801866c:	8203      	strh	r3, [r0, #16]
 801866e:	4b01      	ldr	r3, [pc, #4]	@ (8018674 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8018670:	6003      	str	r3, [r0, #0]
 8018672:	bd30      	pop	{r4, r5, pc}
 8018674:	0802c504 	.word	0x0802c504

08018678 <_ZNK8touchgfx9ConstFont4findEt>:
 8018678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801867a:	6944      	ldr	r4, [r0, #20]
 801867c:	b3bc      	cbz	r4, 80186ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801867e:	88a3      	ldrh	r3, [r4, #4]
 8018680:	8b02      	ldrh	r2, [r0, #24]
 8018682:	1acb      	subs	r3, r1, r3
 8018684:	f102 32ff 	add.w	r2, r2, #4294967295
 8018688:	d431      	bmi.n	80186ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801868a:	4293      	cmp	r3, r2
 801868c:	dd0c      	ble.n	80186a8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801868e:	230e      	movs	r3, #14
 8018690:	fb03 4302 	mla	r3, r3, r2, r4
 8018694:	889b      	ldrh	r3, [r3, #4]
 8018696:	1a5b      	subs	r3, r3, r1
 8018698:	1ad3      	subs	r3, r2, r3
 801869a:	429a      	cmp	r2, r3
 801869c:	db27      	blt.n	80186ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801869e:	2b00      	cmp	r3, #0
 80186a0:	bfbc      	itt	lt
 80186a2:	2302      	movlt	r3, #2
 80186a4:	fb92 f3f3 	sdivlt	r3, r2, r3
 80186a8:	2500      	movs	r5, #0
 80186aa:	260e      	movs	r6, #14
 80186ac:	4295      	cmp	r5, r2
 80186ae:	dc1e      	bgt.n	80186ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80186b0:	fb06 4003 	mla	r0, r6, r3, r4
 80186b4:	8887      	ldrh	r7, [r0, #4]
 80186b6:	42b9      	cmp	r1, r7
 80186b8:	d01a      	beq.n	80186f0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80186ba:	d20d      	bcs.n	80186d8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80186bc:	1e5a      	subs	r2, r3, #1
 80186be:	4295      	cmp	r5, r2
 80186c0:	dc15      	bgt.n	80186ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80186c2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80186c6:	1a5b      	subs	r3, r3, r1
 80186c8:	1ad3      	subs	r3, r2, r3
 80186ca:	429a      	cmp	r2, r3
 80186cc:	db0f      	blt.n	80186ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80186ce:	429d      	cmp	r5, r3
 80186d0:	ddec      	ble.n	80186ac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80186d2:	1953      	adds	r3, r2, r5
 80186d4:	105b      	asrs	r3, r3, #1
 80186d6:	e7e9      	b.n	80186ac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80186d8:	1c5d      	adds	r5, r3, #1
 80186da:	42aa      	cmp	r2, r5
 80186dc:	db07      	blt.n	80186ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80186de:	8a43      	ldrh	r3, [r0, #18]
 80186e0:	1acb      	subs	r3, r1, r3
 80186e2:	442b      	add	r3, r5
 80186e4:	429d      	cmp	r5, r3
 80186e6:	dc02      	bgt.n	80186ee <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80186e8:	429a      	cmp	r2, r3
 80186ea:	dadf      	bge.n	80186ac <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80186ec:	e7f1      	b.n	80186d2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80186ee:	2000      	movs	r0, #0
 80186f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080186f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80186f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186f4:	4604      	mov	r4, r0
 80186f6:	4617      	mov	r7, r2
 80186f8:	461e      	mov	r6, r3
 80186fa:	b911      	cbnz	r1, 8018702 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80186fc:	2500      	movs	r5, #0
 80186fe:	4628      	mov	r0, r5
 8018700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018702:	290a      	cmp	r1, #10
 8018704:	d0fa      	beq.n	80186fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018706:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801870a:	4291      	cmp	r1, r2
 801870c:	d0f6      	beq.n	80186fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801870e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8018712:	4291      	cmp	r1, r2
 8018714:	d0f2      	beq.n	80186fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018716:	f7ff ffaf 	bl	8018678 <_ZNK8touchgfx9ConstFont4findEt>
 801871a:	4605      	mov	r5, r0
 801871c:	b950      	cbnz	r0, 8018734 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801871e:	6823      	ldr	r3, [r4, #0]
 8018720:	4620      	mov	r0, r4
 8018722:	691b      	ldr	r3, [r3, #16]
 8018724:	4798      	blx	r3
 8018726:	4601      	mov	r1, r0
 8018728:	4620      	mov	r0, r4
 801872a:	f7ff ffa5 	bl	8018678 <_ZNK8touchgfx9ConstFont4findEt>
 801872e:	4605      	mov	r5, r0
 8018730:	2800      	cmp	r0, #0
 8018732:	d0e3      	beq.n	80186fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018734:	6823      	ldr	r3, [r4, #0]
 8018736:	4629      	mov	r1, r5
 8018738:	4620      	mov	r0, r4
 801873a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801873c:	4798      	blx	r3
 801873e:	6038      	str	r0, [r7, #0]
 8018740:	6823      	ldr	r3, [r4, #0]
 8018742:	4620      	mov	r0, r4
 8018744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018746:	4798      	blx	r3
 8018748:	7030      	strb	r0, [r6, #0]
 801874a:	e7d8      	b.n	80186fe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801874c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801874c:	b538      	push	{r3, r4, r5, lr}
 801874e:	4605      	mov	r5, r0
 8018750:	f002 fa24 	bl	801ab9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018754:	4604      	mov	r4, r0
 8018756:	4628      	mov	r0, r5
 8018758:	f002 f964 	bl	801aa24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801875c:	2800      	cmp	r0, #0
 801875e:	bf14      	ite	ne
 8018760:	2002      	movne	r0, #2
 8018762:	2000      	moveq	r0, #0
 8018764:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8018768:	b280      	uxth	r0, r0
 801876a:	bd38      	pop	{r3, r4, r5, pc}

0801876c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801876c:	b538      	push	{r3, r4, r5, lr}
 801876e:	4605      	mov	r5, r0
 8018770:	f002 fa14 	bl	801ab9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018774:	4604      	mov	r4, r0
 8018776:	4628      	mov	r0, r5
 8018778:	f002 f954 	bl	801aa24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801877c:	2800      	cmp	r0, #0
 801877e:	bf14      	ite	ne
 8018780:	2002      	movne	r0, #2
 8018782:	2000      	moveq	r0, #0
 8018784:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8018788:	f040 0001 	orr.w	r0, r0, #1
 801878c:	b280      	uxth	r0, r0
 801878e:	bd38      	pop	{r3, r4, r5, pc}

08018790 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8018790:	2000      	movs	r0, #0
 8018792:	4770      	bx	lr

08018794 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8018794:	2001      	movs	r0, #1
 8018796:	4770      	bx	lr

08018798 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8018798:	2002      	movs	r0, #2
 801879a:	4770      	bx	lr

0801879c <_ZN8touchgfx12GestureEventD1Ev>:
 801879c:	4770      	bx	lr

0801879e <_ZN8touchgfx9DragEventD1Ev>:
 801879e:	4770      	bx	lr

080187a0 <_ZN8touchgfx10ClickEventD1Ev>:
 80187a0:	4770      	bx	lr

080187a2 <_ZN8touchgfx10ClickEventD0Ev>:
 80187a2:	b510      	push	{r4, lr}
 80187a4:	4604      	mov	r4, r0
 80187a6:	210c      	movs	r1, #12
 80187a8:	f010 fbc1 	bl	8028f2e <_ZdlPvj>
 80187ac:	4620      	mov	r0, r4
 80187ae:	bd10      	pop	{r4, pc}

080187b0 <_ZN8touchgfx9DragEventD0Ev>:
 80187b0:	b510      	push	{r4, lr}
 80187b2:	4604      	mov	r4, r0
 80187b4:	2110      	movs	r1, #16
 80187b6:	f010 fbba 	bl	8028f2e <_ZdlPvj>
 80187ba:	4620      	mov	r0, r4
 80187bc:	bd10      	pop	{r4, pc}

080187be <_ZN8touchgfx12GestureEventD0Ev>:
 80187be:	b510      	push	{r4, lr}
 80187c0:	4604      	mov	r4, r0
 80187c2:	210c      	movs	r1, #12
 80187c4:	f010 fbb3 	bl	8028f2e <_ZdlPvj>
 80187c8:	4620      	mov	r0, r4
 80187ca:	bd10      	pop	{r4, pc}

080187cc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80187cc:	b530      	push	{r4, r5, lr}
 80187ce:	460d      	mov	r5, r1
 80187d0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80187d2:	b087      	sub	sp, #28
 80187d4:	4604      	mov	r4, r0
 80187d6:	b301      	cbz	r1, 801881a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80187d8:	a801      	add	r0, sp, #4
 80187da:	f7ff ff13 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80187de:	892a      	ldrh	r2, [r5, #8]
 80187e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80187e4:	7928      	ldrb	r0, [r5, #4]
 80187e6:	1ad2      	subs	r2, r2, r3
 80187e8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80187ea:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80187ee:	441a      	add	r2, r3
 80187f0:	896b      	ldrh	r3, [r5, #10]
 80187f2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80187f6:	f88d 0010 	strb.w	r0, [sp, #16]
 80187fa:	1b5b      	subs	r3, r3, r5
 80187fc:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 80187fe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018800:	442b      	add	r3, r5
 8018802:	4d07      	ldr	r5, [pc, #28]	@ (8018820 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018804:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018808:	a903      	add	r1, sp, #12
 801880a:	9503      	str	r5, [sp, #12]
 801880c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018810:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018814:	6803      	ldr	r3, [r0, #0]
 8018816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018818:	4798      	blx	r3
 801881a:	b007      	add	sp, #28
 801881c:	bd30      	pop	{r4, r5, pc}
 801881e:	bf00      	nop
 8018820:	0802c594 	.word	0x0802c594

08018824 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018828:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801882a:	b08a      	sub	sp, #40	@ 0x28
 801882c:	4604      	mov	r4, r0
 801882e:	460d      	mov	r5, r1
 8018830:	b113      	cbz	r3, 8018838 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8018832:	790b      	ldrb	r3, [r1, #4]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d044      	beq.n	80188c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018838:	f104 0804 	add.w	r8, r4, #4
 801883c:	a803      	add	r0, sp, #12
 801883e:	4641      	mov	r1, r8
 8018840:	f7ff fee0 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018844:	792b      	ldrb	r3, [r5, #4]
 8018846:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801884a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801884e:	b983      	cbnz	r3, 8018872 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018850:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8018854:	892a      	ldrh	r2, [r5, #8]
 8018856:	88e9      	ldrh	r1, [r5, #6]
 8018858:	4640      	mov	r0, r8
 801885a:	1b92      	subs	r2, r2, r6
 801885c:	9301      	str	r3, [sp, #4]
 801885e:	1bc9      	subs	r1, r1, r7
 8018860:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8018864:	b212      	sxth	r2, r2
 8018866:	9300      	str	r3, [sp, #0]
 8018868:	b209      	sxth	r1, r1
 801886a:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801886e:	f7fa f8f1 	bl	8012a54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8018872:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018874:	b329      	cbz	r1, 80188c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018876:	a805      	add	r0, sp, #20
 8018878:	f7ff fec4 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801887c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018880:	792b      	ldrb	r3, [r5, #4]
 8018882:	a907      	add	r1, sp, #28
 8018884:	1abf      	subs	r7, r7, r2
 8018886:	88ea      	ldrh	r2, [r5, #6]
 8018888:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801888a:	4417      	add	r7, r2
 801888c:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801888e:	f88d 3020 	strb.w	r3, [sp, #32]
 8018892:	4417      	add	r7, r2
 8018894:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018898:	1ab6      	subs	r6, r6, r2
 801889a:	892a      	ldrh	r2, [r5, #8]
 801889c:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80188a0:	4416      	add	r6, r2
 80188a2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80188a4:	4416      	add	r6, r2
 80188a6:	4a08      	ldr	r2, [pc, #32]	@ (80188c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80188a8:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80188ac:	2600      	movs	r6, #0
 80188ae:	9207      	str	r2, [sp, #28]
 80188b0:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 80188b4:	6803      	ldr	r3, [r0, #0]
 80188b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80188b8:	4798      	blx	r3
 80188ba:	792b      	ldrb	r3, [r5, #4]
 80188bc:	b10b      	cbz	r3, 80188c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80188be:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80188c2:	b00a      	add	sp, #40	@ 0x28
 80188c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188c8:	0802c56c 	.word	0x0802c56c

080188cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80188cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188d0:	460c      	mov	r4, r1
 80188d2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80188d4:	b088      	sub	sp, #32
 80188d6:	4605      	mov	r5, r0
 80188d8:	2900      	cmp	r1, #0
 80188da:	d06d      	beq.n	80189b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80188dc:	4668      	mov	r0, sp
 80188de:	f7ff fe91 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80188e2:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80188e4:	88e3      	ldrh	r3, [r4, #6]
 80188e6:	f9bd 8000 	ldrsh.w	r8, [sp]
 80188ea:	440b      	add	r3, r1
 80188ec:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80188f0:	b21b      	sxth	r3, r3
 80188f2:	4543      	cmp	r3, r8
 80188f4:	db31      	blt.n	801895a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80188f6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80188fa:	44c4      	add	ip, r8
 80188fc:	fa0f fc8c 	sxth.w	ip, ip
 8018900:	4563      	cmp	r3, ip
 8018902:	da2a      	bge.n	801895a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018904:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8018906:	8926      	ldrh	r6, [r4, #8]
 8018908:	4416      	add	r6, r2
 801890a:	b236      	sxth	r6, r6
 801890c:	42be      	cmp	r6, r7
 801890e:	db24      	blt.n	801895a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018910:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018914:	4438      	add	r0, r7
 8018916:	b200      	sxth	r0, r0
 8018918:	4286      	cmp	r6, r0
 801891a:	da1e      	bge.n	801895a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801891c:	8963      	ldrh	r3, [r4, #10]
 801891e:	4419      	add	r1, r3
 8018920:	b209      	sxth	r1, r1
 8018922:	4541      	cmp	r1, r8
 8018924:	db08      	blt.n	8018938 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018926:	4561      	cmp	r1, ip
 8018928:	da06      	bge.n	8018938 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801892a:	89a3      	ldrh	r3, [r4, #12]
 801892c:	441a      	add	r2, r3
 801892e:	b212      	sxth	r2, r2
 8018930:	42ba      	cmp	r2, r7
 8018932:	db01      	blt.n	8018938 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018934:	4282      	cmp	r2, r0
 8018936:	db10      	blt.n	801895a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018938:	4b21      	ldr	r3, [pc, #132]	@ (80189c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801893a:	a904      	add	r1, sp, #16
 801893c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801893e:	9304      	str	r3, [sp, #16]
 8018940:	2302      	movs	r3, #2
 8018942:	f88d 3014 	strb.w	r3, [sp, #20]
 8018946:	2300      	movs	r3, #0
 8018948:	f8ad 3016 	strh.w	r3, [sp, #22]
 801894c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018950:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018954:	6803      	ldr	r3, [r0, #0]
 8018956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018958:	4798      	blx	r3
 801895a:	1d29      	adds	r1, r5, #4
 801895c:	a802      	add	r0, sp, #8
 801895e:	f7ff fe51 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018962:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018966:	88e0      	ldrh	r0, [r4, #6]
 8018968:	eba3 0808 	sub.w	r8, r3, r8
 801896c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018970:	7921      	ldrb	r1, [r4, #4]
 8018972:	fa1f f888 	uxth.w	r8, r8
 8018976:	1bdf      	subs	r7, r3, r7
 8018978:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801897c:	b2bb      	uxth	r3, r7
 801897e:	4440      	add	r0, r8
 8018980:	8922      	ldrh	r2, [r4, #8]
 8018982:	8967      	ldrh	r7, [r4, #10]
 8018984:	4460      	add	r0, ip
 8018986:	89a4      	ldrh	r4, [r4, #12]
 8018988:	441a      	add	r2, r3
 801898a:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801898c:	44b8      	add	r8, r7
 801898e:	4423      	add	r3, r4
 8018990:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018994:	4432      	add	r2, r6
 8018996:	44e0      	add	r8, ip
 8018998:	4433      	add	r3, r6
 801899a:	4c0a      	ldr	r4, [pc, #40]	@ (80189c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801899c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801899e:	f88d 1014 	strb.w	r1, [sp, #20]
 80189a2:	a904      	add	r1, sp, #16
 80189a4:	9404      	str	r4, [sp, #16]
 80189a6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80189aa:	f8ad 801a 	strh.w	r8, [sp, #26]
 80189ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80189b2:	6803      	ldr	r3, [r0, #0]
 80189b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80189b6:	4798      	blx	r3
 80189b8:	b008      	add	sp, #32
 80189ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189be:	bf00      	nop
 80189c0:	0802c56c 	.word	0x0802c56c
 80189c4:	0802c580 	.word	0x0802c580

080189c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80189c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80189ca:	4604      	mov	r4, r0
 80189cc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80189d0:	3201      	adds	r2, #1
 80189d2:	d112      	bne.n	80189fa <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80189d4:	2500      	movs	r5, #0
 80189d6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80189da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80189de:	6803      	ldr	r3, [r0, #0]
 80189e0:	9500      	str	r5, [sp, #0]
 80189e2:	466d      	mov	r5, sp
 80189e4:	f8ad 1004 	strh.w	r1, [sp, #4]
 80189e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80189ec:	4629      	mov	r1, r5
 80189ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189f0:	4798      	blx	r3
 80189f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80189f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80189fa:	4620      	mov	r0, r4
 80189fc:	b003      	add	sp, #12
 80189fe:	bd30      	pop	{r4, r5, pc}

08018a00 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018a00:	b513      	push	{r0, r1, r4, lr}
 8018a02:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018a06:	4604      	mov	r4, r0
 8018a08:	3301      	adds	r3, #1
 8018a0a:	d109      	bne.n	8018a20 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018a0c:	4601      	mov	r1, r0
 8018a0e:	4668      	mov	r0, sp
 8018a10:	f7ff fdf8 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018a14:	f8bd 3000 	ldrh.w	r3, [sp]
 8018a18:	8423      	strh	r3, [r4, #32]
 8018a1a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018a1e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018a20:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018a24:	b002      	add	sp, #8
 8018a26:	bd10      	pop	{r4, pc}

08018a28 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018a28:	b513      	push	{r0, r1, r4, lr}
 8018a2a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8018a2e:	4604      	mov	r4, r0
 8018a30:	3301      	adds	r3, #1
 8018a32:	d109      	bne.n	8018a48 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018a34:	4601      	mov	r1, r0
 8018a36:	4668      	mov	r0, sp
 8018a38:	f7ff fde4 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018a3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018a40:	8423      	strh	r3, [r4, #32]
 8018a42:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018a46:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018a48:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8018a4c:	b002      	add	sp, #8
 8018a4e:	bd10      	pop	{r4, pc}

08018a50 <_ZN8touchgfx6ScreenC1Ev>:
 8018a50:	b570      	push	{r4, r5, r6, lr}
 8018a52:	4b17      	ldr	r3, [pc, #92]	@ (8018ab0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018a54:	4605      	mov	r5, r0
 8018a56:	4a17      	ldr	r2, [pc, #92]	@ (8018ab4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018a58:	2101      	movs	r1, #1
 8018a5a:	f845 3b04 	str.w	r3, [r5], #4
 8018a5e:	2300      	movs	r3, #0
 8018a60:	6042      	str	r2, [r0, #4]
 8018a62:	4604      	mov	r4, r0
 8018a64:	8103      	strh	r3, [r0, #8]
 8018a66:	8143      	strh	r3, [r0, #10]
 8018a68:	8183      	strh	r3, [r0, #12]
 8018a6a:	81c3      	strh	r3, [r0, #14]
 8018a6c:	8203      	strh	r3, [r0, #16]
 8018a6e:	8243      	strh	r3, [r0, #18]
 8018a70:	8283      	strh	r3, [r0, #20]
 8018a72:	82c3      	strh	r3, [r0, #22]
 8018a74:	6203      	str	r3, [r0, #32]
 8018a76:	8483      	strh	r3, [r0, #36]	@ 0x24
 8018a78:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8018a7a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8018a7e:	6343      	str	r3, [r0, #52]	@ 0x34
 8018a80:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8018a84:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018a88:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018a8c:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8018a90:	4b09      	ldr	r3, [pc, #36]	@ (8018ab8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018a92:	4628      	mov	r0, r5
 8018a94:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018a98:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8018a9a:	4a08      	ldr	r2, [pc, #32]	@ (8018abc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018a9c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018aa0:	4798      	blx	r3
 8018aa2:	6863      	ldr	r3, [r4, #4]
 8018aa4:	4628      	mov	r0, r5
 8018aa6:	4631      	mov	r1, r6
 8018aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018aaa:	4798      	blx	r3
 8018aac:	4620      	mov	r0, r4
 8018aae:	bd70      	pop	{r4, r5, r6, pc}
 8018ab0:	0802c5a8 	.word	0x0802c5a8
 8018ab4:	0802bbf8 	.word	0x0802bbf8
 8018ab8:	240065f6 	.word	0x240065f6
 8018abc:	240065f4 	.word	0x240065f4

08018ac0 <_ZN8touchgfx6Screen4drawEv>:
 8018ac0:	4b09      	ldr	r3, [pc, #36]	@ (8018ae8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018ac2:	b507      	push	{r0, r1, r2, lr}
 8018ac4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ac8:	2100      	movs	r1, #0
 8018aca:	4b08      	ldr	r3, [pc, #32]	@ (8018aec <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018acc:	9100      	str	r1, [sp, #0]
 8018ace:	4669      	mov	r1, sp
 8018ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ad4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018ad8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018adc:	6803      	ldr	r3, [r0, #0]
 8018ade:	689b      	ldr	r3, [r3, #8]
 8018ae0:	4798      	blx	r3
 8018ae2:	b003      	add	sp, #12
 8018ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ae8:	240065f4 	.word	0x240065f4
 8018aec:	240065f6 	.word	0x240065f6

08018af0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018af4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018af8:	b089      	sub	sp, #36	@ 0x24
 8018afa:	4680      	mov	r8, r0
 8018afc:	460c      	mov	r4, r1
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	4615      	mov	r5, r2
 8018b02:	dd0e      	ble.n	8018b22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018b04:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	dd0a      	ble.n	8018b22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018b0c:	4628      	mov	r0, r5
 8018b0e:	f7ff ff5b 	bl	80189c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018b12:	4621      	mov	r1, r4
 8018b14:	f7fe f9fa 	bl	8016f0c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018b18:	69eb      	ldr	r3, [r5, #28]
 8018b1a:	b928      	cbnz	r0, 8018b28 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018b1c:	461d      	mov	r5, r3
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d1f4      	bne.n	8018b0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018b22:	b009      	add	sp, #36	@ 0x24
 8018b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b28:	ae04      	add	r6, sp, #16
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	f000 80b5 	beq.w	8018c9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018b30:	682b      	ldr	r3, [r5, #0]
 8018b32:	4629      	mov	r1, r5
 8018b34:	a802      	add	r0, sp, #8
 8018b36:	68db      	ldr	r3, [r3, #12]
 8018b38:	4798      	blx	r3
 8018b3a:	4628      	mov	r0, r5
 8018b3c:	f7ff ff60 	bl	8018a00 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018b40:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8018b44:	4407      	add	r7, r0
 8018b46:	4628      	mov	r0, r5
 8018b48:	f7ff ff6e 	bl	8018a28 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018b4c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018b50:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018b54:	b23f      	sxth	r7, r7
 8018b56:	4418      	add	r0, r3
 8018b58:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018b5c:	4621      	mov	r1, r4
 8018b5e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018b62:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018b66:	4630      	mov	r0, r6
 8018b68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018b6c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018b70:	f7fa f852 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8018b74:	4628      	mov	r0, r5
 8018b76:	f7ff ff27 	bl	80189c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018b7a:	ab06      	add	r3, sp, #24
 8018b7c:	4602      	mov	r2, r0
 8018b7e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018b82:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b86:	4611      	mov	r1, r2
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f7fa f845 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8018b8e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018b92:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018b96:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018b9a:	4299      	cmp	r1, r3
 8018b9c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018ba0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018ba4:	d10b      	bne.n	8018bbe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018ba6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018baa:	4552      	cmp	r2, sl
 8018bac:	d107      	bne.n	8018bbe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018bae:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018bb2:	455a      	cmp	r2, fp
 8018bb4:	d103      	bne.n	8018bbe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018bb6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018bba:	454a      	cmp	r2, r9
 8018bbc:	d06d      	beq.n	8018c9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018bbe:	f1bb 0f00 	cmp.w	fp, #0
 8018bc2:	dd65      	ble.n	8018c90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018bc4:	f1b9 0f00 	cmp.w	r9, #0
 8018bc8:	dd62      	ble.n	8018c90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018bca:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018bce:	fa1f f08a 	uxth.w	r0, sl
 8018bd2:	4552      	cmp	r2, sl
 8018bd4:	9000      	str	r0, [sp, #0]
 8018bd6:	da12      	bge.n	8018bfe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018bd8:	9301      	str	r3, [sp, #4]
 8018bda:	9b00      	ldr	r3, [sp, #0]
 8018bdc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018be0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018be4:	1a9a      	subs	r2, r3, r2
 8018be6:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018bea:	4631      	mov	r1, r6
 8018bec:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018bf0:	4640      	mov	r0, r8
 8018bf2:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018bf6:	69ea      	ldr	r2, [r5, #28]
 8018bf8:	f7ff ff7a 	bl	8018af0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018bfc:	9b01      	ldr	r3, [sp, #4]
 8018bfe:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018c02:	b29f      	uxth	r7, r3
 8018c04:	429a      	cmp	r2, r3
 8018c06:	da0d      	bge.n	8018c24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018c08:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018c0c:	1aba      	subs	r2, r7, r2
 8018c0e:	f8ad a012 	strh.w	sl, [sp, #18]
 8018c12:	4631      	mov	r1, r6
 8018c14:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018c18:	4640      	mov	r0, r8
 8018c1a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018c1e:	69ea      	ldr	r2, [r5, #28]
 8018c20:	f7ff ff66 	bl	8018af0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018c24:	8822      	ldrh	r2, [r4, #0]
 8018c26:	445f      	add	r7, fp
 8018c28:	88a3      	ldrh	r3, [r4, #4]
 8018c2a:	b2bf      	uxth	r7, r7
 8018c2c:	4413      	add	r3, r2
 8018c2e:	b23a      	sxth	r2, r7
 8018c30:	b29b      	uxth	r3, r3
 8018c32:	b219      	sxth	r1, r3
 8018c34:	4291      	cmp	r1, r2
 8018c36:	dd0d      	ble.n	8018c54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018c38:	1bdb      	subs	r3, r3, r7
 8018c3a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018c3e:	f8ad a012 	strh.w	sl, [sp, #18]
 8018c42:	4631      	mov	r1, r6
 8018c44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018c48:	4640      	mov	r0, r8
 8018c4a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018c4e:	69ea      	ldr	r2, [r5, #28]
 8018c50:	f7ff ff4e 	bl	8018af0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018c54:	88e2      	ldrh	r2, [r4, #6]
 8018c56:	8863      	ldrh	r3, [r4, #2]
 8018c58:	4413      	add	r3, r2
 8018c5a:	9a00      	ldr	r2, [sp, #0]
 8018c5c:	444a      	add	r2, r9
 8018c5e:	b29b      	uxth	r3, r3
 8018c60:	fa1f f982 	uxth.w	r9, r2
 8018c64:	b219      	sxth	r1, r3
 8018c66:	fa0f f289 	sxth.w	r2, r9
 8018c6a:	428a      	cmp	r2, r1
 8018c6c:	da15      	bge.n	8018c9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018c6e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018c72:	eba3 0309 	sub.w	r3, r3, r9
 8018c76:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018c7a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018c7e:	4631      	mov	r1, r6
 8018c80:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018c84:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018c88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018c8c:	69ea      	ldr	r2, [r5, #28]
 8018c8e:	e001      	b.n	8018c94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018c90:	69ea      	ldr	r2, [r5, #28]
 8018c92:	4621      	mov	r1, r4
 8018c94:	4640      	mov	r0, r8
 8018c96:	f7ff ff2b 	bl	8018af0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018c9a:	4628      	mov	r0, r5
 8018c9c:	f7ff fe94 	bl	80189c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018ca0:	6861      	ldr	r1, [r4, #4]
 8018ca2:	4602      	mov	r2, r0
 8018ca4:	4633      	mov	r3, r6
 8018ca6:	6820      	ldr	r0, [r4, #0]
 8018ca8:	c303      	stmia	r3!, {r0, r1}
 8018caa:	4611      	mov	r1, r2
 8018cac:	4630      	mov	r0, r6
 8018cae:	f7f9 ffb3 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8018cb2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	f77f af33 	ble.w	8018b22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018cbc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	f77f af2e 	ble.w	8018b22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018cc6:	4628      	mov	r0, r5
 8018cc8:	f7ff fe9a 	bl	8018a00 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018ccc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018cd0:	1a18      	subs	r0, r3, r0
 8018cd2:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	f7ff fea6 	bl	8018a28 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018cdc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018ce0:	4631      	mov	r1, r6
 8018ce2:	1a18      	subs	r0, r3, r0
 8018ce4:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018ce8:	4628      	mov	r0, r5
 8018cea:	682b      	ldr	r3, [r5, #0]
 8018cec:	689b      	ldr	r3, [r3, #8]
 8018cee:	4798      	blx	r3
 8018cf0:	e717      	b.n	8018b22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018cf2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018cf2:	b570      	push	{r4, r5, r6, lr}
 8018cf4:	1d06      	adds	r6, r0, #4
 8018cf6:	b086      	sub	sp, #24
 8018cf8:	460c      	mov	r4, r1
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	4631      	mov	r1, r6
 8018cfe:	4605      	mov	r5, r0
 8018d00:	a802      	add	r0, sp, #8
 8018d02:	9301      	str	r3, [sp, #4]
 8018d04:	f7ff fc7e 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d08:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018d0c:	8822      	ldrh	r2, [r4, #0]
 8018d0e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018d12:	1ad2      	subs	r2, r2, r3
 8018d14:	8863      	ldrh	r3, [r4, #2]
 8018d16:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018d1a:	1a5b      	subs	r3, r3, r1
 8018d1c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018d20:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018d24:	aa01      	add	r2, sp, #4
 8018d26:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018d2a:	4630      	mov	r0, r6
 8018d2c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018d30:	a904      	add	r1, sp, #16
 8018d32:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018d36:	f7fa f847 	bl	8012dc8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018d3a:	9a01      	ldr	r2, [sp, #4]
 8018d3c:	b11a      	cbz	r2, 8018d46 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8018d3e:	4621      	mov	r1, r4
 8018d40:	4628      	mov	r0, r5
 8018d42:	f7ff fed5 	bl	8018af0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018d46:	b006      	add	sp, #24
 8018d48:	bd70      	pop	{r4, r5, r6, pc}

08018d4a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018d4a:	4602      	mov	r2, r0
 8018d4c:	b530      	push	{r4, r5, lr}
 8018d4e:	4604      	mov	r4, r0
 8018d50:	b085      	sub	sp, #20
 8018d52:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018d56:	460d      	mov	r5, r1
 8018d58:	466b      	mov	r3, sp
 8018d5a:	6851      	ldr	r1, [r2, #4]
 8018d5c:	c303      	stmia	r3!, {r0, r1}
 8018d5e:	4629      	mov	r1, r5
 8018d60:	4668      	mov	r0, sp
 8018d62:	f7f9 ff59 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8018d66:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018d6a:	b12b      	cbz	r3, 8018d78 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018d6c:	4669      	mov	r1, sp
 8018d6e:	4620      	mov	r0, r4
 8018d70:	f7ff ffbf 	bl	8018cf2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018d74:	b005      	add	sp, #20
 8018d76:	bd30      	pop	{r4, r5, pc}
 8018d78:	3404      	adds	r4, #4
 8018d7a:	a802      	add	r0, sp, #8
 8018d7c:	4621      	mov	r1, r4
 8018d7e:	f7ff fc41 	bl	8018604 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d82:	f8bd 3000 	ldrh.w	r3, [sp]
 8018d86:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018d8a:	4669      	mov	r1, sp
 8018d8c:	4620      	mov	r0, r4
 8018d8e:	1a9b      	subs	r3, r3, r2
 8018d90:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018d94:	f8ad 3000 	strh.w	r3, [sp]
 8018d98:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018d9c:	1a9b      	subs	r3, r3, r2
 8018d9e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018da2:	f7f9 ffd8 	bl	8012d56 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018da6:	e7e5      	b.n	8018d74 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018da8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018da8:	460b      	mov	r3, r1
 8018daa:	680a      	ldr	r2, [r1, #0]
 8018dac:	1d01      	adds	r1, r0, #4
 8018dae:	6992      	ldr	r2, [r2, #24]
 8018db0:	4618      	mov	r0, r3
 8018db2:	4710      	bx	r2

08018db4 <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst>:
 8018db4:	4298      	cmp	r0, r3
 8018db6:	d200      	bcs.n	8018dba <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0x6>
 8018db8:	b913      	cbnz	r3, 8018dc0 <_ZN8touchgfx15EasingEquations14cubicEaseInOutEtsst+0xc>
 8018dba:	440a      	add	r2, r1
 8018dbc:	b210      	sxth	r0, r2
 8018dbe:	4770      	bx	lr
 8018dc0:	ee07 0a90 	vmov	s15, r0
 8018dc4:	ee07 3a10 	vmov	s14, r3
 8018dc8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8018dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018dd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018dd4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018dd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018ddc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8018de0:	ee07 2a90 	vmov	s15, r2
 8018de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018de8:	ee07 1a90 	vmov	s15, r1
 8018dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018df0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018df4:	eef4 6ae5 	vcmpe.f32	s13, s11
 8018df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dfc:	bf55      	itete	pl
 8018dfe:	eef0 5a00 	vmovpl.f32	s11, #0	@ 0x40000000  2.0
 8018e02:	ee26 7a87 	vmulmi.f32	s14, s13, s14
 8018e06:	ee76 6ae5 	vsubpl.f32	s13, s13, s11
 8018e0a:	ee27 7a26 	vmulmi.f32	s14, s14, s13
 8018e0e:	bf57      	itett	pl
 8018e10:	ee26 5aa6 	vmulpl.f32	s10, s13, s13
 8018e14:	eee7 7a26 	vfmami.f32	s15, s14, s13
 8018e18:	eee5 5a26 	vfmapl.f32	s11, s10, s13
 8018e1c:	eee5 7a87 	vfmapl.f32	s15, s11, s14
 8018e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e28:	bfcc      	ite	gt
 8018e2a:	ee77 7a86 	vaddgt.f32	s15, s15, s12
 8018e2e:	ee77 7ac6 	vsuble.f32	s15, s15, s12
 8018e32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e36:	ee17 3a90 	vmov	r3, s15
 8018e3a:	b218      	sxth	r0, r3
 8018e3c:	4770      	bx	lr

08018e3e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8018e3e:	4298      	cmp	r0, r3
 8018e40:	d200      	bcs.n	8018e44 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8018e42:	b913      	cbnz	r3, 8018e4a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8018e44:	440a      	add	r2, r1
 8018e46:	b210      	sxth	r0, r2
 8018e48:	4770      	bx	lr
 8018e4a:	ee07 2a90 	vmov	s15, r2
 8018e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018e52:	ee07 0a90 	vmov	s15, r0
 8018e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018e5e:	ee07 3a10 	vmov	s14, r3
 8018e62:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018e66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8018e6a:	ee07 1a90 	vmov	s15, r1
 8018e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e82:	bfcc      	ite	gt
 8018e84:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8018e88:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8018e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e90:	ee17 3a90 	vmov	r3, s15
 8018e94:	b218      	sxth	r0, r3
 8018e96:	4770      	bx	lr

08018e98 <_ZN8touchgfx12TextProviderC1Ev>:
 8018e98:	b538      	push	{r3, r4, r5, lr}
 8018e9a:	2500      	movs	r5, #0
 8018e9c:	2302      	movs	r3, #2
 8018e9e:	4604      	mov	r4, r0
 8018ea0:	220e      	movs	r2, #14
 8018ea2:	7403      	strb	r3, [r0, #16]
 8018ea4:	4629      	mov	r1, r5
 8018ea6:	6145      	str	r5, [r0, #20]
 8018ea8:	7605      	strb	r5, [r0, #24]
 8018eaa:	83c5      	strh	r5, [r0, #30]
 8018eac:	8405      	strh	r5, [r0, #32]
 8018eae:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8018eb0:	8705      	strh	r5, [r0, #56]	@ 0x38
 8018eb2:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8018eb4:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8018eb8:	e9c0 5500 	strd	r5, r5, [r0]
 8018ebc:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8018ec0:	304c      	adds	r0, #76	@ 0x4c
 8018ec2:	f010 fc1a 	bl	80296fa <memset>
 8018ec6:	2301      	movs	r3, #1
 8018ec8:	4620      	mov	r0, r4
 8018eca:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8018ece:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018ed2:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8018ed6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8018eda:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8018ede:	f7f6 fb87 	bl	800f5f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018ee2:	4620      	mov	r0, r4
 8018ee4:	bd38      	pop	{r3, r4, r5, pc}

08018ee6 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8018ee6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018ee8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018eec:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8018eee:	fab0 f080 	clz	r0, r0
 8018ef2:	0940      	lsrs	r0, r0, #5
 8018ef4:	4770      	bx	lr

08018ef6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018ef6:	b530      	push	{r4, r5, lr}
 8018ef8:	2500      	movs	r5, #0
 8018efa:	2401      	movs	r4, #1
 8018efc:	6843      	ldr	r3, [r0, #4]
 8018efe:	b913      	cbnz	r3, 8018f06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018f00:	6803      	ldr	r3, [r0, #0]
 8018f02:	b313      	cbz	r3, 8018f4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018f04:	6043      	str	r3, [r0, #4]
 8018f06:	7e03      	ldrb	r3, [r0, #24]
 8018f08:	b143      	cbz	r3, 8018f1c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018f0a:	6943      	ldr	r3, [r0, #20]
 8018f0c:	b12b      	cbz	r3, 8018f1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018f0e:	881a      	ldrh	r2, [r3, #0]
 8018f10:	b11a      	cbz	r2, 8018f1a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018f12:	1c9a      	adds	r2, r3, #2
 8018f14:	6142      	str	r2, [r0, #20]
 8018f16:	8818      	ldrh	r0, [r3, #0]
 8018f18:	bd30      	pop	{r4, r5, pc}
 8018f1a:	7605      	strb	r5, [r0, #24]
 8018f1c:	6843      	ldr	r3, [r0, #4]
 8018f1e:	8819      	ldrh	r1, [r3, #0]
 8018f20:	b199      	cbz	r1, 8018f4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018f22:	1c9a      	adds	r2, r3, #2
 8018f24:	2902      	cmp	r1, #2
 8018f26:	6042      	str	r2, [r0, #4]
 8018f28:	d1f5      	bne.n	8018f16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8018f2a:	7c03      	ldrb	r3, [r0, #16]
 8018f2c:	2b01      	cmp	r3, #1
 8018f2e:	d8e5      	bhi.n	8018efc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018f30:	1c5a      	adds	r2, r3, #1
 8018f32:	3302      	adds	r3, #2
 8018f34:	7402      	strb	r2, [r0, #16]
 8018f36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8018f3a:	6143      	str	r3, [r0, #20]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d0dd      	beq.n	8018efc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018f40:	881b      	ldrh	r3, [r3, #0]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d0da      	beq.n	8018efc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018f46:	7604      	strb	r4, [r0, #24]
 8018f48:	e7d8      	b.n	8018efc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018f4a:	2000      	movs	r0, #0
 8018f4c:	e7e4      	b.n	8018f18 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018f4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018f4e:	6001      	str	r1, [r0, #0]
 8018f50:	2100      	movs	r1, #0
 8018f52:	b430      	push	{r4, r5}
 8018f54:	6041      	str	r1, [r0, #4]
 8018f56:	6815      	ldr	r5, [r2, #0]
 8018f58:	6085      	str	r5, [r0, #8]
 8018f5a:	6852      	ldr	r2, [r2, #4]
 8018f5c:	6443      	str	r3, [r0, #68]	@ 0x44
 8018f5e:	9b02      	ldr	r3, [sp, #8]
 8018f60:	60c2      	str	r2, [r0, #12]
 8018f62:	7401      	strb	r1, [r0, #16]
 8018f64:	6141      	str	r1, [r0, #20]
 8018f66:	7601      	strb	r1, [r0, #24]
 8018f68:	8701      	strh	r1, [r0, #56]	@ 0x38
 8018f6a:	8401      	strh	r1, [r0, #32]
 8018f6c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8018f70:	6483      	str	r3, [r0, #72]	@ 0x48
 8018f72:	bc30      	pop	{r4, r5}
 8018f74:	f7f6 bb3c 	b.w	800f5f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08018f78 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8018f78:	b408      	push	{r3}
 8018f7a:	b510      	push	{r4, lr}
 8018f7c:	b085      	sub	sp, #20
 8018f7e:	ac07      	add	r4, sp, #28
 8018f80:	f854 3b04 	ldr.w	r3, [r4], #4
 8018f84:	9300      	str	r3, [sp, #0]
 8018f86:	4613      	mov	r3, r2
 8018f88:	4622      	mov	r2, r4
 8018f8a:	9403      	str	r4, [sp, #12]
 8018f8c:	f7ff ffdf 	bl	8018f4e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018f90:	b005      	add	sp, #20
 8018f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f96:	b001      	add	sp, #4
 8018f98:	4770      	bx	lr

08018f9a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8018f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f9c:	4605      	mov	r5, r0
 8018f9e:	4608      	mov	r0, r1
 8018fa0:	b1f1      	cbz	r1, 8018fe0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8018fa2:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8018fa6:	460b      	mov	r3, r1
 8018fa8:	f101 0708 	add.w	r7, r1, #8
 8018fac:	4622      	mov	r2, r4
 8018fae:	6818      	ldr	r0, [r3, #0]
 8018fb0:	3308      	adds	r3, #8
 8018fb2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018fb6:	4626      	mov	r6, r4
 8018fb8:	42bb      	cmp	r3, r7
 8018fba:	c603      	stmia	r6!, {r0, r1}
 8018fbc:	4634      	mov	r4, r6
 8018fbe:	d1f6      	bne.n	8018fae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018fc0:	6818      	ldr	r0, [r3, #0]
 8018fc2:	6030      	str	r0, [r6, #0]
 8018fc4:	4610      	mov	r0, r2
 8018fc6:	889b      	ldrh	r3, [r3, #4]
 8018fc8:	80b3      	strh	r3, [r6, #4]
 8018fca:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8018fce:	015b      	lsls	r3, r3, #5
 8018fd0:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8018fd4:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8018fd8:	430b      	orrs	r3, r1
 8018fda:	425b      	negs	r3, r3
 8018fdc:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8018fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018fe2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018fe2:	b538      	push	{r3, r4, r5, lr}
 8018fe4:	460c      	mov	r4, r1
 8018fe6:	6811      	ldr	r1, [r2, #0]
 8018fe8:	4610      	mov	r0, r2
 8018fea:	68cd      	ldr	r5, [r1, #12]
 8018fec:	4619      	mov	r1, r3
 8018fee:	47a8      	blx	r5
 8018ff0:	2800      	cmp	r0, #0
 8018ff2:	bf08      	it	eq
 8018ff4:	4620      	moveq	r0, r4
 8018ff6:	bd38      	pop	{r3, r4, r5, pc}

08018ff8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ffc:	468c      	mov	ip, r1
 8018ffe:	4605      	mov	r5, r0
 8019000:	4614      	mov	r4, r2
 8019002:	b942      	cbnz	r2, 8019016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8019004:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8019008:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801900c:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8019010:	4620      	mov	r0, r4
 8019012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019016:	7b50      	ldrb	r0, [r2, #13]
 8019018:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801901c:	8893      	ldrh	r3, [r2, #4]
 801901e:	0106      	lsls	r6, r0, #4
 8019020:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8019024:	79e6      	ldrb	r6, [r4, #7]
 8019026:	4316      	orrs	r6, r2
 8019028:	185a      	adds	r2, r3, r1
 801902a:	b291      	uxth	r1, r2
 801902c:	b2b7      	uxth	r7, r6
 801902e:	291d      	cmp	r1, #29
 8019030:	d87f      	bhi.n	8019132 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8019032:	2201      	movs	r2, #1
 8019034:	10f6      	asrs	r6, r6, #3
 8019036:	408a      	lsls	r2, r1
 8019038:	498b      	ldr	r1, [pc, #556]	@ (8019268 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 801903a:	420a      	tst	r2, r1
 801903c:	d12e      	bne.n	801909c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801903e:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8019042:	d076      	beq.n	8019132 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8019044:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8019048:	4623      	mov	r3, r4
 801904a:	f104 0e08 	add.w	lr, r4, #8
 801904e:	4614      	mov	r4, r2
 8019050:	6818      	ldr	r0, [r3, #0]
 8019052:	3308      	adds	r3, #8
 8019054:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019058:	4694      	mov	ip, r2
 801905a:	4573      	cmp	r3, lr
 801905c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019060:	4662      	mov	r2, ip
 8019062:	d1f5      	bne.n	8019050 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8019064:	6818      	ldr	r0, [r3, #0]
 8019066:	f8cc 0000 	str.w	r0, [ip]
 801906a:	889b      	ldrh	r3, [r3, #4]
 801906c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019070:	b2b3      	uxth	r3, r6
 8019072:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8019076:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801907a:	1aca      	subs	r2, r1, r3
 801907c:	1bcf      	subs	r7, r1, r7
 801907e:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8019082:	b292      	uxth	r2, r2
 8019084:	1afb      	subs	r3, r7, r3
 8019086:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801908a:	10d2      	asrs	r2, r2, #3
 801908c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8019090:	4302      	orrs	r2, r0
 8019092:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8019096:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801909a:	e7b9      	b.n	8019010 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801909c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80190a0:	4623      	mov	r3, r4
 80190a2:	f104 0808 	add.w	r8, r4, #8
 80190a6:	4614      	mov	r4, r2
 80190a8:	6818      	ldr	r0, [r3, #0]
 80190aa:	3308      	adds	r3, #8
 80190ac:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80190b0:	4696      	mov	lr, r2
 80190b2:	4543      	cmp	r3, r8
 80190b4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80190b8:	4672      	mov	r2, lr
 80190ba:	d1f5      	bne.n	80190a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 80190bc:	6818      	ldr	r0, [r3, #0]
 80190be:	f8ce 0000 	str.w	r0, [lr]
 80190c2:	889b      	ldrh	r3, [r3, #4]
 80190c4:	f8ae 3004 	strh.w	r3, [lr, #4]
 80190c8:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 80190ca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80190ce:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 80190d0:	f640 6333 	movw	r3, #3635	@ 0xe33
 80190d4:	4299      	cmp	r1, r3
 80190d6:	d111      	bne.n	80190fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 80190d8:	f8dc 3000 	ldr.w	r3, [ip]
 80190dc:	4660      	mov	r0, ip
 80190de:	68db      	ldr	r3, [r3, #12]
 80190e0:	4798      	blx	r3
 80190e2:	7b41      	ldrb	r1, [r0, #13]
 80190e4:	00cb      	lsls	r3, r1, #3
 80190e6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80190ea:	7a03      	ldrb	r3, [r0, #8]
 80190ec:	4313      	orrs	r3, r2
 80190ee:	064a      	lsls	r2, r1, #25
 80190f0:	bf44      	itt	mi
 80190f2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80190f6:	b21b      	sxthmi	r3, r3
 80190f8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80190fc:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8019100:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8019104:	443b      	add	r3, r7
 8019106:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801910a:	4433      	add	r3, r6
 801910c:	b29b      	uxth	r3, r3
 801910e:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8019112:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8019116:	10db      	asrs	r3, r3, #3
 8019118:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801911c:	4313      	orrs	r3, r2
 801911e:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8019122:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8019126:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801912a:	1a9b      	subs	r3, r3, r2
 801912c:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8019130:	e76e      	b.n	8019010 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8019132:	f023 0204 	bic.w	r2, r3, #4
 8019136:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801913a:	428a      	cmp	r2, r1
 801913c:	d003      	beq.n	8019146 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801913e:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8019142:	4293      	cmp	r3, r2
 8019144:	d138      	bne.n	80191b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8019146:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801914a:	4622      	mov	r2, r4
 801914c:	f104 0808 	add.w	r8, r4, #8
 8019150:	4634      	mov	r4, r6
 8019152:	6810      	ldr	r0, [r2, #0]
 8019154:	3208      	adds	r2, #8
 8019156:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801915a:	46b6      	mov	lr, r6
 801915c:	4542      	cmp	r2, r8
 801915e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019162:	4676      	mov	r6, lr
 8019164:	d1f5      	bne.n	8019152 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8019166:	6810      	ldr	r0, [r2, #0]
 8019168:	3b01      	subs	r3, #1
 801916a:	4621      	mov	r1, r4
 801916c:	f8ce 0000 	str.w	r0, [lr]
 8019170:	b29b      	uxth	r3, r3
 8019172:	8892      	ldrh	r2, [r2, #4]
 8019174:	4628      	mov	r0, r5
 8019176:	f8ae 2004 	strh.w	r2, [lr, #4]
 801917a:	4662      	mov	r2, ip
 801917c:	f7ff ff31 	bl	8018fe2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019180:	7b41      	ldrb	r1, [r0, #13]
 8019182:	00cb      	lsls	r3, r1, #3
 8019184:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019188:	7a03      	ldrb	r3, [r0, #8]
 801918a:	0648      	lsls	r0, r1, #25
 801918c:	ea43 0302 	orr.w	r3, r3, r2
 8019190:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8019194:	bf44      	itt	mi
 8019196:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801919a:	b21b      	sxthmi	r3, r3
 801919c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80191a0:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80191a4:	005b      	lsls	r3, r3, #1
 80191a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80191aa:	4313      	orrs	r3, r2
 80191ac:	115a      	asrs	r2, r3, #5
 80191ae:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80191b2:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 80191b6:	e047      	b.n	8019248 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 80191b8:	00c2      	lsls	r2, r0, #3
 80191ba:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80191be:	7a22      	ldrb	r2, [r4, #8]
 80191c0:	430a      	orrs	r2, r1
 80191c2:	0641      	lsls	r1, r0, #25
 80191c4:	f640 6109 	movw	r1, #3593	@ 0xe09
 80191c8:	bf44      	itt	mi
 80191ca:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 80191ce:	b212      	sxthmi	r2, r2
 80191d0:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 80191d4:	f023 0210 	bic.w	r2, r3, #16
 80191d8:	428a      	cmp	r2, r1
 80191da:	d003      	beq.n	80191e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 80191dc:	f640 6213 	movw	r2, #3603	@ 0xe13
 80191e0:	4293      	cmp	r3, r2
 80191e2:	d13e      	bne.n	8019262 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 80191e4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80191e8:	f104 0808 	add.w	r8, r4, #8
 80191ec:	4696      	mov	lr, r2
 80191ee:	6820      	ldr	r0, [r4, #0]
 80191f0:	3408      	adds	r4, #8
 80191f2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80191f6:	4616      	mov	r6, r2
 80191f8:	4544      	cmp	r4, r8
 80191fa:	c603      	stmia	r6!, {r0, r1}
 80191fc:	4632      	mov	r2, r6
 80191fe:	d1f6      	bne.n	80191ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8019200:	6820      	ldr	r0, [r4, #0]
 8019202:	6030      	str	r0, [r6, #0]
 8019204:	4628      	mov	r0, r5
 8019206:	88a1      	ldrh	r1, [r4, #4]
 8019208:	4674      	mov	r4, lr
 801920a:	80b1      	strh	r1, [r6, #4]
 801920c:	4671      	mov	r1, lr
 801920e:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8019212:	0076      	lsls	r6, r6, #1
 8019214:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8019218:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801921c:	4316      	orrs	r6, r2
 801921e:	f640 6213 	movw	r2, #3603	@ 0xe13
 8019222:	4293      	cmp	r3, r2
 8019224:	4662      	mov	r2, ip
 8019226:	bf16      	itet	ne
 8019228:	f103 33ff 	addne.w	r3, r3, #4294967295
 801922c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8019230:	b29b      	uxthne	r3, r3
 8019232:	f7ff fed6 	bl	8018fe2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019236:	7b43      	ldrb	r3, [r0, #13]
 8019238:	7a82      	ldrb	r2, [r0, #10]
 801923a:	005b      	lsls	r3, r3, #1
 801923c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019240:	4313      	orrs	r3, r2
 8019242:	1af6      	subs	r6, r6, r3
 8019244:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8019248:	7b61      	ldrb	r1, [r4, #13]
 801924a:	00cb      	lsls	r3, r1, #3
 801924c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019250:	7a23      	ldrb	r3, [r4, #8]
 8019252:	4313      	orrs	r3, r2
 8019254:	064a      	lsls	r2, r1, #25
 8019256:	bf44      	itt	mi
 8019258:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801925c:	b21b      	sxthmi	r3, r3
 801925e:	1bdb      	subs	r3, r3, r7
 8019260:	e719      	b.n	8019096 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8019262:	2300      	movs	r3, #0
 8019264:	e7a5      	b.n	80191b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8019266:	bf00      	nop
 8019268:	3fc00079 	.word	0x3fc00079

0801926c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801926c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019270:	4604      	mov	r4, r0
 8019272:	b942      	cbnz	r2, 8019286 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019274:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019278:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801927c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8019280:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8019284:	e047      	b.n	8019316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019286:	7b51      	ldrb	r1, [r2, #13]
 8019288:	8893      	ldrh	r3, [r2, #4]
 801928a:	010d      	lsls	r5, r1, #4
 801928c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8019290:	79d5      	ldrb	r5, [r2, #7]
 8019292:	4305      	orrs	r5, r0
 8019294:	2d04      	cmp	r5, #4
 8019296:	bfcc      	ite	gt
 8019298:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801929c:	f04f 0e01 	movle.w	lr, #1
 80192a0:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80192a4:	f200 80ab 	bhi.w	80193fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80192a8:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80192ac:	4283      	cmp	r3, r0
 80192ae:	d216      	bcs.n	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80192b0:	f240 605b 	movw	r0, #1627	@ 0x65b
 80192b4:	4283      	cmp	r3, r0
 80192b6:	d859      	bhi.n	801936c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80192b8:	f240 6057 	movw	r0, #1623	@ 0x657
 80192bc:	4283      	cmp	r3, r0
 80192be:	d20e      	bcs.n	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80192c0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80192c4:	d24a      	bcs.n	801935c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80192c6:	f240 604e 	movw	r0, #1614	@ 0x64e
 80192ca:	4283      	cmp	r3, r0
 80192cc:	d207      	bcs.n	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80192ce:	f240 601a 	movw	r0, #1562	@ 0x61a
 80192d2:	4283      	cmp	r3, r0
 80192d4:	d02a      	beq.n	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80192d6:	d821      	bhi.n	801931c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80192d8:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 80192dc:	d35b      	bcc.n	8019396 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80192de:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 80192e2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80192e6:	f040 80d0 	bne.w	801948a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80192ea:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 80192ee:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80192f2:	f040 80ca 	bne.w	801948a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80192f6:	00cb      	lsls	r3, r1, #3
 80192f8:	0649      	lsls	r1, r1, #25
 80192fa:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80192fe:	7a13      	ldrb	r3, [r2, #8]
 8019300:	ea43 0300 	orr.w	r3, r3, r0
 8019304:	bf44      	itt	mi
 8019306:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801930a:	b21b      	sxthmi	r3, r3
 801930c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019310:	1b5d      	subs	r5, r3, r5
 8019312:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8019316:	4610      	mov	r0, r2
 8019318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801931c:	f240 604b 	movw	r0, #1611	@ 0x64b
 8019320:	4283      	cmp	r3, r0
 8019322:	d338      	bcc.n	8019396 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019324:	f240 604c 	movw	r0, #1612	@ 0x64c
 8019328:	4283      	cmp	r3, r0
 801932a:	d9d8      	bls.n	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801932c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8019330:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8019334:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8019338:	f040 80f3 	bne.w	8019522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801933c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019340:	f040 80ef 	bne.w	8019522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019344:	00cb      	lsls	r3, r1, #3
 8019346:	064e      	lsls	r6, r1, #25
 8019348:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801934c:	7a13      	ldrb	r3, [r2, #8]
 801934e:	ea43 0300 	orr.w	r3, r3, r0
 8019352:	bf44      	itt	mi
 8019354:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019358:	b21b      	sxthmi	r3, r3
 801935a:	e7d9      	b.n	8019310 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801935c:	f240 6054 	movw	r0, #1620	@ 0x654
 8019360:	4283      	cmp	r3, r0
 8019362:	d8e3      	bhi.n	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019364:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8019368:	d9e0      	bls.n	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801936a:	e7b8      	b.n	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801936c:	f240 6074 	movw	r0, #1652	@ 0x674
 8019370:	4283      	cmp	r3, r0
 8019372:	d0b4      	beq.n	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019374:	d82d      	bhi.n	80193d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8019376:	f240 605e 	movw	r0, #1630	@ 0x65e
 801937a:	4283      	cmp	r3, r0
 801937c:	d804      	bhi.n	8019388 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801937e:	f240 605d 	movw	r0, #1629	@ 0x65d
 8019382:	4283      	cmp	r3, r0
 8019384:	d3d2      	bcc.n	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019386:	e7aa      	b.n	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019388:	f240 605f 	movw	r0, #1631	@ 0x65f
 801938c:	4283      	cmp	r3, r0
 801938e:	d0cd      	beq.n	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019390:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8019394:	d0a3      	beq.n	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019396:	00cb      	lsls	r3, r1, #3
 8019398:	0649      	lsls	r1, r1, #25
 801939a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801939e:	7a13      	ldrb	r3, [r2, #8]
 80193a0:	ea43 0300 	orr.w	r3, r3, r0
 80193a4:	bf44      	itt	mi
 80193a6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80193aa:	b21b      	sxthmi	r3, r3
 80193ac:	1b5d      	subs	r5, r3, r5
 80193ae:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80193b2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80193b6:	7b53      	ldrb	r3, [r2, #13]
 80193b8:	015b      	lsls	r3, r3, #5
 80193ba:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80193be:	7993      	ldrb	r3, [r2, #6]
 80193c0:	430b      	orrs	r3, r1
 80193c2:	2105      	movs	r1, #5
 80193c4:	005b      	lsls	r3, r3, #1
 80193c6:	fb93 f3f1 	sdiv	r3, r3, r1
 80193ca:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80193ce:	440b      	add	r3, r1
 80193d0:	e756      	b.n	8019280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80193d2:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80193d6:	4283      	cmp	r3, r0
 80193d8:	d809      	bhi.n	80193ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80193da:	f240 60df 	movw	r0, #1759	@ 0x6df
 80193de:	4283      	cmp	r3, r0
 80193e0:	f4bf af7d 	bcs.w	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80193e4:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 80193e8:	2b05      	cmp	r3, #5
 80193ea:	d8d4      	bhi.n	8019396 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80193ec:	e777      	b.n	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80193ee:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 80193f2:	4283      	cmp	r3, r0
 80193f4:	d09a      	beq.n	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80193f6:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 80193fa:	4283      	cmp	r3, r0
 80193fc:	e7ca      	b.n	8019394 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80193fe:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8019402:	d22b      	bcs.n	801945c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019404:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8019408:	4283      	cmp	r3, r0
 801940a:	d28f      	bcs.n	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801940c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019410:	4283      	cmp	r3, r0
 8019412:	d816      	bhi.n	8019442 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019414:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8019418:	4283      	cmp	r3, r0
 801941a:	f4bf af60 	bcs.w	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801941e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8019422:	4283      	cmp	r3, r0
 8019424:	d80a      	bhi.n	801943c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8019426:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801942a:	4283      	cmp	r3, r0
 801942c:	f4bf af57 	bcs.w	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019430:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8019434:	4283      	cmp	r3, r0
 8019436:	f43f af79 	beq.w	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801943a:	e7ac      	b.n	8019396 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801943c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8019440:	e7f8      	b.n	8019434 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8019442:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8019446:	4283      	cmp	r3, r0
 8019448:	d802      	bhi.n	8019450 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801944a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801944e:	e798      	b.n	8019382 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019450:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8019454:	4283      	cmp	r3, r0
 8019456:	f47f af42 	bne.w	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801945a:	e767      	b.n	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801945c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8019460:	4283      	cmp	r3, r0
 8019462:	f43f af63 	beq.w	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019466:	d802      	bhi.n	801946e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8019468:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801946c:	e7f2      	b.n	8019454 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801946e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8019472:	4283      	cmp	r3, r0
 8019474:	d805      	bhi.n	8019482 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8019476:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801947a:	4283      	cmp	r3, r0
 801947c:	f4ff af2f 	bcc.w	80192de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019480:	e754      	b.n	801932c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019482:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8019486:	4283      	cmp	r3, r0
 8019488:	e7af      	b.n	80193ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801948a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801948e:	4617      	mov	r7, r2
 8019490:	f102 0808 	add.w	r8, r2, #8
 8019494:	4666      	mov	r6, ip
 8019496:	6838      	ldr	r0, [r7, #0]
 8019498:	3708      	adds	r7, #8
 801949a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801949e:	46e6      	mov	lr, ip
 80194a0:	4547      	cmp	r7, r8
 80194a2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80194a6:	46f4      	mov	ip, lr
 80194a8:	d1f5      	bne.n	8019496 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80194aa:	6838      	ldr	r0, [r7, #0]
 80194ac:	f8ce 0000 	str.w	r0, [lr]
 80194b0:	88b9      	ldrh	r1, [r7, #4]
 80194b2:	f8ae 1004 	strh.w	r1, [lr, #4]
 80194b6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80194ba:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80194be:	d009      	beq.n	80194d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80194c0:	7b51      	ldrb	r1, [r2, #13]
 80194c2:	7992      	ldrb	r2, [r2, #6]
 80194c4:	0149      	lsls	r1, r1, #5
 80194c6:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80194ca:	4311      	orrs	r1, r2
 80194cc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80194d0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80194d4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80194d8:	b2ad      	uxth	r5, r5
 80194da:	d00d      	beq.n	80194f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80194dc:	442b      	add	r3, r5
 80194de:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80194e2:	b29b      	uxth	r3, r3
 80194e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80194e8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80194ec:	10db      	asrs	r3, r3, #3
 80194ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80194f2:	4313      	orrs	r3, r2
 80194f4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80194f8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80194fc:	00cb      	lsls	r3, r1, #3
 80194fe:	064f      	lsls	r7, r1, #25
 8019500:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019504:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8019508:	ea43 0302 	orr.w	r3, r3, r2
 801950c:	bf44      	itt	mi
 801950e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019512:	b21b      	sxthmi	r3, r3
 8019514:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019518:	1b5b      	subs	r3, r3, r5
 801951a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801951e:	4632      	mov	r2, r6
 8019520:	e6f9      	b.n	8019316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019522:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8019526:	4617      	mov	r7, r2
 8019528:	f102 0908 	add.w	r9, r2, #8
 801952c:	4666      	mov	r6, ip
 801952e:	6838      	ldr	r0, [r7, #0]
 8019530:	3708      	adds	r7, #8
 8019532:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019536:	46e0      	mov	r8, ip
 8019538:	454f      	cmp	r7, r9
 801953a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801953e:	46c4      	mov	ip, r8
 8019540:	d1f5      	bne.n	801952e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8019542:	6838      	ldr	r0, [r7, #0]
 8019544:	f8c8 0000 	str.w	r0, [r8]
 8019548:	88b9      	ldrh	r1, [r7, #4]
 801954a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801954e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8019552:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8019556:	d009      	beq.n	801956c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8019558:	7b51      	ldrb	r1, [r2, #13]
 801955a:	7992      	ldrb	r2, [r2, #6]
 801955c:	0149      	lsls	r1, r1, #5
 801955e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8019562:	4311      	orrs	r1, r2
 8019564:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019568:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801956c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019570:	d00e      	beq.n	8019590 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8019572:	eba3 030e 	sub.w	r3, r3, lr
 8019576:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801957a:	b29b      	uxth	r3, r3
 801957c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8019580:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8019584:	10db      	asrs	r3, r3, #3
 8019586:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801958a:	4313      	orrs	r3, r2
 801958c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8019590:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8019594:	00cb      	lsls	r3, r1, #3
 8019596:	0648      	lsls	r0, r1, #25
 8019598:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801959c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80195a0:	ea43 0302 	orr.w	r3, r3, r2
 80195a4:	bf44      	itt	mi
 80195a6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80195aa:	b21b      	sxthmi	r3, r3
 80195ac:	1b5d      	subs	r5, r3, r5
 80195ae:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80195b2:	e7b4      	b.n	801951e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080195b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80195b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195b8:	461e      	mov	r6, r3
 80195ba:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80195bc:	4604      	mov	r4, r0
 80195be:	4617      	mov	r7, r2
 80195c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80195c4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80195c8:	f7f5 ff6c 	bl	800f4a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80195cc:	4605      	mov	r5, r0
 80195ce:	b918      	cbnz	r0, 80195d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80195d0:	6030      	str	r0, [r6, #0]
 80195d2:	4628      	mov	r0, r5
 80195d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	4601      	mov	r1, r0
 80195dc:	4638      	mov	r0, r7
 80195de:	68db      	ldr	r3, [r3, #12]
 80195e0:	4798      	blx	r3
 80195e2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80195e6:	4602      	mov	r2, r0
 80195e8:	6030      	str	r0, [r6, #0]
 80195ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80195ee:	d213      	bcs.n	8019618 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80195f0:	4643      	mov	r3, r8
 80195f2:	4639      	mov	r1, r7
 80195f4:	4620      	mov	r0, r4
 80195f6:	f7ff fe39 	bl	801926c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80195fa:	6030      	str	r0, [r6, #0]
 80195fc:	6833      	ldr	r3, [r6, #0]
 80195fe:	b143      	cbz	r3, 8019612 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019600:	7b5a      	ldrb	r2, [r3, #13]
 8019602:	7a9b      	ldrb	r3, [r3, #10]
 8019604:	0052      	lsls	r2, r2, #1
 8019606:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801960a:	4313      	orrs	r3, r2
 801960c:	bf0c      	ite	eq
 801960e:	2301      	moveq	r3, #1
 8019610:	2300      	movne	r3, #0
 8019612:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8019616:	e7dc      	b.n	80195d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8019618:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801961c:	b29b      	uxth	r3, r3
 801961e:	2b7f      	cmp	r3, #127	@ 0x7f
 8019620:	d804      	bhi.n	801962c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019622:	4639      	mov	r1, r7
 8019624:	4620      	mov	r0, r4
 8019626:	f7ff fce7 	bl	8018ff8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801962a:	e7e6      	b.n	80195fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801962c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8019630:	2b00      	cmp	r3, #0
 8019632:	d0e3      	beq.n	80195fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019634:	f640 1302 	movw	r3, #2306	@ 0x902
 8019638:	429d      	cmp	r5, r3
 801963a:	d1df      	bne.n	80195fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801963c:	4601      	mov	r1, r0
 801963e:	4620      	mov	r0, r4
 8019640:	f7ff fcab 	bl	8018f9a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019644:	e7d9      	b.n	80195fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08019646 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8019646:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801964a:	461e      	mov	r6, r3
 801964c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801964e:	4604      	mov	r4, r0
 8019650:	4617      	mov	r7, r2
 8019652:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019656:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801965a:	f7f5 ff23 	bl	800f4a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801965e:	4605      	mov	r5, r0
 8019660:	b918      	cbnz	r0, 801966a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8019662:	6030      	str	r0, [r6, #0]
 8019664:	4628      	mov	r0, r5
 8019666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801966a:	683b      	ldr	r3, [r7, #0]
 801966c:	4601      	mov	r1, r0
 801966e:	4638      	mov	r0, r7
 8019670:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019674:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019678:	47c8      	blx	r9
 801967a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801967e:	4602      	mov	r2, r0
 8019680:	6030      	str	r0, [r6, #0]
 8019682:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019686:	d213      	bcs.n	80196b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8019688:	4643      	mov	r3, r8
 801968a:	4639      	mov	r1, r7
 801968c:	4620      	mov	r0, r4
 801968e:	f7ff fded 	bl	801926c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019692:	6030      	str	r0, [r6, #0]
 8019694:	6833      	ldr	r3, [r6, #0]
 8019696:	b143      	cbz	r3, 80196aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8019698:	7b5a      	ldrb	r2, [r3, #13]
 801969a:	7a9b      	ldrb	r3, [r3, #10]
 801969c:	0052      	lsls	r2, r2, #1
 801969e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80196a2:	4313      	orrs	r3, r2
 80196a4:	bf0c      	ite	eq
 80196a6:	2301      	moveq	r3, #1
 80196a8:	2300      	movne	r3, #0
 80196aa:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80196ae:	e7d9      	b.n	8019664 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80196b0:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80196b4:	b29b      	uxth	r3, r3
 80196b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80196b8:	d804      	bhi.n	80196c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80196ba:	4639      	mov	r1, r7
 80196bc:	4620      	mov	r0, r4
 80196be:	f7ff fc9b 	bl	8018ff8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80196c2:	e7e6      	b.n	8019692 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80196c4:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d0e3      	beq.n	8019694 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80196cc:	f640 1302 	movw	r3, #2306	@ 0x902
 80196d0:	429d      	cmp	r5, r3
 80196d2:	d1df      	bne.n	8019694 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80196d4:	4601      	mov	r1, r0
 80196d6:	4620      	mov	r0, r4
 80196d8:	f7ff fc5f 	bl	8018f9a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80196dc:	e7d9      	b.n	8019692 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080196de <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80196de:	b510      	push	{r4, lr}
 80196e0:	4604      	mov	r4, r0
 80196e2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80196e6:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80196e8:	b1e1      	cbz	r1, 8019724 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80196ea:	2b0a      	cmp	r3, #10
 80196ec:	d02d      	beq.n	801974a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80196ee:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80196f0:	3901      	subs	r1, #1
 80196f2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80196f6:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80196f8:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80196fc:	1c51      	adds	r1, r2, #1
 80196fe:	b289      	uxth	r1, r1
 8019700:	2901      	cmp	r1, #1
 8019702:	bf8a      	itet	hi
 8019704:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019708:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801970a:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801970c:	1c5a      	adds	r2, r3, #1
 801970e:	8722      	strh	r2, [r4, #56]	@ 0x38
 8019710:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019712:	4413      	add	r3, r2
 8019714:	b29b      	uxth	r3, r3
 8019716:	2b09      	cmp	r3, #9
 8019718:	bf88      	it	hi
 801971a:	3b0a      	subhi	r3, #10
 801971c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019720:	8458      	strh	r0, [r3, #34]	@ 0x22
 8019722:	e7de      	b.n	80196e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019724:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8019726:	2b0a      	cmp	r3, #10
 8019728:	d00f      	beq.n	801974a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801972a:	4620      	mov	r0, r4
 801972c:	f7ff fbe3 	bl	8018ef6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019730:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8019732:	1c5a      	adds	r2, r3, #1
 8019734:	8722      	strh	r2, [r4, #56]	@ 0x38
 8019736:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019738:	4413      	add	r3, r2
 801973a:	b29b      	uxth	r3, r3
 801973c:	2b09      	cmp	r3, #9
 801973e:	bf88      	it	hi
 8019740:	3b0a      	subhi	r3, #10
 8019742:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019746:	8458      	strh	r0, [r3, #34]	@ 0x22
 8019748:	e7ec      	b.n	8019724 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801974a:	bd10      	pop	{r4, pc}

0801974c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801974c:	b538      	push	{r3, r4, r5, lr}
 801974e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019750:	4604      	mov	r4, r0
 8019752:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8019756:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8019758:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801975a:	3a01      	subs	r2, #1
 801975c:	8702      	strh	r2, [r0, #56]	@ 0x38
 801975e:	1c5a      	adds	r2, r3, #1
 8019760:	b292      	uxth	r2, r2
 8019762:	2a09      	cmp	r2, #9
 8019764:	bf8a      	itet	hi
 8019766:	3b09      	subhi	r3, #9
 8019768:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801976a:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801976c:	f7ff ffb7 	bl	80196de <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019770:	8c23      	ldrh	r3, [r4, #32]
 8019772:	2b01      	cmp	r3, #1
 8019774:	bf9c      	itt	ls
 8019776:	3301      	addls	r3, #1
 8019778:	8423      	strhls	r3, [r4, #32]
 801977a:	8be3      	ldrh	r3, [r4, #30]
 801977c:	b90b      	cbnz	r3, 8019782 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801977e:	2302      	movs	r3, #2
 8019780:	83e3      	strh	r3, [r4, #30]
 8019782:	8be3      	ldrh	r3, [r4, #30]
 8019784:	4628      	mov	r0, r5
 8019786:	3b01      	subs	r3, #1
 8019788:	b29b      	uxth	r3, r3
 801978a:	83e3      	strh	r3, [r4, #30]
 801978c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019790:	8365      	strh	r5, [r4, #26]
 8019792:	bd38      	pop	{r3, r4, r5, pc}

08019794 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019794:	428a      	cmp	r2, r1
 8019796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801979a:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801979c:	d932      	bls.n	8019804 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801979e:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80197a0:	1a54      	subs	r4, r2, r1
 80197a2:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80197a6:	19ee      	adds	r6, r5, r7
 80197a8:	fa1f fe84 	uxth.w	lr, r4
 80197ac:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 80197b0:	3e01      	subs	r6, #1
 80197b2:	b2b4      	uxth	r4, r6
 80197b4:	eba4 090e 	sub.w	r9, r4, lr
 80197b8:	fa1f f989 	uxth.w	r9, r9
 80197bc:	2c09      	cmp	r4, #9
 80197be:	4626      	mov	r6, r4
 80197c0:	bf88      	it	hi
 80197c2:	f1a4 060a 	subhi.w	r6, r4, #10
 80197c6:	f1bc 0f00 	cmp.w	ip, #0
 80197ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80197ce:	bf08      	it	eq
 80197d0:	f04f 0c02 	moveq.w	ip, #2
 80197d4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80197d8:	b2a4      	uxth	r4, r4
 80197da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80197de:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 80197e2:	454c      	cmp	r4, r9
 80197e4:	fa1f fc8c 	uxth.w	ip, ip
 80197e8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80197ec:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 80197f0:	d1e4      	bne.n	80197bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80197f2:	eba5 050e 	sub.w	r5, r5, lr
 80197f6:	eb0e 0408 	add.w	r4, lr, r8
 80197fa:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80197fe:	8705      	strh	r5, [r0, #56]	@ 0x38
 8019800:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8019804:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8019806:	250a      	movs	r5, #10
 8019808:	1a64      	subs	r4, r4, r1
 801980a:	4439      	add	r1, r7
 801980c:	b289      	uxth	r1, r1
 801980e:	8704      	strh	r4, [r0, #56]	@ 0x38
 8019810:	2909      	cmp	r1, #9
 8019812:	bf88      	it	hi
 8019814:	390a      	subhi	r1, #10
 8019816:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8019818:	b18a      	cbz	r2, 801983e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801981a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801981c:	3a01      	subs	r2, #1
 801981e:	3101      	adds	r1, #1
 8019820:	b292      	uxth	r2, r2
 8019822:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019826:	8701      	strh	r1, [r0, #56]	@ 0x38
 8019828:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801982a:	b901      	cbnz	r1, 801982e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801982c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801982e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8019830:	3901      	subs	r1, #1
 8019832:	b289      	uxth	r1, r1
 8019834:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8019836:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801983a:	844c      	strh	r4, [r1, #34]	@ 0x22
 801983c:	e7ec      	b.n	8019818 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801983e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019842:	f7ff bf4c 	b.w	80196de <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08019846 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019846:	b570      	push	{r4, r5, r6, lr}
 8019848:	2500      	movs	r5, #0
 801984a:	4295      	cmp	r5, r2
 801984c:	d011      	beq.n	8019872 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801984e:	8bc4      	ldrh	r4, [r0, #30]
 8019850:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019854:	4414      	add	r4, r2
 8019856:	3c01      	subs	r4, #1
 8019858:	1b64      	subs	r4, r4, r5
 801985a:	b2a4      	uxth	r4, r4
 801985c:	2c01      	cmp	r4, #1
 801985e:	bf88      	it	hi
 8019860:	3c02      	subhi	r4, #2
 8019862:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019866:	8b64      	ldrh	r4, [r4, #26]
 8019868:	42b4      	cmp	r4, r6
 801986a:	d117      	bne.n	801989c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801986c:	3501      	adds	r5, #1
 801986e:	b2ad      	uxth	r5, r5
 8019870:	e7eb      	b.n	801984a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019872:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019876:	2400      	movs	r4, #0
 8019878:	4413      	add	r3, r2
 801987a:	b2a2      	uxth	r2, r4
 801987c:	429a      	cmp	r2, r3
 801987e:	da0f      	bge.n	80198a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019880:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8019882:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019886:	3401      	adds	r4, #1
 8019888:	4432      	add	r2, r6
 801988a:	b292      	uxth	r2, r2
 801988c:	2a09      	cmp	r2, #9
 801988e:	bf88      	it	hi
 8019890:	3a0a      	subhi	r2, #10
 8019892:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019896:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8019898:	42aa      	cmp	r2, r5
 801989a:	d0ee      	beq.n	801987a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801989c:	2000      	movs	r0, #0
 801989e:	bd70      	pop	{r4, r5, r6, pc}
 80198a0:	2001      	movs	r0, #1
 80198a2:	e7fc      	b.n	801989e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080198a4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80198a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198a8:	4605      	mov	r5, r0
 80198aa:	4616      	mov	r6, r2
 80198ac:	1c8c      	adds	r4, r1, #2
 80198ae:	8809      	ldrh	r1, [r1, #0]
 80198b0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80198b4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80198b8:	42b3      	cmp	r3, r6
 80198ba:	d124      	bne.n	8019906 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80198bc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80198c0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80198c4:	f001 070f 	and.w	r7, r1, #15
 80198c8:	4652      	mov	r2, sl
 80198ca:	f8cd 8000 	str.w	r8, [sp]
 80198ce:	464b      	mov	r3, r9
 80198d0:	4621      	mov	r1, r4
 80198d2:	4628      	mov	r0, r5
 80198d4:	f7ff ffb7 	bl	8019846 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80198d8:	4683      	mov	fp, r0
 80198da:	b168      	cbz	r0, 80198f8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80198dc:	eb0a 0109 	add.w	r1, sl, r9
 80198e0:	463a      	mov	r2, r7
 80198e2:	4628      	mov	r0, r5
 80198e4:	4441      	add	r1, r8
 80198e6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80198ea:	4649      	mov	r1, r9
 80198ec:	f7ff ff52 	bl	8019794 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80198f0:	4658      	mov	r0, fp
 80198f2:	b003      	add	sp, #12
 80198f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198f8:	eb07 010a 	add.w	r1, r7, sl
 80198fc:	4449      	add	r1, r9
 80198fe:	4441      	add	r1, r8
 8019900:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019904:	e7d2      	b.n	80198ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019906:	f04f 0b00 	mov.w	fp, #0
 801990a:	e7f1      	b.n	80198f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801990c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801990c:	b570      	push	{r4, r5, r6, lr}
 801990e:	8810      	ldrh	r0, [r2, #0]
 8019910:	4298      	cmp	r0, r3
 8019912:	d817      	bhi.n	8019944 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019914:	1e48      	subs	r0, r1, #1
 8019916:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801991a:	4298      	cmp	r0, r3
 801991c:	d312      	bcc.n	8019944 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801991e:	2400      	movs	r4, #0
 8019920:	428c      	cmp	r4, r1
 8019922:	d20f      	bcs.n	8019944 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019924:	1860      	adds	r0, r4, r1
 8019926:	1040      	asrs	r0, r0, #1
 8019928:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801992c:	0085      	lsls	r5, r0, #2
 801992e:	42b3      	cmp	r3, r6
 8019930:	d902      	bls.n	8019938 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019932:	3001      	adds	r0, #1
 8019934:	b284      	uxth	r4, r0
 8019936:	e7f3      	b.n	8019920 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019938:	d201      	bcs.n	801993e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801993a:	b281      	uxth	r1, r0
 801993c:	e7f0      	b.n	8019920 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801993e:	442a      	add	r2, r5
 8019940:	8850      	ldrh	r0, [r2, #2]
 8019942:	bd70      	pop	{r4, r5, r6, pc}
 8019944:	2000      	movs	r0, #0
 8019946:	e7fc      	b.n	8019942 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019948 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801994c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801994e:	4604      	mov	r4, r0
 8019950:	260b      	movs	r6, #11
 8019952:	886f      	ldrh	r7, [r5, #2]
 8019954:	087f      	lsrs	r7, r7, #1
 8019956:	3e01      	subs	r6, #1
 8019958:	d013      	beq.n	8019982 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801995a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801995c:	462a      	mov	r2, r5
 801995e:	4639      	mov	r1, r7
 8019960:	4620      	mov	r0, r4
 8019962:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019966:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801996a:	4643      	mov	r3, r8
 801996c:	f7ff ffce 	bl	801990c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019970:	b138      	cbz	r0, 8019982 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019972:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019976:	4642      	mov	r2, r8
 8019978:	4620      	mov	r0, r4
 801997a:	f7ff ff93 	bl	80198a4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801997e:	2800      	cmp	r0, #0
 8019980:	d1e9      	bne.n	8019956 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08019988 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 8019988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801998a:	2300      	movs	r3, #0
 801998c:	b08d      	sub	sp, #52	@ 0x34
 801998e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8019992:	f101 0710 	add.w	r7, r1, #16
 8019996:	9304      	str	r3, [sp, #16]
 8019998:	aa04      	add	r2, sp, #16
 801999a:	9305      	str	r3, [sp, #20]
 801999c:	9306      	str	r3, [sp, #24]
 801999e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80199a2:	9307      	str	r3, [sp, #28]
 80199a4:	4613      	mov	r3, r2
 80199a6:	460c      	mov	r4, r1
 80199a8:	4605      	mov	r5, r0
 80199aa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80199e4 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 80199ae:	ecb4 7a01 	vldmia	r4!, {s14}
 80199b2:	ecf5 6a01 	vldmia	r5!, {s13}
 80199b6:	42bc      	cmp	r4, r7
 80199b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80199bc:	d1f7      	bne.n	80199ae <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 80199be:	3010      	adds	r0, #16
 80199c0:	ece2 7a01 	vstmia	r2!, {s15}
 80199c4:	42b0      	cmp	r0, r6
 80199c6:	d1ee      	bne.n	80199a6 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 80199c8:	ac0c      	add	r4, sp, #48	@ 0x30
 80199ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80199cc:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80199d0:	ed9d 0a08 	vldr	s0, [sp, #32]
 80199d4:	eddd 0a09 	vldr	s1, [sp, #36]	@ 0x24
 80199d8:	ed9d 1a0a 	vldr	s2, [sp, #40]	@ 0x28
 80199dc:	eddd 1a0b 	vldr	s3, [sp, #44]	@ 0x2c
 80199e0:	b00d      	add	sp, #52	@ 0x34
 80199e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199e4:	00000000 	.word	0x00000000

080199e8 <_ZN8touchgfx9Matrix4x4C1Ev>:
 80199e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80199ec:	2300      	movs	r3, #0
 80199ee:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8019a14 <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 80199f2:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 80199f6:	2200      	movs	r2, #0
 80199f8:	4293      	cmp	r3, r2
 80199fa:	f102 0201 	add.w	r2, r2, #1
 80199fe:	fe47 6a87 	vseleq.f32	s13, s15, s14
 8019a02:	2a04      	cmp	r2, #4
 8019a04:	ece1 6a01 	vstmia	r1!, {s13}
 8019a08:	d1f6      	bne.n	80199f8 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8019a0a:	3301      	adds	r3, #1
 8019a0c:	2b04      	cmp	r3, #4
 8019a0e:	d1f0      	bne.n	80199f2 <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8019a10:	4770      	bx	lr
 8019a12:	bf00      	nop
 8019a14:	00000000 	.word	0x00000000

08019a18 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8019a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a1c:	460c      	mov	r4, r1
 8019a1e:	4605      	mov	r5, r0
 8019a20:	4690      	mov	r8, r2
 8019a22:	f7ff ffe1 	bl	80199e8 <_ZN8touchgfx9Matrix4x4C1Ev>
 8019a26:	4628      	mov	r0, r5
 8019a28:	4621      	mov	r1, r4
 8019a2a:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8019a2e:	2300      	movs	r3, #0
 8019a30:	eb08 0603 	add.w	r6, r8, r3
 8019a34:	460f      	mov	r7, r1
 8019a36:	2400      	movs	r4, #0
 8019a38:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019a6c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 8019a3c:	4632      	mov	r2, r6
 8019a3e:	3401      	adds	r4, #1
 8019a40:	ecf7 6a01 	vldmia	r7!, {s13}
 8019a44:	3610      	adds	r6, #16
 8019a46:	ed92 7a00 	vldr	s14, [r2]
 8019a4a:	2c04      	cmp	r4, #4
 8019a4c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019a50:	d1f4      	bne.n	8019a3c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 8019a52:	18c2      	adds	r2, r0, r3
 8019a54:	3304      	adds	r3, #4
 8019a56:	2b10      	cmp	r3, #16
 8019a58:	edc2 7a00 	vstr	s15, [r2]
 8019a5c:	d1e8      	bne.n	8019a30 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 8019a5e:	3110      	adds	r1, #16
 8019a60:	3010      	adds	r0, #16
 8019a62:	4561      	cmp	r1, ip
 8019a64:	d1e3      	bne.n	8019a2e <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 8019a66:	4628      	mov	r0, r5
 8019a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a6c:	00000000 	.word	0x00000000

08019a70 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8019a70:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019a74:	f100 0320 	add.w	r3, r0, #32
 8019a78:	3030      	adds	r0, #48	@ 0x30
 8019a7a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019a7e:	ecf3 7a01 	vldmia	r3!, {s15}
 8019a82:	4283      	cmp	r3, r0
 8019a84:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019a88:	edc3 7a03 	vstr	s15, [r3, #12]
 8019a8c:	d1f7      	bne.n	8019a7e <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 8019a8e:	4770      	bx	lr

08019a90 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 8019a90:	b510      	push	{r4, lr}
 8019a92:	ed2d 8b02 	vpush	{d8}
 8019a96:	eef0 8a40 	vmov.f32	s17, s0
 8019a9a:	4604      	mov	r4, r0
 8019a9c:	f00f fa8c 	bl	8028fb8 <sinf>
 8019aa0:	eeb0 8a40 	vmov.f32	s16, s0
 8019aa4:	eeb0 0a68 	vmov.f32	s0, s17
 8019aa8:	f00f fb4a 	bl	8029140 <cosf>
 8019aac:	eeb1 6a48 	vneg.f32	s12, s16
 8019ab0:	f104 0310 	add.w	r3, r4, #16
 8019ab4:	f104 0220 	add.w	r2, r4, #32
 8019ab8:	edd3 7a04 	vldr	s15, [r3, #16]
 8019abc:	edd3 6a00 	vldr	s13, [r3]
 8019ac0:	ee26 7a27 	vmul.f32	s14, s12, s15
 8019ac4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019ac8:	eea6 7a80 	vfma.f32	s14, s13, s0
 8019acc:	eee6 7a88 	vfma.f32	s15, s13, s16
 8019ad0:	eca3 7a01 	vstmia	r3!, {s14}
 8019ad4:	429a      	cmp	r2, r3
 8019ad6:	edc3 7a03 	vstr	s15, [r3, #12]
 8019ada:	d1ed      	bne.n	8019ab8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8019adc:	4620      	mov	r0, r4
 8019ade:	ecbd 8b02 	vpop	{d8}
 8019ae2:	bd10      	pop	{r4, pc}

08019ae4 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8019ae4:	b510      	push	{r4, lr}
 8019ae6:	ed2d 8b02 	vpush	{d8}
 8019aea:	eef0 8a40 	vmov.f32	s17, s0
 8019aee:	4604      	mov	r4, r0
 8019af0:	f00f fa62 	bl	8028fb8 <sinf>
 8019af4:	eeb0 8a40 	vmov.f32	s16, s0
 8019af8:	eeb0 0a68 	vmov.f32	s0, s17
 8019afc:	f00f fb20 	bl	8029140 <cosf>
 8019b00:	eeb1 6a48 	vneg.f32	s12, s16
 8019b04:	4623      	mov	r3, r4
 8019b06:	f104 0210 	add.w	r2, r4, #16
 8019b0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8019b0e:	edd3 6a00 	vldr	s13, [r3]
 8019b12:	ee27 7a88 	vmul.f32	s14, s15, s16
 8019b16:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019b1a:	eea6 7a80 	vfma.f32	s14, s13, s0
 8019b1e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019b22:	eca3 7a01 	vstmia	r3!, {s14}
 8019b26:	429a      	cmp	r2, r3
 8019b28:	edc3 7a07 	vstr	s15, [r3, #28]
 8019b2c:	d1ed      	bne.n	8019b0a <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 8019b2e:	4620      	mov	r0, r4
 8019b30:	ecbd 8b02 	vpop	{d8}
 8019b34:	bd10      	pop	{r4, pc}

08019b36 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 8019b36:	b510      	push	{r4, lr}
 8019b38:	ed2d 8b02 	vpush	{d8}
 8019b3c:	eef0 8a40 	vmov.f32	s17, s0
 8019b40:	4604      	mov	r4, r0
 8019b42:	f00f fa39 	bl	8028fb8 <sinf>
 8019b46:	eeb0 8a40 	vmov.f32	s16, s0
 8019b4a:	eeb0 0a68 	vmov.f32	s0, s17
 8019b4e:	f00f faf7 	bl	8029140 <cosf>
 8019b52:	eeb1 6a48 	vneg.f32	s12, s16
 8019b56:	4623      	mov	r3, r4
 8019b58:	f104 0210 	add.w	r2, r4, #16
 8019b5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8019b60:	edd3 6a00 	vldr	s13, [r3]
 8019b64:	ee26 7a27 	vmul.f32	s14, s12, s15
 8019b68:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019b6c:	eea6 7a80 	vfma.f32	s14, s13, s0
 8019b70:	eee6 7a88 	vfma.f32	s15, s13, s16
 8019b74:	eca3 7a01 	vstmia	r3!, {s14}
 8019b78:	429a      	cmp	r2, r3
 8019b7a:	edc3 7a03 	vstr	s15, [r3, #12]
 8019b7e:	d1ed      	bne.n	8019b5c <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8019b80:	4620      	mov	r0, r4
 8019b82:	ecbd 8b02 	vpop	{d8}
 8019b86:	bd10      	pop	{r4, pc}

08019b88 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 8019b88:	4603      	mov	r3, r0
 8019b8a:	f100 0210 	add.w	r2, r0, #16
 8019b8e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8019b92:	edd3 7a00 	vldr	s15, [r3]
 8019b96:	eee7 7a00 	vfma.f32	s15, s14, s0
 8019b9a:	ece3 7a01 	vstmia	r3!, {s15}
 8019b9e:	4293      	cmp	r3, r2
 8019ba0:	d1f5      	bne.n	8019b8e <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 8019ba2:	4770      	bx	lr

08019ba4 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 8019ba4:	f100 0310 	add.w	r3, r0, #16
 8019ba8:	f100 0220 	add.w	r2, r0, #32
 8019bac:	ed93 7a08 	vldr	s14, [r3, #32]
 8019bb0:	edd3 7a00 	vldr	s15, [r3]
 8019bb4:	eee7 7a00 	vfma.f32	s15, s14, s0
 8019bb8:	ece3 7a01 	vstmia	r3!, {s15}
 8019bbc:	4293      	cmp	r3, r2
 8019bbe:	d1f5      	bne.n	8019bac <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 8019bc0:	4770      	bx	lr

08019bc2 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 8019bc2:	f100 0320 	add.w	r3, r0, #32
 8019bc6:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8019bca:	ed93 7a04 	vldr	s14, [r3, #16]
 8019bce:	edd3 7a00 	vldr	s15, [r3]
 8019bd2:	eee7 7a00 	vfma.f32	s15, s14, s0
 8019bd6:	ece3 7a01 	vstmia	r3!, {s15}
 8019bda:	4293      	cmp	r3, r2
 8019bdc:	d1f5      	bne.n	8019bca <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 8019bde:	4770      	bx	lr

08019be0 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8019be0:	4603      	mov	r3, r0
 8019be2:	f100 0210 	add.w	r2, r0, #16
 8019be6:	edd3 7a00 	vldr	s15, [r3]
 8019bea:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019bee:	ece3 7a01 	vstmia	r3!, {s15}
 8019bf2:	4293      	cmp	r3, r2
 8019bf4:	d1f7      	bne.n	8019be6 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 8019bf6:	4770      	bx	lr

08019bf8 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 8019bf8:	f100 0310 	add.w	r3, r0, #16
 8019bfc:	f100 0220 	add.w	r2, r0, #32
 8019c00:	edd3 7a00 	vldr	s15, [r3]
 8019c04:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019c08:	ece3 7a01 	vstmia	r3!, {s15}
 8019c0c:	4293      	cmp	r3, r2
 8019c0e:	d1f7      	bne.n	8019c00 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 8019c10:	4770      	bx	lr

08019c12 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 8019c12:	f100 0320 	add.w	r3, r0, #32
 8019c16:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8019c1a:	edd3 7a00 	vldr	s15, [r3]
 8019c1e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019c22:	ece3 7a01 	vstmia	r3!, {s15}
 8019c26:	4293      	cmp	r3, r2
 8019c28:	d1f7      	bne.n	8019c1a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8019c2a:	4770      	bx	lr

08019c2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019c2c:	b570      	push	{r4, r5, r6, lr}
 8019c2e:	694a      	ldr	r2, [r1, #20]
 8019c30:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8019c32:	684b      	ldr	r3, [r1, #4]
 8019c34:	1b54      	subs	r4, r2, r5
 8019c36:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8019c38:	f000 8106 	beq.w	8019e48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8019c3c:	1b9b      	subs	r3, r3, r6
 8019c3e:	d003      	beq.n	8019c48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019c40:	4363      	muls	r3, r4
 8019c42:	2210      	movs	r2, #16
 8019c44:	fb93 f3f2 	sdiv	r3, r3, r2
 8019c48:	680c      	ldr	r4, [r1, #0]
 8019c4a:	698a      	ldr	r2, [r1, #24]
 8019c4c:	1b65      	subs	r5, r4, r5
 8019c4e:	f000 80fd 	beq.w	8019e4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8019c52:	1b92      	subs	r2, r2, r6
 8019c54:	d003      	beq.n	8019c5e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019c56:	436a      	muls	r2, r5
 8019c58:	2410      	movs	r4, #16
 8019c5a:	fb92 f2f4 	sdiv	r2, r2, r4
 8019c5e:	1a9b      	subs	r3, r3, r2
 8019c60:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8019e88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8019c64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019c68:	460a      	mov	r2, r1
 8019c6a:	ee07 3a90 	vmov	s15, r3
 8019c6e:	f100 040c 	add.w	r4, r0, #12
 8019c72:	4603      	mov	r3, r0
 8019c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c78:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019c7c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019c80:	eeb1 6a43 	vneg.f32	s12, s6
 8019c84:	edd2 7a02 	vldr	s15, [r2, #8]
 8019c88:	3214      	adds	r2, #20
 8019c8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019c8e:	ece3 6a01 	vstmia	r3!, {s13}
 8019c92:	429c      	cmp	r4, r3
 8019c94:	ed52 7a02 	vldr	s15, [r2, #-8]
 8019c98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019c9c:	edc3 7a02 	vstr	s15, [r3, #8]
 8019ca0:	ed52 7a01 	vldr	s15, [r2, #-4]
 8019ca4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019ca8:	edc3 7a05 	vstr	s15, [r3, #20]
 8019cac:	d1ea      	bne.n	8019c84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019cae:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019cb0:	698b      	ldr	r3, [r1, #24]
 8019cb2:	edd0 4a02 	vldr	s9, [r0, #8]
 8019cb6:	1a9b      	subs	r3, r3, r2
 8019cb8:	edd0 3a00 	vldr	s7, [r0]
 8019cbc:	edd0 6a01 	vldr	s13, [r0, #4]
 8019cc0:	ee07 3a90 	vmov	s15, r3
 8019cc4:	684b      	ldr	r3, [r1, #4]
 8019cc6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019cca:	ed90 5a05 	vldr	s10, [r0, #20]
 8019cce:	1a9b      	subs	r3, r3, r2
 8019cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019cd4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019cd8:	ed90 2a03 	vldr	s4, [r0, #12]
 8019cdc:	ee07 3a10 	vmov	s14, r3
 8019ce0:	edd0 5a04 	vldr	s11, [r0, #16]
 8019ce4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019ce8:	ed90 1a07 	vldr	s2, [r0, #28]
 8019cec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019cf0:	edd0 2a06 	vldr	s5, [r0, #24]
 8019cf4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019cf8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019cfc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d00:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019d04:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019d08:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019d0c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8019d10:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019d12:	694a      	ldr	r2, [r1, #20]
 8019d14:	1b13      	subs	r3, r2, r4
 8019d16:	ee07 3a10 	vmov	s14, r3
 8019d1a:	680b      	ldr	r3, [r1, #0]
 8019d1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d20:	1b1b      	subs	r3, r3, r4
 8019d22:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d26:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8019d2a:	ee07 3a10 	vmov	s14, r3
 8019d2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d32:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d36:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019d3a:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019d3e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8019d42:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019d44:	698b      	ldr	r3, [r1, #24]
 8019d46:	1a9b      	subs	r3, r3, r2
 8019d48:	ee06 3a90 	vmov	s13, r3
 8019d4c:	684b      	ldr	r3, [r1, #4]
 8019d4e:	1a9b      	subs	r3, r3, r2
 8019d50:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019d54:	ee07 3a10 	vmov	s14, r3
 8019d58:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019d5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d60:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019d64:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d68:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019d6c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019d70:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8019d74:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019d76:	694a      	ldr	r2, [r1, #20]
 8019d78:	1b13      	subs	r3, r2, r4
 8019d7a:	ee07 3a10 	vmov	s14, r3
 8019d7e:	680b      	ldr	r3, [r1, #0]
 8019d80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d84:	1b1b      	subs	r3, r3, r4
 8019d86:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d8a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019d8e:	ee07 3a10 	vmov	s14, r3
 8019d92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d96:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d9a:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019d9e:	edd0 5a08 	vldr	s11, [r0, #32]
 8019da2:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019da6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8019daa:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019dae:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8019db2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019db4:	698b      	ldr	r3, [r1, #24]
 8019db6:	1a9b      	subs	r3, r3, r2
 8019db8:	ee07 3a10 	vmov	s14, r3
 8019dbc:	684b      	ldr	r3, [r1, #4]
 8019dbe:	1a9b      	subs	r3, r3, r2
 8019dc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019dc4:	ee01 3a90 	vmov	s3, r3
 8019dc8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019dcc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019dd0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019dd4:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019dd8:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019ddc:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019de0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019de4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019de6:	694a      	ldr	r2, [r1, #20]
 8019de8:	1b13      	subs	r3, r2, r4
 8019dea:	ee03 3a10 	vmov	s6, r3
 8019dee:	680b      	ldr	r3, [r1, #0]
 8019df0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019df4:	1b1b      	subs	r3, r3, r4
 8019df6:	ee23 3a04 	vmul.f32	s6, s6, s8
 8019dfa:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019dfe:	ee03 3a10 	vmov	s6, r3
 8019e02:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019e06:	ee23 4a04 	vmul.f32	s8, s6, s8
 8019e0a:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019e0e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019e12:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019e16:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8019e1a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019e1e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e26:	dd13      	ble.n	8019e50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8019e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019e2c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019e30:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019e32:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019e36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e3e:	dd15      	ble.n	8019e6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8019e40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019e44:	6403      	str	r3, [r0, #64]	@ 0x40
 8019e46:	bd70      	pop	{r4, r5, r6, pc}
 8019e48:	4623      	mov	r3, r4
 8019e4a:	e6fd      	b.n	8019c48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019e4c:	462a      	mov	r2, r5
 8019e4e:	e706      	b.n	8019c5e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019e50:	d502      	bpl.n	8019e58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8019e52:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019e56:	e7e9      	b.n	8019e2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8019e58:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019e5c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019e60:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e68:	dade      	bge.n	8019e28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8019e6a:	e7f2      	b.n	8019e52 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019e6c:	d502      	bpl.n	8019e74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8019e6e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019e72:	e7e7      	b.n	8019e44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019e74:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019e78:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019e7c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e84:	dadc      	bge.n	8019e40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8019e86:	e7f2      	b.n	8019e6e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019e88:	3d800000 	.word	0x3d800000

08019e8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e90:	2714      	movs	r7, #20
 8019e92:	435f      	muls	r7, r3
 8019e94:	eb02 0c07 	add.w	ip, r2, r7
 8019e98:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019e9c:	f115 0e0f 	adds.w	lr, r5, #15
 8019ea0:	f100 80a2 	bmi.w	8019fe8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019ea4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019ea8:	9c08      	ldr	r4, [sp, #32]
 8019eaa:	2614      	movs	r6, #20
 8019eac:	f8c0 e014 	str.w	lr, [r0, #20]
 8019eb0:	4366      	muls	r6, r4
 8019eb2:	eb02 0806 	add.w	r8, r2, r6
 8019eb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019eba:	f115 040f 	adds.w	r4, r5, #15
 8019ebe:	f100 809f 	bmi.w	801a000 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019ec2:	1124      	asrs	r4, r4, #4
 8019ec4:	eba4 040e 	sub.w	r4, r4, lr
 8019ec8:	6184      	str	r4, [r0, #24]
 8019eca:	2c00      	cmp	r4, #0
 8019ecc:	f000 808a 	beq.w	8019fe4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019ed0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019ed4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019ed8:	5995      	ldr	r5, [r2, r6]
 8019eda:	eba4 0809 	sub.w	r8, r4, r9
 8019ede:	59d4      	ldr	r4, [r2, r7]
 8019ee0:	eba5 0a04 	sub.w	sl, r5, r4
 8019ee4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019ee8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8019eec:	fb0e fe05 	mul.w	lr, lr, r5
 8019ef0:	fb0a ee19 	mls	lr, sl, r9, lr
 8019ef4:	fb08 e404 	mla	r4, r8, r4, lr
 8019ef8:	3c01      	subs	r4, #1
 8019efa:	19a4      	adds	r4, r4, r6
 8019efc:	f100 808c 	bmi.w	801a018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019f00:	fb94 fef6 	sdiv	lr, r4, r6
 8019f04:	fb06 441e 	mls	r4, r6, lr, r4
 8019f08:	f8c0 e000 	str.w	lr, [r0]
 8019f0c:	6104      	str	r4, [r0, #16]
 8019f0e:	2d00      	cmp	r5, #0
 8019f10:	f2c0 8095 	blt.w	801a03e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019f14:	fb95 f4f6 	sdiv	r4, r5, r6
 8019f18:	fb06 5514 	mls	r5, r6, r4, r5
 8019f1c:	6044      	str	r4, [r0, #4]
 8019f1e:	6085      	str	r5, [r0, #8]
 8019f20:	60c6      	str	r6, [r0, #12]
 8019f22:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019f26:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8019f2a:	6945      	ldr	r5, [r0, #20]
 8019f2c:	59d2      	ldr	r2, [r2, r7]
 8019f2e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019f32:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801a060 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8019f36:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8019f3a:	ee07 4a10 	vmov	s14, r4
 8019f3e:	6804      	ldr	r4, [r0, #0]
 8019f40:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019f44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f48:	ee07 2a90 	vmov	s15, r2
 8019f4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019f58:	edd3 6a00 	vldr	s13, [r3]
 8019f5c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019f60:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8019f64:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019f68:	edc0 6a07 	vstr	s13, [r0, #28]
 8019f6c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019f70:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8019f74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019f78:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8019f7c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019f80:	ed80 6a08 	vstr	s12, [r0, #32]
 8019f84:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8019f86:	6242      	str	r2, [r0, #36]	@ 0x24
 8019f88:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8019f8c:	ed93 6a03 	vldr	s12, [r3, #12]
 8019f90:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019f94:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019f98:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8019f9c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8019fa0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019fa4:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8019fa8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019fac:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8019fb0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019fb2:	6302      	str	r2, [r0, #48]	@ 0x30
 8019fb4:	ed93 6a06 	vldr	s12, [r3, #24]
 8019fb8:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8019fbc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019fc0:	eeb0 7a46 	vmov.f32	s14, s12
 8019fc4:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8019fc8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019fcc:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019fd0:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8019fd4:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8019fd8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019fdc:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8019fe0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8019fe2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fe8:	2410      	movs	r4, #16
 8019fea:	f1c5 0501 	rsb	r5, r5, #1
 8019fee:	fb9e fef4 	sdiv	lr, lr, r4
 8019ff2:	f015 050f 	ands.w	r5, r5, #15
 8019ff6:	bf18      	it	ne
 8019ff8:	2501      	movne	r5, #1
 8019ffa:	ebae 0e05 	sub.w	lr, lr, r5
 8019ffe:	e753      	b.n	8019ea8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a000:	f04f 0910 	mov.w	r9, #16
 801a004:	f1c5 0501 	rsb	r5, r5, #1
 801a008:	fb94 f4f9 	sdiv	r4, r4, r9
 801a00c:	f015 050f 	ands.w	r5, r5, #15
 801a010:	bf18      	it	ne
 801a012:	2501      	movne	r5, #1
 801a014:	1b64      	subs	r4, r4, r5
 801a016:	e755      	b.n	8019ec4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a018:	4264      	negs	r4, r4
 801a01a:	fb94 fef6 	sdiv	lr, r4, r6
 801a01e:	f1ce 0800 	rsb	r8, lr, #0
 801a022:	fb06 441e 	mls	r4, r6, lr, r4
 801a026:	f8c0 8000 	str.w	r8, [r0]
 801a02a:	6104      	str	r4, [r0, #16]
 801a02c:	2c00      	cmp	r4, #0
 801a02e:	f43f af6e 	beq.w	8019f0e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a032:	ea6f 0e0e 	mvn.w	lr, lr
 801a036:	1b34      	subs	r4, r6, r4
 801a038:	f8c0 e000 	str.w	lr, [r0]
 801a03c:	e766      	b.n	8019f0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a03e:	426d      	negs	r5, r5
 801a040:	fb95 f4f6 	sdiv	r4, r5, r6
 801a044:	f1c4 0e00 	rsb	lr, r4, #0
 801a048:	fb06 5514 	mls	r5, r6, r4, r5
 801a04c:	f8c0 e004 	str.w	lr, [r0, #4]
 801a050:	6085      	str	r5, [r0, #8]
 801a052:	2d00      	cmp	r5, #0
 801a054:	f43f af64 	beq.w	8019f20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a058:	43e4      	mvns	r4, r4
 801a05a:	1b75      	subs	r5, r6, r5
 801a05c:	6044      	str	r4, [r0, #4]
 801a05e:	e75e      	b.n	8019f1e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a060:	3d800000 	.word	0x3d800000

0801a064 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a064:	4602      	mov	r2, r0
 801a066:	b148      	cbz	r0, 801a07c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a068:	2300      	movs	r3, #0
 801a06a:	b298      	uxth	r0, r3
 801a06c:	3301      	adds	r3, #1
 801a06e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a072:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a076:	2900      	cmp	r1, #0
 801a078:	d1f7      	bne.n	801a06a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a07a:	4770      	bx	lr
 801a07c:	4770      	bx	lr

0801a07e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a07e:	b530      	push	{r4, r5, lr}
 801a080:	4604      	mov	r4, r0
 801a082:	b159      	cbz	r1, 801a09c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a084:	b148      	cbz	r0, 801a09a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a086:	2300      	movs	r3, #0
 801a088:	b298      	uxth	r0, r3
 801a08a:	4282      	cmp	r2, r0
 801a08c:	d905      	bls.n	801a09a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a08e:	5ccd      	ldrb	r5, [r1, r3]
 801a090:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a094:	3301      	adds	r3, #1
 801a096:	2d00      	cmp	r5, #0
 801a098:	d1f6      	bne.n	801a088 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a09a:	bd30      	pop	{r4, r5, pc}
 801a09c:	4608      	mov	r0, r1
 801a09e:	e7fc      	b.n	801a09a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a0a0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801a0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0a2:	b08b      	sub	sp, #44	@ 0x2c
 801a0a4:	468c      	mov	ip, r1
 801a0a6:	4604      	mov	r4, r0
 801a0a8:	2100      	movs	r1, #0
 801a0aa:	261f      	movs	r6, #31
 801a0ac:	af01      	add	r7, sp, #4
 801a0ae:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a0b2:	1e71      	subs	r1, r6, #1
 801a0b4:	fb94 fef3 	sdiv	lr, r4, r3
 801a0b8:	fb03 441e 	mls	r4, r3, lr, r4
 801a0bc:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a0c0:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a0c4:	b2ec      	uxtb	r4, r5
 801a0c6:	2d09      	cmp	r5, #9
 801a0c8:	bfd4      	ite	le
 801a0ca:	3430      	addle	r4, #48	@ 0x30
 801a0cc:	3457      	addgt	r4, #87	@ 0x57
 801a0ce:	b2e4      	uxtb	r4, r4
 801a0d0:	55bc      	strb	r4, [r7, r6]
 801a0d2:	4674      	mov	r4, lr
 801a0d4:	b974      	cbnz	r4, 801a0f4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801a0d6:	2800      	cmp	r0, #0
 801a0d8:	da05      	bge.n	801a0e6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801a0da:	ab0a      	add	r3, sp, #40	@ 0x28
 801a0dc:	4419      	add	r1, r3
 801a0de:	232d      	movs	r3, #45	@ 0x2d
 801a0e0:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a0e4:	1eb1      	subs	r1, r6, #2
 801a0e6:	3101      	adds	r1, #1
 801a0e8:	4660      	mov	r0, ip
 801a0ea:	4439      	add	r1, r7
 801a0ec:	f7ff ffc7 	bl	801a07e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a0f0:	b00b      	add	sp, #44	@ 0x2c
 801a0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0f4:	460e      	mov	r6, r1
 801a0f6:	e7dc      	b.n	801a0b2 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801a0f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801a0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0fa:	468c      	mov	ip, r1
 801a0fc:	b08b      	sub	sp, #44	@ 0x2c
 801a0fe:	2100      	movs	r1, #0
 801a100:	ae01      	add	r6, sp, #4
 801a102:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a106:	211f      	movs	r1, #31
 801a108:	fbb0 f7f3 	udiv	r7, r0, r3
 801a10c:	fb03 0517 	mls	r5, r3, r7, r0
 801a110:	4638      	mov	r0, r7
 801a112:	b2ec      	uxtb	r4, r5
 801a114:	2d09      	cmp	r5, #9
 801a116:	bfd4      	ite	le
 801a118:	3430      	addle	r4, #48	@ 0x30
 801a11a:	3457      	addgt	r4, #87	@ 0x57
 801a11c:	b2e4      	uxtb	r4, r4
 801a11e:	558c      	strb	r4, [r1, r6]
 801a120:	1e4c      	subs	r4, r1, #1
 801a122:	b92f      	cbnz	r7, 801a130 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801a124:	4431      	add	r1, r6
 801a126:	4660      	mov	r0, ip
 801a128:	f7ff ffa9 	bl	801a07e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a12c:	b00b      	add	sp, #44	@ 0x2c
 801a12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a130:	4621      	mov	r1, r4
 801a132:	e7e9      	b.n	801a108 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801a134 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a138:	b085      	sub	sp, #20
 801a13a:	4691      	mov	r9, r2
 801a13c:	6802      	ldr	r2, [r0, #0]
 801a13e:	4688      	mov	r8, r1
 801a140:	461c      	mov	r4, r3
 801a142:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801a146:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801a14a:	4683      	mov	fp, r0
 801a14c:	4610      	mov	r0, r2
 801a14e:	9103      	str	r1, [sp, #12]
 801a150:	9302      	str	r3, [sp, #8]
 801a152:	9201      	str	r2, [sp, #4]
 801a154:	f7ff ff86 	bl	801a064 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a158:	f1b8 0f00 	cmp.w	r8, #0
 801a15c:	bf0c      	ite	eq
 801a15e:	4684      	moveq	ip, r0
 801a160:	f100 0c01 	addne.w	ip, r0, #1
 801a164:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801a168:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801a16c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801a16e:	fa1f fc8c 	uxth.w	ip, ip
 801a172:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801a174:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801a178:	9903      	ldr	r1, [sp, #12]
 801a17a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a17e:	d041      	beq.n	801a204 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a180:	d834      	bhi.n	801a1ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801a182:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801a186:	d059      	beq.n	801a23c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801a188:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801a18c:	d03a      	beq.n	801a204 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a18e:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801a192:	d034      	beq.n	801a1fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a194:	2400      	movs	r4, #0
 801a196:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801a19a:	3a01      	subs	r2, #1
 801a19c:	b169      	cbz	r1, 801a1ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a19e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a1a0:	458c      	cmp	ip, r1
 801a1a2:	da09      	bge.n	801a1b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a1a4:	eba1 010c 	sub.w	r1, r1, ip
 801a1a8:	b289      	uxth	r1, r1
 801a1aa:	b933      	cbnz	r3, 801a1ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a1ac:	2e00      	cmp	r6, #0
 801a1ae:	d051      	beq.n	801a254 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a1b0:	2800      	cmp	r0, #0
 801a1b2:	d04f      	beq.n	801a254 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a1b4:	440c      	add	r4, r1
 801a1b6:	b2a4      	uxth	r4, r4
 801a1b8:	2100      	movs	r1, #0
 801a1ba:	682b      	ldr	r3, [r5, #0]
 801a1bc:	4293      	cmp	r3, r2
 801a1be:	da07      	bge.n	801a1d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a1c0:	f1b8 0f00 	cmp.w	r8, #0
 801a1c4:	d004      	beq.n	801a1d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a1c6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801a1ca:	682b      	ldr	r3, [r5, #0]
 801a1cc:	3301      	adds	r3, #1
 801a1ce:	602b      	str	r3, [r5, #0]
 801a1d0:	2730      	movs	r7, #48	@ 0x30
 801a1d2:	2c00      	cmp	r4, #0
 801a1d4:	d04e      	beq.n	801a274 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a1d6:	682e      	ldr	r6, [r5, #0]
 801a1d8:	3c01      	subs	r4, #1
 801a1da:	42b2      	cmp	r2, r6
 801a1dc:	b2a4      	uxth	r4, r4
 801a1de:	dd49      	ble.n	801a274 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a1e0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a1e4:	682b      	ldr	r3, [r5, #0]
 801a1e6:	3301      	adds	r3, #1
 801a1e8:	602b      	str	r3, [r5, #0]
 801a1ea:	e7f2      	b.n	801a1d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801a1ec:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801a1f0:	d01d      	beq.n	801a22e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801a1f2:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801a1f6:	d002      	beq.n	801a1fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a1f8:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801a1fc:	e7c9      	b.n	801a192 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801a1fe:	4684      	mov	ip, r0
 801a200:	f04f 0800 	mov.w	r8, #0
 801a204:	2c00      	cmp	r4, #0
 801a206:	d0c6      	beq.n	801a196 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a208:	b947      	cbnz	r7, 801a21c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a20a:	2801      	cmp	r0, #1
 801a20c:	d106      	bne.n	801a21c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a20e:	8814      	ldrh	r4, [r2, #0]
 801a210:	2c30      	cmp	r4, #48	@ 0x30
 801a212:	bf02      	ittt	eq
 801a214:	3202      	addeq	r2, #2
 801a216:	4638      	moveq	r0, r7
 801a218:	f8cb 2000 	streq.w	r2, [fp]
 801a21c:	45bc      	cmp	ip, r7
 801a21e:	da14      	bge.n	801a24a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801a220:	b2bf      	uxth	r7, r7
 801a222:	eba7 040c 	sub.w	r4, r7, ip
 801a226:	46bc      	mov	ip, r7
 801a228:	b2a4      	uxth	r4, r4
 801a22a:	2600      	movs	r6, #0
 801a22c:	e7b3      	b.n	801a196 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a22e:	4684      	mov	ip, r0
 801a230:	b16c      	cbz	r4, 801a24e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801a232:	42b8      	cmp	r0, r7
 801a234:	dd00      	ble.n	801a238 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801a236:	b2b8      	uxth	r0, r7
 801a238:	2400      	movs	r4, #0
 801a23a:	e003      	b.n	801a244 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801a23c:	f04f 0c01 	mov.w	ip, #1
 801a240:	2400      	movs	r4, #0
 801a242:	4660      	mov	r0, ip
 801a244:	4626      	mov	r6, r4
 801a246:	46a0      	mov	r8, r4
 801a248:	e7a5      	b.n	801a196 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a24a:	2400      	movs	r4, #0
 801a24c:	e7ed      	b.n	801a22a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801a24e:	4626      	mov	r6, r4
 801a250:	46a0      	mov	r8, r4
 801a252:	e7a0      	b.n	801a196 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a254:	2900      	cmp	r1, #0
 801a256:	d0b0      	beq.n	801a1ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a258:	2720      	movs	r7, #32
 801a25a:	682e      	ldr	r6, [r5, #0]
 801a25c:	2900      	cmp	r1, #0
 801a25e:	d0ac      	beq.n	801a1ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a260:	3901      	subs	r1, #1
 801a262:	4296      	cmp	r6, r2
 801a264:	b289      	uxth	r1, r1
 801a266:	daa7      	bge.n	801a1b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a268:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a26c:	682b      	ldr	r3, [r5, #0]
 801a26e:	3301      	adds	r3, #1
 801a270:	602b      	str	r3, [r5, #0]
 801a272:	e7f2      	b.n	801a25a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801a274:	b188      	cbz	r0, 801a29a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a276:	682b      	ldr	r3, [r5, #0]
 801a278:	3801      	subs	r0, #1
 801a27a:	429a      	cmp	r2, r3
 801a27c:	b280      	uxth	r0, r0
 801a27e:	dd0c      	ble.n	801a29a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a280:	f8db 3000 	ldr.w	r3, [fp]
 801a284:	1c9c      	adds	r4, r3, #2
 801a286:	f8cb 4000 	str.w	r4, [fp]
 801a28a:	881c      	ldrh	r4, [r3, #0]
 801a28c:	682b      	ldr	r3, [r5, #0]
 801a28e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801a292:	682b      	ldr	r3, [r5, #0]
 801a294:	3301      	adds	r3, #1
 801a296:	602b      	str	r3, [r5, #0]
 801a298:	e7ec      	b.n	801a274 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a29a:	2620      	movs	r6, #32
 801a29c:	b151      	cbz	r1, 801a2b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a29e:	6828      	ldr	r0, [r5, #0]
 801a2a0:	3901      	subs	r1, #1
 801a2a2:	4282      	cmp	r2, r0
 801a2a4:	b289      	uxth	r1, r1
 801a2a6:	dd05      	ble.n	801a2b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a2a8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801a2ac:	682b      	ldr	r3, [r5, #0]
 801a2ae:	3301      	adds	r3, #1
 801a2b0:	602b      	str	r3, [r5, #0]
 801a2b2:	e7f3      	b.n	801a29c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801a2b4:	b005      	add	sp, #20
 801a2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a2ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801a2ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a2be:	2400      	movs	r4, #0
 801a2c0:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801a2c4:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801a2c8:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801a2cc:	8014      	strh	r4, [r2, #0]
 801a2ce:	701c      	strb	r4, [r3, #0]
 801a2d0:	f888 4000 	strb.w	r4, [r8]
 801a2d4:	f88c 4000 	strb.w	r4, [ip]
 801a2d8:	f88e 4000 	strb.w	r4, [lr]
 801a2dc:	703c      	strb	r4, [r7, #0]
 801a2de:	6804      	ldr	r4, [r0, #0]
 801a2e0:	b1a4      	cbz	r4, 801a30c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801a2e2:	8824      	ldrh	r4, [r4, #0]
 801a2e4:	f04f 0901 	mov.w	r9, #1
 801a2e8:	b314      	cbz	r4, 801a330 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a2ea:	2c2b      	cmp	r4, #43	@ 0x2b
 801a2ec:	d001      	beq.n	801a2f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801a2ee:	2c20      	cmp	r4, #32
 801a2f0:	d110      	bne.n	801a314 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801a2f2:	8014      	strh	r4, [r2, #0]
 801a2f4:	6804      	ldr	r4, [r0, #0]
 801a2f6:	b10c      	cbz	r4, 801a2fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801a2f8:	3402      	adds	r4, #2
 801a2fa:	6004      	str	r4, [r0, #0]
 801a2fc:	680c      	ldr	r4, [r1, #0]
 801a2fe:	b10c      	cbz	r4, 801a304 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801a300:	3401      	adds	r4, #1
 801a302:	600c      	str	r4, [r1, #0]
 801a304:	6804      	ldr	r4, [r0, #0]
 801a306:	b17c      	cbz	r4, 801a328 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801a308:	8824      	ldrh	r4, [r4, #0]
 801a30a:	e7ed      	b.n	801a2e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a30c:	680c      	ldr	r4, [r1, #0]
 801a30e:	b17c      	cbz	r4, 801a330 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a310:	7824      	ldrb	r4, [r4, #0]
 801a312:	e7e7      	b.n	801a2e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801a314:	2c2d      	cmp	r4, #45	@ 0x2d
 801a316:	d102      	bne.n	801a31e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801a318:	f883 9000 	strb.w	r9, [r3]
 801a31c:	e7ea      	b.n	801a2f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a31e:	2c23      	cmp	r4, #35	@ 0x23
 801a320:	d107      	bne.n	801a332 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801a322:	f888 9000 	strb.w	r9, [r8]
 801a326:	e7e5      	b.n	801a2f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a328:	680c      	ldr	r4, [r1, #0]
 801a32a:	b10c      	cbz	r4, 801a330 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a32c:	7824      	ldrb	r4, [r4, #0]
 801a32e:	e7db      	b.n	801a2e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a330:	2400      	movs	r4, #0
 801a332:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801a336:	2b09      	cmp	r3, #9
 801a338:	d901      	bls.n	801a33e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801a33a:	2c2a      	cmp	r4, #42	@ 0x2a
 801a33c:	d122      	bne.n	801a384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a33e:	2301      	movs	r3, #1
 801a340:	2c30      	cmp	r4, #48	@ 0x30
 801a342:	f88e 3000 	strb.w	r3, [lr]
 801a346:	d10d      	bne.n	801a364 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a348:	f88c 3000 	strb.w	r3, [ip]
 801a34c:	6803      	ldr	r3, [r0, #0]
 801a34e:	b10b      	cbz	r3, 801a354 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801a350:	3302      	adds	r3, #2
 801a352:	6003      	str	r3, [r0, #0]
 801a354:	680b      	ldr	r3, [r1, #0]
 801a356:	b10b      	cbz	r3, 801a35c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801a358:	3301      	adds	r3, #1
 801a35a:	600b      	str	r3, [r1, #0]
 801a35c:	6803      	ldr	r3, [r0, #0]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d02f      	beq.n	801a3c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801a362:	881c      	ldrh	r4, [r3, #0]
 801a364:	2c2a      	cmp	r4, #42	@ 0x2a
 801a366:	d135      	bne.n	801a3d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a368:	f04f 33ff 	mov.w	r3, #4294967295
 801a36c:	6033      	str	r3, [r6, #0]
 801a36e:	6803      	ldr	r3, [r0, #0]
 801a370:	b10b      	cbz	r3, 801a376 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801a372:	3302      	adds	r3, #2
 801a374:	6003      	str	r3, [r0, #0]
 801a376:	680b      	ldr	r3, [r1, #0]
 801a378:	b10b      	cbz	r3, 801a37e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801a37a:	3301      	adds	r3, #1
 801a37c:	600b      	str	r3, [r1, #0]
 801a37e:	6803      	ldr	r3, [r0, #0]
 801a380:	b31b      	cbz	r3, 801a3ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801a382:	881c      	ldrh	r4, [r3, #0]
 801a384:	2c2e      	cmp	r4, #46	@ 0x2e
 801a386:	d11a      	bne.n	801a3be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a388:	2301      	movs	r3, #1
 801a38a:	703b      	strb	r3, [r7, #0]
 801a38c:	6803      	ldr	r3, [r0, #0]
 801a38e:	b10b      	cbz	r3, 801a394 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801a390:	3302      	adds	r3, #2
 801a392:	6003      	str	r3, [r0, #0]
 801a394:	680b      	ldr	r3, [r1, #0]
 801a396:	b10b      	cbz	r3, 801a39c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801a398:	3301      	adds	r3, #1
 801a39a:	600b      	str	r3, [r1, #0]
 801a39c:	6803      	ldr	r3, [r0, #0]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d036      	beq.n	801a410 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801a3a2:	881b      	ldrh	r3, [r3, #0]
 801a3a4:	2b2a      	cmp	r3, #42	@ 0x2a
 801a3a6:	d137      	bne.n	801a418 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a3a8:	f04f 33ff 	mov.w	r3, #4294967295
 801a3ac:	602b      	str	r3, [r5, #0]
 801a3ae:	6803      	ldr	r3, [r0, #0]
 801a3b0:	b10b      	cbz	r3, 801a3b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801a3b2:	3302      	adds	r3, #2
 801a3b4:	6003      	str	r3, [r0, #0]
 801a3b6:	680b      	ldr	r3, [r1, #0]
 801a3b8:	b10b      	cbz	r3, 801a3be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a3ba:	3301      	adds	r3, #1
 801a3bc:	600b      	str	r3, [r1, #0]
 801a3be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3c2:	680c      	ldr	r4, [r1, #0]
 801a3c4:	b134      	cbz	r4, 801a3d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a3c6:	7824      	ldrb	r4, [r4, #0]
 801a3c8:	e7cc      	b.n	801a364 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a3ca:	680b      	ldr	r3, [r1, #0]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d0f6      	beq.n	801a3be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a3d0:	781c      	ldrb	r4, [r3, #0]
 801a3d2:	e7d7      	b.n	801a384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a3d4:	2300      	movs	r3, #0
 801a3d6:	220a      	movs	r2, #10
 801a3d8:	6033      	str	r3, [r6, #0]
 801a3da:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a3de:	fa1f f38c 	uxth.w	r3, ip
 801a3e2:	2b09      	cmp	r3, #9
 801a3e4:	d8ce      	bhi.n	801a384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a3e6:	6833      	ldr	r3, [r6, #0]
 801a3e8:	fb02 c303 	mla	r3, r2, r3, ip
 801a3ec:	6033      	str	r3, [r6, #0]
 801a3ee:	6803      	ldr	r3, [r0, #0]
 801a3f0:	b10b      	cbz	r3, 801a3f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801a3f2:	3302      	adds	r3, #2
 801a3f4:	6003      	str	r3, [r0, #0]
 801a3f6:	680b      	ldr	r3, [r1, #0]
 801a3f8:	b10b      	cbz	r3, 801a3fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801a3fa:	3301      	adds	r3, #1
 801a3fc:	600b      	str	r3, [r1, #0]
 801a3fe:	6803      	ldr	r3, [r0, #0]
 801a400:	b10b      	cbz	r3, 801a406 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801a402:	881c      	ldrh	r4, [r3, #0]
 801a404:	e7e9      	b.n	801a3da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a406:	680c      	ldr	r4, [r1, #0]
 801a408:	2c00      	cmp	r4, #0
 801a40a:	d0e6      	beq.n	801a3da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a40c:	7824      	ldrb	r4, [r4, #0]
 801a40e:	e7e4      	b.n	801a3da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a410:	680b      	ldr	r3, [r1, #0]
 801a412:	b10b      	cbz	r3, 801a418 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a414:	781b      	ldrb	r3, [r3, #0]
 801a416:	e7c5      	b.n	801a3a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801a418:	2200      	movs	r2, #0
 801a41a:	240a      	movs	r4, #10
 801a41c:	602a      	str	r2, [r5, #0]
 801a41e:	3b30      	subs	r3, #48	@ 0x30
 801a420:	682a      	ldr	r2, [r5, #0]
 801a422:	b29e      	uxth	r6, r3
 801a424:	2e09      	cmp	r6, #9
 801a426:	d813      	bhi.n	801a450 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801a428:	fb04 3302 	mla	r3, r4, r2, r3
 801a42c:	602b      	str	r3, [r5, #0]
 801a42e:	6803      	ldr	r3, [r0, #0]
 801a430:	b10b      	cbz	r3, 801a436 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801a432:	3302      	adds	r3, #2
 801a434:	6003      	str	r3, [r0, #0]
 801a436:	680b      	ldr	r3, [r1, #0]
 801a438:	b10b      	cbz	r3, 801a43e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801a43a:	3301      	adds	r3, #1
 801a43c:	600b      	str	r3, [r1, #0]
 801a43e:	6803      	ldr	r3, [r0, #0]
 801a440:	b10b      	cbz	r3, 801a446 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801a442:	881b      	ldrh	r3, [r3, #0]
 801a444:	e7eb      	b.n	801a41e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a446:	680b      	ldr	r3, [r1, #0]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d0e8      	beq.n	801a41e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a44c:	781b      	ldrb	r3, [r3, #0]
 801a44e:	e7e6      	b.n	801a41e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a450:	2a06      	cmp	r2, #6
 801a452:	bfa8      	it	ge
 801a454:	2206      	movge	r2, #6
 801a456:	602a      	str	r2, [r5, #0]
 801a458:	e7b1      	b.n	801a3be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801a45a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801a45a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a45e:	b0a3      	sub	sp, #140	@ 0x8c
 801a460:	2600      	movs	r6, #0
 801a462:	4607      	mov	r7, r0
 801a464:	4688      	mov	r8, r1
 801a466:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801a46a:	4631      	mov	r1, r6
 801a46c:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801a46e:	4648      	mov	r0, r9
 801a470:	960d      	str	r6, [sp, #52]	@ 0x34
 801a472:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801a476:	2242      	movs	r2, #66	@ 0x42
 801a478:	f00f f93f 	bl	80296fa <memset>
 801a47c:	b15f      	cbz	r7, 801a496 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801a47e:	f108 3aff 	add.w	sl, r8, #4294967295
 801a482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a484:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a486:	b152      	cbz	r2, 801a49e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801a488:	8812      	ldrh	r2, [r2, #0]
 801a48a:	b10a      	cbz	r2, 801a490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801a48c:	459a      	cmp	sl, r3
 801a48e:	dc2e      	bgt.n	801a4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801a490:	2200      	movs	r2, #0
 801a492:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801a496:	4638      	mov	r0, r7
 801a498:	b023      	add	sp, #140	@ 0x8c
 801a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a49e:	9a08      	ldr	r2, [sp, #32]
 801a4a0:	2a00      	cmp	r2, #0
 801a4a2:	d0f5      	beq.n	801a490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801a4a4:	7812      	ldrb	r2, [r2, #0]
 801a4a6:	e7f0      	b.n	801a48a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801a4a8:	2d00      	cmp	r5, #0
 801a4aa:	d0ea      	beq.n	801a482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a4ac:	782a      	ldrb	r2, [r5, #0]
 801a4ae:	b142      	cbz	r2, 801a4c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801a4b0:	2a25      	cmp	r2, #37	@ 0x25
 801a4b2:	d001      	beq.n	801a4b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801a4b4:	459a      	cmp	sl, r3
 801a4b6:	dc08      	bgt.n	801a4ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801a4b8:	f1bb 0f00 	cmp.w	fp, #0
 801a4bc:	d121      	bne.n	801a502 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801a4be:	2d00      	cmp	r5, #0
 801a4c0:	d0df      	beq.n	801a482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a4c2:	782a      	ldrb	r2, [r5, #0]
 801a4c4:	f04f 0b00 	mov.w	fp, #0
 801a4c8:	e01d      	b.n	801a506 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801a4ca:	f1bb 0f00 	cmp.w	fp, #0
 801a4ce:	d077      	beq.n	801a5c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801a4d0:	f8bb 2000 	ldrh.w	r2, [fp]
 801a4d4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801a4d8:	f1bb 0f00 	cmp.w	fp, #0
 801a4dc:	d002      	beq.n	801a4e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801a4de:	f10b 0202 	add.w	r2, fp, #2
 801a4e2:	9209      	str	r2, [sp, #36]	@ 0x24
 801a4e4:	b10d      	cbz	r5, 801a4ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801a4e6:	3501      	adds	r5, #1
 801a4e8:	9508      	str	r5, [sp, #32]
 801a4ea:	3301      	adds	r3, #1
 801a4ec:	930d      	str	r3, [sp, #52]	@ 0x34
 801a4ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a4f0:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801a4f4:	f1bb 0f00 	cmp.w	fp, #0
 801a4f8:	d0d6      	beq.n	801a4a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801a4fa:	f8bb 2000 	ldrh.w	r2, [fp]
 801a4fe:	2a00      	cmp	r2, #0
 801a500:	d1d6      	bne.n	801a4b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801a502:	f8bb 2000 	ldrh.w	r2, [fp]
 801a506:	2a00      	cmp	r2, #0
 801a508:	d0bb      	beq.n	801a482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a50a:	459a      	cmp	sl, r3
 801a50c:	ddb9      	ble.n	801a482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a50e:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801a512:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801a516:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801a51a:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801a51e:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801a522:	960e      	str	r6, [sp, #56]	@ 0x38
 801a524:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801a528:	960f      	str	r6, [sp, #60]	@ 0x3c
 801a52a:	f1bb 0f00 	cmp.w	fp, #0
 801a52e:	d002      	beq.n	801a536 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801a530:	f10b 0302 	add.w	r3, fp, #2
 801a534:	9309      	str	r3, [sp, #36]	@ 0x24
 801a536:	b10d      	cbz	r5, 801a53c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801a538:	1c6b      	adds	r3, r5, #1
 801a53a:	9308      	str	r3, [sp, #32]
 801a53c:	ab0f      	add	r3, sp, #60	@ 0x3c
 801a53e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801a542:	a908      	add	r1, sp, #32
 801a544:	a809      	add	r0, sp, #36	@ 0x24
 801a546:	9305      	str	r3, [sp, #20]
 801a548:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801a54c:	9304      	str	r3, [sp, #16]
 801a54e:	ab0e      	add	r3, sp, #56	@ 0x38
 801a550:	9303      	str	r3, [sp, #12]
 801a552:	ab0c      	add	r3, sp, #48	@ 0x30
 801a554:	9302      	str	r3, [sp, #8]
 801a556:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801a55a:	9301      	str	r3, [sp, #4]
 801a55c:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801a560:	9300      	str	r3, [sp, #0]
 801a562:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801a566:	f7ff fea8 	bl	801a2ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801a56a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	bfbf      	itttt	lt
 801a570:	6823      	ldrlt	r3, [r4, #0]
 801a572:	3404      	addlt	r4, #4
 801a574:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a578:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801a57a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	bfbe      	ittt	lt
 801a580:	6823      	ldrlt	r3, [r4, #0]
 801a582:	3404      	addlt	r4, #4
 801a584:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a588:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a58c:	bfb8      	it	lt
 801a58e:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801a590:	b1d9      	cbz	r1, 801a5ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801a592:	880b      	ldrh	r3, [r1, #0]
 801a594:	2b69      	cmp	r3, #105	@ 0x69
 801a596:	d01f      	beq.n	801a5d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a598:	d82f      	bhi.n	801a5fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801a59a:	2b58      	cmp	r3, #88	@ 0x58
 801a59c:	d01c      	beq.n	801a5d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a59e:	d818      	bhi.n	801a5d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801a5a0:	2b25      	cmp	r3, #37	@ 0x25
 801a5a2:	d034      	beq.n	801a60e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801a5a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a5a6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801a5aa:	f1bb 0f00 	cmp.w	fp, #0
 801a5ae:	f000 80b7 	beq.w	801a720 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801a5b2:	f8bb 5000 	ldrh.w	r5, [fp]
 801a5b6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801a5ba:	3301      	adds	r3, #1
 801a5bc:	930d      	str	r3, [sp, #52]	@ 0x34
 801a5be:	e029      	b.n	801a614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a5c0:	b10d      	cbz	r5, 801a5c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801a5c2:	782a      	ldrb	r2, [r5, #0]
 801a5c4:	e786      	b.n	801a4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a5c6:	462a      	mov	r2, r5
 801a5c8:	e784      	b.n	801a4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a5ca:	2a00      	cmp	r2, #0
 801a5cc:	d0ea      	beq.n	801a5a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a5ce:	7813      	ldrb	r3, [r2, #0]
 801a5d0:	e7e0      	b.n	801a594 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801a5d2:	3b63      	subs	r3, #99	@ 0x63
 801a5d4:	2b01      	cmp	r3, #1
 801a5d6:	d8e5      	bhi.n	801a5a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a5d8:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801a5dc:	b329      	cbz	r1, 801a62a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801a5de:	880b      	ldrh	r3, [r1, #0]
 801a5e0:	2b69      	cmp	r3, #105	@ 0x69
 801a5e2:	d063      	beq.n	801a6ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a5e4:	d825      	bhi.n	801a632 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801a5e6:	2b63      	cmp	r3, #99	@ 0x63
 801a5e8:	d038      	beq.n	801a65c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801a5ea:	2b64      	cmp	r3, #100	@ 0x64
 801a5ec:	d05e      	beq.n	801a6ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a5ee:	2b58      	cmp	r3, #88	@ 0x58
 801a5f0:	d07a      	beq.n	801a6e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801a5f2:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801a5f6:	4625      	mov	r5, r4
 801a5f8:	e036      	b.n	801a668 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a5fa:	2b73      	cmp	r3, #115	@ 0x73
 801a5fc:	d0ec      	beq.n	801a5d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a5fe:	d802      	bhi.n	801a606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801a600:	2b6f      	cmp	r3, #111	@ 0x6f
 801a602:	d1cf      	bne.n	801a5a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a604:	e7e8      	b.n	801a5d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a606:	2b75      	cmp	r3, #117	@ 0x75
 801a608:	d0e6      	beq.n	801a5d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a60a:	2b78      	cmp	r3, #120	@ 0x78
 801a60c:	e7f9      	b.n	801a602 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801a60e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a610:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801a614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a616:	b10b      	cbz	r3, 801a61c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801a618:	3302      	adds	r3, #2
 801a61a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a61c:	9b08      	ldr	r3, [sp, #32]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	f43f af2f 	beq.w	801a482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a624:	3301      	adds	r3, #1
 801a626:	9308      	str	r3, [sp, #32]
 801a628:	e72b      	b.n	801a482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a62a:	2a00      	cmp	r2, #0
 801a62c:	d0e1      	beq.n	801a5f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a62e:	7813      	ldrb	r3, [r2, #0]
 801a630:	e7d6      	b.n	801a5e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801a632:	2b73      	cmp	r3, #115	@ 0x73
 801a634:	d036      	beq.n	801a6a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801a636:	d807      	bhi.n	801a648 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801a638:	2b6f      	cmp	r3, #111	@ 0x6f
 801a63a:	d1da      	bne.n	801a5f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a63c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a63e:	1d25      	adds	r5, r4, #4
 801a640:	2308      	movs	r3, #8
 801a642:	eba8 0202 	sub.w	r2, r8, r2
 801a646:	e049      	b.n	801a6dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a648:	2b75      	cmp	r3, #117	@ 0x75
 801a64a:	d042      	beq.n	801a6d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801a64c:	2b78      	cmp	r3, #120	@ 0x78
 801a64e:	d1d0      	bne.n	801a5f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a650:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a652:	1d25      	adds	r5, r4, #4
 801a654:	2310      	movs	r3, #16
 801a656:	eba8 0202 	sub.w	r2, r8, r2
 801a65a:	e03f      	b.n	801a6dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a65c:	6823      	ldr	r3, [r4, #0]
 801a65e:	1d25      	adds	r5, r4, #4
 801a660:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801a664:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801a668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a66a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d051      	beq.n	801a716 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801a672:	881a      	ldrh	r2, [r3, #0]
 801a674:	a80d      	add	r0, sp, #52	@ 0x34
 801a676:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801a67a:	462c      	mov	r4, r5
 801a67c:	9005      	str	r0, [sp, #20]
 801a67e:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801a682:	9004      	str	r0, [sp, #16]
 801a684:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a686:	9003      	str	r0, [sp, #12]
 801a688:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801a68c:	9002      	str	r0, [sp, #8]
 801a68e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801a690:	9001      	str	r0, [sp, #4]
 801a692:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801a696:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801a69a:	9000      	str	r0, [sp, #0]
 801a69c:	a810      	add	r0, sp, #64	@ 0x40
 801a69e:	f7ff fd49 	bl	801a134 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801a6a2:	e7b7      	b.n	801a614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a6a4:	1d25      	adds	r5, r4, #4
 801a6a6:	6823      	ldr	r3, [r4, #0]
 801a6a8:	9310      	str	r3, [sp, #64]	@ 0x40
 801a6aa:	e7dd      	b.n	801a668 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a6ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a6ae:	230a      	movs	r3, #10
 801a6b0:	4649      	mov	r1, r9
 801a6b2:	6820      	ldr	r0, [r4, #0]
 801a6b4:	eba8 0202 	sub.w	r2, r8, r2
 801a6b8:	1d25      	adds	r5, r4, #4
 801a6ba:	b292      	uxth	r2, r2
 801a6bc:	f7ff fcf0 	bl	801a0a0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801a6c0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801a6c4:	2b2d      	cmp	r3, #45	@ 0x2d
 801a6c6:	d1cf      	bne.n	801a668 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a6c8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a6cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a6ce:	3302      	adds	r3, #2
 801a6d0:	e7ea      	b.n	801a6a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801a6d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a6d4:	1d25      	adds	r5, r4, #4
 801a6d6:	230a      	movs	r3, #10
 801a6d8:	eba8 0202 	sub.w	r2, r8, r2
 801a6dc:	b292      	uxth	r2, r2
 801a6de:	4649      	mov	r1, r9
 801a6e0:	6820      	ldr	r0, [r4, #0]
 801a6e2:	f7ff fd09 	bl	801a0f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a6e6:	e7bf      	b.n	801a668 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a6e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a6ea:	2310      	movs	r3, #16
 801a6ec:	4649      	mov	r1, r9
 801a6ee:	6820      	ldr	r0, [r4, #0]
 801a6f0:	eba8 0202 	sub.w	r2, r8, r2
 801a6f4:	1d25      	adds	r5, r4, #4
 801a6f6:	b292      	uxth	r2, r2
 801a6f8:	f7ff fcfe 	bl	801a0f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a6fc:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801a700:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a704:	2b00      	cmp	r3, #0
 801a706:	d0af      	beq.n	801a668 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a708:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801a70c:	2919      	cmp	r1, #25
 801a70e:	d8f7      	bhi.n	801a700 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a710:	3b20      	subs	r3, #32
 801a712:	8013      	strh	r3, [r2, #0]
 801a714:	e7f4      	b.n	801a700 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a716:	9a08      	ldr	r2, [sp, #32]
 801a718:	2a00      	cmp	r2, #0
 801a71a:	d0ab      	beq.n	801a674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a71c:	7812      	ldrb	r2, [r2, #0]
 801a71e:	e7a9      	b.n	801a674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a720:	2d00      	cmp	r5, #0
 801a722:	f43f af48 	beq.w	801a5b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801a726:	782d      	ldrb	r5, [r5, #0]
 801a728:	e745      	b.n	801a5b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801a72a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801a72a:	b507      	push	{r0, r1, r2, lr}
 801a72c:	9300      	str	r3, [sp, #0]
 801a72e:	4613      	mov	r3, r2
 801a730:	2200      	movs	r2, #0
 801a732:	f7ff fe92 	bl	801a45a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801a736:	b003      	add	sp, #12
 801a738:	f85d fb04 	ldr.w	pc, [sp], #4

0801a73c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801a73c:	b40c      	push	{r2, r3}
 801a73e:	b507      	push	{r0, r1, r2, lr}
 801a740:	ab04      	add	r3, sp, #16
 801a742:	f853 2b04 	ldr.w	r2, [r3], #4
 801a746:	9301      	str	r3, [sp, #4]
 801a748:	f7ff ffef 	bl	801a72a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801a74c:	b003      	add	sp, #12
 801a74e:	f85d eb04 	ldr.w	lr, [sp], #4
 801a752:	b002      	add	sp, #8
 801a754:	4770      	bx	lr
	...

0801a758 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a758:	4b01      	ldr	r3, [pc, #4]	@ (801a760 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a75a:	6018      	str	r0, [r3, #0]
 801a75c:	4770      	bx	lr
 801a75e:	bf00      	nop
 801a760:	24006660 	.word	0x24006660

0801a764 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a764:	4b06      	ldr	r3, [pc, #24]	@ (801a780 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a766:	881a      	ldrh	r2, [r3, #0]
 801a768:	4282      	cmp	r2, r0
 801a76a:	d807      	bhi.n	801a77c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a76c:	4b05      	ldr	r3, [pc, #20]	@ (801a784 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a76e:	881b      	ldrh	r3, [r3, #0]
 801a770:	4413      	add	r3, r2
 801a772:	4298      	cmp	r0, r3
 801a774:	bfac      	ite	ge
 801a776:	2000      	movge	r0, #0
 801a778:	2001      	movlt	r0, #1
 801a77a:	4770      	bx	lr
 801a77c:	2000      	movs	r0, #0
 801a77e:	4770      	bx	lr
 801a780:	24006680 	.word	0x24006680
 801a784:	24006684 	.word	0x24006684

0801a788 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a788:	b508      	push	{r3, lr}
 801a78a:	4601      	mov	r1, r0
 801a78c:	f7ff ffea 	bl	801a764 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a790:	b118      	cbz	r0, 801a79a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a792:	4b02      	ldr	r3, [pc, #8]	@ (801a79c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a79a:	bd08      	pop	{r3, pc}
 801a79c:	24006664 	.word	0x24006664

0801a7a0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7a2:	4c24      	ldr	r4, [pc, #144]	@ (801a834 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a7a4:	6823      	ldr	r3, [r4, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d042      	beq.n	801a830 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a7aa:	4a23      	ldr	r2, [pc, #140]	@ (801a838 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a7ac:	4d23      	ldr	r5, [pc, #140]	@ (801a83c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a7ae:	8811      	ldrh	r1, [r2, #0]
 801a7b0:	f8b5 c000 	ldrh.w	ip, [r5]
 801a7b4:	4822      	ldr	r0, [pc, #136]	@ (801a840 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a7b6:	4461      	add	r1, ip
 801a7b8:	1c4a      	adds	r2, r1, #1
 801a7ba:	008f      	lsls	r7, r1, #2
 801a7bc:	f022 0201 	bic.w	r2, r2, #1
 801a7c0:	19de      	adds	r6, r3, r7
 801a7c2:	0412      	lsls	r2, r2, #16
 801a7c4:	6006      	str	r6, [r0, #0]
 801a7c6:	4e1f      	ldr	r6, [pc, #124]	@ (801a844 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a7c8:	0c12      	lsrs	r2, r2, #16
 801a7ca:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a7ce:	19da      	adds	r2, r3, r7
 801a7d0:	6032      	str	r2, [r6, #0]
 801a7d2:	220e      	movs	r2, #14
 801a7d4:	fb02 f20c 	mul.w	r2, r2, ip
 801a7d8:	3203      	adds	r2, #3
 801a7da:	f022 0203 	bic.w	r2, r2, #3
 801a7de:	443a      	add	r2, r7
 801a7e0:	4f19      	ldr	r7, [pc, #100]	@ (801a848 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a7e2:	4413      	add	r3, r2
 801a7e4:	603b      	str	r3, [r7, #0]
 801a7e6:	2300      	movs	r3, #0
 801a7e8:	4f18      	ldr	r7, [pc, #96]	@ (801a84c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a7ea:	469c      	mov	ip, r3
 801a7ec:	803b      	strh	r3, [r7, #0]
 801a7ee:	4f18      	ldr	r7, [pc, #96]	@ (801a850 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a7f0:	683f      	ldr	r7, [r7, #0]
 801a7f2:	1aba      	subs	r2, r7, r2
 801a7f4:	4f17      	ldr	r7, [pc, #92]	@ (801a854 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a7f6:	603a      	str	r2, [r7, #0]
 801a7f8:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801a7fc:	4a16      	ldr	r2, [pc, #88]	@ (801a858 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a7fe:	8013      	strh	r3, [r2, #0]
 801a800:	428b      	cmp	r3, r1
 801a802:	d10d      	bne.n	801a820 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a804:	882d      	ldrh	r5, [r5, #0]
 801a806:	2300      	movs	r3, #0
 801a808:	6830      	ldr	r0, [r6, #0]
 801a80a:	240e      	movs	r4, #14
 801a80c:	429d      	cmp	r5, r3
 801a80e:	d90f      	bls.n	801a830 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a810:	fb04 0203 	mla	r2, r4, r3, r0
 801a814:	3301      	adds	r3, #1
 801a816:	7b11      	ldrb	r1, [r2, #12]
 801a818:	f36f 1145 	bfc	r1, #5, #1
 801a81c:	7311      	strb	r1, [r2, #12]
 801a81e:	e7f5      	b.n	801a80c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a820:	6822      	ldr	r2, [r4, #0]
 801a822:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a826:	6802      	ldr	r2, [r0, #0]
 801a828:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a82c:	3301      	adds	r3, #1
 801a82e:	e7e7      	b.n	801a800 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a832:	bf00      	nop
 801a834:	24006664 	.word	0x24006664
 801a838:	24006680 	.word	0x24006680
 801a83c:	24006684 	.word	0x24006684
 801a840:	24006678 	.word	0x24006678
 801a844:	24006668 	.word	0x24006668
 801a848:	24006670 	.word	0x24006670
 801a84c:	24006682 	.word	0x24006682
 801a850:	2400666c 	.word	0x2400666c
 801a854:	2400667c 	.word	0x2400667c
 801a858:	24006674 	.word	0x24006674

0801a85c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a85c:	4b06      	ldr	r3, [pc, #24]	@ (801a878 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	b943      	cbnz	r3, 801a874 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a862:	b139      	cbz	r1, 801a874 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a864:	4b05      	ldr	r3, [pc, #20]	@ (801a87c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a866:	801a      	strh	r2, [r3, #0]
 801a868:	4b05      	ldr	r3, [pc, #20]	@ (801a880 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a86a:	6019      	str	r1, [r3, #0]
 801a86c:	4b05      	ldr	r3, [pc, #20]	@ (801a884 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a86e:	6018      	str	r0, [r3, #0]
 801a870:	f7ff bf96 	b.w	801a7a0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a874:	4770      	bx	lr
 801a876:	bf00      	nop
 801a878:	24006670 	.word	0x24006670
 801a87c:	24006684 	.word	0x24006684
 801a880:	2400666c 	.word	0x2400666c
 801a884:	24006664 	.word	0x24006664

0801a888 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a888:	b470      	push	{r4, r5, r6}
 801a88a:	4c07      	ldr	r4, [pc, #28]	@ (801a8a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a88c:	4605      	mov	r5, r0
 801a88e:	4610      	mov	r0, r2
 801a890:	9a03      	ldr	r2, [sp, #12]
 801a892:	6826      	ldr	r6, [r4, #0]
 801a894:	b936      	cbnz	r6, 801a8a4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a896:	6025      	str	r5, [r4, #0]
 801a898:	4c04      	ldr	r4, [pc, #16]	@ (801a8ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a89a:	8021      	strh	r1, [r4, #0]
 801a89c:	4619      	mov	r1, r3
 801a89e:	bc70      	pop	{r4, r5, r6}
 801a8a0:	f7ff bfdc 	b.w	801a85c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a8a4:	bc70      	pop	{r4, r5, r6}
 801a8a6:	4770      	bx	lr
 801a8a8:	24006688 	.word	0x24006688
 801a8ac:	24006680 	.word	0x24006680

0801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a8b0:	4a12      	ldr	r2, [pc, #72]	@ (801a8fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a8b2:	8803      	ldrh	r3, [r0, #0]
 801a8b4:	8812      	ldrh	r2, [r2, #0]
 801a8b6:	4293      	cmp	r3, r2
 801a8b8:	d207      	bcs.n	801a8ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801a8ba:	4a11      	ldr	r2, [pc, #68]	@ (801a900 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801a8bc:	2114      	movs	r1, #20
 801a8be:	6812      	ldr	r2, [r2, #0]
 801a8c0:	fb01 2303 	mla	r3, r1, r3, r2
 801a8c4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801a8c8:	4770      	bx	lr
 801a8ca:	490e      	ldr	r1, [pc, #56]	@ (801a904 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a8cc:	8809      	ldrh	r1, [r1, #0]
 801a8ce:	4411      	add	r1, r2
 801a8d0:	428b      	cmp	r3, r1
 801a8d2:	da04      	bge.n	801a8de <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801a8d4:	1a9b      	subs	r3, r3, r2
 801a8d6:	4a0c      	ldr	r2, [pc, #48]	@ (801a908 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a8d8:	210e      	movs	r1, #14
 801a8da:	6812      	ldr	r2, [r2, #0]
 801a8dc:	e7f0      	b.n	801a8c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801a8de:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a8e2:	4293      	cmp	r3, r2
 801a8e4:	d108      	bne.n	801a8f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801a8e6:	4b09      	ldr	r3, [pc, #36]	@ (801a90c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a8e8:	781b      	ldrb	r3, [r3, #0]
 801a8ea:	b91b      	cbnz	r3, 801a8f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a8ec:	4b08      	ldr	r3, [pc, #32]	@ (801a910 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a8ee:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a8f2:	4770      	bx	lr
 801a8f4:	4b07      	ldr	r3, [pc, #28]	@ (801a914 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a8f6:	e7fa      	b.n	801a8ee <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801a8f8:	2000      	movs	r0, #0
 801a8fa:	4770      	bx	lr
 801a8fc:	24006680 	.word	0x24006680
 801a900:	24006688 	.word	0x24006688
 801a904:	24006684 	.word	0x24006684
 801a908:	24006668 	.word	0x24006668
 801a90c:	240065f8 	.word	0x240065f8
 801a910:	240065fa 	.word	0x240065fa
 801a914:	240065fc 	.word	0x240065fc

0801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a918:	4a12      	ldr	r2, [pc, #72]	@ (801a964 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801a91a:	8803      	ldrh	r3, [r0, #0]
 801a91c:	8812      	ldrh	r2, [r2, #0]
 801a91e:	4293      	cmp	r3, r2
 801a920:	d207      	bcs.n	801a932 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801a922:	4a11      	ldr	r2, [pc, #68]	@ (801a968 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801a924:	2114      	movs	r1, #20
 801a926:	6812      	ldr	r2, [r2, #0]
 801a928:	fb01 2303 	mla	r3, r1, r3, r2
 801a92c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801a930:	4770      	bx	lr
 801a932:	490e      	ldr	r1, [pc, #56]	@ (801a96c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a934:	8809      	ldrh	r1, [r1, #0]
 801a936:	4411      	add	r1, r2
 801a938:	428b      	cmp	r3, r1
 801a93a:	da04      	bge.n	801a946 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801a93c:	1a9b      	subs	r3, r3, r2
 801a93e:	4a0c      	ldr	r2, [pc, #48]	@ (801a970 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a940:	210e      	movs	r1, #14
 801a942:	6812      	ldr	r2, [r2, #0]
 801a944:	e7f0      	b.n	801a928 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801a946:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a94a:	4293      	cmp	r3, r2
 801a94c:	d108      	bne.n	801a960 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a94e:	4b09      	ldr	r3, [pc, #36]	@ (801a974 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a950:	781b      	ldrb	r3, [r3, #0]
 801a952:	b91b      	cbnz	r3, 801a95c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a954:	4b08      	ldr	r3, [pc, #32]	@ (801a978 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a956:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a95a:	4770      	bx	lr
 801a95c:	4b07      	ldr	r3, [pc, #28]	@ (801a97c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a95e:	e7fa      	b.n	801a956 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a960:	2000      	movs	r0, #0
 801a962:	4770      	bx	lr
 801a964:	24006680 	.word	0x24006680
 801a968:	24006688 	.word	0x24006688
 801a96c:	24006684 	.word	0x24006684
 801a970:	24006668 	.word	0x24006668
 801a974:	240065f8 	.word	0x240065f8
 801a978:	240065fc 	.word	0x240065fc
 801a97c:	240065fa 	.word	0x240065fa

0801a980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801a980:	4a22      	ldr	r2, [pc, #136]	@ (801aa0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801a982:	b530      	push	{r4, r5, lr}
 801a984:	880b      	ldrh	r3, [r1, #0]
 801a986:	8812      	ldrh	r2, [r2, #0]
 801a988:	4293      	cmp	r3, r2
 801a98a:	d213      	bcs.n	801a9b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801a98c:	4a20      	ldr	r2, [pc, #128]	@ (801aa10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801a98e:	2114      	movs	r1, #20
 801a990:	6812      	ldr	r2, [r2, #0]
 801a992:	fb01 2303 	mla	r3, r1, r3, r2
 801a996:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a99a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801a99e:	8a1a      	ldrh	r2, [r3, #16]
 801a9a0:	8a5b      	ldrh	r3, [r3, #18]
 801a9a2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a9a6:	8004      	strh	r4, [r0, #0]
 801a9a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a9ac:	8041      	strh	r1, [r0, #2]
 801a9ae:	8082      	strh	r2, [r0, #4]
 801a9b0:	80c3      	strh	r3, [r0, #6]
 801a9b2:	e024      	b.n	801a9fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801a9b4:	4917      	ldr	r1, [pc, #92]	@ (801aa14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801a9b6:	8809      	ldrh	r1, [r1, #0]
 801a9b8:	4411      	add	r1, r2
 801a9ba:	428b      	cmp	r3, r1
 801a9bc:	da10      	bge.n	801a9e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801a9be:	1a9b      	subs	r3, r3, r2
 801a9c0:	220e      	movs	r2, #14
 801a9c2:	4353      	muls	r3, r2
 801a9c4:	4a14      	ldr	r2, [pc, #80]	@ (801aa18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801a9c6:	6811      	ldr	r1, [r2, #0]
 801a9c8:	18ca      	adds	r2, r1, r3
 801a9ca:	5ecd      	ldrsh	r5, [r1, r3]
 801a9cc:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801a9d0:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801a9d4:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801a9d8:	8005      	strh	r5, [r0, #0]
 801a9da:	8044      	strh	r4, [r0, #2]
 801a9dc:	8081      	strh	r1, [r0, #4]
 801a9de:	e7e7      	b.n	801a9b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801a9e0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a9e4:	4293      	cmp	r3, r2
 801a9e6:	d10b      	bne.n	801aa00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801a9e8:	4b0c      	ldr	r3, [pc, #48]	@ (801aa1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801a9ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a9ee:	4b0c      	ldr	r3, [pc, #48]	@ (801aa20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801a9f0:	8081      	strh	r1, [r0, #4]
 801a9f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	80c2      	strh	r2, [r0, #6]
 801a9fa:	8003      	strh	r3, [r0, #0]
 801a9fc:	8043      	strh	r3, [r0, #2]
 801a9fe:	bd30      	pop	{r4, r5, pc}
 801aa00:	2300      	movs	r3, #0
 801aa02:	8003      	strh	r3, [r0, #0]
 801aa04:	8043      	strh	r3, [r0, #2]
 801aa06:	8083      	strh	r3, [r0, #4]
 801aa08:	e7d2      	b.n	801a9b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801aa0a:	bf00      	nop
 801aa0c:	24006680 	.word	0x24006680
 801aa10:	24006688 	.word	0x24006688
 801aa14:	24006684 	.word	0x24006684
 801aa18:	24006668 	.word	0x24006668
 801aa1c:	240065f4 	.word	0x240065f4
 801aa20:	240065f6 	.word	0x240065f6

0801aa24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801aa24:	4a17      	ldr	r2, [pc, #92]	@ (801aa84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801aa26:	8803      	ldrh	r3, [r0, #0]
 801aa28:	8812      	ldrh	r2, [r2, #0]
 801aa2a:	4293      	cmp	r3, r2
 801aa2c:	d213      	bcs.n	801aa56 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801aa2e:	4a16      	ldr	r2, [pc, #88]	@ (801aa88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801aa30:	2114      	movs	r1, #20
 801aa32:	6812      	ldr	r2, [r2, #0]
 801aa34:	fb01 2303 	mla	r3, r1, r3, r2
 801aa38:	8a1a      	ldrh	r2, [r3, #16]
 801aa3a:	8919      	ldrh	r1, [r3, #8]
 801aa3c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801aa40:	428a      	cmp	r2, r1
 801aa42:	db1d      	blt.n	801aa80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801aa44:	8a58      	ldrh	r0, [r3, #18]
 801aa46:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801aa4a:	895b      	ldrh	r3, [r3, #10]
 801aa4c:	4298      	cmp	r0, r3
 801aa4e:	bfac      	ite	ge
 801aa50:	2000      	movge	r0, #0
 801aa52:	2001      	movlt	r0, #1
 801aa54:	4770      	bx	lr
 801aa56:	490d      	ldr	r1, [pc, #52]	@ (801aa8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801aa58:	8809      	ldrh	r1, [r1, #0]
 801aa5a:	4411      	add	r1, r2
 801aa5c:	428b      	cmp	r3, r1
 801aa5e:	da0d      	bge.n	801aa7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801aa60:	1a9b      	subs	r3, r3, r2
 801aa62:	4a0b      	ldr	r2, [pc, #44]	@ (801aa90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801aa64:	210e      	movs	r1, #14
 801aa66:	6812      	ldr	r2, [r2, #0]
 801aa68:	fb01 2303 	mla	r3, r1, r3, r2
 801aa6c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801aa70:	891a      	ldrh	r2, [r3, #8]
 801aa72:	4291      	cmp	r1, r2
 801aa74:	db04      	blt.n	801aa80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801aa76:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801aa7a:	e7e6      	b.n	801aa4a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801aa7c:	2000      	movs	r0, #0
 801aa7e:	4770      	bx	lr
 801aa80:	2001      	movs	r0, #1
 801aa82:	4770      	bx	lr
 801aa84:	24006680 	.word	0x24006680
 801aa88:	24006688 	.word	0x24006688
 801aa8c:	24006684 	.word	0x24006684
 801aa90:	24006668 	.word	0x24006668

0801aa94 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801aa94:	4a12      	ldr	r2, [pc, #72]	@ (801aae0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801aa96:	8803      	ldrh	r3, [r0, #0]
 801aa98:	8811      	ldrh	r1, [r2, #0]
 801aa9a:	428b      	cmp	r3, r1
 801aa9c:	d20b      	bcs.n	801aab6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801aa9e:	4a11      	ldr	r2, [pc, #68]	@ (801aae4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801aaa0:	6812      	ldr	r2, [r2, #0]
 801aaa2:	b112      	cbz	r2, 801aaaa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801aaa4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801aaa8:	b9c0      	cbnz	r0, 801aadc <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801aaaa:	4a0f      	ldr	r2, [pc, #60]	@ (801aae8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801aaac:	6811      	ldr	r1, [r2, #0]
 801aaae:	2214      	movs	r2, #20
 801aab0:	4353      	muls	r3, r2
 801aab2:	58c8      	ldr	r0, [r1, r3]
 801aab4:	4770      	bx	lr
 801aab6:	4a0d      	ldr	r2, [pc, #52]	@ (801aaec <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801aab8:	8812      	ldrh	r2, [r2, #0]
 801aaba:	440a      	add	r2, r1
 801aabc:	4293      	cmp	r3, r2
 801aabe:	da04      	bge.n	801aaca <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801aac0:	4a08      	ldr	r2, [pc, #32]	@ (801aae4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801aac2:	6812      	ldr	r2, [r2, #0]
 801aac4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801aac8:	4770      	bx	lr
 801aaca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801aace:	4293      	cmp	r3, r2
 801aad0:	d103      	bne.n	801aada <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801aad2:	4b07      	ldr	r3, [pc, #28]	@ (801aaf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801aad8:	4770      	bx	lr
 801aada:	2000      	movs	r0, #0
 801aadc:	4770      	bx	lr
 801aade:	bf00      	nop
 801aae0:	24006680 	.word	0x24006680
 801aae4:	24006664 	.word	0x24006664
 801aae8:	24006688 	.word	0x24006688
 801aaec:	24006684 	.word	0x24006684
 801aaf0:	24006600 	.word	0x24006600

0801aaf4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801aaf4:	4b24      	ldr	r3, [pc, #144]	@ (801ab88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801aaf6:	8802      	ldrh	r2, [r0, #0]
 801aaf8:	8818      	ldrh	r0, [r3, #0]
 801aafa:	4282      	cmp	r2, r0
 801aafc:	d221      	bcs.n	801ab42 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801aafe:	4b23      	ldr	r3, [pc, #140]	@ (801ab8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ab00:	6819      	ldr	r1, [r3, #0]
 801ab02:	2314      	movs	r3, #20
 801ab04:	fb03 1302 	mla	r3, r3, r2, r1
 801ab08:	6858      	ldr	r0, [r3, #4]
 801ab0a:	2800      	cmp	r0, #0
 801ab0c:	d03a      	beq.n	801ab84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ab0e:	4920      	ldr	r1, [pc, #128]	@ (801ab90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ab10:	6809      	ldr	r1, [r1, #0]
 801ab12:	2900      	cmp	r1, #0
 801ab14:	d036      	beq.n	801ab84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ab16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ab1a:	2900      	cmp	r1, #0
 801ab1c:	d032      	beq.n	801ab84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ab1e:	891a      	ldrh	r2, [r3, #8]
 801ab20:	8958      	ldrh	r0, [r3, #10]
 801ab22:	4350      	muls	r0, r2
 801ab24:	7c5a      	ldrb	r2, [r3, #17]
 801ab26:	7cdb      	ldrb	r3, [r3, #19]
 801ab28:	0952      	lsrs	r2, r2, #5
 801ab2a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ab2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ab32:	2b0b      	cmp	r3, #11
 801ab34:	bf18      	it	ne
 801ab36:	0040      	lslne	r0, r0, #1
 801ab38:	3003      	adds	r0, #3
 801ab3a:	f020 0003 	bic.w	r0, r0, #3
 801ab3e:	4408      	add	r0, r1
 801ab40:	4770      	bx	lr
 801ab42:	4b14      	ldr	r3, [pc, #80]	@ (801ab94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ab44:	881b      	ldrh	r3, [r3, #0]
 801ab46:	4403      	add	r3, r0
 801ab48:	429a      	cmp	r2, r3
 801ab4a:	da1a      	bge.n	801ab82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ab4c:	4b12      	ldr	r3, [pc, #72]	@ (801ab98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ab4e:	1a10      	subs	r0, r2, r0
 801ab50:	210e      	movs	r1, #14
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	fb01 3000 	mla	r0, r1, r0, r3
 801ab58:	7b03      	ldrb	r3, [r0, #12]
 801ab5a:	f003 031f 	and.w	r3, r3, #31
 801ab5e:	2b0b      	cmp	r3, #11
 801ab60:	d10b      	bne.n	801ab7a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801ab62:	8903      	ldrh	r3, [r0, #8]
 801ab64:	8940      	ldrh	r0, [r0, #10]
 801ab66:	4358      	muls	r0, r3
 801ab68:	4b09      	ldr	r3, [pc, #36]	@ (801ab90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ab6a:	3003      	adds	r0, #3
 801ab6c:	6819      	ldr	r1, [r3, #0]
 801ab6e:	f020 0303 	bic.w	r3, r0, #3
 801ab72:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ab76:	4418      	add	r0, r3
 801ab78:	4770      	bx	lr
 801ab7a:	2b0d      	cmp	r3, #13
 801ab7c:	d101      	bne.n	801ab82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ab7e:	300d      	adds	r0, #13
 801ab80:	4770      	bx	lr
 801ab82:	2000      	movs	r0, #0
 801ab84:	4770      	bx	lr
 801ab86:	bf00      	nop
 801ab88:	24006680 	.word	0x24006680
 801ab8c:	24006688 	.word	0x24006688
 801ab90:	24006664 	.word	0x24006664
 801ab94:	24006684 	.word	0x24006684
 801ab98:	24006668 	.word	0x24006668

0801ab9c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ab9c:	4b1f      	ldr	r3, [pc, #124]	@ (801ac1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801ab9e:	b510      	push	{r4, lr}
 801aba0:	8802      	ldrh	r2, [r0, #0]
 801aba2:	881b      	ldrh	r3, [r3, #0]
 801aba4:	429a      	cmp	r2, r3
 801aba6:	d21a      	bcs.n	801abde <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801aba8:	4b1d      	ldr	r3, [pc, #116]	@ (801ac20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801abaa:	2114      	movs	r1, #20
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	fb01 3102 	mla	r1, r1, r2, r3
 801abb2:	7c4b      	ldrb	r3, [r1, #17]
 801abb4:	0958      	lsrs	r0, r3, #5
 801abb6:	7ccb      	ldrb	r3, [r1, #19]
 801abb8:	491a      	ldr	r1, [pc, #104]	@ (801ac24 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801abba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801abbe:	6809      	ldr	r1, [r1, #0]
 801abc0:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801abc4:	b2d8      	uxtb	r0, r3
 801abc6:	b149      	cbz	r1, 801abdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801abc8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801abcc:	b132      	cbz	r2, 801abdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801abce:	2b0e      	cmp	r3, #14
 801abd0:	d021      	beq.n	801ac16 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801abd2:	280f      	cmp	r0, #15
 801abd4:	d01d      	beq.n	801ac12 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801abd6:	2810      	cmp	r0, #16
 801abd8:	bf08      	it	eq
 801abda:	2002      	moveq	r0, #2
 801abdc:	bd10      	pop	{r4, pc}
 801abde:	4912      	ldr	r1, [pc, #72]	@ (801ac28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801abe0:	8809      	ldrh	r1, [r1, #0]
 801abe2:	4419      	add	r1, r3
 801abe4:	428a      	cmp	r2, r1
 801abe6:	da09      	bge.n	801abfc <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801abe8:	1ad3      	subs	r3, r2, r3
 801abea:	4a10      	ldr	r2, [pc, #64]	@ (801ac2c <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801abec:	210e      	movs	r1, #14
 801abee:	6812      	ldr	r2, [r2, #0]
 801abf0:	fb01 2303 	mla	r3, r1, r3, r2
 801abf4:	7b18      	ldrb	r0, [r3, #12]
 801abf6:	f000 001f 	and.w	r0, r0, #31
 801abfa:	e7ef      	b.n	801abdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801abfc:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801ac00:	429a      	cmp	r2, r3
 801ac02:	d108      	bne.n	801ac16 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801ac04:	f7f2 fcf8 	bl	800d5f8 <_ZN8touchgfx3HAL3lcdEv>
 801ac08:	6803      	ldr	r3, [r0, #0]
 801ac0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ac10:	4718      	bx	r3
 801ac12:	2001      	movs	r0, #1
 801ac14:	e7e2      	b.n	801abdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ac16:	2000      	movs	r0, #0
 801ac18:	e7e0      	b.n	801abdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ac1a:	bf00      	nop
 801ac1c:	24006680 	.word	0x24006680
 801ac20:	24006688 	.word	0x24006688
 801ac24:	24006664 	.word	0x24006664
 801ac28:	24006684 	.word	0x24006684
 801ac2c:	24006668 	.word	0x24006668

0801ac30 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801ac30:	2010      	movs	r0, #16
 801ac32:	4770      	bx	lr

0801ac34 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801ac34:	2000      	movs	r0, #0
 801ac36:	4770      	bx	lr

0801ac38 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801ac38:	4b02      	ldr	r3, [pc, #8]	@ (801ac44 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801ac3a:	8818      	ldrh	r0, [r3, #0]
 801ac3c:	0040      	lsls	r0, r0, #1
 801ac3e:	b280      	uxth	r0, r0
 801ac40:	4770      	bx	lr
 801ac42:	bf00      	nop
 801ac44:	240065fa 	.word	0x240065fa

0801ac48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ac48:	2bff      	cmp	r3, #255	@ 0xff
 801ac4a:	d05e      	beq.n	801ad0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 801ac4c:	2a0b      	cmp	r2, #11
 801ac4e:	d058      	beq.n	801ad02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801ac50:	d80e      	bhi.n	801ac70 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ac52:	2a03      	cmp	r2, #3
 801ac54:	d04d      	beq.n	801acf2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801ac56:	d804      	bhi.n	801ac62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ac58:	2a01      	cmp	r2, #1
 801ac5a:	d04c      	beq.n	801acf6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 801ac5c:	d94d      	bls.n	801acfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801ac5e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801ac60:	e031      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ac62:	2a09      	cmp	r2, #9
 801ac64:	d04d      	beq.n	801ad02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801ac66:	d84a      	bhi.n	801acfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801ac68:	2a08      	cmp	r2, #8
 801ac6a:	d048      	beq.n	801acfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801ac6c:	2300      	movs	r3, #0
 801ac6e:	e02a      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ac70:	2a2f      	cmp	r2, #47	@ 0x2f
 801ac72:	d02c      	beq.n	801acce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801ac74:	d811      	bhi.n	801ac9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801ac76:	2a2d      	cmp	r2, #45	@ 0x2d
 801ac78:	d018      	beq.n	801acac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 801ac7a:	d831      	bhi.n	801ace0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 801ac7c:	2a2c      	cmp	r2, #44	@ 0x2c
 801ac7e:	d1f5      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ac80:	684a      	ldr	r2, [r1, #4]
 801ac82:	7813      	ldrb	r3, [r2, #0]
 801ac84:	7852      	ldrb	r2, [r2, #1]
 801ac86:	2a00      	cmp	r2, #0
 801ac88:	d1f0      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ac8a:	2b01      	cmp	r3, #1
 801ac8c:	d01d      	beq.n	801acca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d02d      	beq.n	801acee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ac92:	2b02      	cmp	r3, #2
 801ac94:	d1ea      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ac96:	68c3      	ldr	r3, [r0, #12]
 801ac98:	e015      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ac9a:	2a31      	cmp	r2, #49	@ 0x31
 801ac9c:	d004      	beq.n	801aca8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801ac9e:	d332      	bcc.n	801ad06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801aca0:	2a32      	cmp	r2, #50	@ 0x32
 801aca2:	d030      	beq.n	801ad06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801aca4:	2a33      	cmp	r2, #51	@ 0x33
 801aca6:	d1e1      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801aca8:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801acaa:	e00c      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801acac:	684a      	ldr	r2, [r1, #4]
 801acae:	7813      	ldrb	r3, [r2, #0]
 801acb0:	7852      	ldrb	r2, [r2, #1]
 801acb2:	2a00      	cmp	r2, #0
 801acb4:	d1da      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801acb6:	2b01      	cmp	r3, #1
 801acb8:	d004      	beq.n	801acc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801acba:	d30f      	bcc.n	801acdc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 801acbc:	2b02      	cmp	r3, #2
 801acbe:	d1d5      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801acc0:	6943      	ldr	r3, [r0, #20]
 801acc2:	e000      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801acc4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801acc6:	4618      	mov	r0, r3
 801acc8:	4770      	bx	lr
 801acca:	69c3      	ldr	r3, [r0, #28]
 801accc:	e7fb      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801acce:	684b      	ldr	r3, [r1, #4]
 801acd0:	781a      	ldrb	r2, [r3, #0]
 801acd2:	785b      	ldrb	r3, [r3, #1]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d1c9      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801acd8:	2a00      	cmp	r2, #0
 801acda:	d1f4      	bne.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801acdc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801acde:	e7f2      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ace0:	684b      	ldr	r3, [r1, #4]
 801ace2:	781a      	ldrb	r2, [r3, #0]
 801ace4:	785b      	ldrb	r3, [r3, #1]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d1c0      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801acea:	2a00      	cmp	r2, #0
 801acec:	d1eb      	bne.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801acee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801acf0:	e7e9      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801acf2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801acf4:	e7e7      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801acf6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801acf8:	e7e5      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801acfa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801acfc:	e7e3      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801acfe:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801ad00:	e7e1      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad02:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801ad04:	e7df      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad06:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801ad08:	e7dd      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad0a:	2a0b      	cmp	r2, #11
 801ad0c:	d059      	beq.n	801adc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801ad0e:	d80e      	bhi.n	801ad2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801ad10:	2a03      	cmp	r2, #3
 801ad12:	d050      	beq.n	801adb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801ad14:	d804      	bhi.n	801ad20 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801ad16:	2a01      	cmp	r2, #1
 801ad18:	d04f      	beq.n	801adba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801ad1a:	d950      	bls.n	801adbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801ad1c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801ad1e:	e7d2      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad20:	2a09      	cmp	r2, #9
 801ad22:	d04e      	beq.n	801adc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801ad24:	d801      	bhi.n	801ad2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801ad26:	2a08      	cmp	r2, #8
 801ad28:	d1a0      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ad2a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801ad2c:	e7cb      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad2e:	2a2f      	cmp	r2, #47	@ 0x2f
 801ad30:	d02d      	beq.n	801ad8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801ad32:	d811      	bhi.n	801ad58 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801ad34:	2a2d      	cmp	r2, #45	@ 0x2d
 801ad36:	d018      	beq.n	801ad6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801ad38:	d833      	bhi.n	801ada2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801ad3a:	2a2c      	cmp	r2, #44	@ 0x2c
 801ad3c:	d196      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ad3e:	684a      	ldr	r2, [r1, #4]
 801ad40:	7813      	ldrb	r3, [r2, #0]
 801ad42:	7852      	ldrb	r2, [r2, #1]
 801ad44:	2a00      	cmp	r2, #0
 801ad46:	d191      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ad48:	2b01      	cmp	r3, #1
 801ad4a:	d01e      	beq.n	801ad8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d030      	beq.n	801adb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801ad50:	2b02      	cmp	r3, #2
 801ad52:	d18b      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ad54:	6903      	ldr	r3, [r0, #16]
 801ad56:	e7b6      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad58:	2a31      	cmp	r2, #49	@ 0x31
 801ad5a:	d004      	beq.n	801ad66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 801ad5c:	d333      	bcc.n	801adc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801ad5e:	2a32      	cmp	r2, #50	@ 0x32
 801ad60:	d031      	beq.n	801adc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801ad62:	2a33      	cmp	r2, #51	@ 0x33
 801ad64:	d182      	bne.n	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ad66:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801ad68:	e7ad      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad6a:	684a      	ldr	r2, [r1, #4]
 801ad6c:	7813      	ldrb	r3, [r2, #0]
 801ad6e:	7852      	ldrb	r2, [r2, #1]
 801ad70:	2a00      	cmp	r2, #0
 801ad72:	f47f af7b 	bne.w	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ad76:	2b01      	cmp	r3, #1
 801ad78:	d005      	beq.n	801ad86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ad7a:	d310      	bcc.n	801ad9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 801ad7c:	2b02      	cmp	r3, #2
 801ad7e:	f47f af75 	bne.w	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ad82:	6983      	ldr	r3, [r0, #24]
 801ad84:	e79f      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad86:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801ad88:	e79d      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad8a:	6a03      	ldr	r3, [r0, #32]
 801ad8c:	e79b      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad8e:	684b      	ldr	r3, [r1, #4]
 801ad90:	781a      	ldrb	r2, [r3, #0]
 801ad92:	785b      	ldrb	r3, [r3, #1]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	f47f af69 	bne.w	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ad9a:	2a00      	cmp	r2, #0
 801ad9c:	d193      	bne.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad9e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801ada0:	e791      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ada2:	684b      	ldr	r3, [r1, #4]
 801ada4:	781a      	ldrb	r2, [r3, #0]
 801ada6:	785b      	ldrb	r3, [r3, #1]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	f47f af5f 	bne.w	801ac6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801adae:	2a00      	cmp	r2, #0
 801adb0:	d189      	bne.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801adb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801adb4:	e787      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801adb6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801adb8:	e785      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801adba:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801adbc:	e783      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801adbe:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801adc0:	e781      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801adc2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801adc4:	e77f      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801adc6:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801adc8:	e77d      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801adca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801adca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adce:	b087      	sub	sp, #28
 801add0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801add2:	9205      	str	r2, [sp, #20]
 801add4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801add8:	9101      	str	r1, [sp, #4]
 801adda:	9202      	str	r2, [sp, #8]
 801addc:	6841      	ldr	r1, [r0, #4]
 801adde:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801ade2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801ade6:	fb01 2404 	mla	r4, r1, r4, r2
 801adea:	6802      	ldr	r2, [r0, #0]
 801adec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801adf0:	f8de 2000 	ldr.w	r2, [lr]
 801adf4:	9203      	str	r2, [sp, #12]
 801adf6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801adfa:	3204      	adds	r2, #4
 801adfc:	9204      	str	r2, [sp, #16]
 801adfe:	9a02      	ldr	r2, [sp, #8]
 801ae00:	43d6      	mvns	r6, r2
 801ae02:	b2f6      	uxtb	r6, r6
 801ae04:	9a01      	ldr	r2, [sp, #4]
 801ae06:	2a00      	cmp	r2, #0
 801ae08:	dc03      	bgt.n	801ae12 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ae0a:	9a05      	ldr	r2, [sp, #20]
 801ae0c:	2a00      	cmp	r2, #0
 801ae0e:	f340 8129 	ble.w	801b064 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ae12:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ae14:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801ae18:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ae1c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ae1e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801ae22:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	dd0e      	ble.n	801ae48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ae2a:	1408      	asrs	r0, r1, #16
 801ae2c:	d405      	bmi.n	801ae3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ae2e:	4560      	cmp	r0, ip
 801ae30:	da03      	bge.n	801ae3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ae32:	1410      	asrs	r0, r2, #16
 801ae34:	d401      	bmi.n	801ae3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ae36:	42b8      	cmp	r0, r7
 801ae38:	db07      	blt.n	801ae4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ae3a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ae3c:	3b01      	subs	r3, #1
 801ae3e:	3402      	adds	r4, #2
 801ae40:	4401      	add	r1, r0
 801ae42:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801ae44:	4402      	add	r2, r0
 801ae46:	e7ee      	b.n	801ae26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ae48:	d071      	beq.n	801af2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ae4a:	1e58      	subs	r0, r3, #1
 801ae4c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ae4e:	fb05 1500 	mla	r5, r5, r0, r1
 801ae52:	142d      	asrs	r5, r5, #16
 801ae54:	d45f      	bmi.n	801af16 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ae56:	4565      	cmp	r5, ip
 801ae58:	da5d      	bge.n	801af16 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ae5a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ae5c:	fb05 2000 	mla	r0, r5, r0, r2
 801ae60:	1400      	asrs	r0, r0, #16
 801ae62:	d458      	bmi.n	801af16 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ae64:	42b8      	cmp	r0, r7
 801ae66:	da56      	bge.n	801af16 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ae68:	4699      	mov	r9, r3
 801ae6a:	46a2      	mov	sl, r4
 801ae6c:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801ae70:	f1b9 0f00 	cmp.w	r9, #0
 801ae74:	dd57      	ble.n	801af26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801ae76:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ae7a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ae7e:	9803      	ldr	r0, [sp, #12]
 801ae80:	140d      	asrs	r5, r1, #16
 801ae82:	f109 39ff 	add.w	r9, r9, #4294967295
 801ae86:	fb07 000c 	mla	r0, r7, ip, r0
 801ae8a:	5d40      	ldrb	r0, [r0, r5]
 801ae8c:	9d04      	ldr	r5, [sp, #16]
 801ae8e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ae92:	f8ba 5000 	ldrh.w	r5, [sl]
 801ae96:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ae9a:	122f      	asrs	r7, r5, #8
 801ae9c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801aea0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801aea4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801aea8:	00ed      	lsls	r5, r5, #3
 801aeaa:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801aeae:	fb17 f706 	smulbb	r7, r7, r6
 801aeb2:	b2ed      	uxtb	r5, r5
 801aeb4:	fb18 f806 	smulbb	r8, r8, r6
 801aeb8:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801aebc:	10c7      	asrs	r7, r0, #3
 801aebe:	fb15 f506 	smulbb	r5, r5, r6
 801aec2:	00c0      	lsls	r0, r0, #3
 801aec4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801aec8:	fa1f fc8c 	uxth.w	ip, ip
 801aecc:	b2c0      	uxtb	r0, r0
 801aece:	fb07 870b 	mla	r7, r7, fp, r8
 801aed2:	fb00 500b 	mla	r0, r0, fp, r5
 801aed6:	f10c 0501 	add.w	r5, ip, #1
 801aeda:	b2bf      	uxth	r7, r7
 801aedc:	b280      	uxth	r0, r0
 801aede:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801aee2:	f107 0801 	add.w	r8, r7, #1
 801aee6:	1c45      	adds	r5, r0, #1
 801aee8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801aeec:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801aef0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801aef4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801aef6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801aefa:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801aefe:	4401      	add	r1, r0
 801af00:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801af04:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801af06:	ea45 0c0c 	orr.w	ip, r5, ip
 801af0a:	4402      	add	r2, r0
 801af0c:	ea4c 0c08 	orr.w	ip, ip, r8
 801af10:	f82a cb02 	strh.w	ip, [sl], #2
 801af14:	e7ac      	b.n	801ae70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801af16:	f04f 0800 	mov.w	r8, #0
 801af1a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801af1e:	eb03 0008 	add.w	r0, r3, r8
 801af22:	2800      	cmp	r0, #0
 801af24:	dc41      	bgt.n	801afaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801af26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801af2a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801af2e:	9b01      	ldr	r3, [sp, #4]
 801af30:	2b00      	cmp	r3, #0
 801af32:	f340 8097 	ble.w	801b064 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801af36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801af3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801af3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801af40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801af44:	eef0 6a62 	vmov.f32	s13, s5
 801af48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801af4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801af50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801af54:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801af58:	eef0 6a43 	vmov.f32	s13, s6
 801af5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801af60:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801af64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801af68:	ee61 7a27 	vmul.f32	s15, s2, s15
 801af6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801af70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801af74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801af78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801af7c:	ee12 2a90 	vmov	r2, s5
 801af80:	eef0 2a47 	vmov.f32	s5, s14
 801af84:	fb92 f3f3 	sdiv	r3, r2, r3
 801af88:	ee13 2a10 	vmov	r2, s6
 801af8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801af8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801af90:	eeb0 3a67 	vmov.f32	s6, s15
 801af94:	fb92 f3f3 	sdiv	r3, r2, r3
 801af98:	9314      	str	r3, [sp, #80]	@ 0x50
 801af9a:	9b01      	ldr	r3, [sp, #4]
 801af9c:	9a05      	ldr	r2, [sp, #20]
 801af9e:	3b01      	subs	r3, #1
 801afa0:	9301      	str	r3, [sp, #4]
 801afa2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801afa4:	bf08      	it	eq
 801afa6:	4613      	moveq	r3, r2
 801afa8:	e72c      	b.n	801ae04 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801afaa:	140f      	asrs	r7, r1, #16
 801afac:	d453      	bmi.n	801b056 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801afae:	f8de 5008 	ldr.w	r5, [lr, #8]
 801afb2:	42bd      	cmp	r5, r7
 801afb4:	dd4f      	ble.n	801b056 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801afb6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801afba:	d44c      	bmi.n	801b056 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801afbc:	f8de 000c 	ldr.w	r0, [lr, #12]
 801afc0:	4560      	cmp	r0, ip
 801afc2:	dd48      	ble.n	801b056 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801afc4:	9803      	ldr	r0, [sp, #12]
 801afc6:	b22d      	sxth	r5, r5
 801afc8:	fb0c 0505 	mla	r5, ip, r5, r0
 801afcc:	5de8      	ldrb	r0, [r5, r7]
 801afce:	9d04      	ldr	r5, [sp, #16]
 801afd0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801afd4:	f06f 0501 	mvn.w	r5, #1
 801afd8:	fb05 fb08 	mul.w	fp, r5, r8
 801afdc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801afe0:	f834 500b 	ldrh.w	r5, [r4, fp]
 801afe4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801afe8:	122f      	asrs	r7, r5, #8
 801afea:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801afee:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801aff2:	00ed      	lsls	r5, r5, #3
 801aff4:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801aff8:	fb17 f706 	smulbb	r7, r7, r6
 801affc:	b2ed      	uxtb	r5, r5
 801affe:	fb19 f906 	smulbb	r9, r9, r6
 801b002:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801b006:	10c7      	asrs	r7, r0, #3
 801b008:	fb15 f506 	smulbb	r5, r5, r6
 801b00c:	00c0      	lsls	r0, r0, #3
 801b00e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801b012:	fa1f fc8c 	uxth.w	ip, ip
 801b016:	b2c0      	uxtb	r0, r0
 801b018:	fb07 970a 	mla	r7, r7, sl, r9
 801b01c:	fb00 500a 	mla	r0, r0, sl, r5
 801b020:	f10c 0501 	add.w	r5, ip, #1
 801b024:	b2bf      	uxth	r7, r7
 801b026:	b280      	uxth	r0, r0
 801b028:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801b02c:	f107 0901 	add.w	r9, r7, #1
 801b030:	1c45      	adds	r5, r0, #1
 801b032:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801b036:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801b03a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801b03e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801b042:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b046:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801b04a:	ea45 0c0c 	orr.w	ip, r5, ip
 801b04e:	ea4c 0c09 	orr.w	ip, ip, r9
 801b052:	f824 c00b 	strh.w	ip, [r4, fp]
 801b056:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b058:	f108 38ff 	add.w	r8, r8, #4294967295
 801b05c:	4401      	add	r1, r0
 801b05e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b060:	4402      	add	r2, r0
 801b062:	e75c      	b.n	801af1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b064:	b007      	add	sp, #28
 801b066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b06a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b06a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b06e:	b085      	sub	sp, #20
 801b070:	4693      	mov	fp, r2
 801b072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b076:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b078:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801b07a:	6870      	ldr	r0, [r6, #4]
 801b07c:	9100      	str	r1, [sp, #0]
 801b07e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b082:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801b086:	fb00 2404 	mla	r4, r0, r4, r2
 801b08a:	6832      	ldr	r2, [r6, #0]
 801b08c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b090:	682a      	ldr	r2, [r5, #0]
 801b092:	9201      	str	r2, [sp, #4]
 801b094:	686a      	ldr	r2, [r5, #4]
 801b096:	3204      	adds	r2, #4
 801b098:	9202      	str	r2, [sp, #8]
 801b09a:	9a00      	ldr	r2, [sp, #0]
 801b09c:	2a00      	cmp	r2, #0
 801b09e:	dc03      	bgt.n	801b0a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b0a0:	f1bb 0f00 	cmp.w	fp, #0
 801b0a4:	f340 80a0 	ble.w	801b1e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801b0a8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b0aa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b0ae:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b0b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b0b4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b0b8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	dd0c      	ble.n	801b0da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b0c0:	1406      	asrs	r6, r0, #16
 801b0c2:	d405      	bmi.n	801b0d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b0c4:	454e      	cmp	r6, r9
 801b0c6:	da03      	bge.n	801b0d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b0c8:	1416      	asrs	r6, r2, #16
 801b0ca:	d401      	bmi.n	801b0d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b0cc:	4546      	cmp	r6, r8
 801b0ce:	db05      	blt.n	801b0dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b0d0:	4470      	add	r0, lr
 801b0d2:	4462      	add	r2, ip
 801b0d4:	3b01      	subs	r3, #1
 801b0d6:	3402      	adds	r4, #2
 801b0d8:	e7f0      	b.n	801b0bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b0da:	d00f      	beq.n	801b0fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b0dc:	1e5e      	subs	r6, r3, #1
 801b0de:	fb0e 0706 	mla	r7, lr, r6, r0
 801b0e2:	143f      	asrs	r7, r7, #16
 801b0e4:	d541      	bpl.n	801b16a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801b0e6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801b0ea:	4698      	mov	r8, r3
 801b0ec:	9603      	str	r6, [sp, #12]
 801b0ee:	f1b8 0f00 	cmp.w	r8, #0
 801b0f2:	dc59      	bgt.n	801b1a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801b0f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b0f8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b0fc:	9b00      	ldr	r3, [sp, #0]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	dd72      	ble.n	801b1e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801b102:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b108:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b10c:	eeb0 6a62 	vmov.f32	s12, s5
 801b110:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b114:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b118:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b11c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b120:	eeb0 6a43 	vmov.f32	s12, s6
 801b124:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b128:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b12c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b130:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b134:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b138:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b13c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b140:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b144:	ee12 2a90 	vmov	r2, s5
 801b148:	eef0 2a47 	vmov.f32	s5, s14
 801b14c:	fb92 fef3 	sdiv	lr, r2, r3
 801b150:	ee13 2a10 	vmov	r2, s6
 801b154:	eeb0 3a67 	vmov.f32	s6, s15
 801b158:	fb92 fcf3 	sdiv	ip, r2, r3
 801b15c:	9b00      	ldr	r3, [sp, #0]
 801b15e:	3b01      	subs	r3, #1
 801b160:	9300      	str	r3, [sp, #0]
 801b162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b164:	bf08      	it	eq
 801b166:	465b      	moveq	r3, fp
 801b168:	e797      	b.n	801b09a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801b16a:	454f      	cmp	r7, r9
 801b16c:	dabb      	bge.n	801b0e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b16e:	fb0c 2606 	mla	r6, ip, r6, r2
 801b172:	1436      	asrs	r6, r6, #16
 801b174:	d4b7      	bmi.n	801b0e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b176:	4546      	cmp	r6, r8
 801b178:	dab5      	bge.n	801b0e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b17a:	461e      	mov	r6, r3
 801b17c:	46a0      	mov	r8, r4
 801b17e:	2e00      	cmp	r6, #0
 801b180:	ddb8      	ble.n	801b0f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b182:	1417      	asrs	r7, r2, #16
 801b184:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801b188:	9901      	ldr	r1, [sp, #4]
 801b18a:	ea4f 4920 	mov.w	r9, r0, asr #16
 801b18e:	4462      	add	r2, ip
 801b190:	4470      	add	r0, lr
 801b192:	fb0a 1707 	mla	r7, sl, r7, r1
 801b196:	9902      	ldr	r1, [sp, #8]
 801b198:	3e01      	subs	r6, #1
 801b19a:	f817 7009 	ldrb.w	r7, [r7, r9]
 801b19e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801b1a2:	f828 7b02 	strh.w	r7, [r8], #2
 801b1a6:	e7ea      	b.n	801b17e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801b1a8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b1ac:	d417      	bmi.n	801b1de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b1ae:	68ae      	ldr	r6, [r5, #8]
 801b1b0:	454e      	cmp	r6, r9
 801b1b2:	dd14      	ble.n	801b1de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b1b4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b1b8:	d411      	bmi.n	801b1de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b1ba:	68ef      	ldr	r7, [r5, #12]
 801b1bc:	4557      	cmp	r7, sl
 801b1be:	dd0e      	ble.n	801b1de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b1c0:	9f01      	ldr	r7, [sp, #4]
 801b1c2:	b236      	sxth	r6, r6
 801b1c4:	f06f 0101 	mvn.w	r1, #1
 801b1c8:	fb0a 7606 	mla	r6, sl, r6, r7
 801b1cc:	9f02      	ldr	r7, [sp, #8]
 801b1ce:	f816 6009 	ldrb.w	r6, [r6, r9]
 801b1d2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801b1d6:	fb01 f608 	mul.w	r6, r1, r8
 801b1da:	9903      	ldr	r1, [sp, #12]
 801b1dc:	538f      	strh	r7, [r1, r6]
 801b1de:	4470      	add	r0, lr
 801b1e0:	4462      	add	r2, ip
 801b1e2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b1e6:	e782      	b.n	801b0ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b1e8:	b005      	add	sp, #20
 801b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b1ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b1ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1f2:	b087      	sub	sp, #28
 801b1f4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b1f6:	9205      	str	r2, [sp, #20]
 801b1f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b1fc:	9102      	str	r1, [sp, #8]
 801b1fe:	9203      	str	r2, [sp, #12]
 801b200:	6861      	ldr	r1, [r4, #4]
 801b202:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801b206:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801b20a:	fb01 2000 	mla	r0, r1, r0, r2
 801b20e:	6822      	ldr	r2, [r4, #0]
 801b210:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b214:	9200      	str	r2, [sp, #0]
 801b216:	f8dc 2000 	ldr.w	r2, [ip]
 801b21a:	9204      	str	r2, [sp, #16]
 801b21c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b220:	3204      	adds	r2, #4
 801b222:	9201      	str	r2, [sp, #4]
 801b224:	9a03      	ldr	r2, [sp, #12]
 801b226:	43d5      	mvns	r5, r2
 801b228:	b2ed      	uxtb	r5, r5
 801b22a:	9a02      	ldr	r2, [sp, #8]
 801b22c:	2a00      	cmp	r2, #0
 801b22e:	dc03      	bgt.n	801b238 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b230:	9a05      	ldr	r2, [sp, #20]
 801b232:	2a00      	cmp	r2, #0
 801b234:	f340 812c 	ble.w	801b490 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b238:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b23a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b23e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b242:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b244:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b248:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	dd10      	ble.n	801b272 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b250:	140c      	asrs	r4, r1, #16
 801b252:	d405      	bmi.n	801b260 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b254:	4574      	cmp	r4, lr
 801b256:	da03      	bge.n	801b260 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b258:	1414      	asrs	r4, r2, #16
 801b25a:	d401      	bmi.n	801b260 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b25c:	42bc      	cmp	r4, r7
 801b25e:	db09      	blt.n	801b274 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b260:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b262:	3b01      	subs	r3, #1
 801b264:	9800      	ldr	r0, [sp, #0]
 801b266:	4421      	add	r1, r4
 801b268:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b26a:	3002      	adds	r0, #2
 801b26c:	4422      	add	r2, r4
 801b26e:	9000      	str	r0, [sp, #0]
 801b270:	e7ec      	b.n	801b24c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b272:	d071      	beq.n	801b358 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801b274:	1e5c      	subs	r4, r3, #1
 801b276:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b278:	fb06 1604 	mla	r6, r6, r4, r1
 801b27c:	1436      	asrs	r6, r6, #16
 801b27e:	d45d      	bmi.n	801b33c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b280:	4576      	cmp	r6, lr
 801b282:	da5b      	bge.n	801b33c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b284:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b286:	fb06 2404 	mla	r4, r6, r4, r2
 801b28a:	1424      	asrs	r4, r4, #16
 801b28c:	d456      	bmi.n	801b33c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b28e:	42bc      	cmp	r4, r7
 801b290:	da54      	bge.n	801b33c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b292:	4698      	mov	r8, r3
 801b294:	f8dd 9000 	ldr.w	r9, [sp]
 801b298:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801b29c:	f1b8 0f00 	cmp.w	r8, #0
 801b2a0:	dd54      	ble.n	801b34c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b2a2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801b2a6:	1414      	asrs	r4, r2, #16
 801b2a8:	9804      	ldr	r0, [sp, #16]
 801b2aa:	140e      	asrs	r6, r1, #16
 801b2ac:	f108 38ff 	add.w	r8, r8, #4294967295
 801b2b0:	fb07 0404 	mla	r4, r7, r4, r0
 801b2b4:	9801      	ldr	r0, [sp, #4]
 801b2b6:	f814 e006 	ldrb.w	lr, [r4, r6]
 801b2ba:	f8b9 4000 	ldrh.w	r4, [r9]
 801b2be:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b2c2:	1227      	asrs	r7, r4, #8
 801b2c4:	eb00 0b0e 	add.w	fp, r0, lr
 801b2c8:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801b2cc:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b2d0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b2d2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801b2d6:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b2da:	4401      	add	r1, r0
 801b2dc:	fb16 f60a 	smulbb	r6, r6, sl
 801b2e0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b2e2:	fb1b fb0a 	smulbb	fp, fp, sl
 801b2e6:	fb07 6705 	mla	r7, r7, r5, r6
 801b2ea:	10e6      	asrs	r6, r4, #3
 801b2ec:	00e4      	lsls	r4, r4, #3
 801b2ee:	4402      	add	r2, r0
 801b2f0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b2f4:	b2bf      	uxth	r7, r7
 801b2f6:	b2e4      	uxtb	r4, r4
 801b2f8:	fb06 b605 	mla	r6, r6, r5, fp
 801b2fc:	fb14 f405 	smulbb	r4, r4, r5
 801b300:	b2b6      	uxth	r6, r6
 801b302:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801b306:	1c7c      	adds	r4, r7, #1
 801b308:	f106 0b01 	add.w	fp, r6, #1
 801b30c:	fa1f fe8e 	uxth.w	lr, lr
 801b310:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801b314:	f10e 0401 	add.w	r4, lr, #1
 801b318:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b31c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801b320:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801b324:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b328:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801b32c:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801b330:	4327      	orrs	r7, r4
 801b332:	ea47 070b 	orr.w	r7, r7, fp
 801b336:	f829 7b02 	strh.w	r7, [r9], #2
 801b33a:	e7af      	b.n	801b29c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801b33c:	f04f 0e00 	mov.w	lr, #0
 801b340:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801b344:	eb03 040e 	add.w	r4, r3, lr
 801b348:	2c00      	cmp	r4, #0
 801b34a:	dc43      	bgt.n	801b3d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b34c:	9a00      	ldr	r2, [sp, #0]
 801b34e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b352:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b356:	9300      	str	r3, [sp, #0]
 801b358:	9b02      	ldr	r3, [sp, #8]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	f340 8098 	ble.w	801b490 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b360:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b364:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b366:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b36a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b36e:	eef0 6a62 	vmov.f32	s13, s5
 801b372:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b376:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b37a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b37e:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801b382:	eef0 6a43 	vmov.f32	s13, s6
 801b386:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b38a:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801b38e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b392:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b396:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b39a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b39e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b3a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b3a6:	ee12 2a90 	vmov	r2, s5
 801b3aa:	eef0 2a47 	vmov.f32	s5, s14
 801b3ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801b3b2:	ee13 2a10 	vmov	r2, s6
 801b3b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b3b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b3ba:	eeb0 3a67 	vmov.f32	s6, s15
 801b3be:	fb92 f3f3 	sdiv	r3, r2, r3
 801b3c2:	9314      	str	r3, [sp, #80]	@ 0x50
 801b3c4:	9b02      	ldr	r3, [sp, #8]
 801b3c6:	9a05      	ldr	r2, [sp, #20]
 801b3c8:	3b01      	subs	r3, #1
 801b3ca:	9302      	str	r3, [sp, #8]
 801b3cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b3ce:	bf08      	it	eq
 801b3d0:	4613      	moveq	r3, r2
 801b3d2:	e72a      	b.n	801b22a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b3d4:	140f      	asrs	r7, r1, #16
 801b3d6:	d454      	bmi.n	801b482 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b3d8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b3dc:	42be      	cmp	r6, r7
 801b3de:	dd50      	ble.n	801b482 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b3e0:	ea5f 4822 	movs.w	r8, r2, asr #16
 801b3e4:	d44d      	bmi.n	801b482 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b3e6:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801b3ea:	4544      	cmp	r4, r8
 801b3ec:	dd49      	ble.n	801b482 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801b3ee:	9c04      	ldr	r4, [sp, #16]
 801b3f0:	b236      	sxth	r6, r6
 801b3f2:	f06f 0001 	mvn.w	r0, #1
 801b3f6:	fb08 4606 	mla	r6, r8, r6, r4
 801b3fa:	9c01      	ldr	r4, [sp, #4]
 801b3fc:	fb00 fa0e 	mul.w	sl, r0, lr
 801b400:	9800      	ldr	r0, [sp, #0]
 801b402:	f816 8007 	ldrb.w	r8, [r6, r7]
 801b406:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b40a:	eb04 0b08 	add.w	fp, r4, r8
 801b40e:	f830 400a 	ldrh.w	r4, [r0, sl]
 801b412:	9801      	ldr	r0, [sp, #4]
 801b414:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801b418:	1227      	asrs	r7, r4, #8
 801b41a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b41e:	fb16 f609 	smulbb	r6, r6, r9
 801b422:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b426:	f810 8008 	ldrb.w	r8, [r0, r8]
 801b42a:	fb1b fb09 	smulbb	fp, fp, r9
 801b42e:	fb07 6705 	mla	r7, r7, r5, r6
 801b432:	10e6      	asrs	r6, r4, #3
 801b434:	00e4      	lsls	r4, r4, #3
 801b436:	9800      	ldr	r0, [sp, #0]
 801b438:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b43c:	b2bf      	uxth	r7, r7
 801b43e:	b2e4      	uxtb	r4, r4
 801b440:	fb06 b605 	mla	r6, r6, r5, fp
 801b444:	fb14 f405 	smulbb	r4, r4, r5
 801b448:	b2b6      	uxth	r6, r6
 801b44a:	fb08 4809 	mla	r8, r8, r9, r4
 801b44e:	1c7c      	adds	r4, r7, #1
 801b450:	f106 0b01 	add.w	fp, r6, #1
 801b454:	fa1f f888 	uxth.w	r8, r8
 801b458:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801b45c:	f108 0401 	add.w	r4, r8, #1
 801b460:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801b464:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801b468:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801b46c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801b470:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801b474:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801b478:	4327      	orrs	r7, r4
 801b47a:	ea47 070b 	orr.w	r7, r7, fp
 801b47e:	f820 700a 	strh.w	r7, [r0, sl]
 801b482:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b484:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b488:	4401      	add	r1, r0
 801b48a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b48c:	4402      	add	r2, r0
 801b48e:	e759      	b.n	801b344 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b490:	b007      	add	sp, #28
 801b492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b49c:	b085      	sub	sp, #20
 801b49e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b4a2:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b4a4:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801b4a6:	9203      	str	r2, [sp, #12]
 801b4a8:	6870      	ldr	r0, [r6, #4]
 801b4aa:	686f      	ldr	r7, [r5, #4]
 801b4ac:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801b4b0:	3704      	adds	r7, #4
 801b4b2:	9101      	str	r1, [sp, #4]
 801b4b4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b4b8:	fb00 2404 	mla	r4, r0, r4, r2
 801b4bc:	6832      	ldr	r2, [r6, #0]
 801b4be:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b4c2:	682a      	ldr	r2, [r5, #0]
 801b4c4:	9202      	str	r2, [sp, #8]
 801b4c6:	9a01      	ldr	r2, [sp, #4]
 801b4c8:	2a00      	cmp	r2, #0
 801b4ca:	dc03      	bgt.n	801b4d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b4cc:	9a03      	ldr	r2, [sp, #12]
 801b4ce:	2a00      	cmp	r2, #0
 801b4d0:	f340 80cc 	ble.w	801b66c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801b4d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b4d6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b4da:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b4de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b4e0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801b4e4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	dd0d      	ble.n	801b508 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b4ec:	1406      	asrs	r6, r0, #16
 801b4ee:	d405      	bmi.n	801b4fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b4f0:	454e      	cmp	r6, r9
 801b4f2:	da03      	bge.n	801b4fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b4f4:	1416      	asrs	r6, r2, #16
 801b4f6:	d401      	bmi.n	801b4fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b4f8:	4546      	cmp	r6, r8
 801b4fa:	db06      	blt.n	801b50a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b4fc:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b4fe:	4460      	add	r0, ip
 801b500:	3b01      	subs	r3, #1
 801b502:	3402      	adds	r4, #2
 801b504:	4432      	add	r2, r6
 801b506:	e7ef      	b.n	801b4e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b508:	d00f      	beq.n	801b52a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b50a:	1e5e      	subs	r6, r3, #1
 801b50c:	fb0c 0e06 	mla	lr, ip, r6, r0
 801b510:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801b514:	d543      	bpl.n	801b59e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801b516:	4698      	mov	r8, r3
 801b518:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801b51c:	f1b8 0f00 	cmp.w	r8, #0
 801b520:	dc71      	bgt.n	801b606 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801b522:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b526:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b52a:	9b01      	ldr	r3, [sp, #4]
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	f340 809d 	ble.w	801b66c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801b532:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b536:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b538:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b53c:	eeb0 6a62 	vmov.f32	s12, s5
 801b540:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b544:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b548:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b54c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b550:	eeb0 6a43 	vmov.f32	s12, s6
 801b554:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b558:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b55c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b560:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b564:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b568:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b56c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b570:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b574:	ee12 2a90 	vmov	r2, s5
 801b578:	eef0 2a47 	vmov.f32	s5, s14
 801b57c:	fb92 fcf3 	sdiv	ip, r2, r3
 801b580:	ee13 2a10 	vmov	r2, s6
 801b584:	eeb0 3a67 	vmov.f32	s6, s15
 801b588:	fb92 f3f3 	sdiv	r3, r2, r3
 801b58c:	9312      	str	r3, [sp, #72]	@ 0x48
 801b58e:	9b01      	ldr	r3, [sp, #4]
 801b590:	9a03      	ldr	r2, [sp, #12]
 801b592:	3b01      	subs	r3, #1
 801b594:	9301      	str	r3, [sp, #4]
 801b596:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b598:	bf08      	it	eq
 801b59a:	4613      	moveq	r3, r2
 801b59c:	e793      	b.n	801b4c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b59e:	45ce      	cmp	lr, r9
 801b5a0:	dab9      	bge.n	801b516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b5a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b5a4:	fb01 2606 	mla	r6, r1, r6, r2
 801b5a8:	1436      	asrs	r6, r6, #16
 801b5aa:	d4b4      	bmi.n	801b516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b5ac:	4546      	cmp	r6, r8
 801b5ae:	dab2      	bge.n	801b516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b5b0:	4698      	mov	r8, r3
 801b5b2:	46a2      	mov	sl, r4
 801b5b4:	f1b8 0f00 	cmp.w	r8, #0
 801b5b8:	ddb3      	ble.n	801b522 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b5ba:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801b5be:	1416      	asrs	r6, r2, #16
 801b5c0:	9902      	ldr	r1, [sp, #8]
 801b5c2:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801b5c6:	f108 38ff 	add.w	r8, r8, #4294967295
 801b5ca:	4460      	add	r0, ip
 801b5cc:	fb09 1606 	mla	r6, r9, r6, r1
 801b5d0:	4928      	ldr	r1, [pc, #160]	@ (801b674 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801b5d2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801b5d6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b5da:	eb07 0b0e 	add.w	fp, r7, lr
 801b5de:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801b5e2:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b5e6:	00f6      	lsls	r6, r6, #3
 801b5e8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801b5ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b5ee:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801b5f2:	440a      	add	r2, r1
 801b5f4:	ea49 0606 	orr.w	r6, r9, r6
 801b5f8:	f817 900e 	ldrb.w	r9, [r7, lr]
 801b5fc:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801b600:	f82a 6b02 	strh.w	r6, [sl], #2
 801b604:	e7d6      	b.n	801b5b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b606:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b60a:	d429      	bmi.n	801b660 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b60c:	68ae      	ldr	r6, [r5, #8]
 801b60e:	454e      	cmp	r6, r9
 801b610:	dd26      	ble.n	801b660 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b612:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801b616:	d423      	bmi.n	801b660 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b618:	68e9      	ldr	r1, [r5, #12]
 801b61a:	4559      	cmp	r1, fp
 801b61c:	dd20      	ble.n	801b660 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b61e:	fa0f fe86 	sxth.w	lr, r6
 801b622:	9902      	ldr	r1, [sp, #8]
 801b624:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801b628:	f06f 0101 	mvn.w	r1, #1
 801b62c:	f81e e009 	ldrb.w	lr, [lr, r9]
 801b630:	fb01 f908 	mul.w	r9, r1, r8
 801b634:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801b638:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b63c:	eb07 060e 	add.w	r6, r7, lr
 801b640:	f896 b002 	ldrb.w	fp, [r6, #2]
 801b644:	7876      	ldrb	r6, [r6, #1]
 801b646:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801b64a:	00f6      	lsls	r6, r6, #3
 801b64c:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801b650:	ea4b 0606 	orr.w	r6, fp, r6
 801b654:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801b658:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801b65c:	f82a 6009 	strh.w	r6, [sl, r9]
 801b660:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b662:	4460      	add	r0, ip
 801b664:	f108 38ff 	add.w	r8, r8, #4294967295
 801b668:	440a      	add	r2, r1
 801b66a:	e757      	b.n	801b51c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b66c:	b005      	add	sp, #20
 801b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b672:	bf00      	nop
 801b674:	fffff800 	.word	0xfffff800

0801b678 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b67c:	b087      	sub	sp, #28
 801b67e:	468b      	mov	fp, r1
 801b680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b684:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801b686:	9204      	str	r2, [sp, #16]
 801b688:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b68c:	6841      	ldr	r1, [r0, #4]
 801b68e:	9205      	str	r2, [sp, #20]
 801b690:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801b694:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801b698:	fb01 2404 	mla	r4, r1, r4, r2
 801b69c:	6802      	ldr	r2, [r0, #0]
 801b69e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b6a2:	f8dc 2000 	ldr.w	r2, [ip]
 801b6a6:	9201      	str	r2, [sp, #4]
 801b6a8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b6ac:	3204      	adds	r2, #4
 801b6ae:	9202      	str	r2, [sp, #8]
 801b6b0:	f1bb 0f00 	cmp.w	fp, #0
 801b6b4:	dc03      	bgt.n	801b6be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801b6b6:	9a04      	ldr	r2, [sp, #16]
 801b6b8:	2a00      	cmp	r2, #0
 801b6ba:	f340 8138 	ble.w	801b92e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b6be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b6c0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801b6c4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b6c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b6ca:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801b6ce:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	dd0e      	ble.n	801b6f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b6d6:	1402      	asrs	r2, r0, #16
 801b6d8:	d405      	bmi.n	801b6e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b6da:	42ba      	cmp	r2, r7
 801b6dc:	da03      	bge.n	801b6e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b6de:	140a      	asrs	r2, r1, #16
 801b6e0:	d401      	bmi.n	801b6e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b6e2:	42b2      	cmp	r2, r6
 801b6e4:	db07      	blt.n	801b6f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b6e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b6e8:	3b01      	subs	r3, #1
 801b6ea:	3402      	adds	r4, #2
 801b6ec:	4410      	add	r0, r2
 801b6ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b6f0:	4411      	add	r1, r2
 801b6f2:	e7ee      	b.n	801b6d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b6f4:	d019      	beq.n	801b72a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801b6f6:	1e5a      	subs	r2, r3, #1
 801b6f8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b6fa:	fb05 0502 	mla	r5, r5, r2, r0
 801b6fe:	142d      	asrs	r5, r5, #16
 801b700:	d409      	bmi.n	801b716 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b702:	42bd      	cmp	r5, r7
 801b704:	da07      	bge.n	801b716 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b706:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801b708:	fb05 1202 	mla	r2, r5, r2, r1
 801b70c:	1412      	asrs	r2, r2, #16
 801b70e:	d402      	bmi.n	801b716 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b710:	42b2      	cmp	r2, r6
 801b712:	f2c0 80ac 	blt.w	801b86e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801b716:	f04f 0e00 	mov.w	lr, #0
 801b71a:	eb03 020e 	add.w	r2, r3, lr
 801b71e:	2a00      	cmp	r2, #0
 801b720:	dc3e      	bgt.n	801b7a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b722:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b726:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b72a:	f1bb 0f00 	cmp.w	fp, #0
 801b72e:	f340 80fe 	ble.w	801b92e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b732:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b736:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b738:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b73c:	f1bb 0b01 	subs.w	fp, fp, #1
 801b740:	eeb0 6a62 	vmov.f32	s12, s5
 801b744:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b748:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b74c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b750:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801b754:	eeb0 6a43 	vmov.f32	s12, s6
 801b758:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b75c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801b760:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b764:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b768:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b76c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b770:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b774:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b778:	ee12 2a90 	vmov	r2, s5
 801b77c:	eef0 2a47 	vmov.f32	s5, s14
 801b780:	fb92 f3f3 	sdiv	r3, r2, r3
 801b784:	ee13 2a10 	vmov	r2, s6
 801b788:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b78a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b78c:	eeb0 3a67 	vmov.f32	s6, s15
 801b790:	fb92 f3f3 	sdiv	r3, r2, r3
 801b794:	9a04      	ldr	r2, [sp, #16]
 801b796:	9314      	str	r3, [sp, #80]	@ 0x50
 801b798:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b79a:	bf08      	it	eq
 801b79c:	4613      	moveq	r3, r2
 801b79e:	e787      	b.n	801b6b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b7a0:	1406      	asrs	r6, r0, #16
 801b7a2:	d45d      	bmi.n	801b860 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b7a4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801b7a8:	42b5      	cmp	r5, r6
 801b7aa:	dd59      	ble.n	801b860 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b7ac:	140f      	asrs	r7, r1, #16
 801b7ae:	d457      	bmi.n	801b860 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b7b0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b7b4:	42ba      	cmp	r2, r7
 801b7b6:	dd53      	ble.n	801b860 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b7b8:	9a01      	ldr	r2, [sp, #4]
 801b7ba:	b22d      	sxth	r5, r5
 801b7bc:	fb07 2505 	mla	r5, r7, r5, r2
 801b7c0:	5daa      	ldrb	r2, [r5, r6]
 801b7c2:	9d02      	ldr	r5, [sp, #8]
 801b7c4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b7c8:	0e2e      	lsrs	r6, r5, #24
 801b7ca:	d049      	beq.n	801b860 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b7cc:	f06f 0201 	mvn.w	r2, #1
 801b7d0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b7d4:	fb02 f20e 	mul.w	r2, r2, lr
 801b7d8:	f834 8002 	ldrh.w	r8, [r4, r2]
 801b7dc:	9203      	str	r2, [sp, #12]
 801b7de:	9a05      	ldr	r2, [sp, #20]
 801b7e0:	ea4f 2728 	mov.w	r7, r8, asr #8
 801b7e4:	4356      	muls	r6, r2
 801b7e6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b7ea:	1c72      	adds	r2, r6, #1
 801b7ec:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b7f0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b7f4:	b2ed      	uxtb	r5, r5
 801b7f6:	1212      	asrs	r2, r2, #8
 801b7f8:	fa1f f982 	uxth.w	r9, r2
 801b7fc:	43d2      	mvns	r2, r2
 801b7fe:	fb16 f609 	smulbb	r6, r6, r9
 801b802:	b2d2      	uxtb	r2, r2
 801b804:	fb15 f509 	smulbb	r5, r5, r9
 801b808:	fb07 6702 	mla	r7, r7, r2, r6
 801b80c:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801b810:	fb1a fa09 	smulbb	sl, sl, r9
 801b814:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b818:	b2bf      	uxth	r7, r7
 801b81a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b81e:	fa5f f888 	uxtb.w	r8, r8
 801b822:	fb06 a602 	mla	r6, r6, r2, sl
 801b826:	fb08 5502 	mla	r5, r8, r2, r5
 801b82a:	1c7a      	adds	r2, r7, #1
 801b82c:	b2b6      	uxth	r6, r6
 801b82e:	b2ad      	uxth	r5, r5
 801b830:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b834:	9a03      	ldr	r2, [sp, #12]
 801b836:	f105 0a01 	add.w	sl, r5, #1
 801b83a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801b83e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b842:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b846:	ea4a 0707 	orr.w	r7, sl, r7
 801b84a:	f106 0a01 	add.w	sl, r6, #1
 801b84e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b852:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b856:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b85a:	ea47 070a 	orr.w	r7, r7, sl
 801b85e:	52a7      	strh	r7, [r4, r2]
 801b860:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b862:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b866:	4410      	add	r0, r2
 801b868:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b86a:	4411      	add	r1, r2
 801b86c:	e755      	b.n	801b71a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b86e:	f04f 0800 	mov.w	r8, #0
 801b872:	eba3 0208 	sub.w	r2, r3, r8
 801b876:	2a00      	cmp	r2, #0
 801b878:	f77f af53 	ble.w	801b722 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801b87c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801b880:	140a      	asrs	r2, r1, #16
 801b882:	9f01      	ldr	r7, [sp, #4]
 801b884:	1405      	asrs	r5, r0, #16
 801b886:	fb06 7202 	mla	r2, r6, r2, r7
 801b88a:	5d52      	ldrb	r2, [r2, r5]
 801b88c:	9d02      	ldr	r5, [sp, #8]
 801b88e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801b892:	0e2e      	lsrs	r6, r5, #24
 801b894:	d044      	beq.n	801b920 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b896:	9a05      	ldr	r2, [sp, #20]
 801b898:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b89c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801b8a0:	4356      	muls	r6, r2
 801b8a2:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b8a6:	1c72      	adds	r2, r6, #1
 801b8a8:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801b8ac:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801b8b0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801b8b4:	b2ed      	uxtb	r5, r5
 801b8b6:	1212      	asrs	r2, r2, #8
 801b8b8:	fa1f f982 	uxth.w	r9, r2
 801b8bc:	43d2      	mvns	r2, r2
 801b8be:	fb16 f609 	smulbb	r6, r6, r9
 801b8c2:	b2d2      	uxtb	r2, r2
 801b8c4:	fb15 f509 	smulbb	r5, r5, r9
 801b8c8:	fb07 6702 	mla	r7, r7, r2, r6
 801b8cc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b8d0:	fb1a fa09 	smulbb	sl, sl, r9
 801b8d4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b8d8:	b2bf      	uxth	r7, r7
 801b8da:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801b8de:	fa5f fe8e 	uxtb.w	lr, lr
 801b8e2:	fb06 a602 	mla	r6, r6, r2, sl
 801b8e6:	fb0e 5502 	mla	r5, lr, r2, r5
 801b8ea:	1c7a      	adds	r2, r7, #1
 801b8ec:	b2b6      	uxth	r6, r6
 801b8ee:	b2ad      	uxth	r5, r5
 801b8f0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b8f4:	f105 0a01 	add.w	sl, r5, #1
 801b8f8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801b8fc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b900:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b904:	ea4a 0707 	orr.w	r7, sl, r7
 801b908:	f106 0a01 	add.w	sl, r6, #1
 801b90c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b910:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b914:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801b918:	ea47 070a 	orr.w	r7, r7, sl
 801b91c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801b920:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b922:	f108 0801 	add.w	r8, r8, #1
 801b926:	4410      	add	r0, r2
 801b928:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b92a:	4411      	add	r1, r2
 801b92c:	e7a1      	b.n	801b872 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b92e:	b007      	add	sp, #28
 801b930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b934 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b938:	b085      	sub	sp, #20
 801b93a:	468b      	mov	fp, r1
 801b93c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b940:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801b942:	9203      	str	r2, [sp, #12]
 801b944:	6841      	ldr	r1, [r0, #4]
 801b946:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801b94a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b94e:	fb01 2404 	mla	r4, r1, r4, r2
 801b952:	6802      	ldr	r2, [r0, #0]
 801b954:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b958:	f8de 2000 	ldr.w	r2, [lr]
 801b95c:	9200      	str	r2, [sp, #0]
 801b95e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b962:	3204      	adds	r2, #4
 801b964:	9201      	str	r2, [sp, #4]
 801b966:	f1bb 0f00 	cmp.w	fp, #0
 801b96a:	dc03      	bgt.n	801b974 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b96c:	9a03      	ldr	r2, [sp, #12]
 801b96e:	2a00      	cmp	r2, #0
 801b970:	f340 8153 	ble.w	801bc1a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801b974:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b976:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801b97a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801b97e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b980:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801b984:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b988:	2b00      	cmp	r3, #0
 801b98a:	dd0e      	ble.n	801b9aa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b98c:	1408      	asrs	r0, r1, #16
 801b98e:	d405      	bmi.n	801b99c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b990:	42b8      	cmp	r0, r7
 801b992:	da03      	bge.n	801b99c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b994:	1410      	asrs	r0, r2, #16
 801b996:	d401      	bmi.n	801b99c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b998:	42b0      	cmp	r0, r6
 801b99a:	db07      	blt.n	801b9ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b99c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b99e:	3b01      	subs	r3, #1
 801b9a0:	3402      	adds	r4, #2
 801b9a2:	4401      	add	r1, r0
 801b9a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b9a6:	4402      	add	r2, r0
 801b9a8:	e7ee      	b.n	801b988 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b9aa:	d017      	beq.n	801b9dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b9ac:	1e58      	subs	r0, r3, #1
 801b9ae:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801b9b0:	fb05 1500 	mla	r5, r5, r0, r1
 801b9b4:	142d      	asrs	r5, r5, #16
 801b9b6:	d409      	bmi.n	801b9cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b9b8:	42bd      	cmp	r5, r7
 801b9ba:	da07      	bge.n	801b9cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b9bc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801b9be:	fb05 2000 	mla	r0, r5, r0, r2
 801b9c2:	1400      	asrs	r0, r0, #16
 801b9c4:	d402      	bmi.n	801b9cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b9c6:	42b0      	cmp	r0, r6
 801b9c8:	f2c0 80bc 	blt.w	801bb44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801b9cc:	2600      	movs	r6, #0
 801b9ce:	1998      	adds	r0, r3, r6
 801b9d0:	2800      	cmp	r0, #0
 801b9d2:	dc3e      	bgt.n	801ba52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b9d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b9dc:	f1bb 0f00 	cmp.w	fp, #0
 801b9e0:	f340 811b 	ble.w	801bc1a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801b9e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b9ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9ee:	f1bb 0b01 	subs.w	fp, fp, #1
 801b9f2:	eeb0 6a62 	vmov.f32	s12, s5
 801b9f6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b9fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b9fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba02:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ba06:	eeb0 6a43 	vmov.f32	s12, s6
 801ba0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba0e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ba12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba16:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba2a:	ee12 2a90 	vmov	r2, s5
 801ba2e:	eef0 2a47 	vmov.f32	s5, s14
 801ba32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba36:	ee13 2a10 	vmov	r2, s6
 801ba3a:	9311      	str	r3, [sp, #68]	@ 0x44
 801ba3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba3e:	eeb0 3a67 	vmov.f32	s6, s15
 801ba42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba46:	9a03      	ldr	r2, [sp, #12]
 801ba48:	9312      	str	r3, [sp, #72]	@ 0x48
 801ba4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba4c:	bf08      	it	eq
 801ba4e:	4613      	moveq	r3, r2
 801ba50:	e789      	b.n	801b966 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ba52:	140f      	asrs	r7, r1, #16
 801ba54:	d426      	bmi.n	801baa4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ba56:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ba5a:	42bd      	cmp	r5, r7
 801ba5c:	dd22      	ble.n	801baa4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ba5e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ba62:	d41f      	bmi.n	801baa4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ba64:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ba68:	4560      	cmp	r0, ip
 801ba6a:	dd1b      	ble.n	801baa4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ba6c:	9800      	ldr	r0, [sp, #0]
 801ba6e:	b22d      	sxth	r5, r5
 801ba70:	fb0c 0505 	mla	r5, ip, r5, r0
 801ba74:	5de8      	ldrb	r0, [r5, r7]
 801ba76:	9d01      	ldr	r5, [sp, #4]
 801ba78:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ba7c:	0e07      	lsrs	r7, r0, #24
 801ba7e:	2fff      	cmp	r7, #255	@ 0xff
 801ba80:	d116      	bne.n	801bab0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ba82:	f06f 0501 	mvn.w	r5, #1
 801ba86:	fb05 f706 	mul.w	r7, r5, r6
 801ba8a:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801ba8e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ba92:	0945      	lsrs	r5, r0, #5
 801ba94:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ba98:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ba9c:	ea4c 0505 	orr.w	r5, ip, r5
 801baa0:	4305      	orrs	r5, r0
 801baa2:	53e5      	strh	r5, [r4, r7]
 801baa4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801baa6:	3e01      	subs	r6, #1
 801baa8:	4401      	add	r1, r0
 801baaa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801baac:	4402      	add	r2, r0
 801baae:	e78e      	b.n	801b9ce <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bab0:	b2fd      	uxtb	r5, r7
 801bab2:	2f00      	cmp	r7, #0
 801bab4:	d0f6      	beq.n	801baa4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bab6:	f06f 0701 	mvn.w	r7, #1
 801baba:	fa1f f985 	uxth.w	r9, r5
 801babe:	43ed      	mvns	r5, r5
 801bac0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801bac4:	4377      	muls	r7, r6
 801bac6:	fb1a fa09 	smulbb	sl, sl, r9
 801baca:	b2ed      	uxtb	r5, r5
 801bacc:	f834 8007 	ldrh.w	r8, [r4, r7]
 801bad0:	9702      	str	r7, [sp, #8]
 801bad2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801bad6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801bada:	fb17 f709 	smulbb	r7, r7, r9
 801bade:	b2c0      	uxtb	r0, r0
 801bae0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801bae4:	fb10 f009 	smulbb	r0, r0, r9
 801bae8:	fb0c 7c05 	mla	ip, ip, r5, r7
 801baec:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801baf0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801baf4:	fa1f fc8c 	uxth.w	ip, ip
 801baf8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801bafc:	fa5f f888 	uxtb.w	r8, r8
 801bb00:	fb07 a705 	mla	r7, r7, r5, sl
 801bb04:	fb08 0005 	mla	r0, r8, r5, r0
 801bb08:	f10c 0501 	add.w	r5, ip, #1
 801bb0c:	b2bf      	uxth	r7, r7
 801bb0e:	b280      	uxth	r0, r0
 801bb10:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801bb14:	f100 0a01 	add.w	sl, r0, #1
 801bb18:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801bb1c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801bb20:	9802      	ldr	r0, [sp, #8]
 801bb22:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bb26:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bb2a:	f107 0a01 	add.w	sl, r7, #1
 801bb2e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801bb32:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bb36:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801bb3a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bb3e:	f824 c000 	strh.w	ip, [r4, r0]
 801bb42:	e7af      	b.n	801baa4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801bb44:	f04f 0800 	mov.w	r8, #0
 801bb48:	eba3 0008 	sub.w	r0, r3, r8
 801bb4c:	2800      	cmp	r0, #0
 801bb4e:	f77f af41 	ble.w	801b9d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bb52:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801bb56:	1410      	asrs	r0, r2, #16
 801bb58:	9f00      	ldr	r7, [sp, #0]
 801bb5a:	140d      	asrs	r5, r1, #16
 801bb5c:	fb06 7000 	mla	r0, r6, r0, r7
 801bb60:	5d40      	ldrb	r0, [r0, r5]
 801bb62:	9d01      	ldr	r5, [sp, #4]
 801bb64:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801bb68:	0e2e      	lsrs	r6, r5, #24
 801bb6a:	2eff      	cmp	r6, #255	@ 0xff
 801bb6c:	d112      	bne.n	801bb94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801bb6e:	482c      	ldr	r0, [pc, #176]	@ (801bc20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801bb70:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801bb74:	0968      	lsrs	r0, r5, #5
 801bb76:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801bb7a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801bb7e:	4330      	orrs	r0, r6
 801bb80:	4328      	orrs	r0, r5
 801bb82:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801bb86:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801bb88:	f108 0801 	add.w	r8, r8, #1
 801bb8c:	4401      	add	r1, r0
 801bb8e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801bb90:	4402      	add	r2, r0
 801bb92:	e7d9      	b.n	801bb48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801bb94:	b2f0      	uxtb	r0, r6
 801bb96:	2e00      	cmp	r6, #0
 801bb98:	d0f5      	beq.n	801bb86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801bb9a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801bb9e:	fa1f f980 	uxth.w	r9, r0
 801bba2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801bba6:	43c0      	mvns	r0, r0
 801bba8:	ea4f 272c 	mov.w	r7, ip, asr #8
 801bbac:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bbb0:	fb16 f609 	smulbb	r6, r6, r9
 801bbb4:	b2c0      	uxtb	r0, r0
 801bbb6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801bbba:	b2ed      	uxtb	r5, r5
 801bbbc:	fb1a fa09 	smulbb	sl, sl, r9
 801bbc0:	fb07 6700 	mla	r7, r7, r0, r6
 801bbc4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801bbc8:	fb15 f509 	smulbb	r5, r5, r9
 801bbcc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801bbd0:	b2bf      	uxth	r7, r7
 801bbd2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801bbd6:	fa5f fc8c 	uxtb.w	ip, ip
 801bbda:	fb06 a600 	mla	r6, r6, r0, sl
 801bbde:	fb0c 5500 	mla	r5, ip, r0, r5
 801bbe2:	1c78      	adds	r0, r7, #1
 801bbe4:	b2b6      	uxth	r6, r6
 801bbe6:	b2ad      	uxth	r5, r5
 801bbe8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801bbec:	f105 0a01 	add.w	sl, r5, #1
 801bbf0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801bbf4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bbf8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bbfc:	ea4a 0707 	orr.w	r7, sl, r7
 801bc00:	f106 0a01 	add.w	sl, r6, #1
 801bc04:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bc08:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bc0c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801bc10:	ea47 070a 	orr.w	r7, r7, sl
 801bc14:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801bc18:	e7b5      	b.n	801bb86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801bc1a:	b005      	add	sp, #20
 801bc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc20:	fffff800 	.word	0xfffff800

0801bc24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc28:	b087      	sub	sp, #28
 801bc2a:	468b      	mov	fp, r1
 801bc2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bc30:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bc32:	9204      	str	r2, [sp, #16]
 801bc34:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801bc38:	6861      	ldr	r1, [r4, #4]
 801bc3a:	9205      	str	r2, [sp, #20]
 801bc3c:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801bc40:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801bc44:	fb01 2000 	mla	r0, r1, r0, r2
 801bc48:	6822      	ldr	r2, [r4, #0]
 801bc4a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801bc4e:	f8de 2000 	ldr.w	r2, [lr]
 801bc52:	9201      	str	r2, [sp, #4]
 801bc54:	f8de 2004 	ldr.w	r2, [lr, #4]
 801bc58:	9202      	str	r2, [sp, #8]
 801bc5a:	f1bb 0f00 	cmp.w	fp, #0
 801bc5e:	dc03      	bgt.n	801bc68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801bc60:	9a04      	ldr	r2, [sp, #16]
 801bc62:	2a00      	cmp	r2, #0
 801bc64:	f340 8142 	ble.w	801beec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801bc68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bc6a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801bc6e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801bc72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bc74:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801bc78:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	dd0e      	ble.n	801bc9e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801bc80:	140c      	asrs	r4, r1, #16
 801bc82:	d405      	bmi.n	801bc90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bc84:	42bc      	cmp	r4, r7
 801bc86:	da03      	bge.n	801bc90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bc88:	1414      	asrs	r4, r2, #16
 801bc8a:	d401      	bmi.n	801bc90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bc8c:	42b4      	cmp	r4, r6
 801bc8e:	db07      	blt.n	801bca0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bc90:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bc92:	3b01      	subs	r3, #1
 801bc94:	3002      	adds	r0, #2
 801bc96:	4421      	add	r1, r4
 801bc98:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bc9a:	4422      	add	r2, r4
 801bc9c:	e7ee      	b.n	801bc7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801bc9e:	d019      	beq.n	801bcd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801bca0:	1e5c      	subs	r4, r3, #1
 801bca2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801bca4:	fb05 1504 	mla	r5, r5, r4, r1
 801bca8:	142d      	asrs	r5, r5, #16
 801bcaa:	d409      	bmi.n	801bcc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801bcac:	42bd      	cmp	r5, r7
 801bcae:	da07      	bge.n	801bcc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801bcb0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801bcb2:	fb05 2404 	mla	r4, r5, r4, r2
 801bcb6:	1424      	asrs	r4, r4, #16
 801bcb8:	d402      	bmi.n	801bcc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801bcba:	42b4      	cmp	r4, r6
 801bcbc:	f2c0 80b1 	blt.w	801be22 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801bcc0:	f04f 0800 	mov.w	r8, #0
 801bcc4:	eb03 0408 	add.w	r4, r3, r8
 801bcc8:	2c00      	cmp	r4, #0
 801bcca:	dc3e      	bgt.n	801bd4a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801bccc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bcd0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bcd4:	f1bb 0f00 	cmp.w	fp, #0
 801bcd8:	f340 8108 	ble.w	801beec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801bcdc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bce0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bce2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bce6:	f1bb 0b01 	subs.w	fp, fp, #1
 801bcea:	eeb0 6a62 	vmov.f32	s12, s5
 801bcee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bcf2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bcf6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcfa:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801bcfe:	eeb0 6a43 	vmov.f32	s12, s6
 801bd02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd06:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801bd0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd12:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd22:	ee12 2a90 	vmov	r2, s5
 801bd26:	eef0 2a47 	vmov.f32	s5, s14
 801bd2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd2e:	ee13 2a10 	vmov	r2, s6
 801bd32:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bd34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bd36:	eeb0 3a67 	vmov.f32	s6, s15
 801bd3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd3e:	9a04      	ldr	r2, [sp, #16]
 801bd40:	9314      	str	r3, [sp, #80]	@ 0x50
 801bd42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bd44:	bf08      	it	eq
 801bd46:	4613      	moveq	r3, r2
 801bd48:	e787      	b.n	801bc5a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801bd4a:	140e      	asrs	r6, r1, #16
 801bd4c:	d462      	bmi.n	801be14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801bd4e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801bd52:	42b5      	cmp	r5, r6
 801bd54:	dd5e      	ble.n	801be14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801bd56:	1417      	asrs	r7, r2, #16
 801bd58:	d45c      	bmi.n	801be14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801bd5a:	f8de 400c 	ldr.w	r4, [lr, #12]
 801bd5e:	42bc      	cmp	r4, r7
 801bd60:	dd58      	ble.n	801be14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801bd62:	b22d      	sxth	r5, r5
 801bd64:	9c02      	ldr	r4, [sp, #8]
 801bd66:	fb07 6505 	mla	r5, r7, r5, r6
 801bd6a:	5d66      	ldrb	r6, [r4, r5]
 801bd6c:	2e00      	cmp	r6, #0
 801bd6e:	d051      	beq.n	801be14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801bd70:	9c01      	ldr	r4, [sp, #4]
 801bd72:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801bd76:	f06f 0401 	mvn.w	r4, #1
 801bd7a:	fb04 f408 	mul.w	r4, r4, r8
 801bd7e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801bd82:	5b05      	ldrh	r5, [r0, r4]
 801bd84:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801bd88:	9403      	str	r4, [sp, #12]
 801bd8a:	9c05      	ldr	r4, [sp, #20]
 801bd8c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801bd90:	4366      	muls	r6, r4
 801bd92:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801bd96:	1c74      	adds	r4, r6, #1
 801bd98:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801bd9c:	122e      	asrs	r6, r5, #8
 801bd9e:	1224      	asrs	r4, r4, #8
 801bda0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801bda4:	00ed      	lsls	r5, r5, #3
 801bda6:	b2a7      	uxth	r7, r4
 801bda8:	43e4      	mvns	r4, r4
 801bdaa:	b2ed      	uxtb	r5, r5
 801bdac:	b2e4      	uxtb	r4, r4
 801bdae:	fb16 f604 	smulbb	r6, r6, r4
 801bdb2:	fb15 f504 	smulbb	r5, r5, r4
 801bdb6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801bdba:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801bdbe:	fb1a fa04 	smulbb	sl, sl, r4
 801bdc2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801bdc6:	fa1f fc8c 	uxth.w	ip, ip
 801bdca:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801bdce:	fa5f f989 	uxtb.w	r9, r9
 801bdd2:	fb06 a607 	mla	r6, r6, r7, sl
 801bdd6:	f10c 0401 	add.w	r4, ip, #1
 801bdda:	fb09 5507 	mla	r5, r9, r7, r5
 801bdde:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801bde2:	9c03      	ldr	r4, [sp, #12]
 801bde4:	b2ad      	uxth	r5, r5
 801bde6:	b2b6      	uxth	r6, r6
 801bde8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801bdec:	f105 0a01 	add.w	sl, r5, #1
 801bdf0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bdf4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bdf8:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bdfc:	f106 0a01 	add.w	sl, r6, #1
 801be00:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801be04:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801be08:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801be0c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801be10:	f820 c004 	strh.w	ip, [r0, r4]
 801be14:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801be16:	f108 38ff 	add.w	r8, r8, #4294967295
 801be1a:	4421      	add	r1, r4
 801be1c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801be1e:	4422      	add	r2, r4
 801be20:	e750      	b.n	801bcc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801be22:	f04f 0900 	mov.w	r9, #0
 801be26:	eba3 0409 	sub.w	r4, r3, r9
 801be2a:	2c00      	cmp	r4, #0
 801be2c:	f77f af4e 	ble.w	801bccc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801be30:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801be34:	140d      	asrs	r5, r1, #16
 801be36:	1414      	asrs	r4, r2, #16
 801be38:	fb06 5404 	mla	r4, r6, r4, r5
 801be3c:	9d02      	ldr	r5, [sp, #8]
 801be3e:	5d2e      	ldrb	r6, [r5, r4]
 801be40:	2e00      	cmp	r6, #0
 801be42:	d04c      	beq.n	801bede <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801be44:	9d01      	ldr	r5, [sp, #4]
 801be46:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801be4a:	9c05      	ldr	r4, [sp, #20]
 801be4c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801be50:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801be54:	4366      	muls	r6, r4
 801be56:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801be5a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801be5e:	1c74      	adds	r4, r6, #1
 801be60:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801be64:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801be68:	122e      	asrs	r6, r5, #8
 801be6a:	1224      	asrs	r4, r4, #8
 801be6c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801be70:	00ed      	lsls	r5, r5, #3
 801be72:	b2a7      	uxth	r7, r4
 801be74:	43e4      	mvns	r4, r4
 801be76:	b2ed      	uxtb	r5, r5
 801be78:	b2e4      	uxtb	r4, r4
 801be7a:	fb16 f604 	smulbb	r6, r6, r4
 801be7e:	fb15 f504 	smulbb	r5, r5, r4
 801be82:	fb0c 6c07 	mla	ip, ip, r7, r6
 801be86:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801be8a:	fb1a fa04 	smulbb	sl, sl, r4
 801be8e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801be92:	fa1f fc8c 	uxth.w	ip, ip
 801be96:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801be9a:	fa5f f888 	uxtb.w	r8, r8
 801be9e:	fb06 a607 	mla	r6, r6, r7, sl
 801bea2:	f10c 0401 	add.w	r4, ip, #1
 801bea6:	fb08 5507 	mla	r5, r8, r7, r5
 801beaa:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801beae:	b2ad      	uxth	r5, r5
 801beb0:	b2b6      	uxth	r6, r6
 801beb2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801beb6:	f105 0a01 	add.w	sl, r5, #1
 801beba:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801bebe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801bec2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801bec6:	f106 0a01 	add.w	sl, r6, #1
 801beca:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801bece:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801bed2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801bed6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801beda:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801bede:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bee0:	f109 0901 	add.w	r9, r9, #1
 801bee4:	4421      	add	r1, r4
 801bee6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bee8:	4422      	add	r2, r4
 801beea:	e79c      	b.n	801be26 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801beec:	b007      	add	sp, #28
 801beee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bef2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bef6:	b085      	sub	sp, #20
 801bef8:	468b      	mov	fp, r1
 801befa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801befe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bf00:	9203      	str	r2, [sp, #12]
 801bf02:	6861      	ldr	r1, [r4, #4]
 801bf04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801bf08:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801bf0c:	fb01 2000 	mla	r0, r1, r0, r2
 801bf10:	6822      	ldr	r2, [r4, #0]
 801bf12:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801bf16:	f8d8 2000 	ldr.w	r2, [r8]
 801bf1a:	9200      	str	r2, [sp, #0]
 801bf1c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801bf20:	9201      	str	r2, [sp, #4]
 801bf22:	f1bb 0f00 	cmp.w	fp, #0
 801bf26:	dc03      	bgt.n	801bf30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bf28:	9a03      	ldr	r2, [sp, #12]
 801bf2a:	2a00      	cmp	r2, #0
 801bf2c:	f340 8146 	ble.w	801c1bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801bf30:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bf32:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801bf36:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801bf3a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bf3c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801bf40:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	dd0e      	ble.n	801bf66 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bf48:	140c      	asrs	r4, r1, #16
 801bf4a:	d405      	bmi.n	801bf58 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf4c:	42bc      	cmp	r4, r7
 801bf4e:	da03      	bge.n	801bf58 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf50:	1414      	asrs	r4, r2, #16
 801bf52:	d401      	bmi.n	801bf58 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bf54:	42b4      	cmp	r4, r6
 801bf56:	db07      	blt.n	801bf68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bf58:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bf5a:	3b01      	subs	r3, #1
 801bf5c:	3002      	adds	r0, #2
 801bf5e:	4421      	add	r1, r4
 801bf60:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801bf62:	4422      	add	r2, r4
 801bf64:	e7ee      	b.n	801bf44 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801bf66:	d017      	beq.n	801bf98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801bf68:	1e5c      	subs	r4, r3, #1
 801bf6a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801bf6c:	fb05 1504 	mla	r5, r5, r4, r1
 801bf70:	142d      	asrs	r5, r5, #16
 801bf72:	d409      	bmi.n	801bf88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bf74:	42bd      	cmp	r5, r7
 801bf76:	da07      	bge.n	801bf88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bf78:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801bf7a:	fb05 2404 	mla	r4, r5, r4, r2
 801bf7e:	1424      	asrs	r4, r4, #16
 801bf80:	d402      	bmi.n	801bf88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bf82:	42b4      	cmp	r4, r6
 801bf84:	f2c0 80b3 	blt.w	801c0ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801bf88:	2600      	movs	r6, #0
 801bf8a:	199c      	adds	r4, r3, r6
 801bf8c:	2c00      	cmp	r4, #0
 801bf8e:	dc3e      	bgt.n	801c00e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bf90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf94:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801bf98:	f1bb 0f00 	cmp.w	fp, #0
 801bf9c:	f340 810e 	ble.w	801c1bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801bfa0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bfa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bfa6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bfaa:	f1bb 0b01 	subs.w	fp, fp, #1
 801bfae:	eeb0 6a62 	vmov.f32	s12, s5
 801bfb2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bfb6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bfba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bfbe:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801bfc2:	eeb0 6a43 	vmov.f32	s12, s6
 801bfc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bfca:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801bfce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bfd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bfd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfda:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bfde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfe2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bfe6:	ee12 2a90 	vmov	r2, s5
 801bfea:	eef0 2a47 	vmov.f32	s5, s14
 801bfee:	fb92 f3f3 	sdiv	r3, r2, r3
 801bff2:	ee13 2a10 	vmov	r2, s6
 801bff6:	9311      	str	r3, [sp, #68]	@ 0x44
 801bff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bffa:	eeb0 3a67 	vmov.f32	s6, s15
 801bffe:	fb92 f3f3 	sdiv	r3, r2, r3
 801c002:	9a03      	ldr	r2, [sp, #12]
 801c004:	9312      	str	r3, [sp, #72]	@ 0x48
 801c006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c008:	bf08      	it	eq
 801c00a:	4613      	moveq	r3, r2
 801c00c:	e789      	b.n	801bf22 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c00e:	140f      	asrs	r7, r1, #16
 801c010:	d418      	bmi.n	801c044 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c012:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c016:	42bd      	cmp	r5, r7
 801c018:	dd14      	ble.n	801c044 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c01a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c01e:	d411      	bmi.n	801c044 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c020:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801c024:	4564      	cmp	r4, ip
 801c026:	dd0d      	ble.n	801c044 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c028:	b22d      	sxth	r5, r5
 801c02a:	9c01      	ldr	r4, [sp, #4]
 801c02c:	fb0c 7505 	mla	r5, ip, r5, r7
 801c030:	5d64      	ldrb	r4, [r4, r5]
 801c032:	2cff      	cmp	r4, #255	@ 0xff
 801c034:	d10c      	bne.n	801c050 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c036:	9c00      	ldr	r4, [sp, #0]
 801c038:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801c03c:	f06f 0401 	mvn.w	r4, #1
 801c040:	4374      	muls	r4, r6
 801c042:	5305      	strh	r5, [r0, r4]
 801c044:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c046:	3e01      	subs	r6, #1
 801c048:	4421      	add	r1, r4
 801c04a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c04c:	4422      	add	r2, r4
 801c04e:	e79c      	b.n	801bf8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c050:	2c00      	cmp	r4, #0
 801c052:	d0f7      	beq.n	801c044 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c054:	9f00      	ldr	r7, [sp, #0]
 801c056:	fa1f fc84 	uxth.w	ip, r4
 801c05a:	43e4      	mvns	r4, r4
 801c05c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801c060:	f06f 0501 	mvn.w	r5, #1
 801c064:	b2e4      	uxtb	r4, r4
 801c066:	4375      	muls	r5, r6
 801c068:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801c06c:	9502      	str	r5, [sp, #8]
 801c06e:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801c072:	5b45      	ldrh	r5, [r0, r5]
 801c074:	122f      	asrs	r7, r5, #8
 801c076:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c07a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c07e:	00ed      	lsls	r5, r5, #3
 801c080:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801c084:	fb17 f704 	smulbb	r7, r7, r4
 801c088:	b2ed      	uxtb	r5, r5
 801c08a:	fb1a fa04 	smulbb	sl, sl, r4
 801c08e:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801c092:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801c096:	fb15 f504 	smulbb	r5, r5, r4
 801c09a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801c09e:	fa1f fe8e 	uxth.w	lr, lr
 801c0a2:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c0a6:	fa5f f989 	uxtb.w	r9, r9
 801c0aa:	fb07 a70c 	mla	r7, r7, ip, sl
 801c0ae:	f10e 0401 	add.w	r4, lr, #1
 801c0b2:	fb09 550c 	mla	r5, r9, ip, r5
 801c0b6:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801c0ba:	9c02      	ldr	r4, [sp, #8]
 801c0bc:	b2ad      	uxth	r5, r5
 801c0be:	b2bf      	uxth	r7, r7
 801c0c0:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801c0c4:	f105 0a01 	add.w	sl, r5, #1
 801c0c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c0cc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c0d0:	ea4a 0e0e 	orr.w	lr, sl, lr
 801c0d4:	f107 0a01 	add.w	sl, r7, #1
 801c0d8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801c0dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c0e0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801c0e4:	ea4e 0e0a 	orr.w	lr, lr, sl
 801c0e8:	f820 e004 	strh.w	lr, [r0, r4]
 801c0ec:	e7aa      	b.n	801c044 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c0ee:	f04f 0900 	mov.w	r9, #0
 801c0f2:	eba3 0409 	sub.w	r4, r3, r9
 801c0f6:	2c00      	cmp	r4, #0
 801c0f8:	f77f af4a 	ble.w	801bf90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c0fc:	1414      	asrs	r4, r2, #16
 801c0fe:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801c102:	140d      	asrs	r5, r1, #16
 801c104:	fb06 5504 	mla	r5, r6, r4, r5
 801c108:	9c01      	ldr	r4, [sp, #4]
 801c10a:	5d64      	ldrb	r4, [r4, r5]
 801c10c:	2cff      	cmp	r4, #255	@ 0xff
 801c10e:	d10b      	bne.n	801c128 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801c110:	9c00      	ldr	r4, [sp, #0]
 801c112:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801c116:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801c11a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c11c:	f109 0901 	add.w	r9, r9, #1
 801c120:	4421      	add	r1, r4
 801c122:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c124:	4422      	add	r2, r4
 801c126:	e7e4      	b.n	801c0f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c128:	2c00      	cmp	r4, #0
 801c12a:	d0f6      	beq.n	801c11a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c12c:	9e00      	ldr	r6, [sp, #0]
 801c12e:	b2a7      	uxth	r7, r4
 801c130:	43e4      	mvns	r4, r4
 801c132:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801c136:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801c13a:	b2e4      	uxtb	r4, r4
 801c13c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c140:	122e      	asrs	r6, r5, #8
 801c142:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801c146:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c14a:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801c14e:	00ed      	lsls	r5, r5, #3
 801c150:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801c154:	fb16 f604 	smulbb	r6, r6, r4
 801c158:	b2ed      	uxtb	r5, r5
 801c15a:	fb1a fa04 	smulbb	sl, sl, r4
 801c15e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c162:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c166:	fb15 f504 	smulbb	r5, r5, r4
 801c16a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c16e:	fa1f fc8c 	uxth.w	ip, ip
 801c172:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801c176:	fa5f fe8e 	uxtb.w	lr, lr
 801c17a:	fb06 a607 	mla	r6, r6, r7, sl
 801c17e:	f10c 0401 	add.w	r4, ip, #1
 801c182:	fb0e 5507 	mla	r5, lr, r7, r5
 801c186:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801c18a:	b2ad      	uxth	r5, r5
 801c18c:	b2b6      	uxth	r6, r6
 801c18e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c192:	f105 0a01 	add.w	sl, r5, #1
 801c196:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801c19a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801c19e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801c1a2:	f106 0a01 	add.w	sl, r6, #1
 801c1a6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801c1aa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c1ae:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801c1b2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c1b6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801c1ba:	e7ae      	b.n	801c11a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c1bc:	b005      	add	sp, #20
 801c1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c1c2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c1c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1c6:	b085      	sub	sp, #20
 801c1c8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c1ca:	9203      	str	r2, [sp, #12]
 801c1cc:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801c1d0:	9100      	str	r1, [sp, #0]
 801c1d2:	9201      	str	r2, [sp, #4]
 801c1d4:	6841      	ldr	r1, [r0, #4]
 801c1d6:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801c1da:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c1de:	fb01 2404 	mla	r4, r1, r4, r2
 801c1e2:	6802      	ldr	r2, [r0, #0]
 801c1e4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c1e8:	f8de 2000 	ldr.w	r2, [lr]
 801c1ec:	9202      	str	r2, [sp, #8]
 801c1ee:	9a01      	ldr	r2, [sp, #4]
 801c1f0:	43d6      	mvns	r6, r2
 801c1f2:	b2f6      	uxtb	r6, r6
 801c1f4:	9a00      	ldr	r2, [sp, #0]
 801c1f6:	2a00      	cmp	r2, #0
 801c1f8:	dc03      	bgt.n	801c202 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c1fa:	9a03      	ldr	r2, [sp, #12]
 801c1fc:	2a00      	cmp	r2, #0
 801c1fe:	f340 8124 	ble.w	801c44a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c202:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c204:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801c208:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c20c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c20e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801c212:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c216:	2b00      	cmp	r3, #0
 801c218:	dd0e      	ble.n	801c238 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c21a:	1408      	asrs	r0, r1, #16
 801c21c:	d405      	bmi.n	801c22a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c21e:	4560      	cmp	r0, ip
 801c220:	da03      	bge.n	801c22a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c222:	1410      	asrs	r0, r2, #16
 801c224:	d401      	bmi.n	801c22a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c226:	42b8      	cmp	r0, r7
 801c228:	db07      	blt.n	801c23a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c22a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c22c:	3b01      	subs	r3, #1
 801c22e:	3402      	adds	r4, #2
 801c230:	4401      	add	r1, r0
 801c232:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c234:	4402      	add	r2, r0
 801c236:	e7ee      	b.n	801c216 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c238:	d06e      	beq.n	801c318 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c23a:	1e58      	subs	r0, r3, #1
 801c23c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c23e:	fb05 1500 	mla	r5, r5, r0, r1
 801c242:	142d      	asrs	r5, r5, #16
 801c244:	d45c      	bmi.n	801c300 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c246:	4565      	cmp	r5, ip
 801c248:	da5a      	bge.n	801c300 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c24a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801c24c:	fb05 2000 	mla	r0, r5, r0, r2
 801c250:	1400      	asrs	r0, r0, #16
 801c252:	d455      	bmi.n	801c300 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c254:	42b8      	cmp	r0, r7
 801c256:	da53      	bge.n	801c300 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801c258:	4699      	mov	r9, r3
 801c25a:	46a2      	mov	sl, r4
 801c25c:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801c260:	f1b9 0f00 	cmp.w	r9, #0
 801c264:	dd54      	ble.n	801c310 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c266:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801c26a:	140d      	asrs	r5, r1, #16
 801c26c:	1410      	asrs	r0, r2, #16
 801c26e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c272:	fb07 5000 	mla	r0, r7, r0, r5
 801c276:	9d02      	ldr	r5, [sp, #8]
 801c278:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801c27c:	f8ba 5000 	ldrh.w	r5, [sl]
 801c280:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c284:	122f      	asrs	r7, r5, #8
 801c286:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801c28a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c28e:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c292:	00ed      	lsls	r5, r5, #3
 801c294:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801c298:	fb17 f706 	smulbb	r7, r7, r6
 801c29c:	b2ed      	uxtb	r5, r5
 801c29e:	fb18 f806 	smulbb	r8, r8, r6
 801c2a2:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801c2a6:	10c7      	asrs	r7, r0, #3
 801c2a8:	fb15 f506 	smulbb	r5, r5, r6
 801c2ac:	00c0      	lsls	r0, r0, #3
 801c2ae:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c2b2:	fa1f fc8c 	uxth.w	ip, ip
 801c2b6:	b2c0      	uxtb	r0, r0
 801c2b8:	fb07 870b 	mla	r7, r7, fp, r8
 801c2bc:	fb00 500b 	mla	r0, r0, fp, r5
 801c2c0:	f10c 0501 	add.w	r5, ip, #1
 801c2c4:	b2bf      	uxth	r7, r7
 801c2c6:	b280      	uxth	r0, r0
 801c2c8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c2cc:	f107 0801 	add.w	r8, r7, #1
 801c2d0:	1c45      	adds	r5, r0, #1
 801c2d2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801c2d6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c2da:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c2de:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c2e0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c2e4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c2e8:	4401      	add	r1, r0
 801c2ea:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801c2ee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c2f0:	ea45 0c0c 	orr.w	ip, r5, ip
 801c2f4:	4402      	add	r2, r0
 801c2f6:	ea4c 0c08 	orr.w	ip, ip, r8
 801c2fa:	f82a cb02 	strh.w	ip, [sl], #2
 801c2fe:	e7af      	b.n	801c260 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c300:	f04f 0800 	mov.w	r8, #0
 801c304:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801c308:	eb03 0008 	add.w	r0, r3, r8
 801c30c:	2800      	cmp	r0, #0
 801c30e:	dc41      	bgt.n	801c394 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801c310:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c314:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c318:	9b00      	ldr	r3, [sp, #0]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	f340 8095 	ble.w	801c44a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c326:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c32a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c32e:	eef0 6a62 	vmov.f32	s13, s5
 801c332:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c336:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c33a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c33e:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801c342:	eef0 6a43 	vmov.f32	s13, s6
 801c346:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c34a:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801c34e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c352:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c356:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c35a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c35e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c362:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c366:	ee12 2a90 	vmov	r2, s5
 801c36a:	eef0 2a47 	vmov.f32	s5, s14
 801c36e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c372:	ee13 2a10 	vmov	r2, s6
 801c376:	9311      	str	r3, [sp, #68]	@ 0x44
 801c378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c37a:	eeb0 3a67 	vmov.f32	s6, s15
 801c37e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c382:	9312      	str	r3, [sp, #72]	@ 0x48
 801c384:	9b00      	ldr	r3, [sp, #0]
 801c386:	9a03      	ldr	r2, [sp, #12]
 801c388:	3b01      	subs	r3, #1
 801c38a:	9300      	str	r3, [sp, #0]
 801c38c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c38e:	bf08      	it	eq
 801c390:	4613      	moveq	r3, r2
 801c392:	e72f      	b.n	801c1f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c394:	140f      	asrs	r7, r1, #16
 801c396:	d451      	bmi.n	801c43c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c398:	f8de 5008 	ldr.w	r5, [lr, #8]
 801c39c:	42bd      	cmp	r5, r7
 801c39e:	dd4d      	ble.n	801c43c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c3a0:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c3a4:	d44a      	bmi.n	801c43c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c3a6:	f8de 000c 	ldr.w	r0, [lr, #12]
 801c3aa:	4560      	cmp	r0, ip
 801c3ac:	dd46      	ble.n	801c43c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c3ae:	b22d      	sxth	r5, r5
 801c3b0:	9802      	ldr	r0, [sp, #8]
 801c3b2:	fb0c 7505 	mla	r5, ip, r5, r7
 801c3b6:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801c3ba:	f06f 0501 	mvn.w	r5, #1
 801c3be:	fb05 fb08 	mul.w	fp, r5, r8
 801c3c2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801c3c6:	f834 500b 	ldrh.w	r5, [r4, fp]
 801c3ca:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c3ce:	122f      	asrs	r7, r5, #8
 801c3d0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c3d4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801c3d8:	00ed      	lsls	r5, r5, #3
 801c3da:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801c3de:	fb17 f706 	smulbb	r7, r7, r6
 801c3e2:	b2ed      	uxtb	r5, r5
 801c3e4:	fb19 f906 	smulbb	r9, r9, r6
 801c3e8:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801c3ec:	10c7      	asrs	r7, r0, #3
 801c3ee:	fb15 f506 	smulbb	r5, r5, r6
 801c3f2:	00c0      	lsls	r0, r0, #3
 801c3f4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c3f8:	fa1f fc8c 	uxth.w	ip, ip
 801c3fc:	b2c0      	uxtb	r0, r0
 801c3fe:	fb07 970a 	mla	r7, r7, sl, r9
 801c402:	fb00 500a 	mla	r0, r0, sl, r5
 801c406:	f10c 0501 	add.w	r5, ip, #1
 801c40a:	b2bf      	uxth	r7, r7
 801c40c:	b280      	uxth	r0, r0
 801c40e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801c412:	f107 0901 	add.w	r9, r7, #1
 801c416:	1c45      	adds	r5, r0, #1
 801c418:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801c41c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c420:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801c424:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c428:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c42c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801c430:	ea45 0c0c 	orr.w	ip, r5, ip
 801c434:	ea4c 0c09 	orr.w	ip, ip, r9
 801c438:	f824 c00b 	strh.w	ip, [r4, fp]
 801c43c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c43e:	f108 38ff 	add.w	r8, r8, #4294967295
 801c442:	4401      	add	r1, r0
 801c444:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c446:	4402      	add	r2, r0
 801c448:	e75e      	b.n	801c308 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c44a:	b005      	add	sp, #20
 801c44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c450 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c454:	b085      	sub	sp, #20
 801c456:	4693      	mov	fp, r2
 801c458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c45c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c45e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801c460:	6870      	ldr	r0, [r6, #4]
 801c462:	9101      	str	r1, [sp, #4]
 801c464:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c468:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801c46c:	fb00 2404 	mla	r4, r0, r4, r2
 801c470:	6832      	ldr	r2, [r6, #0]
 801c472:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c476:	682a      	ldr	r2, [r5, #0]
 801c478:	9202      	str	r2, [sp, #8]
 801c47a:	9a01      	ldr	r2, [sp, #4]
 801c47c:	2a00      	cmp	r2, #0
 801c47e:	dc03      	bgt.n	801c488 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c480:	f1bb 0f00 	cmp.w	fp, #0
 801c484:	f340 809a 	ble.w	801c5bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c488:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c48a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801c48e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c492:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c494:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801c498:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	dd0c      	ble.n	801c4ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c4a0:	1406      	asrs	r6, r0, #16
 801c4a2:	d405      	bmi.n	801c4b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c4a4:	454e      	cmp	r6, r9
 801c4a6:	da03      	bge.n	801c4b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c4a8:	1416      	asrs	r6, r2, #16
 801c4aa:	d401      	bmi.n	801c4b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c4ac:	4546      	cmp	r6, r8
 801c4ae:	db05      	blt.n	801c4bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c4b0:	4470      	add	r0, lr
 801c4b2:	4462      	add	r2, ip
 801c4b4:	3b01      	subs	r3, #1
 801c4b6:	3402      	adds	r4, #2
 801c4b8:	e7f0      	b.n	801c49c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c4ba:	d00f      	beq.n	801c4dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c4bc:	1e5e      	subs	r6, r3, #1
 801c4be:	fb0e 0706 	mla	r7, lr, r6, r0
 801c4c2:	143f      	asrs	r7, r7, #16
 801c4c4:	d541      	bpl.n	801c54a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801c4c6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801c4ca:	4698      	mov	r8, r3
 801c4cc:	9603      	str	r6, [sp, #12]
 801c4ce:	f1b8 0f00 	cmp.w	r8, #0
 801c4d2:	dc56      	bgt.n	801c582 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801c4d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c4d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c4dc:	9b01      	ldr	r3, [sp, #4]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	dd6c      	ble.n	801c5bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c4e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c4e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4ec:	eeb0 6a62 	vmov.f32	s12, s5
 801c4f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c4f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4fc:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c500:	eeb0 6a43 	vmov.f32	s12, s6
 801c504:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c508:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c50c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c510:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c514:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c518:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c51c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c520:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c524:	ee12 2a90 	vmov	r2, s5
 801c528:	eef0 2a47 	vmov.f32	s5, s14
 801c52c:	fb92 fef3 	sdiv	lr, r2, r3
 801c530:	ee13 2a10 	vmov	r2, s6
 801c534:	eeb0 3a67 	vmov.f32	s6, s15
 801c538:	fb92 fcf3 	sdiv	ip, r2, r3
 801c53c:	9b01      	ldr	r3, [sp, #4]
 801c53e:	3b01      	subs	r3, #1
 801c540:	9301      	str	r3, [sp, #4]
 801c542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c544:	bf08      	it	eq
 801c546:	465b      	moveq	r3, fp
 801c548:	e797      	b.n	801c47a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801c54a:	454f      	cmp	r7, r9
 801c54c:	dabb      	bge.n	801c4c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c54e:	fb0c 2606 	mla	r6, ip, r6, r2
 801c552:	1436      	asrs	r6, r6, #16
 801c554:	d4b7      	bmi.n	801c4c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c556:	4546      	cmp	r6, r8
 801c558:	dab5      	bge.n	801c4c6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c55a:	461e      	mov	r6, r3
 801c55c:	46a0      	mov	r8, r4
 801c55e:	2e00      	cmp	r6, #0
 801c560:	ddb8      	ble.n	801c4d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c562:	1417      	asrs	r7, r2, #16
 801c564:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801c568:	ea4f 4920 	mov.w	r9, r0, asr #16
 801c56c:	9902      	ldr	r1, [sp, #8]
 801c56e:	4470      	add	r0, lr
 801c570:	4462      	add	r2, ip
 801c572:	fb0a 9707 	mla	r7, sl, r7, r9
 801c576:	3e01      	subs	r6, #1
 801c578:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801c57c:	f828 7b02 	strh.w	r7, [r8], #2
 801c580:	e7ed      	b.n	801c55e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801c582:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c586:	d414      	bmi.n	801c5b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c588:	68ae      	ldr	r6, [r5, #8]
 801c58a:	454e      	cmp	r6, r9
 801c58c:	dd11      	ble.n	801c5b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c58e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c592:	d40e      	bmi.n	801c5b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c594:	68ef      	ldr	r7, [r5, #12]
 801c596:	4557      	cmp	r7, sl
 801c598:	dd0b      	ble.n	801c5b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801c59a:	b236      	sxth	r6, r6
 801c59c:	f06f 0101 	mvn.w	r1, #1
 801c5a0:	9f02      	ldr	r7, [sp, #8]
 801c5a2:	fb0a 9606 	mla	r6, sl, r6, r9
 801c5a6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801c5aa:	fb01 f608 	mul.w	r6, r1, r8
 801c5ae:	9903      	ldr	r1, [sp, #12]
 801c5b0:	538f      	strh	r7, [r1, r6]
 801c5b2:	4470      	add	r0, lr
 801c5b4:	4462      	add	r2, ip
 801c5b6:	f108 38ff 	add.w	r8, r8, #4294967295
 801c5ba:	e788      	b.n	801c4ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c5bc:	b005      	add	sp, #20
 801c5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c5c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c5c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5c6:	b087      	sub	sp, #28
 801c5c8:	468b      	mov	fp, r1
 801c5ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c5ce:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c5d0:	9203      	str	r2, [sp, #12]
 801c5d2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c5d6:	6841      	ldr	r1, [r0, #4]
 801c5d8:	9204      	str	r2, [sp, #16]
 801c5da:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801c5de:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801c5e2:	fb01 2505 	mla	r5, r1, r5, r2
 801c5e6:	6802      	ldr	r2, [r0, #0]
 801c5e8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801c5ec:	f8d9 2000 	ldr.w	r2, [r9]
 801c5f0:	9201      	str	r2, [sp, #4]
 801c5f2:	f1bb 0f00 	cmp.w	fp, #0
 801c5f6:	dc03      	bgt.n	801c600 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c5f8:	9a03      	ldr	r2, [sp, #12]
 801c5fa:	2a00      	cmp	r2, #0
 801c5fc:	f340 8158 	ble.w	801c8b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801c600:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c602:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801c606:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c60a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c60c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801c610:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c614:	2b00      	cmp	r3, #0
 801c616:	dd0e      	ble.n	801c636 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c618:	1402      	asrs	r2, r0, #16
 801c61a:	d405      	bmi.n	801c628 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c61c:	42ba      	cmp	r2, r7
 801c61e:	da03      	bge.n	801c628 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c620:	140a      	asrs	r2, r1, #16
 801c622:	d401      	bmi.n	801c628 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c624:	42b2      	cmp	r2, r6
 801c626:	db07      	blt.n	801c638 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c628:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c62a:	3b01      	subs	r3, #1
 801c62c:	3502      	adds	r5, #2
 801c62e:	4410      	add	r0, r2
 801c630:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c632:	4411      	add	r1, r2
 801c634:	e7ee      	b.n	801c614 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c636:	d017      	beq.n	801c668 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c638:	1e5a      	subs	r2, r3, #1
 801c63a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c63c:	fb04 0402 	mla	r4, r4, r2, r0
 801c640:	1424      	asrs	r4, r4, #16
 801c642:	d409      	bmi.n	801c658 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c644:	42bc      	cmp	r4, r7
 801c646:	da07      	bge.n	801c658 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c648:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c64a:	fb04 1202 	mla	r2, r4, r2, r1
 801c64e:	1412      	asrs	r2, r2, #16
 801c650:	d402      	bmi.n	801c658 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c652:	42b2      	cmp	r2, r6
 801c654:	f2c0 80bf 	blt.w	801c7d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c658:	2700      	movs	r7, #0
 801c65a:	19da      	adds	r2, r3, r7
 801c65c:	2a00      	cmp	r2, #0
 801c65e:	dc3e      	bgt.n	801c6de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c660:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c664:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801c668:	f1bb 0f00 	cmp.w	fp, #0
 801c66c:	f340 8120 	ble.w	801c8b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801c670:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c674:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c676:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c67a:	f1bb 0b01 	subs.w	fp, fp, #1
 801c67e:	eeb0 6a62 	vmov.f32	s12, s5
 801c682:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c686:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c68a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c68e:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801c692:	eeb0 6a43 	vmov.f32	s12, s6
 801c696:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c69a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801c69e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6b6:	ee12 2a90 	vmov	r2, s5
 801c6ba:	eef0 2a47 	vmov.f32	s5, s14
 801c6be:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6c2:	ee13 2a10 	vmov	r2, s6
 801c6c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c6c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c6ca:	eeb0 3a67 	vmov.f32	s6, s15
 801c6ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6d2:	9a03      	ldr	r2, [sp, #12]
 801c6d4:	9314      	str	r3, [sp, #80]	@ 0x50
 801c6d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c6d8:	bf08      	it	eq
 801c6da:	4613      	moveq	r3, r2
 801c6dc:	e789      	b.n	801c5f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801c6de:	1406      	asrs	r6, r0, #16
 801c6e0:	d42d      	bmi.n	801c73e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c6e2:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801c6e6:	42b4      	cmp	r4, r6
 801c6e8:	dd29      	ble.n	801c73e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c6ea:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801c6ee:	d426      	bmi.n	801c73e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c6f0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801c6f4:	4562      	cmp	r2, ip
 801c6f6:	dd22      	ble.n	801c73e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c6f8:	b224      	sxth	r4, r4
 801c6fa:	9a01      	ldr	r2, [sp, #4]
 801c6fc:	fb0c 6404 	mla	r4, ip, r4, r6
 801c700:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801c704:	0e22      	lsrs	r2, r4, #24
 801c706:	d01a      	beq.n	801c73e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c708:	9e04      	ldr	r6, [sp, #16]
 801c70a:	4372      	muls	r2, r6
 801c70c:	1c56      	adds	r6, r2, #1
 801c70e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c712:	0a26      	lsrs	r6, r4, #8
 801c714:	1212      	asrs	r2, r2, #8
 801c716:	9605      	str	r6, [sp, #20]
 801c718:	2aff      	cmp	r2, #255	@ 0xff
 801c71a:	d116      	bne.n	801c74a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801c71c:	f06f 0201 	mvn.w	r2, #1
 801c720:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801c724:	fb02 fc07 	mul.w	ip, r2, r7
 801c728:	0962      	lsrs	r2, r4, #5
 801c72a:	f026 0607 	bic.w	r6, r6, #7
 801c72e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c732:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801c736:	4316      	orrs	r6, r2
 801c738:	4326      	orrs	r6, r4
 801c73a:	f825 600c 	strh.w	r6, [r5, ip]
 801c73e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c740:	3f01      	subs	r7, #1
 801c742:	4410      	add	r0, r2
 801c744:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c746:	4411      	add	r1, r2
 801c748:	e787      	b.n	801c65a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c74a:	f06f 0601 	mvn.w	r6, #1
 801c74e:	fa1f fa82 	uxth.w	sl, r2
 801c752:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801c756:	43d2      	mvns	r2, r2
 801c758:	437e      	muls	r6, r7
 801c75a:	b2e4      	uxtb	r4, r4
 801c75c:	fb1c fc0a 	smulbb	ip, ip, sl
 801c760:	b2d2      	uxtb	r2, r2
 801c762:	f835 8006 	ldrh.w	r8, [r5, r6]
 801c766:	fb14 f40a 	smulbb	r4, r4, sl
 801c76a:	9602      	str	r6, [sp, #8]
 801c76c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801c770:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801c774:	fb16 f60a 	smulbb	r6, r6, sl
 801c778:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801c77c:	fb0e ce02 	mla	lr, lr, r2, ip
 801c780:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801c784:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c788:	fa1f fe8e 	uxth.w	lr, lr
 801c78c:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801c790:	fa5f f888 	uxtb.w	r8, r8
 801c794:	fb0c 6c02 	mla	ip, ip, r2, r6
 801c798:	fb08 4402 	mla	r4, r8, r2, r4
 801c79c:	f10e 0201 	add.w	r2, lr, #1
 801c7a0:	fa1f fc8c 	uxth.w	ip, ip
 801c7a4:	b2a4      	uxth	r4, r4
 801c7a6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801c7aa:	9a02      	ldr	r2, [sp, #8]
 801c7ac:	1c66      	adds	r6, r4, #1
 801c7ae:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801c7b2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801c7b6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c7ba:	ea46 0e0e 	orr.w	lr, r6, lr
 801c7be:	f10c 0601 	add.w	r6, ip, #1
 801c7c2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801c7c6:	0976      	lsrs	r6, r6, #5
 801c7c8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c7cc:	ea4e 0e06 	orr.w	lr, lr, r6
 801c7d0:	f825 e002 	strh.w	lr, [r5, r2]
 801c7d4:	e7b3      	b.n	801c73e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801c7d6:	f04f 0800 	mov.w	r8, #0
 801c7da:	eba3 0208 	sub.w	r2, r3, r8
 801c7de:	2a00      	cmp	r2, #0
 801c7e0:	f77f af3e 	ble.w	801c660 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c7e4:	1404      	asrs	r4, r0, #16
 801c7e6:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801c7ea:	140a      	asrs	r2, r1, #16
 801c7ec:	fb06 4202 	mla	r2, r6, r2, r4
 801c7f0:	9c01      	ldr	r4, [sp, #4]
 801c7f2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801c7f6:	0e22      	lsrs	r2, r4, #24
 801c7f8:	d015      	beq.n	801c826 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801c7fa:	9e04      	ldr	r6, [sp, #16]
 801c7fc:	4372      	muls	r2, r6
 801c7fe:	1c56      	adds	r6, r2, #1
 801c800:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c804:	0a26      	lsrs	r6, r4, #8
 801c806:	1212      	asrs	r2, r2, #8
 801c808:	2aff      	cmp	r2, #255	@ 0xff
 801c80a:	d113      	bne.n	801c834 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801c80c:	0962      	lsrs	r2, r4, #5
 801c80e:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801c812:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801c816:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801c81a:	f026 0607 	bic.w	r6, r6, #7
 801c81e:	4316      	orrs	r6, r2
 801c820:	4326      	orrs	r6, r4
 801c822:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801c826:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c828:	f108 0801 	add.w	r8, r8, #1
 801c82c:	4410      	add	r0, r2
 801c82e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c830:	4411      	add	r1, r2
 801c832:	e7d2      	b.n	801c7da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801c834:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801c838:	fa1f fa82 	uxth.w	sl, r2
 801c83c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801c840:	43d2      	mvns	r2, r2
 801c842:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c846:	fb17 f70a 	smulbb	r7, r7, sl
 801c84a:	b2d2      	uxtb	r2, r2
 801c84c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801c850:	b2e4      	uxtb	r4, r4
 801c852:	b2f6      	uxtb	r6, r6
 801c854:	fb0c 7c02 	mla	ip, ip, r2, r7
 801c858:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801c85c:	fb14 f40a 	smulbb	r4, r4, sl
 801c860:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c864:	fa1f fc8c 	uxth.w	ip, ip
 801c868:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801c86c:	fb16 f60a 	smulbb	r6, r6, sl
 801c870:	fa5f fe8e 	uxtb.w	lr, lr
 801c874:	fb0e 4402 	mla	r4, lr, r2, r4
 801c878:	fb07 6702 	mla	r7, r7, r2, r6
 801c87c:	f10c 0201 	add.w	r2, ip, #1
 801c880:	b2a4      	uxth	r4, r4
 801c882:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c886:	1c66      	adds	r6, r4, #1
 801c888:	b2bf      	uxth	r7, r7
 801c88a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801c88e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801c892:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801c896:	ea46 0c0c 	orr.w	ip, r6, ip
 801c89a:	1c7e      	adds	r6, r7, #1
 801c89c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801c8a0:	0976      	lsrs	r6, r6, #5
 801c8a2:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801c8a6:	ea4c 0c06 	orr.w	ip, ip, r6
 801c8aa:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801c8ae:	e7ba      	b.n	801c826 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801c8b0:	b007      	add	sp, #28
 801c8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c8b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8bc:	b085      	sub	sp, #20
 801c8be:	468b      	mov	fp, r1
 801c8c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c8c4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c8c6:	9203      	str	r2, [sp, #12]
 801c8c8:	6841      	ldr	r1, [r0, #4]
 801c8ca:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801c8ce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c8d2:	fb01 2404 	mla	r4, r1, r4, r2
 801c8d6:	6802      	ldr	r2, [r0, #0]
 801c8d8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801c8dc:	f8d8 2000 	ldr.w	r2, [r8]
 801c8e0:	9201      	str	r2, [sp, #4]
 801c8e2:	f1bb 0f00 	cmp.w	fp, #0
 801c8e6:	dc03      	bgt.n	801c8f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c8e8:	9a03      	ldr	r2, [sp, #12]
 801c8ea:	2a00      	cmp	r2, #0
 801c8ec:	f340 814f 	ble.w	801cb8e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801c8f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c8f2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801c8f6:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801c8fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c8fc:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801c900:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c904:	2b00      	cmp	r3, #0
 801c906:	dd0e      	ble.n	801c926 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c908:	1408      	asrs	r0, r1, #16
 801c90a:	d405      	bmi.n	801c918 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c90c:	42b8      	cmp	r0, r7
 801c90e:	da03      	bge.n	801c918 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c910:	1410      	asrs	r0, r2, #16
 801c912:	d401      	bmi.n	801c918 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c914:	42b0      	cmp	r0, r6
 801c916:	db07      	blt.n	801c928 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c918:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c91a:	3b01      	subs	r3, #1
 801c91c:	3402      	adds	r4, #2
 801c91e:	4401      	add	r1, r0
 801c920:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c922:	4402      	add	r2, r0
 801c924:	e7ee      	b.n	801c904 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c926:	d017      	beq.n	801c958 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c928:	1e58      	subs	r0, r3, #1
 801c92a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c92c:	fb05 1500 	mla	r5, r5, r0, r1
 801c930:	142d      	asrs	r5, r5, #16
 801c932:	d409      	bmi.n	801c948 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c934:	42bd      	cmp	r5, r7
 801c936:	da07      	bge.n	801c948 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c938:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801c93a:	fb05 2000 	mla	r0, r5, r0, r2
 801c93e:	1400      	asrs	r0, r0, #16
 801c940:	d402      	bmi.n	801c948 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c942:	42b0      	cmp	r0, r6
 801c944:	f2c0 80ba 	blt.w	801cabc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c948:	2600      	movs	r6, #0
 801c94a:	1998      	adds	r0, r3, r6
 801c94c:	2800      	cmp	r0, #0
 801c94e:	dc3e      	bgt.n	801c9ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c950:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c954:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c958:	f1bb 0f00 	cmp.w	fp, #0
 801c95c:	f340 8117 	ble.w	801cb8e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801c960:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c966:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c96a:	f1bb 0b01 	subs.w	fp, fp, #1
 801c96e:	eeb0 6a62 	vmov.f32	s12, s5
 801c972:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c976:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c97a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c97e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c982:	eeb0 6a43 	vmov.f32	s12, s6
 801c986:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c98a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c98e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c992:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c996:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c99a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c99e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c9a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c9a6:	ee12 2a90 	vmov	r2, s5
 801c9aa:	eef0 2a47 	vmov.f32	s5, s14
 801c9ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9b2:	ee13 2a10 	vmov	r2, s6
 801c9b6:	9311      	str	r3, [sp, #68]	@ 0x44
 801c9b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c9ba:	eeb0 3a67 	vmov.f32	s6, s15
 801c9be:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9c2:	9a03      	ldr	r2, [sp, #12]
 801c9c4:	9312      	str	r3, [sp, #72]	@ 0x48
 801c9c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c9c8:	bf08      	it	eq
 801c9ca:	4613      	moveq	r3, r2
 801c9cc:	e789      	b.n	801c8e2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801c9ce:	140f      	asrs	r7, r1, #16
 801c9d0:	d424      	bmi.n	801ca1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c9d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801c9d6:	42bd      	cmp	r5, r7
 801c9d8:	dd20      	ble.n	801ca1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c9da:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c9de:	d41d      	bmi.n	801ca1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c9e0:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801c9e4:	4560      	cmp	r0, ip
 801c9e6:	dd19      	ble.n	801ca1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c9e8:	b22d      	sxth	r5, r5
 801c9ea:	9801      	ldr	r0, [sp, #4]
 801c9ec:	fb0c 7505 	mla	r5, ip, r5, r7
 801c9f0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801c9f4:	0e07      	lsrs	r7, r0, #24
 801c9f6:	2fff      	cmp	r7, #255	@ 0xff
 801c9f8:	d116      	bne.n	801ca28 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801c9fa:	f06f 0501 	mvn.w	r5, #1
 801c9fe:	fb05 f706 	mul.w	r7, r5, r6
 801ca02:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801ca06:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ca0a:	0945      	lsrs	r5, r0, #5
 801ca0c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ca10:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ca14:	ea4c 0505 	orr.w	r5, ip, r5
 801ca18:	4305      	orrs	r5, r0
 801ca1a:	53e5      	strh	r5, [r4, r7]
 801ca1c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ca1e:	3e01      	subs	r6, #1
 801ca20:	4401      	add	r1, r0
 801ca22:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ca24:	4402      	add	r2, r0
 801ca26:	e790      	b.n	801c94a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ca28:	b2fd      	uxtb	r5, r7
 801ca2a:	2f00      	cmp	r7, #0
 801ca2c:	d0f6      	beq.n	801ca1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ca2e:	f06f 0701 	mvn.w	r7, #1
 801ca32:	fa1f f985 	uxth.w	r9, r5
 801ca36:	43ed      	mvns	r5, r5
 801ca38:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ca3c:	4377      	muls	r7, r6
 801ca3e:	fb1a fa09 	smulbb	sl, sl, r9
 801ca42:	b2ed      	uxtb	r5, r5
 801ca44:	f834 e007 	ldrh.w	lr, [r4, r7]
 801ca48:	9702      	str	r7, [sp, #8]
 801ca4a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ca4e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ca52:	fb17 f709 	smulbb	r7, r7, r9
 801ca56:	b2c0      	uxtb	r0, r0
 801ca58:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ca5c:	fb10 f009 	smulbb	r0, r0, r9
 801ca60:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ca64:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ca68:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ca6c:	fa1f fc8c 	uxth.w	ip, ip
 801ca70:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ca74:	fa5f fe8e 	uxtb.w	lr, lr
 801ca78:	fb07 a705 	mla	r7, r7, r5, sl
 801ca7c:	fb0e 0005 	mla	r0, lr, r5, r0
 801ca80:	f10c 0501 	add.w	r5, ip, #1
 801ca84:	b2bf      	uxth	r7, r7
 801ca86:	b280      	uxth	r0, r0
 801ca88:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ca8c:	f100 0a01 	add.w	sl, r0, #1
 801ca90:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801ca94:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ca98:	9802      	ldr	r0, [sp, #8]
 801ca9a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ca9e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801caa2:	f107 0a01 	add.w	sl, r7, #1
 801caa6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801caaa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801caae:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801cab2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801cab6:	f824 c000 	strh.w	ip, [r4, r0]
 801caba:	e7af      	b.n	801ca1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cabc:	f04f 0e00 	mov.w	lr, #0
 801cac0:	eba3 000e 	sub.w	r0, r3, lr
 801cac4:	2800      	cmp	r0, #0
 801cac6:	f77f af43 	ble.w	801c950 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801caca:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801cace:	140d      	asrs	r5, r1, #16
 801cad0:	1410      	asrs	r0, r2, #16
 801cad2:	fb06 5000 	mla	r0, r6, r0, r5
 801cad6:	9d01      	ldr	r5, [sp, #4]
 801cad8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801cadc:	0e2e      	lsrs	r6, r5, #24
 801cade:	2eff      	cmp	r6, #255	@ 0xff
 801cae0:	d112      	bne.n	801cb08 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801cae2:	482c      	ldr	r0, [pc, #176]	@ (801cb94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801cae4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801cae8:	0968      	lsrs	r0, r5, #5
 801caea:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801caee:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801caf2:	4330      	orrs	r0, r6
 801caf4:	4328      	orrs	r0, r5
 801caf6:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801cafa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801cafc:	f10e 0e01 	add.w	lr, lr, #1
 801cb00:	4401      	add	r1, r0
 801cb02:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cb04:	4402      	add	r2, r0
 801cb06:	e7db      	b.n	801cac0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cb08:	b2f0      	uxtb	r0, r6
 801cb0a:	2e00      	cmp	r6, #0
 801cb0c:	d0f5      	beq.n	801cafa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801cb0e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801cb12:	fa1f f980 	uxth.w	r9, r0
 801cb16:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801cb1a:	43c0      	mvns	r0, r0
 801cb1c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801cb20:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cb24:	fb16 f609 	smulbb	r6, r6, r9
 801cb28:	b2c0      	uxtb	r0, r0
 801cb2a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801cb2e:	b2ed      	uxtb	r5, r5
 801cb30:	fb1a fa09 	smulbb	sl, sl, r9
 801cb34:	fb07 6700 	mla	r7, r7, r0, r6
 801cb38:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801cb3c:	fb15 f509 	smulbb	r5, r5, r9
 801cb40:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801cb44:	b2bf      	uxth	r7, r7
 801cb46:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801cb4a:	fa5f fc8c 	uxtb.w	ip, ip
 801cb4e:	fb06 a600 	mla	r6, r6, r0, sl
 801cb52:	fb0c 5500 	mla	r5, ip, r0, r5
 801cb56:	1c78      	adds	r0, r7, #1
 801cb58:	b2b6      	uxth	r6, r6
 801cb5a:	b2ad      	uxth	r5, r5
 801cb5c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801cb60:	f105 0a01 	add.w	sl, r5, #1
 801cb64:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801cb68:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801cb6c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801cb70:	ea4a 0707 	orr.w	r7, sl, r7
 801cb74:	f106 0a01 	add.w	sl, r6, #1
 801cb78:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801cb7c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cb80:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801cb84:	ea47 070a 	orr.w	r7, r7, sl
 801cb88:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801cb8c:	e7b5      	b.n	801cafa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801cb8e:	b005      	add	sp, #20
 801cb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb94:	fffff800 	.word	0xfffff800

0801cb98 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb9c:	b087      	sub	sp, #28
 801cb9e:	468b      	mov	fp, r1
 801cba0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cba4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801cba6:	9203      	str	r2, [sp, #12]
 801cba8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801cbac:	6841      	ldr	r1, [r0, #4]
 801cbae:	9204      	str	r2, [sp, #16]
 801cbb0:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801cbb4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801cbb8:	fb01 2404 	mla	r4, r1, r4, r2
 801cbbc:	6802      	ldr	r2, [r0, #0]
 801cbbe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cbc2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801cbc6:	3201      	adds	r2, #1
 801cbc8:	f022 0201 	bic.w	r2, r2, #1
 801cbcc:	9200      	str	r2, [sp, #0]
 801cbce:	f8d9 2000 	ldr.w	r2, [r9]
 801cbd2:	9201      	str	r2, [sp, #4]
 801cbd4:	f1bb 0f00 	cmp.w	fp, #0
 801cbd8:	dc03      	bgt.n	801cbe2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801cbda:	9a03      	ldr	r2, [sp, #12]
 801cbdc:	2a00      	cmp	r2, #0
 801cbde:	f340 816a 	ble.w	801ceb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801cbe2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cbe4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801cbe8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801cbec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cbee:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801cbf2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	dd0e      	ble.n	801cc18 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cbfa:	1402      	asrs	r2, r0, #16
 801cbfc:	d405      	bmi.n	801cc0a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cbfe:	42ba      	cmp	r2, r7
 801cc00:	da03      	bge.n	801cc0a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc02:	140a      	asrs	r2, r1, #16
 801cc04:	d401      	bmi.n	801cc0a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc06:	42b2      	cmp	r2, r6
 801cc08:	db07      	blt.n	801cc1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cc0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cc0c:	3b01      	subs	r3, #1
 801cc0e:	3402      	adds	r4, #2
 801cc10:	4410      	add	r0, r2
 801cc12:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cc14:	4411      	add	r1, r2
 801cc16:	e7ee      	b.n	801cbf6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801cc18:	d017      	beq.n	801cc4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801cc1a:	1e5a      	subs	r2, r3, #1
 801cc1c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801cc1e:	fb05 0502 	mla	r5, r5, r2, r0
 801cc22:	142d      	asrs	r5, r5, #16
 801cc24:	d409      	bmi.n	801cc3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cc26:	42bd      	cmp	r5, r7
 801cc28:	da07      	bge.n	801cc3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cc2a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801cc2c:	fb05 1202 	mla	r2, r5, r2, r1
 801cc30:	1412      	asrs	r2, r2, #16
 801cc32:	d402      	bmi.n	801cc3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801cc34:	42b2      	cmp	r2, r6
 801cc36:	f2c0 80c8 	blt.w	801cdca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801cc3a:	2700      	movs	r7, #0
 801cc3c:	19da      	adds	r2, r3, r7
 801cc3e:	2a00      	cmp	r2, #0
 801cc40:	dc3e      	bgt.n	801ccc0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801cc42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc46:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cc4a:	f1bb 0f00 	cmp.w	fp, #0
 801cc4e:	f340 8132 	ble.w	801ceb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801cc52:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cc58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc5c:	f1bb 0b01 	subs.w	fp, fp, #1
 801cc60:	eeb0 6a62 	vmov.f32	s12, s5
 801cc64:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cc68:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc70:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801cc74:	eeb0 6a43 	vmov.f32	s12, s6
 801cc78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc7c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801cc80:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc84:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc88:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc98:	ee12 2a90 	vmov	r2, s5
 801cc9c:	eef0 2a47 	vmov.f32	s5, s14
 801cca0:	fb92 f3f3 	sdiv	r3, r2, r3
 801cca4:	ee13 2a10 	vmov	r2, s6
 801cca8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ccaa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ccac:	eeb0 3a67 	vmov.f32	s6, s15
 801ccb0:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccb4:	9a03      	ldr	r2, [sp, #12]
 801ccb6:	9314      	str	r3, [sp, #80]	@ 0x50
 801ccb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ccba:	bf08      	it	eq
 801ccbc:	4613      	moveq	r3, r2
 801ccbe:	e789      	b.n	801cbd4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ccc0:	1405      	asrs	r5, r0, #16
 801ccc2:	d436      	bmi.n	801cd32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ccc4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ccc8:	42aa      	cmp	r2, r5
 801ccca:	dd32      	ble.n	801cd32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801cccc:	140e      	asrs	r6, r1, #16
 801ccce:	d430      	bmi.n	801cd32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ccd0:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ccd4:	42b2      	cmp	r2, r6
 801ccd6:	dd2c      	ble.n	801cd32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ccd8:	9a00      	ldr	r2, [sp, #0]
 801ccda:	fb06 5502 	mla	r5, r6, r2, r5
 801ccde:	9e01      	ldr	r6, [sp, #4]
 801cce0:	086a      	lsrs	r2, r5, #1
 801cce2:	5cb2      	ldrb	r2, [r6, r2]
 801cce4:	07ee      	lsls	r6, r5, #31
 801cce6:	bf54      	ite	pl
 801cce8:	f002 020f 	andpl.w	r2, r2, #15
 801ccec:	1112      	asrmi	r2, r2, #4
 801ccee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ccf2:	b2d2      	uxtb	r2, r2
 801ccf4:	b1ea      	cbz	r2, 801cd32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ccf6:	9d04      	ldr	r5, [sp, #16]
 801ccf8:	436a      	muls	r2, r5
 801ccfa:	1c55      	adds	r5, r2, #1
 801ccfc:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801cd00:	4d6e      	ldr	r5, [pc, #440]	@ (801cebc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801cd02:	1212      	asrs	r2, r2, #8
 801cd04:	682d      	ldr	r5, [r5, #0]
 801cd06:	2aff      	cmp	r2, #255	@ 0xff
 801cd08:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801cd0c:	9605      	str	r6, [sp, #20]
 801cd0e:	d116      	bne.n	801cd3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cd10:	f06f 0201 	mvn.w	r2, #1
 801cd14:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801cd18:	fb02 fc07 	mul.w	ip, r2, r7
 801cd1c:	096a      	lsrs	r2, r5, #5
 801cd1e:	f026 0607 	bic.w	r6, r6, #7
 801cd22:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801cd26:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801cd2a:	4316      	orrs	r6, r2
 801cd2c:	432e      	orrs	r6, r5
 801cd2e:	f824 600c 	strh.w	r6, [r4, ip]
 801cd32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cd34:	3f01      	subs	r7, #1
 801cd36:	4410      	add	r0, r2
 801cd38:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cd3a:	4411      	add	r1, r2
 801cd3c:	e77e      	b.n	801cc3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801cd3e:	f06f 0601 	mvn.w	r6, #1
 801cd42:	fa1f fa82 	uxth.w	sl, r2
 801cd46:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801cd4a:	43d2      	mvns	r2, r2
 801cd4c:	437e      	muls	r6, r7
 801cd4e:	b2ed      	uxtb	r5, r5
 801cd50:	fb1c fc0a 	smulbb	ip, ip, sl
 801cd54:	b2d2      	uxtb	r2, r2
 801cd56:	f834 8006 	ldrh.w	r8, [r4, r6]
 801cd5a:	fb15 f50a 	smulbb	r5, r5, sl
 801cd5e:	9602      	str	r6, [sp, #8]
 801cd60:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801cd64:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801cd68:	fb16 f60a 	smulbb	r6, r6, sl
 801cd6c:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801cd70:	fb0e ce02 	mla	lr, lr, r2, ip
 801cd74:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801cd78:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801cd7c:	fa1f fe8e 	uxth.w	lr, lr
 801cd80:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801cd84:	fa5f f888 	uxtb.w	r8, r8
 801cd88:	fb0c 6c02 	mla	ip, ip, r2, r6
 801cd8c:	fb08 5502 	mla	r5, r8, r2, r5
 801cd90:	f10e 0201 	add.w	r2, lr, #1
 801cd94:	fa1f fc8c 	uxth.w	ip, ip
 801cd98:	b2ad      	uxth	r5, r5
 801cd9a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801cd9e:	9a02      	ldr	r2, [sp, #8]
 801cda0:	1c6e      	adds	r6, r5, #1
 801cda2:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801cda6:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801cdaa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801cdae:	ea46 0e0e 	orr.w	lr, r6, lr
 801cdb2:	f10c 0601 	add.w	r6, ip, #1
 801cdb6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801cdba:	0976      	lsrs	r6, r6, #5
 801cdbc:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801cdc0:	ea4e 0e06 	orr.w	lr, lr, r6
 801cdc4:	f824 e002 	strh.w	lr, [r4, r2]
 801cdc8:	e7b3      	b.n	801cd32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801cdca:	f04f 0800 	mov.w	r8, #0
 801cdce:	eba3 0208 	sub.w	r2, r3, r8
 801cdd2:	2a00      	cmp	r2, #0
 801cdd4:	f77f af35 	ble.w	801cc42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801cdd8:	1402      	asrs	r2, r0, #16
 801cdda:	9e00      	ldr	r6, [sp, #0]
 801cddc:	140d      	asrs	r5, r1, #16
 801cdde:	fb06 2505 	mla	r5, r6, r5, r2
 801cde2:	9e01      	ldr	r6, [sp, #4]
 801cde4:	086a      	lsrs	r2, r5, #1
 801cde6:	07ed      	lsls	r5, r5, #31
 801cde8:	5cb2      	ldrb	r2, [r6, r2]
 801cdea:	bf54      	ite	pl
 801cdec:	f002 020f 	andpl.w	r2, r2, #15
 801cdf0:	1112      	asrmi	r2, r2, #4
 801cdf2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cdf6:	b2d2      	uxtb	r2, r2
 801cdf8:	b1c2      	cbz	r2, 801ce2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801cdfa:	9d04      	ldr	r5, [sp, #16]
 801cdfc:	436a      	muls	r2, r5
 801cdfe:	1c55      	adds	r5, r2, #1
 801ce00:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ce04:	4d2d      	ldr	r5, [pc, #180]	@ (801cebc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ce06:	1212      	asrs	r2, r2, #8
 801ce08:	682e      	ldr	r6, [r5, #0]
 801ce0a:	2aff      	cmp	r2, #255	@ 0xff
 801ce0c:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801ce10:	d113      	bne.n	801ce3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ce12:	0972      	lsrs	r2, r6, #5
 801ce14:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801ce18:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801ce1c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ce20:	f025 0507 	bic.w	r5, r5, #7
 801ce24:	4315      	orrs	r5, r2
 801ce26:	4335      	orrs	r5, r6
 801ce28:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801ce2c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ce2e:	f108 0801 	add.w	r8, r8, #1
 801ce32:	4410      	add	r0, r2
 801ce34:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ce36:	4411      	add	r1, r2
 801ce38:	e7c9      	b.n	801cdce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ce3a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801ce3e:	fa1f fa82 	uxth.w	sl, r2
 801ce42:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801ce46:	43d2      	mvns	r2, r2
 801ce48:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ce4c:	fb17 f70a 	smulbb	r7, r7, sl
 801ce50:	b2d2      	uxtb	r2, r2
 801ce52:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ce56:	b2f6      	uxtb	r6, r6
 801ce58:	b2ed      	uxtb	r5, r5
 801ce5a:	fb0c 7c02 	mla	ip, ip, r2, r7
 801ce5e:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ce62:	fb16 f60a 	smulbb	r6, r6, sl
 801ce66:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ce6a:	fa1f fc8c 	uxth.w	ip, ip
 801ce6e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ce72:	fb15 f50a 	smulbb	r5, r5, sl
 801ce76:	fa5f fe8e 	uxtb.w	lr, lr
 801ce7a:	fb0e 6602 	mla	r6, lr, r2, r6
 801ce7e:	fb07 5702 	mla	r7, r7, r2, r5
 801ce82:	f10c 0201 	add.w	r2, ip, #1
 801ce86:	b2b6      	uxth	r6, r6
 801ce88:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801ce8c:	1c75      	adds	r5, r6, #1
 801ce8e:	b2bf      	uxth	r7, r7
 801ce90:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801ce94:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801ce98:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ce9c:	ea45 0c0c 	orr.w	ip, r5, ip
 801cea0:	1c7d      	adds	r5, r7, #1
 801cea2:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801cea6:	096d      	lsrs	r5, r5, #5
 801cea8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ceac:	ea4c 0c05 	orr.w	ip, ip, r5
 801ceb0:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801ceb4:	e7ba      	b.n	801ce2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ceb6:	b007      	add	sp, #28
 801ceb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cebc:	24006608 	.word	0x24006608

0801cec0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cec4:	b087      	sub	sp, #28
 801cec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ceca:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 801d1d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801cece:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ced0:	9101      	str	r1, [sp, #4]
 801ced2:	9205      	str	r2, [sp, #20]
 801ced4:	6841      	ldr	r1, [r0, #4]
 801ced6:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 801ceda:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801cede:	fb01 2404 	mla	r4, r1, r4, r2
 801cee2:	6802      	ldr	r2, [r0, #0]
 801cee4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cee8:	f8db 2008 	ldr.w	r2, [fp, #8]
 801ceec:	3201      	adds	r2, #1
 801ceee:	f022 0201 	bic.w	r2, r2, #1
 801cef2:	9202      	str	r2, [sp, #8]
 801cef4:	f8db 2000 	ldr.w	r2, [fp]
 801cef8:	9203      	str	r2, [sp, #12]
 801cefa:	9a01      	ldr	r2, [sp, #4]
 801cefc:	2a00      	cmp	r2, #0
 801cefe:	dc03      	bgt.n	801cf08 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cf00:	9a05      	ldr	r2, [sp, #20]
 801cf02:	2a00      	cmp	r2, #0
 801cf04:	f340 8162 	ble.w	801d1cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801cf08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cf0a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801cf0e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801cf12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cf14:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801cf18:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	dd0e      	ble.n	801cf3e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cf20:	1402      	asrs	r2, r0, #16
 801cf22:	d405      	bmi.n	801cf30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cf24:	42ba      	cmp	r2, r7
 801cf26:	da03      	bge.n	801cf30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cf28:	140a      	asrs	r2, r1, #16
 801cf2a:	d401      	bmi.n	801cf30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cf2c:	42b2      	cmp	r2, r6
 801cf2e:	db07      	blt.n	801cf40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cf30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cf32:	3b01      	subs	r3, #1
 801cf34:	3402      	adds	r4, #2
 801cf36:	4410      	add	r0, r2
 801cf38:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cf3a:	4411      	add	r1, r2
 801cf3c:	e7ee      	b.n	801cf1c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cf3e:	d017      	beq.n	801cf70 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801cf40:	1e5a      	subs	r2, r3, #1
 801cf42:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801cf44:	fb05 0502 	mla	r5, r5, r2, r0
 801cf48:	142d      	asrs	r5, r5, #16
 801cf4a:	d409      	bmi.n	801cf60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cf4c:	42bd      	cmp	r5, r7
 801cf4e:	da07      	bge.n	801cf60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cf50:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801cf52:	fb05 1202 	mla	r2, r5, r2, r1
 801cf56:	1412      	asrs	r2, r2, #16
 801cf58:	d402      	bmi.n	801cf60 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cf5a:	42b2      	cmp	r2, r6
 801cf5c:	f2c0 80c3 	blt.w	801d0e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801cf60:	2500      	movs	r5, #0
 801cf62:	195a      	adds	r2, r3, r5
 801cf64:	2a00      	cmp	r2, #0
 801cf66:	dc3f      	bgt.n	801cfe8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801cf68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cf6c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cf70:	9b01      	ldr	r3, [sp, #4]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	f340 812a 	ble.w	801d1cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801cf78:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cf7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf82:	eeb0 6a62 	vmov.f32	s12, s5
 801cf86:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cf8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf92:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801cf96:	eeb0 6a43 	vmov.f32	s12, s6
 801cf9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf9e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801cfa2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cfa6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cfaa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cfae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cfb2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cfb6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cfba:	ee12 2a90 	vmov	r2, s5
 801cfbe:	eef0 2a47 	vmov.f32	s5, s14
 801cfc2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cfc6:	ee13 2a10 	vmov	r2, s6
 801cfca:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cfcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cfce:	eeb0 3a67 	vmov.f32	s6, s15
 801cfd2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cfd6:	9314      	str	r3, [sp, #80]	@ 0x50
 801cfd8:	9b01      	ldr	r3, [sp, #4]
 801cfda:	9a05      	ldr	r2, [sp, #20]
 801cfdc:	3b01      	subs	r3, #1
 801cfde:	9301      	str	r3, [sp, #4]
 801cfe0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cfe2:	bf08      	it	eq
 801cfe4:	4613      	moveq	r3, r2
 801cfe6:	e788      	b.n	801cefa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cfe8:	1406      	asrs	r6, r0, #16
 801cfea:	d42c      	bmi.n	801d046 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cfec:	f8db 2008 	ldr.w	r2, [fp, #8]
 801cff0:	42b2      	cmp	r2, r6
 801cff2:	dd28      	ble.n	801d046 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cff4:	140f      	asrs	r7, r1, #16
 801cff6:	d426      	bmi.n	801d046 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cff8:	f8db 200c 	ldr.w	r2, [fp, #12]
 801cffc:	42ba      	cmp	r2, r7
 801cffe:	dd22      	ble.n	801d046 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d000:	9a02      	ldr	r2, [sp, #8]
 801d002:	fb07 6602 	mla	r6, r7, r2, r6
 801d006:	9f03      	ldr	r7, [sp, #12]
 801d008:	0872      	lsrs	r2, r6, #1
 801d00a:	07f6      	lsls	r6, r6, #31
 801d00c:	5cba      	ldrb	r2, [r7, r2]
 801d00e:	bf54      	ite	pl
 801d010:	f002 020f 	andpl.w	r2, r2, #15
 801d014:	1112      	asrmi	r2, r2, #4
 801d016:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d01a:	b2d2      	uxtb	r2, r2
 801d01c:	2aff      	cmp	r2, #255	@ 0xff
 801d01e:	d118      	bne.n	801d052 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801d020:	f06f 0601 	mvn.w	r6, #1
 801d024:	f8d8 2000 	ldr.w	r2, [r8]
 801d028:	fb06 f705 	mul.w	r7, r6, r5
 801d02c:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 801d030:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801d034:	0956      	lsrs	r6, r2, #5
 801d036:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801d03a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801d03e:	ea4c 0606 	orr.w	r6, ip, r6
 801d042:	4316      	orrs	r6, r2
 801d044:	53e6      	strh	r6, [r4, r7]
 801d046:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d048:	3d01      	subs	r5, #1
 801d04a:	4410      	add	r0, r2
 801d04c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d04e:	4411      	add	r1, r2
 801d050:	e787      	b.n	801cf62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d052:	2a00      	cmp	r2, #0
 801d054:	d0f7      	beq.n	801d046 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d056:	f06f 0601 	mvn.w	r6, #1
 801d05a:	f8d8 c000 	ldr.w	ip, [r8]
 801d05e:	fa1f f982 	uxth.w	r9, r2
 801d062:	43d2      	mvns	r2, r2
 801d064:	436e      	muls	r6, r5
 801d066:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801d06a:	b2d2      	uxtb	r2, r2
 801d06c:	f834 e006 	ldrh.w	lr, [r4, r6]
 801d070:	fb1a fa09 	smulbb	sl, sl, r9
 801d074:	9604      	str	r6, [sp, #16]
 801d076:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801d07a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801d07e:	fb16 f609 	smulbb	r6, r6, r9
 801d082:	fa5f fc8c 	uxtb.w	ip, ip
 801d086:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801d08a:	fb1c fc09 	smulbb	ip, ip, r9
 801d08e:	fb07 6702 	mla	r7, r7, r2, r6
 801d092:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d096:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d09a:	b2bf      	uxth	r7, r7
 801d09c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801d0a0:	fa5f fe8e 	uxtb.w	lr, lr
 801d0a4:	fb06 a602 	mla	r6, r6, r2, sl
 801d0a8:	fb0e cc02 	mla	ip, lr, r2, ip
 801d0ac:	1c7a      	adds	r2, r7, #1
 801d0ae:	b2b6      	uxth	r6, r6
 801d0b0:	fa1f fc8c 	uxth.w	ip, ip
 801d0b4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d0b8:	9a04      	ldr	r2, [sp, #16]
 801d0ba:	f10c 0a01 	add.w	sl, ip, #1
 801d0be:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801d0c2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801d0c6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d0ca:	ea4a 0707 	orr.w	r7, sl, r7
 801d0ce:	f106 0a01 	add.w	sl, r6, #1
 801d0d2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d0d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d0da:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d0de:	ea47 070a 	orr.w	r7, r7, sl
 801d0e2:	52a7      	strh	r7, [r4, r2]
 801d0e4:	e7af      	b.n	801d046 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801d0e6:	f04f 0e00 	mov.w	lr, #0
 801d0ea:	eba3 020e 	sub.w	r2, r3, lr
 801d0ee:	2a00      	cmp	r2, #0
 801d0f0:	f77f af3a 	ble.w	801cf68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801d0f4:	1402      	asrs	r2, r0, #16
 801d0f6:	9e02      	ldr	r6, [sp, #8]
 801d0f8:	140d      	asrs	r5, r1, #16
 801d0fa:	fb06 2505 	mla	r5, r6, r5, r2
 801d0fe:	9e03      	ldr	r6, [sp, #12]
 801d100:	086a      	lsrs	r2, r5, #1
 801d102:	07ed      	lsls	r5, r5, #31
 801d104:	5cb2      	ldrb	r2, [r6, r2]
 801d106:	bf54      	ite	pl
 801d108:	f002 020f 	andpl.w	r2, r2, #15
 801d10c:	1112      	asrmi	r2, r2, #4
 801d10e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d112:	b2d2      	uxtb	r2, r2
 801d114:	2aff      	cmp	r2, #255	@ 0xff
 801d116:	d115      	bne.n	801d144 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d118:	f8d8 5000 	ldr.w	r5, [r8]
 801d11c:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 801d120:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801d124:	096a      	lsrs	r2, r5, #5
 801d126:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d12a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801d12e:	4332      	orrs	r2, r6
 801d130:	432a      	orrs	r2, r5
 801d132:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801d136:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d138:	f10e 0e01 	add.w	lr, lr, #1
 801d13c:	4410      	add	r0, r2
 801d13e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d140:	4411      	add	r1, r2
 801d142:	e7d2      	b.n	801d0ea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d144:	2a00      	cmp	r2, #0
 801d146:	d0f6      	beq.n	801d136 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d148:	f8d8 7000 	ldr.w	r7, [r8]
 801d14c:	fa1f f982 	uxth.w	r9, r2
 801d150:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801d154:	43d2      	mvns	r2, r2
 801d156:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801d15a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d15e:	ea4f 262c 	mov.w	r6, ip, asr #8
 801d162:	fb15 f509 	smulbb	r5, r5, r9
 801d166:	b2d2      	uxtb	r2, r2
 801d168:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801d16c:	b2ff      	uxtb	r7, r7
 801d16e:	fb1a fa09 	smulbb	sl, sl, r9
 801d172:	fb06 5602 	mla	r6, r6, r2, r5
 801d176:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801d17a:	fb17 f709 	smulbb	r7, r7, r9
 801d17e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d182:	b2b6      	uxth	r6, r6
 801d184:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801d188:	fa5f fc8c 	uxtb.w	ip, ip
 801d18c:	fb05 a502 	mla	r5, r5, r2, sl
 801d190:	fb0c 7702 	mla	r7, ip, r2, r7
 801d194:	1c72      	adds	r2, r6, #1
 801d196:	b2ad      	uxth	r5, r5
 801d198:	b2bf      	uxth	r7, r7
 801d19a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801d19e:	f107 0a01 	add.w	sl, r7, #1
 801d1a2:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801d1a6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801d1aa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d1ae:	ea4a 0606 	orr.w	r6, sl, r6
 801d1b2:	f105 0a01 	add.w	sl, r5, #1
 801d1b6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d1ba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d1be:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801d1c2:	ea46 060a 	orr.w	r6, r6, sl
 801d1c6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801d1ca:	e7b4      	b.n	801d136 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d1cc:	b007      	add	sp, #28
 801d1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1d2:	bf00      	nop
 801d1d4:	24006608 	.word	0x24006608

0801d1d8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 801d1d8:	4770      	bx	lr

0801d1da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 801d1da:	4770      	bx	lr

0801d1dc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 801d1dc:	4770      	bx	lr

0801d1de <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 801d1de:	4770      	bx	lr

0801d1e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d1e0:	4770      	bx	lr

0801d1e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d1e2:	4770      	bx	lr

0801d1e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d1e4:	4770      	bx	lr

0801d1e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d1e6:	4770      	bx	lr

0801d1e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d1e8:	4770      	bx	lr

0801d1ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d1ea:	4770      	bx	lr

0801d1ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d1ec:	4770      	bx	lr

0801d1ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d1ee:	4770      	bx	lr

0801d1f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d1f0:	4770      	bx	lr

0801d1f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801d1f2:	4770      	bx	lr

0801d1f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d1f4:	4770      	bx	lr

0801d1f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d1f6:	4770      	bx	lr

0801d1f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d1f8:	4770      	bx	lr

0801d1fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801d1fa:	4770      	bx	lr

0801d1fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d1fc:	4770      	bx	lr

0801d1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d1fe:	4770      	bx	lr

0801d200 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d200:	4770      	bx	lr

0801d202 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d202:	4770      	bx	lr

0801d204 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d204:	4770      	bx	lr

0801d206 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d206:	4770      	bx	lr

0801d208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d208:	4770      	bx	lr

0801d20a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d20a:	4770      	bx	lr

0801d20c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d20c:	4770      	bx	lr

0801d20e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d20e:	4770      	bx	lr

0801d210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d210:	4770      	bx	lr

0801d212 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801d212:	4770      	bx	lr

0801d214 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d214:	4770      	bx	lr

0801d216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801d216:	4770      	bx	lr

0801d218 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d21c:	b088      	sub	sp, #32
 801d21e:	4606      	mov	r6, r0
 801d220:	4688      	mov	r8, r1
 801d222:	4691      	mov	r9, r2
 801d224:	ac08      	add	r4, sp, #32
 801d226:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801d22a:	4620      	mov	r0, r4
 801d22c:	f7fd fc32 	bl	801aa94 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d230:	6833      	ldr	r3, [r6, #0]
 801d232:	4605      	mov	r5, r0
 801d234:	4620      	mov	r0, r4
 801d236:	699f      	ldr	r7, [r3, #24]
 801d238:	f7fd fb3a 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d23c:	4682      	mov	sl, r0
 801d23e:	4620      	mov	r0, r4
 801d240:	f7fd fb6a 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d244:	9500      	str	r5, [sp, #0]
 801d246:	464b      	mov	r3, r9
 801d248:	4642      	mov	r2, r8
 801d24a:	4631      	mov	r1, r6
 801d24c:	e9cd a001 	strd	sl, r0, [sp, #4]
 801d250:	a806      	add	r0, sp, #24
 801d252:	47b8      	blx	r7
 801d254:	4628      	mov	r0, r5
 801d256:	b008      	add	sp, #32
 801d258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801d25c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801d25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d260:	2300      	movs	r3, #0
 801d262:	9300      	str	r3, [sp, #0]
 801d264:	4b3d      	ldr	r3, [pc, #244]	@ (801d35c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801d266:	781b      	ldrb	r3, [r3, #0]
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d137      	bne.n	801d2dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801d26c:	4a3c      	ldr	r2, [pc, #240]	@ (801d360 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d26e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801d272:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d276:	2b00      	cmp	r3, #0
 801d278:	d132      	bne.n	801d2e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801d27a:	4b3a      	ldr	r3, [pc, #232]	@ (801d364 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801d27c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d280:	ac02      	add	r4, sp, #8
 801d282:	6808      	ldr	r0, [r1, #0]
 801d284:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d288:	ab02      	add	r3, sp, #8
 801d28a:	6849      	ldr	r1, [r1, #4]
 801d28c:	4d36      	ldr	r5, [pc, #216]	@ (801d368 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801d28e:	c303      	stmia	r3!, {r0, r1}
 801d290:	4669      	mov	r1, sp
 801d292:	4620      	mov	r0, r4
 801d294:	f7f9 fdb2 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d298:	4668      	mov	r0, sp
 801d29a:	f7f9 fd6b 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d29e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d2a2:	f8bd 2000 	ldrh.w	r2, [sp]
 801d2a6:	462f      	mov	r7, r5
 801d2a8:	6828      	ldr	r0, [r5, #0]
 801d2aa:	4413      	add	r3, r2
 801d2ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d2b0:	f8ad 3008 	strh.w	r3, [sp, #8]
 801d2b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d2b8:	4413      	add	r3, r2
 801d2ba:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d2be:	6803      	ldr	r3, [r0, #0]
 801d2c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d2c2:	4798      	blx	r3
 801d2c4:	f010 0f01 	tst.w	r0, #1
 801d2c8:	d00c      	beq.n	801d2e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801d2ca:	6828      	ldr	r0, [r5, #0]
 801d2cc:	6803      	ldr	r3, [r0, #0]
 801d2ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 801d2d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d2d4:	4798      	blx	r3
 801d2d6:	b004      	add	sp, #16
 801d2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2dc:	4a21      	ldr	r2, [pc, #132]	@ (801d364 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801d2de:	e7c6      	b.n	801d26e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801d2e0:	4b1f      	ldr	r3, [pc, #124]	@ (801d360 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d2e2:	e7cb      	b.n	801d27c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801d2e4:	6838      	ldr	r0, [r7, #0]
 801d2e6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801d2ea:	6803      	ldr	r3, [r0, #0]
 801d2ec:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801d2f0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801d2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d2f6:	4798      	blx	r3
 801d2f8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801d2fc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d300:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801d304:	fb16 3602 	smlabb	r6, r6, r2, r3
 801d308:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d30c:	6838      	ldr	r0, [r7, #0]
 801d30e:	6803      	ldr	r3, [r0, #0]
 801d310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d312:	4798      	blx	r3
 801d314:	4a12      	ldr	r2, [pc, #72]	@ (801d360 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801d316:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801d31a:	8813      	ldrh	r3, [r2, #0]
 801d31c:	4691      	mov	r9, r2
 801d31e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801d322:	435d      	muls	r5, r3
 801d324:	fb03 1404 	mla	r4, r3, r4, r1
 801d328:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d32c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d330:	6838      	ldr	r0, [r7, #0]
 801d332:	42ac      	cmp	r4, r5
 801d334:	6803      	ldr	r3, [r0, #0]
 801d336:	d20e      	bcs.n	801d356 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801d338:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 801d33c:	4632      	mov	r2, r6
 801d33e:	4643      	mov	r3, r8
 801d340:	4621      	mov	r1, r4
 801d342:	47d0      	blx	sl
 801d344:	f8b9 3000 	ldrh.w	r3, [r9]
 801d348:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d34c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801d350:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d354:	e7ec      	b.n	801d330 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801d356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d358:	4798      	blx	r3
 801d35a:	e7bc      	b.n	801d2d6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801d35c:	240065f8 	.word	0x240065f8
 801d360:	240065fa 	.word	0x240065fa
 801d364:	240065fc 	.word	0x240065fc
 801d368:	24006600 	.word	0x24006600

0801d36c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d370:	b08b      	sub	sp, #44	@ 0x2c
 801d372:	460f      	mov	r7, r1
 801d374:	4616      	mov	r6, r2
 801d376:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 801d37a:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801d37e:	f1bb 0f00 	cmp.w	fp, #0
 801d382:	d04a      	beq.n	801d41a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801d384:	6810      	ldr	r0, [r2, #0]
 801d386:	ad06      	add	r5, sp, #24
 801d388:	6851      	ldr	r1, [r2, #4]
 801d38a:	c503      	stmia	r5!, {r0, r1}
 801d38c:	6818      	ldr	r0, [r3, #0]
 801d38e:	ad08      	add	r5, sp, #32
 801d390:	6859      	ldr	r1, [r3, #4]
 801d392:	c503      	stmia	r5!, {r0, r1}
 801d394:	a806      	add	r0, sp, #24
 801d396:	f7f9 fced 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d39a:	4631      	mov	r1, r6
 801d39c:	a808      	add	r0, sp, #32
 801d39e:	f7f9 fd2d 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3a2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d3a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801d3aa:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801d3ae:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801d3b2:	fb16 2103 	smlabb	r1, r6, r3, r2
 801d3b6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801d3ba:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801d3be:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d3c2:	4f5f      	ldr	r7, [pc, #380]	@ (801d540 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801d3c4:	440a      	add	r2, r1
 801d3c6:	6838      	ldr	r0, [r7, #0]
 801d3c8:	46b9      	mov	r9, r7
 801d3ca:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d3ce:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d3d2:	4413      	add	r3, r2
 801d3d4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801d3d8:	6803      	ldr	r3, [r0, #0]
 801d3da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d3dc:	4798      	blx	r3
 801d3de:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d3e2:	d11d      	bne.n	801d420 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801d3e4:	b9fc      	cbnz	r4, 801d426 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801d3e6:	f010 0f01 	tst.w	r0, #1
 801d3ea:	d01c      	beq.n	801d426 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801d3ec:	f8d9 0000 	ldr.w	r0, [r9]
 801d3f0:	2700      	movs	r7, #0
 801d3f2:	b2ad      	uxth	r5, r5
 801d3f4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801d3f8:	6801      	ldr	r1, [r0, #0]
 801d3fa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d3fe:	f8cd b00c 	str.w	fp, [sp, #12]
 801d402:	9501      	str	r5, [sp, #4]
 801d404:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801d408:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801d40c:	9402      	str	r4, [sp, #8]
 801d40e:	fa1f f488 	uxth.w	r4, r8
 801d412:	9400      	str	r4, [sp, #0]
 801d414:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 801d416:	4631      	mov	r1, r6
 801d418:	47a0      	blx	r4
 801d41a:	b00b      	add	sp, #44	@ 0x2c
 801d41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d420:	f010 0f04 	tst.w	r0, #4
 801d424:	e7e1      	b.n	801d3ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801d426:	f8d9 0000 	ldr.w	r0, [r9]
 801d42a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801d42e:	6803      	ldr	r3, [r0, #0]
 801d430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d432:	4798      	blx	r3
 801d434:	4b43      	ldr	r3, [pc, #268]	@ (801d544 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801d436:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801d43a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d43e:	881a      	ldrh	r2, [r3, #0]
 801d440:	469a      	mov	sl, r3
 801d442:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d446:	fb05 f502 	mul.w	r5, r5, r2
 801d44a:	fb02 1404 	mla	r4, r2, r4, r1
 801d44e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d452:	d059      	beq.n	801d508 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801d454:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 801d458:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d45c:	fa1f f28b 	uxth.w	r2, fp
 801d460:	469e      	mov	lr, r3
 801d462:	fa1f f989 	uxth.w	r9, r9
 801d466:	42ac      	cmp	r4, r5
 801d468:	d264      	bcs.n	801d534 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801d46a:	eb04 0a07 	add.w	sl, r4, r7
 801d46e:	4554      	cmp	r4, sl
 801d470:	d23d      	bcs.n	801d4ee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801d472:	8821      	ldrh	r1, [r4, #0]
 801d474:	f836 3b02 	ldrh.w	r3, [r6], #2
 801d478:	1208      	asrs	r0, r1, #8
 801d47a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d47e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801d482:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801d486:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801d48a:	00c9      	lsls	r1, r1, #3
 801d48c:	fb10 f009 	smulbb	r0, r0, r9
 801d490:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801d494:	b2c9      	uxtb	r1, r1
 801d496:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d49a:	10d8      	asrs	r0, r3, #3
 801d49c:	fb1b fb09 	smulbb	fp, fp, r9
 801d4a0:	00db      	lsls	r3, r3, #3
 801d4a2:	fa1f fc8c 	uxth.w	ip, ip
 801d4a6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801d4aa:	fb11 f109 	smulbb	r1, r1, r9
 801d4ae:	b2db      	uxtb	r3, r3
 801d4b0:	fb00 b002 	mla	r0, r0, r2, fp
 801d4b4:	f10c 0b01 	add.w	fp, ip, #1
 801d4b8:	fb03 1302 	mla	r3, r3, r2, r1
 801d4bc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d4c0:	b29b      	uxth	r3, r3
 801d4c2:	b280      	uxth	r0, r0
 801d4c4:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 801d4c8:	f103 0c01 	add.w	ip, r3, #1
 801d4cc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d4d0:	1c43      	adds	r3, r0, #1
 801d4d2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d4d6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d4da:	0940      	lsrs	r0, r0, #5
 801d4dc:	ea4c 0c0b 	orr.w	ip, ip, fp
 801d4e0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801d4e4:	ea4c 0c00 	orr.w	ip, ip, r0
 801d4e8:	f824 cb02 	strh.w	ip, [r4], #2
 801d4ec:	e7bf      	b.n	801d46e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801d4ee:	f8be 3000 	ldrh.w	r3, [lr]
 801d4f2:	eba3 0308 	sub.w	r3, r3, r8
 801d4f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d4fa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d4fe:	eba3 0308 	sub.w	r3, r3, r8
 801d502:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d506:	e7ae      	b.n	801d466 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801d508:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801d50c:	f8d9 0000 	ldr.w	r0, [r9]
 801d510:	42ac      	cmp	r4, r5
 801d512:	6803      	ldr	r3, [r0, #0]
 801d514:	d20e      	bcs.n	801d534 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801d516:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 801d51a:	4632      	mov	r2, r6
 801d51c:	463b      	mov	r3, r7
 801d51e:	4621      	mov	r1, r4
 801d520:	47c0      	blx	r8
 801d522:	f8ba 3000 	ldrh.w	r3, [sl]
 801d526:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d52a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d52e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801d532:	e7eb      	b.n	801d50c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801d534:	4b02      	ldr	r3, [pc, #8]	@ (801d540 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801d536:	6818      	ldr	r0, [r3, #0]
 801d538:	6803      	ldr	r3, [r0, #0]
 801d53a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d53c:	4798      	blx	r3
 801d53e:	e76c      	b.n	801d41a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801d540:	24006600 	.word	0x24006600
 801d544:	240065fa 	.word	0x240065fa

0801d548 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 801d548:	b510      	push	{r4, lr}
 801d54a:	4604      	mov	r4, r0
 801d54c:	2104      	movs	r1, #4
 801d54e:	f00b fcee 	bl	8028f2e <_ZdlPvj>
 801d552:	4620      	mov	r0, r4
 801d554:	bd10      	pop	{r4, pc}

0801d556 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 801d556:	b510      	push	{r4, lr}
 801d558:	4604      	mov	r4, r0
 801d55a:	2104      	movs	r1, #4
 801d55c:	f00b fce7 	bl	8028f2e <_ZdlPvj>
 801d560:	4620      	mov	r0, r4
 801d562:	bd10      	pop	{r4, pc}

0801d564 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 801d564:	b510      	push	{r4, lr}
 801d566:	4604      	mov	r4, r0
 801d568:	f640 0144 	movw	r1, #2116	@ 0x844
 801d56c:	f00b fcdf 	bl	8028f2e <_ZdlPvj>
 801d570:	4620      	mov	r0, r4
 801d572:	bd10      	pop	{r4, pc}

0801d574 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 801d574:	b510      	push	{r4, lr}
 801d576:	4604      	mov	r4, r0
 801d578:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801d57c:	f00b fcd7 	bl	8028f2e <_ZdlPvj>
 801d580:	4620      	mov	r0, r4
 801d582:	bd10      	pop	{r4, pc}

0801d584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d584:	b510      	push	{r4, lr}
 801d586:	4604      	mov	r4, r0
 801d588:	2104      	movs	r1, #4
 801d58a:	f00b fcd0 	bl	8028f2e <_ZdlPvj>
 801d58e:	4620      	mov	r0, r4
 801d590:	bd10      	pop	{r4, pc}

0801d592 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801d592:	b510      	push	{r4, lr}
 801d594:	4604      	mov	r4, r0
 801d596:	2104      	movs	r1, #4
 801d598:	f00b fcc9 	bl	8028f2e <_ZdlPvj>
 801d59c:	4620      	mov	r0, r4
 801d59e:	bd10      	pop	{r4, pc}

0801d5a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d5a0:	b510      	push	{r4, lr}
 801d5a2:	4604      	mov	r4, r0
 801d5a4:	2104      	movs	r1, #4
 801d5a6:	f00b fcc2 	bl	8028f2e <_ZdlPvj>
 801d5aa:	4620      	mov	r0, r4
 801d5ac:	bd10      	pop	{r4, pc}

0801d5ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801d5ae:	b510      	push	{r4, lr}
 801d5b0:	4604      	mov	r4, r0
 801d5b2:	2104      	movs	r1, #4
 801d5b4:	f00b fcbb 	bl	8028f2e <_ZdlPvj>
 801d5b8:	4620      	mov	r0, r4
 801d5ba:	bd10      	pop	{r4, pc}

0801d5bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d5bc:	b510      	push	{r4, lr}
 801d5be:	4604      	mov	r4, r0
 801d5c0:	2104      	movs	r1, #4
 801d5c2:	f00b fcb4 	bl	8028f2e <_ZdlPvj>
 801d5c6:	4620      	mov	r0, r4
 801d5c8:	bd10      	pop	{r4, pc}

0801d5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d5ca:	b510      	push	{r4, lr}
 801d5cc:	4604      	mov	r4, r0
 801d5ce:	2104      	movs	r1, #4
 801d5d0:	f00b fcad 	bl	8028f2e <_ZdlPvj>
 801d5d4:	4620      	mov	r0, r4
 801d5d6:	bd10      	pop	{r4, pc}

0801d5d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d5d8:	b510      	push	{r4, lr}
 801d5da:	4604      	mov	r4, r0
 801d5dc:	2104      	movs	r1, #4
 801d5de:	f00b fca6 	bl	8028f2e <_ZdlPvj>
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	bd10      	pop	{r4, pc}

0801d5e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d5e6:	b510      	push	{r4, lr}
 801d5e8:	4604      	mov	r4, r0
 801d5ea:	2104      	movs	r1, #4
 801d5ec:	f00b fc9f 	bl	8028f2e <_ZdlPvj>
 801d5f0:	4620      	mov	r0, r4
 801d5f2:	bd10      	pop	{r4, pc}

0801d5f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d5f4:	b510      	push	{r4, lr}
 801d5f6:	4604      	mov	r4, r0
 801d5f8:	2104      	movs	r1, #4
 801d5fa:	f00b fc98 	bl	8028f2e <_ZdlPvj>
 801d5fe:	4620      	mov	r0, r4
 801d600:	bd10      	pop	{r4, pc}

0801d602 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d602:	b510      	push	{r4, lr}
 801d604:	4604      	mov	r4, r0
 801d606:	2104      	movs	r1, #4
 801d608:	f00b fc91 	bl	8028f2e <_ZdlPvj>
 801d60c:	4620      	mov	r0, r4
 801d60e:	bd10      	pop	{r4, pc}

0801d610 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d610:	b510      	push	{r4, lr}
 801d612:	4604      	mov	r4, r0
 801d614:	2104      	movs	r1, #4
 801d616:	f00b fc8a 	bl	8028f2e <_ZdlPvj>
 801d61a:	4620      	mov	r0, r4
 801d61c:	bd10      	pop	{r4, pc}

0801d61e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d61e:	b510      	push	{r4, lr}
 801d620:	4604      	mov	r4, r0
 801d622:	2104      	movs	r1, #4
 801d624:	f00b fc83 	bl	8028f2e <_ZdlPvj>
 801d628:	4620      	mov	r0, r4
 801d62a:	bd10      	pop	{r4, pc}

0801d62c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d62c:	b510      	push	{r4, lr}
 801d62e:	4604      	mov	r4, r0
 801d630:	2104      	movs	r1, #4
 801d632:	f00b fc7c 	bl	8028f2e <_ZdlPvj>
 801d636:	4620      	mov	r0, r4
 801d638:	bd10      	pop	{r4, pc}

0801d63a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801d63a:	b510      	push	{r4, lr}
 801d63c:	4604      	mov	r4, r0
 801d63e:	2104      	movs	r1, #4
 801d640:	f00b fc75 	bl	8028f2e <_ZdlPvj>
 801d644:	4620      	mov	r0, r4
 801d646:	bd10      	pop	{r4, pc}

0801d648 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d648:	b510      	push	{r4, lr}
 801d64a:	4604      	mov	r4, r0
 801d64c:	2104      	movs	r1, #4
 801d64e:	f00b fc6e 	bl	8028f2e <_ZdlPvj>
 801d652:	4620      	mov	r0, r4
 801d654:	bd10      	pop	{r4, pc}

0801d656 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d656:	b510      	push	{r4, lr}
 801d658:	4604      	mov	r4, r0
 801d65a:	2104      	movs	r1, #4
 801d65c:	f00b fc67 	bl	8028f2e <_ZdlPvj>
 801d660:	4620      	mov	r0, r4
 801d662:	bd10      	pop	{r4, pc}

0801d664 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d664:	b510      	push	{r4, lr}
 801d666:	4604      	mov	r4, r0
 801d668:	2104      	movs	r1, #4
 801d66a:	f00b fc60 	bl	8028f2e <_ZdlPvj>
 801d66e:	4620      	mov	r0, r4
 801d670:	bd10      	pop	{r4, pc}

0801d672 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801d672:	b510      	push	{r4, lr}
 801d674:	4604      	mov	r4, r0
 801d676:	2104      	movs	r1, #4
 801d678:	f00b fc59 	bl	8028f2e <_ZdlPvj>
 801d67c:	4620      	mov	r0, r4
 801d67e:	bd10      	pop	{r4, pc}

0801d680 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d680:	b510      	push	{r4, lr}
 801d682:	4604      	mov	r4, r0
 801d684:	2104      	movs	r1, #4
 801d686:	f00b fc52 	bl	8028f2e <_ZdlPvj>
 801d68a:	4620      	mov	r0, r4
 801d68c:	bd10      	pop	{r4, pc}

0801d68e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d68e:	b510      	push	{r4, lr}
 801d690:	4604      	mov	r4, r0
 801d692:	2104      	movs	r1, #4
 801d694:	f00b fc4b 	bl	8028f2e <_ZdlPvj>
 801d698:	4620      	mov	r0, r4
 801d69a:	bd10      	pop	{r4, pc}

0801d69c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d69c:	b510      	push	{r4, lr}
 801d69e:	4604      	mov	r4, r0
 801d6a0:	2104      	movs	r1, #4
 801d6a2:	f00b fc44 	bl	8028f2e <_ZdlPvj>
 801d6a6:	4620      	mov	r0, r4
 801d6a8:	bd10      	pop	{r4, pc}

0801d6aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d6aa:	b510      	push	{r4, lr}
 801d6ac:	4604      	mov	r4, r0
 801d6ae:	2104      	movs	r1, #4
 801d6b0:	f00b fc3d 	bl	8028f2e <_ZdlPvj>
 801d6b4:	4620      	mov	r0, r4
 801d6b6:	bd10      	pop	{r4, pc}

0801d6b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d6b8:	b510      	push	{r4, lr}
 801d6ba:	4604      	mov	r4, r0
 801d6bc:	2104      	movs	r1, #4
 801d6be:	f00b fc36 	bl	8028f2e <_ZdlPvj>
 801d6c2:	4620      	mov	r0, r4
 801d6c4:	bd10      	pop	{r4, pc}

0801d6c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d6c6:	b510      	push	{r4, lr}
 801d6c8:	4604      	mov	r4, r0
 801d6ca:	2104      	movs	r1, #4
 801d6cc:	f00b fc2f 	bl	8028f2e <_ZdlPvj>
 801d6d0:	4620      	mov	r0, r4
 801d6d2:	bd10      	pop	{r4, pc}

0801d6d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d6d4:	b510      	push	{r4, lr}
 801d6d6:	4604      	mov	r4, r0
 801d6d8:	2104      	movs	r1, #4
 801d6da:	f00b fc28 	bl	8028f2e <_ZdlPvj>
 801d6de:	4620      	mov	r0, r4
 801d6e0:	bd10      	pop	{r4, pc}

0801d6e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d6e2:	b510      	push	{r4, lr}
 801d6e4:	4604      	mov	r4, r0
 801d6e6:	2104      	movs	r1, #4
 801d6e8:	f00b fc21 	bl	8028f2e <_ZdlPvj>
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	bd10      	pop	{r4, pc}

0801d6f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d6f0:	b510      	push	{r4, lr}
 801d6f2:	4604      	mov	r4, r0
 801d6f4:	2104      	movs	r1, #4
 801d6f6:	f00b fc1a 	bl	8028f2e <_ZdlPvj>
 801d6fa:	4620      	mov	r0, r4
 801d6fc:	bd10      	pop	{r4, pc}

0801d6fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d6fe:	b510      	push	{r4, lr}
 801d700:	4604      	mov	r4, r0
 801d702:	2104      	movs	r1, #4
 801d704:	f00b fc13 	bl	8028f2e <_ZdlPvj>
 801d708:	4620      	mov	r0, r4
 801d70a:	bd10      	pop	{r4, pc}

0801d70c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801d70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d710:	b08f      	sub	sp, #60	@ 0x3c
 801d712:	4616      	mov	r6, r2
 801d714:	4682      	mov	sl, r0
 801d716:	460d      	mov	r5, r1
 801d718:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801d71c:	9205      	str	r2, [sp, #20]
 801d71e:	2a00      	cmp	r2, #0
 801d720:	f000 82b7 	beq.w	801dc92 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 801d724:	6830      	ldr	r0, [r6, #0]
 801d726:	ac0a      	add	r4, sp, #40	@ 0x28
 801d728:	6871      	ldr	r1, [r6, #4]
 801d72a:	c403      	stmia	r4!, {r0, r1}
 801d72c:	6818      	ldr	r0, [r3, #0]
 801d72e:	ac0c      	add	r4, sp, #48	@ 0x30
 801d730:	6859      	ldr	r1, [r3, #4]
 801d732:	c403      	stmia	r4!, {r0, r1}
 801d734:	a80a      	add	r0, sp, #40	@ 0x28
 801d736:	f7f9 fb1d 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d73a:	4631      	mov	r1, r6
 801d73c:	a80c      	add	r0, sp, #48	@ 0x30
 801d73e:	f7f9 fb5d 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d742:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801d746:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801d74a:	bfdb      	ittet	le
 801d74c:	b293      	uxthle	r3, r2
 801d74e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d752:	2301      	movgt	r3, #1
 801d754:	fb91 f3f3 	sdivle	r3, r1, r3
 801d758:	9300      	str	r3, [sp, #0]
 801d75a:	f105 0308 	add.w	r3, r5, #8
 801d75e:	9900      	ldr	r1, [sp, #0]
 801d760:	9306      	str	r3, [sp, #24]
 801d762:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801d766:	440b      	add	r3, r1
 801d768:	3b01      	subs	r3, #1
 801d76a:	fb93 f3f1 	sdiv	r3, r3, r1
 801d76e:	3b01      	subs	r3, #1
 801d770:	9906      	ldr	r1, [sp, #24]
 801d772:	b29b      	uxth	r3, r3
 801d774:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d778:	9900      	ldr	r1, [sp, #0]
 801d77a:	9307      	str	r3, [sp, #28]
 801d77c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801d780:	fb93 f0f1 	sdiv	r0, r3, r1
 801d784:	b284      	uxth	r4, r0
 801d786:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801d78a:	9402      	str	r4, [sp, #8]
 801d78c:	9d02      	ldr	r5, [sp, #8]
 801d78e:	9c00      	ldr	r4, [sp, #0]
 801d790:	fb05 3414 	mls	r4, r5, r4, r3
 801d794:	fb14 f402 	smulbb	r4, r4, r2
 801d798:	440c      	add	r4, r1
 801d79a:	b2a4      	uxth	r4, r4
 801d79c:	2d00      	cmp	r5, #0
 801d79e:	d06c      	beq.n	801d87a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 801d7a0:	1e6a      	subs	r2, r5, #1
 801d7a2:	9806      	ldr	r0, [sp, #24]
 801d7a4:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 801d7a8:	9a07      	ldr	r2, [sp, #28]
 801d7aa:	ba36      	rev	r6, r6
 801d7ac:	4416      	add	r6, r2
 801d7ae:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801d7b2:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801d7b6:	4411      	add	r1, r2
 801d7b8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801d7bc:	f8df 932c 	ldr.w	r9, [pc, #812]	@ 801daec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 801d7c0:	4413      	add	r3, r2
 801d7c2:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801d7c6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d7ca:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801d7ce:	9301      	str	r3, [sp, #4]
 801d7d0:	4bc4      	ldr	r3, [pc, #784]	@ (801dae4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 801d7d2:	6818      	ldr	r0, [r3, #0]
 801d7d4:	6803      	ldr	r3, [r0, #0]
 801d7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d7d8:	4798      	blx	r3
 801d7da:	4bc3      	ldr	r3, [pc, #780]	@ (801dae8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 801d7dc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801d7e0:	881b      	ldrh	r3, [r3, #0]
 801d7e2:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 801d7e6:	fb03 2808 	mla	r8, r3, r8, r2
 801d7ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d7ee:	436b      	muls	r3, r5
 801d7f0:	2500      	movs	r5, #0
 801d7f2:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 801d7f6:	4629      	mov	r1, r5
 801d7f8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801d7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7fe:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801d802:	fb94 f3f3 	sdiv	r3, r4, r3
 801d806:	9304      	str	r3, [sp, #16]
 801d808:	f10a 0304 	add.w	r3, sl, #4
 801d80c:	4618      	mov	r0, r3
 801d80e:	9308      	str	r3, [sp, #32]
 801d810:	f00b ff73 	bl	80296fa <memset>
 801d814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d816:	4543      	cmp	r3, r8
 801d818:	f240 8236 	bls.w	801dc88 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 801d81c:	2203      	movs	r2, #3
 801d81e:	2107      	movs	r1, #7
 801d820:	200b      	movs	r0, #11
 801d822:	2c00      	cmp	r4, #0
 801d824:	f000 8131 	beq.w	801da8a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 801d828:	7833      	ldrb	r3, [r6, #0]
 801d82a:	b2db      	uxtb	r3, r3
 801d82c:	2bfe      	cmp	r3, #254	@ 0xfe
 801d82e:	d126      	bne.n	801d87e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 801d830:	f896 e001 	ldrb.w	lr, [r6, #1]
 801d834:	3c01      	subs	r4, #1
 801d836:	f896 c002 	ldrb.w	ip, [r6, #2]
 801d83a:	1d37      	adds	r7, r6, #4
 801d83c:	fa5f fe8e 	uxtb.w	lr, lr
 801d840:	f896 b003 	ldrb.w	fp, [r6, #3]
 801d844:	fa5f fc8c 	uxtb.w	ip, ip
 801d848:	f36e 0507 	bfi	r5, lr, #0, #8
 801d84c:	fa5f fb8b 	uxtb.w	fp, fp
 801d850:	b2a4      	uxth	r4, r4
 801d852:	f36c 250f 	bfi	r5, ip, #8, #8
 801d856:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801d85a:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 801d85e:	f36b 4517 	bfi	r5, fp, #16, #8
 801d862:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801d866:	0e2b      	lsrs	r3, r5, #24
 801d868:	fb10 c303 	smlabb	r3, r0, r3, ip
 801d86c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d870:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801d874:	605d      	str	r5, [r3, #4]
 801d876:	463e      	mov	r6, r7
 801d878:	e7d3      	b.n	801d822 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 801d87a:	9e07      	ldr	r6, [sp, #28]
 801d87c:	e797      	b.n	801d7ae <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 801d87e:	2bff      	cmp	r3, #255	@ 0xff
 801d880:	d127      	bne.n	801d8d2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 801d882:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d886:	3c01      	subs	r4, #1
 801d888:	78b3      	ldrb	r3, [r6, #2]
 801d88a:	1d77      	adds	r7, r6, #5
 801d88c:	fa5f fc8c 	uxtb.w	ip, ip
 801d890:	f896 e003 	ldrb.w	lr, [r6, #3]
 801d894:	b2db      	uxtb	r3, r3
 801d896:	f896 b004 	ldrb.w	fp, [r6, #4]
 801d89a:	f36c 0507 	bfi	r5, ip, #0, #8
 801d89e:	fa5f fe8e 	uxtb.w	lr, lr
 801d8a2:	fa5f fb8b 	uxtb.w	fp, fp
 801d8a6:	f363 250f 	bfi	r5, r3, #8, #8
 801d8aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d8ae:	b2a4      	uxth	r4, r4
 801d8b0:	fb12 330e 	smlabb	r3, r2, lr, r3
 801d8b4:	f36e 4517 	bfi	r5, lr, #16, #8
 801d8b8:	fb11 330c 	smlabb	r3, r1, ip, r3
 801d8bc:	f36b 651f 	bfi	r5, fp, #24, #8
 801d8c0:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 801d8c4:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 801d8c8:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 801d8cc:	f8cb 5004 	str.w	r5, [fp, #4]
 801d8d0:	e7d1      	b.n	801d876 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801d8d2:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 801d8d6:	f106 0701 	add.w	r7, r6, #1
 801d8da:	d107      	bne.n	801d8ec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 801d8dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d8e0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801d8e4:	685d      	ldr	r5, [r3, #4]
 801d8e6:	3c01      	subs	r4, #1
 801d8e8:	b2a4      	uxth	r4, r4
 801d8ea:	e7c4      	b.n	801d876 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801d8ec:	f1bc 0f01 	cmp.w	ip, #1
 801d8f0:	d12c      	bne.n	801d94c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 801d8f2:	f003 0e03 	and.w	lr, r3, #3
 801d8f6:	f003 0c0c 	and.w	ip, r3, #12
 801d8fa:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d8fe:	f1ae 0e02 	sub.w	lr, lr, #2
 801d902:	f1ac 0c08 	sub.w	ip, ip, #8
 801d906:	3b02      	subs	r3, #2
 801d908:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 801d90c:	fa5f fe8e 	uxtb.w	lr, lr
 801d910:	f36e 0507 	bfi	r5, lr, #0, #8
 801d914:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801d918:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801d91c:	f36c 250f 	bfi	r5, ip, #8, #8
 801d920:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 801d924:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d928:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801d92c:	b2db      	uxtb	r3, r3
 801d92e:	fb12 cc03 	smlabb	ip, r2, r3, ip
 801d932:	f363 4517 	bfi	r5, r3, #16, #8
 801d936:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 801d93a:	0e2e      	lsrs	r6, r5, #24
 801d93c:	fb10 c606 	smlabb	r6, r0, r6, ip
 801d940:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 801d944:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 801d948:	6075      	str	r5, [r6, #4]
 801d94a:	e7cc      	b.n	801d8e6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 801d94c:	f1bc 0f02 	cmp.w	ip, #2
 801d950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d954:	d12a      	bne.n	801d9ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 801d956:	1cb7      	adds	r7, r6, #2
 801d958:	7876      	ldrb	r6, [r6, #1]
 801d95a:	3b20      	subs	r3, #32
 801d95c:	b2f6      	uxtb	r6, r6
 801d95e:	f006 0c0f 	and.w	ip, r6, #15
 801d962:	1136      	asrs	r6, r6, #4
 801d964:	f1ac 0c08 	sub.w	ip, ip, #8
 801d968:	3e08      	subs	r6, #8
 801d96a:	449c      	add	ip, r3
 801d96c:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 801d970:	fa5f fc8c 	uxtb.w	ip, ip
 801d974:	f36c 0507 	bfi	r5, ip, #0, #8
 801d978:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801d97c:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 801d980:	4433      	add	r3, r6
 801d982:	fa5f fe8e 	uxtb.w	lr, lr
 801d986:	f36e 250f 	bfi	r5, lr, #8, #8
 801d98a:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 801d98e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d992:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801d996:	b2db      	uxtb	r3, r3
 801d998:	fb12 ee03 	smlabb	lr, r2, r3, lr
 801d99c:	f363 4517 	bfi	r5, r3, #16, #8
 801d9a0:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 801d9a4:	0e2e      	lsrs	r6, r5, #24
 801d9a6:	fb10 e606 	smlabb	r6, r0, r6, lr
 801d9aa:	e7c9      	b.n	801d940 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 801d9ac:	1c5e      	adds	r6, r3, #1
 801d9ae:	42a6      	cmp	r6, r4
 801d9b0:	dd4e      	ble.n	801da50 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 801d9b2:	1b36      	subs	r6, r6, r4
 801d9b4:	2e00      	cmp	r6, #0
 801d9b6:	dc4e      	bgt.n	801da56 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 801d9b8:	f8dd b004 	ldr.w	fp, [sp, #4]
 801d9bc:	2400      	movs	r4, #0
 801d9be:	f1bb 0f00 	cmp.w	fp, #0
 801d9c2:	f340 8122 	ble.w	801dc0a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 801d9c6:	1c7b      	adds	r3, r7, #1
 801d9c8:	9303      	str	r3, [sp, #12]
 801d9ca:	783b      	ldrb	r3, [r7, #0]
 801d9cc:	b2db      	uxtb	r3, r3
 801d9ce:	2bfe      	cmp	r3, #254	@ 0xfe
 801d9d0:	d160      	bne.n	801da94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 801d9d2:	7879      	ldrb	r1, [r7, #1]
 801d9d4:	1d3b      	adds	r3, r7, #4
 801d9d6:	78ba      	ldrb	r2, [r7, #2]
 801d9d8:	b2c9      	uxtb	r1, r1
 801d9da:	78f8      	ldrb	r0, [r7, #3]
 801d9dc:	b2d2      	uxtb	r2, r2
 801d9de:	9303      	str	r3, [sp, #12]
 801d9e0:	f361 0507 	bfi	r5, r1, #0, #8
 801d9e4:	b2c0      	uxtb	r0, r0
 801d9e6:	2303      	movs	r3, #3
 801d9e8:	f362 250f 	bfi	r5, r2, #8, #8
 801d9ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d9f0:	fb13 2200 	smlabb	r2, r3, r0, r2
 801d9f4:	f360 4517 	bfi	r5, r0, #16, #8
 801d9f8:	2307      	movs	r3, #7
 801d9fa:	0e2e      	lsrs	r6, r5, #24
 801d9fc:	fb13 2101 	smlabb	r1, r3, r1, r2
 801da00:	230b      	movs	r3, #11
 801da02:	fb13 1306 	smlabb	r3, r3, r6, r1
 801da06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801da0a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801da0e:	605d      	str	r5, [r3, #4]
 801da10:	2601      	movs	r6, #1
 801da12:	4637      	mov	r7, r6
 801da14:	0e2b      	lsrs	r3, r5, #24
 801da16:	ebab 0b07 	sub.w	fp, fp, r7
 801da1a:	eba6 0607 	sub.w	r6, r6, r7
 801da1e:	f040 80d3 	bne.w	801dbc8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 801da22:	b18c      	cbz	r4, 801da48 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 801da24:	4648      	mov	r0, r9
 801da26:	00a1      	lsls	r1, r4, #2
 801da28:	f7f3 f93a 	bl	8010ca0 <_ZN8touchgfx5paint9flushLineEPmi>
 801da2c:	9b05      	ldr	r3, [sp, #20]
 801da2e:	4622      	mov	r2, r4
 801da30:	4649      	mov	r1, r9
 801da32:	4640      	mov	r0, r8
 801da34:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801da38:	f7f3 f9bc 	bl	8010db4 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801da3c:	4b2b      	ldr	r3, [pc, #172]	@ (801daec <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 801da3e:	4a2c      	ldr	r2, [pc, #176]	@ (801daf0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 801da40:	4599      	cmp	r9, r3
 801da42:	bf08      	it	eq
 801da44:	4613      	moveq	r3, r2
 801da46:	4699      	mov	r9, r3
 801da48:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 801da4c:	2400      	movs	r4, #0
 801da4e:	e0da      	b.n	801dc06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 801da50:	1ba6      	subs	r6, r4, r6
 801da52:	b2b4      	uxth	r4, r6
 801da54:	e70f      	b.n	801d876 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 801da56:	9b01      	ldr	r3, [sp, #4]
 801da58:	9a01      	ldr	r2, [sp, #4]
 801da5a:	42b3      	cmp	r3, r6
 801da5c:	bfa8      	it	ge
 801da5e:	4633      	movge	r3, r6
 801da60:	0e2c      	lsrs	r4, r5, #24
 801da62:	eba2 0b03 	sub.w	fp, r2, r3
 801da66:	eba6 0603 	sub.w	r6, r6, r3
 801da6a:	d00b      	beq.n	801da84 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 801da6c:	f1a9 0104 	sub.w	r1, r9, #4
 801da70:	461a      	mov	r2, r3
 801da72:	2a00      	cmp	r2, #0
 801da74:	dc02      	bgt.n	801da7c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 801da76:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801da7a:	e7a0      	b.n	801d9be <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801da7c:	f841 5f04 	str.w	r5, [r1, #4]!
 801da80:	3a01      	subs	r2, #1
 801da82:	e7f6      	b.n	801da72 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 801da84:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801da88:	e799      	b.n	801d9be <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801da8a:	4637      	mov	r7, r6
 801da8c:	f8dd b004 	ldr.w	fp, [sp, #4]
 801da90:	4626      	mov	r6, r4
 801da92:	e794      	b.n	801d9be <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801da94:	2bff      	cmp	r3, #255	@ 0xff
 801da96:	d11d      	bne.n	801dad4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 801da98:	7878      	ldrb	r0, [r7, #1]
 801da9a:	1d7b      	adds	r3, r7, #5
 801da9c:	78ba      	ldrb	r2, [r7, #2]
 801da9e:	b2c0      	uxtb	r0, r0
 801daa0:	78fe      	ldrb	r6, [r7, #3]
 801daa2:	b2d2      	uxtb	r2, r2
 801daa4:	9303      	str	r3, [sp, #12]
 801daa6:	f360 0507 	bfi	r5, r0, #0, #8
 801daaa:	793b      	ldrb	r3, [r7, #4]
 801daac:	b2f6      	uxtb	r6, r6
 801daae:	b2d9      	uxtb	r1, r3
 801dab0:	f362 250f 	bfi	r5, r2, #8, #8
 801dab4:	2303      	movs	r3, #3
 801dab6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801daba:	f366 4517 	bfi	r5, r6, #16, #8
 801dabe:	fb13 2206 	smlabb	r2, r3, r6, r2
 801dac2:	2307      	movs	r3, #7
 801dac4:	f361 651f 	bfi	r5, r1, #24, #8
 801dac8:	fb13 2000 	smlabb	r0, r3, r0, r2
 801dacc:	230b      	movs	r3, #11
 801dace:	fb13 0301 	smlabb	r3, r3, r1, r0
 801dad2:	e798      	b.n	801da06 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 801dad4:	119e      	asrs	r6, r3, #6
 801dad6:	d10d      	bne.n	801daf4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801dad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dadc:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801dae0:	685d      	ldr	r5, [r3, #4]
 801dae2:	e795      	b.n	801da10 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801dae4:	24006600 	.word	0x24006600
 801dae8:	240065fa 	.word	0x240065fa
 801daec:	24000100 	.word	0x24000100
 801daf0:	24000200 	.word	0x24000200
 801daf4:	2e01      	cmp	r6, #1
 801daf6:	ea4f 6115 	mov.w	r1, r5, lsr #24
 801dafa:	d12b      	bne.n	801db54 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 801dafc:	f003 0003 	and.w	r0, r3, #3
 801db00:	f003 020c 	and.w	r2, r3, #12
 801db04:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801db08:	3802      	subs	r0, #2
 801db0a:	3a08      	subs	r2, #8
 801db0c:	1e9f      	subs	r7, r3, #2
 801db0e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 801db12:	b2c0      	uxtb	r0, r0
 801db14:	f360 0507 	bfi	r5, r0, #0, #8
 801db18:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801db1c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801db20:	f362 250f 	bfi	r5, r2, #8, #8
 801db24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801db28:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801db2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801db30:	2703      	movs	r7, #3
 801db32:	b2db      	uxtb	r3, r3
 801db34:	fb17 2203 	smlabb	r2, r7, r3, r2
 801db38:	2707      	movs	r7, #7
 801db3a:	f363 4517 	bfi	r5, r3, #16, #8
 801db3e:	230b      	movs	r3, #11
 801db40:	fb17 2000 	smlabb	r0, r7, r0, r2
 801db44:	fb13 0101 	smlabb	r1, r3, r1, r0
 801db48:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801db4c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801db50:	604d      	str	r5, [r1, #4]
 801db52:	e75e      	b.n	801da12 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801db54:	2e02      	cmp	r6, #2
 801db56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801db5a:	d12f      	bne.n	801dbbc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 801db5c:	7878      	ldrb	r0, [r7, #1]
 801db5e:	1cba      	adds	r2, r7, #2
 801db60:	3b20      	subs	r3, #32
 801db62:	b2c0      	uxtb	r0, r0
 801db64:	9203      	str	r2, [sp, #12]
 801db66:	f000 020f 	and.w	r2, r0, #15
 801db6a:	1100      	asrs	r0, r0, #4
 801db6c:	3a08      	subs	r2, #8
 801db6e:	3808      	subs	r0, #8
 801db70:	441a      	add	r2, r3
 801db72:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801db76:	b2d2      	uxtb	r2, r2
 801db78:	f362 0507 	bfi	r5, r2, #0, #8
 801db7c:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801db80:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801db84:	4403      	add	r3, r0
 801db86:	b2f6      	uxtb	r6, r6
 801db88:	f366 250f 	bfi	r5, r6, #8, #8
 801db8c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801db90:	f3c5 4007 	ubfx	r0, r5, #16, #8
 801db94:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801db98:	2003      	movs	r0, #3
 801db9a:	b2db      	uxtb	r3, r3
 801db9c:	fb10 6603 	smlabb	r6, r0, r3, r6
 801dba0:	2007      	movs	r0, #7
 801dba2:	f363 4517 	bfi	r5, r3, #16, #8
 801dba6:	230b      	movs	r3, #11
 801dba8:	fb10 6202 	smlabb	r2, r0, r2, r6
 801dbac:	fb13 2101 	smlabb	r1, r3, r1, r2
 801dbb0:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801dbb4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801dbb8:	604d      	str	r5, [r1, #4]
 801dbba:	e729      	b.n	801da10 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 801dbbc:	1c5e      	adds	r6, r3, #1
 801dbbe:	465f      	mov	r7, fp
 801dbc0:	45b3      	cmp	fp, r6
 801dbc2:	bfa8      	it	ge
 801dbc4:	4637      	movge	r7, r6
 801dbc6:	e725      	b.n	801da14 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 801dbc8:	193b      	adds	r3, r7, r4
 801dbca:	2b40      	cmp	r3, #64	@ 0x40
 801dbcc:	dd13      	ble.n	801dbf6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 801dbce:	4648      	mov	r0, r9
 801dbd0:	00a1      	lsls	r1, r4, #2
 801dbd2:	f7f3 f865 	bl	8010ca0 <_ZN8touchgfx5paint9flushLineEPmi>
 801dbd6:	4649      	mov	r1, r9
 801dbd8:	9b05      	ldr	r3, [sp, #20]
 801dbda:	4622      	mov	r2, r4
 801dbdc:	4640      	mov	r0, r8
 801dbde:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801dbe2:	f7f3 f8e7 	bl	8010db4 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801dbe6:	4b2c      	ldr	r3, [pc, #176]	@ (801dc98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 801dbe8:	2400      	movs	r4, #0
 801dbea:	4599      	cmp	r9, r3
 801dbec:	bf0c      	ite	eq
 801dbee:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 801dca4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 801dbf2:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 801dc98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 801dbf6:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 801dbfa:	463b      	mov	r3, r7
 801dbfc:	3b01      	subs	r3, #1
 801dbfe:	f842 5b04 	str.w	r5, [r2], #4
 801dc02:	d1fb      	bne.n	801dbfc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 801dc04:	443c      	add	r4, r7
 801dc06:	9f03      	ldr	r7, [sp, #12]
 801dc08:	e6d9      	b.n	801d9be <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 801dc0a:	b15c      	cbz	r4, 801dc24 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 801dc0c:	00a1      	lsls	r1, r4, #2
 801dc0e:	4648      	mov	r0, r9
 801dc10:	f7f3 f846 	bl	8010ca0 <_ZN8touchgfx5paint9flushLineEPmi>
 801dc14:	4640      	mov	r0, r8
 801dc16:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801dc1a:	9b05      	ldr	r3, [sp, #20]
 801dc1c:	4622      	mov	r2, r4
 801dc1e:	4649      	mov	r1, r9
 801dc20:	f7f3 f8c8 	bl	8010db4 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 801dc24:	4b1d      	ldr	r3, [pc, #116]	@ (801dc9c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 801dc26:	9a01      	ldr	r2, [sp, #4]
 801dc28:	881b      	ldrh	r3, [r3, #0]
 801dc2a:	1a9b      	subs	r3, r3, r2
 801dc2c:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 801dc30:	9b04      	ldr	r3, [sp, #16]
 801dc32:	3301      	adds	r3, #1
 801dc34:	9304      	str	r3, [sp, #16]
 801dc36:	9a04      	ldr	r2, [sp, #16]
 801dc38:	9b00      	ldr	r3, [sp, #0]
 801dc3a:	4293      	cmp	r3, r2
 801dc3c:	d11d      	bne.n	801dc7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 801dc3e:	9b02      	ldr	r3, [sp, #8]
 801dc40:	2500      	movs	r5, #0
 801dc42:	9a02      	ldr	r2, [sp, #8]
 801dc44:	f103 0b01 	add.w	fp, r3, #1
 801dc48:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 801dc4c:	9b06      	ldr	r3, [sp, #24]
 801dc4e:	4629      	mov	r1, r5
 801dc50:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 801dc54:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801dc58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801dc5c:	1ba4      	subs	r4, r4, r6
 801dc5e:	9b07      	ldr	r3, [sp, #28]
 801dc60:	ba3f      	rev	r7, r7
 801dc62:	9808      	ldr	r0, [sp, #32]
 801dc64:	b2a4      	uxth	r4, r4
 801dc66:	441f      	add	r7, r3
 801dc68:	f00b fd47 	bl	80296fa <memset>
 801dc6c:	f8cd b008 	str.w	fp, [sp, #8]
 801dc70:	9504      	str	r5, [sp, #16]
 801dc72:	f7f2 fffd 	bl	8010c70 <_ZN8touchgfx5paint8tearDownEv>
 801dc76:	463e      	mov	r6, r7
 801dc78:	e5cc      	b.n	801d814 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 801dc7a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801dc7e:	9b01      	ldr	r3, [sp, #4]
 801dc80:	1ae4      	subs	r4, r4, r3
 801dc82:	1ba4      	subs	r4, r4, r6
 801dc84:	b2a4      	uxth	r4, r4
 801dc86:	e7f4      	b.n	801dc72 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 801dc88:	4b05      	ldr	r3, [pc, #20]	@ (801dca0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 801dc8a:	6818      	ldr	r0, [r3, #0]
 801dc8c:	6803      	ldr	r3, [r0, #0]
 801dc8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dc90:	4798      	blx	r3
 801dc92:	b00f      	add	sp, #60	@ 0x3c
 801dc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc98:	24000100 	.word	0x24000100
 801dc9c:	240065fa 	.word	0x240065fa
 801dca0:	24006600 	.word	0x24006600
 801dca4:	24000200 	.word	0x24000200

0801dca8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801dca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcac:	b08f      	sub	sp, #60	@ 0x3c
 801dcae:	461c      	mov	r4, r3
 801dcb0:	9205      	str	r2, [sp, #20]
 801dcb2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801dcb6:	9100      	str	r1, [sp, #0]
 801dcb8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dcba:	9201      	str	r2, [sp, #4]
 801dcbc:	2a00      	cmp	r2, #0
 801dcbe:	f000 8116 	beq.w	801deee <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 801dcc2:	6820      	ldr	r0, [r4, #0]
 801dcc4:	aa0a      	add	r2, sp, #40	@ 0x28
 801dcc6:	6861      	ldr	r1, [r4, #4]
 801dcc8:	c203      	stmia	r2!, {r0, r1}
 801dcca:	6818      	ldr	r0, [r3, #0]
 801dccc:	aa0c      	add	r2, sp, #48	@ 0x30
 801dcce:	6859      	ldr	r1, [r3, #4]
 801dcd0:	c203      	stmia	r2!, {r0, r1}
 801dcd2:	a80a      	add	r0, sp, #40	@ 0x28
 801dcd4:	f7f9 f84e 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dcd8:	4621      	mov	r1, r4
 801dcda:	a80c      	add	r0, sp, #48	@ 0x30
 801dcdc:	f7f9 f88e 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dce0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801dce4:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801dce8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801dcec:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801dcf0:	bfdb      	ittet	le
 801dcf2:	b2b3      	uxthle	r3, r6
 801dcf4:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801dcf8:	2301      	movgt	r3, #1
 801dcfa:	fb92 f3f3 	sdivle	r3, r2, r3
 801dcfe:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801dd02:	441d      	add	r5, r3
 801dd04:	fb92 f1f3 	sdiv	r1, r2, r3
 801dd08:	fa1f fc81 	uxth.w	ip, r1
 801dd0c:	3d01      	subs	r5, #1
 801dd0e:	fb0c 2413 	mls	r4, ip, r3, r2
 801dd12:	4661      	mov	r1, ip
 801dd14:	fb14 f406 	smulbb	r4, r4, r6
 801dd18:	4404      	add	r4, r0
 801dd1a:	fb95 f5f3 	sdiv	r5, r5, r3
 801dd1e:	b2a4      	uxth	r4, r4
 801dd20:	b131      	cbz	r1, 801dd30 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 801dd22:	9b05      	ldr	r3, [sp, #20]
 801dd24:	9900      	ldr	r1, [sp, #0]
 801dd26:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801dd2a:	ba1b      	rev	r3, r3
 801dd2c:	4419      	add	r1, r3
 801dd2e:	9100      	str	r1, [sp, #0]
 801dd30:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801dd34:	b2ad      	uxth	r5, r5
 801dd36:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801dd3a:	4418      	add	r0, r3
 801dd3c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801dd40:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801dd44:	00ad      	lsls	r5, r5, #2
 801dd46:	441a      	add	r2, r3
 801dd48:	4b6a      	ldr	r3, [pc, #424]	@ (801def4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801dd4a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801dd4e:	6818      	ldr	r0, [r3, #0]
 801dd50:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801dd54:	6803      	ldr	r3, [r0, #0]
 801dd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd58:	4798      	blx	r3
 801dd5a:	4967      	ldr	r1, [pc, #412]	@ (801def8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 801dd5c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801dd60:	2c00      	cmp	r4, #0
 801dd62:	880b      	ldrh	r3, [r1, #0]
 801dd64:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801dd68:	bf0c      	ite	eq
 801dd6a:	46c6      	moveq	lr, r8
 801dd6c:	f04f 0e00 	movne.w	lr, #0
 801dd70:	9109      	str	r1, [sp, #36]	@ 0x24
 801dd72:	fb03 c202 	mla	r2, r3, r2, ip
 801dd76:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801dd7a:	4373      	muls	r3, r6
 801dd7c:	fa1f fe8e 	uxth.w	lr, lr
 801dd80:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801dd84:	9103      	str	r1, [sp, #12]
 801dd86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dd8a:	9306      	str	r3, [sp, #24]
 801dd8c:	1d2b      	adds	r3, r5, #4
 801dd8e:	9307      	str	r3, [sp, #28]
 801dd90:	9b01      	ldr	r3, [sp, #4]
 801dd92:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 801dd96:	2300      	movs	r3, #0
 801dd98:	b292      	uxth	r2, r2
 801dd9a:	9302      	str	r3, [sp, #8]
 801dd9c:	9204      	str	r2, [sp, #16]
 801dd9e:	9a06      	ldr	r2, [sp, #24]
 801dda0:	4282      	cmp	r2, r0
 801dda2:	f240 809f 	bls.w	801dee4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 801dda6:	b963      	cbnz	r3, 801ddc2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801dda8:	9b00      	ldr	r3, [sp, #0]
 801ddaa:	781a      	ldrb	r2, [r3, #0]
 801ddac:	0993      	lsrs	r3, r2, #6
 801ddae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ddb2:	9202      	str	r2, [sp, #8]
 801ddb4:	1e5a      	subs	r2, r3, #1
 801ddb6:	2a02      	cmp	r2, #2
 801ddb8:	d815      	bhi.n	801dde6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801ddba:	9a00      	ldr	r2, [sp, #0]
 801ddbc:	b29b      	uxth	r3, r3
 801ddbe:	3201      	adds	r2, #1
 801ddc0:	9200      	str	r2, [sp, #0]
 801ddc2:	b1b4      	cbz	r4, 801ddf2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 801ddc4:	429c      	cmp	r4, r3
 801ddc6:	bf91      	iteee	ls
 801ddc8:	1b1c      	subls	r4, r3, r4
 801ddca:	1ae4      	subhi	r4, r4, r3
 801ddcc:	4671      	movhi	r1, lr
 801ddce:	f04f 0a00 	movhi.w	sl, #0
 801ddd2:	bf9b      	ittet	ls
 801ddd4:	fa1f fa84 	uxthls.w	sl, r4
 801ddd8:	2400      	movls	r4, #0
 801ddda:	b2a4      	uxthhi	r4, r4
 801dddc:	fa1f f188 	uxthls.w	r1, r8
 801dde0:	4653      	mov	r3, sl
 801dde2:	468e      	mov	lr, r1
 801dde4:	e7db      	b.n	801dd9e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 801dde6:	9a00      	ldr	r2, [sp, #0]
 801dde8:	9b00      	ldr	r3, [sp, #0]
 801ddea:	3202      	adds	r2, #2
 801ddec:	785b      	ldrb	r3, [r3, #1]
 801ddee:	9200      	str	r2, [sp, #0]
 801ddf0:	e7e7      	b.n	801ddc2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 801ddf2:	2202      	movs	r2, #2
 801ddf4:	9907      	ldr	r1, [sp, #28]
 801ddf6:	4573      	cmp	r3, lr
 801ddf8:	4615      	mov	r5, r2
 801ddfa:	9a02      	ldr	r2, [sp, #8]
 801ddfc:	bf24      	itt	cs
 801ddfe:	eba3 0a0e 	subcs.w	sl, r3, lr
 801de02:	46f1      	movcs	r9, lr
 801de04:	fb15 1202 	smlabb	r2, r5, r2, r1
 801de08:	9905      	ldr	r1, [sp, #20]
 801de0a:	bf34      	ite	cc
 801de0c:	4699      	movcc	r9, r3
 801de0e:	fa1f fa8a 	uxthcs.w	sl, sl
 801de12:	f831 c002 	ldrh.w	ip, [r1, r2]
 801de16:	bf38      	it	cc
 801de18:	ebae 0103 	subcc.w	r1, lr, r3
 801de1c:	9a01      	ldr	r2, [sp, #4]
 801de1e:	bf2e      	itee	cs
 801de20:	4621      	movcs	r1, r4
 801de22:	b289      	uxthcc	r1, r1
 801de24:	46a2      	movcc	sl, r4
 801de26:	2aff      	cmp	r2, #255	@ 0xff
 801de28:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801de2c:	d105      	bne.n	801de3a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 801de2e:	4481      	add	r9, r0
 801de30:	4581      	cmp	r9, r0
 801de32:	d045      	beq.n	801dec0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801de34:	f820 cb02 	strh.w	ip, [r0], #2
 801de38:	e7fa      	b.n	801de30 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 801de3a:	ea4f 222c 	mov.w	r2, ip, asr #8
 801de3e:	9d03      	ldr	r5, [sp, #12]
 801de40:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801de44:	4481      	add	r9, r0
 801de46:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801de4a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801de4e:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 801de52:	fa5f fc8c 	uxtb.w	ip, ip
 801de56:	436a      	muls	r2, r5
 801de58:	fb0b fb05 	mul.w	fp, fp, r5
 801de5c:	fb0c fc05 	mul.w	ip, ip, r5
 801de60:	9208      	str	r2, [sp, #32]
 801de62:	4581      	cmp	r9, r0
 801de64:	d02c      	beq.n	801dec0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 801de66:	8802      	ldrh	r2, [r0, #0]
 801de68:	9d04      	ldr	r5, [sp, #16]
 801de6a:	1216      	asrs	r6, r2, #8
 801de6c:	9f04      	ldr	r7, [sp, #16]
 801de6e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801de72:	fb16 f605 	smulbb	r6, r6, r5
 801de76:	9d08      	ldr	r5, [sp, #32]
 801de78:	442e      	add	r6, r5
 801de7a:	10d5      	asrs	r5, r2, #3
 801de7c:	00d2      	lsls	r2, r2, #3
 801de7e:	b2b6      	uxth	r6, r6
 801de80:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801de84:	b2d2      	uxtb	r2, r2
 801de86:	fb15 f507 	smulbb	r5, r5, r7
 801de8a:	fb12 f207 	smulbb	r2, r2, r7
 801de8e:	1c77      	adds	r7, r6, #1
 801de90:	445d      	add	r5, fp
 801de92:	4462      	add	r2, ip
 801de94:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801de98:	b2ad      	uxth	r5, r5
 801de9a:	b292      	uxth	r2, r2
 801de9c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801dea0:	1c57      	adds	r7, r2, #1
 801dea2:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 801dea6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801deaa:	4316      	orrs	r6, r2
 801deac:	1c6a      	adds	r2, r5, #1
 801deae:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801deb2:	096d      	lsrs	r5, r5, #5
 801deb4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801deb8:	432e      	orrs	r6, r5
 801deba:	f820 6b02 	strh.w	r6, [r0], #2
 801debe:	e7d0      	b.n	801de62 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 801dec0:	4573      	cmp	r3, lr
 801dec2:	d38d      	bcc.n	801dde0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801dec4:	fa1f f188 	uxth.w	r1, r8
 801dec8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801decc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dece:	1a64      	subs	r4, r4, r1
 801ded0:	881b      	ldrh	r3, [r3, #0]
 801ded2:	b2a4      	uxth	r4, r4
 801ded4:	eba3 0308 	sub.w	r3, r3, r8
 801ded8:	2c00      	cmp	r4, #0
 801deda:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dede:	bf18      	it	ne
 801dee0:	2100      	movne	r1, #0
 801dee2:	e77d      	b.n	801dde0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 801dee4:	4b03      	ldr	r3, [pc, #12]	@ (801def4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 801dee6:	6818      	ldr	r0, [r3, #0]
 801dee8:	6803      	ldr	r3, [r0, #0]
 801deea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801deec:	4798      	blx	r3
 801deee:	b00f      	add	sp, #60	@ 0x3c
 801def0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801def4:	24006600 	.word	0x24006600
 801def8:	240065fa 	.word	0x240065fa

0801defc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 801defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df00:	b09f      	sub	sp, #124	@ 0x7c
 801df02:	461d      	mov	r5, r3
 801df04:	4604      	mov	r4, r0
 801df06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df08:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801df0c:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801df10:	9209      	str	r2, [sp, #36]	@ 0x24
 801df12:	2a00      	cmp	r2, #0
 801df14:	f000 81ed 	beq.w	801e2f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 801df18:	6828      	ldr	r0, [r5, #0]
 801df1a:	aa1a      	add	r2, sp, #104	@ 0x68
 801df1c:	6869      	ldr	r1, [r5, #4]
 801df1e:	c203      	stmia	r2!, {r0, r1}
 801df20:	6818      	ldr	r0, [r3, #0]
 801df22:	aa1c      	add	r2, sp, #112	@ 0x70
 801df24:	6859      	ldr	r1, [r3, #4]
 801df26:	c203      	stmia	r2!, {r0, r1}
 801df28:	a81a      	add	r0, sp, #104	@ 0x68
 801df2a:	f7f8 ff23 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df2e:	4629      	mov	r1, r5
 801df30:	a81c      	add	r0, sp, #112	@ 0x70
 801df32:	f7f8 ff63 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801df36:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801df3a:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 801df3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801df42:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 801df46:	bfdb      	ittet	le
 801df48:	b29a      	uxthle	r2, r3
 801df4a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801df4e:	2201      	movgt	r2, #1
 801df50:	fb91 f2f2 	sdivle	r2, r1, r2
 801df54:	9202      	str	r2, [sp, #8]
 801df56:	9802      	ldr	r0, [sp, #8]
 801df58:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801df5c:	9902      	ldr	r1, [sp, #8]
 801df5e:	fb92 f0f0 	sdiv	r0, r2, r0
 801df62:	b280      	uxth	r0, r0
 801df64:	4488      	add	r8, r1
 801df66:	9010      	str	r0, [sp, #64]	@ 0x40
 801df68:	f108 38ff 	add.w	r8, r8, #4294967295
 801df6c:	9802      	ldr	r0, [sp, #8]
 801df6e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801df70:	fb05 2510 	mls	r5, r5, r0, r2
 801df74:	fb98 f8f1 	sdiv	r8, r8, r1
 801df78:	fb15 f503 	smulbb	r5, r5, r3
 801df7c:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801df80:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801df84:	f108 0801 	add.w	r8, r8, #1
 801df88:	440d      	add	r5, r1
 801df8a:	4419      	add	r1, r3
 801df8c:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801df90:	fa1f f888 	uxth.w	r8, r8
 801df94:	441a      	add	r2, r3
 801df96:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801df9a:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801df9e:	b2ad      	uxth	r5, r5
 801dfa0:	9304      	str	r3, [sp, #16]
 801dfa2:	4b94      	ldr	r3, [pc, #592]	@ (801e1f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 801dfa4:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801dfa8:	6818      	ldr	r0, [r3, #0]
 801dfaa:	6803      	ldr	r3, [r0, #0]
 801dfac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dfae:	4798      	blx	r3
 801dfb0:	4b91      	ldr	r3, [pc, #580]	@ (801e1f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801dfb2:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801dfb6:	2d00      	cmp	r5, #0
 801dfb8:	881a      	ldrh	r2, [r3, #0]
 801dfba:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801dfbe:	fb02 f606 	mul.w	r6, r2, r6
 801dfc2:	fb02 7101 	mla	r1, r2, r1, r7
 801dfc6:	9318      	str	r3, [sp, #96]	@ 0x60
 801dfc8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801dfcc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801dfd0:	f04f 0100 	mov.w	r1, #0
 801dfd4:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 801dfd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dfda:	4b88      	ldr	r3, [pc, #544]	@ (801e1fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 801dfdc:	920a      	str	r2, [sp, #40]	@ 0x28
 801dfde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dfe0:	eba3 0304 	sub.w	r3, r3, r4
 801dfe4:	910d      	str	r1, [sp, #52]	@ 0x34
 801dfe6:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 801dfea:	9319      	str	r3, [sp, #100]	@ 0x64
 801dfec:	f108 0204 	add.w	r2, r8, #4
 801dff0:	9211      	str	r2, [sp, #68]	@ 0x44
 801dff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dff4:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801dff8:	9215      	str	r2, [sp, #84]	@ 0x54
 801dffa:	9a04      	ldr	r2, [sp, #16]
 801dffc:	bf18      	it	ne
 801dffe:	2200      	movne	r2, #0
 801e000:	b292      	uxth	r2, r2
 801e002:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e004:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e006:	fa11 f383 	uxtah	r3, r1, r3
 801e00a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801e00c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e010:	3304      	adds	r3, #4
 801e012:	9306      	str	r3, [sp, #24]
 801e014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e016:	4283      	cmp	r3, r0
 801e018:	f240 8166 	bls.w	801e2e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 801e01c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801e020:	f04f 0a01 	mov.w	sl, #1
 801e024:	9902      	ldr	r1, [sp, #8]
 801e026:	9e06      	ldr	r6, [sp, #24]
 801e028:	46d3      	mov	fp, sl
 801e02a:	4657      	mov	r7, sl
 801e02c:	7836      	ldrb	r6, [r6, #0]
 801e02e:	fbb5 f3f3 	udiv	r3, r5, r3
 801e032:	1acb      	subs	r3, r1, r3
 801e034:	9612      	str	r6, [sp, #72]	@ 0x48
 801e036:	3601      	adds	r6, #1
 801e038:	b29b      	uxth	r3, r3
 801e03a:	9605      	str	r6, [sp, #20]
 801e03c:	9316      	str	r3, [sp, #88]	@ 0x58
 801e03e:	9b06      	ldr	r3, [sp, #24]
 801e040:	7859      	ldrb	r1, [r3, #1]
 801e042:	789b      	ldrb	r3, [r3, #2]
 801e044:	021b      	lsls	r3, r3, #8
 801e046:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801e04a:	9906      	ldr	r1, [sp, #24]
 801e04c:	78c9      	ldrb	r1, [r1, #3]
 801e04e:	430b      	orrs	r3, r1
 801e050:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e052:	4419      	add	r1, r3
 801e054:	1c4e      	adds	r6, r1, #1
 801e056:	7849      	ldrb	r1, [r1, #1]
 801e058:	9603      	str	r6, [sp, #12]
 801e05a:	0209      	lsls	r1, r1, #8
 801e05c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e05e:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801e062:	5cf3      	ldrb	r3, [r6, r3]
 801e064:	4319      	orrs	r1, r3
 801e066:	b28b      	uxth	r3, r1
 801e068:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801e06c:	930c      	str	r3, [sp, #48]	@ 0x30
 801e06e:	2300      	movs	r3, #0
 801e070:	9307      	str	r3, [sp, #28]
 801e072:	469c      	mov	ip, r3
 801e074:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801e078:	930e      	str	r3, [sp, #56]	@ 0x38
 801e07a:	2d00      	cmp	r5, #0
 801e07c:	d07e      	beq.n	801e17c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 801e07e:	42af      	cmp	r7, r5
 801e080:	d26e      	bcs.n	801e160 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 801e082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e084:	1bed      	subs	r5, r5, r7
 801e086:	9201      	str	r2, [sp, #4]
 801e088:	4283      	cmp	r3, r0
 801e08a:	b2ad      	uxth	r5, r5
 801e08c:	d802      	bhi.n	801e094 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 801e08e:	e073      	b.n	801e178 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 801e090:	2b00      	cmp	r3, #0
 801e092:	d15f      	bne.n	801e154 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 801e094:	9b03      	ldr	r3, [sp, #12]
 801e096:	f1cb 0207 	rsb	r2, fp, #7
 801e09a:	785b      	ldrb	r3, [r3, #1]
 801e09c:	4093      	lsls	r3, r2
 801e09e:	005b      	lsls	r3, r3, #1
 801e0a0:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801e0a4:	9b03      	ldr	r3, [sp, #12]
 801e0a6:	781b      	ldrb	r3, [r3, #0]
 801e0a8:	fa43 f30b 	asr.w	r3, r3, fp
 801e0ac:	b2db      	uxtb	r3, r3
 801e0ae:	4313      	orrs	r3, r2
 801e0b0:	f10b 0201 	add.w	r2, fp, #1
 801e0b4:	fa5f fb82 	uxtb.w	fp, r2
 801e0b8:	9a03      	ldr	r2, [sp, #12]
 801e0ba:	b29f      	uxth	r7, r3
 801e0bc:	f1bb 0f08 	cmp.w	fp, #8
 801e0c0:	bf13      	iteet	ne
 801e0c2:	3201      	addne	r2, #1
 801e0c4:	3202      	addeq	r2, #2
 801e0c6:	f04f 0b00 	moveq.w	fp, #0
 801e0ca:	9203      	strne	r2, [sp, #12]
 801e0cc:	bf08      	it	eq
 801e0ce:	9203      	streq	r2, [sp, #12]
 801e0d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e0d2:	42ba      	cmp	r2, r7
 801e0d4:	d309      	bcc.n	801e0ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 801e0d6:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801e0da:	2301      	movs	r3, #1
 801e0dc:	9a05      	ldr	r2, [sp, #20]
 801e0de:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801e0e2:	d30e      	bcc.n	801e102 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801e0e4:	469a      	mov	sl, r3
 801e0e6:	2600      	movs	r6, #0
 801e0e8:	e035      	b.n	801e156 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 801e0ea:	9b05      	ldr	r3, [sp, #20]
 801e0ec:	429f      	cmp	r7, r3
 801e0ee:	d318      	bcc.n	801e122 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 801e0f0:	eb04 030a 	add.w	r3, r4, sl
 801e0f4:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801e0f8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801e0fc:	f10a 0301 	add.w	r3, sl, #1
 801e100:	b29b      	uxth	r3, r3
 801e102:	9a05      	ldr	r2, [sp, #20]
 801e104:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801e108:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e10c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801e10e:	7116      	strb	r6, [r2, #4]
 801e110:	f10a 0601 	add.w	r6, sl, #1
 801e114:	80d1      	strh	r1, [r2, #6]
 801e116:	7156      	strb	r6, [r2, #5]
 801e118:	9a05      	ldr	r2, [sp, #20]
 801e11a:	3201      	adds	r2, #1
 801e11c:	b292      	uxth	r2, r2
 801e11e:	9205      	str	r2, [sp, #20]
 801e120:	e7e0      	b.n	801e0e4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 801e122:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801e126:	463a      	mov	r2, r7
 801e128:	795b      	ldrb	r3, [r3, #5]
 801e12a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801e12e:	4426      	add	r6, r4
 801e130:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801e132:	eb01 0c06 	add.w	ip, r1, r6
 801e136:	f1bc 0f00 	cmp.w	ip, #0
 801e13a:	dd07      	ble.n	801e14c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 801e13c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e140:	f892 c004 	ldrb.w	ip, [r2, #4]
 801e144:	f806 cd01 	strb.w	ip, [r6, #-1]!
 801e148:	88d2      	ldrh	r2, [r2, #6]
 801e14a:	e7f1      	b.n	801e130 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 801e14c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801e150:	b29b      	uxth	r3, r3
 801e152:	e7c3      	b.n	801e0dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 801e154:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e156:	970c      	str	r7, [sp, #48]	@ 0x30
 801e158:	46b4      	mov	ip, r6
 801e15a:	9a01      	ldr	r2, [sp, #4]
 801e15c:	461f      	mov	r7, r3
 801e15e:	e78c      	b.n	801e07a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 801e160:	1b7b      	subs	r3, r7, r5
 801e162:	eb0c 0605 	add.w	r6, ip, r5
 801e166:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e16a:	b29b      	uxth	r3, r3
 801e16c:	b2b6      	uxth	r6, r6
 801e16e:	9201      	str	r2, [sp, #4]
 801e170:	2500      	movs	r5, #0
 801e172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e174:	4282      	cmp	r2, r0
 801e176:	d88b      	bhi.n	801e090 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 801e178:	9a01      	ldr	r2, [sp, #4]
 801e17a:	e74b      	b.n	801e014 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 801e17c:	4297      	cmp	r7, r2
 801e17e:	d332      	bcc.n	801e1e6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 801e180:	1abb      	subs	r3, r7, r2
 801e182:	9208      	str	r2, [sp, #32]
 801e184:	9501      	str	r5, [sp, #4]
 801e186:	b29b      	uxth	r3, r3
 801e188:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e18a:	29ff      	cmp	r1, #255	@ 0xff
 801e18c:	9908      	ldr	r1, [sp, #32]
 801e18e:	eb0c 0601 	add.w	r6, ip, r1
 801e192:	d135      	bne.n	801e200 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 801e194:	f1a0 0e02 	sub.w	lr, r0, #2
 801e198:	b2b6      	uxth	r6, r6
 801e19a:	45b4      	cmp	ip, r6
 801e19c:	f040 808c 	bne.w	801e2b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 801e1a0:	9908      	ldr	r1, [sp, #32]
 801e1a2:	4297      	cmp	r7, r2
 801e1a4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801e1a8:	d3e2      	bcc.n	801e170 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 801e1aa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e1ac:	9904      	ldr	r1, [sp, #16]
 801e1ae:	8812      	ldrh	r2, [r2, #0]
 801e1b0:	1a52      	subs	r2, r2, r1
 801e1b2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801e1b4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e1b8:	9a07      	ldr	r2, [sp, #28]
 801e1ba:	3201      	adds	r2, #1
 801e1bc:	428a      	cmp	r2, r1
 801e1be:	9207      	str	r2, [sp, #28]
 801e1c0:	f040 8087 	bne.w	801e2d2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 801e1c4:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801e1c8:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 801e1cc:	9b04      	ldr	r3, [sp, #16]
 801e1ce:	1bed      	subs	r5, r5, r7
 801e1d0:	b2ad      	uxth	r5, r5
 801e1d2:	2d00      	cmp	r5, #0
 801e1d4:	bf08      	it	eq
 801e1d6:	461a      	moveq	r2, r3
 801e1d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e1da:	bf18      	it	ne
 801e1dc:	2200      	movne	r2, #0
 801e1de:	3301      	adds	r3, #1
 801e1e0:	b292      	uxth	r2, r2
 801e1e2:	930d      	str	r3, [sp, #52]	@ 0x34
 801e1e4:	e70d      	b.n	801e002 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 801e1e6:	1bd1      	subs	r1, r2, r7
 801e1e8:	9708      	str	r7, [sp, #32]
 801e1ea:	b28b      	uxth	r3, r1
 801e1ec:	9301      	str	r3, [sp, #4]
 801e1ee:	462b      	mov	r3, r5
 801e1f0:	e7ca      	b.n	801e188 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 801e1f2:	bf00      	nop
 801e1f4:	24006600 	.word	0x24006600
 801e1f8:	240065fa 	.word	0x240065fa
 801e1fc:	fffff7fb 	.word	0xfffff7fb
 801e200:	b2b6      	uxth	r6, r6
 801e202:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e204:	45b4      	cmp	ip, r6
 801e206:	d0cb      	beq.n	801e1a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 801e208:	f10c 0101 	add.w	r1, ip, #1
 801e20c:	44a4      	add	ip, r4
 801e20e:	9117      	str	r1, [sp, #92]	@ 0x5c
 801e210:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801e214:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e216:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801e21a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e21c:	ea4f 2825 	mov.w	r8, r5, asr #8
 801e220:	f8b1 c000 	ldrh.w	ip, [r1]
 801e224:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e226:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801e22a:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 801e22e:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801e232:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801e236:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e23a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801e23e:	fb1e fe01 	smulbb	lr, lr, r1
 801e242:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e244:	fa5f fc8c 	uxtb.w	ip, ip
 801e248:	fb08 e801 	mla	r8, r8, r1, lr
 801e24c:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801e250:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e252:	00ed      	lsls	r5, r5, #3
 801e254:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801e258:	fa1f f888 	uxth.w	r8, r8
 801e25c:	fb19 f901 	smulbb	r9, r9, r1
 801e260:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e262:	b2ed      	uxtb	r5, r5
 801e264:	fb0e 9e01 	mla	lr, lr, r1, r9
 801e268:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e26a:	fb1c fc01 	smulbb	ip, ip, r1
 801e26e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e270:	fa1f fe8e 	uxth.w	lr, lr
 801e274:	fb05 c501 	mla	r5, r5, r1, ip
 801e278:	f108 0c01 	add.w	ip, r8, #1
 801e27c:	f10e 0901 	add.w	r9, lr, #1
 801e280:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e282:	b2ad      	uxth	r5, r5
 801e284:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801e288:	f105 0c01 	add.w	ip, r5, #1
 801e28c:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 801e290:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801e294:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801e298:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e29c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e2a0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801e2a4:	ea4c 0808 	orr.w	r8, ip, r8
 801e2a8:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 801e2ac:	ea48 0809 	orr.w	r8, r8, r9
 801e2b0:	f821 8b02 	strh.w	r8, [r1], #2
 801e2b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e2b6:	e7a5      	b.n	801e204 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 801e2b8:	f10c 0801 	add.w	r8, ip, #1
 801e2bc:	44a4      	add	ip, r4
 801e2be:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e2c0:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 801e2c4:	fa1f fc88 	uxth.w	ip, r8
 801e2c8:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 801e2cc:	f82e 5f02 	strh.w	r5, [lr, #2]!
 801e2d0:	e763      	b.n	801e19a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 801e2d2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e2d6:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801e2da:	1aad      	subs	r5, r5, r2
 801e2dc:	b2ad      	uxth	r5, r5
 801e2de:	2d00      	cmp	r5, #0
 801e2e0:	bf18      	it	ne
 801e2e2:	2200      	movne	r2, #0
 801e2e4:	9201      	str	r2, [sp, #4]
 801e2e6:	e744      	b.n	801e172 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 801e2e8:	4b03      	ldr	r3, [pc, #12]	@ (801e2f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 801e2ea:	6818      	ldr	r0, [r3, #0]
 801e2ec:	6803      	ldr	r3, [r0, #0]
 801e2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e2f0:	4798      	blx	r3
 801e2f2:	b01f      	add	sp, #124	@ 0x7c
 801e2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2f8:	24006600 	.word	0x24006600

0801e2fc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 801e2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e300:	b093      	sub	sp, #76	@ 0x4c
 801e302:	4616      	mov	r6, r2
 801e304:	460d      	mov	r5, r1
 801e306:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 801e30a:	9003      	str	r0, [sp, #12]
 801e30c:	9201      	str	r2, [sp, #4]
 801e30e:	2a00      	cmp	r2, #0
 801e310:	f000 8303 	beq.w	801e91a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x61e>
 801e314:	6830      	ldr	r0, [r6, #0]
 801e316:	ac0e      	add	r4, sp, #56	@ 0x38
 801e318:	6871      	ldr	r1, [r6, #4]
 801e31a:	c403      	stmia	r4!, {r0, r1}
 801e31c:	6818      	ldr	r0, [r3, #0]
 801e31e:	ac10      	add	r4, sp, #64	@ 0x40
 801e320:	6859      	ldr	r1, [r3, #4]
 801e322:	c403      	stmia	r4!, {r0, r1}
 801e324:	a80e      	add	r0, sp, #56	@ 0x38
 801e326:	f7f8 fd25 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e32a:	4631      	mov	r1, r6
 801e32c:	a810      	add	r0, sp, #64	@ 0x40
 801e32e:	f7f8 fd65 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e332:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801e336:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801e33a:	bfdb      	ittet	le
 801e33c:	b293      	uxthle	r3, r2
 801e33e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e342:	2301      	movgt	r3, #1
 801e344:	fb91 f3f3 	sdivle	r3, r1, r3
 801e348:	9304      	str	r3, [sp, #16]
 801e34a:	f105 0308 	add.w	r3, r5, #8
 801e34e:	9904      	ldr	r1, [sp, #16]
 801e350:	9308      	str	r3, [sp, #32]
 801e352:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801e356:	440b      	add	r3, r1
 801e358:	3b01      	subs	r3, #1
 801e35a:	fb93 f3f1 	sdiv	r3, r3, r1
 801e35e:	3b01      	subs	r3, #1
 801e360:	9908      	ldr	r1, [sp, #32]
 801e362:	b29b      	uxth	r3, r3
 801e364:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e368:	9904      	ldr	r1, [sp, #16]
 801e36a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e36c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801e370:	fb93 f0f1 	sdiv	r0, r3, r1
 801e374:	b284      	uxth	r4, r0
 801e376:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801e37a:	9405      	str	r4, [sp, #20]
 801e37c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801e380:	fb05 3914 	mls	r9, r5, r4, r3
 801e384:	fb19 f902 	smulbb	r9, r9, r2
 801e388:	4489      	add	r9, r1
 801e38a:	fa1f f989 	uxth.w	r9, r9
 801e38e:	2d00      	cmp	r5, #0
 801e390:	d05d      	beq.n	801e44e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 801e392:	1e6a      	subs	r2, r5, #1
 801e394:	9808      	ldr	r0, [sp, #32]
 801e396:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 801e39a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e39c:	fa9a fa8a 	rev.w	sl, sl
 801e3a0:	4492      	add	sl, r2
 801e3a2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801e3a6:	f04f 0600 	mov.w	r6, #0
 801e3aa:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801e3ae:	4411      	add	r1, r2
 801e3b0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801e3b4:	4413      	add	r3, r2
 801e3b6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801e3ba:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801e3be:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801e3c2:	9302      	str	r3, [sp, #8]
 801e3c4:	4bca      	ldr	r3, [pc, #808]	@ (801e6f0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 801e3c6:	6818      	ldr	r0, [r3, #0]
 801e3c8:	6803      	ldr	r3, [r0, #0]
 801e3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3cc:	4798      	blx	r3
 801e3ce:	4bc9      	ldr	r3, [pc, #804]	@ (801e6f4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 801e3d0:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801e3d4:	2100      	movs	r1, #0
 801e3d6:	881b      	ldrh	r3, [r3, #0]
 801e3d8:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801e3dc:	fb03 2404 	mla	r4, r3, r4, r2
 801e3e0:	2280      	movs	r2, #128	@ 0x80
 801e3e2:	436b      	muls	r3, r5
 801e3e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e3e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e3ec:	930d      	str	r3, [sp, #52]	@ 0x34
 801e3ee:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801e3f2:	fb99 f3f3 	sdiv	r3, r9, r3
 801e3f6:	9306      	str	r3, [sp, #24]
 801e3f8:	9b01      	ldr	r3, [sp, #4]
 801e3fa:	43db      	mvns	r3, r3
 801e3fc:	b2db      	uxtb	r3, r3
 801e3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 801e400:	9b03      	ldr	r3, [sp, #12]
 801e402:	3304      	adds	r3, #4
 801e404:	4618      	mov	r0, r3
 801e406:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e408:	f00b f977 	bl	80296fa <memset>
 801e40c:	4bba      	ldr	r3, [pc, #744]	@ (801e6f8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 801e40e:	9300      	str	r3, [sp, #0]
 801e410:	2300      	movs	r3, #0
 801e412:	9307      	str	r3, [sp, #28]
 801e414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e416:	42a3      	cmp	r3, r4
 801e418:	f240 827a 	bls.w	801e910 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x614>
 801e41c:	f04f 0e07 	mov.w	lr, #7
 801e420:	f1b9 0f00 	cmp.w	r9, #0
 801e424:	f000 8159 	beq.w	801e6da <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 801e428:	f89a 5000 	ldrb.w	r5, [sl]
 801e42c:	f10a 0701 	add.w	r7, sl, #1
 801e430:	b2ed      	uxtb	r5, r5
 801e432:	11aa      	asrs	r2, r5, #6
 801e434:	d10e      	bne.n	801e454 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 801e436:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801e43a:	9b03      	ldr	r3, [sp, #12]
 801e43c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801e440:	88ae      	ldrh	r6, [r5, #4]
 801e442:	f109 39ff 	add.w	r9, r9, #4294967295
 801e446:	fa1f f989 	uxth.w	r9, r9
 801e44a:	46ba      	mov	sl, r7
 801e44c:	e7e8      	b.n	801e420 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 801e44e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 801e452:	e7a6      	b.n	801e3a2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 801e454:	2a01      	cmp	r2, #1
 801e456:	d129      	bne.n	801e4ac <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 801e458:	f3c6 0304 	ubfx	r3, r6, #0, #5
 801e45c:	f005 0203 	and.w	r2, r5, #3
 801e460:	2103      	movs	r1, #3
 801e462:	3b02      	subs	r3, #2
 801e464:	4413      	add	r3, r2
 801e466:	f3c5 0281 	ubfx	r2, r5, #2, #2
 801e46a:	f3c5 1501 	ubfx	r5, r5, #4, #2
 801e46e:	f003 031f 	and.w	r3, r3, #31
 801e472:	3a02      	subs	r2, #2
 801e474:	3d02      	subs	r5, #2
 801e476:	f363 0604 	bfi	r6, r3, #0, #5
 801e47a:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 801e47e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801e482:	f362 164a 	bfi	r6, r2, #5, #6
 801e486:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e48a:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 801e48e:	f005 051f 	and.w	r5, r5, #31
 801e492:	fb11 2205 	smlabb	r2, r1, r5, r2
 801e496:	f365 26cf 	bfi	r6, r5, #11, #5
 801e49a:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801e49e:	9a03      	ldr	r2, [sp, #12]
 801e4a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e4a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e4a8:	809e      	strh	r6, [r3, #4]
 801e4aa:	e7ca      	b.n	801e442 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 801e4ac:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 801e4b0:	2a02      	cmp	r2, #2
 801e4b2:	b2ab      	uxth	r3, r5
 801e4b4:	d136      	bne.n	801e524 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 801e4b6:	2101      	movs	r1, #1
 801e4b8:	fb12 1205 	smlabb	r2, r2, r5, r1
 801e4bc:	4492      	add	sl, r2
 801e4be:	463a      	mov	r2, r7
 801e4c0:	4552      	cmp	r2, sl
 801e4c2:	d01c      	beq.n	801e4fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 801e4c4:	4694      	mov	ip, r2
 801e4c6:	f04f 0b03 	mov.w	fp, #3
 801e4ca:	f81c 1b02 	ldrb.w	r1, [ip], #2
 801e4ce:	7852      	ldrb	r2, [r2, #1]
 801e4d0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801e4d4:	f3c1 1045 	ubfx	r0, r1, #5, #6
 801e4d8:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 801e4dc:	f001 021f 	and.w	r2, r1, #31
 801e4e0:	460e      	mov	r6, r1
 801e4e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e4e6:	fb1b 0008 	smlabb	r0, fp, r8, r0
 801e4ea:	fb1e 0002 	smlabb	r0, lr, r2, r0
 801e4ee:	9a03      	ldr	r2, [sp, #12]
 801e4f0:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801e4f4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e4f8:	4662      	mov	r2, ip
 801e4fa:	8081      	strh	r1, [r0, #4]
 801e4fc:	e7e0      	b.n	801e4c0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 801e4fe:	4599      	cmp	r9, r3
 801e500:	d20b      	bcs.n	801e51a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 801e502:	eba5 0509 	sub.w	r5, r5, r9
 801e506:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 801e50a:	2d00      	cmp	r5, #0
 801e50c:	f300 8208 	bgt.w	801e920 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x624>
 801e510:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801e514:	2301      	movs	r3, #1
 801e516:	9307      	str	r3, [sp, #28]
 801e518:	e00c      	b.n	801e534 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801e51a:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801e51e:	eba9 0903 	sub.w	r9, r9, r3
 801e522:	e790      	b.n	801e446 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 801e524:	4599      	cmp	r9, r3
 801e526:	d2fa      	bcs.n	801e51e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 801e528:	eba5 0509 	sub.w	r5, r5, r9
 801e52c:	2d00      	cmp	r5, #0
 801e52e:	dc1d      	bgt.n	801e56c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 801e530:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801e534:	f04f 0b00 	mov.w	fp, #0
 801e538:	f1b8 0f00 	cmp.w	r8, #0
 801e53c:	f340 81a0 	ble.w	801e880 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x584>
 801e540:	783b      	ldrb	r3, [r7, #0]
 801e542:	f107 0a01 	add.w	sl, r7, #1
 801e546:	b2db      	uxtb	r3, r3
 801e548:	119a      	asrs	r2, r3, #6
 801e54a:	f040 80d7 	bne.w	801e6fc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 801e54e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e552:	9a03      	ldr	r2, [sp, #12]
 801e554:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e558:	889e      	ldrh	r6, [r3, #4]
 801e55a:	9b01      	ldr	r3, [sp, #4]
 801e55c:	2bff      	cmp	r3, #255	@ 0xff
 801e55e:	f040 81e8 	bne.w	801e932 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x636>
 801e562:	8026      	strh	r6, [r4, #0]
 801e564:	f108 38ff 	add.w	r8, r8, #4294967295
 801e568:	3402      	adds	r4, #2
 801e56a:	e0be      	b.n	801e6ea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801e56c:	9b02      	ldr	r3, [sp, #8]
 801e56e:	9a02      	ldr	r2, [sp, #8]
 801e570:	42ab      	cmp	r3, r5
 801e572:	bfa8      	it	ge
 801e574:	462b      	movge	r3, r5
 801e576:	eba2 0803 	sub.w	r8, r2, r3
 801e57a:	9a07      	ldr	r2, [sp, #28]
 801e57c:	1aed      	subs	r5, r5, r3
 801e57e:	2a00      	cmp	r2, #0
 801e580:	d05a      	beq.n	801e638 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 801e582:	9a01      	ldr	r2, [sp, #4]
 801e584:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e588:	2aff      	cmp	r2, #255	@ 0xff
 801e58a:	d049      	beq.n	801e620 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 801e58c:	f8bd e004 	ldrh.w	lr, [sp, #4]
 801e590:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 801e594:	42a3      	cmp	r3, r4
 801e596:	f240 80a5 	bls.w	801e6e4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 801e59a:	46bc      	mov	ip, r7
 801e59c:	8820      	ldrh	r0, [r4, #0]
 801e59e:	f81c 2b02 	ldrb.w	r2, [ip], #2
 801e5a2:	ea4f 2a20 	mov.w	sl, r0, asr #8
 801e5a6:	7879      	ldrb	r1, [r7, #1]
 801e5a8:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 801e5ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801e5b0:	fb1a fa09 	smulbb	sl, sl, r9
 801e5b4:	b212      	sxth	r2, r2
 801e5b6:	b291      	uxth	r1, r2
 801e5b8:	00d2      	lsls	r2, r2, #3
 801e5ba:	120f      	asrs	r7, r1, #8
 801e5bc:	10c9      	asrs	r1, r1, #3
 801e5be:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e5c2:	b2d2      	uxtb	r2, r2
 801e5c4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801e5c8:	fb07 a70e 	mla	r7, r7, lr, sl
 801e5cc:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 801e5d0:	00c0      	lsls	r0, r0, #3
 801e5d2:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801e5d6:	b2bf      	uxth	r7, r7
 801e5d8:	b2c0      	uxtb	r0, r0
 801e5da:	fb1a fa09 	smulbb	sl, sl, r9
 801e5de:	fb10 f009 	smulbb	r0, r0, r9
 801e5e2:	fb01 a10e 	mla	r1, r1, lr, sl
 801e5e6:	fb02 020e 	mla	r2, r2, lr, r0
 801e5ea:	1c78      	adds	r0, r7, #1
 801e5ec:	b289      	uxth	r1, r1
 801e5ee:	b292      	uxth	r2, r2
 801e5f0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801e5f4:	f101 0a01 	add.w	sl, r1, #1
 801e5f8:	1c50      	adds	r0, r2, #1
 801e5fa:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 801e5fe:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e602:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e606:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e60a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801e60e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801e612:	4307      	orrs	r7, r0
 801e614:	ea47 070a 	orr.w	r7, r7, sl
 801e618:	f824 7b02 	strh.w	r7, [r4], #2
 801e61c:	4667      	mov	r7, ip
 801e61e:	e7b9      	b.n	801e594 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 801e620:	42a3      	cmp	r3, r4
 801e622:	d95f      	bls.n	801e6e4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 801e624:	463a      	mov	r2, r7
 801e626:	f812 1b02 	ldrb.w	r1, [r2], #2
 801e62a:	7878      	ldrb	r0, [r7, #1]
 801e62c:	4617      	mov	r7, r2
 801e62e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 801e632:	f824 1b02 	strh.w	r1, [r4], #2
 801e636:	e7f3      	b.n	801e620 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 801e638:	9901      	ldr	r1, [sp, #4]
 801e63a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e63e:	b2b2      	uxth	r2, r6
 801e640:	29ff      	cmp	r1, #255	@ 0xff
 801e642:	d044      	beq.n	801e6ce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 801e644:	ea4f 2922 	mov.w	r9, r2, asr #8
 801e648:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801e64c:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801e650:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 801e654:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 801e658:	4608      	mov	r0, r1
 801e65a:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 801e65e:	fb09 f901 	mul.w	r9, r9, r1
 801e662:	fb0e fe01 	mul.w	lr, lr, r1
 801e666:	00d1      	lsls	r1, r2, #3
 801e668:	b2c9      	uxtb	r1, r1
 801e66a:	4341      	muls	r1, r0
 801e66c:	429c      	cmp	r4, r3
 801e66e:	f4bf af61 	bcs.w	801e534 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801e672:	8822      	ldrh	r2, [r4, #0]
 801e674:	1210      	asrs	r0, r2, #8
 801e676:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801e67a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801e67e:	00d2      	lsls	r2, r2, #3
 801e680:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801e684:	fb00 900a 	mla	r0, r0, sl, r9
 801e688:	b2d2      	uxtb	r2, r2
 801e68a:	fb0c ec0a 	mla	ip, ip, sl, lr
 801e68e:	b280      	uxth	r0, r0
 801e690:	fb02 120a 	mla	r2, r2, sl, r1
 801e694:	fa1f fc8c 	uxth.w	ip, ip
 801e698:	b292      	uxth	r2, r2
 801e69a:	f100 0b01 	add.w	fp, r0, #1
 801e69e:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 801e6a2:	1c50      	adds	r0, r2, #1
 801e6a4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e6a8:	f10c 0201 	add.w	r2, ip, #1
 801e6ac:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 801e6b0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e6b4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801e6b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e6bc:	ea40 0b0b 	orr.w	fp, r0, fp
 801e6c0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 801e6c4:	ea4b 0b0c 	orr.w	fp, fp, ip
 801e6c8:	f824 bb02 	strh.w	fp, [r4], #2
 801e6cc:	e7ce      	b.n	801e66c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 801e6ce:	429c      	cmp	r4, r3
 801e6d0:	f4bf af30 	bcs.w	801e534 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801e6d4:	f824 2b02 	strh.w	r2, [r4], #2
 801e6d8:	e7f9      	b.n	801e6ce <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 801e6da:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801e6de:	4657      	mov	r7, sl
 801e6e0:	464d      	mov	r5, r9
 801e6e2:	e727      	b.n	801e534 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 801e6e4:	2300      	movs	r3, #0
 801e6e6:	e716      	b.n	801e516 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 801e6e8:	44bb      	add	fp, r7
 801e6ea:	4657      	mov	r7, sl
 801e6ec:	e724      	b.n	801e538 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 801e6ee:	bf00      	nop
 801e6f0:	24006600 	.word	0x24006600
 801e6f4:	240065fa 	.word	0x240065fa
 801e6f8:	24000100 	.word	0x24000100
 801e6fc:	2a01      	cmp	r2, #1
 801e6fe:	d12a      	bne.n	801e756 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 801e700:	f3c6 0104 	ubfx	r1, r6, #0, #5
 801e704:	f003 0203 	and.w	r2, r3, #3
 801e708:	f3c3 0081 	ubfx	r0, r3, #2, #2
 801e70c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e710:	3902      	subs	r1, #2
 801e712:	3802      	subs	r0, #2
 801e714:	3b02      	subs	r3, #2
 801e716:	4411      	add	r1, r2
 801e718:	f001 011f 	and.w	r1, r1, #31
 801e71c:	f361 0604 	bfi	r6, r1, #0, #5
 801e720:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 801e724:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801e728:	f360 164a 	bfi	r6, r0, #5, #6
 801e72c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e730:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 801e734:	f002 031f 	and.w	r3, r2, #31
 801e738:	2203      	movs	r2, #3
 801e73a:	f363 26cf 	bfi	r6, r3, #11, #5
 801e73e:	fb12 0303 	smlabb	r3, r2, r3, r0
 801e742:	2207      	movs	r2, #7
 801e744:	fb12 3301 	smlabb	r3, r2, r1, r3
 801e748:	9a03      	ldr	r2, [sp, #12]
 801e74a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e74e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e752:	809e      	strh	r6, [r3, #4]
 801e754:	e701      	b.n	801e55a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 801e756:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 801e75a:	4647      	mov	r7, r8
 801e75c:	45a8      	cmp	r8, r5
 801e75e:	bfa8      	it	ge
 801e760:	462f      	movge	r7, r5
 801e762:	2a02      	cmp	r2, #2
 801e764:	d154      	bne.n	801e810 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 801e766:	9b01      	ldr	r3, [sp, #4]
 801e768:	2bff      	cmp	r3, #255	@ 0xff
 801e76a:	d01a      	beq.n	801e7a2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 801e76c:	eb0b 0307 	add.w	r3, fp, r7
 801e770:	2b40      	cmp	r3, #64	@ 0x40
 801e772:	dd16      	ble.n	801e7a2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 801e774:	ea4f 094b 	mov.w	r9, fp, lsl #1
 801e778:	9800      	ldr	r0, [sp, #0]
 801e77a:	4649      	mov	r1, r9
 801e77c:	f7f2 fa90 	bl	8010ca0 <_ZN8touchgfx5paint9flushLineEPmi>
 801e780:	465a      	mov	r2, fp
 801e782:	9b01      	ldr	r3, [sp, #4]
 801e784:	4620      	mov	r0, r4
 801e786:	9900      	ldr	r1, [sp, #0]
 801e788:	444c      	add	r4, r9
 801e78a:	f7f2 fac7 	bl	8010d1c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801e78e:	9b00      	ldr	r3, [sp, #0]
 801e790:	f04f 0b00 	mov.w	fp, #0
 801e794:	461a      	mov	r2, r3
 801e796:	4b6a      	ldr	r3, [pc, #424]	@ (801e940 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801e798:	429a      	cmp	r2, r3
 801e79a:	bf0c      	ite	eq
 801e79c:	4b69      	ldreq	r3, [pc, #420]	@ (801e944 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 801e79e:	4b68      	ldrne	r3, [pc, #416]	@ (801e940 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801e7a0:	9300      	str	r3, [sp, #0]
 801e7a2:	4652      	mov	r2, sl
 801e7a4:	2100      	movs	r1, #0
 801e7a6:	42a9      	cmp	r1, r5
 801e7a8:	da2c      	bge.n	801e804 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 801e7aa:	4694      	mov	ip, r2
 801e7ac:	f04f 0903 	mov.w	r9, #3
 801e7b0:	42b9      	cmp	r1, r7
 801e7b2:	f81c 3b02 	ldrb.w	r3, [ip], #2
 801e7b6:	7852      	ldrb	r2, [r2, #1]
 801e7b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e7bc:	f3c3 1045 	ubfx	r0, r3, #5, #6
 801e7c0:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 801e7c4:	f003 021f 	and.w	r2, r3, #31
 801e7c8:	461e      	mov	r6, r3
 801e7ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e7ce:	fb19 000e 	smlabb	r0, r9, lr, r0
 801e7d2:	f04f 0e07 	mov.w	lr, #7
 801e7d6:	fb1e 0002 	smlabb	r0, lr, r2, r0
 801e7da:	9a03      	ldr	r2, [sp, #12]
 801e7dc:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801e7e0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e7e4:	8083      	strh	r3, [r0, #4]
 801e7e6:	da0a      	bge.n	801e7fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 801e7e8:	9a01      	ldr	r2, [sp, #4]
 801e7ea:	2aff      	cmp	r2, #255	@ 0xff
 801e7ec:	bf13      	iteet	ne
 801e7ee:	9a00      	ldrne	r2, [sp, #0]
 801e7f0:	8023      	strheq	r3, [r4, #0]
 801e7f2:	3402      	addeq	r4, #2
 801e7f4:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 801e7f8:	bf18      	it	ne
 801e7fa:	f10b 0b01 	addne.w	fp, fp, #1
 801e7fe:	3101      	adds	r1, #1
 801e800:	4662      	mov	r2, ip
 801e802:	e7d0      	b.n	801e7a6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 801e804:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801e808:	eba8 0807 	sub.w	r8, r8, r7
 801e80c:	1bed      	subs	r5, r5, r7
 801e80e:	e76c      	b.n	801e6ea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801e810:	9b01      	ldr	r3, [sp, #4]
 801e812:	eba8 0807 	sub.w	r8, r8, r7
 801e816:	1bed      	subs	r5, r5, r7
 801e818:	fa1f f986 	uxth.w	r9, r6
 801e81c:	2bff      	cmp	r3, #255	@ 0xff
 801e81e:	d027      	beq.n	801e870 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x574>
 801e820:	eb0b 0307 	add.w	r3, fp, r7
 801e824:	2b40      	cmp	r3, #64	@ 0x40
 801e826:	dd18      	ble.n	801e85a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x55e>
 801e828:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801e82c:	9800      	ldr	r0, [sp, #0]
 801e82e:	4619      	mov	r1, r3
 801e830:	930c      	str	r3, [sp, #48]	@ 0x30
 801e832:	f7f2 fa35 	bl	8010ca0 <_ZN8touchgfx5paint9flushLineEPmi>
 801e836:	465a      	mov	r2, fp
 801e838:	9b01      	ldr	r3, [sp, #4]
 801e83a:	4620      	mov	r0, r4
 801e83c:	9900      	ldr	r1, [sp, #0]
 801e83e:	f04f 0b00 	mov.w	fp, #0
 801e842:	f7f2 fa6b 	bl	8010d1c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801e846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e848:	441c      	add	r4, r3
 801e84a:	9b00      	ldr	r3, [sp, #0]
 801e84c:	461a      	mov	r2, r3
 801e84e:	4b3c      	ldr	r3, [pc, #240]	@ (801e940 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801e850:	429a      	cmp	r2, r3
 801e852:	bf0c      	ite	eq
 801e854:	4b3b      	ldreq	r3, [pc, #236]	@ (801e944 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 801e856:	4b3a      	ldrne	r3, [pc, #232]	@ (801e940 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x644>)
 801e858:	9300      	str	r3, [sp, #0]
 801e85a:	9b00      	ldr	r3, [sp, #0]
 801e85c:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 801e860:	463b      	mov	r3, r7
 801e862:	2b00      	cmp	r3, #0
 801e864:	f43f af40 	beq.w	801e6e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 801e868:	f822 9b02 	strh.w	r9, [r2], #2
 801e86c:	3b01      	subs	r3, #1
 801e86e:	e7f8      	b.n	801e862 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x566>
 801e870:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 801e874:	42a7      	cmp	r7, r4
 801e876:	f67f af38 	bls.w	801e6ea <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 801e87a:	f824 9b02 	strh.w	r9, [r4], #2
 801e87e:	e7f9      	b.n	801e874 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x578>
 801e880:	f1bb 0f00 	cmp.w	fp, #0
 801e884:	d00c      	beq.n	801e8a0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a4>
 801e886:	ea4f 084b 	mov.w	r8, fp, lsl #1
 801e88a:	9800      	ldr	r0, [sp, #0]
 801e88c:	4641      	mov	r1, r8
 801e88e:	f7f2 fa07 	bl	8010ca0 <_ZN8touchgfx5paint9flushLineEPmi>
 801e892:	4620      	mov	r0, r4
 801e894:	4444      	add	r4, r8
 801e896:	9b01      	ldr	r3, [sp, #4]
 801e898:	465a      	mov	r2, fp
 801e89a:	9900      	ldr	r1, [sp, #0]
 801e89c:	f7f2 fa3e 	bl	8010d1c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 801e8a0:	4b29      	ldr	r3, [pc, #164]	@ (801e948 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 801e8a2:	9a02      	ldr	r2, [sp, #8]
 801e8a4:	881b      	ldrh	r3, [r3, #0]
 801e8a6:	1a9b      	subs	r3, r3, r2
 801e8a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e8ac:	9b06      	ldr	r3, [sp, #24]
 801e8ae:	3301      	adds	r3, #1
 801e8b0:	9306      	str	r3, [sp, #24]
 801e8b2:	9a06      	ldr	r2, [sp, #24]
 801e8b4:	9b04      	ldr	r3, [sp, #16]
 801e8b6:	4293      	cmp	r3, r2
 801e8b8:	d120      	bne.n	801e8fc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x600>
 801e8ba:	9b05      	ldr	r3, [sp, #20]
 801e8bc:	2100      	movs	r1, #0
 801e8be:	9a05      	ldr	r2, [sp, #20]
 801e8c0:	f04f 0600 	mov.w	r6, #0
 801e8c4:	f103 0801 	add.w	r8, r3, #1
 801e8c8:	9b08      	ldr	r3, [sp, #32]
 801e8ca:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 801e8ce:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801e8d2:	2280      	movs	r2, #128	@ 0x80
 801e8d4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801e8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8da:	ba3f      	rev	r7, r7
 801e8dc:	eba9 0905 	sub.w	r9, r9, r5
 801e8e0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801e8e2:	441f      	add	r7, r3
 801e8e4:	f00a ff09 	bl	80296fa <memset>
 801e8e8:	fa1f f989 	uxth.w	r9, r9
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	f8cd 8014 	str.w	r8, [sp, #20]
 801e8f2:	9306      	str	r3, [sp, #24]
 801e8f4:	f7f2 f9bc 	bl	8010c70 <_ZN8touchgfx5paint8tearDownEv>
 801e8f8:	46ba      	mov	sl, r7
 801e8fa:	e58b      	b.n	801e414 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 801e8fc:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 801e900:	9b02      	ldr	r3, [sp, #8]
 801e902:	eba9 0903 	sub.w	r9, r9, r3
 801e906:	eba9 0505 	sub.w	r5, r9, r5
 801e90a:	fa1f f985 	uxth.w	r9, r5
 801e90e:	e7f1      	b.n	801e8f4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5f8>
 801e910:	4b0e      	ldr	r3, [pc, #56]	@ (801e94c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 801e912:	6818      	ldr	r0, [r3, #0]
 801e914:	6803      	ldr	r3, [r0, #0]
 801e916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e918:	4798      	blx	r3
 801e91a:	b013      	add	sp, #76	@ 0x4c
 801e91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e920:	9b02      	ldr	r3, [sp, #8]
 801e922:	9a02      	ldr	r2, [sp, #8]
 801e924:	42ab      	cmp	r3, r5
 801e926:	bfa8      	it	ge
 801e928:	462b      	movge	r3, r5
 801e92a:	eba2 0803 	sub.w	r8, r2, r3
 801e92e:	1aed      	subs	r5, r5, r3
 801e930:	e627      	b.n	801e582 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 801e932:	f108 38ff 	add.w	r8, r8, #4294967295
 801e936:	fa1f f986 	uxth.w	r9, r6
 801e93a:	2500      	movs	r5, #0
 801e93c:	2701      	movs	r7, #1
 801e93e:	e76f      	b.n	801e820 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x524>
 801e940:	24000100 	.word	0x24000100
 801e944:	24000200 	.word	0x24000200
 801e948:	240065fa 	.word	0x240065fa
 801e94c:	24006600 	.word	0x24006600

0801e950 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e954:	b08f      	sub	sp, #60	@ 0x3c
 801e956:	461c      	mov	r4, r3
 801e958:	460f      	mov	r7, r1
 801e95a:	9203      	str	r2, [sp, #12]
 801e95c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e960:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e962:	9202      	str	r2, [sp, #8]
 801e964:	2a00      	cmp	r2, #0
 801e966:	f000 8128 	beq.w	801ebba <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801e96a:	6820      	ldr	r0, [r4, #0]
 801e96c:	aa0a      	add	r2, sp, #40	@ 0x28
 801e96e:	6861      	ldr	r1, [r4, #4]
 801e970:	c203      	stmia	r2!, {r0, r1}
 801e972:	6818      	ldr	r0, [r3, #0]
 801e974:	aa0c      	add	r2, sp, #48	@ 0x30
 801e976:	6859      	ldr	r1, [r3, #4]
 801e978:	c203      	stmia	r2!, {r0, r1}
 801e97a:	a80a      	add	r0, sp, #40	@ 0x28
 801e97c:	f7f8 f9fa 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e980:	4621      	mov	r1, r4
 801e982:	a80c      	add	r0, sp, #48	@ 0x30
 801e984:	f7f8 fa3a 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e988:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801e98c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801e990:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e994:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801e998:	bfdb      	ittet	le
 801e99a:	b2b3      	uxthle	r3, r6
 801e99c:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801e9a0:	2301      	movgt	r3, #1
 801e9a2:	fb92 f3f3 	sdivle	r3, r2, r3
 801e9a6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801e9aa:	441d      	add	r5, r3
 801e9ac:	fb92 f1f3 	sdiv	r1, r2, r3
 801e9b0:	fa1f fc81 	uxth.w	ip, r1
 801e9b4:	3d01      	subs	r5, #1
 801e9b6:	fb0c 2413 	mls	r4, ip, r3, r2
 801e9ba:	4661      	mov	r1, ip
 801e9bc:	fb14 f406 	smulbb	r4, r4, r6
 801e9c0:	4404      	add	r4, r0
 801e9c2:	fb95 f5f3 	sdiv	r5, r5, r3
 801e9c6:	b2a4      	uxth	r4, r4
 801e9c8:	b121      	cbz	r1, 801e9d4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 801e9ca:	9b03      	ldr	r3, [sp, #12]
 801e9cc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e9d0:	ba1b      	rev	r3, r3
 801e9d2:	441f      	add	r7, r3
 801e9d4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801e9d8:	b2ad      	uxth	r5, r5
 801e9da:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801e9de:	4418      	add	r0, r3
 801e9e0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801e9e4:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801e9e8:	00ad      	lsls	r5, r5, #2
 801e9ea:	441a      	add	r2, r3
 801e9ec:	4b74      	ldr	r3, [pc, #464]	@ (801ebc0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801e9ee:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801e9f2:	6818      	ldr	r0, [r3, #0]
 801e9f4:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801e9f8:	6803      	ldr	r3, [r0, #0]
 801e9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e9fc:	4798      	blx	r3
 801e9fe:	4a71      	ldr	r2, [pc, #452]	@ (801ebc4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 801ea00:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801ea04:	2c00      	cmp	r4, #0
 801ea06:	8813      	ldrh	r3, [r2, #0]
 801ea08:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801ea0c:	bf0c      	ite	eq
 801ea0e:	46c8      	moveq	r8, r9
 801ea10:	f04f 0800 	movne.w	r8, #0
 801ea14:	9209      	str	r2, [sp, #36]	@ 0x24
 801ea16:	fb03 c101 	mla	r1, r3, r1, ip
 801ea1a:	4373      	muls	r3, r6
 801ea1c:	fa1f f888 	uxth.w	r8, r8
 801ea20:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801ea24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ea28:	9304      	str	r3, [sp, #16]
 801ea2a:	1d2b      	adds	r3, r5, #4
 801ea2c:	9305      	str	r3, [sp, #20]
 801ea2e:	2300      	movs	r3, #0
 801ea30:	9301      	str	r3, [sp, #4]
 801ea32:	9a04      	ldr	r2, [sp, #16]
 801ea34:	4282      	cmp	r2, r0
 801ea36:	f240 80bb 	bls.w	801ebb0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801ea3a:	b95b      	cbnz	r3, 801ea54 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 801ea3c:	783a      	ldrb	r2, [r7, #0]
 801ea3e:	0993      	lsrs	r3, r2, #6
 801ea40:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ea44:	9201      	str	r2, [sp, #4]
 801ea46:	1e5a      	subs	r2, r3, #1
 801ea48:	2a02      	cmp	r2, #2
 801ea4a:	bf8d      	iteet	hi
 801ea4c:	787b      	ldrbhi	r3, [r7, #1]
 801ea4e:	3701      	addls	r7, #1
 801ea50:	b29b      	uxthls	r3, r3
 801ea52:	3702      	addhi	r7, #2
 801ea54:	b184      	cbz	r4, 801ea78 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 801ea56:	429c      	cmp	r4, r3
 801ea58:	bf91      	iteee	ls
 801ea5a:	1b1c      	subls	r4, r3, r4
 801ea5c:	1ae4      	subhi	r4, r4, r3
 801ea5e:	46c4      	movhi	ip, r8
 801ea60:	f04f 0a00 	movhi.w	sl, #0
 801ea64:	bf9b      	ittet	ls
 801ea66:	fa1f fa84 	uxthls.w	sl, r4
 801ea6a:	2400      	movls	r4, #0
 801ea6c:	b2a4      	uxthhi	r4, r4
 801ea6e:	fa1f fc89 	uxthls.w	ip, r9
 801ea72:	4653      	mov	r3, sl
 801ea74:	46e0      	mov	r8, ip
 801ea76:	e7dc      	b.n	801ea32 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 801ea78:	2204      	movs	r2, #4
 801ea7a:	9905      	ldr	r1, [sp, #20]
 801ea7c:	4543      	cmp	r3, r8
 801ea7e:	4615      	mov	r5, r2
 801ea80:	9a01      	ldr	r2, [sp, #4]
 801ea82:	bf24      	itt	cs
 801ea84:	eba3 0a08 	subcs.w	sl, r3, r8
 801ea88:	46c6      	movcs	lr, r8
 801ea8a:	fb15 1202 	smlabb	r2, r5, r2, r1
 801ea8e:	9903      	ldr	r1, [sp, #12]
 801ea90:	bf3c      	itt	cc
 801ea92:	eba8 0c03 	subcc.w	ip, r8, r3
 801ea96:	469e      	movcc	lr, r3
 801ea98:	588a      	ldr	r2, [r1, r2]
 801ea9a:	bf26      	itte	cs
 801ea9c:	fa1f fa8a 	uxthcs.w	sl, sl
 801eaa0:	46a4      	movcs	ip, r4
 801eaa2:	fa1f fc8c 	uxthcc.w	ip, ip
 801eaa6:	ea4f 6112 	mov.w	r1, r2, lsr #24
 801eaaa:	bf38      	it	cc
 801eaac:	46a2      	movcc	sl, r4
 801eaae:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801eab2:	2900      	cmp	r1, #0
 801eab4:	d066      	beq.n	801eb84 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 801eab6:	29ff      	cmp	r1, #255	@ 0xff
 801eab8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801eabc:	d114      	bne.n	801eae8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801eabe:	9d02      	ldr	r5, [sp, #8]
 801eac0:	2dff      	cmp	r5, #255	@ 0xff
 801eac2:	d111      	bne.n	801eae8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 801eac4:	0951      	lsrs	r1, r2, #5
 801eac6:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801eaca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801eace:	4486      	add	lr, r0
 801ead0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801ead4:	f026 0607 	bic.w	r6, r6, #7
 801ead8:	430e      	orrs	r6, r1
 801eada:	4316      	orrs	r6, r2
 801eadc:	b2b6      	uxth	r6, r6
 801eade:	4586      	cmp	lr, r0
 801eae0:	d051      	beq.n	801eb86 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801eae2:	f820 6b02 	strh.w	r6, [r0], #2
 801eae6:	e7fa      	b.n	801eade <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801eae8:	9d02      	ldr	r5, [sp, #8]
 801eaea:	b2f6      	uxtb	r6, r6
 801eaec:	4486      	add	lr, r0
 801eaee:	4369      	muls	r1, r5
 801eaf0:	1c4d      	adds	r5, r1, #1
 801eaf2:	eb05 2521 	add.w	r5, r5, r1, asr #8
 801eaf6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801eafa:	b2d2      	uxtb	r2, r2
 801eafc:	122d      	asrs	r5, r5, #8
 801eafe:	ea6f 0b05 	mvn.w	fp, r5
 801eb02:	b2ad      	uxth	r5, r5
 801eb04:	fb11 f105 	smulbb	r1, r1, r5
 801eb08:	fa5f fb8b 	uxtb.w	fp, fp
 801eb0c:	fb16 f605 	smulbb	r6, r6, r5
 801eb10:	fb12 f205 	smulbb	r2, r2, r5
 801eb14:	b289      	uxth	r1, r1
 801eb16:	b2b6      	uxth	r6, r6
 801eb18:	b292      	uxth	r2, r2
 801eb1a:	9106      	str	r1, [sp, #24]
 801eb1c:	9607      	str	r6, [sp, #28]
 801eb1e:	9208      	str	r2, [sp, #32]
 801eb20:	4586      	cmp	lr, r0
 801eb22:	d030      	beq.n	801eb86 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801eb24:	8802      	ldrh	r2, [r0, #0]
 801eb26:	9906      	ldr	r1, [sp, #24]
 801eb28:	1216      	asrs	r6, r2, #8
 801eb2a:	10d5      	asrs	r5, r2, #3
 801eb2c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801eb30:	00d2      	lsls	r2, r2, #3
 801eb32:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801eb36:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801eb3a:	b2d2      	uxtb	r2, r2
 801eb3c:	fb06 160b 	mla	r6, r6, fp, r1
 801eb40:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801eb44:	9907      	ldr	r1, [sp, #28]
 801eb46:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801eb4a:	b2b6      	uxth	r6, r6
 801eb4c:	fb05 150b 	mla	r5, r5, fp, r1
 801eb50:	9908      	ldr	r1, [sp, #32]
 801eb52:	fb02 120b 	mla	r2, r2, fp, r1
 801eb56:	1c71      	adds	r1, r6, #1
 801eb58:	b2ad      	uxth	r5, r5
 801eb5a:	b292      	uxth	r2, r2
 801eb5c:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 801eb60:	1c51      	adds	r1, r2, #1
 801eb62:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801eb66:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801eb6a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801eb6e:	4316      	orrs	r6, r2
 801eb70:	1c6a      	adds	r2, r5, #1
 801eb72:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801eb76:	096d      	lsrs	r5, r5, #5
 801eb78:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801eb7c:	432e      	orrs	r6, r5
 801eb7e:	f820 6b02 	strh.w	r6, [r0], #2
 801eb82:	e7cd      	b.n	801eb20 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 801eb84:	4470      	add	r0, lr
 801eb86:	4543      	cmp	r3, r8
 801eb88:	f4ff af73 	bcc.w	801ea72 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801eb8c:	fa1f fc89 	uxth.w	ip, r9
 801eb90:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801eb94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb96:	eba4 040c 	sub.w	r4, r4, ip
 801eb9a:	881b      	ldrh	r3, [r3, #0]
 801eb9c:	b2a4      	uxth	r4, r4
 801eb9e:	eba3 0309 	sub.w	r3, r3, r9
 801eba2:	2c00      	cmp	r4, #0
 801eba4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801eba8:	bf18      	it	ne
 801ebaa:	f04f 0c00 	movne.w	ip, #0
 801ebae:	e760      	b.n	801ea72 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801ebb0:	4b03      	ldr	r3, [pc, #12]	@ (801ebc0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 801ebb2:	6818      	ldr	r0, [r3, #0]
 801ebb4:	6803      	ldr	r3, [r0, #0]
 801ebb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ebb8:	4798      	blx	r3
 801ebba:	b00f      	add	sp, #60	@ 0x3c
 801ebbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebc0:	24006600 	.word	0x24006600
 801ebc4:	240065fa 	.word	0x240065fa

0801ebc8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801ebc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebcc:	b093      	sub	sp, #76	@ 0x4c
 801ebce:	461c      	mov	r4, r3
 801ebd0:	9205      	str	r2, [sp, #20]
 801ebd2:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 801ebd6:	9101      	str	r1, [sp, #4]
 801ebd8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ebda:	9202      	str	r2, [sp, #8]
 801ebdc:	2a00      	cmp	r2, #0
 801ebde:	f000 812e 	beq.w	801ee3e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 801ebe2:	6820      	ldr	r0, [r4, #0]
 801ebe4:	aa0e      	add	r2, sp, #56	@ 0x38
 801ebe6:	6861      	ldr	r1, [r4, #4]
 801ebe8:	c203      	stmia	r2!, {r0, r1}
 801ebea:	6818      	ldr	r0, [r3, #0]
 801ebec:	aa10      	add	r2, sp, #64	@ 0x40
 801ebee:	6859      	ldr	r1, [r3, #4]
 801ebf0:	c203      	stmia	r2!, {r0, r1}
 801ebf2:	a80e      	add	r0, sp, #56	@ 0x38
 801ebf4:	f7f8 f8be 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebf8:	4621      	mov	r1, r4
 801ebfa:	a810      	add	r0, sp, #64	@ 0x40
 801ebfc:	f7f8 f8fe 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ec00:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 801ec04:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801ec08:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801ec0c:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801ec10:	bfdb      	ittet	le
 801ec12:	b2b3      	uxthle	r3, r6
 801ec14:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801ec18:	2301      	movgt	r3, #1
 801ec1a:	fb92 f3f3 	sdivle	r3, r2, r3
 801ec1e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801ec22:	441d      	add	r5, r3
 801ec24:	fb92 f1f3 	sdiv	r1, r2, r3
 801ec28:	fa1f fc81 	uxth.w	ip, r1
 801ec2c:	3d01      	subs	r5, #1
 801ec2e:	fb0c 2413 	mls	r4, ip, r3, r2
 801ec32:	4661      	mov	r1, ip
 801ec34:	fb14 f406 	smulbb	r4, r4, r6
 801ec38:	4404      	add	r4, r0
 801ec3a:	fb95 f5f3 	sdiv	r5, r5, r3
 801ec3e:	b2a4      	uxth	r4, r4
 801ec40:	b131      	cbz	r1, 801ec50 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 801ec42:	9b05      	ldr	r3, [sp, #20]
 801ec44:	9901      	ldr	r1, [sp, #4]
 801ec46:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ec4a:	ba1b      	rev	r3, r3
 801ec4c:	4419      	add	r1, r3
 801ec4e:	9101      	str	r1, [sp, #4]
 801ec50:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801ec54:	b2ad      	uxth	r5, r5
 801ec56:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801ec5a:	4418      	add	r0, r3
 801ec5c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801ec60:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 801ec64:	00ad      	lsls	r5, r5, #2
 801ec66:	441a      	add	r2, r3
 801ec68:	4b76      	ldr	r3, [pc, #472]	@ (801ee44 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801ec6a:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801ec6e:	6818      	ldr	r0, [r3, #0]
 801ec70:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801ec74:	6803      	ldr	r3, [r0, #0]
 801ec76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec78:	4798      	blx	r3
 801ec7a:	4973      	ldr	r1, [pc, #460]	@ (801ee48 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 801ec7c:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 801ec80:	2c00      	cmp	r4, #0
 801ec82:	880b      	ldrh	r3, [r1, #0]
 801ec84:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801ec88:	910d      	str	r1, [sp, #52]	@ 0x34
 801ec8a:	fb03 c202 	mla	r2, r3, r2, ip
 801ec8e:	bf08      	it	eq
 801ec90:	46dc      	moveq	ip, fp
 801ec92:	fb03 f306 	mul.w	r3, r3, r6
 801ec96:	bf18      	it	ne
 801ec98:	f04f 0c00 	movne.w	ip, #0
 801ec9c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801eca0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801eca4:	fa1f fc8c 	uxth.w	ip, ip
 801eca8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ecac:	9106      	str	r1, [sp, #24]
 801ecae:	9308      	str	r3, [sp, #32]
 801ecb0:	1d2b      	adds	r3, r5, #4
 801ecb2:	9309      	str	r3, [sp, #36]	@ 0x24
 801ecb4:	9b02      	ldr	r3, [sp, #8]
 801ecb6:	43da      	mvns	r2, r3
 801ecb8:	2300      	movs	r3, #0
 801ecba:	b2d2      	uxtb	r2, r2
 801ecbc:	9303      	str	r3, [sp, #12]
 801ecbe:	9207      	str	r2, [sp, #28]
 801ecc0:	9a08      	ldr	r2, [sp, #32]
 801ecc2:	4282      	cmp	r2, r0
 801ecc4:	f240 80b6 	bls.w	801ee34 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 801ecc8:	b963      	cbnz	r3, 801ece4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801ecca:	9b01      	ldr	r3, [sp, #4]
 801eccc:	781a      	ldrb	r2, [r3, #0]
 801ecce:	0993      	lsrs	r3, r2, #6
 801ecd0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ecd4:	9203      	str	r2, [sp, #12]
 801ecd6:	1e5a      	subs	r2, r3, #1
 801ecd8:	2a02      	cmp	r2, #2
 801ecda:	d815      	bhi.n	801ed08 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 801ecdc:	9a01      	ldr	r2, [sp, #4]
 801ecde:	b29b      	uxth	r3, r3
 801ece0:	3201      	adds	r2, #1
 801ece2:	9201      	str	r2, [sp, #4]
 801ece4:	b1b4      	cbz	r4, 801ed14 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 801ece6:	429c      	cmp	r4, r3
 801ece8:	bf91      	iteee	ls
 801ecea:	1b1c      	subls	r4, r3, r4
 801ecec:	1ae4      	subhi	r4, r4, r3
 801ecee:	4666      	movhi	r6, ip
 801ecf0:	f04f 0800 	movhi.w	r8, #0
 801ecf4:	bf9b      	ittet	ls
 801ecf6:	fa1f f884 	uxthls.w	r8, r4
 801ecfa:	2400      	movls	r4, #0
 801ecfc:	b2a4      	uxthhi	r4, r4
 801ecfe:	fa1f f68b 	uxthls.w	r6, fp
 801ed02:	4643      	mov	r3, r8
 801ed04:	46b4      	mov	ip, r6
 801ed06:	e7db      	b.n	801ecc0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 801ed08:	9a01      	ldr	r2, [sp, #4]
 801ed0a:	9b01      	ldr	r3, [sp, #4]
 801ed0c:	3202      	adds	r2, #2
 801ed0e:	785b      	ldrb	r3, [r3, #1]
 801ed10:	9201      	str	r2, [sp, #4]
 801ed12:	e7e7      	b.n	801ece4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 801ed14:	2203      	movs	r2, #3
 801ed16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ed18:	4563      	cmp	r3, ip
 801ed1a:	4615      	mov	r5, r2
 801ed1c:	9a03      	ldr	r2, [sp, #12]
 801ed1e:	bf2c      	ite	cs
 801ed20:	eba3 080c 	subcs.w	r8, r3, ip
 801ed24:	ebac 0603 	subcc.w	r6, ip, r3
 801ed28:	fb15 1202 	smlabb	r2, r5, r2, r1
 801ed2c:	9905      	ldr	r1, [sp, #20]
 801ed2e:	bf24      	itt	cs
 801ed30:	fa1f f888 	uxthcs.w	r8, r8
 801ed34:	46e1      	movcs	r9, ip
 801ed36:	eb01 0502 	add.w	r5, r1, r2
 801ed3a:	9902      	ldr	r1, [sp, #8]
 801ed3c:	bf2f      	iteee	cs
 801ed3e:	4626      	movcs	r6, r4
 801ed40:	b2b6      	uxthcc	r6, r6
 801ed42:	4699      	movcc	r9, r3
 801ed44:	46a0      	movcc	r8, r4
 801ed46:	29ff      	cmp	r1, #255	@ 0xff
 801ed48:	d04a      	beq.n	801ede0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 801ed4a:	9f06      	ldr	r7, [sp, #24]
 801ed4c:	46ca      	mov	sl, r9
 801ed4e:	78a9      	ldrb	r1, [r5, #2]
 801ed50:	9004      	str	r0, [sp, #16]
 801ed52:	4379      	muls	r1, r7
 801ed54:	910a      	str	r1, [sp, #40]	@ 0x28
 801ed56:	7869      	ldrb	r1, [r5, #1]
 801ed58:	4379      	muls	r1, r7
 801ed5a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ed5c:	9905      	ldr	r1, [sp, #20]
 801ed5e:	5c8a      	ldrb	r2, [r1, r2]
 801ed60:	437a      	muls	r2, r7
 801ed62:	920c      	str	r2, [sp, #48]	@ 0x30
 801ed64:	f1ba 0f00 	cmp.w	sl, #0
 801ed68:	d03d      	beq.n	801ede6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 801ed6a:	9a04      	ldr	r2, [sp, #16]
 801ed6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ed70:	9f07      	ldr	r7, [sp, #28]
 801ed72:	8812      	ldrh	r2, [r2, #0]
 801ed74:	fa1f fa8a 	uxth.w	sl, sl
 801ed78:	46be      	mov	lr, r7
 801ed7a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801ed7c:	1215      	asrs	r5, r2, #8
 801ed7e:	10d1      	asrs	r1, r2, #3
 801ed80:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801ed84:	00d2      	lsls	r2, r2, #3
 801ed86:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801ed8a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801ed8e:	b2d2      	uxtb	r2, r2
 801ed90:	fb05 750e 	mla	r5, r5, lr, r7
 801ed94:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801ed98:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ed9a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ed9e:	b2ad      	uxth	r5, r5
 801eda0:	fb01 710e 	mla	r1, r1, lr, r7
 801eda4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801eda6:	fb02 720e 	mla	r2, r2, lr, r7
 801edaa:	f105 0e01 	add.w	lr, r5, #1
 801edae:	b289      	uxth	r1, r1
 801edb0:	b292      	uxth	r2, r2
 801edb2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801edb6:	f102 0e01 	add.w	lr, r2, #1
 801edba:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801edbe:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801edc2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801edc6:	4315      	orrs	r5, r2
 801edc8:	1c4a      	adds	r2, r1, #1
 801edca:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801edce:	9a04      	ldr	r2, [sp, #16]
 801edd0:	0949      	lsrs	r1, r1, #5
 801edd2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801edd6:	430d      	orrs	r5, r1
 801edd8:	f822 5b02 	strh.w	r5, [r2], #2
 801eddc:	9204      	str	r2, [sp, #16]
 801edde:	e7c1      	b.n	801ed64 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801ede0:	4649      	mov	r1, r9
 801ede2:	4686      	mov	lr, r0
 801ede4:	b999      	cbnz	r1, 801ee0e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 801ede6:	4563      	cmp	r3, ip
 801ede8:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 801edec:	d389      	bcc.n	801ed02 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801edee:	fa1f f68b 	uxth.w	r6, fp
 801edf2:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 801edf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801edf8:	1ba4      	subs	r4, r4, r6
 801edfa:	881b      	ldrh	r3, [r3, #0]
 801edfc:	b2a4      	uxth	r4, r4
 801edfe:	eba3 030b 	sub.w	r3, r3, fp
 801ee02:	2c00      	cmp	r4, #0
 801ee04:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ee08:	bf18      	it	ne
 801ee0a:	2600      	movne	r6, #0
 801ee0c:	e779      	b.n	801ed02 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 801ee0e:	78aa      	ldrb	r2, [r5, #2]
 801ee10:	3901      	subs	r1, #1
 801ee12:	4f0e      	ldr	r7, [pc, #56]	@ (801ee4c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 801ee14:	b289      	uxth	r1, r1
 801ee16:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 801ee1a:	786a      	ldrb	r2, [r5, #1]
 801ee1c:	00d2      	lsls	r2, r2, #3
 801ee1e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ee22:	ea4a 0202 	orr.w	r2, sl, r2
 801ee26:	f895 a000 	ldrb.w	sl, [r5]
 801ee2a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 801ee2e:	f82e 2b02 	strh.w	r2, [lr], #2
 801ee32:	e7d7      	b.n	801ede4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 801ee34:	4b03      	ldr	r3, [pc, #12]	@ (801ee44 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 801ee36:	6818      	ldr	r0, [r3, #0]
 801ee38:	6803      	ldr	r3, [r0, #0]
 801ee3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ee3c:	4798      	blx	r3
 801ee3e:	b013      	add	sp, #76	@ 0x4c
 801ee40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee44:	24006600 	.word	0x24006600
 801ee48:	240065fa 	.word	0x240065fa
 801ee4c:	fffff800 	.word	0xfffff800

0801ee50 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee54:	b09d      	sub	sp, #116	@ 0x74
 801ee56:	461c      	mov	r4, r3
 801ee58:	4683      	mov	fp, r0
 801ee5a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ee5c:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 801ee60:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801ee64:	920e      	str	r2, [sp, #56]	@ 0x38
 801ee66:	2a00      	cmp	r2, #0
 801ee68:	f000 81e4 	beq.w	801f234 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 801ee6c:	6820      	ldr	r0, [r4, #0]
 801ee6e:	aa18      	add	r2, sp, #96	@ 0x60
 801ee70:	6861      	ldr	r1, [r4, #4]
 801ee72:	c203      	stmia	r2!, {r0, r1}
 801ee74:	6818      	ldr	r0, [r3, #0]
 801ee76:	aa1a      	add	r2, sp, #104	@ 0x68
 801ee78:	6859      	ldr	r1, [r3, #4]
 801ee7a:	c203      	stmia	r2!, {r0, r1}
 801ee7c:	a818      	add	r0, sp, #96	@ 0x60
 801ee7e:	f7f7 ff79 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ee82:	4621      	mov	r1, r4
 801ee84:	a81a      	add	r0, sp, #104	@ 0x68
 801ee86:	f7f7 ffb9 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ee8a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801ee8e:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 801ee92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ee96:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801ee9a:	bfdb      	ittet	le
 801ee9c:	b29a      	uxthle	r2, r3
 801ee9e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801eea2:	2201      	movgt	r2, #1
 801eea4:	fb91 f2f2 	sdivle	r2, r1, r2
 801eea8:	9202      	str	r2, [sp, #8]
 801eeaa:	9802      	ldr	r0, [sp, #8]
 801eeac:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801eeb0:	9902      	ldr	r1, [sp, #8]
 801eeb2:	fb92 f0f0 	sdiv	r0, r2, r0
 801eeb6:	b280      	uxth	r0, r0
 801eeb8:	440c      	add	r4, r1
 801eeba:	900f      	str	r0, [sp, #60]	@ 0x3c
 801eebc:	3c01      	subs	r4, #1
 801eebe:	9802      	ldr	r0, [sp, #8]
 801eec0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801eec2:	fb05 2510 	mls	r5, r5, r0, r2
 801eec6:	fb94 f4f1 	sdiv	r4, r4, r1
 801eeca:	fb15 f503 	smulbb	r5, r5, r3
 801eece:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801eed2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801eed6:	3401      	adds	r4, #1
 801eed8:	440d      	add	r5, r1
 801eeda:	4419      	add	r1, r3
 801eedc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801eee0:	b2a4      	uxth	r4, r4
 801eee2:	441a      	add	r2, r3
 801eee4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801eee8:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801eeec:	00a4      	lsls	r4, r4, #2
 801eeee:	9306      	str	r3, [sp, #24]
 801eef0:	b2ad      	uxth	r5, r5
 801eef2:	4bb3      	ldr	r3, [pc, #716]	@ (801f1c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 801eef4:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801eef8:	6818      	ldr	r0, [r3, #0]
 801eefa:	6803      	ldr	r3, [r0, #0]
 801eefc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eefe:	4798      	blx	r3
 801ef00:	4bb0      	ldr	r3, [pc, #704]	@ (801f1c4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 801ef02:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801ef06:	2d00      	cmp	r5, #0
 801ef08:	881a      	ldrh	r2, [r3, #0]
 801ef0a:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 801ef0e:	fb02 f606 	mul.w	r6, r2, r6
 801ef12:	fb02 7101 	mla	r1, r2, r1, r7
 801ef16:	9316      	str	r3, [sp, #88]	@ 0x58
 801ef18:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 801ef1c:	4baa      	ldr	r3, [pc, #680]	@ (801f1c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 801ef1e:	bf18      	it	ne
 801ef20:	2100      	movne	r1, #0
 801ef22:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 801ef26:	eba3 030b 	sub.w	r3, r3, fp
 801ef2a:	920a      	str	r2, [sp, #40]	@ 0x28
 801ef2c:	f104 0204 	add.w	r2, r4, #4
 801ef30:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ef32:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ef34:	9a06      	ldr	r2, [sp, #24]
 801ef36:	bf08      	it	eq
 801ef38:	4611      	moveq	r1, r2
 801ef3a:	2200      	movs	r2, #0
 801ef3c:	b289      	uxth	r1, r1
 801ef3e:	920d      	str	r2, [sp, #52]	@ 0x34
 801ef40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ef42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef44:	fa12 f383 	uxtah	r3, r2, r3
 801ef48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ef4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ef4e:	3304      	adds	r3, #4
 801ef50:	9308      	str	r3, [sp, #32]
 801ef52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ef54:	4543      	cmp	r3, r8
 801ef56:	f240 8168 	bls.w	801f22a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 801ef5a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801ef5e:	f04f 0e01 	mov.w	lr, #1
 801ef62:	9a02      	ldr	r2, [sp, #8]
 801ef64:	9808      	ldr	r0, [sp, #32]
 801ef66:	fbb5 f3f3 	udiv	r3, r5, r3
 801ef6a:	1ad3      	subs	r3, r2, r3
 801ef6c:	7800      	ldrb	r0, [r0, #0]
 801ef6e:	b29b      	uxth	r3, r3
 801ef70:	9010      	str	r0, [sp, #64]	@ 0x40
 801ef72:	3001      	adds	r0, #1
 801ef74:	9314      	str	r3, [sp, #80]	@ 0x50
 801ef76:	9b08      	ldr	r3, [sp, #32]
 801ef78:	9007      	str	r0, [sp, #28]
 801ef7a:	785a      	ldrb	r2, [r3, #1]
 801ef7c:	789b      	ldrb	r3, [r3, #2]
 801ef7e:	021b      	lsls	r3, r3, #8
 801ef80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ef84:	9a08      	ldr	r2, [sp, #32]
 801ef86:	78d2      	ldrb	r2, [r2, #3]
 801ef88:	4313      	orrs	r3, r2
 801ef8a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ef8c:	441a      	add	r2, r3
 801ef8e:	1c50      	adds	r0, r2, #1
 801ef90:	7852      	ldrb	r2, [r2, #1]
 801ef92:	9005      	str	r0, [sp, #20]
 801ef94:	0212      	lsls	r2, r2, #8
 801ef96:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ef98:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801ef9c:	5cc3      	ldrb	r3, [r0, r3]
 801ef9e:	431a      	orrs	r2, r3
 801efa0:	b293      	uxth	r3, r2
 801efa2:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 801efa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801efa8:	2300      	movs	r3, #0
 801efaa:	9309      	str	r3, [sp, #36]	@ 0x24
 801efac:	2301      	movs	r3, #1
 801efae:	9301      	str	r3, [sp, #4]
 801efb0:	9304      	str	r3, [sp, #16]
 801efb2:	2300      	movs	r3, #0
 801efb4:	9303      	str	r3, [sp, #12]
 801efb6:	2d00      	cmp	r5, #0
 801efb8:	d07d      	beq.n	801f0b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801efba:	45ae      	cmp	lr, r5
 801efbc:	d26c      	bcs.n	801f098 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 801efbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801efc0:	eba5 050e 	sub.w	r5, r5, lr
 801efc4:	460c      	mov	r4, r1
 801efc6:	4543      	cmp	r3, r8
 801efc8:	b2ad      	uxth	r5, r5
 801efca:	d802      	bhi.n	801efd2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801efcc:	e071      	b.n	801f0b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 801efce:	2b00      	cmp	r3, #0
 801efd0:	d15d      	bne.n	801f08e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 801efd2:	9b05      	ldr	r3, [sp, #20]
 801efd4:	9a04      	ldr	r2, [sp, #16]
 801efd6:	785b      	ldrb	r3, [r3, #1]
 801efd8:	f1c2 0207 	rsb	r2, r2, #7
 801efdc:	9904      	ldr	r1, [sp, #16]
 801efde:	4093      	lsls	r3, r2
 801efe0:	005b      	lsls	r3, r3, #1
 801efe2:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801efe6:	9b05      	ldr	r3, [sp, #20]
 801efe8:	781b      	ldrb	r3, [r3, #0]
 801efea:	410b      	asrs	r3, r1
 801efec:	3101      	adds	r1, #1
 801efee:	b2c9      	uxtb	r1, r1
 801eff0:	b2db      	uxtb	r3, r3
 801eff2:	2908      	cmp	r1, #8
 801eff4:	9104      	str	r1, [sp, #16]
 801eff6:	9905      	ldr	r1, [sp, #20]
 801eff8:	ea43 0302 	orr.w	r3, r3, r2
 801effc:	bf0c      	ite	eq
 801effe:	3102      	addeq	r1, #2
 801f000:	3101      	addne	r1, #1
 801f002:	b29a      	uxth	r2, r3
 801f004:	bf05      	ittet	eq
 801f006:	9105      	streq	r1, [sp, #20]
 801f008:	2100      	moveq	r1, #0
 801f00a:	9105      	strne	r1, [sp, #20]
 801f00c:	9104      	streq	r1, [sp, #16]
 801f00e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f010:	4291      	cmp	r1, r2
 801f012:	d30a      	bcc.n	801f02a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 801f014:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 801f018:	2301      	movs	r3, #1
 801f01a:	9907      	ldr	r1, [sp, #28]
 801f01c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801f020:	d30f      	bcc.n	801f042 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801f022:	2100      	movs	r1, #0
 801f024:	9301      	str	r3, [sp, #4]
 801f026:	9103      	str	r1, [sp, #12]
 801f028:	e032      	b.n	801f090 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 801f02a:	9b07      	ldr	r3, [sp, #28]
 801f02c:	429a      	cmp	r2, r3
 801f02e:	d318      	bcc.n	801f062 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 801f030:	9b01      	ldr	r3, [sp, #4]
 801f032:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 801f036:	445b      	add	r3, fp
 801f038:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801f03c:	9b01      	ldr	r3, [sp, #4]
 801f03e:	3301      	adds	r3, #1
 801f040:	b29b      	uxth	r3, r3
 801f042:	9907      	ldr	r1, [sp, #28]
 801f044:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 801f048:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801f04c:	7108      	strb	r0, [r1, #4]
 801f04e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f050:	80c8      	strh	r0, [r1, #6]
 801f052:	9801      	ldr	r0, [sp, #4]
 801f054:	3001      	adds	r0, #1
 801f056:	7148      	strb	r0, [r1, #5]
 801f058:	9907      	ldr	r1, [sp, #28]
 801f05a:	3101      	adds	r1, #1
 801f05c:	b289      	uxth	r1, r1
 801f05e:	9107      	str	r1, [sp, #28]
 801f060:	e7df      	b.n	801f022 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801f062:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 801f066:	4611      	mov	r1, r2
 801f068:	795b      	ldrb	r3, [r3, #5]
 801f06a:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 801f06e:	4458      	add	r0, fp
 801f070:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801f072:	4406      	add	r6, r0
 801f074:	2e00      	cmp	r6, #0
 801f076:	dd06      	ble.n	801f086 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 801f078:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801f07c:	790e      	ldrb	r6, [r1, #4]
 801f07e:	f800 6d01 	strb.w	r6, [r0, #-1]!
 801f082:	88c9      	ldrh	r1, [r1, #6]
 801f084:	e7f4      	b.n	801f070 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 801f086:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 801f08a:	b29b      	uxth	r3, r3
 801f08c:	e7c5      	b.n	801f01a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 801f08e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f090:	4621      	mov	r1, r4
 801f092:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f094:	469e      	mov	lr, r3
 801f096:	e78e      	b.n	801efb6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 801f098:	9a03      	ldr	r2, [sp, #12]
 801f09a:	ebae 0305 	sub.w	r3, lr, r5
 801f09e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801f0a2:	442a      	add	r2, r5
 801f0a4:	b29b      	uxth	r3, r3
 801f0a6:	b292      	uxth	r2, r2
 801f0a8:	9203      	str	r2, [sp, #12]
 801f0aa:	2500      	movs	r5, #0
 801f0ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f0ae:	4542      	cmp	r2, r8
 801f0b0:	d88d      	bhi.n	801efce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 801f0b2:	4621      	mov	r1, r4
 801f0b4:	e74d      	b.n	801ef52 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 801f0b6:	458e      	cmp	lr, r1
 801f0b8:	f04f 0900 	mov.w	r9, #0
 801f0bc:	bf2b      	itete	cs
 801f0be:	ebae 0301 	subcs.w	r3, lr, r1
 801f0c2:	eba1 040e 	subcc.w	r4, r1, lr
 801f0c6:	462c      	movcs	r4, r5
 801f0c8:	462b      	movcc	r3, r5
 801f0ca:	bf27      	ittee	cs
 801f0cc:	b29b      	uxthcs	r3, r3
 801f0ce:	910c      	strcs	r1, [sp, #48]	@ 0x30
 801f0d0:	b2a4      	uxthcc	r4, r4
 801f0d2:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 801f0d6:	9a03      	ldr	r2, [sp, #12]
 801f0d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801f0da:	444a      	add	r2, r9
 801f0dc:	4548      	cmp	r0, r9
 801f0de:	b292      	uxth	r2, r2
 801f0e0:	d074      	beq.n	801f1cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 801f0e2:	2004      	movs	r0, #4
 801f0e4:	445a      	add	r2, fp
 801f0e6:	4605      	mov	r5, r0
 801f0e8:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801f0ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f0ee:	fb15 0202 	smlabb	r2, r5, r2, r0
 801f0f2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f0f4:	5880      	ldr	r0, [r0, r2]
 801f0f6:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 801f0fa:	d014      	beq.n	801f126 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801f0fc:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801f100:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801f104:	d112      	bne.n	801f12c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801f106:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f108:	2aff      	cmp	r2, #255	@ 0xff
 801f10a:	d10f      	bne.n	801f12c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 801f10c:	0942      	lsrs	r2, r0, #5
 801f10e:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 801f112:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f116:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f11a:	f025 0507 	bic.w	r5, r5, #7
 801f11e:	4315      	orrs	r5, r2
 801f120:	4305      	orrs	r5, r0
 801f122:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 801f126:	f109 0901 	add.w	r9, r9, #1
 801f12a:	e7d4      	b.n	801f0d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 801f12c:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 801f130:	b2ed      	uxtb	r5, r5
 801f132:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f136:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f13a:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 801f13e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f142:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801f146:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f14a:	9215      	str	r2, [sp, #84]	@ 0x54
 801f14c:	fa5f fc8c 	uxtb.w	ip, ip
 801f150:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f152:	b2c0      	uxtb	r0, r0
 801f154:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801f158:	fb02 fa0a 	mul.w	sl, r2, sl
 801f15c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801f160:	f10a 0201 	add.w	r2, sl, #1
 801f164:	eb02 222a 	add.w	r2, r2, sl, asr #8
 801f168:	1212      	asrs	r2, r2, #8
 801f16a:	fa1f fa82 	uxth.w	sl, r2
 801f16e:	43d2      	mvns	r2, r2
 801f170:	fb16 f60a 	smulbb	r6, r6, sl
 801f174:	b2d2      	uxtb	r2, r2
 801f176:	fb10 f00a 	smulbb	r0, r0, sl
 801f17a:	fb07 6702 	mla	r7, r7, r2, r6
 801f17e:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f180:	fb0c 0002 	mla	r0, ip, r2, r0
 801f184:	fb15 f50a 	smulbb	r5, r5, sl
 801f188:	b2bf      	uxth	r7, r7
 801f18a:	b280      	uxth	r0, r0
 801f18c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801f190:	fb06 5602 	mla	r6, r6, r2, r5
 801f194:	1c7a      	adds	r2, r7, #1
 801f196:	1c45      	adds	r5, r0, #1
 801f198:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f19c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f1a0:	b2b6      	uxth	r6, r6
 801f1a2:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f1a6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f1aa:	432f      	orrs	r7, r5
 801f1ac:	1c75      	adds	r5, r6, #1
 801f1ae:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801f1b2:	096d      	lsrs	r5, r5, #5
 801f1b4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801f1b8:	432f      	orrs	r7, r5
 801f1ba:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 801f1be:	e7b2      	b.n	801f126 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 801f1c0:	24006600 	.word	0x24006600
 801f1c4:	240065fa 	.word	0x240065fa
 801f1c8:	fffff7fb 	.word	0xfffff7fb
 801f1cc:	9203      	str	r2, [sp, #12]
 801f1ce:	458e      	cmp	lr, r1
 801f1d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f1d2:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801f1d6:	f4ff af68 	bcc.w	801f0aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 801f1da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f1dc:	9906      	ldr	r1, [sp, #24]
 801f1de:	8812      	ldrh	r2, [r2, #0]
 801f1e0:	1a52      	subs	r2, r2, r1
 801f1e2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801f1e4:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801f1e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f1ea:	3201      	adds	r2, #1
 801f1ec:	428a      	cmp	r2, r1
 801f1ee:	9209      	str	r2, [sp, #36]	@ 0x24
 801f1f0:	d111      	bne.n	801f216 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 801f1f2:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801f1f6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 801f1fa:	9b06      	ldr	r3, [sp, #24]
 801f1fc:	eba5 0509 	sub.w	r5, r5, r9
 801f200:	b2ad      	uxth	r5, r5
 801f202:	2d00      	cmp	r5, #0
 801f204:	bf08      	it	eq
 801f206:	4619      	moveq	r1, r3
 801f208:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f20a:	bf18      	it	ne
 801f20c:	2100      	movne	r1, #0
 801f20e:	3301      	adds	r3, #1
 801f210:	b289      	uxth	r1, r1
 801f212:	930d      	str	r3, [sp, #52]	@ 0x34
 801f214:	e694      	b.n	801ef40 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 801f216:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801f21a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801f21e:	1b2d      	subs	r5, r5, r4
 801f220:	b2ad      	uxth	r5, r5
 801f222:	2d00      	cmp	r5, #0
 801f224:	bf18      	it	ne
 801f226:	2400      	movne	r4, #0
 801f228:	e740      	b.n	801f0ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 801f22a:	4b04      	ldr	r3, [pc, #16]	@ (801f23c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 801f22c:	6818      	ldr	r0, [r3, #0]
 801f22e:	6803      	ldr	r3, [r0, #0]
 801f230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f232:	4798      	blx	r3
 801f234:	b01d      	add	sp, #116	@ 0x74
 801f236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f23a:	bf00      	nop
 801f23c:	24006600 	.word	0x24006600

0801f240 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f244:	b09f      	sub	sp, #124	@ 0x7c
 801f246:	461d      	mov	r5, r3
 801f248:	4604      	mov	r4, r0
 801f24a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f24c:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 801f250:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 801f254:	920a      	str	r2, [sp, #40]	@ 0x28
 801f256:	2a00      	cmp	r2, #0
 801f258:	f000 81fe 	beq.w	801f658 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 801f25c:	6828      	ldr	r0, [r5, #0]
 801f25e:	aa1a      	add	r2, sp, #104	@ 0x68
 801f260:	6869      	ldr	r1, [r5, #4]
 801f262:	c203      	stmia	r2!, {r0, r1}
 801f264:	6818      	ldr	r0, [r3, #0]
 801f266:	aa1c      	add	r2, sp, #112	@ 0x70
 801f268:	6859      	ldr	r1, [r3, #4]
 801f26a:	c203      	stmia	r2!, {r0, r1}
 801f26c:	a81a      	add	r0, sp, #104	@ 0x68
 801f26e:	f7f7 fd81 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f272:	4629      	mov	r1, r5
 801f274:	a81c      	add	r0, sp, #112	@ 0x70
 801f276:	f7f7 fdc1 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f27a:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801f27e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801f282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801f286:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 801f28a:	bfdb      	ittet	le
 801f28c:	b29a      	uxthle	r2, r3
 801f28e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801f292:	2201      	movgt	r2, #1
 801f294:	fb91 f2f2 	sdivle	r2, r1, r2
 801f298:	9201      	str	r2, [sp, #4]
 801f29a:	9801      	ldr	r0, [sp, #4]
 801f29c:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 801f2a0:	9901      	ldr	r1, [sp, #4]
 801f2a2:	fb92 f0f0 	sdiv	r0, r2, r0
 801f2a6:	b280      	uxth	r0, r0
 801f2a8:	440e      	add	r6, r1
 801f2aa:	9010      	str	r0, [sp, #64]	@ 0x40
 801f2ac:	3e01      	subs	r6, #1
 801f2ae:	9801      	ldr	r0, [sp, #4]
 801f2b0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801f2b2:	fb05 2510 	mls	r5, r5, r0, r2
 801f2b6:	fb96 f6f1 	sdiv	r6, r6, r1
 801f2ba:	fb15 f503 	smulbb	r5, r5, r3
 801f2be:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 801f2c2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801f2c6:	3601      	adds	r6, #1
 801f2c8:	440d      	add	r5, r1
 801f2ca:	4419      	add	r1, r3
 801f2cc:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801f2d0:	b2b6      	uxth	r6, r6
 801f2d2:	441a      	add	r2, r3
 801f2d4:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 801f2d8:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 801f2dc:	b2ad      	uxth	r5, r5
 801f2de:	9304      	str	r3, [sp, #16]
 801f2e0:	4b96      	ldr	r3, [pc, #600]	@ (801f53c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 801f2e2:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 801f2e6:	6818      	ldr	r0, [r3, #0]
 801f2e8:	6803      	ldr	r3, [r0, #0]
 801f2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2ec:	4798      	blx	r3
 801f2ee:	4b94      	ldr	r3, [pc, #592]	@ (801f540 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 801f2f0:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 801f2f4:	2d00      	cmp	r5, #0
 801f2f6:	881a      	ldrh	r2, [r3, #0]
 801f2f8:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 801f2fc:	fb02 f707 	mul.w	r7, r2, r7
 801f300:	fb02 c101 	mla	r1, r2, r1, ip
 801f304:	9318      	str	r3, [sp, #96]	@ 0x60
 801f306:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 801f30a:	4b8e      	ldr	r3, [pc, #568]	@ (801f544 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801f30c:	bf18      	it	ne
 801f30e:	2100      	movne	r1, #0
 801f310:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 801f314:	eba3 0304 	sub.w	r3, r3, r4
 801f318:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f31a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f31c:	9319      	str	r3, [sp, #100]	@ 0x64
 801f31e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f322:	f106 0204 	add.w	r2, r6, #4
 801f326:	9206      	str	r2, [sp, #24]
 801f328:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f32a:	ea6f 0202 	mvn.w	r2, r2
 801f32e:	b2d2      	uxtb	r2, r2
 801f330:	9215      	str	r2, [sp, #84]	@ 0x54
 801f332:	9a04      	ldr	r2, [sp, #16]
 801f334:	bf08      	it	eq
 801f336:	4611      	moveq	r1, r2
 801f338:	2200      	movs	r2, #0
 801f33a:	b289      	uxth	r1, r1
 801f33c:	920d      	str	r2, [sp, #52]	@ 0x34
 801f33e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f340:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f342:	fa12 f383 	uxtah	r3, r2, r3
 801f346:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f348:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f34c:	3304      	adds	r3, #4
 801f34e:	9307      	str	r3, [sp, #28]
 801f350:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f352:	455b      	cmp	r3, fp
 801f354:	f240 817b 	bls.w	801f64e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 801f358:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 801f35c:	f04f 0801 	mov.w	r8, #1
 801f360:	9a01      	ldr	r2, [sp, #4]
 801f362:	9807      	ldr	r0, [sp, #28]
 801f364:	46c4      	mov	ip, r8
 801f366:	f8cd 8008 	str.w	r8, [sp, #8]
 801f36a:	7800      	ldrb	r0, [r0, #0]
 801f36c:	fbb5 f3f3 	udiv	r3, r5, r3
 801f370:	1ad3      	subs	r3, r2, r3
 801f372:	9011      	str	r0, [sp, #68]	@ 0x44
 801f374:	3001      	adds	r0, #1
 801f376:	b29b      	uxth	r3, r3
 801f378:	9005      	str	r0, [sp, #20]
 801f37a:	9316      	str	r3, [sp, #88]	@ 0x58
 801f37c:	9b07      	ldr	r3, [sp, #28]
 801f37e:	785a      	ldrb	r2, [r3, #1]
 801f380:	789b      	ldrb	r3, [r3, #2]
 801f382:	021b      	lsls	r3, r3, #8
 801f384:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f388:	9a07      	ldr	r2, [sp, #28]
 801f38a:	78d2      	ldrb	r2, [r2, #3]
 801f38c:	4313      	orrs	r3, r2
 801f38e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f390:	441a      	add	r2, r3
 801f392:	1c50      	adds	r0, r2, #1
 801f394:	7852      	ldrb	r2, [r2, #1]
 801f396:	9003      	str	r0, [sp, #12]
 801f398:	0212      	lsls	r2, r2, #8
 801f39a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f39c:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801f3a0:	5cc3      	ldrb	r3, [r0, r3]
 801f3a2:	431a      	orrs	r2, r3
 801f3a4:	b293      	uxth	r3, r2
 801f3a6:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801f3aa:	930c      	str	r3, [sp, #48]	@ 0x30
 801f3ac:	2300      	movs	r3, #0
 801f3ae:	9308      	str	r3, [sp, #32]
 801f3b0:	461a      	mov	r2, r3
 801f3b2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f3b6:	930e      	str	r3, [sp, #56]	@ 0x38
 801f3b8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801f3bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f3be:	2d00      	cmp	r5, #0
 801f3c0:	d07d      	beq.n	801f4be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 801f3c2:	45ac      	cmp	ip, r5
 801f3c4:	d26d      	bcs.n	801f4a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 801f3c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f3c8:	eba5 050c 	sub.w	r5, r5, ip
 801f3cc:	4608      	mov	r0, r1
 801f3ce:	455b      	cmp	r3, fp
 801f3d0:	b2ad      	uxth	r5, r5
 801f3d2:	d802      	bhi.n	801f3da <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 801f3d4:	e071      	b.n	801f4ba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	d15d      	bne.n	801f496 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 801f3da:	9b03      	ldr	r3, [sp, #12]
 801f3dc:	9a02      	ldr	r2, [sp, #8]
 801f3de:	785b      	ldrb	r3, [r3, #1]
 801f3e0:	f1c2 0207 	rsb	r2, r2, #7
 801f3e4:	9902      	ldr	r1, [sp, #8]
 801f3e6:	4093      	lsls	r3, r2
 801f3e8:	005b      	lsls	r3, r3, #1
 801f3ea:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801f3ee:	9b03      	ldr	r3, [sp, #12]
 801f3f0:	781b      	ldrb	r3, [r3, #0]
 801f3f2:	410b      	asrs	r3, r1
 801f3f4:	3101      	adds	r1, #1
 801f3f6:	b2c9      	uxtb	r1, r1
 801f3f8:	b2db      	uxtb	r3, r3
 801f3fa:	2908      	cmp	r1, #8
 801f3fc:	9102      	str	r1, [sp, #8]
 801f3fe:	9903      	ldr	r1, [sp, #12]
 801f400:	ea43 0302 	orr.w	r3, r3, r2
 801f404:	bf0c      	ite	eq
 801f406:	3102      	addeq	r1, #2
 801f408:	3101      	addne	r1, #1
 801f40a:	b29a      	uxth	r2, r3
 801f40c:	bf05      	ittet	eq
 801f40e:	9103      	streq	r1, [sp, #12]
 801f410:	2100      	moveq	r1, #0
 801f412:	9103      	strne	r1, [sp, #12]
 801f414:	9102      	streq	r1, [sp, #8]
 801f416:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f418:	4291      	cmp	r1, r2
 801f41a:	d30a      	bcc.n	801f432 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801f41c:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801f420:	2301      	movs	r3, #1
 801f422:	9905      	ldr	r1, [sp, #20]
 801f424:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801f428:	d30f      	bcc.n	801f44a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801f42a:	2100      	movs	r1, #0
 801f42c:	4698      	mov	r8, r3
 801f42e:	9100      	str	r1, [sp, #0]
 801f430:	e032      	b.n	801f498 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 801f432:	9b05      	ldr	r3, [sp, #20]
 801f434:	429a      	cmp	r2, r3
 801f436:	d318      	bcc.n	801f46a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801f438:	eb04 0308 	add.w	r3, r4, r8
 801f43c:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801f440:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801f444:	f108 0301 	add.w	r3, r8, #1
 801f448:	b29b      	uxth	r3, r3
 801f44a:	9905      	ldr	r1, [sp, #20]
 801f44c:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801f450:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f454:	710e      	strb	r6, [r1, #4]
 801f456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f458:	80ce      	strh	r6, [r1, #6]
 801f45a:	f108 0601 	add.w	r6, r8, #1
 801f45e:	714e      	strb	r6, [r1, #5]
 801f460:	9905      	ldr	r1, [sp, #20]
 801f462:	3101      	adds	r1, #1
 801f464:	b289      	uxth	r1, r1
 801f466:	9105      	str	r1, [sp, #20]
 801f468:	e7df      	b.n	801f42a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 801f46a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f46e:	4611      	mov	r1, r2
 801f470:	795b      	ldrb	r3, [r3, #5]
 801f472:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801f476:	4426      	add	r6, r4
 801f478:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801f47a:	4437      	add	r7, r6
 801f47c:	2f00      	cmp	r7, #0
 801f47e:	dd06      	ble.n	801f48e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 801f480:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801f484:	790f      	ldrb	r7, [r1, #4]
 801f486:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f48a:	88c9      	ldrh	r1, [r1, #6]
 801f48c:	e7f4      	b.n	801f478 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801f48e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801f492:	b29b      	uxth	r3, r3
 801f494:	e7c5      	b.n	801f422 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 801f496:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f498:	920c      	str	r2, [sp, #48]	@ 0x30
 801f49a:	4601      	mov	r1, r0
 801f49c:	9a00      	ldr	r2, [sp, #0]
 801f49e:	469c      	mov	ip, r3
 801f4a0:	e78d      	b.n	801f3be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801f4a2:	ebac 0305 	sub.w	r3, ip, r5
 801f4a6:	1957      	adds	r7, r2, r5
 801f4a8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801f4ac:	b2ba      	uxth	r2, r7
 801f4ae:	b29b      	uxth	r3, r3
 801f4b0:	9200      	str	r2, [sp, #0]
 801f4b2:	2500      	movs	r5, #0
 801f4b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f4b6:	455a      	cmp	r2, fp
 801f4b8:	d88d      	bhi.n	801f3d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 801f4ba:	4601      	mov	r1, r0
 801f4bc:	e748      	b.n	801f350 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 801f4be:	458c      	cmp	ip, r1
 801f4c0:	bf27      	ittee	cs
 801f4c2:	ebac 0301 	subcs.w	r3, ip, r1
 801f4c6:	4628      	movcs	r0, r5
 801f4c8:	eba1 000c 	subcc.w	r0, r1, ip
 801f4cc:	462b      	movcc	r3, r5
 801f4ce:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801f4d0:	bf27      	ittee	cs
 801f4d2:	b29b      	uxthcs	r3, r3
 801f4d4:	9109      	strcs	r1, [sp, #36]	@ 0x24
 801f4d6:	b280      	uxthcc	r0, r0
 801f4d8:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 801f4dc:	2dff      	cmp	r5, #255	@ 0xff
 801f4de:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801f4e0:	eb02 0705 	add.w	r7, r2, r5
 801f4e4:	b2bd      	uxth	r5, r7
 801f4e6:	9500      	str	r5, [sp, #0]
 801f4e8:	d12e      	bne.n	801f548 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 801f4ea:	465e      	mov	r6, fp
 801f4ec:	9d00      	ldr	r5, [sp, #0]
 801f4ee:	42aa      	cmp	r2, r5
 801f4f0:	f040 8083 	bne.w	801f5fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801f4f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f4f6:	458c      	cmp	ip, r1
 801f4f8:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801f4fc:	d3d9      	bcc.n	801f4b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 801f4fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f500:	9904      	ldr	r1, [sp, #16]
 801f502:	8812      	ldrh	r2, [r2, #0]
 801f504:	1a52      	subs	r2, r2, r1
 801f506:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f508:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801f50c:	9a08      	ldr	r2, [sp, #32]
 801f50e:	3201      	adds	r2, #1
 801f510:	428a      	cmp	r2, r1
 801f512:	9208      	str	r2, [sp, #32]
 801f514:	f040 8091 	bne.w	801f63a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 801f518:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 801f51c:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 801f520:	9b04      	ldr	r3, [sp, #16]
 801f522:	eba5 050c 	sub.w	r5, r5, ip
 801f526:	b2ad      	uxth	r5, r5
 801f528:	2d00      	cmp	r5, #0
 801f52a:	bf08      	it	eq
 801f52c:	4619      	moveq	r1, r3
 801f52e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f530:	bf18      	it	ne
 801f532:	2100      	movne	r1, #0
 801f534:	3301      	adds	r3, #1
 801f536:	b289      	uxth	r1, r1
 801f538:	930d      	str	r3, [sp, #52]	@ 0x34
 801f53a:	e700      	b.n	801f33e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 801f53c:	24006600 	.word	0x24006600
 801f540:	240065fa 	.word	0x240065fa
 801f544:	fffff7fb 	.word	0xfffff7fb
 801f548:	46d9      	mov	r9, fp
 801f54a:	9d00      	ldr	r5, [sp, #0]
 801f54c:	42aa      	cmp	r2, r5
 801f54e:	d0d1      	beq.n	801f4f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 801f550:	1c55      	adds	r5, r2, #1
 801f552:	4422      	add	r2, r4
 801f554:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 801f558:	9a06      	ldr	r2, [sp, #24]
 801f55a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f55e:	9517      	str	r5, [sp, #92]	@ 0x5c
 801f560:	4472      	add	r2, lr
 801f562:	9212      	str	r2, [sp, #72]	@ 0x48
 801f564:	f8b9 2000 	ldrh.w	r2, [r9]
 801f568:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f56a:	1216      	asrs	r6, r2, #8
 801f56c:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f570:	10d5      	asrs	r5, r2, #3
 801f572:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801f574:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f578:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801f57c:	00d2      	lsls	r2, r2, #3
 801f57e:	fb1a fa07 	smulbb	sl, sl, r7
 801f582:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f586:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f588:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801f58c:	b2d2      	uxtb	r2, r2
 801f58e:	fb06 a607 	mla	r6, r6, r7, sl
 801f592:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f594:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f598:	f897 a001 	ldrb.w	sl, [r7, #1]
 801f59c:	b2b6      	uxth	r6, r6
 801f59e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801f5a0:	fb1a fa07 	smulbb	sl, sl, r7
 801f5a4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f5a6:	fb05 a507 	mla	r5, r5, r7, sl
 801f5aa:	9f06      	ldr	r7, [sp, #24]
 801f5ac:	f106 0a01 	add.w	sl, r6, #1
 801f5b0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f5b4:	b2ad      	uxth	r5, r5
 801f5b6:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801f5b8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801f5bc:	f105 0a01 	add.w	sl, r5, #1
 801f5c0:	fb1e fe07 	smulbb	lr, lr, r7
 801f5c4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801f5c6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f5ca:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 801f5ce:	fb02 e207 	mla	r2, r2, r7, lr
 801f5d2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f5d6:	b292      	uxth	r2, r2
 801f5d8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f5dc:	f102 0e01 	add.w	lr, r2, #1
 801f5e0:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801f5e4:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801f5e8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801f5ec:	ea4e 0606 	orr.w	r6, lr, r6
 801f5f0:	ea46 060a 	orr.w	r6, r6, sl
 801f5f4:	f829 6b02 	strh.w	r6, [r9], #2
 801f5f8:	e7a7      	b.n	801f54a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 801f5fa:	f102 0e01 	add.w	lr, r2, #1
 801f5fe:	4422      	add	r2, r4
 801f600:	9f06      	ldr	r7, [sp, #24]
 801f602:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 801f606:	9a06      	ldr	r2, [sp, #24]
 801f608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f60c:	eb02 0a05 	add.w	sl, r2, r5
 801f610:	4a13      	ldr	r2, [pc, #76]	@ (801f660 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 801f612:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f616:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 801f61a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f61e:	00d2      	lsls	r2, r2, #3
 801f620:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f624:	ea49 0202 	orr.w	r2, r9, r2
 801f628:	f817 9005 	ldrb.w	r9, [r7, r5]
 801f62c:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801f630:	f826 2b02 	strh.w	r2, [r6], #2
 801f634:	fa1f f28e 	uxth.w	r2, lr
 801f638:	e758      	b.n	801f4ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 801f63a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801f63e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801f642:	1a2d      	subs	r5, r5, r0
 801f644:	b2ad      	uxth	r5, r5
 801f646:	2d00      	cmp	r5, #0
 801f648:	bf18      	it	ne
 801f64a:	2000      	movne	r0, #0
 801f64c:	e732      	b.n	801f4b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 801f64e:	4b05      	ldr	r3, [pc, #20]	@ (801f664 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 801f650:	6818      	ldr	r0, [r3, #0]
 801f652:	6803      	ldr	r3, [r0, #0]
 801f654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f656:	4798      	blx	r3
 801f658:	b01f      	add	sp, #124	@ 0x7c
 801f65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f65e:	bf00      	nop
 801f660:	fffff800 	.word	0xfffff800
 801f664:	24006600 	.word	0x24006600

0801f668 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801f668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f66c:	b091      	sub	sp, #68	@ 0x44
 801f66e:	469b      	mov	fp, r3
 801f670:	4616      	mov	r6, r2
 801f672:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f676:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 801f67a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f67e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 801f682:	4604      	mov	r4, r0
 801f684:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801f688:	4640      	mov	r0, r8
 801f68a:	460d      	mov	r5, r1
 801f68c:	4659      	mov	r1, fp
 801f68e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801f692:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801f696:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 801f69a:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 801f69e:	f7f3 fabb 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 801f6a2:	4631      	mov	r1, r6
 801f6a4:	4640      	mov	r0, r8
 801f6a6:	f7f3 fab7 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 801f6aa:	4b74      	ldr	r3, [pc, #464]	@ (801f87c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801f6ac:	8818      	ldrh	r0, [r3, #0]
 801f6ae:	4b74      	ldr	r3, [pc, #464]	@ (801f880 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801f6b0:	b202      	sxth	r2, r0
 801f6b2:	8819      	ldrh	r1, [r3, #0]
 801f6b4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801f6b8:	b20e      	sxth	r6, r1
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	da07      	bge.n	801f6ce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801f6be:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801f6c2:	4463      	add	r3, ip
 801f6c4:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801f6c8:	2300      	movs	r3, #0
 801f6ca:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801f6ce:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801f6d2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801f6d6:	1ad2      	subs	r2, r2, r3
 801f6d8:	4594      	cmp	ip, r2
 801f6da:	bfc4      	itt	gt
 801f6dc:	1ac2      	subgt	r2, r0, r3
 801f6de:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 801f6e2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801f6e6:	2a00      	cmp	r2, #0
 801f6e8:	da07      	bge.n	801f6fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801f6ea:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 801f6ee:	4462      	add	r2, ip
 801f6f0:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801f6f4:	2200      	movs	r2, #0
 801f6f6:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801f6fa:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 801f6fe:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801f702:	eba6 060a 	sub.w	r6, r6, sl
 801f706:	42b2      	cmp	r2, r6
 801f708:	bfc4      	itt	gt
 801f70a:	eba1 020a 	subgt.w	r2, r1, sl
 801f70e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 801f712:	4a5c      	ldr	r2, [pc, #368]	@ (801f884 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801f714:	7812      	ldrb	r2, [r2, #0]
 801f716:	b9a2      	cbnz	r2, 801f742 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801f718:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801f71c:	4286      	cmp	r6, r0
 801f71e:	4640      	mov	r0, r8
 801f720:	9303      	str	r3, [sp, #12]
 801f722:	bf14      	ite	ne
 801f724:	2600      	movne	r6, #0
 801f726:	2601      	moveq	r6, #1
 801f728:	f7f3 fab9 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f72c:	9b03      	ldr	r3, [sp, #12]
 801f72e:	b160      	cbz	r0, 801f74a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801f730:	2300      	movs	r3, #0
 801f732:	8023      	strh	r3, [r4, #0]
 801f734:	8063      	strh	r3, [r4, #2]
 801f736:	80a3      	strh	r3, [r4, #4]
 801f738:	4620      	mov	r0, r4
 801f73a:	80e3      	strh	r3, [r4, #6]
 801f73c:	b011      	add	sp, #68	@ 0x44
 801f73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f742:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801f746:	428e      	cmp	r6, r1
 801f748:	e7e9      	b.n	801f71e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801f74a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801f74e:	a90e      	add	r1, sp, #56	@ 0x38
 801f750:	900e      	str	r0, [sp, #56]	@ 0x38
 801f752:	a80c      	add	r0, sp, #48	@ 0x30
 801f754:	9205      	str	r2, [sp, #20]
 801f756:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801f75a:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 801f75e:	9206      	str	r2, [sp, #24]
 801f760:	f8bb 2000 	ldrh.w	r2, [fp]
 801f764:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 801f768:	1a9b      	subs	r3, r3, r2
 801f76a:	b21b      	sxth	r3, r3
 801f76c:	9303      	str	r3, [sp, #12]
 801f76e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801f772:	f8df b118 	ldr.w	fp, [pc, #280]	@ 801f88c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801f776:	ebaa 0a03 	sub.w	sl, sl, r3
 801f77a:	fa0f f38a 	sxth.w	r3, sl
 801f77e:	9304      	str	r3, [sp, #16]
 801f780:	9b03      	ldr	r3, [sp, #12]
 801f782:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801f786:	9b04      	ldr	r3, [sp, #16]
 801f788:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801f78c:	9b05      	ldr	r3, [sp, #20]
 801f78e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801f792:	9b06      	ldr	r3, [sp, #24]
 801f794:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801f798:	f7f7 fb30 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f79c:	4640      	mov	r0, r8
 801f79e:	f7f7 fae9 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f7a2:	a80e      	add	r0, sp, #56	@ 0x38
 801f7a4:	f7f7 fae6 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f7a8:	4b37      	ldr	r3, [pc, #220]	@ (801f888 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801f7aa:	4628      	mov	r0, r5
 801f7ac:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 801f7b0:	881b      	ldrh	r3, [r3, #0]
 801f7b2:	9307      	str	r3, [sp, #28]
 801f7b4:	682b      	ldr	r3, [r5, #0]
 801f7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f7b8:	4798      	blx	r3
 801f7ba:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 801f7be:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801f7c2:	4681      	mov	r9, r0
 801f7c4:	f8db 0000 	ldr.w	r0, [fp]
 801f7c8:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801f7cc:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801f7ce:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801f7d2:	6803      	ldr	r3, [r0, #0]
 801f7d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f7d6:	4798      	blx	r3
 801f7d8:	4607      	mov	r7, r0
 801f7da:	f8db 0000 	ldr.w	r0, [fp]
 801f7de:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801f7e2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801f7e6:	6803      	ldr	r3, [r0, #0]
 801f7e8:	9109      	str	r1, [sp, #36]	@ 0x24
 801f7ea:	9208      	str	r2, [sp, #32]
 801f7ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f7ee:	4798      	blx	r3
 801f7f0:	f010 0f01 	tst.w	r0, #1
 801f7f4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f7f8:	d012      	beq.n	801f820 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801f7fa:	f8db 0000 	ldr.w	r0, [fp]
 801f7fe:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801f802:	6803      	ldr	r3, [r0, #0]
 801f804:	9200      	str	r2, [sp, #0]
 801f806:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801f808:	462b      	mov	r3, r5
 801f80a:	e898 0006 	ldmia.w	r8, {r1, r2}
 801f80e:	47b0      	blx	r6
 801f810:	9b03      	ldr	r3, [sp, #12]
 801f812:	8023      	strh	r3, [r4, #0]
 801f814:	9b04      	ldr	r3, [sp, #16]
 801f816:	8063      	strh	r3, [r4, #2]
 801f818:	9b05      	ldr	r3, [sp, #20]
 801f81a:	80a3      	strh	r3, [r4, #4]
 801f81c:	9b06      	ldr	r3, [sp, #24]
 801f81e:	e78b      	b.n	801f738 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801f820:	fb09 f202 	mul.w	r2, r9, r2
 801f824:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801f828:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801f82c:	440f      	add	r7, r1
 801f82e:	b166      	cbz	r6, 801f84a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801f830:	9a07      	ldr	r2, [sp, #28]
 801f832:	4592      	cmp	sl, r2
 801f834:	d109      	bne.n	801f84a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801f836:	f8db 0000 	ldr.w	r0, [fp]
 801f83a:	fb09 f303 	mul.w	r3, r9, r3
 801f83e:	4629      	mov	r1, r5
 801f840:	6802      	ldr	r2, [r0, #0]
 801f842:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 801f844:	463a      	mov	r2, r7
 801f846:	47b0      	blx	r6
 801f848:	e7e2      	b.n	801f810 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801f84a:	fb0a f303 	mul.w	r3, sl, r3
 801f84e:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801f852:	f8df b038 	ldr.w	fp, [pc, #56]	@ 801f88c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801f856:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801f85a:	4545      	cmp	r5, r8
 801f85c:	d2d8      	bcs.n	801f810 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801f85e:	f8db 0000 	ldr.w	r0, [fp]
 801f862:	4629      	mov	r1, r5
 801f864:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801f868:	4435      	add	r5, r6
 801f86a:	6802      	ldr	r2, [r0, #0]
 801f86c:	005b      	lsls	r3, r3, #1
 801f86e:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801f872:	463a      	mov	r2, r7
 801f874:	47d0      	blx	sl
 801f876:	444f      	add	r7, r9
 801f878:	e7ef      	b.n	801f85a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801f87a:	bf00      	nop
 801f87c:	240065f4 	.word	0x240065f4
 801f880:	240065f6 	.word	0x240065f6
 801f884:	240065f8 	.word	0x240065f8
 801f888:	240065fa 	.word	0x240065fa
 801f88c:	24006600 	.word	0x24006600

0801f890 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f890:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f892:	4606      	mov	r6, r0
 801f894:	b087      	sub	sp, #28
 801f896:	460c      	mov	r4, r1
 801f898:	4617      	mov	r7, r2
 801f89a:	461d      	mov	r5, r3
 801f89c:	b333      	cbz	r3, 801f8ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f89e:	4608      	mov	r0, r1
 801f8a0:	f7f3 f9fd 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f8a4:	bb10      	cbnz	r0, 801f8ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f8a6:	6820      	ldr	r0, [r4, #0]
 801f8a8:	ab04      	add	r3, sp, #16
 801f8aa:	6861      	ldr	r1, [r4, #4]
 801f8ac:	4c1b      	ldr	r4, [pc, #108]	@ (801f91c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801f8ae:	c303      	stmia	r3!, {r0, r1}
 801f8b0:	a804      	add	r0, sp, #16
 801f8b2:	f7f7 fa5f 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f8b6:	6820      	ldr	r0, [r4, #0]
 801f8b8:	6803      	ldr	r3, [r0, #0]
 801f8ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f8bc:	4798      	blx	r3
 801f8be:	2dff      	cmp	r5, #255	@ 0xff
 801f8c0:	d016      	beq.n	801f8f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f8c2:	f010 0f08 	tst.w	r0, #8
 801f8c6:	6820      	ldr	r0, [r4, #0]
 801f8c8:	d015      	beq.n	801f8f6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801f8ca:	2400      	movs	r4, #0
 801f8cc:	6801      	ldr	r1, [r0, #0]
 801f8ce:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f8d2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f8d6:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801f8da:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f8de:	9401      	str	r4, [sp, #4]
 801f8e0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f8e4:	9400      	str	r4, [sp, #0]
 801f8e6:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 801f8e8:	4639      	mov	r1, r7
 801f8ea:	47a0      	blx	r4
 801f8ec:	b007      	add	sp, #28
 801f8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8f0:	f010 0f02 	tst.w	r0, #2
 801f8f4:	e7e7      	b.n	801f8c6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801f8f6:	6803      	ldr	r3, [r0, #0]
 801f8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f8fa:	4798      	blx	r3
 801f8fc:	4b08      	ldr	r3, [pc, #32]	@ (801f920 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801f8fe:	4601      	mov	r1, r0
 801f900:	4630      	mov	r0, r6
 801f902:	881a      	ldrh	r2, [r3, #0]
 801f904:	6833      	ldr	r3, [r6, #0]
 801f906:	e9cd 7500 	strd	r7, r5, [sp]
 801f90a:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801f90c:	ab04      	add	r3, sp, #16
 801f90e:	47a8      	blx	r5
 801f910:	6820      	ldr	r0, [r4, #0]
 801f912:	6803      	ldr	r3, [r0, #0]
 801f914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f916:	4798      	blx	r3
 801f918:	e7e8      	b.n	801f8ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f91a:	bf00      	nop
 801f91c:	24006600 	.word	0x24006600
 801f920:	240065fa 	.word	0x240065fa

0801f924 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801f924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f928:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801f92c:	4688      	mov	r8, r1
 801f92e:	4614      	mov	r4, r2
 801f930:	461d      	mov	r5, r3
 801f932:	9e08      	ldr	r6, [sp, #32]
 801f934:	2f00      	cmp	r7, #0
 801f936:	f000 80ab 	beq.w	801fa90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f93a:	4618      	mov	r0, r3
 801f93c:	f7f3 f9af 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801f940:	2800      	cmp	r0, #0
 801f942:	f040 80a5 	bne.w	801fa90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f946:	f9b5 1000 	ldrsh.w	r1, [r5]
 801f94a:	2fff      	cmp	r7, #255	@ 0xff
 801f94c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801f950:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801f954:	fb04 1303 	mla	r3, r4, r3, r1
 801f958:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801f95c:	eba4 0200 	sub.w	r2, r4, r0
 801f960:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801f964:	fb04 f505 	mul.w	r5, r4, r5
 801f968:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801f96c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801f970:	d04a      	beq.n	801fa08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801f972:	b2bc      	uxth	r4, r7
 801f974:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 801f978:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801f97c:	fa5f f788 	uxtb.w	r7, r8
 801f980:	b2f3      	uxtb	r3, r6
 801f982:	0040      	lsls	r0, r0, #1
 801f984:	fb0e fe04 	mul.w	lr, lr, r4
 801f988:	4367      	muls	r7, r4
 801f98a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801f98e:	4363      	muls	r3, r4
 801f990:	fa1f fc8c 	uxth.w	ip, ip
 801f994:	42a9      	cmp	r1, r5
 801f996:	d27b      	bcs.n	801fa90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f998:	eb01 0900 	add.w	r9, r1, r0
 801f99c:	4549      	cmp	r1, r9
 801f99e:	d231      	bcs.n	801fa04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801f9a0:	880a      	ldrh	r2, [r1, #0]
 801f9a2:	1214      	asrs	r4, r2, #8
 801f9a4:	10d6      	asrs	r6, r2, #3
 801f9a6:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801f9aa:	00d2      	lsls	r2, r2, #3
 801f9ac:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f9b0:	b2d2      	uxtb	r2, r2
 801f9b2:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801f9b6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f9ba:	fb14 f40c 	smulbb	r4, r4, ip
 801f9be:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801f9c2:	fb12 f20c 	smulbb	r2, r2, ip
 801f9c6:	fb16 f60c 	smulbb	r6, r6, ip
 801f9ca:	4474      	add	r4, lr
 801f9cc:	441a      	add	r2, r3
 801f9ce:	b2a4      	uxth	r4, r4
 801f9d0:	443e      	add	r6, r7
 801f9d2:	b292      	uxth	r2, r2
 801f9d4:	f104 0a01 	add.w	sl, r4, #1
 801f9d8:	b2b6      	uxth	r6, r6
 801f9da:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f9de:	f102 0a01 	add.w	sl, r2, #1
 801f9e2:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801f9e6:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801f9ea:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f9ee:	4322      	orrs	r2, r4
 801f9f0:	1c74      	adds	r4, r6, #1
 801f9f2:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801f9f6:	0976      	lsrs	r6, r6, #5
 801f9f8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801f9fc:	4332      	orrs	r2, r6
 801f9fe:	f821 2b02 	strh.w	r2, [r1], #2
 801fa02:	e7cb      	b.n	801f99c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801fa04:	4441      	add	r1, r8
 801fa06:	e7c5      	b.n	801f994 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801fa08:	0973      	lsrs	r3, r6, #5
 801fa0a:	4f22      	ldr	r7, [pc, #136]	@ (801fa94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801fa0c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801fa10:	ea08 0707 	and.w	r7, r8, r7
 801fa14:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801fa18:	433b      	orrs	r3, r7
 801fa1a:	07e7      	lsls	r7, r4, #31
 801fa1c:	ea43 0306 	orr.w	r3, r3, r6
 801fa20:	b29b      	uxth	r3, r3
 801fa22:	d50b      	bpl.n	801fa3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801fa24:	0040      	lsls	r0, r0, #1
 801fa26:	0052      	lsls	r2, r2, #1
 801fa28:	42a9      	cmp	r1, r5
 801fa2a:	d231      	bcs.n	801fa90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fa2c:	180c      	adds	r4, r1, r0
 801fa2e:	42a1      	cmp	r1, r4
 801fa30:	d202      	bcs.n	801fa38 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801fa32:	f821 3b02 	strh.w	r3, [r1], #2
 801fa36:	e7fa      	b.n	801fa2e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801fa38:	4411      	add	r1, r2
 801fa3a:	e7f5      	b.n	801fa28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801fa3c:	078e      	lsls	r6, r1, #30
 801fa3e:	d008      	beq.n	801fa52 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801fa40:	0066      	lsls	r6, r4, #1
 801fa42:	460a      	mov	r2, r1
 801fa44:	42aa      	cmp	r2, r5
 801fa46:	d202      	bcs.n	801fa4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801fa48:	8013      	strh	r3, [r2, #0]
 801fa4a:	4432      	add	r2, r6
 801fa4c:	e7fa      	b.n	801fa44 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801fa4e:	3102      	adds	r1, #2
 801fa50:	3801      	subs	r0, #1
 801fa52:	07c2      	lsls	r2, r0, #31
 801fa54:	d50b      	bpl.n	801fa6e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801fa56:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 801fa5a:	0066      	lsls	r6, r4, #1
 801fa5c:	3a01      	subs	r2, #1
 801fa5e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801fa62:	42aa      	cmp	r2, r5
 801fa64:	d202      	bcs.n	801fa6c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801fa66:	8013      	strh	r3, [r2, #0]
 801fa68:	4432      	add	r2, r6
 801fa6a:	e7fa      	b.n	801fa62 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801fa6c:	3801      	subs	r0, #1
 801fa6e:	b178      	cbz	r0, 801fa90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fa70:	1040      	asrs	r0, r0, #1
 801fa72:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801fa76:	0080      	lsls	r0, r0, #2
 801fa78:	0064      	lsls	r4, r4, #1
 801fa7a:	42a9      	cmp	r1, r5
 801fa7c:	d208      	bcs.n	801fa90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fa7e:	180e      	adds	r6, r1, r0
 801fa80:	460a      	mov	r2, r1
 801fa82:	42b2      	cmp	r2, r6
 801fa84:	d202      	bcs.n	801fa8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801fa86:	f842 3b04 	str.w	r3, [r2], #4
 801fa8a:	e7fa      	b.n	801fa82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801fa8c:	4421      	add	r1, r4
 801fa8e:	e7f4      	b.n	801fa7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801fa90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa94:	00fff800 	.word	0x00fff800

0801fa98 <_ZN8touchgfx8LCD16bppC1Ev>:
 801fa98:	2200      	movs	r2, #0
 801fa9a:	4912      	ldr	r1, [pc, #72]	@ (801fae4 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 801fa9c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801faa0:	6001      	str	r1, [r0, #0]
 801faa2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801faa6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801faaa:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801faae:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801fab2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801fab6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801faba:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801fabe:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801fac2:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801fac6:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801faca:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801face:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801fad2:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 801fad6:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 801fada:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 801fade:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 801fae2:	4770      	bx	lr
 801fae4:	0802c878 	.word	0x0802c878

0801fae8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801fae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faec:	b08d      	sub	sp, #52	@ 0x34
 801faee:	460d      	mov	r5, r1
 801faf0:	4604      	mov	r4, r0
 801faf2:	4699      	mov	r9, r3
 801faf4:	6808      	ldr	r0, [r1, #0]
 801faf6:	ab08      	add	r3, sp, #32
 801faf8:	6849      	ldr	r1, [r1, #4]
 801fafa:	c303      	stmia	r3!, {r0, r1}
 801fafc:	6810      	ldr	r0, [r2, #0]
 801fafe:	ab0a      	add	r3, sp, #40	@ 0x28
 801fb00:	6851      	ldr	r1, [r2, #4]
 801fb02:	c303      	stmia	r3!, {r0, r1}
 801fb04:	a808      	add	r0, sp, #32
 801fb06:	f7f7 f935 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fb0a:	4629      	mov	r1, r5
 801fb0c:	a80a      	add	r0, sp, #40	@ 0x28
 801fb0e:	4d67      	ldr	r5, [pc, #412]	@ (801fcac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801fb10:	f7f7 f974 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fb14:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 801fb18:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 801fb1c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801fb20:	6828      	ldr	r0, [r5, #0]
 801fb22:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fb26:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 801fb2a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 801fb2e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fb32:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801fb36:	440a      	add	r2, r1
 801fb38:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801fb3c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801fb40:	4413      	add	r3, r2
 801fb42:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801fb46:	6803      	ldr	r3, [r0, #0]
 801fb48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fb4a:	4798      	blx	r3
 801fb4c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801fb50:	d119      	bne.n	801fb86 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801fb52:	f010 0f20 	tst.w	r0, #32
 801fb56:	6828      	ldr	r0, [r5, #0]
 801fb58:	d018      	beq.n	801fb8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801fb5a:	2500      	movs	r5, #0
 801fb5c:	6801      	ldr	r1, [r0, #0]
 801fb5e:	b2b6      	uxth	r6, r6
 801fb60:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801fb64:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801fb68:	9601      	str	r6, [sp, #4]
 801fb6a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801fb6e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801fb72:	9502      	str	r5, [sp, #8]
 801fb74:	fa1f f588 	uxth.w	r5, r8
 801fb78:	9500      	str	r5, [sp, #0]
 801fb7a:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801fb7c:	4621      	mov	r1, r4
 801fb7e:	47a8      	blx	r5
 801fb80:	b00d      	add	sp, #52	@ 0x34
 801fb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb86:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801fb8a:	e7e4      	b.n	801fb56 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801fb8c:	6803      	ldr	r3, [r0, #0]
 801fb8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb90:	4798      	blx	r3
 801fb92:	4947      	ldr	r1, [pc, #284]	@ (801fcb0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801fb94:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801fb98:	880b      	ldrh	r3, [r1, #0]
 801fb9a:	468a      	mov	sl, r1
 801fb9c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 801fba0:	fb03 5202 	mla	r2, r3, r2, r5
 801fba4:	4373      	muls	r3, r6
 801fba6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fbaa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fbae:	9307      	str	r3, [sp, #28]
 801fbb0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801fbb4:	9306      	str	r3, [sp, #24]
 801fbb6:	9b07      	ldr	r3, [sp, #28]
 801fbb8:	4298      	cmp	r0, r3
 801fbba:	d270      	bcs.n	801fc9e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801fbbc:	9b06      	ldr	r3, [sp, #24]
 801fbbe:	4621      	mov	r1, r4
 801fbc0:	eb00 0b03 	add.w	fp, r0, r3
 801fbc4:	4558      	cmp	r0, fp
 801fbc6:	d25d      	bcs.n	801fc84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801fbc8:	f851 4b04 	ldr.w	r4, [r1], #4
 801fbcc:	0e23      	lsrs	r3, r4, #24
 801fbce:	d014      	beq.n	801fbfa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801fbd0:	2bff      	cmp	r3, #255	@ 0xff
 801fbd2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801fbd6:	d112      	bne.n	801fbfe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801fbd8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801fbdc:	d10f      	bne.n	801fbfe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801fbde:	0963      	lsrs	r3, r4, #5
 801fbe0:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 801fbe4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fbe8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801fbec:	f02c 0c07 	bic.w	ip, ip, #7
 801fbf0:	ea43 0c0c 	orr.w	ip, r3, ip
 801fbf4:	ea4c 0404 	orr.w	r4, ip, r4
 801fbf8:	8004      	strh	r4, [r0, #0]
 801fbfa:	3002      	adds	r0, #2
 801fbfc:	e7e2      	b.n	801fbc4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801fbfe:	fb09 f303 	mul.w	r3, r9, r3
 801fc02:	8807      	ldrh	r7, [r0, #0]
 801fc04:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801fc08:	fa5f fc8c 	uxtb.w	ip, ip
 801fc0c:	1c5a      	adds	r2, r3, #1
 801fc0e:	123e      	asrs	r6, r7, #8
 801fc10:	10fd      	asrs	r5, r7, #3
 801fc12:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801fc16:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801fc1a:	00ff      	lsls	r7, r7, #3
 801fc1c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801fc20:	1212      	asrs	r2, r2, #8
 801fc22:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fc26:	b293      	uxth	r3, r2
 801fc28:	43d2      	mvns	r2, r2
 801fc2a:	b2ff      	uxtb	r7, r7
 801fc2c:	fb1e fe03 	smulbb	lr, lr, r3
 801fc30:	b2d2      	uxtb	r2, r2
 801fc32:	fb1c fc03 	smulbb	ip, ip, r3
 801fc36:	b2e4      	uxtb	r4, r4
 801fc38:	fb06 e602 	mla	r6, r6, r2, lr
 801fc3c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801fc40:	fb14 f403 	smulbb	r4, r4, r3
 801fc44:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801fc48:	b2b6      	uxth	r6, r6
 801fc4a:	fb05 c502 	mla	r5, r5, r2, ip
 801fc4e:	fb07 4702 	mla	r7, r7, r2, r4
 801fc52:	f106 0e01 	add.w	lr, r6, #1
 801fc56:	b2ad      	uxth	r5, r5
 801fc58:	b2bf      	uxth	r7, r7
 801fc5a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801fc5e:	f105 0c01 	add.w	ip, r5, #1
 801fc62:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801fc66:	1c7e      	adds	r6, r7, #1
 801fc68:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fc6c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fc70:	096d      	lsrs	r5, r5, #5
 801fc72:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fc76:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fc7a:	ea46 060e 	orr.w	r6, r6, lr
 801fc7e:	432e      	orrs	r6, r5
 801fc80:	8006      	strh	r6, [r0, #0]
 801fc82:	e7ba      	b.n	801fbfa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801fc84:	f8ba 3000 	ldrh.w	r3, [sl]
 801fc88:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 801fc8c:	eba3 0308 	sub.w	r3, r3, r8
 801fc90:	eba4 0408 	sub.w	r4, r4, r8
 801fc94:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fc98:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801fc9c:	e78b      	b.n	801fbb6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801fc9e:	4b03      	ldr	r3, [pc, #12]	@ (801fcac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801fca0:	6818      	ldr	r0, [r3, #0]
 801fca2:	6803      	ldr	r3, [r0, #0]
 801fca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fca6:	4798      	blx	r3
 801fca8:	e76a      	b.n	801fb80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801fcaa:	bf00      	nop
 801fcac:	24006600 	.word	0x24006600
 801fcb0:	240065fa 	.word	0x240065fa

0801fcb4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801fcb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fcb8:	b085      	sub	sp, #20
 801fcba:	6810      	ldr	r0, [r2, #0]
 801fcbc:	460c      	mov	r4, r1
 801fcbe:	6851      	ldr	r1, [r2, #4]
 801fcc0:	466d      	mov	r5, sp
 801fcc2:	4616      	mov	r6, r2
 801fcc4:	c503      	stmia	r5!, {r0, r1}
 801fcc6:	6818      	ldr	r0, [r3, #0]
 801fcc8:	6859      	ldr	r1, [r3, #4]
 801fcca:	c503      	stmia	r5!, {r0, r1}
 801fccc:	4668      	mov	r0, sp
 801fcce:	4d2e      	ldr	r5, [pc, #184]	@ (801fd88 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801fcd0:	f7f7 f850 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fcd4:	4631      	mov	r1, r6
 801fcd6:	a802      	add	r0, sp, #8
 801fcd8:	4e2c      	ldr	r6, [pc, #176]	@ (801fd8c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801fcda:	f7f7 f88f 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fcde:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801fce2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801fce6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801fcea:	6828      	ldr	r0, [r5, #0]
 801fcec:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fcf0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801fcf4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801fcf8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fcfc:	f8bd 1000 	ldrh.w	r1, [sp]
 801fd00:	440a      	add	r2, r1
 801fd02:	f8ad 2008 	strh.w	r2, [sp, #8]
 801fd06:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801fd0a:	4413      	add	r3, r2
 801fd0c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801fd10:	6803      	ldr	r3, [r0, #0]
 801fd12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fd14:	4798      	blx	r3
 801fd16:	8833      	ldrh	r3, [r6, #0]
 801fd18:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801fd1c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801fd20:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801fd24:	f8df e068 	ldr.w	lr, [pc, #104]	@ 801fd90 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801fd28:	fb03 1202 	mla	r2, r3, r2, r1
 801fd2c:	fb08 f303 	mul.w	r3, r8, r3
 801fd30:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fd34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fd38:	4298      	cmp	r0, r3
 801fd3a:	d21d      	bcs.n	801fd78 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801fd3c:	eb00 080c 	add.w	r8, r0, ip
 801fd40:	4540      	cmp	r0, r8
 801fd42:	d20f      	bcs.n	801fd64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801fd44:	f854 1b04 	ldr.w	r1, [r4], #4
 801fd48:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801fd4c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801fd50:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801fd54:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801fd58:	ea42 0209 	orr.w	r2, r2, r9
 801fd5c:	430a      	orrs	r2, r1
 801fd5e:	f820 2b02 	strh.w	r2, [r0], #2
 801fd62:	e7ed      	b.n	801fd40 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801fd64:	8832      	ldrh	r2, [r6, #0]
 801fd66:	1bd2      	subs	r2, r2, r7
 801fd68:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fd6c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801fd70:	1bd2      	subs	r2, r2, r7
 801fd72:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801fd76:	e7df      	b.n	801fd38 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801fd78:	6828      	ldr	r0, [r5, #0]
 801fd7a:	6803      	ldr	r3, [r0, #0]
 801fd7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fd7e:	4798      	blx	r3
 801fd80:	b005      	add	sp, #20
 801fd82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fd86:	bf00      	nop
 801fd88:	24006600 	.word	0x24006600
 801fd8c:	240065fa 	.word	0x240065fa
 801fd90:	fffff800 	.word	0xfffff800

0801fd94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801fd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd98:	b08e      	sub	sp, #56	@ 0x38
 801fd9a:	460e      	mov	r6, r1
 801fd9c:	4604      	mov	r4, r0
 801fd9e:	461d      	mov	r5, r3
 801fda0:	6808      	ldr	r0, [r1, #0]
 801fda2:	ab0a      	add	r3, sp, #40	@ 0x28
 801fda4:	6849      	ldr	r1, [r1, #4]
 801fda6:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 801ff7c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801fdaa:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 801ff80 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801fdae:	c303      	stmia	r3!, {r0, r1}
 801fdb0:	6810      	ldr	r0, [r2, #0]
 801fdb2:	ab0c      	add	r3, sp, #48	@ 0x30
 801fdb4:	6851      	ldr	r1, [r2, #4]
 801fdb6:	c303      	stmia	r3!, {r0, r1}
 801fdb8:	a80a      	add	r0, sp, #40	@ 0x28
 801fdba:	f7f6 ffdb 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fdbe:	4631      	mov	r1, r6
 801fdc0:	a80c      	add	r0, sp, #48	@ 0x30
 801fdc2:	f7f7 f81b 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fdc6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801fdca:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801fdce:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801fdd2:	f8d8 0000 	ldr.w	r0, [r8]
 801fdd6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fdda:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801fdde:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801fde2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fde6:	440c      	add	r4, r1
 801fde8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801fdec:	440a      	add	r2, r1
 801fdee:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801fdf2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801fdf6:	4413      	add	r3, r2
 801fdf8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801fdfc:	6803      	ldr	r3, [r0, #0]
 801fdfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fe00:	4798      	blx	r3
 801fe02:	2dff      	cmp	r5, #255	@ 0xff
 801fe04:	d124      	bne.n	801fe50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801fe06:	f010 0f01 	tst.w	r0, #1
 801fe0a:	f8d8 0000 	ldr.w	r0, [r8]
 801fe0e:	d022      	beq.n	801fe56 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801fe10:	2100      	movs	r1, #0
 801fe12:	f04f 0e01 	mov.w	lr, #1
 801fe16:	f8d0 c000 	ldr.w	ip, [r0]
 801fe1a:	b2b6      	uxth	r6, r6
 801fe1c:	f8cd e018 	str.w	lr, [sp, #24]
 801fe20:	b2bf      	uxth	r7, r7
 801fe22:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801fe26:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801fe2a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801fe2e:	f8b9 e000 	ldrh.w	lr, [r9]
 801fe32:	9503      	str	r5, [sp, #12]
 801fe34:	9601      	str	r6, [sp, #4]
 801fe36:	9700      	str	r7, [sp, #0]
 801fe38:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801fe3c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801fe40:	9102      	str	r1, [sp, #8]
 801fe42:	4621      	mov	r1, r4
 801fe44:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 801fe48:	47a8      	blx	r5
 801fe4a:	b00e      	add	sp, #56	@ 0x38
 801fe4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe50:	f010 0f04 	tst.w	r0, #4
 801fe54:	e7d9      	b.n	801fe0a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801fe56:	6803      	ldr	r3, [r0, #0]
 801fe58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fe5a:	4798      	blx	r3
 801fe5c:	f8b9 3000 	ldrh.w	r3, [r9]
 801fe60:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801fe64:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801fe68:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801fe6c:	435e      	muls	r6, r3
 801fe6e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 801fe72:	2dff      	cmp	r5, #255	@ 0xff
 801fe74:	fb03 1202 	mla	r2, r3, r2, r1
 801fe78:	ebac 0c07 	sub.w	ip, ip, r7
 801fe7c:	eba3 0707 	sub.w	r7, r3, r7
 801fe80:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fe84:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fe88:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801fe8c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801fe90:	d049      	beq.n	801ff26 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801fe92:	43eb      	mvns	r3, r5
 801fe94:	fa1f f985 	uxth.w	r9, r5
 801fe98:	b2db      	uxtb	r3, r3
 801fe9a:	42b0      	cmp	r0, r6
 801fe9c:	d266      	bcs.n	801ff6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801fe9e:	eb00 0a0e 	add.w	sl, r0, lr
 801fea2:	4550      	cmp	r0, sl
 801fea4:	4621      	mov	r1, r4
 801fea6:	f104 0403 	add.w	r4, r4, #3
 801feaa:	d25b      	bcs.n	801ff64 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801feac:	8802      	ldrh	r2, [r0, #0]
 801feae:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801feb2:	ea4f 2822 	mov.w	r8, r2, asr #8
 801feb6:	fb11 f109 	smulbb	r1, r1, r9
 801feba:	10d5      	asrs	r5, r2, #3
 801febc:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801fec0:	00d2      	lsls	r2, r2, #3
 801fec2:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801fec6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801feca:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801fece:	fb08 1803 	mla	r8, r8, r3, r1
 801fed2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801fed6:	b2d2      	uxtb	r2, r2
 801fed8:	fb11 f109 	smulbb	r1, r1, r9
 801fedc:	fa1f f888 	uxth.w	r8, r8
 801fee0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fee4:	fb05 1503 	mla	r5, r5, r3, r1
 801fee8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801feec:	fb11 f109 	smulbb	r1, r1, r9
 801fef0:	b2ad      	uxth	r5, r5
 801fef2:	fb02 1203 	mla	r2, r2, r3, r1
 801fef6:	f108 0101 	add.w	r1, r8, #1
 801fefa:	b292      	uxth	r2, r2
 801fefc:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801ff00:	1c51      	adds	r1, r2, #1
 801ff02:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801ff06:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ff0a:	1c69      	adds	r1, r5, #1
 801ff0c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801ff10:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ff14:	096d      	lsrs	r5, r5, #5
 801ff16:	ea42 0208 	orr.w	r2, r2, r8
 801ff1a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ff1e:	432a      	orrs	r2, r5
 801ff20:	f820 2b02 	strh.w	r2, [r0], #2
 801ff24:	e7bd      	b.n	801fea2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801ff26:	4a14      	ldr	r2, [pc, #80]	@ (801ff78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801ff28:	42b0      	cmp	r0, r6
 801ff2a:	d21f      	bcs.n	801ff6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ff2c:	eb00 050e 	add.w	r5, r0, lr
 801ff30:	42a8      	cmp	r0, r5
 801ff32:	4621      	mov	r1, r4
 801ff34:	f104 0403 	add.w	r4, r4, #3
 801ff38:	d210      	bcs.n	801ff5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801ff3a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801ff3e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801ff42:	00db      	lsls	r3, r3, #3
 801ff44:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801ff48:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801ff4c:	430b      	orrs	r3, r1
 801ff4e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ff52:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801ff56:	f820 3b02 	strh.w	r3, [r0], #2
 801ff5a:	e7e9      	b.n	801ff30 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801ff5c:	4438      	add	r0, r7
 801ff5e:	eb01 040c 	add.w	r4, r1, ip
 801ff62:	e7e1      	b.n	801ff28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801ff64:	4438      	add	r0, r7
 801ff66:	eb01 040c 	add.w	r4, r1, ip
 801ff6a:	e796      	b.n	801fe9a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801ff6c:	4b03      	ldr	r3, [pc, #12]	@ (801ff7c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801ff6e:	6818      	ldr	r0, [r3, #0]
 801ff70:	6803      	ldr	r3, [r0, #0]
 801ff72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ff74:	4798      	blx	r3
 801ff76:	e768      	b.n	801fe4a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801ff78:	fffff800 	.word	0xfffff800
 801ff7c:	24006600 	.word	0x24006600
 801ff80:	240065fa 	.word	0x240065fa

0801ff84 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ff84:	b4f0      	push	{r4, r5, r6, r7}
 801ff86:	4616      	mov	r6, r2
 801ff88:	461c      	mov	r4, r3
 801ff8a:	460d      	mov	r5, r1
 801ff8c:	9a04      	ldr	r2, [sp, #16]
 801ff8e:	2e01      	cmp	r6, #1
 801ff90:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ff94:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801ff98:	d012      	beq.n	801ffc0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801ff9a:	d303      	bcc.n	801ffa4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801ff9c:	2e02      	cmp	r6, #2
 801ff9e:	d00a      	beq.n	801ffb6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801ffa0:	bcf0      	pop	{r4, r5, r6, r7}
 801ffa2:	4770      	bx	lr
 801ffa4:	6805      	ldr	r5, [r0, #0]
 801ffa6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801ffaa:	68ed      	ldr	r5, [r5, #12]
 801ffac:	4613      	mov	r3, r2
 801ffae:	4622      	mov	r2, r4
 801ffb0:	46ac      	mov	ip, r5
 801ffb2:	bcf0      	pop	{r4, r5, r6, r7}
 801ffb4:	4760      	bx	ip
 801ffb6:	4621      	mov	r1, r4
 801ffb8:	4628      	mov	r0, r5
 801ffba:	bcf0      	pop	{r4, r5, r6, r7}
 801ffbc:	f7ff bd94 	b.w	801fae8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ffc0:	4621      	mov	r1, r4
 801ffc2:	4628      	mov	r0, r5
 801ffc4:	bcf0      	pop	{r4, r5, r6, r7}
 801ffc6:	f7ff bee5 	b.w	801fd94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801ffcc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ffcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffd0:	b093      	sub	sp, #76	@ 0x4c
 801ffd2:	4681      	mov	r9, r0
 801ffd4:	4688      	mov	r8, r1
 801ffd6:	6810      	ldr	r0, [r2, #0]
 801ffd8:	6851      	ldr	r1, [r2, #4]
 801ffda:	ac0e      	add	r4, sp, #56	@ 0x38
 801ffdc:	4616      	mov	r6, r2
 801ffde:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 801ffe2:	4f6b      	ldr	r7, [pc, #428]	@ (8020190 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801ffe4:	c403      	stmia	r4!, {r0, r1}
 801ffe6:	6818      	ldr	r0, [r3, #0]
 801ffe8:	ac10      	add	r4, sp, #64	@ 0x40
 801ffea:	6859      	ldr	r1, [r3, #4]
 801ffec:	c403      	stmia	r4!, {r0, r1}
 801ffee:	a80e      	add	r0, sp, #56	@ 0x38
 801fff0:	f7f6 fec0 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fff4:	4631      	mov	r1, r6
 801fff6:	a810      	add	r0, sp, #64	@ 0x40
 801fff8:	4e66      	ldr	r6, [pc, #408]	@ (8020194 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801fffa:	f7f6 feff 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fffe:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8020002:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8020006:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 802000a:	6830      	ldr	r0, [r6, #0]
 802000c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020010:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8020014:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8020018:	4489      	add	r9, r1
 802001a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 802001e:	440a      	add	r2, r1
 8020020:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8020024:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8020028:	4413      	add	r3, r2
 802002a:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 802002e:	6803      	ldr	r3, [r0, #0]
 8020030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020032:	4798      	blx	r3
 8020034:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8020038:	6830      	ldr	r0, [r6, #0]
 802003a:	d01d      	beq.n	8020078 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802003c:	2200      	movs	r2, #0
 802003e:	6801      	ldr	r1, [r0, #0]
 8020040:	b2a4      	uxth	r4, r4
 8020042:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8020046:	b2ad      	uxth	r5, r5
 8020048:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802004c:	220b      	movs	r2, #11
 802004e:	9207      	str	r2, [sp, #28]
 8020050:	883a      	ldrh	r2, [r7, #0]
 8020052:	9502      	str	r5, [sp, #8]
 8020054:	9206      	str	r2, [sp, #24]
 8020056:	2201      	movs	r2, #1
 8020058:	9401      	str	r4, [sp, #4]
 802005a:	e9cd a204 	strd	sl, r2, [sp, #16]
 802005e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8020062:	9203      	str	r2, [sp, #12]
 8020064:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8020068:	9200      	str	r2, [sp, #0]
 802006a:	4642      	mov	r2, r8
 802006c:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 802006e:	4649      	mov	r1, r9
 8020070:	47a0      	blx	r4
 8020072:	b013      	add	sp, #76	@ 0x4c
 8020074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020078:	6803      	ldr	r3, [r0, #0]
 802007a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802007c:	4798      	blx	r3
 802007e:	883b      	ldrh	r3, [r7, #0]
 8020080:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8020084:	f04f 0e04 	mov.w	lr, #4
 8020088:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 802008c:	435d      	muls	r5, r3
 802008e:	fb03 1202 	mla	r2, r3, r2, r1
 8020092:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020096:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 802009a:	920c      	str	r2, [sp, #48]	@ 0x30
 802009c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80200a0:	1b12      	subs	r2, r2, r4
 80200a2:	920d      	str	r2, [sp, #52]	@ 0x34
 80200a4:	0062      	lsls	r2, r4, #1
 80200a6:	1b1c      	subs	r4, r3, r4
 80200a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80200aa:	0063      	lsls	r3, r4, #1
 80200ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80200ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80200b0:	4298      	cmp	r0, r3
 80200b2:	d266      	bcs.n	8020182 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80200b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80200b6:	eb00 0b03 	add.w	fp, r0, r3
 80200ba:	4558      	cmp	r0, fp
 80200bc:	d25c      	bcs.n	8020178 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80200be:	f819 3b01 	ldrb.w	r3, [r9], #1
 80200c2:	fb1e e303 	smlabb	r3, lr, r3, lr
 80200c6:	f858 2003 	ldr.w	r2, [r8, r3]
 80200ca:	0e11      	lsrs	r1, r2, #24
 80200cc:	d012      	beq.n	80200f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80200ce:	29ff      	cmp	r1, #255	@ 0xff
 80200d0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80200d4:	d110      	bne.n	80200f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80200d6:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80200da:	d10d      	bne.n	80200f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80200dc:	0953      	lsrs	r3, r2, #5
 80200de:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 80200e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80200e6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80200ea:	f027 0707 	bic.w	r7, r7, #7
 80200ee:	431f      	orrs	r7, r3
 80200f0:	433a      	orrs	r2, r7
 80200f2:	8002      	strh	r2, [r0, #0]
 80200f4:	3002      	adds	r0, #2
 80200f6:	e7e0      	b.n	80200ba <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80200f8:	fb0a f101 	mul.w	r1, sl, r1
 80200fc:	8806      	ldrh	r6, [r0, #0]
 80200fe:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8020102:	b2d2      	uxtb	r2, r2
 8020104:	1c4b      	adds	r3, r1, #1
 8020106:	1235      	asrs	r5, r6, #8
 8020108:	10f4      	asrs	r4, r6, #3
 802010a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 802010e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8020112:	00f6      	lsls	r6, r6, #3
 8020114:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8020118:	121b      	asrs	r3, r3, #8
 802011a:	b2f6      	uxtb	r6, r6
 802011c:	b299      	uxth	r1, r3
 802011e:	43db      	mvns	r3, r3
 8020120:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020124:	fb1c fc01 	smulbb	ip, ip, r1
 8020128:	b2db      	uxtb	r3, r3
 802012a:	fb12 f201 	smulbb	r2, r2, r1
 802012e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020132:	fb05 c503 	mla	r5, r5, r3, ip
 8020136:	b2ff      	uxtb	r7, r7
 8020138:	fb06 2203 	mla	r2, r6, r3, r2
 802013c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8020140:	fb17 f701 	smulbb	r7, r7, r1
 8020144:	b2ad      	uxth	r5, r5
 8020146:	b292      	uxth	r2, r2
 8020148:	fb04 7403 	mla	r4, r4, r3, r7
 802014c:	f105 0c01 	add.w	ip, r5, #1
 8020150:	1c57      	adds	r7, r2, #1
 8020152:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020156:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802015a:	b2a4      	uxth	r4, r4
 802015c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8020160:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020164:	433d      	orrs	r5, r7
 8020166:	1c67      	adds	r7, r4, #1
 8020168:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802016c:	0964      	lsrs	r4, r4, #5
 802016e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8020172:	4325      	orrs	r5, r4
 8020174:	8005      	strh	r5, [r0, #0]
 8020176:	e7bd      	b.n	80200f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8020178:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802017a:	4418      	add	r0, r3
 802017c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802017e:	4499      	add	r9, r3
 8020180:	e795      	b.n	80200ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8020182:	4b04      	ldr	r3, [pc, #16]	@ (8020194 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8020184:	6818      	ldr	r0, [r3, #0]
 8020186:	6803      	ldr	r3, [r0, #0]
 8020188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802018a:	4798      	blx	r3
 802018c:	e771      	b.n	8020072 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 802018e:	bf00      	nop
 8020190:	240065fa 	.word	0x240065fa
 8020194:	24006600 	.word	0x24006600

08020198 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802019c:	b087      	sub	sp, #28
 802019e:	4680      	mov	r8, r0
 80201a0:	460d      	mov	r5, r1
 80201a2:	4614      	mov	r4, r2
 80201a4:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80201a8:	2e00      	cmp	r6, #0
 80201aa:	f000 80b9 	beq.w	8020320 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80201ae:	6810      	ldr	r0, [r2, #0]
 80201b0:	af02      	add	r7, sp, #8
 80201b2:	6851      	ldr	r1, [r2, #4]
 80201b4:	c703      	stmia	r7!, {r0, r1}
 80201b6:	6818      	ldr	r0, [r3, #0]
 80201b8:	af04      	add	r7, sp, #16
 80201ba:	6859      	ldr	r1, [r3, #4]
 80201bc:	c703      	stmia	r7!, {r0, r1}
 80201be:	a802      	add	r0, sp, #8
 80201c0:	f7f6 fdd8 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80201c4:	4621      	mov	r1, r4
 80201c6:	a804      	add	r0, sp, #16
 80201c8:	f7f6 fe18 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80201cc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80201d0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80201d4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80201d8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80201dc:	fb14 2103 	smlabb	r1, r4, r3, r2
 80201e0:	eb08 0401 	add.w	r4, r8, r1
 80201e4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80201e8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80201ec:	440a      	add	r2, r1
 80201ee:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80201f2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80201f6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80201fa:	4413      	add	r3, r2
 80201fc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020200:	4b49      	ldr	r3, [pc, #292]	@ (8020328 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8020202:	6818      	ldr	r0, [r3, #0]
 8020204:	6803      	ldr	r3, [r0, #0]
 8020206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020208:	4798      	blx	r3
 802020a:	4b48      	ldr	r3, [pc, #288]	@ (802032c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 802020c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8020210:	2eff      	cmp	r6, #255	@ 0xff
 8020212:	881a      	ldrh	r2, [r3, #0]
 8020214:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8020218:	fb02 c101 	mla	r1, r2, r1, ip
 802021c:	fb02 f207 	mul.w	r2, r2, r7
 8020220:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020224:	f105 0104 	add.w	r1, r5, #4
 8020228:	461d      	mov	r5, r3
 802022a:	d05a      	beq.n	80202e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 802022c:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8020230:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020234:	b2b6      	uxth	r6, r6
 8020236:	9301      	str	r3, [sp, #4]
 8020238:	fa1f fe8e 	uxth.w	lr, lr
 802023c:	4282      	cmp	r2, r0
 802023e:	d96a      	bls.n	8020316 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8020240:	eb00 0b0a 	add.w	fp, r0, sl
 8020244:	4583      	cmp	fp, r0
 8020246:	d940      	bls.n	80202ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8020248:	8805      	ldrh	r5, [r0, #0]
 802024a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802024e:	122f      	asrs	r7, r5, #8
 8020250:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020254:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020258:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802025c:	00ed      	lsls	r5, r5, #3
 802025e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020262:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8020266:	fb17 f70e 	smulbb	r7, r7, lr
 802026a:	b2ed      	uxtb	r5, r5
 802026c:	fb19 f90e 	smulbb	r9, r9, lr
 8020270:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020274:	fb15 f50e 	smulbb	r5, r5, lr
 8020278:	fb0c 7c06 	mla	ip, ip, r6, r7
 802027c:	10df      	asrs	r7, r3, #3
 802027e:	00db      	lsls	r3, r3, #3
 8020280:	fa1f fc8c 	uxth.w	ip, ip
 8020284:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020288:	b2db      	uxtb	r3, r3
 802028a:	fb07 9706 	mla	r7, r7, r6, r9
 802028e:	f10c 0901 	add.w	r9, ip, #1
 8020292:	fb03 5306 	mla	r3, r3, r6, r5
 8020296:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 802029a:	b29b      	uxth	r3, r3
 802029c:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 80202a0:	b2bf      	uxth	r7, r7
 80202a2:	f103 0c01 	add.w	ip, r3, #1
 80202a6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80202aa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80202ae:	ea4c 0c09 	orr.w	ip, ip, r9
 80202b2:	f107 0901 	add.w	r9, r7, #1
 80202b6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80202ba:	097f      	lsrs	r7, r7, #5
 80202bc:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80202c0:	ea4c 0c07 	orr.w	ip, ip, r7
 80202c4:	f820 cb02 	strh.w	ip, [r0], #2
 80202c8:	e7bc      	b.n	8020244 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80202ca:	9b01      	ldr	r3, [sp, #4]
 80202cc:	881b      	ldrh	r3, [r3, #0]
 80202ce:	eba3 0308 	sub.w	r3, r3, r8
 80202d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80202d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80202da:	eba3 0308 	sub.w	r3, r3, r8
 80202de:	441c      	add	r4, r3
 80202e0:	e7ac      	b.n	802023c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80202e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80202e6:	4282      	cmp	r2, r0
 80202e8:	d915      	bls.n	8020316 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80202ea:	eb00 060a 	add.w	r6, r0, sl
 80202ee:	4286      	cmp	r6, r0
 80202f0:	d906      	bls.n	8020300 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 80202f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80202f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80202fa:	f820 3b02 	strh.w	r3, [r0], #2
 80202fe:	e7f6      	b.n	80202ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8020300:	882b      	ldrh	r3, [r5, #0]
 8020302:	eba3 0308 	sub.w	r3, r3, r8
 8020306:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802030a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802030e:	eba3 0308 	sub.w	r3, r3, r8
 8020312:	441c      	add	r4, r3
 8020314:	e7e7      	b.n	80202e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8020316:	4b04      	ldr	r3, [pc, #16]	@ (8020328 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8020318:	6818      	ldr	r0, [r3, #0]
 802031a:	6803      	ldr	r3, [r0, #0]
 802031c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802031e:	4798      	blx	r3
 8020320:	b007      	add	sp, #28
 8020322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020326:	bf00      	nop
 8020328:	24006600 	.word	0x24006600
 802032c:	240065fa 	.word	0x240065fa

08020330 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020334:	b091      	sub	sp, #68	@ 0x44
 8020336:	4680      	mov	r8, r0
 8020338:	460f      	mov	r7, r1
 802033a:	4614      	mov	r4, r2
 802033c:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8020340:	2d00      	cmp	r5, #0
 8020342:	d051      	beq.n	80203e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020344:	6810      	ldr	r0, [r2, #0]
 8020346:	ae0c      	add	r6, sp, #48	@ 0x30
 8020348:	6851      	ldr	r1, [r2, #4]
 802034a:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 802054c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 802034e:	c603      	stmia	r6!, {r0, r1}
 8020350:	6818      	ldr	r0, [r3, #0]
 8020352:	ae0e      	add	r6, sp, #56	@ 0x38
 8020354:	6859      	ldr	r1, [r3, #4]
 8020356:	c603      	stmia	r6!, {r0, r1}
 8020358:	a80c      	add	r0, sp, #48	@ 0x30
 802035a:	f7f6 fd0b 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802035e:	4621      	mov	r1, r4
 8020360:	a80e      	add	r0, sp, #56	@ 0x38
 8020362:	f7f6 fd4b 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020366:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 802036a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802036e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8020372:	f8d9 0000 	ldr.w	r0, [r9]
 8020376:	fb11 2103 	smlabb	r1, r1, r3, r2
 802037a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 802037e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8020382:	eb08 0401 	add.w	r4, r8, r1
 8020386:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 802038a:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8020550 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 802038e:	440a      	add	r2, r1
 8020390:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8020394:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8020398:	4413      	add	r3, r2
 802039a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802039e:	6803      	ldr	r3, [r0, #0]
 80203a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80203a2:	4798      	blx	r3
 80203a4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80203a8:	f8d9 0000 	ldr.w	r0, [r9]
 80203ac:	d01f      	beq.n	80203ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80203ae:	2200      	movs	r2, #0
 80203b0:	6801      	ldr	r1, [r0, #0]
 80203b2:	b2b6      	uxth	r6, r6
 80203b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80203b8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80203bc:	220b      	movs	r2, #11
 80203be:	9207      	str	r2, [sp, #28]
 80203c0:	f8b8 2000 	ldrh.w	r2, [r8]
 80203c4:	9601      	str	r6, [sp, #4]
 80203c6:	9206      	str	r2, [sp, #24]
 80203c8:	2201      	movs	r2, #1
 80203ca:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80203ce:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80203d2:	9203      	str	r2, [sp, #12]
 80203d4:	fa1f f28a 	uxth.w	r2, sl
 80203d8:	9202      	str	r2, [sp, #8]
 80203da:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80203de:	9200      	str	r2, [sp, #0]
 80203e0:	463a      	mov	r2, r7
 80203e2:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 80203e4:	4621      	mov	r1, r4
 80203e6:	47a8      	blx	r5
 80203e8:	b011      	add	sp, #68	@ 0x44
 80203ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203ee:	6803      	ldr	r3, [r0, #0]
 80203f0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80203f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80203f6:	4798      	blx	r3
 80203f8:	f8b8 2000 	ldrh.w	r2, [r8]
 80203fc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8020400:	2dff      	cmp	r5, #255	@ 0xff
 8020402:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8020406:	fb0a fa02 	mul.w	sl, sl, r2
 802040a:	fb02 1303 	mla	r3, r2, r3, r1
 802040e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020412:	d062      	beq.n	80204da <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8020414:	ea6f 0c05 	mvn.w	ip, r5
 8020418:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802041c:	b2ad      	uxth	r5, r5
 802041e:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8020422:	fa5f fc8c 	uxtb.w	ip, ip
 8020426:	930a      	str	r3, [sp, #40]	@ 0x28
 8020428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802042a:	4298      	cmp	r0, r3
 802042c:	f080 8085 	bcs.w	802053a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8020430:	eb00 0b09 	add.w	fp, r0, r9
 8020434:	4558      	cmp	r0, fp
 8020436:	d246      	bcs.n	80204c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8020438:	f814 eb01 	ldrb.w	lr, [r4], #1
 802043c:	2303      	movs	r3, #3
 802043e:	2204      	movs	r2, #4
 8020440:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8020444:	8803      	ldrh	r3, [r0, #0]
 8020446:	eb07 0a0e 	add.w	sl, r7, lr
 802044a:	1219      	asrs	r1, r3, #8
 802044c:	10da      	asrs	r2, r3, #3
 802044e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020452:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8020456:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802045a:	00db      	lsls	r3, r3, #3
 802045c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8020460:	fb18 f805 	smulbb	r8, r8, r5
 8020464:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020468:	fb1e fe05 	smulbb	lr, lr, r5
 802046c:	b2db      	uxtb	r3, r3
 802046e:	fb01 810c 	mla	r1, r1, ip, r8
 8020472:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020476:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802047a:	fb18 f805 	smulbb	r8, r8, r5
 802047e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8020482:	b289      	uxth	r1, r1
 8020484:	fb02 820c 	mla	r2, r2, ip, r8
 8020488:	fb03 e30c 	mla	r3, r3, ip, lr
 802048c:	f101 0801 	add.w	r8, r1, #1
 8020490:	b292      	uxth	r2, r2
 8020492:	b29b      	uxth	r3, r3
 8020494:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020498:	f102 0801 	add.w	r8, r2, #1
 802049c:	f103 0e01 	add.w	lr, r3, #1
 80204a0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80204a4:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80204a8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80204ac:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80204b0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80204b4:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80204b8:	ea4e 0101 	orr.w	r1, lr, r1
 80204bc:	ea41 0108 	orr.w	r1, r1, r8
 80204c0:	f820 1b02 	strh.w	r1, [r0], #2
 80204c4:	e7b6      	b.n	8020434 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80204c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80204c8:	881b      	ldrh	r3, [r3, #0]
 80204ca:	1b9b      	subs	r3, r3, r6
 80204cc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80204d0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80204d4:	1b9b      	subs	r3, r3, r6
 80204d6:	441c      	add	r4, r3
 80204d8:	e7a6      	b.n	8020428 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80204da:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80204de:	2203      	movs	r2, #3
 80204e0:	2504      	movs	r5, #4
 80204e2:	4919      	ldr	r1, [pc, #100]	@ (8020548 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80204e4:	4550      	cmp	r0, sl
 80204e6:	d228      	bcs.n	802053a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80204e8:	eb00 0c09 	add.w	ip, r0, r9
 80204ec:	4560      	cmp	r0, ip
 80204ee:	4623      	mov	r3, r4
 80204f0:	d219      	bcs.n	8020526 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80204f2:	f893 e000 	ldrb.w	lr, [r3]
 80204f6:	3401      	adds	r4, #1
 80204f8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80204fc:	eb07 0b0e 	add.w	fp, r7, lr
 8020500:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020504:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020508:	f89b b001 	ldrb.w	fp, [fp, #1]
 802050c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8020510:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8020514:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8020518:	ea43 030b 	orr.w	r3, r3, fp
 802051c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8020520:	f820 3b02 	strh.w	r3, [r0], #2
 8020524:	e7e2      	b.n	80204ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8020526:	f8b8 3000 	ldrh.w	r3, [r8]
 802052a:	1b9b      	subs	r3, r3, r6
 802052c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020530:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020534:	1b9b      	subs	r3, r3, r6
 8020536:	441c      	add	r4, r3
 8020538:	e7d4      	b.n	80204e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802053a:	4b04      	ldr	r3, [pc, #16]	@ (802054c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 802053c:	6818      	ldr	r0, [r3, #0]
 802053e:	6803      	ldr	r3, [r0, #0]
 8020540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020542:	4798      	blx	r3
 8020544:	e750      	b.n	80203e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020546:	bf00      	nop
 8020548:	fffff800 	.word	0xfffff800
 802054c:	24006600 	.word	0x24006600
 8020550:	240065fa 	.word	0x240065fa

08020554 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020554:	b4f0      	push	{r4, r5, r6, r7}
 8020556:	460c      	mov	r4, r1
 8020558:	4611      	mov	r1, r2
 802055a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802055e:	461a      	mov	r2, r3
 8020560:	780f      	ldrb	r7, [r1, #0]
 8020562:	9b04      	ldr	r3, [sp, #16]
 8020564:	2f01      	cmp	r7, #1
 8020566:	784e      	ldrb	r6, [r1, #1]
 8020568:	d038      	beq.n	80205dc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 802056a:	d31f      	bcc.n	80205ac <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 802056c:	2f02      	cmp	r7, #2
 802056e:	d14d      	bne.n	802060c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020570:	2e03      	cmp	r6, #3
 8020572:	d84b      	bhi.n	802060c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8020574:	e8df f006 	tbb	[pc, r6]
 8020578:	17140702 	.word	0x17140702
 802057c:	9504      	str	r5, [sp, #16]
 802057e:	4620      	mov	r0, r4
 8020580:	bcf0      	pop	{r4, r5, r6, r7}
 8020582:	f7ff be09 	b.w	8020198 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8020586:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8020588:	2800      	cmp	r0, #0
 802058a:	d03f      	beq.n	802060c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802058c:	6806      	ldr	r6, [r0, #0]
 802058e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8020592:	68b5      	ldr	r5, [r6, #8]
 8020594:	4613      	mov	r3, r2
 8020596:	46ac      	mov	ip, r5
 8020598:	460a      	mov	r2, r1
 802059a:	4621      	mov	r1, r4
 802059c:	bcf0      	pop	{r4, r5, r6, r7}
 802059e:	4760      	bx	ip
 80205a0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80205a4:	e7f0      	b.n	8020588 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80205a6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80205aa:	e7ed      	b.n	8020588 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80205ac:	2e03      	cmp	r6, #3
 80205ae:	d82d      	bhi.n	802060c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80205b0:	e8df f006 	tbb	[pc, r6]
 80205b4:	110e0702 	.word	0x110e0702
 80205b8:	9504      	str	r5, [sp, #16]
 80205ba:	4620      	mov	r0, r4
 80205bc:	bcf0      	pop	{r4, r5, r6, r7}
 80205be:	f7ff bd05 	b.w	801ffcc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80205c2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80205c4:	b310      	cbz	r0, 802060c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80205c6:	6806      	ldr	r6, [r0, #0]
 80205c8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80205cc:	68f5      	ldr	r5, [r6, #12]
 80205ce:	e7e1      	b.n	8020594 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80205d0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80205d4:	e7f6      	b.n	80205c4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80205d6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80205da:	e7f3      	b.n	80205c4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 80205dc:	2e03      	cmp	r6, #3
 80205de:	d815      	bhi.n	802060c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80205e0:	e8df f006 	tbb	[pc, r6]
 80205e4:	110e0702 	.word	0x110e0702
 80205e8:	9504      	str	r5, [sp, #16]
 80205ea:	4620      	mov	r0, r4
 80205ec:	bcf0      	pop	{r4, r5, r6, r7}
 80205ee:	f7ff be9f 	b.w	8020330 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80205f2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80205f4:	b150      	cbz	r0, 802060c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80205f6:	6806      	ldr	r6, [r0, #0]
 80205f8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80205fc:	6935      	ldr	r5, [r6, #16]
 80205fe:	e7c9      	b.n	8020594 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8020600:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8020604:	e7f6      	b.n	80205f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8020606:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 802060a:	e7f3      	b.n	80205f4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 802060c:	bcf0      	pop	{r4, r5, r6, r7}
 802060e:	4770      	bx	lr

08020610 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8020610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020614:	b087      	sub	sp, #28
 8020616:	4604      	mov	r4, r0
 8020618:	460e      	mov	r6, r1
 802061a:	6810      	ldr	r0, [r2, #0]
 802061c:	6851      	ldr	r1, [r2, #4]
 802061e:	ad02      	add	r5, sp, #8
 8020620:	4617      	mov	r7, r2
 8020622:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8020626:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 8020858 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 802062a:	c503      	stmia	r5!, {r0, r1}
 802062c:	6818      	ldr	r0, [r3, #0]
 802062e:	ad04      	add	r5, sp, #16
 8020630:	6859      	ldr	r1, [r3, #4]
 8020632:	c503      	stmia	r5!, {r0, r1}
 8020634:	a802      	add	r0, sp, #8
 8020636:	f7f6 fb9d 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802063a:	4639      	mov	r1, r7
 802063c:	a804      	add	r0, sp, #16
 802063e:	f7f6 fbdd 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020642:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020646:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802064a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802064e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8020652:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020656:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 802065a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802065e:	440e      	add	r6, r1
 8020660:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020664:	440a      	add	r2, r1
 8020666:	f8ad 2010 	strh.w	r2, [sp, #16]
 802066a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802066e:	4413      	add	r3, r2
 8020670:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020674:	4b77      	ldr	r3, [pc, #476]	@ (8020854 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020676:	6818      	ldr	r0, [r3, #0]
 8020678:	6803      	ldr	r3, [r0, #0]
 802067a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802067c:	4798      	blx	r3
 802067e:	f8b9 b000 	ldrh.w	fp, [r9]
 8020682:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020686:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802068a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802068e:	fb05 f50b 	mul.w	r5, r5, fp
 8020692:	fb0b 2303 	mla	r3, fp, r3, r2
 8020696:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802069a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802069e:	9300      	str	r3, [sp, #0]
 80206a0:	d069      	beq.n	8020776 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80206a2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80206a6:	4558      	cmp	r0, fp
 80206a8:	f080 80cc 	bcs.w	8020844 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80206ac:	9b00      	ldr	r3, [sp, #0]
 80206ae:	4631      	mov	r1, r6
 80206b0:	18c3      	adds	r3, r0, r3
 80206b2:	9301      	str	r3, [sp, #4]
 80206b4:	9b01      	ldr	r3, [sp, #4]
 80206b6:	4298      	cmp	r0, r3
 80206b8:	d24f      	bcs.n	802075a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 80206ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80206be:	2a00      	cmp	r2, #0
 80206c0:	d048      	beq.n	8020754 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80206c2:	fb0a f202 	mul.w	r2, sl, r2
 80206c6:	1c53      	adds	r3, r2, #1
 80206c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80206cc:	121b      	asrs	r3, r3, #8
 80206ce:	d041      	beq.n	8020754 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80206d0:	8802      	ldrh	r2, [r0, #0]
 80206d2:	b29e      	uxth	r6, r3
 80206d4:	f8b4 c000 	ldrh.w	ip, [r4]
 80206d8:	43db      	mvns	r3, r3
 80206da:	1215      	asrs	r5, r2, #8
 80206dc:	b2db      	uxtb	r3, r3
 80206de:	ea4f 272c 	mov.w	r7, ip, asr #8
 80206e2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80206e6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80206ea:	fb15 f503 	smulbb	r5, r5, r3
 80206ee:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80206f2:	00d2      	lsls	r2, r2, #3
 80206f4:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80206f8:	fb07 5706 	mla	r7, r7, r6, r5
 80206fc:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020700:	b2d2      	uxtb	r2, r2
 8020702:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020706:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802070a:	fb1e fe03 	smulbb	lr, lr, r3
 802070e:	b2bf      	uxth	r7, r7
 8020710:	fb12 f203 	smulbb	r2, r2, r3
 8020714:	fa5f fc8c 	uxtb.w	ip, ip
 8020718:	fb05 e506 	mla	r5, r5, r6, lr
 802071c:	f107 0e01 	add.w	lr, r7, #1
 8020720:	fb0c 2c06 	mla	ip, ip, r6, r2
 8020724:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020728:	fa1f fc8c 	uxth.w	ip, ip
 802072c:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8020730:	b2ad      	uxth	r5, r5
 8020732:	f10c 0701 	add.w	r7, ip, #1
 8020736:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802073a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802073e:	ea47 070e 	orr.w	r7, r7, lr
 8020742:	f105 0e01 	add.w	lr, r5, #1
 8020746:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802074a:	096d      	lsrs	r5, r5, #5
 802074c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020750:	432f      	orrs	r7, r5
 8020752:	8007      	strh	r7, [r0, #0]
 8020754:	3002      	adds	r0, #2
 8020756:	3402      	adds	r4, #2
 8020758:	e7ac      	b.n	80206b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 802075a:	f8b9 3000 	ldrh.w	r3, [r9]
 802075e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020762:	eba3 0308 	sub.w	r3, r3, r8
 8020766:	eba6 0608 	sub.w	r6, r6, r8
 802076a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802076e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020772:	440e      	add	r6, r1
 8020774:	e797      	b.n	80206a6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8020776:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802077a:	42a8      	cmp	r0, r5
 802077c:	d262      	bcs.n	8020844 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 802077e:	9b00      	ldr	r3, [sp, #0]
 8020780:	4631      	mov	r1, r6
 8020782:	eb00 0b03 	add.w	fp, r0, r3
 8020786:	4558      	cmp	r0, fp
 8020788:	d24e      	bcs.n	8020828 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 802078a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802078e:	b12b      	cbz	r3, 802079c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8020790:	2bff      	cmp	r3, #255	@ 0xff
 8020792:	f8b4 e000 	ldrh.w	lr, [r4]
 8020796:	d104      	bne.n	80207a2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8020798:	f8a0 e000 	strh.w	lr, [r0]
 802079c:	3002      	adds	r0, #2
 802079e:	3402      	adds	r4, #2
 80207a0:	e7f1      	b.n	8020786 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80207a2:	8802      	ldrh	r2, [r0, #0]
 80207a4:	b29f      	uxth	r7, r3
 80207a6:	43db      	mvns	r3, r3
 80207a8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80207ac:	1216      	asrs	r6, r2, #8
 80207ae:	b2db      	uxtb	r3, r3
 80207b0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80207b4:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80207b8:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80207bc:	00d2      	lsls	r2, r2, #3
 80207be:	fb16 f603 	smulbb	r6, r6, r3
 80207c2:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80207c6:	b2d2      	uxtb	r2, r2
 80207c8:	fb0c 6c07 	mla	ip, ip, r7, r6
 80207cc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80207d0:	fb1a fa03 	smulbb	sl, sl, r3
 80207d4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80207d8:	fa1f fc8c 	uxth.w	ip, ip
 80207dc:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80207e0:	fb12 f303 	smulbb	r3, r2, r3
 80207e4:	fa5f fe8e 	uxtb.w	lr, lr
 80207e8:	fb06 a607 	mla	r6, r6, r7, sl
 80207ec:	f10c 0201 	add.w	r2, ip, #1
 80207f0:	fb0e 3307 	mla	r3, lr, r7, r3
 80207f4:	b2b6      	uxth	r6, r6
 80207f6:	b29b      	uxth	r3, r3
 80207f8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80207fc:	f106 0a01 	add.w	sl, r6, #1
 8020800:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8020804:	f103 0c01 	add.w	ip, r3, #1
 8020808:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 802080c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020810:	0976      	lsrs	r6, r6, #5
 8020812:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020816:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802081a:	ea4c 0c02 	orr.w	ip, ip, r2
 802081e:	ea4c 0c06 	orr.w	ip, ip, r6
 8020822:	f8a0 c000 	strh.w	ip, [r0]
 8020826:	e7b9      	b.n	802079c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8020828:	f8b9 3000 	ldrh.w	r3, [r9]
 802082c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020830:	eba3 0308 	sub.w	r3, r3, r8
 8020834:	eba6 0608 	sub.w	r6, r6, r8
 8020838:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802083c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020840:	440e      	add	r6, r1
 8020842:	e79a      	b.n	802077a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8020844:	4b03      	ldr	r3, [pc, #12]	@ (8020854 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020846:	6818      	ldr	r0, [r3, #0]
 8020848:	6803      	ldr	r3, [r0, #0]
 802084a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802084c:	4798      	blx	r3
 802084e:	b007      	add	sp, #28
 8020850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020854:	24006600 	.word	0x24006600
 8020858:	240065fa 	.word	0x240065fa

0802085c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020860:	b089      	sub	sp, #36	@ 0x24
 8020862:	4607      	mov	r7, r0
 8020864:	4688      	mov	r8, r1
 8020866:	4692      	mov	sl, r2
 8020868:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 802086c:	4699      	mov	r9, r3
 802086e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020870:	2e00      	cmp	r6, #0
 8020872:	d048      	beq.n	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020874:	4608      	mov	r0, r1
 8020876:	f7fa f81b 	bl	801a8b0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802087a:	4605      	mov	r5, r0
 802087c:	4640      	mov	r0, r8
 802087e:	f7fa f84b 	bl	801a918 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020882:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020886:	4640      	mov	r0, r8
 8020888:	f8ad a008 	strh.w	sl, [sp, #8]
 802088c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8020890:	f8ad 900a 	strh.w	r9, [sp, #10]
 8020894:	f7fa f8fe 	bl	801aa94 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020898:	4605      	mov	r5, r0
 802089a:	4640      	mov	r0, r8
 802089c:	f7fa f92a 	bl	801aaf4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80208a0:	4682      	mov	sl, r0
 80208a2:	4640      	mov	r0, r8
 80208a4:	f7fa f97a 	bl	801ab9c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80208a8:	2810      	cmp	r0, #16
 80208aa:	d82c      	bhi.n	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80208ac:	e8df f010 	tbh	[pc, r0, lsl #1]
 80208b0:	00ba00ca 	.word	0x00ba00ca
 80208b4:	002b0011 	.word	0x002b0011
 80208b8:	002b002b 	.word	0x002b002b
 80208bc:	002b002b 	.word	0x002b002b
 80208c0:	002b002b 	.word	0x002b002b
 80208c4:	00c1002b 	.word	0x00c1002b
 80208c8:	002b002b 	.word	0x002b002b
 80208cc:	002b0180 	.word	0x002b0180
 80208d0:	0173      	.short	0x0173
 80208d2:	4bbc      	ldr	r3, [pc, #752]	@ (8020bc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 80208d4:	6818      	ldr	r0, [r3, #0]
 80208d6:	6803      	ldr	r3, [r0, #0]
 80208d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80208da:	4798      	blx	r3
 80208dc:	2eff      	cmp	r6, #255	@ 0xff
 80208de:	d101      	bne.n	80208e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 80208e0:	0683      	lsls	r3, r0, #26
 80208e2:	d506      	bpl.n	80208f2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 80208e4:	4633      	mov	r3, r6
 80208e6:	4622      	mov	r2, r4
 80208e8:	a902      	add	r1, sp, #8
 80208ea:	4628      	mov	r0, r5
 80208ec:	f7ff f8fc 	bl	801fae8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80208f0:	e009      	b.n	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80208f2:	4640      	mov	r0, r8
 80208f4:	f7fa f896 	bl	801aa24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80208f8:	b940      	cbnz	r0, 802090c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 80208fa:	4623      	mov	r3, r4
 80208fc:	aa02      	add	r2, sp, #8
 80208fe:	4629      	mov	r1, r5
 8020900:	4638      	mov	r0, r7
 8020902:	f7ff f9d7 	bl	801fcb4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8020906:	b009      	add	sp, #36	@ 0x24
 8020908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802090c:	f10d 0918 	add.w	r9, sp, #24
 8020910:	4641      	mov	r1, r8
 8020912:	f10d 0810 	add.w	r8, sp, #16
 8020916:	4648      	mov	r0, r9
 8020918:	f7fa f832 	bl	801a980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 802091c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8020920:	e888 0003 	stmia.w	r8, {r0, r1}
 8020924:	4640      	mov	r0, r8
 8020926:	4621      	mov	r1, r4
 8020928:	f7f2 f976 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 802092c:	4640      	mov	r0, r8
 802092e:	f7f2 f9b6 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8020932:	2800      	cmp	r0, #0
 8020934:	d1d6      	bne.n	80208e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8020936:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802093a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802093e:	4293      	cmp	r3, r2
 8020940:	dd12      	ble.n	8020968 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8020942:	1a9b      	subs	r3, r3, r2
 8020944:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020948:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802094c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020950:	4628      	mov	r0, r5
 8020952:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020956:	464a      	mov	r2, r9
 8020958:	f8ad 101c 	strh.w	r1, [sp, #28]
 802095c:	a902      	add	r1, sp, #8
 802095e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020962:	4633      	mov	r3, r6
 8020964:	f7ff f8c0 	bl	801fae8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020968:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802096c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020970:	4293      	cmp	r3, r2
 8020972:	dd12      	ble.n	802099a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8020974:	1a9b      	subs	r3, r3, r2
 8020976:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802097a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802097e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020982:	464a      	mov	r2, r9
 8020984:	f8ad 001a 	strh.w	r0, [sp, #26]
 8020988:	4628      	mov	r0, r5
 802098a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802098e:	23ff      	movs	r3, #255	@ 0xff
 8020990:	f8ad 101e 	strh.w	r1, [sp, #30]
 8020994:	a902      	add	r1, sp, #8
 8020996:	f7ff f8a7 	bl	801fae8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802099a:	4643      	mov	r3, r8
 802099c:	aa02      	add	r2, sp, #8
 802099e:	4629      	mov	r1, r5
 80209a0:	4638      	mov	r0, r7
 80209a2:	f7ff f987 	bl	801fcb4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80209a6:	88a2      	ldrh	r2, [r4, #4]
 80209a8:	8823      	ldrh	r3, [r4, #0]
 80209aa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80209ae:	4413      	add	r3, r2
 80209b0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80209b4:	440a      	add	r2, r1
 80209b6:	b29b      	uxth	r3, r3
 80209b8:	b292      	uxth	r2, r2
 80209ba:	b218      	sxth	r0, r3
 80209bc:	b211      	sxth	r1, r2
 80209be:	4288      	cmp	r0, r1
 80209c0:	dd12      	ble.n	80209e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 80209c2:	1a9b      	subs	r3, r3, r2
 80209c4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80209c8:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 80209cc:	464a      	mov	r2, r9
 80209ce:	f8ad 1018 	strh.w	r1, [sp, #24]
 80209d2:	a902      	add	r1, sp, #8
 80209d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80209d8:	23ff      	movs	r3, #255	@ 0xff
 80209da:	f8ad 001e 	strh.w	r0, [sp, #30]
 80209de:	4628      	mov	r0, r5
 80209e0:	f8ad 601a 	strh.w	r6, [sp, #26]
 80209e4:	f7ff f880 	bl	801fae8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80209e8:	88e2      	ldrh	r2, [r4, #6]
 80209ea:	8863      	ldrh	r3, [r4, #2]
 80209ec:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80209f0:	4413      	add	r3, r2
 80209f2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80209f6:	440a      	add	r2, r1
 80209f8:	b29b      	uxth	r3, r3
 80209fa:	b292      	uxth	r2, r2
 80209fc:	b218      	sxth	r0, r3
 80209fe:	b211      	sxth	r1, r2
 8020a00:	4288      	cmp	r0, r1
 8020a02:	dd80      	ble.n	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020a04:	1a9b      	subs	r3, r3, r2
 8020a06:	f9b4 6000 	ldrsh.w	r6, [r4]
 8020a0a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020a0e:	464a      	mov	r2, r9
 8020a10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020a14:	23ff      	movs	r3, #255	@ 0xff
 8020a16:	f8ad 6018 	strh.w	r6, [sp, #24]
 8020a1a:	f8ad 101a 	strh.w	r1, [sp, #26]
 8020a1e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8020a22:	e761      	b.n	80208e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8020a24:	4633      	mov	r3, r6
 8020a26:	4622      	mov	r2, r4
 8020a28:	a902      	add	r1, sp, #8
 8020a2a:	4628      	mov	r0, r5
 8020a2c:	f7ff f9b2 	bl	801fd94 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8020a30:	e769      	b.n	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020a32:	e9cd 4600 	strd	r4, r6, [sp]
 8020a36:	ab02      	add	r3, sp, #8
 8020a38:	4652      	mov	r2, sl
 8020a3a:	4629      	mov	r1, r5
 8020a3c:	4638      	mov	r0, r7
 8020a3e:	f7ff fd89 	bl	8020554 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020a42:	e760      	b.n	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020a44:	4640      	mov	r0, r8
 8020a46:	f7f9 ffed 	bl	801aa24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020a4a:	b948      	cbnz	r0, 8020a60 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8020a4c:	683b      	ldr	r3, [r7, #0]
 8020a4e:	aa02      	add	r2, sp, #8
 8020a50:	4629      	mov	r1, r5
 8020a52:	e9cd 6000 	strd	r6, r0, [sp]
 8020a56:	4638      	mov	r0, r7
 8020a58:	68de      	ldr	r6, [r3, #12]
 8020a5a:	4623      	mov	r3, r4
 8020a5c:	47b0      	blx	r6
 8020a5e:	e752      	b.n	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020a60:	f10d 0918 	add.w	r9, sp, #24
 8020a64:	4641      	mov	r1, r8
 8020a66:	f10d 0810 	add.w	r8, sp, #16
 8020a6a:	4648      	mov	r0, r9
 8020a6c:	f7f9 ff88 	bl	801a980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8020a70:	e899 0003 	ldmia.w	r9, {r0, r1}
 8020a74:	e888 0003 	stmia.w	r8, {r0, r1}
 8020a78:	4640      	mov	r0, r8
 8020a7a:	4621      	mov	r1, r4
 8020a7c:	f7f2 f8cc 	bl	8012c18 <_ZN8touchgfx4RectaNERKS0_>
 8020a80:	4640      	mov	r0, r8
 8020a82:	f7f2 f90c 	bl	8012c9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8020a86:	b138      	cbz	r0, 8020a98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8020a88:	4623      	mov	r3, r4
 8020a8a:	9600      	str	r6, [sp, #0]
 8020a8c:	aa02      	add	r2, sp, #8
 8020a8e:	4651      	mov	r1, sl
 8020a90:	4628      	mov	r0, r5
 8020a92:	f7ff fdbd 	bl	8020610 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020a96:	e736      	b.n	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020a98:	683b      	ldr	r3, [r7, #0]
 8020a9a:	aa02      	add	r2, sp, #8
 8020a9c:	4629      	mov	r1, r5
 8020a9e:	e9cd 6000 	strd	r6, r0, [sp]
 8020aa2:	4638      	mov	r0, r7
 8020aa4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8020aa8:	4643      	mov	r3, r8
 8020aaa:	47d8      	blx	fp
 8020aac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020ab0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020ab4:	4293      	cmp	r3, r2
 8020ab6:	dd13      	ble.n	8020ae0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8020ab8:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020abc:	1a9b      	subs	r3, r3, r2
 8020abe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020ac2:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020ac6:	4628      	mov	r0, r5
 8020ac8:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020acc:	aa02      	add	r2, sp, #8
 8020ace:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020ad2:	4651      	mov	r1, sl
 8020ad4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020ad8:	464b      	mov	r3, r9
 8020ada:	9600      	str	r6, [sp, #0]
 8020adc:	f7ff fd98 	bl	8020610 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020ae0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020ae4:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020ae8:	4293      	cmp	r3, r2
 8020aea:	dd13      	ble.n	8020b14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8020aec:	1a9b      	subs	r3, r3, r2
 8020aee:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8020af2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8020af6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020afa:	aa02      	add	r2, sp, #8
 8020afc:	f8ad 001a 	strh.w	r0, [sp, #26]
 8020b00:	4628      	mov	r0, r5
 8020b02:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020b06:	464b      	mov	r3, r9
 8020b08:	f8ad 101e 	strh.w	r1, [sp, #30]
 8020b0c:	4651      	mov	r1, sl
 8020b0e:	9600      	str	r6, [sp, #0]
 8020b10:	f7ff fd7e 	bl	8020610 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020b14:	88a2      	ldrh	r2, [r4, #4]
 8020b16:	8823      	ldrh	r3, [r4, #0]
 8020b18:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8020b1c:	4413      	add	r3, r2
 8020b1e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020b22:	440a      	add	r2, r1
 8020b24:	b29b      	uxth	r3, r3
 8020b26:	b292      	uxth	r2, r2
 8020b28:	b218      	sxth	r0, r3
 8020b2a:	b211      	sxth	r1, r2
 8020b2c:	4288      	cmp	r0, r1
 8020b2e:	dd13      	ble.n	8020b58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8020b30:	1a9b      	subs	r3, r3, r2
 8020b32:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8020b36:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8020b3a:	aa02      	add	r2, sp, #8
 8020b3c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8020b40:	4651      	mov	r1, sl
 8020b42:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020b46:	464b      	mov	r3, r9
 8020b48:	f8ad 001e 	strh.w	r0, [sp, #30]
 8020b4c:	4628      	mov	r0, r5
 8020b4e:	9600      	str	r6, [sp, #0]
 8020b50:	f8ad 701a 	strh.w	r7, [sp, #26]
 8020b54:	f7ff fd5c 	bl	8020610 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020b58:	88e2      	ldrh	r2, [r4, #6]
 8020b5a:	8863      	ldrh	r3, [r4, #2]
 8020b5c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020b60:	4413      	add	r3, r2
 8020b62:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8020b66:	440a      	add	r2, r1
 8020b68:	b29b      	uxth	r3, r3
 8020b6a:	b292      	uxth	r2, r2
 8020b6c:	b218      	sxth	r0, r3
 8020b6e:	b211      	sxth	r1, r2
 8020b70:	4288      	cmp	r0, r1
 8020b72:	f77f aec8 	ble.w	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020b76:	f9b4 7000 	ldrsh.w	r7, [r4]
 8020b7a:	1a9b      	subs	r3, r3, r2
 8020b7c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020b80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020b84:	464b      	mov	r3, r9
 8020b86:	f8ad 7018 	strh.w	r7, [sp, #24]
 8020b8a:	f8ad 101a 	strh.w	r1, [sp, #26]
 8020b8e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8020b92:	9600      	str	r6, [sp, #0]
 8020b94:	e77a      	b.n	8020a8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8020b96:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8020b9a:	2800      	cmp	r0, #0
 8020b9c:	f43f aeb3 	beq.w	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020ba0:	6803      	ldr	r3, [r0, #0]
 8020ba2:	9600      	str	r6, [sp, #0]
 8020ba4:	68de      	ldr	r6, [r3, #12]
 8020ba6:	4623      	mov	r3, r4
 8020ba8:	aa02      	add	r2, sp, #8
 8020baa:	4629      	mov	r1, r5
 8020bac:	47b0      	blx	r6
 8020bae:	e6aa      	b.n	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020bb0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8020bb4:	2800      	cmp	r0, #0
 8020bb6:	f43f aea6 	beq.w	8020906 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8020bba:	6803      	ldr	r3, [r0, #0]
 8020bbc:	9600      	str	r6, [sp, #0]
 8020bbe:	689e      	ldr	r6, [r3, #8]
 8020bc0:	e7f1      	b.n	8020ba6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8020bc2:	bf00      	nop
 8020bc4:	24006600 	.word	0x24006600

08020bc8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8020bc8:	b180      	cbz	r0, 8020bec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8020bca:	2903      	cmp	r1, #3
 8020bcc:	d81c      	bhi.n	8020c08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020bce:	e8df f001 	tbb	[pc, r1]
 8020bd2:	1d02      	.short	0x1d02
 8020bd4:	1f08      	.short	0x1f08
 8020bd6:	4b10      	ldr	r3, [pc, #64]	@ (8020c18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020bd8:	8818      	ldrh	r0, [r3, #0]
 8020bda:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020bde:	4240      	negs	r0, r0
 8020be0:	4770      	bx	lr
 8020be2:	4b0d      	ldr	r3, [pc, #52]	@ (8020c18 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020be4:	8818      	ldrh	r0, [r3, #0]
 8020be6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020bea:	4770      	bx	lr
 8020bec:	2903      	cmp	r1, #3
 8020bee:	d80b      	bhi.n	8020c08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020bf0:	a301      	add	r3, pc, #4	@ (adr r3, 8020bf8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8020bf2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020bf6:	bf00      	nop
 8020bf8:	08020c0d 	.word	0x08020c0d
 8020bfc:	08020be3 	.word	0x08020be3
 8020c00:	08020c11 	.word	0x08020c11
 8020c04:	08020bd7 	.word	0x08020bd7
 8020c08:	2000      	movs	r0, #0
 8020c0a:	4770      	bx	lr
 8020c0c:	2001      	movs	r0, #1
 8020c0e:	4770      	bx	lr
 8020c10:	f04f 30ff 	mov.w	r0, #4294967295
 8020c14:	4770      	bx	lr
 8020c16:	bf00      	nop
 8020c18:	240065fa 	.word	0x240065fa

08020c1c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8020c1c:	b180      	cbz	r0, 8020c40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8020c1e:	2903      	cmp	r1, #3
 8020c20:	d81c      	bhi.n	8020c5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8020c22:	e8df f001 	tbb	[pc, r1]
 8020c26:	021d      	.short	0x021d
 8020c28:	071f      	.short	0x071f
 8020c2a:	4b10      	ldr	r3, [pc, #64]	@ (8020c6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020c2c:	8818      	ldrh	r0, [r3, #0]
 8020c2e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020c32:	4770      	bx	lr
 8020c34:	4b0d      	ldr	r3, [pc, #52]	@ (8020c6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020c36:	8818      	ldrh	r0, [r3, #0]
 8020c38:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020c3c:	4240      	negs	r0, r0
 8020c3e:	4770      	bx	lr
 8020c40:	2903      	cmp	r1, #3
 8020c42:	d80b      	bhi.n	8020c5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8020c44:	a301      	add	r3, pc, #4	@ (adr r3, 8020c4c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8020c46:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020c4a:	bf00      	nop
 8020c4c:	08020c2b 	.word	0x08020c2b
 8020c50:	08020c65 	.word	0x08020c65
 8020c54:	08020c35 	.word	0x08020c35
 8020c58:	08020c61 	.word	0x08020c61
 8020c5c:	2000      	movs	r0, #0
 8020c5e:	4770      	bx	lr
 8020c60:	2001      	movs	r0, #1
 8020c62:	4770      	bx	lr
 8020c64:	f04f 30ff 	mov.w	r0, #4294967295
 8020c68:	4770      	bx	lr
 8020c6a:	bf00      	nop
 8020c6c:	240065fa 	.word	0x240065fa

08020c70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c74:	b099      	sub	sp, #100	@ 0x64
 8020c76:	910d      	str	r1, [sp, #52]	@ 0x34
 8020c78:	a914      	add	r1, sp, #80	@ 0x50
 8020c7a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8020c7e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8020c82:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8020c86:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8020c88:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 8020c8c:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8020c90:	e881 000c 	stmia.w	r1, {r2, r3}
 8020c94:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8020c98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020c9a:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8020c9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8020ca0:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8020ca4:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8020ca8:	9308      	str	r3, [sp, #32]
 8020caa:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8020cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8020cb0:	7b4b      	ldrb	r3, [r1, #13]
 8020cb2:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8020cb6:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 8020cba:	f891 8006 	ldrb.w	r8, [r1, #6]
 8020cbe:	ea58 0800 	orrs.w	r8, r8, r0
 8020cc2:	f000 81d0 	beq.w	8021066 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8020cc6:	011b      	lsls	r3, r3, #4
 8020cc8:	79c8      	ldrb	r0, [r1, #7]
 8020cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020cce:	4303      	orrs	r3, r0
 8020cd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8020cd2:	f000 81c8 	beq.w	8021066 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8020cd6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020cda:	b29b      	uxth	r3, r3
 8020cdc:	2d00      	cmp	r5, #0
 8020cde:	f000 812d 	beq.w	8020f3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8020ce2:	1aed      	subs	r5, r5, r3
 8020ce4:	b2ad      	uxth	r5, r5
 8020ce6:	0429      	lsls	r1, r5, #16
 8020ce8:	d502      	bpl.n	8020cf0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8020cea:	1b64      	subs	r4, r4, r5
 8020cec:	2500      	movs	r5, #0
 8020cee:	b224      	sxth	r4, r4
 8020cf0:	f9b2 0000 	ldrsh.w	r0, [r2]
 8020cf4:	8891      	ldrh	r1, [r2, #4]
 8020cf6:	4284      	cmp	r4, r0
 8020cf8:	b283      	uxth	r3, r0
 8020cfa:	bfb8      	it	lt
 8020cfc:	18ed      	addlt	r5, r5, r3
 8020cfe:	440b      	add	r3, r1
 8020d00:	b21b      	sxth	r3, r3
 8020d02:	bfb8      	it	lt
 8020d04:	1b2c      	sublt	r4, r5, r4
 8020d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8020d08:	bfb8      	it	lt
 8020d0a:	b2a5      	uxthlt	r5, r4
 8020d0c:	88d3      	ldrh	r3, [r2, #6]
 8020d0e:	bfb8      	it	lt
 8020d10:	4604      	movlt	r4, r0
 8020d12:	8852      	ldrh	r2, [r2, #2]
 8020d14:	a814      	add	r0, sp, #80	@ 0x50
 8020d16:	4621      	mov	r1, r4
 8020d18:	4413      	add	r3, r2
 8020d1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020d1c:	b21b      	sxth	r3, r3
 8020d1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020d20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020d22:	930e      	str	r3, [sp, #56]	@ 0x38
 8020d24:	4bb2      	ldr	r3, [pc, #712]	@ (8020ff0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8020d26:	f893 b000 	ldrb.w	fp, [r3]
 8020d2a:	4653      	mov	r3, sl
 8020d2c:	f7f5 fe97 	bl	8016a5e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020d30:	4621      	mov	r1, r4
 8020d32:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8020d36:	4653      	mov	r3, sl
 8020d38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020d3a:	a814      	add	r0, sp, #80	@ 0x50
 8020d3c:	f7f5 feac 	bl	8016a98 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020d40:	a918      	add	r1, sp, #96	@ 0x60
 8020d42:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020d46:	a817      	add	r0, sp, #92	@ 0x5c
 8020d48:	f7f5 ffd2 	bl	8016cf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020d4c:	f1ba 0f00 	cmp.w	sl, #0
 8020d50:	f040 80f7 	bne.w	8020f42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 8020d54:	f1bb 0f01 	cmp.w	fp, #1
 8020d58:	f040 80fb 	bne.w	8020f52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8020d5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	f040 81a9 	bne.w	80210b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x446>
 8020d64:	fa1f f288 	uxth.w	r2, r8
 8020d68:	b905      	cbnz	r5, 8020d6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8020d6a:	b15e      	cbz	r6, 8020d84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x114>
 8020d6c:	fb06 5302 	mla	r3, r6, r2, r5
 8020d70:	9808      	ldr	r0, [sp, #32]
 8020d72:	4631      	mov	r1, r6
 8020d74:	4343      	muls	r3, r0
 8020d76:	f003 0607 	and.w	r6, r3, #7
 8020d7a:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 8020d7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020d80:	1a5b      	subs	r3, r3, r1
 8020d82:	930e      	str	r3, [sp, #56]	@ 0x38
 8020d84:	f10b 31ff 	add.w	r1, fp, #4294967295
 8020d88:	424b      	negs	r3, r1
 8020d8a:	414b      	adcs	r3, r1
 8020d8c:	4651      	mov	r1, sl
 8020d8e:	4618      	mov	r0, r3
 8020d90:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d92:	f7ff ff19 	bl	8020bc8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8020d96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020d98:	4683      	mov	fp, r0
 8020d9a:	4618      	mov	r0, r3
 8020d9c:	f7ff ff3e 	bl	8020c1c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8020da0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020da2:	4603      	mov	r3, r0
 8020da4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020da6:	eba1 0a00 	sub.w	sl, r1, r0
 8020daa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020dac:	458a      	cmp	sl, r1
 8020dae:	bfa8      	it	ge
 8020db0:	468a      	movge	sl, r1
 8020db2:	f1ba 0f00 	cmp.w	sl, #0
 8020db6:	f340 8156 	ble.w	8021066 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8020dba:	1b64      	subs	r4, r4, r5
 8020dbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020dbe:	1b0c      	subs	r4, r1, r4
 8020dc0:	4544      	cmp	r4, r8
 8020dc2:	bfd4      	ite	le
 8020dc4:	ebc5 0504 	rsble	r5, r5, r4
 8020dc8:	ebc5 0508 	rsbgt	r5, r5, r8
 8020dcc:	2d00      	cmp	r5, #0
 8020dce:	f340 814a 	ble.w	8021066 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8020dd2:	1b52      	subs	r2, r2, r5
 8020dd4:	9908      	ldr	r1, [sp, #32]
 8020dd6:	434a      	muls	r2, r1
 8020dd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8020dda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020ddc:	2a00      	cmp	r2, #0
 8020dde:	f040 8176 	bne.w	80210ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 8020de2:	4a84      	ldr	r2, [pc, #528]	@ (8020ff4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8020de4:	930a      	str	r3, [sp, #40]	@ 0x28
 8020de6:	6810      	ldr	r0, [r2, #0]
 8020de8:	6802      	ldr	r2, [r0, #0]
 8020dea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8020dec:	4790      	blx	r2
 8020dee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020df0:	9908      	ldr	r1, [sp, #32]
 8020df2:	2201      	movs	r2, #1
 8020df4:	408a      	lsls	r2, r1
 8020df6:	4980      	ldr	r1, [pc, #512]	@ (8020ff8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8020df8:	3a01      	subs	r2, #1
 8020dfa:	880c      	ldrh	r4, [r1, #0]
 8020dfc:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 8020e00:	b2d2      	uxtb	r2, r2
 8020e02:	920c      	str	r2, [sp, #48]	@ 0x30
 8020e04:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 8020e08:	fb04 1202 	mla	r2, r4, r2, r1
 8020e0c:	ea4f 2419 	mov.w	r4, r9, lsr #8
 8020e10:	ea4f 1159 	mov.w	r1, r9, lsr #5
 8020e14:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020e18:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020e1c:	920a      	str	r2, [sp, #40]	@ 0x28
 8020e1e:	f3c9 4207 	ubfx	r2, r9, #16, #8
 8020e22:	9212      	str	r2, [sp, #72]	@ 0x48
 8020e24:	b2e2      	uxtb	r2, r4
 8020e26:	9211      	str	r2, [sp, #68]	@ 0x44
 8020e28:	fa5f f289 	uxtb.w	r2, r9
 8020e2c:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 8020e30:	9210      	str	r2, [sp, #64]	@ 0x40
 8020e32:	4a72      	ldr	r2, [pc, #456]	@ (8020ffc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8020e34:	4022      	ands	r2, r4
 8020e36:	430a      	orrs	r2, r1
 8020e38:	ea4f 014b 	mov.w	r1, fp, lsl #1
 8020e3c:	fb05 3b1b 	mls	fp, r5, fp, r3
 8020e40:	ea42 0209 	orr.w	r2, r2, r9
 8020e44:	460b      	mov	r3, r1
 8020e46:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020e48:	b292      	uxth	r2, r2
 8020e4a:	436b      	muls	r3, r5
 8020e4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8020e4e:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 8020e52:	783a      	ldrb	r2, [r7, #0]
 8020e54:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020e56:	4132      	asrs	r2, r6
 8020e58:	b2d2      	uxtb	r2, r2
 8020e5a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020e5e:	f0c0 814a 	bcc.w	80210f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x486>
 8020e62:	46a9      	mov	r9, r5
 8020e64:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8020e68:	f119 39ff 	adds.w	r9, r9, #4294967295
 8020e6c:	f0c0 8133 	bcc.w	80210d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x466>
 8020e70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020e72:	4013      	ands	r3, r2
 8020e74:	d054      	beq.n	8020f20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b0>
 8020e76:	20ff      	movs	r0, #255	@ 0xff
 8020e78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020e7a:	fb90 f1f1 	sdiv	r1, r0, r1
 8020e7e:	434b      	muls	r3, r1
 8020e80:	2bfe      	cmp	r3, #254	@ 0xfe
 8020e82:	dd03      	ble.n	8020e8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21c>
 8020e84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020e86:	4281      	cmp	r1, r0
 8020e88:	f000 8123 	beq.w	80210d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x462>
 8020e8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020e8e:	f8b8 4000 	ldrh.w	r4, [r8]
 8020e92:	fb11 f303 	smulbb	r3, r1, r3
 8020e96:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020e98:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 8020e9c:	b29b      	uxth	r3, r3
 8020e9e:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8020ea2:	1c59      	adds	r1, r3, #1
 8020ea4:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 8020ea8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020eac:	1221      	asrs	r1, r4, #8
 8020eae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020eb2:	00e4      	lsls	r4, r4, #3
 8020eb4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8020eb8:	fa1f fe83 	uxth.w	lr, r3
 8020ebc:	43db      	mvns	r3, r3
 8020ebe:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020ec2:	fb10 fb0e 	smulbb	fp, r0, lr
 8020ec6:	b2db      	uxtb	r3, r3
 8020ec8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020eca:	b2e4      	uxtb	r4, r4
 8020ecc:	fb01 b103 	mla	r1, r1, r3, fp
 8020ed0:	fb10 fb0e 	smulbb	fp, r0, lr
 8020ed4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8020ed6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020eda:	fb10 fe0e 	smulbb	lr, r0, lr
 8020ede:	b289      	uxth	r1, r1
 8020ee0:	fb0c bc03 	mla	ip, ip, r3, fp
 8020ee4:	fb04 e403 	mla	r4, r4, r3, lr
 8020ee8:	1c4b      	adds	r3, r1, #1
 8020eea:	fa1f fc8c 	uxth.w	ip, ip
 8020eee:	b2a4      	uxth	r4, r4
 8020ef0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020ef4:	f104 0b01 	add.w	fp, r4, #1
 8020ef8:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8020efc:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 8020f00:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8020f04:	ea4b 0101 	orr.w	r1, fp, r1
 8020f08:	f10c 0b01 	add.w	fp, ip, #1
 8020f0c:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8020f10:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8020f14:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8020f18:	ea41 010b 	orr.w	r1, r1, fp
 8020f1c:	f8a8 1000 	strh.w	r1, [r8]
 8020f20:	9b08      	ldr	r3, [sp, #32]
 8020f22:	441e      	add	r6, r3
 8020f24:	b2b6      	uxth	r6, r6
 8020f26:	2e07      	cmp	r6, #7
 8020f28:	bf98      	it	ls
 8020f2a:	411a      	asrls	r2, r3
 8020f2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020f2e:	bf85      	ittet	hi
 8020f30:	787a      	ldrbhi	r2, [r7, #1]
 8020f32:	2600      	movhi	r6, #0
 8020f34:	b2d2      	uxtbls	r2, r2
 8020f36:	3701      	addhi	r7, #1
 8020f38:	4498      	add	r8, r3
 8020f3a:	e795      	b.n	8020e68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 8020f3c:	441c      	add	r4, r3
 8020f3e:	b224      	sxth	r4, r4
 8020f40:	e6d6      	b.n	8020cf0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8020f42:	f1ba 0f01 	cmp.w	sl, #1
 8020f46:	f47f af09 	bne.w	8020d5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8020f4a:	f1bb 0f01 	cmp.w	fp, #1
 8020f4e:	f47f af05 	bne.w	8020d5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8020f52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020f56:	1a99      	subs	r1, r3, r2
 8020f58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020f5a:	1b9b      	subs	r3, r3, r6
 8020f5c:	4299      	cmp	r1, r3
 8020f5e:	bfa8      	it	ge
 8020f60:	4619      	movge	r1, r3
 8020f62:	2900      	cmp	r1, #0
 8020f64:	9112      	str	r1, [sp, #72]	@ 0x48
 8020f66:	dd7e      	ble.n	8021066 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8020f68:	4a22      	ldr	r2, [pc, #136]	@ (8020ff4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8020f6a:	6810      	ldr	r0, [r2, #0]
 8020f6c:	9211      	str	r2, [sp, #68]	@ 0x44
 8020f6e:	6803      	ldr	r3, [r0, #0]
 8020f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020f72:	4798      	blx	r3
 8020f74:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8020f78:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020f7a:	d006      	beq.n	8020f8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 8020f7c:	9b08      	ldr	r3, [sp, #32]
 8020f7e:	2b04      	cmp	r3, #4
 8020f80:	d133      	bne.n	8020fea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8020f82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f84:	3300      	adds	r3, #0
 8020f86:	bf18      	it	ne
 8020f88:	2301      	movne	r3, #1
 8020f8a:	0582      	lsls	r2, r0, #22
 8020f8c:	fa1f fc88 	uxth.w	ip, r8
 8020f90:	f140 80ba 	bpl.w	8021108 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>
 8020f94:	9808      	ldr	r0, [sp, #32]
 8020f96:	2808      	cmp	r0, #8
 8020f98:	f040 80b6 	bne.w	8021108 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x498>
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	d065      	beq.n	802106c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3fc>
 8020fa0:	f10c 0c01 	add.w	ip, ip, #1
 8020fa4:	f02c 0301 	bic.w	r3, ip, #1
 8020fa8:	b29b      	uxth	r3, r3
 8020faa:	bb4d      	cbnz	r5, 8021000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8020fac:	eb08 0004 	add.w	r0, r8, r4
 8020fb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020fb2:	4290      	cmp	r0, r2
 8020fb4:	dc24      	bgt.n	8021000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8020fb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020fb8:	b289      	uxth	r1, r1
 8020fba:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 8020fbe:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8020fc2:	6810      	ldr	r0, [r2, #0]
 8020fc4:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8020fc8:	6804      	ldr	r4, [r0, #0]
 8020fca:	9506      	str	r5, [sp, #24]
 8020fcc:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8020fd0:	9302      	str	r3, [sp, #8]
 8020fd2:	9505      	str	r5, [sp, #20]
 8020fd4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8020fd6:	e9cd 3100 	strd	r3, r1, [sp]
 8020fda:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8020fde:	4673      	mov	r3, lr
 8020fe0:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 8020fe2:	fb06 710c 	mla	r1, r6, ip, r7
 8020fe6:	47a0      	blx	r4
 8020fe8:	e03d      	b.n	8021066 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8020fea:	2300      	movs	r3, #0
 8020fec:	e7cd      	b.n	8020f8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 8020fee:	bf00      	nop
 8020ff0:	240065f8 	.word	0x240065f8
 8020ff4:	24006600 	.word	0x24006600
 8020ff8:	240065fa 	.word	0x240065fa
 8020ffc:	00fff800 	.word	0x00fff800
 8021000:	eba4 0e05 	sub.w	lr, r4, r5
 8021004:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021006:	eba2 0e0e 	sub.w	lr, r2, lr
 802100a:	45c6      	cmp	lr, r8
 802100c:	bfd4      	ite	le
 802100e:	ebc5 0e0e 	rsble	lr, r5, lr
 8021012:	ebc5 0e08 	rsbgt	lr, r5, r8
 8021016:	f1be 0f00 	cmp.w	lr, #0
 802101a:	d024      	beq.n	8021066 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 802101c:	07e8      	lsls	r0, r5, #31
 802101e:	f53f ae9d 	bmi.w	8020d5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021022:	f01e 0001 	ands.w	r0, lr, #1
 8021026:	f47f ae99 	bne.w	8020d5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 802102a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802102c:	086d      	lsrs	r5, r5, #1
 802102e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8021032:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 8021036:	6814      	ldr	r4, [r2, #0]
 8021038:	b289      	uxth	r1, r1
 802103a:	fb06 560c 	mla	r6, r6, ip, r5
 802103e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8021042:	6825      	ldr	r5, [r4, #0]
 8021044:	9006      	str	r0, [sp, #24]
 8021046:	f44f 7080 	mov.w	r0, #256	@ 0x100
 802104a:	9302      	str	r3, [sp, #8]
 802104c:	fa1f f38e 	uxth.w	r3, lr
 8021050:	9005      	str	r0, [sp, #20]
 8021052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021054:	9101      	str	r1, [sp, #4]
 8021056:	19b9      	adds	r1, r7, r6
 8021058:	9300      	str	r3, [sp, #0]
 802105a:	4643      	mov	r3, r8
 802105c:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8021060:	4620      	mov	r0, r4
 8021062:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 8021064:	47a8      	blx	r5
 8021066:	b019      	add	sp, #100	@ 0x64
 8021068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802106c:	4a28      	ldr	r2, [pc, #160]	@ (8021110 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4a0>)
 802106e:	1b64      	subs	r4, r4, r5
 8021070:	fb06 5608 	mla	r6, r6, r8, r5
 8021074:	b289      	uxth	r1, r1
 8021076:	6810      	ldr	r0, [r2, #0]
 8021078:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 802107c:	f8d0 a000 	ldr.w	sl, [r0]
 8021080:	9306      	str	r3, [sp, #24]
 8021082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8021086:	9101      	str	r1, [sp, #4]
 8021088:	19b9      	adds	r1, r7, r6
 802108a:	9305      	str	r3, [sp, #20]
 802108c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802108e:	f8cd c008 	str.w	ip, [sp, #8]
 8021092:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8021096:	e9cd 9303 	strd	r9, r3, [sp, #12]
 802109a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802109c:	1b1c      	subs	r4, r3, r4
 802109e:	4673      	mov	r3, lr
 80210a0:	4544      	cmp	r4, r8
 80210a2:	bfd4      	ite	le
 80210a4:	ebc5 0504 	rsble	r5, r5, r4
 80210a8:	ebc5 0508 	rsbgt	r5, r5, r8
 80210ac:	b2ad      	uxth	r5, r5
 80210ae:	9500      	str	r5, [sp, #0]
 80210b0:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 80210b4:	e797      	b.n	8020fe6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80210b6:	2208      	movs	r2, #8
 80210b8:	9b08      	ldr	r3, [sp, #32]
 80210ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80210be:	1e5a      	subs	r2, r3, #1
 80210c0:	4442      	add	r2, r8
 80210c2:	fb92 f2f3 	sdiv	r2, r2, r3
 80210c6:	fb12 f203 	smulbb	r2, r2, r3
 80210ca:	b292      	uxth	r2, r2
 80210cc:	e64c      	b.n	8020d68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 80210ce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80210d0:	e68e      	b.n	8020df0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x180>
 80210d2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80210d4:	e722      	b.n	8020f1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ac>
 80210d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210d8:	b143      	cbz	r3, 80210ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x47c>
 80210da:	441e      	add	r6, r3
 80210dc:	b2b6      	uxth	r6, r6
 80210de:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 80210e2:	f006 0607 	and.w	r6, r6, #7
 80210e6:	783a      	ldrb	r2, [r7, #0]
 80210e8:	4132      	asrs	r2, r6
 80210ea:	b2d2      	uxtb	r2, r2
 80210ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80210ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80210f0:	4419      	add	r1, r3
 80210f2:	910a      	str	r1, [sp, #40]	@ 0x28
 80210f4:	e6b1      	b.n	8020e5a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 80210f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d1b4      	bne.n	8021066 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 80210fc:	4b04      	ldr	r3, [pc, #16]	@ (8021110 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4a0>)
 80210fe:	6818      	ldr	r0, [r3, #0]
 8021100:	6803      	ldr	r3, [r0, #0]
 8021102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021104:	4798      	blx	r3
 8021106:	e7ae      	b.n	8021066 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f6>
 8021108:	2b00      	cmp	r3, #0
 802110a:	f47f af49 	bne.w	8020fa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x330>
 802110e:	e625      	b.n	8020d5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021110:	24006600 	.word	0x24006600

08021114 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8021114:	b538      	push	{r3, r4, r5, lr}
 8021116:	4c15      	ldr	r4, [pc, #84]	@ (802116c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8021118:	4605      	mov	r5, r0
 802111a:	7823      	ldrb	r3, [r4, #0]
 802111c:	f3bf 8f5b 	dmb	ish
 8021120:	07da      	lsls	r2, r3, #31
 8021122:	d40b      	bmi.n	802113c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021124:	4620      	mov	r0, r4
 8021126:	f7e1 fcad 	bl	8002a84 <__cxa_guard_acquire>
 802112a:	b138      	cbz	r0, 802113c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802112c:	4620      	mov	r0, r4
 802112e:	f7e1 fd11 	bl	8002b54 <__cxa_guard_release>
 8021132:	4a0f      	ldr	r2, [pc, #60]	@ (8021170 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021134:	490f      	ldr	r1, [pc, #60]	@ (8021174 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8021136:	4810      	ldr	r0, [pc, #64]	@ (8021178 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021138:	f007 fef4 	bl	8028f24 <__aeabi_atexit>
 802113c:	4c0f      	ldr	r4, [pc, #60]	@ (802117c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802113e:	7823      	ldrb	r3, [r4, #0]
 8021140:	f3bf 8f5b 	dmb	ish
 8021144:	07db      	lsls	r3, r3, #31
 8021146:	d40b      	bmi.n	8021160 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021148:	4620      	mov	r0, r4
 802114a:	f7e1 fc9b 	bl	8002a84 <__cxa_guard_acquire>
 802114e:	b138      	cbz	r0, 8021160 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021150:	4620      	mov	r0, r4
 8021152:	f7e1 fcff 	bl	8002b54 <__cxa_guard_release>
 8021156:	4a06      	ldr	r2, [pc, #24]	@ (8021170 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021158:	4909      	ldr	r1, [pc, #36]	@ (8021180 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802115a:	480a      	ldr	r0, [pc, #40]	@ (8021184 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802115c:	f007 fee2 	bl	8028f24 <__aeabi_atexit>
 8021160:	4b05      	ldr	r3, [pc, #20]	@ (8021178 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021162:	616b      	str	r3, [r5, #20]
 8021164:	4b07      	ldr	r3, [pc, #28]	@ (8021184 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021166:	61ab      	str	r3, [r5, #24]
 8021168:	bd38      	pop	{r3, r4, r5, pc}
 802116a:	bf00      	nop
 802116c:	240066dc 	.word	0x240066dc
 8021170:	24000000 	.word	0x24000000
 8021174:	0801d213 	.word	0x0801d213
 8021178:	2400006c 	.word	0x2400006c
 802117c:	240066e0 	.word	0x240066e0
 8021180:	0801d211 	.word	0x0801d211
 8021184:	24000070 	.word	0x24000070

08021188 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8021188:	b538      	push	{r3, r4, r5, lr}
 802118a:	4c15      	ldr	r4, [pc, #84]	@ (80211e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802118c:	4605      	mov	r5, r0
 802118e:	7823      	ldrb	r3, [r4, #0]
 8021190:	f3bf 8f5b 	dmb	ish
 8021194:	07da      	lsls	r2, r3, #31
 8021196:	d40b      	bmi.n	80211b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021198:	4620      	mov	r0, r4
 802119a:	f7e1 fc73 	bl	8002a84 <__cxa_guard_acquire>
 802119e:	b138      	cbz	r0, 80211b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80211a0:	4620      	mov	r0, r4
 80211a2:	f7e1 fcd7 	bl	8002b54 <__cxa_guard_release>
 80211a6:	4a0f      	ldr	r2, [pc, #60]	@ (80211e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80211a8:	490f      	ldr	r1, [pc, #60]	@ (80211e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80211aa:	4810      	ldr	r0, [pc, #64]	@ (80211ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80211ac:	f007 feba 	bl	8028f24 <__aeabi_atexit>
 80211b0:	4c0f      	ldr	r4, [pc, #60]	@ (80211f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80211b2:	7823      	ldrb	r3, [r4, #0]
 80211b4:	f3bf 8f5b 	dmb	ish
 80211b8:	07db      	lsls	r3, r3, #31
 80211ba:	d40b      	bmi.n	80211d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80211bc:	4620      	mov	r0, r4
 80211be:	f7e1 fc61 	bl	8002a84 <__cxa_guard_acquire>
 80211c2:	b138      	cbz	r0, 80211d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80211c4:	4620      	mov	r0, r4
 80211c6:	f7e1 fcc5 	bl	8002b54 <__cxa_guard_release>
 80211ca:	4a06      	ldr	r2, [pc, #24]	@ (80211e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80211cc:	4909      	ldr	r1, [pc, #36]	@ (80211f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80211ce:	480a      	ldr	r0, [pc, #40]	@ (80211f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80211d0:	f007 fea8 	bl	8028f24 <__aeabi_atexit>
 80211d4:	4b05      	ldr	r3, [pc, #20]	@ (80211ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80211d6:	60eb      	str	r3, [r5, #12]
 80211d8:	4b07      	ldr	r3, [pc, #28]	@ (80211f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80211da:	612b      	str	r3, [r5, #16]
 80211dc:	bd38      	pop	{r3, r4, r5, pc}
 80211de:	bf00      	nop
 80211e0:	240066b4 	.word	0x240066b4
 80211e4:	24000000 	.word	0x24000000
 80211e8:	0801d217 	.word	0x0801d217
 80211ec:	24000044 	.word	0x24000044
 80211f0:	240066b8 	.word	0x240066b8
 80211f4:	0801d215 	.word	0x0801d215
 80211f8:	24000048 	.word	0x24000048

080211fc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80211fc:	b510      	push	{r4, lr}
 80211fe:	4604      	mov	r4, r0
 8021200:	f7ff ff88 	bl	8021114 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8021204:	4620      	mov	r0, r4
 8021206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802120a:	f7ff bfbd 	b.w	8021188 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08021210 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021210:	b538      	push	{r3, r4, r5, lr}
 8021212:	4c15      	ldr	r4, [pc, #84]	@ (8021268 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021214:	4605      	mov	r5, r0
 8021216:	7823      	ldrb	r3, [r4, #0]
 8021218:	f3bf 8f5b 	dmb	ish
 802121c:	07da      	lsls	r2, r3, #31
 802121e:	d40b      	bmi.n	8021238 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021220:	4620      	mov	r0, r4
 8021222:	f7e1 fc2f 	bl	8002a84 <__cxa_guard_acquire>
 8021226:	b138      	cbz	r0, 8021238 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021228:	4620      	mov	r0, r4
 802122a:	f7e1 fc93 	bl	8002b54 <__cxa_guard_release>
 802122e:	4a0f      	ldr	r2, [pc, #60]	@ (802126c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021230:	490f      	ldr	r1, [pc, #60]	@ (8021270 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021232:	4810      	ldr	r0, [pc, #64]	@ (8021274 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021234:	f007 fe76 	bl	8028f24 <__aeabi_atexit>
 8021238:	4c0f      	ldr	r4, [pc, #60]	@ (8021278 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802123a:	7823      	ldrb	r3, [r4, #0]
 802123c:	f3bf 8f5b 	dmb	ish
 8021240:	07db      	lsls	r3, r3, #31
 8021242:	d40b      	bmi.n	802125c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021244:	4620      	mov	r0, r4
 8021246:	f7e1 fc1d 	bl	8002a84 <__cxa_guard_acquire>
 802124a:	b138      	cbz	r0, 802125c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802124c:	4620      	mov	r0, r4
 802124e:	f7e1 fc81 	bl	8002b54 <__cxa_guard_release>
 8021252:	4a06      	ldr	r2, [pc, #24]	@ (802126c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021254:	4909      	ldr	r1, [pc, #36]	@ (802127c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021256:	480a      	ldr	r0, [pc, #40]	@ (8021280 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021258:	f007 fe64 	bl	8028f24 <__aeabi_atexit>
 802125c:	4b05      	ldr	r3, [pc, #20]	@ (8021274 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802125e:	626b      	str	r3, [r5, #36]	@ 0x24
 8021260:	4b07      	ldr	r3, [pc, #28]	@ (8021280 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021262:	62ab      	str	r3, [r5, #40]	@ 0x28
 8021264:	bd38      	pop	{r3, r4, r5, pc}
 8021266:	bf00      	nop
 8021268:	240066e4 	.word	0x240066e4
 802126c:	24000000 	.word	0x24000000
 8021270:	0801d20b 	.word	0x0801d20b
 8021274:	24000074 	.word	0x24000074
 8021278:	240066e8 	.word	0x240066e8
 802127c:	0801d209 	.word	0x0801d209
 8021280:	24000078 	.word	0x24000078

08021284 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021284:	b538      	push	{r3, r4, r5, lr}
 8021286:	4c15      	ldr	r4, [pc, #84]	@ (80212dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021288:	4605      	mov	r5, r0
 802128a:	7823      	ldrb	r3, [r4, #0]
 802128c:	f3bf 8f5b 	dmb	ish
 8021290:	07da      	lsls	r2, r3, #31
 8021292:	d40b      	bmi.n	80212ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021294:	4620      	mov	r0, r4
 8021296:	f7e1 fbf5 	bl	8002a84 <__cxa_guard_acquire>
 802129a:	b138      	cbz	r0, 80212ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802129c:	4620      	mov	r0, r4
 802129e:	f7e1 fc59 	bl	8002b54 <__cxa_guard_release>
 80212a2:	4a0f      	ldr	r2, [pc, #60]	@ (80212e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80212a4:	490f      	ldr	r1, [pc, #60]	@ (80212e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80212a6:	4810      	ldr	r0, [pc, #64]	@ (80212e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80212a8:	f007 fe3c 	bl	8028f24 <__aeabi_atexit>
 80212ac:	4c0f      	ldr	r4, [pc, #60]	@ (80212ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80212ae:	7823      	ldrb	r3, [r4, #0]
 80212b0:	f3bf 8f5b 	dmb	ish
 80212b4:	07db      	lsls	r3, r3, #31
 80212b6:	d40b      	bmi.n	80212d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80212b8:	4620      	mov	r0, r4
 80212ba:	f7e1 fbe3 	bl	8002a84 <__cxa_guard_acquire>
 80212be:	b138      	cbz	r0, 80212d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80212c0:	4620      	mov	r0, r4
 80212c2:	f7e1 fc47 	bl	8002b54 <__cxa_guard_release>
 80212c6:	4a06      	ldr	r2, [pc, #24]	@ (80212e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80212c8:	4909      	ldr	r1, [pc, #36]	@ (80212f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80212ca:	480a      	ldr	r0, [pc, #40]	@ (80212f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80212cc:	f007 fe2a 	bl	8028f24 <__aeabi_atexit>
 80212d0:	4b05      	ldr	r3, [pc, #20]	@ (80212e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80212d2:	61eb      	str	r3, [r5, #28]
 80212d4:	4b07      	ldr	r3, [pc, #28]	@ (80212f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80212d6:	622b      	str	r3, [r5, #32]
 80212d8:	bd38      	pop	{r3, r4, r5, pc}
 80212da:	bf00      	nop
 80212dc:	240066bc 	.word	0x240066bc
 80212e0:	24000000 	.word	0x24000000
 80212e4:	0801d20f 	.word	0x0801d20f
 80212e8:	2400004c 	.word	0x2400004c
 80212ec:	240066c0 	.word	0x240066c0
 80212f0:	0801d20d 	.word	0x0801d20d
 80212f4:	24000050 	.word	0x24000050

080212f8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80212f8:	b510      	push	{r4, lr}
 80212fa:	4604      	mov	r4, r0
 80212fc:	f7ff ff88 	bl	8021210 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021300:	4620      	mov	r0, r4
 8021302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021306:	f7ff bfbd 	b.w	8021284 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802130c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802130c:	b538      	push	{r3, r4, r5, lr}
 802130e:	4c15      	ldr	r4, [pc, #84]	@ (8021364 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021310:	4605      	mov	r5, r0
 8021312:	7823      	ldrb	r3, [r4, #0]
 8021314:	f3bf 8f5b 	dmb	ish
 8021318:	07da      	lsls	r2, r3, #31
 802131a:	d40b      	bmi.n	8021334 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802131c:	4620      	mov	r0, r4
 802131e:	f7e1 fbb1 	bl	8002a84 <__cxa_guard_acquire>
 8021322:	b138      	cbz	r0, 8021334 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021324:	4620      	mov	r0, r4
 8021326:	f7e1 fc15 	bl	8002b54 <__cxa_guard_release>
 802132a:	4a0f      	ldr	r2, [pc, #60]	@ (8021368 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802132c:	490f      	ldr	r1, [pc, #60]	@ (802136c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802132e:	4810      	ldr	r0, [pc, #64]	@ (8021370 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021330:	f007 fdf8 	bl	8028f24 <__aeabi_atexit>
 8021334:	4c0f      	ldr	r4, [pc, #60]	@ (8021374 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021336:	7823      	ldrb	r3, [r4, #0]
 8021338:	f3bf 8f5b 	dmb	ish
 802133c:	07db      	lsls	r3, r3, #31
 802133e:	d40b      	bmi.n	8021358 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021340:	4620      	mov	r0, r4
 8021342:	f7e1 fb9f 	bl	8002a84 <__cxa_guard_acquire>
 8021346:	b138      	cbz	r0, 8021358 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021348:	4620      	mov	r0, r4
 802134a:	f7e1 fc03 	bl	8002b54 <__cxa_guard_release>
 802134e:	4a06      	ldr	r2, [pc, #24]	@ (8021368 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021350:	4909      	ldr	r1, [pc, #36]	@ (8021378 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021352:	480a      	ldr	r0, [pc, #40]	@ (802137c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021354:	f007 fde6 	bl	8028f24 <__aeabi_atexit>
 8021358:	4b05      	ldr	r3, [pc, #20]	@ (8021370 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802135a:	636b      	str	r3, [r5, #52]	@ 0x34
 802135c:	4b07      	ldr	r3, [pc, #28]	@ (802137c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802135e:	63ab      	str	r3, [r5, #56]	@ 0x38
 8021360:	bd38      	pop	{r3, r4, r5, pc}
 8021362:	bf00      	nop
 8021364:	240066f4 	.word	0x240066f4
 8021368:	24000000 	.word	0x24000000
 802136c:	0801d203 	.word	0x0801d203
 8021370:	24000084 	.word	0x24000084
 8021374:	240066f8 	.word	0x240066f8
 8021378:	0801d201 	.word	0x0801d201
 802137c:	24000088 	.word	0x24000088

08021380 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021380:	b538      	push	{r3, r4, r5, lr}
 8021382:	4c15      	ldr	r4, [pc, #84]	@ (80213d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021384:	4605      	mov	r5, r0
 8021386:	7823      	ldrb	r3, [r4, #0]
 8021388:	f3bf 8f5b 	dmb	ish
 802138c:	07da      	lsls	r2, r3, #31
 802138e:	d40b      	bmi.n	80213a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021390:	4620      	mov	r0, r4
 8021392:	f7e1 fb77 	bl	8002a84 <__cxa_guard_acquire>
 8021396:	b138      	cbz	r0, 80213a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021398:	4620      	mov	r0, r4
 802139a:	f7e1 fbdb 	bl	8002b54 <__cxa_guard_release>
 802139e:	4a0f      	ldr	r2, [pc, #60]	@ (80213dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80213a0:	490f      	ldr	r1, [pc, #60]	@ (80213e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80213a2:	4810      	ldr	r0, [pc, #64]	@ (80213e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80213a4:	f007 fdbe 	bl	8028f24 <__aeabi_atexit>
 80213a8:	4c0f      	ldr	r4, [pc, #60]	@ (80213e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80213aa:	7823      	ldrb	r3, [r4, #0]
 80213ac:	f3bf 8f5b 	dmb	ish
 80213b0:	07db      	lsls	r3, r3, #31
 80213b2:	d40b      	bmi.n	80213cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80213b4:	4620      	mov	r0, r4
 80213b6:	f7e1 fb65 	bl	8002a84 <__cxa_guard_acquire>
 80213ba:	b138      	cbz	r0, 80213cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80213bc:	4620      	mov	r0, r4
 80213be:	f7e1 fbc9 	bl	8002b54 <__cxa_guard_release>
 80213c2:	4a06      	ldr	r2, [pc, #24]	@ (80213dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80213c4:	4909      	ldr	r1, [pc, #36]	@ (80213ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80213c6:	480a      	ldr	r0, [pc, #40]	@ (80213f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80213c8:	f007 fdac 	bl	8028f24 <__aeabi_atexit>
 80213cc:	4b05      	ldr	r3, [pc, #20]	@ (80213e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80213ce:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80213d0:	4b07      	ldr	r3, [pc, #28]	@ (80213f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80213d2:	632b      	str	r3, [r5, #48]	@ 0x30
 80213d4:	bd38      	pop	{r3, r4, r5, pc}
 80213d6:	bf00      	nop
 80213d8:	240066c4 	.word	0x240066c4
 80213dc:	24000000 	.word	0x24000000
 80213e0:	0801d207 	.word	0x0801d207
 80213e4:	24000054 	.word	0x24000054
 80213e8:	240066c8 	.word	0x240066c8
 80213ec:	0801d205 	.word	0x0801d205
 80213f0:	24000058 	.word	0x24000058

080213f4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80213f4:	b510      	push	{r4, lr}
 80213f6:	4604      	mov	r4, r0
 80213f8:	f7ff ff88 	bl	802130c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80213fc:	4620      	mov	r0, r4
 80213fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021402:	f7ff bfbd 	b.w	8021380 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021408 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021408:	b538      	push	{r3, r4, r5, lr}
 802140a:	4c15      	ldr	r4, [pc, #84]	@ (8021460 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802140c:	4605      	mov	r5, r0
 802140e:	7823      	ldrb	r3, [r4, #0]
 8021410:	f3bf 8f5b 	dmb	ish
 8021414:	07da      	lsls	r2, r3, #31
 8021416:	d40b      	bmi.n	8021430 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021418:	4620      	mov	r0, r4
 802141a:	f7e1 fb33 	bl	8002a84 <__cxa_guard_acquire>
 802141e:	b138      	cbz	r0, 8021430 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021420:	4620      	mov	r0, r4
 8021422:	f7e1 fb97 	bl	8002b54 <__cxa_guard_release>
 8021426:	4a0f      	ldr	r2, [pc, #60]	@ (8021464 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021428:	490f      	ldr	r1, [pc, #60]	@ (8021468 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802142a:	4810      	ldr	r0, [pc, #64]	@ (802146c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802142c:	f007 fd7a 	bl	8028f24 <__aeabi_atexit>
 8021430:	4c0f      	ldr	r4, [pc, #60]	@ (8021470 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8021432:	7823      	ldrb	r3, [r4, #0]
 8021434:	f3bf 8f5b 	dmb	ish
 8021438:	07db      	lsls	r3, r3, #31
 802143a:	d40b      	bmi.n	8021454 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802143c:	4620      	mov	r0, r4
 802143e:	f7e1 fb21 	bl	8002a84 <__cxa_guard_acquire>
 8021442:	b138      	cbz	r0, 8021454 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021444:	4620      	mov	r0, r4
 8021446:	f7e1 fb85 	bl	8002b54 <__cxa_guard_release>
 802144a:	4a06      	ldr	r2, [pc, #24]	@ (8021464 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802144c:	4909      	ldr	r1, [pc, #36]	@ (8021474 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802144e:	480a      	ldr	r0, [pc, #40]	@ (8021478 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021450:	f007 fd68 	bl	8028f24 <__aeabi_atexit>
 8021454:	4b05      	ldr	r3, [pc, #20]	@ (802146c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021456:	656b      	str	r3, [r5, #84]	@ 0x54
 8021458:	4b07      	ldr	r3, [pc, #28]	@ (8021478 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802145a:	65ab      	str	r3, [r5, #88]	@ 0x58
 802145c:	bd38      	pop	{r3, r4, r5, pc}
 802145e:	bf00      	nop
 8021460:	240066fc 	.word	0x240066fc
 8021464:	24000000 	.word	0x24000000
 8021468:	0801d1f3 	.word	0x0801d1f3
 802146c:	2400008c 	.word	0x2400008c
 8021470:	24006700 	.word	0x24006700
 8021474:	0801d1f1 	.word	0x0801d1f1
 8021478:	24000090 	.word	0x24000090

0802147c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802147c:	b538      	push	{r3, r4, r5, lr}
 802147e:	4c15      	ldr	r4, [pc, #84]	@ (80214d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8021480:	4605      	mov	r5, r0
 8021482:	7823      	ldrb	r3, [r4, #0]
 8021484:	f3bf 8f5b 	dmb	ish
 8021488:	07da      	lsls	r2, r3, #31
 802148a:	d40b      	bmi.n	80214a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802148c:	4620      	mov	r0, r4
 802148e:	f7e1 faf9 	bl	8002a84 <__cxa_guard_acquire>
 8021492:	b138      	cbz	r0, 80214a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021494:	4620      	mov	r0, r4
 8021496:	f7e1 fb5d 	bl	8002b54 <__cxa_guard_release>
 802149a:	4a0f      	ldr	r2, [pc, #60]	@ (80214d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802149c:	490f      	ldr	r1, [pc, #60]	@ (80214dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802149e:	4810      	ldr	r0, [pc, #64]	@ (80214e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80214a0:	f007 fd40 	bl	8028f24 <__aeabi_atexit>
 80214a4:	4c0f      	ldr	r4, [pc, #60]	@ (80214e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80214a6:	7823      	ldrb	r3, [r4, #0]
 80214a8:	f3bf 8f5b 	dmb	ish
 80214ac:	07db      	lsls	r3, r3, #31
 80214ae:	d40b      	bmi.n	80214c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80214b0:	4620      	mov	r0, r4
 80214b2:	f7e1 fae7 	bl	8002a84 <__cxa_guard_acquire>
 80214b6:	b138      	cbz	r0, 80214c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80214b8:	4620      	mov	r0, r4
 80214ba:	f7e1 fb4b 	bl	8002b54 <__cxa_guard_release>
 80214be:	4a06      	ldr	r2, [pc, #24]	@ (80214d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80214c0:	4909      	ldr	r1, [pc, #36]	@ (80214e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80214c2:	480a      	ldr	r0, [pc, #40]	@ (80214ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80214c4:	f007 fd2e 	bl	8028f24 <__aeabi_atexit>
 80214c8:	4b05      	ldr	r3, [pc, #20]	@ (80214e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80214ca:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80214cc:	4b07      	ldr	r3, [pc, #28]	@ (80214ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80214ce:	652b      	str	r3, [r5, #80]	@ 0x50
 80214d0:	bd38      	pop	{r3, r4, r5, pc}
 80214d2:	bf00      	nop
 80214d4:	24006704 	.word	0x24006704
 80214d8:	24000000 	.word	0x24000000
 80214dc:	0801d1f7 	.word	0x0801d1f7
 80214e0:	24000094 	.word	0x24000094
 80214e4:	24006708 	.word	0x24006708
 80214e8:	0801d1f5 	.word	0x0801d1f5
 80214ec:	24000098 	.word	0x24000098

080214f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80214f0:	b538      	push	{r3, r4, r5, lr}
 80214f2:	4c15      	ldr	r4, [pc, #84]	@ (8021548 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80214f4:	4605      	mov	r5, r0
 80214f6:	7823      	ldrb	r3, [r4, #0]
 80214f8:	f3bf 8f5b 	dmb	ish
 80214fc:	07da      	lsls	r2, r3, #31
 80214fe:	d40b      	bmi.n	8021518 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021500:	4620      	mov	r0, r4
 8021502:	f7e1 fabf 	bl	8002a84 <__cxa_guard_acquire>
 8021506:	b138      	cbz	r0, 8021518 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021508:	4620      	mov	r0, r4
 802150a:	f7e1 fb23 	bl	8002b54 <__cxa_guard_release>
 802150e:	4a0f      	ldr	r2, [pc, #60]	@ (802154c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021510:	490f      	ldr	r1, [pc, #60]	@ (8021550 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8021512:	4810      	ldr	r0, [pc, #64]	@ (8021554 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021514:	f007 fd06 	bl	8028f24 <__aeabi_atexit>
 8021518:	4c0f      	ldr	r4, [pc, #60]	@ (8021558 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802151a:	7823      	ldrb	r3, [r4, #0]
 802151c:	f3bf 8f5b 	dmb	ish
 8021520:	07db      	lsls	r3, r3, #31
 8021522:	d40b      	bmi.n	802153c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021524:	4620      	mov	r0, r4
 8021526:	f7e1 faad 	bl	8002a84 <__cxa_guard_acquire>
 802152a:	b138      	cbz	r0, 802153c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 802152c:	4620      	mov	r0, r4
 802152e:	f7e1 fb11 	bl	8002b54 <__cxa_guard_release>
 8021532:	4a06      	ldr	r2, [pc, #24]	@ (802154c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021534:	4909      	ldr	r1, [pc, #36]	@ (802155c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8021536:	480a      	ldr	r0, [pc, #40]	@ (8021560 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021538:	f007 fcf4 	bl	8028f24 <__aeabi_atexit>
 802153c:	4b05      	ldr	r3, [pc, #20]	@ (8021554 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802153e:	646b      	str	r3, [r5, #68]	@ 0x44
 8021540:	4b07      	ldr	r3, [pc, #28]	@ (8021560 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021542:	64ab      	str	r3, [r5, #72]	@ 0x48
 8021544:	bd38      	pop	{r3, r4, r5, pc}
 8021546:	bf00      	nop
 8021548:	240066cc 	.word	0x240066cc
 802154c:	24000000 	.word	0x24000000
 8021550:	0801d1fb 	.word	0x0801d1fb
 8021554:	2400005c 	.word	0x2400005c
 8021558:	240066d0 	.word	0x240066d0
 802155c:	0801d1f9 	.word	0x0801d1f9
 8021560:	24000060 	.word	0x24000060

08021564 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8021564:	b538      	push	{r3, r4, r5, lr}
 8021566:	4c15      	ldr	r4, [pc, #84]	@ (80215bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8021568:	4605      	mov	r5, r0
 802156a:	7823      	ldrb	r3, [r4, #0]
 802156c:	f3bf 8f5b 	dmb	ish
 8021570:	07da      	lsls	r2, r3, #31
 8021572:	d40b      	bmi.n	802158c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021574:	4620      	mov	r0, r4
 8021576:	f7e1 fa85 	bl	8002a84 <__cxa_guard_acquire>
 802157a:	b138      	cbz	r0, 802158c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 802157c:	4620      	mov	r0, r4
 802157e:	f7e1 fae9 	bl	8002b54 <__cxa_guard_release>
 8021582:	4a0f      	ldr	r2, [pc, #60]	@ (80215c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021584:	490f      	ldr	r1, [pc, #60]	@ (80215c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8021586:	4810      	ldr	r0, [pc, #64]	@ (80215c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021588:	f007 fccc 	bl	8028f24 <__aeabi_atexit>
 802158c:	4c0f      	ldr	r4, [pc, #60]	@ (80215cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802158e:	7823      	ldrb	r3, [r4, #0]
 8021590:	f3bf 8f5b 	dmb	ish
 8021594:	07db      	lsls	r3, r3, #31
 8021596:	d40b      	bmi.n	80215b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021598:	4620      	mov	r0, r4
 802159a:	f7e1 fa73 	bl	8002a84 <__cxa_guard_acquire>
 802159e:	b138      	cbz	r0, 80215b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80215a0:	4620      	mov	r0, r4
 80215a2:	f7e1 fad7 	bl	8002b54 <__cxa_guard_release>
 80215a6:	4a06      	ldr	r2, [pc, #24]	@ (80215c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80215a8:	4909      	ldr	r1, [pc, #36]	@ (80215d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80215aa:	480a      	ldr	r0, [pc, #40]	@ (80215d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80215ac:	f007 fcba 	bl	8028f24 <__aeabi_atexit>
 80215b0:	4b05      	ldr	r3, [pc, #20]	@ (80215c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80215b2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 80215b4:	4b07      	ldr	r3, [pc, #28]	@ (80215d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80215b6:	642b      	str	r3, [r5, #64]	@ 0x40
 80215b8:	bd38      	pop	{r3, r4, r5, pc}
 80215ba:	bf00      	nop
 80215bc:	240066ec 	.word	0x240066ec
 80215c0:	24000000 	.word	0x24000000
 80215c4:	0801d1ff 	.word	0x0801d1ff
 80215c8:	2400007c 	.word	0x2400007c
 80215cc:	240066f0 	.word	0x240066f0
 80215d0:	0801d1fd 	.word	0x0801d1fd
 80215d4:	24000080 	.word	0x24000080

080215d8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80215d8:	b510      	push	{r4, lr}
 80215da:	4604      	mov	r4, r0
 80215dc:	f7ff ff14 	bl	8021408 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80215e0:	4620      	mov	r0, r4
 80215e2:	f7ff ff85 	bl	80214f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80215e6:	4620      	mov	r0, r4
 80215e8:	f7ff ff48 	bl	802147c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80215ec:	4620      	mov	r0, r4
 80215ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215f2:	f7ff bfb7 	b.w	8021564 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080215f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80215f8:	b538      	push	{r3, r4, r5, lr}
 80215fa:	4c15      	ldr	r4, [pc, #84]	@ (8021650 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80215fc:	4605      	mov	r5, r0
 80215fe:	7823      	ldrb	r3, [r4, #0]
 8021600:	f3bf 8f5b 	dmb	ish
 8021604:	07da      	lsls	r2, r3, #31
 8021606:	d40b      	bmi.n	8021620 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021608:	4620      	mov	r0, r4
 802160a:	f7e1 fa3b 	bl	8002a84 <__cxa_guard_acquire>
 802160e:	b138      	cbz	r0, 8021620 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021610:	4620      	mov	r0, r4
 8021612:	f7e1 fa9f 	bl	8002b54 <__cxa_guard_release>
 8021616:	4a0f      	ldr	r2, [pc, #60]	@ (8021654 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021618:	490f      	ldr	r1, [pc, #60]	@ (8021658 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802161a:	4810      	ldr	r0, [pc, #64]	@ (802165c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802161c:	f007 fc82 	bl	8028f24 <__aeabi_atexit>
 8021620:	4c0f      	ldr	r4, [pc, #60]	@ (8021660 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021622:	7823      	ldrb	r3, [r4, #0]
 8021624:	f3bf 8f5b 	dmb	ish
 8021628:	07db      	lsls	r3, r3, #31
 802162a:	d40b      	bmi.n	8021644 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802162c:	4620      	mov	r0, r4
 802162e:	f7e1 fa29 	bl	8002a84 <__cxa_guard_acquire>
 8021632:	b138      	cbz	r0, 8021644 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021634:	4620      	mov	r0, r4
 8021636:	f7e1 fa8d 	bl	8002b54 <__cxa_guard_release>
 802163a:	4a06      	ldr	r2, [pc, #24]	@ (8021654 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802163c:	4909      	ldr	r1, [pc, #36]	@ (8021664 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802163e:	480a      	ldr	r0, [pc, #40]	@ (8021668 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021640:	f007 fc70 	bl	8028f24 <__aeabi_atexit>
 8021644:	4b05      	ldr	r3, [pc, #20]	@ (802165c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021646:	666b      	str	r3, [r5, #100]	@ 0x64
 8021648:	4b07      	ldr	r3, [pc, #28]	@ (8021668 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802164a:	66ab      	str	r3, [r5, #104]	@ 0x68
 802164c:	bd38      	pop	{r3, r4, r5, pc}
 802164e:	bf00      	nop
 8021650:	240066d4 	.word	0x240066d4
 8021654:	24000000 	.word	0x24000000
 8021658:	0801d1eb 	.word	0x0801d1eb
 802165c:	24000064 	.word	0x24000064
 8021660:	240066d8 	.word	0x240066d8
 8021664:	0801d1e9 	.word	0x0801d1e9
 8021668:	24000068 	.word	0x24000068

0802166c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 802166c:	b538      	push	{r3, r4, r5, lr}
 802166e:	4c15      	ldr	r4, [pc, #84]	@ (80216c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021670:	4605      	mov	r5, r0
 8021672:	7823      	ldrb	r3, [r4, #0]
 8021674:	f3bf 8f5b 	dmb	ish
 8021678:	07da      	lsls	r2, r3, #31
 802167a:	d40b      	bmi.n	8021694 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802167c:	4620      	mov	r0, r4
 802167e:	f7e1 fa01 	bl	8002a84 <__cxa_guard_acquire>
 8021682:	b138      	cbz	r0, 8021694 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021684:	4620      	mov	r0, r4
 8021686:	f7e1 fa65 	bl	8002b54 <__cxa_guard_release>
 802168a:	4a0f      	ldr	r2, [pc, #60]	@ (80216c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802168c:	490f      	ldr	r1, [pc, #60]	@ (80216cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802168e:	4810      	ldr	r0, [pc, #64]	@ (80216d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021690:	f007 fc48 	bl	8028f24 <__aeabi_atexit>
 8021694:	4c0f      	ldr	r4, [pc, #60]	@ (80216d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021696:	7823      	ldrb	r3, [r4, #0]
 8021698:	f3bf 8f5b 	dmb	ish
 802169c:	07db      	lsls	r3, r3, #31
 802169e:	d40b      	bmi.n	80216b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80216a0:	4620      	mov	r0, r4
 80216a2:	f7e1 f9ef 	bl	8002a84 <__cxa_guard_acquire>
 80216a6:	b138      	cbz	r0, 80216b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80216a8:	4620      	mov	r0, r4
 80216aa:	f7e1 fa53 	bl	8002b54 <__cxa_guard_release>
 80216ae:	4a06      	ldr	r2, [pc, #24]	@ (80216c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80216b0:	4909      	ldr	r1, [pc, #36]	@ (80216d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80216b2:	480a      	ldr	r0, [pc, #40]	@ (80216dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80216b4:	f007 fc36 	bl	8028f24 <__aeabi_atexit>
 80216b8:	4b05      	ldr	r3, [pc, #20]	@ (80216d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80216ba:	65eb      	str	r3, [r5, #92]	@ 0x5c
 80216bc:	4b07      	ldr	r3, [pc, #28]	@ (80216dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80216be:	662b      	str	r3, [r5, #96]	@ 0x60
 80216c0:	bd38      	pop	{r3, r4, r5, pc}
 80216c2:	bf00      	nop
 80216c4:	240066ac 	.word	0x240066ac
 80216c8:	24000000 	.word	0x24000000
 80216cc:	0801d1ef 	.word	0x0801d1ef
 80216d0:	2400003c 	.word	0x2400003c
 80216d4:	240066b0 	.word	0x240066b0
 80216d8:	0801d1ed 	.word	0x0801d1ed
 80216dc:	24000040 	.word	0x24000040

080216e0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80216e0:	b510      	push	{r4, lr}
 80216e2:	4604      	mov	r4, r0
 80216e4:	f7ff ff88 	bl	80215f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80216e8:	4620      	mov	r0, r4
 80216ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80216ee:	f7ff bfbd 	b.w	802166c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080216f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80216f4:	b538      	push	{r3, r4, r5, lr}
 80216f6:	4c15      	ldr	r4, [pc, #84]	@ (802174c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80216f8:	4605      	mov	r5, r0
 80216fa:	7823      	ldrb	r3, [r4, #0]
 80216fc:	f3bf 8f5b 	dmb	ish
 8021700:	07da      	lsls	r2, r3, #31
 8021702:	d40b      	bmi.n	802171c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021704:	4620      	mov	r0, r4
 8021706:	f7e1 f9bd 	bl	8002a84 <__cxa_guard_acquire>
 802170a:	b138      	cbz	r0, 802171c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802170c:	4620      	mov	r0, r4
 802170e:	f7e1 fa21 	bl	8002b54 <__cxa_guard_release>
 8021712:	4a0f      	ldr	r2, [pc, #60]	@ (8021750 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021714:	490f      	ldr	r1, [pc, #60]	@ (8021754 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021716:	4810      	ldr	r0, [pc, #64]	@ (8021758 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021718:	f007 fc04 	bl	8028f24 <__aeabi_atexit>
 802171c:	4c0f      	ldr	r4, [pc, #60]	@ (802175c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802171e:	7823      	ldrb	r3, [r4, #0]
 8021720:	f3bf 8f5b 	dmb	ish
 8021724:	07db      	lsls	r3, r3, #31
 8021726:	d40b      	bmi.n	8021740 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021728:	4620      	mov	r0, r4
 802172a:	f7e1 f9ab 	bl	8002a84 <__cxa_guard_acquire>
 802172e:	b138      	cbz	r0, 8021740 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021730:	4620      	mov	r0, r4
 8021732:	f7e1 fa0f 	bl	8002b54 <__cxa_guard_release>
 8021736:	4a06      	ldr	r2, [pc, #24]	@ (8021750 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021738:	4909      	ldr	r1, [pc, #36]	@ (8021760 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802173a:	480a      	ldr	r0, [pc, #40]	@ (8021764 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802173c:	f007 fbf2 	bl	8028f24 <__aeabi_atexit>
 8021740:	4b05      	ldr	r3, [pc, #20]	@ (8021758 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021742:	676b      	str	r3, [r5, #116]	@ 0x74
 8021744:	4b07      	ldr	r3, [pc, #28]	@ (8021764 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021746:	67ab      	str	r3, [r5, #120]	@ 0x78
 8021748:	bd38      	pop	{r3, r4, r5, pc}
 802174a:	bf00      	nop
 802174c:	240066a4 	.word	0x240066a4
 8021750:	24000000 	.word	0x24000000
 8021754:	0801d1e3 	.word	0x0801d1e3
 8021758:	24000034 	.word	0x24000034
 802175c:	240066a8 	.word	0x240066a8
 8021760:	0801d1e1 	.word	0x0801d1e1
 8021764:	24000038 	.word	0x24000038

08021768 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021768:	b538      	push	{r3, r4, r5, lr}
 802176a:	4c15      	ldr	r4, [pc, #84]	@ (80217c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802176c:	4605      	mov	r5, r0
 802176e:	7823      	ldrb	r3, [r4, #0]
 8021770:	f3bf 8f5b 	dmb	ish
 8021774:	07da      	lsls	r2, r3, #31
 8021776:	d40b      	bmi.n	8021790 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021778:	4620      	mov	r0, r4
 802177a:	f7e1 f983 	bl	8002a84 <__cxa_guard_acquire>
 802177e:	b138      	cbz	r0, 8021790 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021780:	4620      	mov	r0, r4
 8021782:	f7e1 f9e7 	bl	8002b54 <__cxa_guard_release>
 8021786:	4a0f      	ldr	r2, [pc, #60]	@ (80217c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021788:	490f      	ldr	r1, [pc, #60]	@ (80217c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802178a:	4810      	ldr	r0, [pc, #64]	@ (80217cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802178c:	f007 fbca 	bl	8028f24 <__aeabi_atexit>
 8021790:	4c0f      	ldr	r4, [pc, #60]	@ (80217d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8021792:	7823      	ldrb	r3, [r4, #0]
 8021794:	f3bf 8f5b 	dmb	ish
 8021798:	07db      	lsls	r3, r3, #31
 802179a:	d40b      	bmi.n	80217b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802179c:	4620      	mov	r0, r4
 802179e:	f7e1 f971 	bl	8002a84 <__cxa_guard_acquire>
 80217a2:	b138      	cbz	r0, 80217b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80217a4:	4620      	mov	r0, r4
 80217a6:	f7e1 f9d5 	bl	8002b54 <__cxa_guard_release>
 80217aa:	4a06      	ldr	r2, [pc, #24]	@ (80217c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80217ac:	4909      	ldr	r1, [pc, #36]	@ (80217d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80217ae:	480a      	ldr	r0, [pc, #40]	@ (80217d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80217b0:	f007 fbb8 	bl	8028f24 <__aeabi_atexit>
 80217b4:	4b05      	ldr	r3, [pc, #20]	@ (80217cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80217b6:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80217b8:	4b07      	ldr	r3, [pc, #28]	@ (80217d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80217ba:	672b      	str	r3, [r5, #112]	@ 0x70
 80217bc:	bd38      	pop	{r3, r4, r5, pc}
 80217be:	bf00      	nop
 80217c0:	2400669c 	.word	0x2400669c
 80217c4:	24000000 	.word	0x24000000
 80217c8:	0801d1e7 	.word	0x0801d1e7
 80217cc:	2400002c 	.word	0x2400002c
 80217d0:	240066a0 	.word	0x240066a0
 80217d4:	0801d1e5 	.word	0x0801d1e5
 80217d8:	24000030 	.word	0x24000030

080217dc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80217dc:	b510      	push	{r4, lr}
 80217de:	4604      	mov	r4, r0
 80217e0:	f7ff ff88 	bl	80216f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80217e4:	4620      	mov	r0, r4
 80217e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80217ea:	f7ff bfbd 	b.w	8021768 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080217ee <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80217ee:	b510      	push	{r4, lr}
 80217f0:	4604      	mov	r4, r0
 80217f2:	f7ff fff3 	bl	80217dc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80217f6:	4620      	mov	r0, r4
 80217f8:	f7ff ff72 	bl	80216e0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80217fc:	4620      	mov	r0, r4
 80217fe:	f7ff fdf9 	bl	80213f4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8021802:	4620      	mov	r0, r4
 8021804:	f7ff fcfa 	bl	80211fc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8021808:	4620      	mov	r0, r4
 802180a:	f7ff fd75 	bl	80212f8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802180e:	4620      	mov	r0, r4
 8021810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021814:	f7ff bee0 	b.w	80215d8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08021818 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8021818:	b538      	push	{r3, r4, r5, lr}
 802181a:	4c0b      	ldr	r4, [pc, #44]	@ (8021848 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 802181c:	4605      	mov	r5, r0
 802181e:	7823      	ldrb	r3, [r4, #0]
 8021820:	f3bf 8f5b 	dmb	ish
 8021824:	07db      	lsls	r3, r3, #31
 8021826:	d40b      	bmi.n	8021840 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8021828:	4620      	mov	r0, r4
 802182a:	f7e1 f92b 	bl	8002a84 <__cxa_guard_acquire>
 802182e:	b138      	cbz	r0, 8021840 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8021830:	4620      	mov	r0, r4
 8021832:	f7e1 f98f 	bl	8002b54 <__cxa_guard_release>
 8021836:	4a05      	ldr	r2, [pc, #20]	@ (802184c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8021838:	4905      	ldr	r1, [pc, #20]	@ (8021850 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 802183a:	4806      	ldr	r0, [pc, #24]	@ (8021854 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 802183c:	f007 fb72 	bl	8028f24 <__aeabi_atexit>
 8021840:	4b04      	ldr	r3, [pc, #16]	@ (8021854 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8021842:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8021844:	bd38      	pop	{r3, r4, r5, pc}
 8021846:	bf00      	nop
 8021848:	24006690 	.word	0x24006690
 802184c:	24000000 	.word	0x24000000
 8021850:	0801d1df 	.word	0x0801d1df
 8021854:	24000024 	.word	0x24000024

08021858 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8021858:	b538      	push	{r3, r4, r5, lr}
 802185a:	4c0b      	ldr	r4, [pc, #44]	@ (8021888 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 802185c:	4605      	mov	r5, r0
 802185e:	7823      	ldrb	r3, [r4, #0]
 8021860:	f3bf 8f5b 	dmb	ish
 8021864:	07db      	lsls	r3, r3, #31
 8021866:	d40b      	bmi.n	8021880 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8021868:	4620      	mov	r0, r4
 802186a:	f7e1 f90b 	bl	8002a84 <__cxa_guard_acquire>
 802186e:	b138      	cbz	r0, 8021880 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8021870:	4620      	mov	r0, r4
 8021872:	f7e1 f96f 	bl	8002b54 <__cxa_guard_release>
 8021876:	4a05      	ldr	r2, [pc, #20]	@ (802188c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8021878:	4905      	ldr	r1, [pc, #20]	@ (8021890 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 802187a:	4806      	ldr	r0, [pc, #24]	@ (8021894 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 802187c:	f007 fb52 	bl	8028f24 <__aeabi_atexit>
 8021880:	4b04      	ldr	r3, [pc, #16]	@ (8021894 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8021882:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8021886:	bd38      	pop	{r3, r4, r5, pc}
 8021888:	24006694 	.word	0x24006694
 802188c:	24000000 	.word	0x24000000
 8021890:	0801d1dd 	.word	0x0801d1dd
 8021894:	24000028 	.word	0x24000028

08021898 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8021898:	b570      	push	{r4, r5, r6, lr}
 802189a:	4d0d      	ldr	r5, [pc, #52]	@ (80218d0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 802189c:	4606      	mov	r6, r0
 802189e:	4c0d      	ldr	r4, [pc, #52]	@ (80218d4 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 80218a0:	782b      	ldrb	r3, [r5, #0]
 80218a2:	f3bf 8f5b 	dmb	ish
 80218a6:	f013 0f01 	tst.w	r3, #1
 80218aa:	d10d      	bne.n	80218c8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 80218ac:	4628      	mov	r0, r5
 80218ae:	f7e1 f8e9 	bl	8002a84 <__cxa_guard_acquire>
 80218b2:	b148      	cbz	r0, 80218c8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 80218b4:	4b08      	ldr	r3, [pc, #32]	@ (80218d8 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 80218b6:	4628      	mov	r0, r5
 80218b8:	6023      	str	r3, [r4, #0]
 80218ba:	f7e1 f94b 	bl	8002b54 <__cxa_guard_release>
 80218be:	4a07      	ldr	r2, [pc, #28]	@ (80218dc <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 80218c0:	4620      	mov	r0, r4
 80218c2:	4907      	ldr	r1, [pc, #28]	@ (80218e0 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 80218c4:	f007 fb2e 	bl	8028f24 <__aeabi_atexit>
 80218c8:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 80218cc:	bd70      	pop	{r4, r5, r6, pc}
 80218ce:	bf00      	nop
 80218d0:	24006698 	.word	0x24006698
 80218d4:	24006810 	.word	0x24006810
 80218d8:	0802c614 	.word	0x0802c614
 80218dc:	24000000 	.word	0x24000000
 80218e0:	0801d1db 	.word	0x0801d1db

080218e4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 80218e4:	b510      	push	{r4, lr}
 80218e6:	4604      	mov	r4, r0
 80218e8:	f7ff ff96 	bl	8021818 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 80218ec:	4620      	mov	r0, r4
 80218ee:	f7ff ffb3 	bl	8021858 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 80218f2:	4620      	mov	r0, r4
 80218f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80218f8:	f7ff bfce 	b.w	8021898 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

080218fc <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 80218fc:	b570      	push	{r4, r5, r6, lr}
 80218fe:	4d0d      	ldr	r5, [pc, #52]	@ (8021934 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8021900:	4606      	mov	r6, r0
 8021902:	4c0d      	ldr	r4, [pc, #52]	@ (8021938 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8021904:	782b      	ldrb	r3, [r5, #0]
 8021906:	f3bf 8f5b 	dmb	ish
 802190a:	f013 0f01 	tst.w	r3, #1
 802190e:	d10d      	bne.n	802192c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 8021910:	4628      	mov	r0, r5
 8021912:	f7e1 f8b7 	bl	8002a84 <__cxa_guard_acquire>
 8021916:	b148      	cbz	r0, 802192c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x30>
 8021918:	4b08      	ldr	r3, [pc, #32]	@ (802193c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 802191a:	4628      	mov	r0, r5
 802191c:	6023      	str	r3, [r4, #0]
 802191e:	f7e1 f919 	bl	8002b54 <__cxa_guard_release>
 8021922:	4a07      	ldr	r2, [pc, #28]	@ (8021940 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8021924:	4620      	mov	r0, r4
 8021926:	4907      	ldr	r1, [pc, #28]	@ (8021944 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x48>)
 8021928:	f007 fafc 	bl	8028f24 <__aeabi_atexit>
 802192c:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8021930:	bd70      	pop	{r4, r5, r6, pc}
 8021932:	bf00      	nop
 8021934:	2400668c 	.word	0x2400668c
 8021938:	2400670c 	.word	0x2400670c
 802193c:	0802c630 	.word	0x0802c630
 8021940:	24000000 	.word	0x24000000
 8021944:	0801d1d9 	.word	0x0801d1d9

08021948 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8021948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802194c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8021950:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8021954:	2d00      	cmp	r5, #0
 8021956:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 802195a:	fb05 4c0e 	mla	ip, r5, lr, r4
 802195e:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8021962:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8021966:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 802196a:	eb02 0a0c 	add.w	sl, r2, ip
 802196e:	8808      	ldrh	r0, [r1, #0]
 8021970:	f2c0 80b0 	blt.w	8021ad4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8021974:	45ab      	cmp	fp, r5
 8021976:	f340 80ad 	ble.w	8021ad4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 802197a:	2c00      	cmp	r4, #0
 802197c:	f2c0 80a8 	blt.w	8021ad0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8021980:	45a6      	cmp	lr, r4
 8021982:	f340 80a5 	ble.w	8021ad0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8021986:	f812 200c 	ldrb.w	r2, [r2, ip]
 802198a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 802198e:	1c62      	adds	r2, r4, #1
 8021990:	f100 80a3 	bmi.w	8021ada <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8021994:	4596      	cmp	lr, r2
 8021996:	f340 80a0 	ble.w	8021ada <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 802199a:	f1b9 0f00 	cmp.w	r9, #0
 802199e:	f000 809c 	beq.w	8021ada <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80219a2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80219a6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80219aa:	3501      	adds	r5, #1
 80219ac:	f100 8099 	bmi.w	8021ae2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80219b0:	45ab      	cmp	fp, r5
 80219b2:	f340 8096 	ble.w	8021ae2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80219b6:	2f00      	cmp	r7, #0
 80219b8:	f000 8093 	beq.w	8021ae2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80219bc:	2c00      	cmp	r4, #0
 80219be:	f2c0 808e 	blt.w	8021ade <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80219c2:	45a6      	cmp	lr, r4
 80219c4:	f340 808b 	ble.w	8021ade <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80219c8:	f81a 200e 	ldrb.w	r2, [sl, lr]
 80219cc:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 80219d0:	3401      	adds	r4, #1
 80219d2:	f100 8089 	bmi.w	8021ae8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80219d6:	45a6      	cmp	lr, r4
 80219d8:	f340 8086 	ble.w	8021ae8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80219dc:	f1b9 0f00 	cmp.w	r9, #0
 80219e0:	f000 8082 	beq.w	8021ae8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80219e4:	44d6      	add	lr, sl
 80219e6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80219ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80219ee:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80219f2:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 80219f6:	fb19 fe07 	smulbb	lr, r9, r7
 80219fa:	f1c7 0210 	rsb	r2, r7, #16
 80219fe:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8021a02:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8021a06:	eba2 0209 	sub.w	r2, r2, r9
 8021a0a:	ea44 0808 	orr.w	r8, r4, r8
 8021a0e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8021a12:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8021a16:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8021a1a:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8021a1e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8021a22:	ea44 0c0c 	orr.w	ip, r4, ip
 8021a26:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8021a2a:	fb04 f40c 	mul.w	r4, r4, ip
 8021a2e:	fb02 4808 	mla	r8, r2, r8, r4
 8021a32:	041a      	lsls	r2, r3, #16
 8021a34:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021a38:	b2b4      	uxth	r4, r6
 8021a3a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8021a3e:	43f6      	mvns	r6, r6
 8021a40:	4313      	orrs	r3, r2
 8021a42:	042a      	lsls	r2, r5, #16
 8021a44:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8021a48:	b2f6      	uxtb	r6, r6
 8021a4a:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8021a4e:	fb0e 8303 	mla	r3, lr, r3, r8
 8021a52:	432a      	orrs	r2, r5
 8021a54:	fb07 3202 	mla	r2, r7, r2, r3
 8021a58:	10c7      	asrs	r7, r0, #3
 8021a5a:	0d53      	lsrs	r3, r2, #21
 8021a5c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8021a60:	0952      	lsrs	r2, r2, #5
 8021a62:	fb17 f706 	smulbb	r7, r7, r6
 8021a66:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021a6a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021a6e:	431a      	orrs	r2, r3
 8021a70:	b293      	uxth	r3, r2
 8021a72:	1202      	asrs	r2, r0, #8
 8021a74:	121d      	asrs	r5, r3, #8
 8021a76:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8021a7a:	00c0      	lsls	r0, r0, #3
 8021a7c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021a80:	fb12 f206 	smulbb	r2, r2, r6
 8021a84:	b2c0      	uxtb	r0, r0
 8021a86:	fb05 2504 	mla	r5, r5, r4, r2
 8021a8a:	10da      	asrs	r2, r3, #3
 8021a8c:	fb10 f006 	smulbb	r0, r0, r6
 8021a90:	00db      	lsls	r3, r3, #3
 8021a92:	b2ad      	uxth	r5, r5
 8021a94:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8021a98:	b2db      	uxtb	r3, r3
 8021a9a:	fb02 7204 	mla	r2, r2, r4, r7
 8021a9e:	fb03 0004 	mla	r0, r3, r4, r0
 8021aa2:	1c6b      	adds	r3, r5, #1
 8021aa4:	b292      	uxth	r2, r2
 8021aa6:	b280      	uxth	r0, r0
 8021aa8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021aac:	1c43      	adds	r3, r0, #1
 8021aae:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8021ab2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021ab6:	1c50      	adds	r0, r2, #1
 8021ab8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021abc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021ac0:	0952      	lsrs	r2, r2, #5
 8021ac2:	432b      	orrs	r3, r5
 8021ac4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021ac8:	4313      	orrs	r3, r2
 8021aca:	800b      	strh	r3, [r1, #0]
 8021acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ad0:	4680      	mov	r8, r0
 8021ad2:	e75c      	b.n	802198e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8021ad4:	4684      	mov	ip, r0
 8021ad6:	4680      	mov	r8, r0
 8021ad8:	e767      	b.n	80219aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8021ada:	4684      	mov	ip, r0
 8021adc:	e765      	b.n	80219aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8021ade:	4605      	mov	r5, r0
 8021ae0:	e776      	b.n	80219d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8021ae2:	4603      	mov	r3, r0
 8021ae4:	4605      	mov	r5, r0
 8021ae6:	e782      	b.n	80219ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8021ae8:	4603      	mov	r3, r0
 8021aea:	e780      	b.n	80219ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08021aec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021af0:	b099      	sub	sp, #100	@ 0x64
 8021af2:	9215      	str	r2, [sp, #84]	@ 0x54
 8021af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8021af6:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8021af8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8021afc:	9016      	str	r0, [sp, #88]	@ 0x58
 8021afe:	930d      	str	r3, [sp, #52]	@ 0x34
 8021b00:	6850      	ldr	r0, [r2, #4]
 8021b02:	910c      	str	r1, [sp, #48]	@ 0x30
 8021b04:	6812      	ldr	r2, [r2, #0]
 8021b06:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8021b0a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8021b0e:	fb00 1303 	mla	r3, r0, r3, r1
 8021b12:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8021b16:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021b18:	681b      	ldr	r3, [r3, #0]
 8021b1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021b1c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021b1e:	685e      	ldr	r6, [r3, #4]
 8021b20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021b22:	3604      	adds	r6, #4
 8021b24:	43db      	mvns	r3, r3
 8021b26:	b2db      	uxtb	r3, r3
 8021b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8021b2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	dc03      	bgt.n	8021b38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021b30:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021b32:	2b00      	cmp	r3, #0
 8021b34:	f340 8225 	ble.w	8021f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8021b38:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021b3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021b3e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021b42:	1e48      	subs	r0, r1, #1
 8021b44:	1e57      	subs	r7, r2, #1
 8021b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	f340 80e3 	ble.w	8021d14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8021b4e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8021b52:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021b56:	d406      	bmi.n	8021b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021b58:	4584      	cmp	ip, r0
 8021b5a:	da04      	bge.n	8021b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021b5c:	2b00      	cmp	r3, #0
 8021b5e:	db02      	blt.n	8021b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021b60:	42bb      	cmp	r3, r7
 8021b62:	f2c0 80d8 	blt.w	8021d16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021b66:	f11c 0c01 	adds.w	ip, ip, #1
 8021b6a:	f100 80c9 	bmi.w	8021d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021b6e:	4561      	cmp	r1, ip
 8021b70:	f2c0 80c6 	blt.w	8021d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021b74:	3301      	adds	r3, #1
 8021b76:	f100 80c3 	bmi.w	8021d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021b7a:	429a      	cmp	r2, r3
 8021b7c:	f2c0 80c0 	blt.w	8021d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021b80:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8021b84:	4647      	mov	r7, r8
 8021b86:	f1bb 0f00 	cmp.w	fp, #0
 8021b8a:	f340 80e3 	ble.w	8021d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8021b8e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8021b90:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021b94:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021b96:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8021b9a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021b9e:	ea5f 422a 	movs.w	r2, sl, asr #16
 8021ba2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021ba6:	689b      	ldr	r3, [r3, #8]
 8021ba8:	f100 8121 	bmi.w	8021dee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021bac:	f103 39ff 	add.w	r9, r3, #4294967295
 8021bb0:	454a      	cmp	r2, r9
 8021bb2:	f280 811c 	bge.w	8021dee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021bb6:	f1bc 0f00 	cmp.w	ip, #0
 8021bba:	f2c0 8118 	blt.w	8021dee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021bbe:	f10e 39ff 	add.w	r9, lr, #4294967295
 8021bc2:	45cc      	cmp	ip, r9
 8021bc4:	f280 8113 	bge.w	8021dee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8021bc8:	b21b      	sxth	r3, r3
 8021bca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021bcc:	fb0c 2203 	mla	r2, ip, r3, r2
 8021bd0:	eb04 0902 	add.w	r9, r4, r2
 8021bd4:	5ca2      	ldrb	r2, [r4, r2]
 8021bd6:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8021bda:	2800      	cmp	r0, #0
 8021bdc:	f000 80fe 	beq.w	8021ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021be0:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021be4:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8021be8:	9211      	str	r2, [sp, #68]	@ 0x44
 8021bea:	b151      	cbz	r1, 8021c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021bec:	eb09 0203 	add.w	r2, r9, r3
 8021bf0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021bf4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021bf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021bfa:	7853      	ldrb	r3, [r2, #1]
 8021bfc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021c00:	9312      	str	r3, [sp, #72]	@ 0x48
 8021c02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021c04:	fb10 f201 	smulbb	r2, r0, r1
 8021c08:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021c0a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021c0e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021c12:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8021c16:	10d2      	asrs	r2, r2, #3
 8021c18:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8021c1c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8021c20:	ea4c 0c03 	orr.w	ip, ip, r3
 8021c24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021c26:	041b      	lsls	r3, r3, #16
 8021c28:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8021c2c:	4323      	orrs	r3, r4
 8021c2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021c30:	4353      	muls	r3, r2
 8021c32:	fb09 330c 	mla	r3, r9, ip, r3
 8021c36:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021c3a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8021c3e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8021c42:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021c46:	f1c1 0c10 	rsb	ip, r1, #16
 8021c4a:	ebac 0c00 	sub.w	ip, ip, r0
 8021c4e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021c52:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021c56:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021c5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021c5c:	0418      	lsls	r0, r3, #16
 8021c5e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021c62:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8021c66:	4318      	orrs	r0, r3
 8021c68:	fb02 c200 	mla	r2, r2, r0, ip
 8021c6c:	8838      	ldrh	r0, [r7, #0]
 8021c6e:	0d53      	lsrs	r3, r2, #21
 8021c70:	0952      	lsrs	r2, r2, #5
 8021c72:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021c76:	1201      	asrs	r1, r0, #8
 8021c78:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8021c7c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8021c80:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8021c84:	00c0      	lsls	r0, r0, #3
 8021c86:	431a      	orrs	r2, r3
 8021c88:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8021c8c:	fb11 f104 	smulbb	r1, r1, r4
 8021c90:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8021c94:	b292      	uxth	r2, r2
 8021c96:	fb1e fe04 	smulbb	lr, lr, r4
 8021c9a:	b2c0      	uxtb	r0, r0
 8021c9c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8021ca0:	fb10 f004 	smulbb	r0, r0, r4
 8021ca4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8021ca8:	fb0c 1c03 	mla	ip, ip, r3, r1
 8021cac:	10d1      	asrs	r1, r2, #3
 8021cae:	00d2      	lsls	r2, r2, #3
 8021cb0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8021cb4:	fa1f fc8c 	uxth.w	ip, ip
 8021cb8:	b2d2      	uxtb	r2, r2
 8021cba:	fb01 e103 	mla	r1, r1, r3, lr
 8021cbe:	fb02 0303 	mla	r3, r2, r3, r0
 8021cc2:	b289      	uxth	r1, r1
 8021cc4:	b29a      	uxth	r2, r3
 8021cc6:	f10c 0301 	add.w	r3, ip, #1
 8021cca:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021cce:	1c53      	adds	r3, r2, #1
 8021cd0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021cd4:	1c4a      	adds	r2, r1, #1
 8021cd6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8021cda:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021cde:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021ce2:	0949      	lsrs	r1, r1, #5
 8021ce4:	ea43 030c 	orr.w	r3, r3, ip
 8021ce8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021cec:	430b      	orrs	r3, r1
 8021cee:	803b      	strh	r3, [r7, #0]
 8021cf0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021cf2:	3702      	adds	r7, #2
 8021cf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021cf8:	449a      	add	sl, r3
 8021cfa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021cfc:	441d      	add	r5, r3
 8021cfe:	e742      	b.n	8021b86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021d00:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021d02:	f108 0802 	add.w	r8, r8, #2
 8021d06:	449a      	add	sl, r3
 8021d08:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021d0a:	441d      	add	r5, r3
 8021d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d0e:	3b01      	subs	r3, #1
 8021d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d12:	e718      	b.n	8021b46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021d14:	d023      	beq.n	8021d5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8021d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d18:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8021d1a:	3b01      	subs	r3, #1
 8021d1c:	fb00 a003 	mla	r0, r0, r3, sl
 8021d20:	1400      	asrs	r0, r0, #16
 8021d22:	f53f af2d 	bmi.w	8021b80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021d26:	3901      	subs	r1, #1
 8021d28:	4288      	cmp	r0, r1
 8021d2a:	f6bf af29 	bge.w	8021b80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021d2e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8021d30:	fb01 5303 	mla	r3, r1, r3, r5
 8021d34:	141b      	asrs	r3, r3, #16
 8021d36:	f53f af23 	bmi.w	8021b80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021d3a:	3a01      	subs	r2, #1
 8021d3c:	4293      	cmp	r3, r2
 8021d3e:	f6bf af1f 	bge.w	8021b80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021d42:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8021d46:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8021d4a:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8021d4e:	f1be 0f00 	cmp.w	lr, #0
 8021d52:	dc6c      	bgt.n	8021e2e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d56:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021d5a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8021d5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	f340 810e 	ble.w	8021f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8021d66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021d6a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021d6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021d70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021d74:	eef0 6a62 	vmov.f32	s13, s5
 8021d78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021d7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021d80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d84:	ee16 aa90 	vmov	sl, s13
 8021d88:	eef0 6a43 	vmov.f32	s13, s6
 8021d8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d90:	ee16 5a90 	vmov	r5, s13
 8021d94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021d98:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021d9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021da0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021da4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021da8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021dac:	ee12 2a90 	vmov	r2, s5
 8021db0:	eef0 2a47 	vmov.f32	s5, s14
 8021db4:	fb92 f3f3 	sdiv	r3, r2, r3
 8021db8:	ee13 2a10 	vmov	r2, s6
 8021dbc:	9325      	str	r3, [sp, #148]	@ 0x94
 8021dbe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021dc0:	eeb0 3a67 	vmov.f32	s6, s15
 8021dc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8021dc8:	9326      	str	r3, [sp, #152]	@ 0x98
 8021dca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021dcc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021dce:	3b01      	subs	r3, #1
 8021dd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8021dd2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021dd4:	bf08      	it	eq
 8021dd6:	4613      	moveq	r3, r2
 8021dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8021dda:	e6a6      	b.n	8021b2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021ddc:	2900      	cmp	r1, #0
 8021dde:	f43f af10 	beq.w	8021c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021de2:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021de6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021dea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021dec:	e709      	b.n	8021c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021dee:	f112 0901 	adds.w	r9, r2, #1
 8021df2:	f53f af7d 	bmi.w	8021cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021df6:	454b      	cmp	r3, r9
 8021df8:	f6ff af7a 	blt.w	8021cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021dfc:	f11c 0901 	adds.w	r9, ip, #1
 8021e00:	f53f af76 	bmi.w	8021cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021e04:	45ce      	cmp	lr, r9
 8021e06:	f6ff af73 	blt.w	8021cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021e0a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021e0c:	b21b      	sxth	r3, r3
 8021e0e:	9202      	str	r2, [sp, #8]
 8021e10:	fa0f f28e 	sxth.w	r2, lr
 8021e14:	9300      	str	r3, [sp, #0]
 8021e16:	4633      	mov	r3, r6
 8021e18:	9201      	str	r2, [sp, #4]
 8021e1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021e1c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021e20:	e9cd c003 	strd	ip, r0, [sp, #12]
 8021e24:	4639      	mov	r1, r7
 8021e26:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021e28:	f7ff fd8e 	bl	8021948 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8021e2c:	e760      	b.n	8021cf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021e2e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021e30:	ea4f 422a 	mov.w	r2, sl, asr #16
 8021e34:	1429      	asrs	r1, r5, #16
 8021e36:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021e38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021e3c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8021e40:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021e44:	fb03 2101 	mla	r1, r3, r1, r2
 8021e48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021e4a:	440a      	add	r2, r1
 8021e4c:	5c61      	ldrb	r1, [r4, r1]
 8021e4e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8021e52:	f1bc 0f00 	cmp.w	ip, #0
 8021e56:	f000 808c 	beq.w	8021f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8021e5a:	7857      	ldrb	r7, [r2, #1]
 8021e5c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8021e60:	9413      	str	r4, [sp, #76]	@ 0x4c
 8021e62:	b140      	cbz	r0, 8021e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021e64:	18d7      	adds	r7, r2, r3
 8021e66:	5cd3      	ldrb	r3, [r2, r3]
 8021e68:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021e6c:	9310      	str	r3, [sp, #64]	@ 0x40
 8021e6e:	787b      	ldrb	r3, [r7, #1]
 8021e70:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021e74:	9314      	str	r3, [sp, #80]	@ 0x50
 8021e76:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021e78:	fb1c f200 	smulbb	r2, ip, r0
 8021e7c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021e7e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021e82:	041f      	lsls	r7, r3, #16
 8021e84:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8021e88:	10d2      	asrs	r2, r2, #3
 8021e8a:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 8021e8e:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 8021e92:	431f      	orrs	r7, r3
 8021e94:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8021e98:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021e9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021e9c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021e9e:	041b      	lsls	r3, r3, #16
 8021ea0:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8021ea4:	ea43 030b 	orr.w	r3, r3, fp
 8021ea8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021eac:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8021eb0:	4353      	muls	r3, r2
 8021eb2:	fb04 3707 	mla	r7, r4, r7, r3
 8021eb6:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8021eba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021ebc:	ea43 0b01 	orr.w	fp, r3, r1
 8021ec0:	f1c0 0110 	rsb	r1, r0, #16
 8021ec4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021ec6:	eba1 0c0c 	sub.w	ip, r1, ip
 8021eca:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021ece:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8021ed2:	fb0c 770b 	mla	r7, ip, fp, r7
 8021ed6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021eda:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 8021ede:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8021ee2:	ea4c 0c0b 	orr.w	ip, ip, fp
 8021ee6:	fb02 770c 	mla	r7, r2, ip, r7
 8021eea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021eec:	0d79      	lsrs	r1, r7, #21
 8021eee:	8812      	ldrh	r2, [r2, #0]
 8021ef0:	097f      	lsrs	r7, r7, #5
 8021ef2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021ef6:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8021efa:	430f      	orrs	r7, r1
 8021efc:	1211      	asrs	r1, r2, #8
 8021efe:	b2bb      	uxth	r3, r7
 8021f00:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8021f04:	10d7      	asrs	r7, r2, #3
 8021f06:	fb11 f104 	smulbb	r1, r1, r4
 8021f0a:	1218      	asrs	r0, r3, #8
 8021f0c:	00d2      	lsls	r2, r2, #3
 8021f0e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8021f12:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8021f16:	fb17 f704 	smulbb	r7, r7, r4
 8021f1a:	b2d2      	uxtb	r2, r2
 8021f1c:	fb00 1009 	mla	r0, r0, r9, r1
 8021f20:	10d9      	asrs	r1, r3, #3
 8021f22:	fb12 f204 	smulbb	r2, r2, r4
 8021f26:	00db      	lsls	r3, r3, #3
 8021f28:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8021f2c:	b280      	uxth	r0, r0
 8021f2e:	b2db      	uxtb	r3, r3
 8021f30:	fb01 7109 	mla	r1, r1, r9, r7
 8021f34:	fb03 2309 	mla	r3, r3, r9, r2
 8021f38:	1c42      	adds	r2, r0, #1
 8021f3a:	b289      	uxth	r1, r1
 8021f3c:	b29b      	uxth	r3, r3
 8021f3e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021f42:	1c4f      	adds	r7, r1, #1
 8021f44:	1c5a      	adds	r2, r3, #1
 8021f46:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8021f4a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8021f4e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021f54:	0949      	lsrs	r1, r1, #5
 8021f56:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021f5a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021f5e:	4310      	orrs	r0, r2
 8021f60:	4308      	orrs	r0, r1
 8021f62:	f823 0b02 	strh.w	r0, [r3], #2
 8021f66:	930e      	str	r3, [sp, #56]	@ 0x38
 8021f68:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021f6a:	449a      	add	sl, r3
 8021f6c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021f6e:	441d      	add	r5, r3
 8021f70:	e6ed      	b.n	8021d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8021f72:	2800      	cmp	r0, #0
 8021f74:	f43f af7f 	beq.w	8021e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021f78:	5cd3      	ldrb	r3, [r2, r3]
 8021f7a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021f7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8021f80:	e779      	b.n	8021e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021f82:	b019      	add	sp, #100	@ 0x64
 8021f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021f88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f8c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 8021f90:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8021f94:	f1b8 0f00 	cmp.w	r8, #0
 8021f98:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8021f9c:	fb08 470e 	mla	r7, r8, lr, r4
 8021fa0:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 8021fa4:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8021fa8:	eb02 0907 	add.w	r9, r2, r7
 8021fac:	8808      	ldrh	r0, [r1, #0]
 8021fae:	db67      	blt.n	8022080 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8021fb0:	45c2      	cmp	sl, r8
 8021fb2:	dd65      	ble.n	8022080 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8021fb4:	2c00      	cmp	r4, #0
 8021fb6:	db61      	blt.n	802207c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8021fb8:	45a6      	cmp	lr, r4
 8021fba:	dd5f      	ble.n	802207c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8021fbc:	5dd2      	ldrb	r2, [r2, r7]
 8021fbe:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8021fc2:	1c62      	adds	r2, r4, #1
 8021fc4:	d45f      	bmi.n	8022086 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8021fc6:	4596      	cmp	lr, r2
 8021fc8:	dd5d      	ble.n	8022086 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8021fca:	2d00      	cmp	r5, #0
 8021fcc:	d05b      	beq.n	8022086 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8021fce:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021fd2:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8021fd6:	f118 0801 	adds.w	r8, r8, #1
 8021fda:	d458      	bmi.n	802208e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8021fdc:	45c2      	cmp	sl, r8
 8021fde:	dd56      	ble.n	802208e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8021fe0:	2e00      	cmp	r6, #0
 8021fe2:	d054      	beq.n	802208e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8021fe4:	2c00      	cmp	r4, #0
 8021fe6:	db50      	blt.n	802208a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8021fe8:	45a6      	cmp	lr, r4
 8021fea:	dd4e      	ble.n	802208a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8021fec:	f819 200e 	ldrb.w	r2, [r9, lr]
 8021ff0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021ff4:	3401      	adds	r4, #1
 8021ff6:	d407      	bmi.n	8022008 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021ff8:	45a6      	cmp	lr, r4
 8021ffa:	dd05      	ble.n	8022008 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021ffc:	b125      	cbz	r5, 8022008 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021ffe:	44ce      	add	lr, r9
 8022000:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022004:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8022008:	fb15 f406 	smulbb	r4, r5, r6
 802200c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8022010:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8022014:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022018:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802201c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8022020:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8022024:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8022028:	ea43 0c0c 	orr.w	ip, r3, ip
 802202c:	f1c6 0310 	rsb	r3, r6, #16
 8022030:	ea4e 0707 	orr.w	r7, lr, r7
 8022034:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8022038:	1b5b      	subs	r3, r3, r5
 802203a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802203e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8022042:	437d      	muls	r5, r7
 8022044:	fb03 5c0c 	mla	ip, r3, ip, r5
 8022048:	0403      	lsls	r3, r0, #16
 802204a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802204e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8022052:	4318      	orrs	r0, r3
 8022054:	0413      	lsls	r3, r2, #16
 8022056:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802205a:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802205e:	fb04 c000 	mla	r0, r4, r0, ip
 8022062:	4313      	orrs	r3, r2
 8022064:	fb06 0003 	mla	r0, r6, r3, r0
 8022068:	0d43      	lsrs	r3, r0, #21
 802206a:	0940      	lsrs	r0, r0, #5
 802206c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022070:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8022074:	4318      	orrs	r0, r3
 8022076:	8008      	strh	r0, [r1, #0]
 8022078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802207c:	4684      	mov	ip, r0
 802207e:	e7a0      	b.n	8021fc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8022080:	4607      	mov	r7, r0
 8022082:	4684      	mov	ip, r0
 8022084:	e7a7      	b.n	8021fd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8022086:	4607      	mov	r7, r0
 8022088:	e7a5      	b.n	8021fd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802208a:	4602      	mov	r2, r0
 802208c:	e7b2      	b.n	8021ff4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802208e:	4602      	mov	r2, r0
 8022090:	e7ba      	b.n	8022008 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08022092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022092:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022096:	b093      	sub	sp, #76	@ 0x4c
 8022098:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802209c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802209e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80220a0:	9010      	str	r0, [sp, #64]	@ 0x40
 80220a2:	9108      	str	r1, [sp, #32]
 80220a4:	6850      	ldr	r0, [r2, #4]
 80220a6:	9306      	str	r3, [sp, #24]
 80220a8:	6812      	ldr	r2, [r2, #0]
 80220aa:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80220ae:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 80220b2:	fb00 1303 	mla	r3, r0, r3, r1
 80220b6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80220ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80220bc:	681b      	ldr	r3, [r3, #0]
 80220be:	9307      	str	r3, [sp, #28]
 80220c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80220c2:	685f      	ldr	r7, [r3, #4]
 80220c4:	3704      	adds	r7, #4
 80220c6:	9b08      	ldr	r3, [sp, #32]
 80220c8:	2b00      	cmp	r3, #0
 80220ca:	dc03      	bgt.n	80220d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80220cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80220ce:	2b00      	cmp	r3, #0
 80220d0:	f340 81b2 	ble.w	8022438 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80220d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80220d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80220da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80220de:	1e48      	subs	r0, r1, #1
 80220e0:	f102 3cff 	add.w	ip, r2, #4294967295
 80220e4:	9b06      	ldr	r3, [sp, #24]
 80220e6:	2b00      	cmp	r3, #0
 80220e8:	f340 80a9 	ble.w	802223e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80220ec:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80220f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80220f4:	d406      	bmi.n	8022104 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80220f6:	4586      	cmp	lr, r0
 80220f8:	da04      	bge.n	8022104 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	db02      	blt.n	8022104 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80220fe:	4563      	cmp	r3, ip
 8022100:	f2c0 809e 	blt.w	8022240 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8022104:	f11e 0e01 	adds.w	lr, lr, #1
 8022108:	f100 808f 	bmi.w	802222a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802210c:	4571      	cmp	r1, lr
 802210e:	f2c0 808c 	blt.w	802222a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022112:	3301      	adds	r3, #1
 8022114:	f100 8089 	bmi.w	802222a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8022118:	429a      	cmp	r2, r3
 802211a:	f2c0 8086 	blt.w	802222a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802211e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022122:	46c8      	mov	r8, r9
 8022124:	f1bb 0f00 	cmp.w	fp, #0
 8022128:	f340 80a6 	ble.w	8022278 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802212c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802212e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022132:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022134:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022138:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802213c:	1422      	asrs	r2, r4, #16
 802213e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022142:	689b      	ldr	r3, [r3, #8]
 8022144:	f100 80e3 	bmi.w	802230e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022148:	f103 3aff 	add.w	sl, r3, #4294967295
 802214c:	4552      	cmp	r2, sl
 802214e:	f280 80de 	bge.w	802230e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022152:	f1bc 0f00 	cmp.w	ip, #0
 8022156:	f2c0 80da 	blt.w	802230e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802215a:	f10e 3aff 	add.w	sl, lr, #4294967295
 802215e:	45d4      	cmp	ip, sl
 8022160:	f280 80d5 	bge.w	802230e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022164:	b21b      	sxth	r3, r3
 8022166:	9d07      	ldr	r5, [sp, #28]
 8022168:	fb0c 2203 	mla	r2, ip, r3, r2
 802216c:	eb05 0a02 	add.w	sl, r5, r2
 8022170:	5caa      	ldrb	r2, [r5, r2]
 8022172:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022176:	2800      	cmp	r0, #0
 8022178:	f000 80c0 	beq.w	80222fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802217c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022180:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022184:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022186:	b151      	cbz	r1, 802219e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022188:	eb0a 0203 	add.w	r2, sl, r3
 802218c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022190:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022194:	9309      	str	r3, [sp, #36]	@ 0x24
 8022196:	7853      	ldrb	r3, [r2, #1]
 8022198:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802219c:	930c      	str	r3, [sp, #48]	@ 0x30
 802219e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80221a0:	fb10 f201 	smulbb	r2, r0, r1
 80221a4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80221a6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80221aa:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80221ae:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80221b2:	10d2      	asrs	r2, r2, #3
 80221b4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80221b8:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80221bc:	ea4c 0c03 	orr.w	ip, ip, r3
 80221c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80221c2:	041b      	lsls	r3, r3, #16
 80221c4:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80221c8:	432b      	orrs	r3, r5
 80221ca:	4353      	muls	r3, r2
 80221cc:	fb0a 330c 	mla	r3, sl, ip, r3
 80221d0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80221d4:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80221d8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80221dc:	ea4c 0e0e 	orr.w	lr, ip, lr
 80221e0:	f1c1 0c10 	rsb	ip, r1, #16
 80221e4:	ebac 0c00 	sub.w	ip, ip, r0
 80221e8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80221ec:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80221f0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80221f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80221f6:	0418      	lsls	r0, r3, #16
 80221f8:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80221fc:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8022200:	4318      	orrs	r0, r3
 8022202:	fb02 c200 	mla	r2, r2, r0, ip
 8022206:	0d53      	lsrs	r3, r2, #21
 8022208:	0952      	lsrs	r2, r2, #5
 802220a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802220e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8022212:	431a      	orrs	r2, r3
 8022214:	f8a8 2000 	strh.w	r2, [r8]
 8022218:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802221a:	f108 0802 	add.w	r8, r8, #2
 802221e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022222:	441c      	add	r4, r3
 8022224:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022226:	441e      	add	r6, r3
 8022228:	e77c      	b.n	8022124 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802222a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802222c:	f109 0902 	add.w	r9, r9, #2
 8022230:	441c      	add	r4, r3
 8022232:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022234:	441e      	add	r6, r3
 8022236:	9b06      	ldr	r3, [sp, #24]
 8022238:	3b01      	subs	r3, #1
 802223a:	9306      	str	r3, [sp, #24]
 802223c:	e752      	b.n	80220e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802223e:	d020      	beq.n	8022282 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022240:	9b06      	ldr	r3, [sp, #24]
 8022242:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022244:	3b01      	subs	r3, #1
 8022246:	fb00 4003 	mla	r0, r0, r3, r4
 802224a:	1400      	asrs	r0, r0, #16
 802224c:	f53f af67 	bmi.w	802211e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022250:	3901      	subs	r1, #1
 8022252:	4288      	cmp	r0, r1
 8022254:	f6bf af63 	bge.w	802211e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022258:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802225a:	fb01 6303 	mla	r3, r1, r3, r6
 802225e:	141b      	asrs	r3, r3, #16
 8022260:	f53f af5d 	bmi.w	802211e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022264:	3a01      	subs	r2, #1
 8022266:	4293      	cmp	r3, r2
 8022268:	f6bf af59 	bge.w	802211e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802226c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022270:	46ca      	mov	sl, r9
 8022272:	f1b8 0f00 	cmp.w	r8, #0
 8022276:	dc67      	bgt.n	8022348 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8022278:	9b06      	ldr	r3, [sp, #24]
 802227a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802227e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022282:	9b08      	ldr	r3, [sp, #32]
 8022284:	2b00      	cmp	r3, #0
 8022286:	f340 80d7 	ble.w	8022438 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802228a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802228e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022290:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022294:	eeb0 6a62 	vmov.f32	s12, s5
 8022298:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802229c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80222a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80222a4:	ee16 4a10 	vmov	r4, s12
 80222a8:	eeb0 6a43 	vmov.f32	s12, s6
 80222ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80222b0:	ee16 6a10 	vmov	r6, s12
 80222b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80222b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80222bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80222c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80222c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80222c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80222cc:	ee12 2a90 	vmov	r2, s5
 80222d0:	eef0 2a47 	vmov.f32	s5, s14
 80222d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80222d8:	ee13 2a10 	vmov	r2, s6
 80222dc:	931f      	str	r3, [sp, #124]	@ 0x7c
 80222de:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80222e0:	eeb0 3a67 	vmov.f32	s6, s15
 80222e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80222e8:	9320      	str	r3, [sp, #128]	@ 0x80
 80222ea:	9b08      	ldr	r3, [sp, #32]
 80222ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80222ee:	3b01      	subs	r3, #1
 80222f0:	9308      	str	r3, [sp, #32]
 80222f2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80222f4:	bf08      	it	eq
 80222f6:	4613      	moveq	r3, r2
 80222f8:	9306      	str	r3, [sp, #24]
 80222fa:	e6e4      	b.n	80220c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80222fc:	2900      	cmp	r1, #0
 80222fe:	f43f af4e 	beq.w	802219e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022302:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022306:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802230a:	9309      	str	r3, [sp, #36]	@ 0x24
 802230c:	e747      	b.n	802219e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802230e:	f112 0a01 	adds.w	sl, r2, #1
 8022312:	d481      	bmi.n	8022218 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022314:	4553      	cmp	r3, sl
 8022316:	f6ff af7f 	blt.w	8022218 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802231a:	f11c 0a01 	adds.w	sl, ip, #1
 802231e:	f53f af7b 	bmi.w	8022218 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022322:	45d6      	cmp	lr, sl
 8022324:	f6ff af78 	blt.w	8022218 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022328:	b21b      	sxth	r3, r3
 802232a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802232e:	fa0f f28e 	sxth.w	r2, lr
 8022332:	9300      	str	r3, [sp, #0]
 8022334:	463b      	mov	r3, r7
 8022336:	9201      	str	r2, [sp, #4]
 8022338:	9a07      	ldr	r2, [sp, #28]
 802233a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802233e:	4641      	mov	r1, r8
 8022340:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022342:	f7ff fe21 	bl	8021f88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022346:	e767      	b.n	8022218 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022348:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802234a:	1422      	asrs	r2, r4, #16
 802234c:	1431      	asrs	r1, r6, #16
 802234e:	9d07      	ldr	r5, [sp, #28]
 8022350:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022354:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8022358:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802235c:	fb03 2101 	mla	r1, r3, r1, r2
 8022360:	9a07      	ldr	r2, [sp, #28]
 8022362:	440a      	add	r2, r1
 8022364:	5c69      	ldrb	r1, [r5, r1]
 8022366:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 802236a:	f1be 0f00 	cmp.w	lr, #0
 802236e:	d05c      	beq.n	802242a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8022370:	f892 c001 	ldrb.w	ip, [r2, #1]
 8022374:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8022378:	950d      	str	r5, [sp, #52]	@ 0x34
 802237a:	b150      	cbz	r0, 8022392 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802237c:	eb02 0c03 	add.w	ip, r2, r3
 8022380:	5cd3      	ldrb	r3, [r2, r3]
 8022382:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022386:	930a      	str	r3, [sp, #40]	@ 0x28
 8022388:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802238c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022390:	930e      	str	r3, [sp, #56]	@ 0x38
 8022392:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022394:	fb1e f200 	smulbb	r2, lr, r0
 8022398:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802239a:	f108 38ff 	add.w	r8, r8, #4294967295
 802239e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80223a2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80223a6:	10d2      	asrs	r2, r2, #3
 80223a8:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 80223ac:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80223b0:	ea4c 0c03 	orr.w	ip, ip, r3
 80223b4:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80223b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80223ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80223bc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80223be:	041b      	lsls	r3, r3, #16
 80223c0:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80223c4:	ea43 030b 	orr.w	r3, r3, fp
 80223c8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80223cc:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80223d0:	4353      	muls	r3, r2
 80223d2:	fb05 3c0c 	mla	ip, r5, ip, r3
 80223d6:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80223da:	ea43 0b01 	orr.w	fp, r3, r1
 80223de:	f1c0 0110 	rsb	r1, r0, #16
 80223e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80223e4:	eba1 0e0e 	sub.w	lr, r1, lr
 80223e8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80223ec:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80223f0:	fb0e cc0b 	mla	ip, lr, fp, ip
 80223f4:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80223f8:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80223fc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8022400:	ea4b 0e0e 	orr.w	lr, fp, lr
 8022404:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022408:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802240c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022410:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022414:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8022418:	ea43 0c0c 	orr.w	ip, r3, ip
 802241c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802241e:	441c      	add	r4, r3
 8022420:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022422:	f82a cb02 	strh.w	ip, [sl], #2
 8022426:	441e      	add	r6, r3
 8022428:	e723      	b.n	8022272 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 802242a:	2800      	cmp	r0, #0
 802242c:	d0b1      	beq.n	8022392 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802242e:	5cd3      	ldrb	r3, [r2, r3]
 8022430:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022434:	930a      	str	r3, [sp, #40]	@ 0x28
 8022436:	e7ac      	b.n	8022392 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022438:	b013      	add	sp, #76	@ 0x4c
 802243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802243e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802243e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022442:	880d      	ldrh	r5, [r1, #0]
 8022444:	b087      	sub	sp, #28
 8022446:	10ef      	asrs	r7, r5, #3
 8022448:	9103      	str	r1, [sp, #12]
 802244a:	ea4f 2a25 	mov.w	sl, r5, asr #8
 802244e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 8022452:	00ed      	lsls	r5, r5, #3
 8022454:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8022458:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 802245c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8022460:	b2ed      	uxtb	r5, r5
 8022462:	9701      	str	r7, [sp, #4]
 8022464:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8022468:	9502      	str	r5, [sp, #8]
 802246a:	9d01      	ldr	r5, [sp, #4]
 802246c:	9902      	ldr	r1, [sp, #8]
 802246e:	022d      	lsls	r5, r5, #8
 8022470:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 8022474:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 8022478:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 802247c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8022480:	430d      	orrs	r5, r1
 8022482:	fb06 0709 	mla	r7, r6, r9, r0
 8022486:	2e00      	cmp	r6, #0
 8022488:	9505      	str	r5, [sp, #20]
 802248a:	eb02 0c07 	add.w	ip, r2, r7
 802248e:	f2c0 80b6 	blt.w	80225fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8022492:	45b3      	cmp	fp, r6
 8022494:	f340 80b3 	ble.w	80225fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8022498:	2800      	cmp	r0, #0
 802249a:	f2c0 80ae 	blt.w	80225fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802249e:	4581      	cmp	r9, r0
 80224a0:	f340 80ab 	ble.w	80225fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80224a4:	5dd7      	ldrb	r7, [r2, r7]
 80224a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80224aa:	441f      	add	r7, r3
 80224ac:	1c42      	adds	r2, r0, #1
 80224ae:	f100 80a9 	bmi.w	8022604 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80224b2:	4591      	cmp	r9, r2
 80224b4:	f340 80a6 	ble.w	8022604 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80224b8:	2c00      	cmp	r4, #0
 80224ba:	f000 80a3 	beq.w	8022604 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80224be:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80224c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80224c6:	441d      	add	r5, r3
 80224c8:	3601      	adds	r6, #1
 80224ca:	f100 809f 	bmi.w	802260c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80224ce:	45b3      	cmp	fp, r6
 80224d0:	f340 809c 	ble.w	802260c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80224d4:	f1be 0f00 	cmp.w	lr, #0
 80224d8:	f000 8098 	beq.w	802260c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80224dc:	2800      	cmp	r0, #0
 80224de:	f2c0 8093 	blt.w	8022608 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80224e2:	4581      	cmp	r9, r0
 80224e4:	f340 8090 	ble.w	8022608 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 80224e8:	f81c 6009 	ldrb.w	r6, [ip, r9]
 80224ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80224f0:	441e      	add	r6, r3
 80224f2:	3001      	adds	r0, #1
 80224f4:	f100 808d 	bmi.w	8022612 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80224f8:	4581      	cmp	r9, r0
 80224fa:	f340 808a 	ble.w	8022612 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80224fe:	2c00      	cmp	r4, #0
 8022500:	f000 8087 	beq.w	8022612 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022504:	44e1      	add	r9, ip
 8022506:	f899 2001 	ldrb.w	r2, [r9, #1]
 802250a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802250e:	4413      	add	r3, r2
 8022510:	b2a4      	uxth	r4, r4
 8022512:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022516:	fa1f fe8e 	uxth.w	lr, lr
 802251a:	9901      	ldr	r1, [sp, #4]
 802251c:	fb04 fb0e 	mul.w	fp, r4, lr
 8022520:	0124      	lsls	r4, r4, #4
 8022522:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8022526:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 802252a:	eba4 040b 	sub.w	r4, r4, fp
 802252e:	fa1f f08e 	uxth.w	r0, lr
 8022532:	b2a2      	uxth	r2, r4
 8022534:	78ac      	ldrb	r4, [r5, #2]
 8022536:	eba9 0900 	sub.w	r9, r9, r0
 802253a:	fa1f fe88 	uxth.w	lr, r8
 802253e:	4354      	muls	r4, r2
 8022540:	ea6f 0808 	mvn.w	r8, r8
 8022544:	fa1f f989 	uxth.w	r9, r9
 8022548:	fa5f f888 	uxtb.w	r8, r8
 802254c:	fb09 440c 	mla	r4, r9, ip, r4
 8022550:	f896 c002 	ldrb.w	ip, [r6, #2]
 8022554:	fb1a fa08 	smulbb	sl, sl, r8
 8022558:	fb00 440c 	mla	r4, r0, ip, r4
 802255c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8022560:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8022564:	787c      	ldrb	r4, [r7, #1]
 8022566:	783f      	ldrb	r7, [r7, #0]
 8022568:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802256c:	fb0c ac0e 	mla	ip, ip, lr, sl
 8022570:	f895 a001 	ldrb.w	sl, [r5, #1]
 8022574:	782d      	ldrb	r5, [r5, #0]
 8022576:	fb02 fa0a 	mul.w	sl, r2, sl
 802257a:	fa1f fc8c 	uxth.w	ip, ip
 802257e:	436a      	muls	r2, r5
 8022580:	7835      	ldrb	r5, [r6, #0]
 8022582:	fb09 aa04 	mla	sl, r9, r4, sl
 8022586:	7874      	ldrb	r4, [r6, #1]
 8022588:	fb09 2207 	mla	r2, r9, r7, r2
 802258c:	fb00 aa04 	mla	sl, r0, r4, sl
 8022590:	785c      	ldrb	r4, [r3, #1]
 8022592:	fb00 2005 	mla	r0, r0, r5, r2
 8022596:	781b      	ldrb	r3, [r3, #0]
 8022598:	fb0b a404 	mla	r4, fp, r4, sl
 802259c:	fb11 fa08 	smulbb	sl, r1, r8
 80225a0:	fb0b 0b03 	mla	fp, fp, r3, r0
 80225a4:	9b02      	ldr	r3, [sp, #8]
 80225a6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80225aa:	fb13 f808 	smulbb	r8, r3, r8
 80225ae:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80225b2:	fb04 a40e 	mla	r4, r4, lr, sl
 80225b6:	f10c 0301 	add.w	r3, ip, #1
 80225ba:	fb0b 8e0e 	mla	lr, fp, lr, r8
 80225be:	b2a4      	uxth	r4, r4
 80225c0:	fa1f fe8e 	uxth.w	lr, lr
 80225c4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80225c8:	f104 0a01 	add.w	sl, r4, #1
 80225cc:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 80225d0:	f10e 0c01 	add.w	ip, lr, #1
 80225d4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80225d8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80225dc:	0964      	lsrs	r4, r4, #5
 80225de:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80225e2:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80225e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80225ea:	9b03      	ldr	r3, [sp, #12]
 80225ec:	ea4c 0c04 	orr.w	ip, ip, r4
 80225f0:	f8a3 c000 	strh.w	ip, [r3]
 80225f4:	b007      	add	sp, #28
 80225f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225fa:	af05      	add	r7, sp, #20
 80225fc:	e756      	b.n	80224ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 80225fe:	ad05      	add	r5, sp, #20
 8022600:	462f      	mov	r7, r5
 8022602:	e761      	b.n	80224c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022604:	ad05      	add	r5, sp, #20
 8022606:	e75f      	b.n	80224c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022608:	ae05      	add	r6, sp, #20
 802260a:	e772      	b.n	80224f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802260c:	ab05      	add	r3, sp, #20
 802260e:	461e      	mov	r6, r3
 8022610:	e77e      	b.n	8022510 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8022612:	ab05      	add	r3, sp, #20
 8022614:	e77c      	b.n	8022510 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08022616 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802261a:	b095      	sub	sp, #84	@ 0x54
 802261c:	9212      	str	r2, [sp, #72]	@ 0x48
 802261e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022620:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8022622:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8022626:	9013      	str	r0, [sp, #76]	@ 0x4c
 8022628:	930f      	str	r3, [sp, #60]	@ 0x3c
 802262a:	6850      	ldr	r0, [r2, #4]
 802262c:	910e      	str	r1, [sp, #56]	@ 0x38
 802262e:	6812      	ldr	r2, [r2, #0]
 8022630:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 8022634:	fb00 1303 	mla	r3, r0, r3, r1
 8022638:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802263c:	930a      	str	r3, [sp, #40]	@ 0x28
 802263e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022640:	681b      	ldr	r3, [r3, #0]
 8022642:	930d      	str	r3, [sp, #52]	@ 0x34
 8022644:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022646:	685c      	ldr	r4, [r3, #4]
 8022648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802264a:	3404      	adds	r4, #4
 802264c:	43db      	mvns	r3, r3
 802264e:	b2db      	uxtb	r3, r3
 8022650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022654:	2b00      	cmp	r3, #0
 8022656:	dc03      	bgt.n	8022660 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022658:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802265a:	2b00      	cmp	r3, #0
 802265c:	f340 8255 	ble.w	8022b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8022660:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022662:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022666:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802266a:	1e48      	subs	r0, r1, #1
 802266c:	1e55      	subs	r5, r2, #1
 802266e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022670:	2b00      	cmp	r3, #0
 8022672:	f340 80f9 	ble.w	8022868 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8022676:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8022678:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802267a:	1436      	asrs	r6, r6, #16
 802267c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8022680:	d406      	bmi.n	8022690 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022682:	4286      	cmp	r6, r0
 8022684:	da04      	bge.n	8022690 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022686:	2b00      	cmp	r3, #0
 8022688:	db02      	blt.n	8022690 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802268a:	42ab      	cmp	r3, r5
 802268c:	f2c0 80ed 	blt.w	802286a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022690:	3601      	adds	r6, #1
 8022692:	f100 80da 	bmi.w	802284a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022696:	42b1      	cmp	r1, r6
 8022698:	f2c0 80d7 	blt.w	802284a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802269c:	3301      	adds	r3, #1
 802269e:	f100 80d4 	bmi.w	802284a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80226a2:	429a      	cmp	r2, r3
 80226a4:	f2c0 80d1 	blt.w	802284a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80226a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80226aa:	9311      	str	r3, [sp, #68]	@ 0x44
 80226ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80226b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	f340 80fa 	ble.w	80228ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80226b8:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80226ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80226bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80226be:	68c6      	ldr	r6, [r0, #12]
 80226c0:	141d      	asrs	r5, r3, #16
 80226c2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80226c4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80226c8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80226ca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80226cc:	1400      	asrs	r0, r0, #16
 80226ce:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80226d2:	6892      	ldr	r2, [r2, #8]
 80226d4:	f100 813e 	bmi.w	8022954 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80226d8:	1e57      	subs	r7, r2, #1
 80226da:	42b8      	cmp	r0, r7
 80226dc:	f280 813a 	bge.w	8022954 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80226e0:	2d00      	cmp	r5, #0
 80226e2:	f2c0 8137 	blt.w	8022954 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80226e6:	1e77      	subs	r7, r6, #1
 80226e8:	42bd      	cmp	r5, r7
 80226ea:	f280 8133 	bge.w	8022954 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80226ee:	b212      	sxth	r2, r2
 80226f0:	fb05 0002 	mla	r0, r5, r2, r0
 80226f4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80226f6:	f815 a000 	ldrb.w	sl, [r5, r0]
 80226fa:	182e      	adds	r6, r5, r0
 80226fc:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8022700:	eb04 050a 	add.w	r5, r4, sl
 8022704:	2b00      	cmp	r3, #0
 8022706:	f000 8117 	beq.w	8022938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802270a:	f896 c001 	ldrb.w	ip, [r6, #1]
 802270e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022712:	44a4      	add	ip, r4
 8022714:	2900      	cmp	r1, #0
 8022716:	f000 8117 	beq.w	8022948 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802271a:	18b0      	adds	r0, r6, r2
 802271c:	5cb2      	ldrb	r2, [r6, r2]
 802271e:	7840      	ldrb	r0, [r0, #1]
 8022720:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022724:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022728:	4422      	add	r2, r4
 802272a:	4420      	add	r0, r4
 802272c:	b29b      	uxth	r3, r3
 802272e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8022732:	b289      	uxth	r1, r1
 8022734:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022738:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802273a:	fb03 f901 	mul.w	r9, r3, r1
 802273e:	011b      	lsls	r3, r3, #4
 8022740:	f8b6 e000 	ldrh.w	lr, [r6]
 8022744:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022748:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 802274c:	eba3 0309 	sub.w	r3, r3, r9
 8022750:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8022754:	b289      	uxth	r1, r1
 8022756:	f814 a00a 	ldrb.w	sl, [r4, sl]
 802275a:	b29b      	uxth	r3, r3
 802275c:	eba8 0801 	sub.w	r8, r8, r1
 8022760:	435f      	muls	r7, r3
 8022762:	fa1f f888 	uxth.w	r8, r8
 8022766:	9310      	str	r3, [sp, #64]	@ 0x40
 8022768:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802276a:	fb08 770b 	mla	r7, r8, fp, r7
 802276e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022772:	fb01 770b 	mla	r7, r1, fp, r7
 8022776:	f890 b002 	ldrb.w	fp, [r0, #2]
 802277a:	fb09 770b 	mla	r7, r9, fp, r7
 802277e:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8022782:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8022786:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802278a:	fb1b fb03 	smulbb	fp, fp, r3
 802278e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022790:	fb07 b706 	mla	r7, r7, r6, fp
 8022794:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022798:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802279c:	f89c c000 	ldrb.w	ip, [ip]
 80227a0:	b2bf      	uxth	r7, r7
 80227a2:	435d      	muls	r5, r3
 80227a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80227a6:	fb08 550b 	mla	r5, r8, fp, r5
 80227aa:	f892 b001 	ldrb.w	fp, [r2, #1]
 80227ae:	fb01 550b 	mla	r5, r1, fp, r5
 80227b2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80227b6:	fb09 550b 	mla	r5, r9, fp, r5
 80227ba:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80227be:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80227c2:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80227c6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80227ca:	fa5f fe8e 	uxtb.w	lr, lr
 80227ce:	fb1b fb03 	smulbb	fp, fp, r3
 80227d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80227d4:	fb03 f30c 	mul.w	r3, r3, ip
 80227d8:	f892 c000 	ldrb.w	ip, [r2]
 80227dc:	fb05 b506 	mla	r5, r5, r6, fp
 80227e0:	fb08 330a 	mla	r3, r8, sl, r3
 80227e4:	b2ad      	uxth	r5, r5
 80227e6:	fb01 330c 	mla	r3, r1, ip, r3
 80227ea:	f890 c000 	ldrb.w	ip, [r0]
 80227ee:	f105 0b01 	add.w	fp, r5, #1
 80227f2:	fb09 3c0c 	mla	ip, r9, ip, r3
 80227f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80227f8:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80227fc:	fb1e fe03 	smulbb	lr, lr, r3
 8022800:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022804:	1c7b      	adds	r3, r7, #1
 8022806:	096d      	lsrs	r5, r5, #5
 8022808:	fb0c e606 	mla	r6, ip, r6, lr
 802280c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8022810:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022814:	b2b6      	uxth	r6, r6
 8022816:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 802281a:	1c77      	adds	r7, r6, #1
 802281c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022820:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022824:	431f      	orrs	r7, r3
 8022826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022828:	433d      	orrs	r5, r7
 802282a:	801d      	strh	r5, [r3, #0]
 802282c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802282e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022830:	3302      	adds	r3, #2
 8022832:	930c      	str	r3, [sp, #48]	@ 0x30
 8022834:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022836:	4413      	add	r3, r2
 8022838:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802283a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802283c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802283e:	4413      	add	r3, r2
 8022840:	9320      	str	r3, [sp, #128]	@ 0x80
 8022842:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022844:	3b01      	subs	r3, #1
 8022846:	9311      	str	r3, [sp, #68]	@ 0x44
 8022848:	e732      	b.n	80226b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802284a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802284c:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 802284e:	4433      	add	r3, r6
 8022850:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8022852:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022854:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022856:	4433      	add	r3, r6
 8022858:	9320      	str	r3, [sp, #128]	@ 0x80
 802285a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802285c:	3b01      	subs	r3, #1
 802285e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022862:	3302      	adds	r3, #2
 8022864:	930a      	str	r3, [sp, #40]	@ 0x28
 8022866:	e702      	b.n	802266e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022868:	d027      	beq.n	80228ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802286a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802286c:	9821      	ldr	r0, [sp, #132]	@ 0x84
 802286e:	3b01      	subs	r3, #1
 8022870:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8022872:	fb00 5003 	mla	r0, r0, r3, r5
 8022876:	1400      	asrs	r0, r0, #16
 8022878:	f53f af16 	bmi.w	80226a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802287c:	3901      	subs	r1, #1
 802287e:	4288      	cmp	r0, r1
 8022880:	f6bf af12 	bge.w	80226a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022884:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8022886:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8022888:	fb01 0303 	mla	r3, r1, r3, r0
 802288c:	141b      	asrs	r3, r3, #16
 802288e:	f53f af0b 	bmi.w	80226a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022892:	3a01      	subs	r2, #1
 8022894:	4293      	cmp	r3, r2
 8022896:	f6bf af07 	bge.w	80226a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802289a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802289c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 80228a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80228a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80228a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80228a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	dc70      	bgt.n	802298e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80228ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80228b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80228b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80228b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80228ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80228bc:	2b00      	cmp	r3, #0
 80228be:	f340 8124 	ble.w	8022b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80228c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80228c6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80228c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80228cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80228d0:	eef0 6a62 	vmov.f32	s13, s5
 80228d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80228d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80228dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228e0:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 80228e4:	eef0 6a43 	vmov.f32	s13, s6
 80228e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228ec:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 80228f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80228f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80228f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80228fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022900:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022904:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022908:	ee12 2a90 	vmov	r2, s5
 802290c:	eef0 2a47 	vmov.f32	s5, s14
 8022910:	fb92 f3f3 	sdiv	r3, r2, r3
 8022914:	ee13 2a10 	vmov	r2, s6
 8022918:	9321      	str	r3, [sp, #132]	@ 0x84
 802291a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802291c:	eeb0 3a67 	vmov.f32	s6, s15
 8022920:	fb92 f3f3 	sdiv	r3, r2, r3
 8022924:	9322      	str	r3, [sp, #136]	@ 0x88
 8022926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022928:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802292a:	3b01      	subs	r3, #1
 802292c:	930e      	str	r3, [sp, #56]	@ 0x38
 802292e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022930:	bf08      	it	eq
 8022932:	4613      	moveq	r3, r2
 8022934:	9309      	str	r3, [sp, #36]	@ 0x24
 8022936:	e68c      	b.n	8022652 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022938:	b149      	cbz	r1, 802294e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 802293a:	5cb2      	ldrb	r2, [r6, r2]
 802293c:	4628      	mov	r0, r5
 802293e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022942:	4422      	add	r2, r4
 8022944:	46ac      	mov	ip, r5
 8022946:	e6f1      	b.n	802272c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022948:	4628      	mov	r0, r5
 802294a:	462a      	mov	r2, r5
 802294c:	e6ee      	b.n	802272c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802294e:	4628      	mov	r0, r5
 8022950:	462a      	mov	r2, r5
 8022952:	e7f7      	b.n	8022944 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8022954:	1c47      	adds	r7, r0, #1
 8022956:	f53f af69 	bmi.w	802282c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802295a:	42ba      	cmp	r2, r7
 802295c:	f6ff af66 	blt.w	802282c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022960:	1c6f      	adds	r7, r5, #1
 8022962:	f53f af63 	bmi.w	802282c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022966:	42be      	cmp	r6, r7
 8022968:	f6ff af60 	blt.w	802282c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802296c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 802296e:	b236      	sxth	r6, r6
 8022970:	b212      	sxth	r2, r2
 8022972:	9002      	str	r0, [sp, #8]
 8022974:	9601      	str	r6, [sp, #4]
 8022976:	9200      	str	r2, [sp, #0]
 8022978:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802297a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 802297e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8022982:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8022986:	4623      	mov	r3, r4
 8022988:	f7ff fd59 	bl	802243e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 802298c:	e74e      	b.n	802282c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802298e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022990:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8022992:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022996:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8022998:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802299a:	1400      	asrs	r0, r0, #16
 802299c:	142d      	asrs	r5, r5, #16
 802299e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80229a0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80229a4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80229a8:	fb02 5000 	mla	r0, r2, r0, r5
 80229ac:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80229ae:	f815 9000 	ldrb.w	r9, [r5, r0]
 80229b2:	182e      	adds	r6, r5, r0
 80229b4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80229b8:	eb04 0509 	add.w	r5, r4, r9
 80229bc:	2b00      	cmp	r3, #0
 80229be:	f000 8096 	beq.w	8022aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80229c2:	7877      	ldrb	r7, [r6, #1]
 80229c4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80229c8:	4427      	add	r7, r4
 80229ca:	2900      	cmp	r1, #0
 80229cc:	f000 8097 	beq.w	8022afe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 80229d0:	18b0      	adds	r0, r6, r2
 80229d2:	5cb2      	ldrb	r2, [r6, r2]
 80229d4:	7840      	ldrb	r0, [r0, #1]
 80229d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80229da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80229de:	4422      	add	r2, r4
 80229e0:	4420      	add	r0, r4
 80229e2:	b29b      	uxth	r3, r3
 80229e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80229e6:	b289      	uxth	r1, r1
 80229e8:	f895 b002 	ldrb.w	fp, [r5, #2]
 80229ec:	f8b6 c000 	ldrh.w	ip, [r6]
 80229f0:	fb03 f801 	mul.w	r8, r3, r1
 80229f4:	011b      	lsls	r3, r3, #4
 80229f6:	78be      	ldrb	r6, [r7, #2]
 80229f8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80229fc:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022a00:	eba3 0308 	sub.w	r3, r3, r8
 8022a04:	f814 9009 	ldrb.w	r9, [r4, r9]
 8022a08:	b289      	uxth	r1, r1
 8022a0a:	b29b      	uxth	r3, r3
 8022a0c:	ebae 0e01 	sub.w	lr, lr, r1
 8022a10:	435e      	muls	r6, r3
 8022a12:	fa1f fe8e 	uxth.w	lr, lr
 8022a16:	9310      	str	r3, [sp, #64]	@ 0x40
 8022a18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022a1a:	fb0e 660b 	mla	r6, lr, fp, r6
 8022a1e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8022a22:	fb01 660b 	mla	r6, r1, fp, r6
 8022a26:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022a2a:	fb08 660b 	mla	r6, r8, fp, r6
 8022a2e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8022a32:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8022a36:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022a3a:	fb1b fb03 	smulbb	fp, fp, r3
 8022a3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022a40:	fb06 b60a 	mla	r6, r6, sl, fp
 8022a44:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022a48:	787d      	ldrb	r5, [r7, #1]
 8022a4a:	783f      	ldrb	r7, [r7, #0]
 8022a4c:	b2b6      	uxth	r6, r6
 8022a4e:	435d      	muls	r5, r3
 8022a50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022a52:	fb0e 550b 	mla	r5, lr, fp, r5
 8022a56:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022a5a:	fb01 550b 	mla	r5, r1, fp, r5
 8022a5e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022a62:	fb08 550b 	mla	r5, r8, fp, r5
 8022a66:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8022a6a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022a6e:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8022a72:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022a76:	fa5f fc8c 	uxtb.w	ip, ip
 8022a7a:	fb1b fb03 	smulbb	fp, fp, r3
 8022a7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022a80:	437b      	muls	r3, r7
 8022a82:	7817      	ldrb	r7, [r2, #0]
 8022a84:	fb05 b50a 	mla	r5, r5, sl, fp
 8022a88:	fb0e 3309 	mla	r3, lr, r9, r3
 8022a8c:	b2ad      	uxth	r5, r5
 8022a8e:	fb01 3307 	mla	r3, r1, r7, r3
 8022a92:	7807      	ldrb	r7, [r0, #0]
 8022a94:	f105 0b01 	add.w	fp, r5, #1
 8022a98:	fb08 3707 	mla	r7, r8, r7, r3
 8022a9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022a9e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022aa2:	fb1c fc03 	smulbb	ip, ip, r3
 8022aa6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022aaa:	1c73      	adds	r3, r6, #1
 8022aac:	096d      	lsrs	r5, r5, #5
 8022aae:	fb07 c70a 	mla	r7, r7, sl, ip
 8022ab2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8022ab6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022aba:	b2bf      	uxth	r7, r7
 8022abc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022abe:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8022ac2:	1c7a      	adds	r2, r7, #1
 8022ac4:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8022ac8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022acc:	4316      	orrs	r6, r2
 8022ace:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022ad0:	432e      	orrs	r6, r5
 8022ad2:	f823 6b02 	strh.w	r6, [r3], #2
 8022ad6:	930c      	str	r3, [sp, #48]	@ 0x30
 8022ad8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022ada:	4413      	add	r3, r2
 8022adc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022ade:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022ae0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022ae2:	4413      	add	r3, r2
 8022ae4:	9320      	str	r3, [sp, #128]	@ 0x80
 8022ae6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022ae8:	3b01      	subs	r3, #1
 8022aea:	9311      	str	r3, [sp, #68]	@ 0x44
 8022aec:	e6db      	b.n	80228a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8022aee:	b149      	cbz	r1, 8022b04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8022af0:	5cb2      	ldrb	r2, [r6, r2]
 8022af2:	4628      	mov	r0, r5
 8022af4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022af8:	4422      	add	r2, r4
 8022afa:	462f      	mov	r7, r5
 8022afc:	e771      	b.n	80229e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022afe:	4628      	mov	r0, r5
 8022b00:	462a      	mov	r2, r5
 8022b02:	e76e      	b.n	80229e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022b04:	4628      	mov	r0, r5
 8022b06:	462a      	mov	r2, r5
 8022b08:	e7f7      	b.n	8022afa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8022b0a:	b015      	add	sp, #84	@ 0x54
 8022b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022b10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8022b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b14:	880f      	ldrh	r7, [r1, #0]
 8022b16:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8022b1a:	023c      	lsls	r4, r7, #8
 8022b1c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8022b20:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8022b24:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8022b28:	017c      	lsls	r4, r7, #5
 8022b2a:	00ff      	lsls	r7, r7, #3
 8022b2c:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8022b30:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8022b34:	b2ff      	uxtb	r7, r7
 8022b36:	ea4b 0404 	orr.w	r4, fp, r4
 8022b3a:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8022b3e:	4327      	orrs	r7, r4
 8022b40:	fb05 ca0e 	mla	sl, r5, lr, ip
 8022b44:	2d00      	cmp	r5, #0
 8022b46:	9701      	str	r7, [sp, #4]
 8022b48:	eb02 080a 	add.w	r8, r2, sl
 8022b4c:	db7e      	blt.n	8022c4c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8022b4e:	45a9      	cmp	r9, r5
 8022b50:	dd7c      	ble.n	8022c4c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8022b52:	f1bc 0f00 	cmp.w	ip, #0
 8022b56:	db77      	blt.n	8022c48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022b58:	45e6      	cmp	lr, ip
 8022b5a:	dd75      	ble.n	8022c48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022b5c:	f812 700a 	ldrb.w	r7, [r2, sl]
 8022b60:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022b64:	441f      	add	r7, r3
 8022b66:	f11c 0201 	adds.w	r2, ip, #1
 8022b6a:	d472      	bmi.n	8022c52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022b6c:	4596      	cmp	lr, r2
 8022b6e:	dd70      	ble.n	8022c52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022b70:	2800      	cmp	r0, #0
 8022b72:	d06e      	beq.n	8022c52 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022b74:	f898 4001 	ldrb.w	r4, [r8, #1]
 8022b78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022b7c:	441c      	add	r4, r3
 8022b7e:	3501      	adds	r5, #1
 8022b80:	d46b      	bmi.n	8022c5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022b82:	45a9      	cmp	r9, r5
 8022b84:	dd69      	ble.n	8022c5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022b86:	2e00      	cmp	r6, #0
 8022b88:	d067      	beq.n	8022c5a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8022b8a:	f1bc 0f00 	cmp.w	ip, #0
 8022b8e:	db62      	blt.n	8022c56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8022b90:	45e6      	cmp	lr, ip
 8022b92:	dd60      	ble.n	8022c56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8022b94:	f818 500e 	ldrb.w	r5, [r8, lr]
 8022b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022b9c:	441d      	add	r5, r3
 8022b9e:	f11c 0201 	adds.w	r2, ip, #1
 8022ba2:	d45d      	bmi.n	8022c60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022ba4:	4596      	cmp	lr, r2
 8022ba6:	dd5b      	ble.n	8022c60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022ba8:	2800      	cmp	r0, #0
 8022baa:	d059      	beq.n	8022c60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8022bac:	44c6      	add	lr, r8
 8022bae:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022bb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022bb6:	4413      	add	r3, r2
 8022bb8:	b280      	uxth	r0, r0
 8022bba:	f897 e002 	ldrb.w	lr, [r7, #2]
 8022bbe:	b2b2      	uxth	r2, r6
 8022bc0:	f897 9000 	ldrb.w	r9, [r7]
 8022bc4:	787f      	ldrb	r7, [r7, #1]
 8022bc6:	fb00 f602 	mul.w	r6, r0, r2
 8022bca:	0100      	lsls	r0, r0, #4
 8022bcc:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8022bd0:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8022bd4:	1b80      	subs	r0, r0, r6
 8022bd6:	fa1f fc82 	uxth.w	ip, r2
 8022bda:	b282      	uxth	r2, r0
 8022bdc:	78a0      	ldrb	r0, [r4, #2]
 8022bde:	eba8 080c 	sub.w	r8, r8, ip
 8022be2:	4350      	muls	r0, r2
 8022be4:	fa1f f888 	uxth.w	r8, r8
 8022be8:	fb08 0e0e 	mla	lr, r8, lr, r0
 8022bec:	78a8      	ldrb	r0, [r5, #2]
 8022bee:	fb0c e000 	mla	r0, ip, r0, lr
 8022bf2:	f893 e002 	ldrb.w	lr, [r3, #2]
 8022bf6:	fb06 0e0e 	mla	lr, r6, lr, r0
 8022bfa:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 8022bfe:	f894 e000 	ldrb.w	lr, [r4]
 8022c02:	fb02 fe0e 	mul.w	lr, r2, lr
 8022c06:	fb08 e909 	mla	r9, r8, r9, lr
 8022c0a:	f895 e000 	ldrb.w	lr, [r5]
 8022c0e:	fb0c 990e 	mla	r9, ip, lr, r9
 8022c12:	f893 e000 	ldrb.w	lr, [r3]
 8022c16:	785b      	ldrb	r3, [r3, #1]
 8022c18:	fb06 9e0e 	mla	lr, r6, lr, r9
 8022c1c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022c20:	ea4e 0e00 	orr.w	lr, lr, r0
 8022c24:	7860      	ldrb	r0, [r4, #1]
 8022c26:	4350      	muls	r0, r2
 8022c28:	786a      	ldrb	r2, [r5, #1]
 8022c2a:	fb08 0007 	mla	r0, r8, r7, r0
 8022c2e:	fb0c 0202 	mla	r2, ip, r2, r0
 8022c32:	fb06 2303 	mla	r3, r6, r3, r2
 8022c36:	095b      	lsrs	r3, r3, #5
 8022c38:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022c3c:	ea4e 0303 	orr.w	r3, lr, r3
 8022c40:	800b      	strh	r3, [r1, #0]
 8022c42:	b003      	add	sp, #12
 8022c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c48:	af01      	add	r7, sp, #4
 8022c4a:	e78c      	b.n	8022b66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8022c4c:	ac01      	add	r4, sp, #4
 8022c4e:	4627      	mov	r7, r4
 8022c50:	e795      	b.n	8022b7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022c52:	ac01      	add	r4, sp, #4
 8022c54:	e793      	b.n	8022b7e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022c56:	ad01      	add	r5, sp, #4
 8022c58:	e7a1      	b.n	8022b9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8022c5a:	ab01      	add	r3, sp, #4
 8022c5c:	461d      	mov	r5, r3
 8022c5e:	e7ab      	b.n	8022bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8022c60:	ab01      	add	r3, sp, #4
 8022c62:	e7a9      	b.n	8022bb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08022c64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c68:	b08f      	sub	sp, #60	@ 0x3c
 8022c6a:	920c      	str	r2, [sp, #48]	@ 0x30
 8022c6c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8022c6e:	900d      	str	r0, [sp, #52]	@ 0x34
 8022c70:	910a      	str	r1, [sp, #40]	@ 0x28
 8022c72:	6850      	ldr	r0, [r2, #4]
 8022c74:	9306      	str	r3, [sp, #24]
 8022c76:	6812      	ldr	r2, [r2, #0]
 8022c78:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8022c7c:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 8022c80:	fb00 1303 	mla	r3, r0, r3, r1
 8022c84:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022c88:	9307      	str	r3, [sp, #28]
 8022c8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c8c:	681b      	ldr	r3, [r3, #0]
 8022c8e:	9308      	str	r3, [sp, #32]
 8022c90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c92:	685c      	ldr	r4, [r3, #4]
 8022c94:	3404      	adds	r4, #4
 8022c96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	dc03      	bgt.n	8022ca4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8022c9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022c9e:	2b00      	cmp	r3, #0
 8022ca0:	f340 81d5 	ble.w	802304e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022ca4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022ca6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022caa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022cae:	1e48      	subs	r0, r1, #1
 8022cb0:	1e56      	subs	r6, r2, #1
 8022cb2:	9b06      	ldr	r3, [sp, #24]
 8022cb4:	2b00      	cmp	r3, #0
 8022cb6:	f340 80b6 	ble.w	8022e26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022cba:	ea5f 472b 	movs.w	r7, fp, asr #16
 8022cbe:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022cc2:	d406      	bmi.n	8022cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022cc4:	4287      	cmp	r7, r0
 8022cc6:	da04      	bge.n	8022cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	db02      	blt.n	8022cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022ccc:	42b3      	cmp	r3, r6
 8022cce:	f2c0 80ab 	blt.w	8022e28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8022cd2:	3701      	adds	r7, #1
 8022cd4:	f100 809c 	bmi.w	8022e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022cd8:	42b9      	cmp	r1, r7
 8022cda:	f2c0 8099 	blt.w	8022e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022cde:	3301      	adds	r3, #1
 8022ce0:	f100 8096 	bmi.w	8022e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022ce4:	429a      	cmp	r2, r3
 8022ce6:	f2c0 8093 	blt.w	8022e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022cea:	9b06      	ldr	r3, [sp, #24]
 8022cec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022cee:	9b07      	ldr	r3, [sp, #28]
 8022cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8022cf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022cf4:	2b00      	cmp	r3, #0
 8022cf6:	f340 80b4 	ble.w	8022e62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8022cfa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8022cfc:	142e      	asrs	r6, r5, #16
 8022cfe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022d00:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022d04:	68c7      	ldr	r7, [r0, #12]
 8022d06:	ea5f 402b 	movs.w	r0, fp, asr #16
 8022d0a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022d0e:	6892      	ldr	r2, [r2, #8]
 8022d10:	f100 80fb 	bmi.w	8022f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022d14:	f102 3cff 	add.w	ip, r2, #4294967295
 8022d18:	4560      	cmp	r0, ip
 8022d1a:	f280 80f6 	bge.w	8022f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022d1e:	2e00      	cmp	r6, #0
 8022d20:	f2c0 80f3 	blt.w	8022f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8022d28:	4566      	cmp	r6, ip
 8022d2a:	f280 80ee 	bge.w	8022f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022d2e:	b212      	sxth	r2, r2
 8022d30:	fb06 0002 	mla	r0, r6, r2, r0
 8022d34:	9e08      	ldr	r6, [sp, #32]
 8022d36:	1837      	adds	r7, r6, r0
 8022d38:	5c30      	ldrb	r0, [r6, r0]
 8022d3a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8022d3e:	eb04 0c08 	add.w	ip, r4, r8
 8022d42:	2b00      	cmp	r3, #0
 8022d44:	f000 80d3 	beq.w	8022eee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022d48:	787e      	ldrb	r6, [r7, #1]
 8022d4a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022d4e:	4426      	add	r6, r4
 8022d50:	2900      	cmp	r1, #0
 8022d52:	f000 80d4 	beq.w	8022efe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022d56:	18b8      	adds	r0, r7, r2
 8022d58:	5cba      	ldrb	r2, [r7, r2]
 8022d5a:	7840      	ldrb	r0, [r0, #1]
 8022d5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022d60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022d64:	4422      	add	r2, r4
 8022d66:	4420      	add	r0, r4
 8022d68:	b29b      	uxth	r3, r3
 8022d6a:	78b7      	ldrb	r7, [r6, #2]
 8022d6c:	b289      	uxth	r1, r1
 8022d6e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022d72:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022d76:	fb03 f901 	mul.w	r9, r3, r1
 8022d7a:	011b      	lsls	r3, r3, #4
 8022d7c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022d80:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022d84:	eba3 0309 	sub.w	r3, r3, r9
 8022d88:	b289      	uxth	r1, r1
 8022d8a:	b29b      	uxth	r3, r3
 8022d8c:	ebae 0e01 	sub.w	lr, lr, r1
 8022d90:	435f      	muls	r7, r3
 8022d92:	fa1f fe8e 	uxth.w	lr, lr
 8022d96:	fb0e 770a 	mla	r7, lr, sl, r7
 8022d9a:	f892 a002 	ldrb.w	sl, [r2, #2]
 8022d9e:	fb01 770a 	mla	r7, r1, sl, r7
 8022da2:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022da6:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022daa:	f814 7008 	ldrb.w	r7, [r4, r8]
 8022dae:	f896 8000 	ldrb.w	r8, [r6]
 8022db2:	7876      	ldrb	r6, [r6, #1]
 8022db4:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8022db8:	fb03 f808 	mul.w	r8, r3, r8
 8022dbc:	4373      	muls	r3, r6
 8022dbe:	fb0e 8807 	mla	r8, lr, r7, r8
 8022dc2:	7817      	ldrb	r7, [r2, #0]
 8022dc4:	fb0e 330c 	mla	r3, lr, ip, r3
 8022dc8:	fb01 8807 	mla	r8, r1, r7, r8
 8022dcc:	7807      	ldrb	r7, [r0, #0]
 8022dce:	fb09 8707 	mla	r7, r9, r7, r8
 8022dd2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022dd6:	ea47 070a 	orr.w	r7, r7, sl
 8022dda:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022dde:	fb01 310a 	mla	r1, r1, sl, r3
 8022de2:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022de8:	fb09 1a0a 	mla	sl, r9, sl, r1
 8022dec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022df0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8022df4:	ea47 070a 	orr.w	r7, r7, sl
 8022df8:	801f      	strh	r7, [r3, #0]
 8022dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022dfc:	3302      	adds	r3, #2
 8022dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8022e00:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022e02:	449b      	add	fp, r3
 8022e04:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022e06:	441d      	add	r5, r3
 8022e08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e0a:	3b01      	subs	r3, #1
 8022e0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e0e:	e770      	b.n	8022cf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022e10:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022e12:	449b      	add	fp, r3
 8022e14:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022e16:	441d      	add	r5, r3
 8022e18:	9b06      	ldr	r3, [sp, #24]
 8022e1a:	3b01      	subs	r3, #1
 8022e1c:	9306      	str	r3, [sp, #24]
 8022e1e:	9b07      	ldr	r3, [sp, #28]
 8022e20:	3302      	adds	r3, #2
 8022e22:	9307      	str	r3, [sp, #28]
 8022e24:	e745      	b.n	8022cb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8022e26:	d023      	beq.n	8022e70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022e28:	9b06      	ldr	r3, [sp, #24]
 8022e2a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8022e2c:	3b01      	subs	r3, #1
 8022e2e:	fb00 b003 	mla	r0, r0, r3, fp
 8022e32:	1400      	asrs	r0, r0, #16
 8022e34:	f53f af59 	bmi.w	8022cea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022e38:	3901      	subs	r1, #1
 8022e3a:	4288      	cmp	r0, r1
 8022e3c:	f6bf af55 	bge.w	8022cea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022e40:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8022e42:	fb01 5303 	mla	r3, r1, r3, r5
 8022e46:	141b      	asrs	r3, r3, #16
 8022e48:	f53f af4f 	bmi.w	8022cea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022e4c:	3a01      	subs	r2, #1
 8022e4e:	4293      	cmp	r3, r2
 8022e50:	f6bf af4b 	bge.w	8022cea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022e54:	9b06      	ldr	r3, [sp, #24]
 8022e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8022e58:	9b07      	ldr	r3, [sp, #28]
 8022e5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e5e:	2b00      	cmp	r3, #0
 8022e60:	dc70      	bgt.n	8022f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022e62:	9b06      	ldr	r3, [sp, #24]
 8022e64:	9a07      	ldr	r2, [sp, #28]
 8022e66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022e6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022e6e:	9307      	str	r3, [sp, #28]
 8022e70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022e72:	2b00      	cmp	r3, #0
 8022e74:	f340 80eb 	ble.w	802304e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022e78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022e7c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022e7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e86:	eef0 6a62 	vmov.f32	s13, s5
 8022e8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022e92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e96:	ee16 ba90 	vmov	fp, s13
 8022e9a:	eef0 6a43 	vmov.f32	s13, s6
 8022e9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ea2:	ee16 5a90 	vmov	r5, s13
 8022ea6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022eaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022eae:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022eb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022eb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022eba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022ebe:	ee12 2a90 	vmov	r2, s5
 8022ec2:	eef0 2a47 	vmov.f32	s5, s14
 8022ec6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022eca:	ee13 2a10 	vmov	r2, s6
 8022ece:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022ed0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022ed2:	eeb0 3a67 	vmov.f32	s6, s15
 8022ed6:	fb92 f3f3 	sdiv	r3, r2, r3
 8022eda:	931c      	str	r3, [sp, #112]	@ 0x70
 8022edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022ede:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022ee0:	3b01      	subs	r3, #1
 8022ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8022ee4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022ee6:	bf08      	it	eq
 8022ee8:	4613      	moveq	r3, r2
 8022eea:	9306      	str	r3, [sp, #24]
 8022eec:	e6d3      	b.n	8022c96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8022eee:	b149      	cbz	r1, 8022f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022ef0:	5cba      	ldrb	r2, [r7, r2]
 8022ef2:	4660      	mov	r0, ip
 8022ef4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ef8:	4422      	add	r2, r4
 8022efa:	4666      	mov	r6, ip
 8022efc:	e734      	b.n	8022d68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8022efe:	4660      	mov	r0, ip
 8022f00:	4662      	mov	r2, ip
 8022f02:	e731      	b.n	8022d68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8022f04:	4660      	mov	r0, ip
 8022f06:	4662      	mov	r2, ip
 8022f08:	e7f7      	b.n	8022efa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022f0a:	f110 0c01 	adds.w	ip, r0, #1
 8022f0e:	f53f af74 	bmi.w	8022dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022f12:	4562      	cmp	r2, ip
 8022f14:	f6ff af71 	blt.w	8022dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022f18:	f116 0c01 	adds.w	ip, r6, #1
 8022f1c:	f53f af6d 	bmi.w	8022dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022f20:	4567      	cmp	r7, ip
 8022f22:	f6ff af6a 	blt.w	8022dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022f26:	b23f      	sxth	r7, r7
 8022f28:	b212      	sxth	r2, r2
 8022f2a:	9701      	str	r7, [sp, #4]
 8022f2c:	9200      	str	r2, [sp, #0]
 8022f2e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022f32:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8022f36:	4623      	mov	r3, r4
 8022f38:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022f3a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022f3e:	f7ff fde7 	bl	8022b10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8022f42:	e75a      	b.n	8022dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022f44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022f46:	ea4f 462b 	mov.w	r6, fp, asr #16
 8022f4a:	1428      	asrs	r0, r5, #16
 8022f4c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022f50:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022f54:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022f58:	fb02 6000 	mla	r0, r2, r0, r6
 8022f5c:	9e08      	ldr	r6, [sp, #32]
 8022f5e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8022f62:	1837      	adds	r7, r6, r0
 8022f64:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022f68:	eb04 0c08 	add.w	ip, r4, r8
 8022f6c:	2b00      	cmp	r3, #0
 8022f6e:	d060      	beq.n	8023032 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8022f70:	787e      	ldrb	r6, [r7, #1]
 8022f72:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022f76:	4426      	add	r6, r4
 8022f78:	2900      	cmp	r1, #0
 8022f7a:	d062      	beq.n	8023042 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8022f7c:	18b8      	adds	r0, r7, r2
 8022f7e:	5cba      	ldrb	r2, [r7, r2]
 8022f80:	7840      	ldrb	r0, [r0, #1]
 8022f82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022f86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022f8a:	4422      	add	r2, r4
 8022f8c:	4420      	add	r0, r4
 8022f8e:	b29b      	uxth	r3, r3
 8022f90:	78b7      	ldrb	r7, [r6, #2]
 8022f92:	b289      	uxth	r1, r1
 8022f94:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022f98:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022f9c:	fb03 f901 	mul.w	r9, r3, r1
 8022fa0:	011b      	lsls	r3, r3, #4
 8022fa2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022fa6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022faa:	eba3 0309 	sub.w	r3, r3, r9
 8022fae:	b289      	uxth	r1, r1
 8022fb0:	b29b      	uxth	r3, r3
 8022fb2:	ebae 0e01 	sub.w	lr, lr, r1
 8022fb6:	435f      	muls	r7, r3
 8022fb8:	fa1f fe8e 	uxth.w	lr, lr
 8022fbc:	fb0e 770a 	mla	r7, lr, sl, r7
 8022fc0:	f892 a002 	ldrb.w	sl, [r2, #2]
 8022fc4:	fb01 770a 	mla	r7, r1, sl, r7
 8022fc8:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022fcc:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022fd0:	f814 7008 	ldrb.w	r7, [r4, r8]
 8022fd4:	f896 8000 	ldrb.w	r8, [r6]
 8022fd8:	7876      	ldrb	r6, [r6, #1]
 8022fda:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8022fde:	fb03 f808 	mul.w	r8, r3, r8
 8022fe2:	4373      	muls	r3, r6
 8022fe4:	7856      	ldrb	r6, [r2, #1]
 8022fe6:	fb0e 8807 	mla	r8, lr, r7, r8
 8022fea:	7817      	ldrb	r7, [r2, #0]
 8022fec:	fb0e 330c 	mla	r3, lr, ip, r3
 8022ff0:	fb01 8807 	mla	r8, r1, r7, r8
 8022ff4:	7807      	ldrb	r7, [r0, #0]
 8022ff6:	fb01 3306 	mla	r3, r1, r6, r3
 8022ffa:	fb09 8707 	mla	r7, r9, r7, r8
 8022ffe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023002:	ea47 070a 	orr.w	r7, r7, sl
 8023006:	f890 a001 	ldrb.w	sl, [r0, #1]
 802300a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802300e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023010:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023014:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8023018:	ea47 070a 	orr.w	r7, r7, sl
 802301c:	f823 7b02 	strh.w	r7, [r3], #2
 8023020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023022:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023024:	449b      	add	fp, r3
 8023026:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023028:	441d      	add	r5, r3
 802302a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802302c:	3b01      	subs	r3, #1
 802302e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023030:	e714      	b.n	8022e5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8023032:	b149      	cbz	r1, 8023048 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8023034:	5cba      	ldrb	r2, [r7, r2]
 8023036:	4660      	mov	r0, ip
 8023038:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802303c:	4422      	add	r2, r4
 802303e:	4666      	mov	r6, ip
 8023040:	e7a5      	b.n	8022f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8023042:	4660      	mov	r0, ip
 8023044:	4662      	mov	r2, ip
 8023046:	e7a2      	b.n	8022f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8023048:	4660      	mov	r0, ip
 802304a:	4662      	mov	r2, ip
 802304c:	e7f7      	b.n	802303e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 802304e:	b00f      	add	sp, #60	@ 0x3c
 8023050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023054 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8023054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023058:	b085      	sub	sp, #20
 802305a:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 802305e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8023062:	9102      	str	r1, [sp, #8]
 8023064:	2c00      	cmp	r4, #0
 8023066:	fb04 710c 	mla	r1, r4, ip, r7
 802306a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802306e:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 8023072:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8023076:	eb02 0e01 	add.w	lr, r2, r1
 802307a:	f2c0 8122 	blt.w	80232c2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802307e:	45a0      	cmp	r8, r4
 8023080:	f340 811f 	ble.w	80232c2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8023084:	2f00      	cmp	r7, #0
 8023086:	f2c0 811a 	blt.w	80232be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802308a:	45bc      	cmp	ip, r7
 802308c:	f340 8117 	ble.w	80232be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8023090:	5c52      	ldrb	r2, [r2, r1]
 8023092:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8023096:	1c7a      	adds	r2, r7, #1
 8023098:	f100 8116 	bmi.w	80232c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802309c:	4594      	cmp	ip, r2
 802309e:	f340 8113 	ble.w	80232c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80230a2:	2e00      	cmp	r6, #0
 80230a4:	f000 8112 	beq.w	80232cc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80230a8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80230ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80230b0:	3401      	adds	r4, #1
 80230b2:	f100 810f 	bmi.w	80232d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80230b6:	45a0      	cmp	r8, r4
 80230b8:	f340 810c 	ble.w	80232d4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80230bc:	2800      	cmp	r0, #0
 80230be:	f000 810c 	beq.w	80232da <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80230c2:	2f00      	cmp	r7, #0
 80230c4:	f2c0 8104 	blt.w	80232d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80230c8:	45bc      	cmp	ip, r7
 80230ca:	f340 8101 	ble.w	80232d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80230ce:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80230d2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80230d6:	3701      	adds	r7, #1
 80230d8:	f100 8102 	bmi.w	80232e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80230dc:	45bc      	cmp	ip, r7
 80230de:	f340 80ff 	ble.w	80232e0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80230e2:	2e00      	cmp	r6, #0
 80230e4:	f000 80fe 	beq.w	80232e4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 80230e8:	44f4      	add	ip, lr
 80230ea:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80230ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80230f2:	b2b6      	uxth	r6, r6
 80230f4:	b280      	uxth	r0, r0
 80230f6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80230fa:	fb00 fe06 	mul.w	lr, r0, r6
 80230fe:	0136      	lsls	r6, r6, #4
 8023100:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023104:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8023108:	eba6 070e 	sub.w	r7, r6, lr
 802310c:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8023110:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023114:	b280      	uxth	r0, r0
 8023116:	b2bf      	uxth	r7, r7
 8023118:	1a1b      	subs	r3, r3, r0
 802311a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802311e:	fb0a f607 	mul.w	r6, sl, r7
 8023122:	b29b      	uxth	r3, r3
 8023124:	fb0b 6603 	mla	r6, fp, r3, r6
 8023128:	fb00 6609 	mla	r6, r0, r9, r6
 802312c:	fb0e 6608 	mla	r6, lr, r8, r6
 8023130:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023134:	9600      	str	r6, [sp, #0]
 8023136:	2e00      	cmp	r6, #0
 8023138:	f000 80be 	beq.w	80232b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802313c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8023140:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8023144:	9e02      	ldr	r6, [sp, #8]
 8023146:	fb0b fc0c 	mul.w	ip, fp, ip
 802314a:	fb0b f505 	mul.w	r5, fp, r5
 802314e:	8836      	ldrh	r6, [r6, #0]
 8023150:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8023154:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023158:	9501      	str	r5, [sp, #4]
 802315a:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802315e:	44dc      	add	ip, fp
 8023160:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023164:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8023168:	9503      	str	r5, [sp, #12]
 802316a:	9d01      	ldr	r5, [sp, #4]
 802316c:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8023170:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023174:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8023178:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802317c:	fb0a fc0c 	mul.w	ip, sl, ip
 8023180:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023184:	fb0a fa01 	mul.w	sl, sl, r1
 8023188:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802318c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023190:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8023194:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023198:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802319c:	4465      	add	r5, ip
 802319e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80231a2:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80231a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231aa:	fb09 fc0c 	mul.w	ip, r9, ip
 80231ae:	0a2d      	lsrs	r5, r5, #8
 80231b0:	fb09 f904 	mul.w	r9, r9, r4
 80231b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80231b8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80231bc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80231c0:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 80231c4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80231c8:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80231cc:	437d      	muls	r5, r7
 80231ce:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80231d2:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 80231d6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80231da:	4461      	add	r1, ip
 80231dc:	fb08 f404 	mul.w	r4, r8, r4
 80231e0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80231e4:	fb08 f802 	mul.w	r8, r8, r2
 80231e8:	0a09      	lsrs	r1, r1, #8
 80231ea:	0a22      	lsrs	r2, r4, #8
 80231ec:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80231f0:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80231f4:	fb07 f70a 	mul.w	r7, r7, sl
 80231f8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80231fc:	4414      	add	r4, r2
 80231fe:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8023202:	0a24      	lsrs	r4, r4, #8
 8023204:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023208:	9a03      	ldr	r2, [sp, #12]
 802320a:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802320e:	fb02 5503 	mla	r5, r2, r3, r5
 8023212:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023216:	9a00      	ldr	r2, [sp, #0]
 8023218:	fb04 540e 	mla	r4, r4, lr, r5
 802321c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8023220:	1235      	asrs	r5, r6, #8
 8023222:	fb01 4100 	mla	r1, r1, r0, r4
 8023226:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802322a:	0a09      	lsrs	r1, r1, #8
 802322c:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8023230:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8023234:	fb03 7101 	mla	r1, r3, r1, r7
 8023238:	fb0e 1e08 	mla	lr, lr, r8, r1
 802323c:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8023240:	fb00 e101 	mla	r1, r0, r1, lr
 8023244:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8023248:	b287      	uxth	r7, r0
 802324a:	0a09      	lsrs	r1, r1, #8
 802324c:	437a      	muls	r2, r7
 802324e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023252:	1c53      	adds	r3, r2, #1
 8023254:	4321      	orrs	r1, r4
 8023256:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802325a:	0c0a      	lsrs	r2, r1, #16
 802325c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8023260:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8023264:	b2c8      	uxtb	r0, r1
 8023266:	fb12 f207 	smulbb	r2, r2, r7
 802326a:	fb14 f407 	smulbb	r4, r4, r7
 802326e:	b2db      	uxtb	r3, r3
 8023270:	fb10 f007 	smulbb	r0, r0, r7
 8023274:	fb05 2503 	mla	r5, r5, r3, r2
 8023278:	10f2      	asrs	r2, r6, #3
 802327a:	00f6      	lsls	r6, r6, #3
 802327c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023280:	b2ad      	uxth	r5, r5
 8023282:	b2f6      	uxtb	r6, r6
 8023284:	fb02 4203 	mla	r2, r2, r3, r4
 8023288:	fb06 0303 	mla	r3, r6, r3, r0
 802328c:	b294      	uxth	r4, r2
 802328e:	b299      	uxth	r1, r3
 8023290:	1c6b      	adds	r3, r5, #1
 8023292:	1c62      	adds	r2, r4, #1
 8023294:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023298:	1c4b      	adds	r3, r1, #1
 802329a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802329e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80232a2:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80232a6:	0952      	lsrs	r2, r2, #5
 80232a8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80232ac:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80232b0:	432b      	orrs	r3, r5
 80232b2:	4313      	orrs	r3, r2
 80232b4:	9a02      	ldr	r2, [sp, #8]
 80232b6:	8013      	strh	r3, [r2, #0]
 80232b8:	b005      	add	sp, #20
 80232ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232be:	2500      	movs	r5, #0
 80232c0:	e6e9      	b.n	8023096 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80232c2:	2100      	movs	r1, #0
 80232c4:	460d      	mov	r5, r1
 80232c6:	e6f3      	b.n	80230b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80232c8:	2100      	movs	r1, #0
 80232ca:	e6f1      	b.n	80230b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80232cc:	4631      	mov	r1, r6
 80232ce:	e6ef      	b.n	80230b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80232d0:	2400      	movs	r4, #0
 80232d2:	e700      	b.n	80230d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80232d4:	2200      	movs	r2, #0
 80232d6:	4614      	mov	r4, r2
 80232d8:	e70b      	b.n	80230f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80232da:	4602      	mov	r2, r0
 80232dc:	4604      	mov	r4, r0
 80232de:	e708      	b.n	80230f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80232e0:	2200      	movs	r2, #0
 80232e2:	e706      	b.n	80230f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80232e4:	4632      	mov	r2, r6
 80232e6:	e704      	b.n	80230f2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

080232e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80232e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232ec:	b09f      	sub	sp, #124	@ 0x7c
 80232ee:	921b      	str	r2, [sp, #108]	@ 0x6c
 80232f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80232f2:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80232f4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80232f8:	901d      	str	r0, [sp, #116]	@ 0x74
 80232fa:	931c      	str	r3, [sp, #112]	@ 0x70
 80232fc:	6850      	ldr	r0, [r2, #4]
 80232fe:	9119      	str	r1, [sp, #100]	@ 0x64
 8023300:	6812      	ldr	r2, [r2, #0]
 8023302:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8023304:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8023308:	fb00 1303 	mla	r3, r0, r3, r1
 802330c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023310:	930c      	str	r3, [sp, #48]	@ 0x30
 8023312:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023314:	681b      	ldr	r3, [r3, #0]
 8023316:	9312      	str	r3, [sp, #72]	@ 0x48
 8023318:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802331a:	685e      	ldr	r6, [r3, #4]
 802331c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8023320:	3604      	adds	r6, #4
 8023322:	930d      	str	r3, [sp, #52]	@ 0x34
 8023324:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023326:	2b00      	cmp	r3, #0
 8023328:	dc03      	bgt.n	8023332 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802332a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802332c:	2b00      	cmp	r3, #0
 802332e:	f340 8387 	ble.w	8023a40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8023332:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023334:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023338:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802333c:	1e48      	subs	r0, r1, #1
 802333e:	1e57      	subs	r7, r2, #1
 8023340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023342:	2b00      	cmp	r3, #0
 8023344:	f340 8194 	ble.w	8023670 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023348:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802334a:	142b      	asrs	r3, r5, #16
 802334c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023350:	d406      	bmi.n	8023360 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023352:	4584      	cmp	ip, r0
 8023354:	da04      	bge.n	8023360 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023356:	2b00      	cmp	r3, #0
 8023358:	db02      	blt.n	8023360 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802335a:	42bb      	cmp	r3, r7
 802335c:	f2c0 8189 	blt.w	8023672 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023360:	f11c 0c01 	adds.w	ip, ip, #1
 8023364:	f100 8177 	bmi.w	8023656 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023368:	4561      	cmp	r1, ip
 802336a:	f2c0 8174 	blt.w	8023656 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802336e:	3301      	adds	r3, #1
 8023370:	f100 8171 	bmi.w	8023656 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023374:	429a      	cmp	r2, r3
 8023376:	f2c0 816e 	blt.w	8023656 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802337a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802337c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802337e:	931a      	str	r3, [sp, #104]	@ 0x68
 8023380:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8023382:	2b00      	cmp	r3, #0
 8023384:	f340 8193 	ble.w	80236ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023388:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802338a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802338e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023392:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023396:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8023398:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802339c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802339e:	141b      	asrs	r3, r3, #16
 80233a0:	f100 81d6 	bmi.w	8023750 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80233a4:	f100 38ff 	add.w	r8, r0, #4294967295
 80233a8:	4543      	cmp	r3, r8
 80233aa:	f280 81d1 	bge.w	8023750 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80233ae:	f1bc 0f00 	cmp.w	ip, #0
 80233b2:	f2c0 81cd 	blt.w	8023750 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80233b6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80233ba:	45c4      	cmp	ip, r8
 80233bc:	f280 81c8 	bge.w	8023750 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80233c0:	b200      	sxth	r0, r0
 80233c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80233c4:	fb0c 3300 	mla	r3, ip, r0, r3
 80233c8:	eb04 0803 	add.w	r8, r4, r3
 80233cc:	5ce3      	ldrb	r3, [r4, r3]
 80233ce:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80233d2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80233d6:	2a00      	cmp	r2, #0
 80233d8:	f000 81af 	beq.w	802373a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80233dc:	f898 c001 	ldrb.w	ip, [r8, #1]
 80233e0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80233e4:	940e      	str	r4, [sp, #56]	@ 0x38
 80233e6:	0e24      	lsrs	r4, r4, #24
 80233e8:	9415      	str	r4, [sp, #84]	@ 0x54
 80233ea:	b179      	cbz	r1, 802340c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80233ec:	eb08 0c00 	add.w	ip, r8, r0
 80233f0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80233f4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80233f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80233fa:	0e00      	lsrs	r0, r0, #24
 80233fc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80233fe:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023402:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023406:	900f      	str	r0, [sp, #60]	@ 0x3c
 8023408:	0e00      	lsrs	r0, r0, #24
 802340a:	9016      	str	r0, [sp, #88]	@ 0x58
 802340c:	b292      	uxth	r2, r2
 802340e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8023410:	b289      	uxth	r1, r1
 8023412:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023414:	fb02 f901 	mul.w	r9, r2, r1
 8023418:	0112      	lsls	r2, r2, #4
 802341a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802341e:	eba2 0809 	sub.w	r8, r2, r9
 8023422:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023426:	b289      	uxth	r1, r1
 8023428:	fa1f f888 	uxth.w	r8, r8
 802342c:	1a52      	subs	r2, r2, r1
 802342e:	fb08 f000 	mul.w	r0, r8, r0
 8023432:	b292      	uxth	r2, r2
 8023434:	fb02 000e 	mla	r0, r2, lr, r0
 8023438:	fb01 0004 	mla	r0, r1, r4, r0
 802343c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802343e:	fb09 0004 	mla	r0, r9, r4, r0
 8023442:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023446:	2800      	cmp	r0, #0
 8023448:	f000 80fa 	beq.w	8023640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802344c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023450:	d01b      	beq.n	802348a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023452:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023456:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802345a:	fb0e fa0a 	mul.w	sl, lr, sl
 802345e:	fb0e fe03 	mul.w	lr, lr, r3
 8023462:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023466:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802346a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802346e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023472:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023476:	4453      	add	r3, sl
 8023478:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802347c:	0a1b      	lsrs	r3, r3, #8
 802347e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023482:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023486:	ea43 030c 	orr.w	r3, r3, ip
 802348a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802348c:	2cff      	cmp	r4, #255	@ 0xff
 802348e:	d021      	beq.n	80234d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8023490:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023492:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023496:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023498:	fb04 fb0b 	mul.w	fp, r4, fp
 802349c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802349e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80234a2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80234a4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80234a8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80234ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80234b0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80234b4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80234b8:	44de      	add	lr, fp
 80234ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80234be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80234c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80234ca:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80234ce:	ea4e 040a 	orr.w	r4, lr, sl
 80234d2:	940e      	str	r4, [sp, #56]	@ 0x38
 80234d4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80234d6:	2cff      	cmp	r4, #255	@ 0xff
 80234d8:	d021      	beq.n	802351e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80234da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80234dc:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80234e0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80234e2:	fb04 fb0b 	mul.w	fp, r4, fp
 80234e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80234e8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80234ec:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80234ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80234f2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80234f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80234fa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80234fe:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023502:	44de      	add	lr, fp
 8023504:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023508:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802350c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023510:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023514:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023518:	ea4e 040a 	orr.w	r4, lr, sl
 802351c:	940a      	str	r4, [sp, #40]	@ 0x28
 802351e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023520:	2cff      	cmp	r4, #255	@ 0xff
 8023522:	d021      	beq.n	8023568 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8023524:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023526:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802352a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802352c:	fb04 fb0b 	mul.w	fp, r4, fp
 8023530:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023532:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023536:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023538:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802353c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023540:	fb04 fa0a 	mul.w	sl, r4, sl
 8023544:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023548:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802354c:	44de      	add	lr, fp
 802354e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023552:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023556:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802355a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802355e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023562:	ea4e 040a 	orr.w	r4, lr, sl
 8023566:	940f      	str	r4, [sp, #60]	@ 0x3c
 8023568:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802356a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802356e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023572:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023576:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023578:	fb08 fc0c 	mul.w	ip, r8, ip
 802357c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023580:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023584:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023586:	fb01 cc0e 	mla	ip, r1, lr, ip
 802358a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802358e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023590:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023594:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023598:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802359a:	fb08 f80e 	mul.w	r8, r8, lr
 802359e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80235a2:	fb02 8303 	mla	r3, r2, r3, r8
 80235a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80235a8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80235ac:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80235b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80235b2:	fb01 330a 	mla	r3, r1, sl, r3
 80235b6:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 80235ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80235bc:	fb09 3901 	mla	r9, r9, r1, r3
 80235c0:	883b      	ldrh	r3, [r7, #0]
 80235c2:	4342      	muls	r2, r0
 80235c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80235c8:	1c50      	adds	r0, r2, #1
 80235ca:	1219      	asrs	r1, r3, #8
 80235cc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80235d0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80235d4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80235d8:	ea4c 0c09 	orr.w	ip, ip, r9
 80235dc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80235e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80235e4:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80235e8:	b2c0      	uxtb	r0, r0
 80235ea:	fb12 f204 	smulbb	r2, r2, r4
 80235ee:	fa5f fc8c 	uxtb.w	ip, ip
 80235f2:	fb1e fe04 	smulbb	lr, lr, r4
 80235f6:	fb01 2100 	mla	r1, r1, r0, r2
 80235fa:	10da      	asrs	r2, r3, #3
 80235fc:	fb1c fc04 	smulbb	ip, ip, r4
 8023600:	00db      	lsls	r3, r3, #3
 8023602:	b289      	uxth	r1, r1
 8023604:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023608:	b2db      	uxtb	r3, r3
 802360a:	fb02 e200 	mla	r2, r2, r0, lr
 802360e:	fb03 c300 	mla	r3, r3, r0, ip
 8023612:	b292      	uxth	r2, r2
 8023614:	fa1f fc83 	uxth.w	ip, r3
 8023618:	1c4b      	adds	r3, r1, #1
 802361a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802361e:	f10c 0301 	add.w	r3, ip, #1
 8023622:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023626:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802362a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802362e:	430b      	orrs	r3, r1
 8023630:	1c51      	adds	r1, r2, #1
 8023632:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023636:	0952      	lsrs	r2, r2, #5
 8023638:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802363c:	4313      	orrs	r3, r2
 802363e:	803b      	strh	r3, [r7, #0]
 8023640:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8023642:	3702      	adds	r7, #2
 8023644:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023646:	441a      	add	r2, r3
 8023648:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802364a:	441d      	add	r5, r3
 802364c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802364e:	9229      	str	r2, [sp, #164]	@ 0xa4
 8023650:	3b01      	subs	r3, #1
 8023652:	931a      	str	r3, [sp, #104]	@ 0x68
 8023654:	e694      	b.n	8023380 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023656:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8023658:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802365a:	441c      	add	r4, r3
 802365c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802365e:	441d      	add	r5, r3
 8023660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023662:	9429      	str	r4, [sp, #164]	@ 0xa4
 8023664:	3b01      	subs	r3, #1
 8023666:	9309      	str	r3, [sp, #36]	@ 0x24
 8023668:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802366a:	3302      	adds	r3, #2
 802366c:	930c      	str	r3, [sp, #48]	@ 0x30
 802366e:	e667      	b.n	8023340 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023670:	d024      	beq.n	80236bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8023672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023674:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8023676:	3b01      	subs	r3, #1
 8023678:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802367a:	fb00 4003 	mla	r0, r0, r3, r4
 802367e:	1400      	asrs	r0, r0, #16
 8023680:	f53f ae7b 	bmi.w	802337a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023684:	3901      	subs	r1, #1
 8023686:	4288      	cmp	r0, r1
 8023688:	f6bf ae77 	bge.w	802337a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802368c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802368e:	fb01 5303 	mla	r3, r1, r3, r5
 8023692:	141b      	asrs	r3, r3, #16
 8023694:	f53f ae71 	bmi.w	802337a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023698:	3a01      	subs	r2, #1
 802369a:	4293      	cmp	r3, r2
 802369c:	f6bf ae6d 	bge.w	802337a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80236a0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80236a4:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80236a8:	f1bb 0f00 	cmp.w	fp, #0
 80236ac:	dc70      	bgt.n	8023790 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80236ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80236b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80236b6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80236ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80236bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80236be:	2b00      	cmp	r3, #0
 80236c0:	f340 81be 	ble.w	8023a40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80236c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80236c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80236ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80236ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80236d2:	eef0 6a62 	vmov.f32	s13, s5
 80236d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80236da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80236de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80236e2:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 80236e6:	eef0 6a43 	vmov.f32	s13, s6
 80236ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80236ee:	ee16 5a90 	vmov	r5, s13
 80236f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80236f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80236fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80236fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023702:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023706:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802370a:	ee12 2a90 	vmov	r2, s5
 802370e:	eef0 2a47 	vmov.f32	s5, s14
 8023712:	fb92 f3f3 	sdiv	r3, r2, r3
 8023716:	ee13 2a10 	vmov	r2, s6
 802371a:	932b      	str	r3, [sp, #172]	@ 0xac
 802371c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802371e:	eeb0 3a67 	vmov.f32	s6, s15
 8023722:	fb92 f3f3 	sdiv	r3, r2, r3
 8023726:	932c      	str	r3, [sp, #176]	@ 0xb0
 8023728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802372a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802372c:	3b01      	subs	r3, #1
 802372e:	9319      	str	r3, [sp, #100]	@ 0x64
 8023730:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023732:	bf08      	it	eq
 8023734:	4613      	moveq	r3, r2
 8023736:	9309      	str	r3, [sp, #36]	@ 0x24
 8023738:	e5f4      	b.n	8023324 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802373a:	2900      	cmp	r1, #0
 802373c:	f43f ae66 	beq.w	802340c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023740:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023744:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023748:	900a      	str	r0, [sp, #40]	@ 0x28
 802374a:	0e00      	lsrs	r0, r0, #24
 802374c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802374e:	e65d      	b.n	802340c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023750:	f113 0801 	adds.w	r8, r3, #1
 8023754:	f53f af74 	bmi.w	8023640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023758:	4540      	cmp	r0, r8
 802375a:	f6ff af71 	blt.w	8023640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802375e:	f11c 0801 	adds.w	r8, ip, #1
 8023762:	f53f af6d 	bmi.w	8023640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023766:	45c6      	cmp	lr, r8
 8023768:	f6ff af6a 	blt.w	8023640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802376c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 802376e:	b200      	sxth	r0, r0
 8023770:	9302      	str	r3, [sp, #8]
 8023772:	fa0f f38e 	sxth.w	r3, lr
 8023776:	9000      	str	r0, [sp, #0]
 8023778:	9301      	str	r3, [sp, #4]
 802377a:	4633      	mov	r3, r6
 802377c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802377e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023782:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023786:	4639      	mov	r1, r7
 8023788:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802378a:	f7ff fc63 	bl	8023054 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802378e:	e757      	b.n	8023640 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023790:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8023792:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023796:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8023798:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802379c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802379e:	1427      	asrs	r7, r4, #16
 80237a0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80237a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80237a6:	142b      	asrs	r3, r5, #16
 80237a8:	fb01 7303 	mla	r3, r1, r3, r7
 80237ac:	18e7      	adds	r7, r4, r3
 80237ae:	5ce3      	ldrb	r3, [r4, r3]
 80237b0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80237b4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80237b8:	2a00      	cmp	r2, #0
 80237ba:	f000 8137 	beq.w	8023a2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80237be:	f897 e001 	ldrb.w	lr, [r7, #1]
 80237c2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80237c6:	9410      	str	r4, [sp, #64]	@ 0x40
 80237c8:	0e24      	lsrs	r4, r4, #24
 80237ca:	9417      	str	r4, [sp, #92]	@ 0x5c
 80237cc:	b170      	cbz	r0, 80237ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80237ce:	eb07 0e01 	add.w	lr, r7, r1
 80237d2:	5c79      	ldrb	r1, [r7, r1]
 80237d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80237d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80237da:	0e09      	lsrs	r1, r1, #24
 80237dc:	9114      	str	r1, [sp, #80]	@ 0x50
 80237de:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80237e2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80237e6:	9111      	str	r1, [sp, #68]	@ 0x44
 80237e8:	0e09      	lsrs	r1, r1, #24
 80237ea:	9118      	str	r1, [sp, #96]	@ 0x60
 80237ec:	b292      	uxth	r2, r2
 80237ee:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80237f0:	b280      	uxth	r0, r0
 80237f2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80237f4:	fb02 f800 	mul.w	r8, r2, r0
 80237f8:	0112      	lsls	r2, r2, #4
 80237fa:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80237fe:	eba2 0e08 	sub.w	lr, r2, r8
 8023802:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023806:	b280      	uxth	r0, r0
 8023808:	fa1f fe8e 	uxth.w	lr, lr
 802380c:	1a12      	subs	r2, r2, r0
 802380e:	fb0e f101 	mul.w	r1, lr, r1
 8023812:	b292      	uxth	r2, r2
 8023814:	fb02 110c 	mla	r1, r2, ip, r1
 8023818:	fb00 1104 	mla	r1, r0, r4, r1
 802381c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802381e:	fb08 1104 	mla	r1, r8, r4, r1
 8023822:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023826:	2900      	cmp	r1, #0
 8023828:	f000 80f5 	beq.w	8023a16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 802382c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8023830:	d019      	beq.n	8023866 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8023832:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023836:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802383a:	fb0c fa0a 	mul.w	sl, ip, sl
 802383e:	fb0c fc03 	mul.w	ip, ip, r3
 8023842:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023846:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802384a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802384e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023852:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023856:	4453      	add	r3, sl
 8023858:	0a3f      	lsrs	r7, r7, #8
 802385a:	0a1b      	lsrs	r3, r3, #8
 802385c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8023860:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023864:	433b      	orrs	r3, r7
 8023866:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023868:	2cff      	cmp	r4, #255	@ 0xff
 802386a:	d020      	beq.n	80238ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 802386c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802386e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023872:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023874:	4367      	muls	r7, r4
 8023876:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023878:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802387c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023880:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8023882:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023886:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802388a:	fb04 fa0a 	mul.w	sl, r4, sl
 802388e:	44bc      	add	ip, r7
 8023890:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023894:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023898:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802389c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80238a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80238a4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80238a8:	ea4c 040a 	orr.w	r4, ip, sl
 80238ac:	9410      	str	r4, [sp, #64]	@ 0x40
 80238ae:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80238b0:	2cff      	cmp	r4, #255	@ 0xff
 80238b2:	d020      	beq.n	80238f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 80238b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80238b6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80238ba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80238bc:	4367      	muls	r7, r4
 80238be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80238c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80238c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80238c8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80238ca:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80238ce:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80238d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80238d6:	44bc      	add	ip, r7
 80238d8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80238dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80238e4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80238e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80238ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80238f0:	ea4c 040a 	orr.w	r4, ip, sl
 80238f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80238f6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80238f8:	2cff      	cmp	r4, #255	@ 0xff
 80238fa:	d020      	beq.n	802393e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 80238fc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80238fe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023902:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8023904:	4367      	muls	r7, r4
 8023906:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023908:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802390c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023910:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8023912:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023916:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802391a:	fb04 fa0a 	mul.w	sl, r4, sl
 802391e:	44bc      	add	ip, r7
 8023920:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023924:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023928:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802392c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023930:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023934:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023938:	ea4c 040a 	orr.w	r4, ip, sl
 802393c:	9411      	str	r4, [sp, #68]	@ 0x44
 802393e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023940:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8023944:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023948:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802394c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802394e:	fb0e f707 	mul.w	r7, lr, r7
 8023952:	fb02 770c 	mla	r7, r2, ip, r7
 8023956:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802395a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802395c:	fb00 770c 	mla	r7, r0, ip, r7
 8023960:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023964:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023966:	fb08 770c 	mla	r7, r8, ip, r7
 802396a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802396e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023970:	fb0e fe0c 	mul.w	lr, lr, ip
 8023974:	0a3f      	lsrs	r7, r7, #8
 8023976:	fb02 e303 	mla	r3, r2, r3, lr
 802397a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802397c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8023980:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8023984:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023986:	fb00 330a 	mla	r3, r0, sl, r3
 802398a:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802398e:	f8b9 0000 	ldrh.w	r0, [r9]
 8023992:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023998:	1202      	asrs	r2, r0, #8
 802399a:	434b      	muls	r3, r1
 802399c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80239a0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80239a4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80239a8:	1c59      	adds	r1, r3, #1
 80239aa:	ea47 070c 	orr.w	r7, r7, ip
 80239ae:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80239b2:	0c3b      	lsrs	r3, r7, #16
 80239b4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80239b8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80239bc:	b2ff      	uxtb	r7, r7
 80239be:	fb13 f304 	smulbb	r3, r3, r4
 80239c2:	b2c9      	uxtb	r1, r1
 80239c4:	fb1c fc04 	smulbb	ip, ip, r4
 80239c8:	fb02 3201 	mla	r2, r2, r1, r3
 80239cc:	10c3      	asrs	r3, r0, #3
 80239ce:	fb17 f704 	smulbb	r7, r7, r4
 80239d2:	00c0      	lsls	r0, r0, #3
 80239d4:	b292      	uxth	r2, r2
 80239d6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80239da:	b2c0      	uxtb	r0, r0
 80239dc:	fb03 c301 	mla	r3, r3, r1, ip
 80239e0:	f102 0c01 	add.w	ip, r2, #1
 80239e4:	fb00 7001 	mla	r0, r0, r1, r7
 80239e8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80239ec:	b280      	uxth	r0, r0
 80239ee:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 80239f2:	b29b      	uxth	r3, r3
 80239f4:	1c42      	adds	r2, r0, #1
 80239f6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80239fa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80239fe:	ea42 020c 	orr.w	r2, r2, ip
 8023a02:	f103 0c01 	add.w	ip, r3, #1
 8023a06:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8023a0a:	095b      	lsrs	r3, r3, #5
 8023a0c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023a10:	431a      	orrs	r2, r3
 8023a12:	f8a9 2000 	strh.w	r2, [r9]
 8023a16:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8023a18:	f109 0902 	add.w	r9, r9, #2
 8023a1c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023a1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023a22:	441a      	add	r2, r3
 8023a24:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023a26:	9229      	str	r2, [sp, #164]	@ 0xa4
 8023a28:	441d      	add	r5, r3
 8023a2a:	e63d      	b.n	80236a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023a2c:	2800      	cmp	r0, #0
 8023a2e:	f43f aedd 	beq.w	80237ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023a32:	5c79      	ldrb	r1, [r7, r1]
 8023a34:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023a38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023a3a:	0e09      	lsrs	r1, r1, #24
 8023a3c:	9114      	str	r1, [sp, #80]	@ 0x50
 8023a3e:	e6d5      	b.n	80237ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023a40:	b01f      	add	sp, #124	@ 0x7c
 8023a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023a46 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8023a46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a4a:	b089      	sub	sp, #36	@ 0x24
 8023a4c:	9101      	str	r1, [sp, #4]
 8023a4e:	9801      	ldr	r0, [sp, #4]
 8023a50:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8023a54:	8800      	ldrh	r0, [r0, #0]
 8023a56:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8023a5a:	1206      	asrs	r6, r0, #8
 8023a5c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8023a60:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8023a64:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8023a68:	9602      	str	r6, [sp, #8]
 8023a6a:	10c6      	asrs	r6, r0, #3
 8023a6c:	00c0      	lsls	r0, r0, #3
 8023a6e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8023a72:	b2c0      	uxtb	r0, r0
 8023a74:	9603      	str	r6, [sp, #12]
 8023a76:	9004      	str	r0, [sp, #16]
 8023a78:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8023a7c:	fb07 100c 	mla	r0, r7, ip, r1
 8023a80:	2f00      	cmp	r7, #0
 8023a82:	eb02 0e00 	add.w	lr, r2, r0
 8023a86:	f2c0 810a 	blt.w	8023c9e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8023a8a:	45b8      	cmp	r8, r7
 8023a8c:	f340 8107 	ble.w	8023c9e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8023a90:	2900      	cmp	r1, #0
 8023a92:	f2c0 8102 	blt.w	8023c9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8023a96:	458c      	cmp	ip, r1
 8023a98:	f340 80ff 	ble.w	8023c9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8023a9c:	5c12      	ldrb	r2, [r2, r0]
 8023a9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023aa2:	1c4a      	adds	r2, r1, #1
 8023aa4:	f100 80fe 	bmi.w	8023ca4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8023aa8:	4594      	cmp	ip, r2
 8023aaa:	f340 80fb 	ble.w	8023ca4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8023aae:	2d00      	cmp	r5, #0
 8023ab0:	f000 80fa 	beq.w	8023ca8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8023ab4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023ab8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023abc:	3701      	adds	r7, #1
 8023abe:	f100 80f7 	bmi.w	8023cb0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8023ac2:	45b8      	cmp	r8, r7
 8023ac4:	f340 80f4 	ble.w	8023cb0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8023ac8:	2c00      	cmp	r4, #0
 8023aca:	f000 80f4 	beq.w	8023cb6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8023ace:	2900      	cmp	r1, #0
 8023ad0:	eb0e 020c 	add.w	r2, lr, ip
 8023ad4:	f2c0 80ea 	blt.w	8023cac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8023ad8:	458c      	cmp	ip, r1
 8023ada:	f340 80e7 	ble.w	8023cac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8023ade:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8023ae2:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8023ae6:	3101      	adds	r1, #1
 8023ae8:	f100 80e8 	bmi.w	8023cbc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8023aec:	458c      	cmp	ip, r1
 8023aee:	f340 80e5 	ble.w	8023cbc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8023af2:	2d00      	cmp	r5, #0
 8023af4:	f000 80e4 	beq.w	8023cc0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8023af8:	7852      	ldrb	r2, [r2, #1]
 8023afa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023afe:	0e0b      	lsrs	r3, r1, #24
 8023b00:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8023b04:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023b08:	9300      	str	r3, [sp, #0]
 8023b0a:	b2a4      	uxth	r4, r4
 8023b0c:	b2ab      	uxth	r3, r5
 8023b0e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8023b12:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8023b16:	fb03 f904 	mul.w	r9, r3, r4
 8023b1a:	011b      	lsls	r3, r3, #4
 8023b1c:	fb0a f505 	mul.w	r5, sl, r5
 8023b20:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8023b24:	eba3 0e09 	sub.w	lr, r3, r9
 8023b28:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8023b2c:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8023b30:	0a28      	lsrs	r0, r5, #8
 8023b32:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8023b36:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8023b3a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023b3e:	fb0a f303 	mul.w	r3, sl, r3
 8023b42:	fb08 f707 	mul.w	r7, r8, r7
 8023b46:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8023b4a:	4405      	add	r5, r0
 8023b4c:	fb08 fc0c 	mul.w	ip, r8, ip
 8023b50:	b2a4      	uxth	r4, r4
 8023b52:	0a2d      	lsrs	r5, r5, #8
 8023b54:	fa1f fe8e 	uxth.w	lr, lr
 8023b58:	1b12      	subs	r2, r2, r4
 8023b5a:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8023b5e:	b292      	uxth	r2, r2
 8023b60:	9005      	str	r0, [sp, #20]
 8023b62:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8023b66:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023b6a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8023b6e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023b72:	0a1b      	lsrs	r3, r3, #8
 8023b74:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023b78:	9306      	str	r3, [sp, #24]
 8023b7a:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8023b7e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023b82:	4460      	add	r0, ip
 8023b84:	fb0b f303 	mul.w	r3, fp, r3
 8023b88:	fb0b f606 	mul.w	r6, fp, r6
 8023b8c:	0a00      	lsrs	r0, r0, #8
 8023b8e:	0a1d      	lsrs	r5, r3, #8
 8023b90:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8023b94:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023b98:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023b9c:	441d      	add	r5, r3
 8023b9e:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8023ba2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023ba6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8023baa:	0a2d      	lsrs	r5, r5, #8
 8023bac:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023bb0:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8023bb4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023bb8:	0a36      	lsrs	r6, r6, #8
 8023bba:	0a1b      	lsrs	r3, r3, #8
 8023bbc:	fb05 f50e 	mul.w	r5, r5, lr
 8023bc0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8023bc4:	9307      	str	r3, [sp, #28]
 8023bc6:	0e0b      	lsrs	r3, r1, #24
 8023bc8:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023bcc:	fb0e f606 	mul.w	r6, lr, r6
 8023bd0:	435f      	muls	r7, r3
 8023bd2:	4359      	muls	r1, r3
 8023bd4:	9b05      	ldr	r3, [sp, #20]
 8023bd6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023bda:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023bde:	fb03 5502 	mla	r5, r3, r2, r5
 8023be2:	9b06      	ldr	r3, [sp, #24]
 8023be4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023be8:	fb0e fe0b 	mul.w	lr, lr, fp
 8023bec:	44bc      	add	ip, r7
 8023bee:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8023bf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023bf6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023bfa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023bfe:	0a09      	lsrs	r1, r1, #8
 8023c00:	fb0c 5509 	mla	r5, ip, r9, r5
 8023c04:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8023c08:	fb00 5504 	mla	r5, r0, r4, r5
 8023c0c:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8023c10:	9b07      	ldr	r3, [sp, #28]
 8023c12:	fb02 6000 	mla	r0, r2, r0, r6
 8023c16:	0a2d      	lsrs	r5, r5, #8
 8023c18:	fb02 e20a 	mla	r2, r2, sl, lr
 8023c1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023c20:	fb09 0001 	mla	r0, r9, r1, r0
 8023c24:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8023c28:	fb04 0003 	mla	r0, r4, r3, r0
 8023c2c:	9b00      	ldr	r3, [sp, #0]
 8023c2e:	fb04 2408 	mla	r4, r4, r8, r2
 8023c32:	9a04      	ldr	r2, [sp, #16]
 8023c34:	0a00      	lsrs	r0, r0, #8
 8023c36:	fb09 4903 	mla	r9, r9, r3, r4
 8023c3a:	9b02      	ldr	r3, [sp, #8]
 8023c3c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8023c40:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8023c44:	4305      	orrs	r5, r0
 8023c46:	fa5f f989 	uxtb.w	r9, r9
 8023c4a:	fb03 f109 	mul.w	r1, r3, r9
 8023c4e:	9b03      	ldr	r3, [sp, #12]
 8023c50:	fb03 f309 	mul.w	r3, r3, r9
 8023c54:	fb02 f909 	mul.w	r9, r2, r9
 8023c58:	1c4a      	adds	r2, r1, #1
 8023c5a:	1c58      	adds	r0, r3, #1
 8023c5c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023c60:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023c64:	0c2a      	lsrs	r2, r5, #16
 8023c66:	0a2b      	lsrs	r3, r5, #8
 8023c68:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023c6c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023c70:	0212      	lsls	r2, r2, #8
 8023c72:	00db      	lsls	r3, r3, #3
 8023c74:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8023c78:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023c7c:	4313      	orrs	r3, r2
 8023c7e:	f109 0201 	add.w	r2, r9, #1
 8023c82:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8023c86:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8023c8a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8023c8e:	431d      	orrs	r5, r3
 8023c90:	9b01      	ldr	r3, [sp, #4]
 8023c92:	801d      	strh	r5, [r3, #0]
 8023c94:	b009      	add	sp, #36	@ 0x24
 8023c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c9a:	2000      	movs	r0, #0
 8023c9c:	e701      	b.n	8023aa2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8023c9e:	2600      	movs	r6, #0
 8023ca0:	4630      	mov	r0, r6
 8023ca2:	e70b      	b.n	8023abc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8023ca4:	2600      	movs	r6, #0
 8023ca6:	e709      	b.n	8023abc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8023ca8:	462e      	mov	r6, r5
 8023caa:	e707      	b.n	8023abc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8023cac:	2700      	movs	r7, #0
 8023cae:	e71a      	b.n	8023ae6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8023cb0:	2100      	movs	r1, #0
 8023cb2:	460f      	mov	r7, r1
 8023cb4:	e723      	b.n	8023afe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8023cb6:	4621      	mov	r1, r4
 8023cb8:	4627      	mov	r7, r4
 8023cba:	e720      	b.n	8023afe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8023cbc:	2100      	movs	r1, #0
 8023cbe:	e71e      	b.n	8023afe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8023cc0:	4629      	mov	r1, r5
 8023cc2:	e71c      	b.n	8023afe <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08023cc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cc8:	b09b      	sub	sp, #108	@ 0x6c
 8023cca:	9218      	str	r2, [sp, #96]	@ 0x60
 8023ccc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8023cce:	9019      	str	r0, [sp, #100]	@ 0x64
 8023cd0:	9116      	str	r1, [sp, #88]	@ 0x58
 8023cd2:	6850      	ldr	r0, [r2, #4]
 8023cd4:	9307      	str	r3, [sp, #28]
 8023cd6:	6812      	ldr	r2, [r2, #0]
 8023cd8:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8023cda:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8023cde:	fb00 1303 	mla	r3, r0, r3, r1
 8023ce2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023ce6:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ce8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023cea:	681b      	ldr	r3, [r3, #0]
 8023cec:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023cee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023cf0:	685e      	ldr	r6, [r3, #4]
 8023cf2:	3604      	adds	r6, #4
 8023cf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023cf6:	2b00      	cmp	r3, #0
 8023cf8:	dc03      	bgt.n	8023d02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023cfa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023cfc:	2b00      	cmp	r3, #0
 8023cfe:	f340 8373 	ble.w	80243e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8023d02:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023d04:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d08:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023d0c:	1e48      	subs	r0, r1, #1
 8023d0e:	1e57      	subs	r7, r2, #1
 8023d10:	9b07      	ldr	r3, [sp, #28]
 8023d12:	2b00      	cmp	r3, #0
 8023d14:	f340 818f 	ble.w	8024036 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023d18:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8023d1a:	142b      	asrs	r3, r5, #16
 8023d1c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023d20:	d406      	bmi.n	8023d30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023d22:	4584      	cmp	ip, r0
 8023d24:	da04      	bge.n	8023d30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023d26:	2b00      	cmp	r3, #0
 8023d28:	db02      	blt.n	8023d30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023d2a:	42bb      	cmp	r3, r7
 8023d2c:	f2c0 8184 	blt.w	8024038 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023d30:	f11c 0c01 	adds.w	ip, ip, #1
 8023d34:	f100 8172 	bmi.w	802401c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023d38:	4561      	cmp	r1, ip
 8023d3a:	f2c0 816f 	blt.w	802401c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023d3e:	3301      	adds	r3, #1
 8023d40:	f100 816c 	bmi.w	802401c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023d44:	429a      	cmp	r2, r3
 8023d46:	f2c0 8169 	blt.w	802401c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023d4a:	9b07      	ldr	r3, [sp, #28]
 8023d4c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8023d4e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023d50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023d52:	2b00      	cmp	r3, #0
 8023d54:	f340 818e 	ble.w	8024074 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8023d58:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023d5a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023d5e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023d62:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023d66:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8023d68:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8023d6c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023d6e:	141b      	asrs	r3, r3, #16
 8023d70:	f100 81d1 	bmi.w	8024116 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023d74:	f101 38ff 	add.w	r8, r1, #4294967295
 8023d78:	4543      	cmp	r3, r8
 8023d7a:	f280 81cc 	bge.w	8024116 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023d7e:	f1bc 0f00 	cmp.w	ip, #0
 8023d82:	f2c0 81c8 	blt.w	8024116 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023d86:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023d8a:	45c4      	cmp	ip, r8
 8023d8c:	f280 81c3 	bge.w	8024116 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023d90:	b209      	sxth	r1, r1
 8023d92:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023d94:	fb0c 3301 	mla	r3, ip, r1, r3
 8023d98:	eb04 0803 	add.w	r8, r4, r3
 8023d9c:	5ce3      	ldrb	r3, [r4, r3]
 8023d9e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023da2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023da6:	2a00      	cmp	r2, #0
 8023da8:	f000 81aa 	beq.w	8024100 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8023dac:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023db0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023db4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023db6:	0e24      	lsrs	r4, r4, #24
 8023db8:	9412      	str	r4, [sp, #72]	@ 0x48
 8023dba:	b178      	cbz	r0, 8023ddc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023dbc:	eb08 0c01 	add.w	ip, r8, r1
 8023dc0:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023dc4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023dc8:	9108      	str	r1, [sp, #32]
 8023dca:	0e09      	lsrs	r1, r1, #24
 8023dcc:	9110      	str	r1, [sp, #64]	@ 0x40
 8023dce:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023dd2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023dd6:	910c      	str	r1, [sp, #48]	@ 0x30
 8023dd8:	0e09      	lsrs	r1, r1, #24
 8023dda:	9113      	str	r1, [sp, #76]	@ 0x4c
 8023ddc:	b292      	uxth	r2, r2
 8023dde:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023de0:	b280      	uxth	r0, r0
 8023de2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023de4:	fb02 f900 	mul.w	r9, r2, r0
 8023de8:	0112      	lsls	r2, r2, #4
 8023dea:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023dee:	eba2 0809 	sub.w	r8, r2, r9
 8023df2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8023df6:	b280      	uxth	r0, r0
 8023df8:	fa1f f888 	uxth.w	r8, r8
 8023dfc:	1a12      	subs	r2, r2, r0
 8023dfe:	fb08 f101 	mul.w	r1, r8, r1
 8023e02:	b292      	uxth	r2, r2
 8023e04:	fb02 110e 	mla	r1, r2, lr, r1
 8023e08:	fb00 1104 	mla	r1, r0, r4, r1
 8023e0c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023e0e:	fb09 1104 	mla	r1, r9, r4, r1
 8023e12:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023e16:	2900      	cmp	r1, #0
 8023e18:	f000 80f5 	beq.w	8024006 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023e1c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023e20:	d01b      	beq.n	8023e5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023e22:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023e26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023e2a:	fb0e fa0a 	mul.w	sl, lr, sl
 8023e2e:	fb0e fe03 	mul.w	lr, lr, r3
 8023e32:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023e36:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023e3a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023e3e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023e42:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023e46:	4453      	add	r3, sl
 8023e48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e4c:	0a1b      	lsrs	r3, r3, #8
 8023e4e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023e52:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023e56:	ea43 030c 	orr.w	r3, r3, ip
 8023e5a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023e5c:	2cff      	cmp	r4, #255	@ 0xff
 8023e5e:	d021      	beq.n	8023ea4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8023e60:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023e62:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023e66:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023e68:	fb04 fb0b 	mul.w	fp, r4, fp
 8023e6c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023e6e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023e72:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023e74:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023e78:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023e7c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023e80:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023e84:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023e88:	44de      	add	lr, fp
 8023e8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023e8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023e96:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023e9a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023e9e:	ea4e 040a 	orr.w	r4, lr, sl
 8023ea2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023ea4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023ea6:	2cff      	cmp	r4, #255	@ 0xff
 8023ea8:	d021      	beq.n	8023eee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023eaa:	9c08      	ldr	r4, [sp, #32]
 8023eac:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023eb0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023eb2:	fb04 fb0b 	mul.w	fp, r4, fp
 8023eb6:	9c08      	ldr	r4, [sp, #32]
 8023eb8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023ebc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023ebe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ec2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023ec6:	fb04 fa0a 	mul.w	sl, r4, sl
 8023eca:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023ece:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023ed2:	44de      	add	lr, fp
 8023ed4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023ed8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023edc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023ee0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023ee4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023ee8:	ea4e 040a 	orr.w	r4, lr, sl
 8023eec:	9408      	str	r4, [sp, #32]
 8023eee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023ef0:	2cff      	cmp	r4, #255	@ 0xff
 8023ef2:	d021      	beq.n	8023f38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8023ef4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023ef6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8023efa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023efc:	fb04 fb0b 	mul.w	fp, r4, fp
 8023f00:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023f02:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023f06:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023f08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023f0c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023f10:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f14:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023f18:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023f1c:	44de      	add	lr, fp
 8023f1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023f22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023f26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f2a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023f2e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023f32:	ea4e 040a 	orr.w	r4, lr, sl
 8023f36:	940c      	str	r4, [sp, #48]	@ 0x30
 8023f38:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023f3a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8023f3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023f42:	43c9      	mvns	r1, r1
 8023f44:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023f48:	9c08      	ldr	r4, [sp, #32]
 8023f4a:	fb08 fc0c 	mul.w	ip, r8, ip
 8023f4e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023f52:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023f56:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023f58:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023f5c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023f60:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023f62:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023f66:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023f6a:	fb08 f80e 	mul.w	r8, r8, lr
 8023f6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f72:	fa5f fe81 	uxtb.w	lr, r1
 8023f76:	fb02 8303 	mla	r3, r2, r3, r8
 8023f7a:	9a08      	ldr	r2, [sp, #32]
 8023f7c:	f8b7 8000 	ldrh.w	r8, [r7]
 8023f80:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023f84:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8023f88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023f8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8023f8e:	fb00 330a 	mla	r3, r0, sl, r3
 8023f92:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8023f96:	ea4f 2228 	mov.w	r2, r8, asr #8
 8023f9a:	fb09 3900 	mla	r9, r9, r0, r3
 8023f9e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8023fa2:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023fa6:	b2c9      	uxtb	r1, r1
 8023fa8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023fac:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8023fb0:	fb02 f20e 	mul.w	r2, r2, lr
 8023fb4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8023fb8:	fb00 f00e 	mul.w	r0, r0, lr
 8023fbc:	1c53      	adds	r3, r2, #1
 8023fbe:	fb01 f10e 	mul.w	r1, r1, lr
 8023fc2:	ea4c 0c09 	orr.w	ip, ip, r9
 8023fc6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023fca:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8023fce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023fd2:	4a60      	ldr	r2, [pc, #384]	@ (8024154 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8023fd4:	b2db      	uxtb	r3, r3
 8023fd6:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8023fda:	1c43      	adds	r3, r0, #1
 8023fdc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023fe0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023fe4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023fe8:	00db      	lsls	r3, r3, #3
 8023fea:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023fee:	4313      	orrs	r3, r2
 8023ff0:	1c4a      	adds	r2, r1, #1
 8023ff2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023ff6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023ffa:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023ffe:	ea4c 0c03 	orr.w	ip, ip, r3
 8024002:	f8a7 c000 	strh.w	ip, [r7]
 8024006:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024008:	3702      	adds	r7, #2
 802400a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802400c:	441a      	add	r2, r3
 802400e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024010:	441d      	add	r5, r3
 8024012:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024014:	9225      	str	r2, [sp, #148]	@ 0x94
 8024016:	3b01      	subs	r3, #1
 8024018:	9317      	str	r3, [sp, #92]	@ 0x5c
 802401a:	e699      	b.n	8023d50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802401c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802401e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024020:	441c      	add	r4, r3
 8024022:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024024:	441d      	add	r5, r3
 8024026:	9b07      	ldr	r3, [sp, #28]
 8024028:	9425      	str	r4, [sp, #148]	@ 0x94
 802402a:	3b01      	subs	r3, #1
 802402c:	9307      	str	r3, [sp, #28]
 802402e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024030:	3302      	adds	r3, #2
 8024032:	930a      	str	r3, [sp, #40]	@ 0x28
 8024034:	e66c      	b.n	8023d10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024036:	d024      	beq.n	8024082 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8024038:	9b07      	ldr	r3, [sp, #28]
 802403a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802403c:	3b01      	subs	r3, #1
 802403e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024040:	fb00 4003 	mla	r0, r0, r3, r4
 8024044:	1400      	asrs	r0, r0, #16
 8024046:	f53f ae80 	bmi.w	8023d4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802404a:	3901      	subs	r1, #1
 802404c:	4288      	cmp	r0, r1
 802404e:	f6bf ae7c 	bge.w	8023d4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024052:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024054:	fb01 5303 	mla	r3, r1, r3, r5
 8024058:	141b      	asrs	r3, r3, #16
 802405a:	f53f ae76 	bmi.w	8023d4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802405e:	3a01      	subs	r2, #1
 8024060:	4293      	cmp	r3, r2
 8024062:	f6bf ae72 	bge.w	8023d4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8024066:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802406a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 802406e:	f1bb 0f00 	cmp.w	fp, #0
 8024072:	dc71      	bgt.n	8024158 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024074:	9b07      	ldr	r3, [sp, #28]
 8024076:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802407a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802407c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024080:	930a      	str	r3, [sp, #40]	@ 0x28
 8024082:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024084:	2b00      	cmp	r3, #0
 8024086:	f340 81af 	ble.w	80243e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802408a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802408e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024090:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024094:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024098:	eef0 6a62 	vmov.f32	s13, s5
 802409c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80240a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80240a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240a8:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 80240ac:	eef0 6a43 	vmov.f32	s13, s6
 80240b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240b4:	ee16 5a90 	vmov	r5, s13
 80240b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80240bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80240c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80240c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80240c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80240cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80240d0:	ee12 2a90 	vmov	r2, s5
 80240d4:	eef0 2a47 	vmov.f32	s5, s14
 80240d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80240dc:	ee13 2a10 	vmov	r2, s6
 80240e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80240e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80240e4:	eeb0 3a67 	vmov.f32	s6, s15
 80240e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80240ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80240ee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80240f0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80240f2:	3b01      	subs	r3, #1
 80240f4:	9316      	str	r3, [sp, #88]	@ 0x58
 80240f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80240f8:	bf08      	it	eq
 80240fa:	4613      	moveq	r3, r2
 80240fc:	9307      	str	r3, [sp, #28]
 80240fe:	e5f9      	b.n	8023cf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8024100:	2800      	cmp	r0, #0
 8024102:	f43f ae6b 	beq.w	8023ddc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024106:	f818 1001 	ldrb.w	r1, [r8, r1]
 802410a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802410e:	9108      	str	r1, [sp, #32]
 8024110:	0e09      	lsrs	r1, r1, #24
 8024112:	9110      	str	r1, [sp, #64]	@ 0x40
 8024114:	e662      	b.n	8023ddc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024116:	f113 0801 	adds.w	r8, r3, #1
 802411a:	f53f af74 	bmi.w	8024006 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802411e:	4541      	cmp	r1, r8
 8024120:	f6ff af71 	blt.w	8024006 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024124:	f11c 0801 	adds.w	r8, ip, #1
 8024128:	f53f af6d 	bmi.w	8024006 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802412c:	45c6      	cmp	lr, r8
 802412e:	f6ff af6a 	blt.w	8024006 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024132:	b209      	sxth	r1, r1
 8024134:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8024138:	fa0f f38e 	sxth.w	r3, lr
 802413c:	9100      	str	r1, [sp, #0]
 802413e:	4639      	mov	r1, r7
 8024140:	9301      	str	r3, [sp, #4]
 8024142:	4633      	mov	r3, r6
 8024144:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8024148:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802414a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802414c:	f7ff fc7b 	bl	8023a46 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8024150:	e759      	b.n	8024006 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024152:	bf00      	nop
 8024154:	fffff800 	.word	0xfffff800
 8024158:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802415a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802415e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8024160:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024164:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8024166:	1427      	asrs	r7, r4, #16
 8024168:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802416a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802416e:	142b      	asrs	r3, r5, #16
 8024170:	fb01 7303 	mla	r3, r1, r3, r7
 8024174:	18e7      	adds	r7, r4, r3
 8024176:	5ce3      	ldrb	r3, [r4, r3]
 8024178:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802417c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024180:	2a00      	cmp	r2, #0
 8024182:	f000 8127 	beq.w	80243d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8024186:	f897 e001 	ldrb.w	lr, [r7, #1]
 802418a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802418e:	940d      	str	r4, [sp, #52]	@ 0x34
 8024190:	0e24      	lsrs	r4, r4, #24
 8024192:	9414      	str	r4, [sp, #80]	@ 0x50
 8024194:	b170      	cbz	r0, 80241b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024196:	eb07 0e01 	add.w	lr, r7, r1
 802419a:	5c79      	ldrb	r1, [r7, r1]
 802419c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80241a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80241a2:	0e09      	lsrs	r1, r1, #24
 80241a4:	9111      	str	r1, [sp, #68]	@ 0x44
 80241a6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80241aa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80241ae:	910e      	str	r1, [sp, #56]	@ 0x38
 80241b0:	0e09      	lsrs	r1, r1, #24
 80241b2:	9115      	str	r1, [sp, #84]	@ 0x54
 80241b4:	b292      	uxth	r2, r2
 80241b6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80241b8:	b280      	uxth	r0, r0
 80241ba:	fb02 f800 	mul.w	r8, r2, r0
 80241be:	0112      	lsls	r2, r2, #4
 80241c0:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80241c4:	eba2 0e08 	sub.w	lr, r2, r8
 80241c8:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80241cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80241ce:	b280      	uxth	r0, r0
 80241d0:	fa1f fe8e 	uxth.w	lr, lr
 80241d4:	1a09      	subs	r1, r1, r0
 80241d6:	fb0e f202 	mul.w	r2, lr, r2
 80241da:	b289      	uxth	r1, r1
 80241dc:	fb01 220c 	mla	r2, r1, ip, r2
 80241e0:	fb00 2204 	mla	r2, r0, r4, r2
 80241e4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80241e6:	fb08 2204 	mla	r2, r8, r4, r2
 80241ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80241ee:	2a00      	cmp	r2, #0
 80241f0:	f000 80e5 	beq.w	80243be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80241f4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80241f8:	d019      	beq.n	802422e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80241fa:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80241fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024202:	fb0c fa0a 	mul.w	sl, ip, sl
 8024206:	fb0c fc03 	mul.w	ip, ip, r3
 802420a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802420e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8024212:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8024216:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802421a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802421e:	4453      	add	r3, sl
 8024220:	0a3f      	lsrs	r7, r7, #8
 8024222:	0a1b      	lsrs	r3, r3, #8
 8024224:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8024228:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802422c:	433b      	orrs	r3, r7
 802422e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8024230:	2cff      	cmp	r4, #255	@ 0xff
 8024232:	d020      	beq.n	8024276 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8024234:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024236:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802423a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802423c:	4367      	muls	r7, r4
 802423e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024240:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024244:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024248:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802424a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802424e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024252:	fb04 fa0a 	mul.w	sl, r4, sl
 8024256:	44bc      	add	ip, r7
 8024258:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802425c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024260:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024264:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8024268:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802426c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024270:	ea4c 040a 	orr.w	r4, ip, sl
 8024274:	940d      	str	r4, [sp, #52]	@ 0x34
 8024276:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024278:	2cff      	cmp	r4, #255	@ 0xff
 802427a:	d020      	beq.n	80242be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 802427c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802427e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024282:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024284:	4367      	muls	r7, r4
 8024286:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024288:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802428c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8024290:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024292:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8024296:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802429a:	fb04 fa0a 	mul.w	sl, r4, sl
 802429e:	44bc      	add	ip, r7
 80242a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80242a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80242ac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80242b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80242b8:	ea4c 040a 	orr.w	r4, ip, sl
 80242bc:	9409      	str	r4, [sp, #36]	@ 0x24
 80242be:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80242c0:	2cff      	cmp	r4, #255	@ 0xff
 80242c2:	d020      	beq.n	8024306 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80242c4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80242c6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80242ca:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80242cc:	4367      	muls	r7, r4
 80242ce:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80242d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80242d4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80242d8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80242da:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80242de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80242e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80242e6:	44bc      	add	ip, r7
 80242e8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80242ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80242f4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80242f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8024300:	ea4c 040a 	orr.w	r4, ip, sl
 8024304:	940e      	str	r4, [sp, #56]	@ 0x38
 8024306:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024308:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802430c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8024310:	43d2      	mvns	r2, r2
 8024312:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8024316:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024318:	b2d2      	uxtb	r2, r2
 802431a:	fb0e f707 	mul.w	r7, lr, r7
 802431e:	fb01 770c 	mla	r7, r1, ip, r7
 8024322:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024326:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024328:	fb00 770c 	mla	r7, r0, ip, r7
 802432c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8024330:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024332:	fb08 770c 	mla	r7, r8, ip, r7
 8024336:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802433a:	fb0e fe0c 	mul.w	lr, lr, ip
 802433e:	0a3f      	lsrs	r7, r7, #8
 8024340:	fb01 e303 	mla	r3, r1, r3, lr
 8024344:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024346:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802434a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802434e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024350:	fb00 330a 	mla	r3, r0, sl, r3
 8024354:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8024358:	fb08 3c0c 	mla	ip, r8, ip, r3
 802435c:	f8b9 3000 	ldrh.w	r3, [r9]
 8024360:	1218      	asrs	r0, r3, #8
 8024362:	10d9      	asrs	r1, r3, #3
 8024364:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024368:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802436c:	00db      	lsls	r3, r3, #3
 802436e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024372:	4350      	muls	r0, r2
 8024374:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8024378:	b2db      	uxtb	r3, r3
 802437a:	4351      	muls	r1, r2
 802437c:	ea47 070c 	orr.w	r7, r7, ip
 8024380:	4353      	muls	r3, r2
 8024382:	1c42      	adds	r2, r0, #1
 8024384:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024388:	0c3a      	lsrs	r2, r7, #16
 802438a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802438e:	4a18      	ldr	r2, [pc, #96]	@ (80243f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8024390:	b2c0      	uxtb	r0, r0
 8024392:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8024396:	1c4a      	adds	r2, r1, #1
 8024398:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802439c:	0a3a      	lsrs	r2, r7, #8
 802439e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80243a2:	00c9      	lsls	r1, r1, #3
 80243a4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80243a8:	4301      	orrs	r1, r0
 80243aa:	1c58      	adds	r0, r3, #1
 80243ac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80243b0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80243b4:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80243b8:	4308      	orrs	r0, r1
 80243ba:	f8a9 0000 	strh.w	r0, [r9]
 80243be:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80243c0:	f109 0902 	add.w	r9, r9, #2
 80243c4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80243c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80243ca:	441a      	add	r2, r3
 80243cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80243ce:	9225      	str	r2, [sp, #148]	@ 0x94
 80243d0:	441d      	add	r5, r3
 80243d2:	e64c      	b.n	802406e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80243d4:	2800      	cmp	r0, #0
 80243d6:	f43f aeed 	beq.w	80241b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80243da:	5c79      	ldrb	r1, [r7, r1]
 80243dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80243e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80243e2:	0e09      	lsrs	r1, r1, #24
 80243e4:	9111      	str	r1, [sp, #68]	@ 0x44
 80243e6:	e6e5      	b.n	80241b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80243e8:	b01b      	add	sp, #108	@ 0x6c
 80243ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243ee:	bf00      	nop
 80243f0:	fffff800 	.word	0xfffff800

080243f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80243f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243f8:	b085      	sub	sp, #20
 80243fa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80243fe:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8024402:	2800      	cmp	r0, #0
 8024404:	9103      	str	r1, [sp, #12]
 8024406:	fb00 7406 	mla	r4, r0, r6, r7
 802440a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 802440e:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8024412:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8024416:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802441a:	eb03 0904 	add.w	r9, r3, r4
 802441e:	9501      	str	r5, [sp, #4]
 8024420:	f2c0 8150 	blt.w	80246c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024424:	4583      	cmp	fp, r0
 8024426:	f340 814d 	ble.w	80246c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 802442a:	2f00      	cmp	r7, #0
 802442c:	f2c0 8146 	blt.w	80246bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024430:	42be      	cmp	r6, r7
 8024432:	f340 8143 	ble.w	80246bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024436:	f813 c004 	ldrb.w	ip, [r3, r4]
 802443a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802443e:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8024442:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024446:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 802444a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802444e:	4355      	muls	r5, r2
 8024450:	fb0c f203 	mul.w	r2, ip, r3
 8024454:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8024458:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 802445c:	441d      	add	r5, r3
 802445e:	f102 0320 	add.w	r3, r2, #32
 8024462:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024466:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802446a:	0a1b      	lsrs	r3, r3, #8
 802446c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024470:	431c      	orrs	r4, r3
 8024472:	1c7b      	adds	r3, r7, #1
 8024474:	f100 812b 	bmi.w	80246ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8024478:	429e      	cmp	r6, r3
 802447a:	f340 8128 	ble.w	80246ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802447e:	2900      	cmp	r1, #0
 8024480:	f000 8128 	beq.w	80246d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8024484:	9a01      	ldr	r2, [sp, #4]
 8024486:	f899 3001 	ldrb.w	r3, [r9, #1]
 802448a:	8855      	ldrh	r5, [r2, #2]
 802448c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8024490:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8024494:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024498:	fb08 f802 	mul.w	r8, r8, r2
 802449c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80244a0:	435d      	muls	r5, r3
 80244a2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80244a6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80244aa:	44d0      	add	r8, sl
 80244ac:	f105 0a20 	add.w	sl, r5, #32
 80244b0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80244b4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80244b8:	0a2d      	lsrs	r5, r5, #8
 80244ba:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80244be:	432a      	orrs	r2, r5
 80244c0:	3001      	adds	r0, #1
 80244c2:	f100 810d 	bmi.w	80246e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80244c6:	4583      	cmp	fp, r0
 80244c8:	f340 810a 	ble.w	80246e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80244cc:	f1be 0f00 	cmp.w	lr, #0
 80244d0:	f000 810b 	beq.w	80246ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 80244d4:	2f00      	cmp	r7, #0
 80244d6:	f2c0 8100 	blt.w	80246da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80244da:	42be      	cmp	r6, r7
 80244dc:	f340 80fd 	ble.w	80246da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80244e0:	9801      	ldr	r0, [sp, #4]
 80244e2:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80244e6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80244ea:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80244ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80244f2:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 80244f6:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 80244fa:	fb0a fa00 	mul.w	sl, sl, r0
 80244fe:	fb05 f808 	mul.w	r8, r5, r8
 8024502:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8024506:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802450a:	4482      	add	sl, r0
 802450c:	f108 0020 	add.w	r0, r8, #32
 8024510:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024514:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8024518:	0a00      	lsrs	r0, r0, #8
 802451a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802451e:	ea4b 0b00 	orr.w	fp, fp, r0
 8024522:	3701      	adds	r7, #1
 8024524:	f100 80e6 	bmi.w	80246f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8024528:	42be      	cmp	r6, r7
 802452a:	f340 80e3 	ble.w	80246f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802452e:	2900      	cmp	r1, #0
 8024530:	f000 80e3 	beq.w	80246fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8024534:	3601      	adds	r6, #1
 8024536:	9801      	ldr	r0, [sp, #4]
 8024538:	f819 7006 	ldrb.w	r7, [r9, r6]
 802453c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8024540:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024544:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 8024548:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802454c:	fb09 f906 	mul.w	r9, r9, r6
 8024550:	fb07 f800 	mul.w	r8, r7, r0
 8024554:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8024558:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802455c:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8024560:	44d1      	add	r9, sl
 8024562:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8024566:	f108 0020 	add.w	r0, r8, #32
 802456a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802456e:	0a00      	lsrs	r0, r0, #8
 8024570:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024574:	4330      	orrs	r0, r6
 8024576:	b28e      	uxth	r6, r1
 8024578:	fa1f f98e 	uxth.w	r9, lr
 802457c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8024580:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8024584:	fb06 f809 	mul.w	r8, r6, r9
 8024588:	0136      	lsls	r6, r6, #4
 802458a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802458e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8024592:	9601      	str	r6, [sp, #4]
 8024594:	ea4a 0404 	orr.w	r4, sl, r4
 8024598:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802459c:	fa1f f689 	uxth.w	r6, r9
 80245a0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80245a4:	fb11 f90e 	smulbb	r9, r1, lr
 80245a8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80245ac:	9602      	str	r6, [sp, #8]
 80245ae:	4626      	mov	r6, r4
 80245b0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80245b4:	f1ce 0410 	rsb	r4, lr, #16
 80245b8:	ea4a 0202 	orr.w	r2, sl, r2
 80245bc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80245c0:	1a64      	subs	r4, r4, r1
 80245c2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80245c6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80245ca:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80245ce:	434a      	muls	r2, r1
 80245d0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80245d4:	ea4a 0000 	orr.w	r0, sl, r0
 80245d8:	9903      	ldr	r1, [sp, #12]
 80245da:	fb04 2406 	mla	r4, r4, r6, r2
 80245de:	9e02      	ldr	r6, [sp, #8]
 80245e0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80245e4:	fb09 4200 	mla	r2, r9, r0, r4
 80245e8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80245ec:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80245f0:	8808      	ldrh	r0, [r1, #0]
 80245f2:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80245f6:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 80245fa:	ea44 0b0b 	orr.w	fp, r4, fp
 80245fe:	9c01      	ldr	r4, [sp, #4]
 8024600:	b289      	uxth	r1, r1
 8024602:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8024606:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802460a:	1ba4      	subs	r4, r4, r6
 802460c:	9e01      	ldr	r6, [sp, #4]
 802460e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024612:	eba6 0608 	sub.w	r6, r6, r8
 8024616:	b2a4      	uxth	r4, r4
 8024618:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802461c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024620:	b2b6      	uxth	r6, r6
 8024622:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8024626:	4373      	muls	r3, r6
 8024628:	ea42 0e0e 	orr.w	lr, r2, lr
 802462c:	fb0c 3304 	mla	r3, ip, r4, r3
 8024630:	9c02      	ldr	r4, [sp, #8]
 8024632:	fa1f f28e 	uxth.w	r2, lr
 8024636:	fb04 3505 	mla	r5, r4, r5, r3
 802463a:	10d4      	asrs	r4, r2, #3
 802463c:	fb08 5707 	mla	r7, r8, r7, r5
 8024640:	1215      	asrs	r5, r2, #8
 8024642:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8024646:	00d2      	lsls	r2, r2, #3
 8024648:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802464c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024650:	b2d2      	uxtb	r2, r2
 8024652:	434f      	muls	r7, r1
 8024654:	1c7b      	adds	r3, r7, #1
 8024656:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802465a:	1203      	asrs	r3, r0, #8
 802465c:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8024660:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8024664:	b2ff      	uxtb	r7, r7
 8024666:	fb13 f307 	smulbb	r3, r3, r7
 802466a:	fb05 3501 	mla	r5, r5, r1, r3
 802466e:	10c3      	asrs	r3, r0, #3
 8024670:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8024674:	b2ad      	uxth	r5, r5
 8024676:	fb13 f307 	smulbb	r3, r3, r7
 802467a:	fb04 3401 	mla	r4, r4, r1, r3
 802467e:	00c3      	lsls	r3, r0, #3
 8024680:	b2db      	uxtb	r3, r3
 8024682:	b2a4      	uxth	r4, r4
 8024684:	fb13 f307 	smulbb	r3, r3, r7
 8024688:	fb02 3101 	mla	r1, r2, r1, r3
 802468c:	1c6b      	adds	r3, r5, #1
 802468e:	1c62      	adds	r2, r4, #1
 8024690:	b289      	uxth	r1, r1
 8024692:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024696:	1c4b      	adds	r3, r1, #1
 8024698:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802469c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80246a0:	9a03      	ldr	r2, [sp, #12]
 80246a2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80246a6:	0964      	lsrs	r4, r4, #5
 80246a8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80246ac:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80246b0:	432b      	orrs	r3, r5
 80246b2:	4323      	orrs	r3, r4
 80246b4:	8013      	strh	r3, [r2, #0]
 80246b6:	b005      	add	sp, #20
 80246b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246bc:	f04f 0c00 	mov.w	ip, #0
 80246c0:	4664      	mov	r4, ip
 80246c2:	e6d6      	b.n	8024472 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80246c4:	2300      	movs	r3, #0
 80246c6:	469c      	mov	ip, r3
 80246c8:	461a      	mov	r2, r3
 80246ca:	461c      	mov	r4, r3
 80246cc:	e6f8      	b.n	80244c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80246ce:	2300      	movs	r3, #0
 80246d0:	461a      	mov	r2, r3
 80246d2:	e6f5      	b.n	80244c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80246d4:	460b      	mov	r3, r1
 80246d6:	460a      	mov	r2, r1
 80246d8:	e6f2      	b.n	80244c0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80246da:	2500      	movs	r5, #0
 80246dc:	46ab      	mov	fp, r5
 80246de:	e720      	b.n	8024522 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 80246e0:	2700      	movs	r7, #0
 80246e2:	463d      	mov	r5, r7
 80246e4:	4638      	mov	r0, r7
 80246e6:	46bb      	mov	fp, r7
 80246e8:	e745      	b.n	8024576 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80246ea:	4677      	mov	r7, lr
 80246ec:	4675      	mov	r5, lr
 80246ee:	4670      	mov	r0, lr
 80246f0:	46f3      	mov	fp, lr
 80246f2:	e740      	b.n	8024576 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80246f4:	2700      	movs	r7, #0
 80246f6:	4638      	mov	r0, r7
 80246f8:	e73d      	b.n	8024576 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80246fa:	460f      	mov	r7, r1
 80246fc:	4608      	mov	r0, r1
 80246fe:	e73a      	b.n	8024576 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08024700 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024704:	b097      	sub	sp, #92	@ 0x5c
 8024706:	9214      	str	r2, [sp, #80]	@ 0x50
 8024708:	9308      	str	r3, [sp, #32]
 802470a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802470c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8024710:	9015      	str	r0, [sp, #84]	@ 0x54
 8024712:	9312      	str	r3, [sp, #72]	@ 0x48
 8024714:	6850      	ldr	r0, [r2, #4]
 8024716:	9111      	str	r1, [sp, #68]	@ 0x44
 8024718:	6812      	ldr	r2, [r2, #0]
 802471a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802471e:	fb00 1303 	mla	r3, r0, r3, r1
 8024722:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024726:	9309      	str	r3, [sp, #36]	@ 0x24
 8024728:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802472a:	681b      	ldr	r3, [r3, #0]
 802472c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802472e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024730:	685b      	ldr	r3, [r3, #4]
 8024732:	930c      	str	r3, [sp, #48]	@ 0x30
 8024734:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8024738:	930a      	str	r3, [sp, #40]	@ 0x28
 802473a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802473c:	2b00      	cmp	r3, #0
 802473e:	dc03      	bgt.n	8024748 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8024740:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024742:	2b00      	cmp	r3, #0
 8024744:	f340 83cd 	ble.w	8024ee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024748:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802474a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802474e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024752:	1e48      	subs	r0, r1, #1
 8024754:	1e55      	subs	r5, r2, #1
 8024756:	9b08      	ldr	r3, [sp, #32]
 8024758:	2b00      	cmp	r3, #0
 802475a:	f340 81a5 	ble.w	8024aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802475e:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 8024760:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024762:	1436      	asrs	r6, r6, #16
 8024764:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024768:	d406      	bmi.n	8024778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802476a:	4286      	cmp	r6, r0
 802476c:	da04      	bge.n	8024778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802476e:	2b00      	cmp	r3, #0
 8024770:	db02      	blt.n	8024778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024772:	42ab      	cmp	r3, r5
 8024774:	f2c0 8199 	blt.w	8024aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024778:	3601      	adds	r6, #1
 802477a:	f100 8186 	bmi.w	8024a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802477e:	42b1      	cmp	r1, r6
 8024780:	f2c0 8183 	blt.w	8024a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024784:	3301      	adds	r3, #1
 8024786:	f100 8180 	bmi.w	8024a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802478a:	429a      	cmp	r2, r3
 802478c:	f2c0 817d 	blt.w	8024a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024790:	9b08      	ldr	r3, [sp, #32]
 8024792:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8024796:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8024798:	9313      	str	r3, [sp, #76]	@ 0x4c
 802479a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802479c:	2b00      	cmp	r3, #0
 802479e:	f340 81a6 	ble.w	8024aee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80247a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80247a4:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 80247a6:	1418      	asrs	r0, r3, #16
 80247a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80247aa:	142d      	asrs	r5, r5, #16
 80247ac:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80247b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80247b2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80247b6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80247b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80247bc:	f100 81fa 	bmi.w	8024bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80247c0:	f102 3eff 	add.w	lr, r2, #4294967295
 80247c4:	4575      	cmp	r5, lr
 80247c6:	f280 81f5 	bge.w	8024bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80247ca:	2800      	cmp	r0, #0
 80247cc:	f2c0 81f2 	blt.w	8024bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80247d0:	f103 3eff 	add.w	lr, r3, #4294967295
 80247d4:	4570      	cmp	r0, lr
 80247d6:	f280 81ed 	bge.w	8024bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80247da:	b212      	sxth	r2, r2
 80247dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80247de:	fa1f fe81 	uxth.w	lr, r1
 80247e2:	fb00 5002 	mla	r0, r0, r2, r5
 80247e6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80247ea:	eb03 0a00 	add.w	sl, r3, r0
 80247ee:	f813 9000 	ldrb.w	r9, [r3, r0]
 80247f2:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80247f6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80247fa:	b29b      	uxth	r3, r3
 80247fc:	f1bc 0f00 	cmp.w	ip, #0
 8024800:	f000 81bb 	beq.w	8024b7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8024804:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024808:	eb0a 0b02 	add.w	fp, sl, r2
 802480c:	fa1f fa8c 	uxth.w	sl, ip
 8024810:	940d      	str	r4, [sp, #52]	@ 0x34
 8024812:	fb0a fe0e 	mul.w	lr, sl, lr
 8024816:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802481a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802481e:	eba5 050e 	sub.w	r5, r5, lr
 8024822:	940e      	str	r4, [sp, #56]	@ 0x38
 8024824:	fa1f fa8a 	uxth.w	sl, sl
 8024828:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802482a:	b2ad      	uxth	r5, r5
 802482c:	eba3 030a 	sub.w	r3, r3, sl
 8024830:	fb08 f505 	mul.w	r5, r8, r5
 8024834:	b29b      	uxth	r3, r3
 8024836:	fb09 5303 	mla	r3, r9, r3, r5
 802483a:	fb0a 3304 	mla	r3, sl, r4, r3
 802483e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024840:	fb0e 3304 	mla	r3, lr, r4, r3
 8024844:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024848:	2b00      	cmp	r3, #0
 802484a:	f000 8111 	beq.w	8024a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802484e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024850:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024854:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024858:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802485c:	f000 8192 	beq.w	8024b84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8024860:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8024864:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024868:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802486c:	fb0a fe0e 	mul.w	lr, sl, lr
 8024870:	fb09 f000 	mul.w	r0, r9, r0
 8024874:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8024878:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802487c:	f100 0b20 	add.w	fp, r0, #32
 8024880:	44ce      	add	lr, r9
 8024882:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024886:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802488a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802488e:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8024892:	ea4e 0909 	orr.w	r9, lr, r9
 8024896:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802489a:	8868      	ldrh	r0, [r5, #2]
 802489c:	d019      	beq.n	80248d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802489e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80248a2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80248a6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80248aa:	fb0a fe0e 	mul.w	lr, sl, lr
 80248ae:	fb08 f800 	mul.w	r8, r8, r0
 80248b2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80248b6:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80248ba:	f108 0b20 	add.w	fp, r8, #32
 80248be:	4486      	add	lr, r0
 80248c0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80248c4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80248c8:	0a00      	lsrs	r0, r0, #8
 80248ca:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80248ce:	ea4e 0000 	orr.w	r0, lr, r0
 80248d2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80248d6:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80248da:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80248de:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80248e2:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80248e6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80248ea:	ea4e 0909 	orr.w	r9, lr, r9
 80248ee:	ea4a 0000 	orr.w	r0, sl, r0
 80248f2:	f1bc 0f00 	cmp.w	ip, #0
 80248f6:	f000 8147 	beq.w	8024b88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80248fa:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80248fe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024900:	3a01      	subs	r2, #1
 8024902:	2cff      	cmp	r4, #255	@ 0xff
 8024904:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024908:	f102 0202 	add.w	r2, r2, #2
 802490c:	eb05 0e02 	add.w	lr, r5, r2
 8024910:	5aaa      	ldrh	r2, [r5, r2]
 8024912:	d018      	beq.n	8024946 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8024914:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8024918:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802491c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024920:	fb04 fa02 	mul.w	sl, r4, r2
 8024924:	fb08 f805 	mul.w	r8, r8, r5
 8024928:	f10a 0520 	add.w	r5, sl, #32
 802492c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8024930:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024934:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8024938:	4442      	add	r2, r8
 802493a:	0a2d      	lsrs	r5, r5, #8
 802493c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8024940:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024944:	432a      	orrs	r2, r5
 8024946:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024948:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802494c:	2cff      	cmp	r4, #255	@ 0xff
 802494e:	d01a      	beq.n	8024986 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8024950:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8024954:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024958:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802495c:	fb04 fa05 	mul.w	sl, r4, r5
 8024960:	fb08 f80e 	mul.w	r8, r8, lr
 8024964:	f10a 0e20 	add.w	lr, sl, #32
 8024968:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802496c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024970:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024974:	4445      	add	r5, r8
 8024976:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802497a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802497e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8024982:	ea45 050e 	orr.w	r5, r5, lr
 8024986:	fb1c fe01 	smulbb	lr, ip, r1
 802498a:	f1cc 0810 	rsb	r8, ip, #16
 802498e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024992:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024996:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802499a:	eba8 0801 	sub.w	r8, r8, r1
 802499e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80249a2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80249a6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80249aa:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 80249ae:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80249b2:	ea4a 0202 	orr.w	r2, sl, r2
 80249b6:	4341      	muls	r1, r0
 80249b8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80249bc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80249c0:	fb09 1108 	mla	r1, r9, r8, r1
 80249c4:	ea4b 0505 	orr.w	r5, fp, r5
 80249c8:	fb0c 1102 	mla	r1, ip, r2, r1
 80249cc:	fb0e 1e05 	mla	lr, lr, r5, r1
 80249d0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80249d4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80249d8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80249dc:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80249e0:	ea42 0e0e 	orr.w	lr, r2, lr
 80249e4:	fa1f f28e 	uxth.w	r2, lr
 80249e8:	2bff      	cmp	r3, #255	@ 0xff
 80249ea:	d103      	bne.n	80249f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80249ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80249ee:	29ff      	cmp	r1, #255	@ 0xff
 80249f0:	f000 80de 	beq.w	8024bb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80249f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80249f6:	1215      	asrs	r5, r2, #8
 80249f8:	8838      	ldrh	r0, [r7, #0]
 80249fa:	434b      	muls	r3, r1
 80249fc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024a00:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024a02:	f103 0c01 	add.w	ip, r3, #1
 8024a06:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8024a0a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8024a0e:	fa5f fc83 	uxtb.w	ip, r3
 8024a12:	1203      	asrs	r3, r0, #8
 8024a14:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8024a18:	fb13 f30c 	smulbb	r3, r3, ip
 8024a1c:	fb05 3501 	mla	r5, r5, r1, r3
 8024a20:	10c3      	asrs	r3, r0, #3
 8024a22:	10d1      	asrs	r1, r2, #3
 8024a24:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8024a28:	00d2      	lsls	r2, r2, #3
 8024a2a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024a2e:	b2ad      	uxth	r5, r5
 8024a30:	fb13 f30c 	smulbb	r3, r3, ip
 8024a34:	b2d2      	uxtb	r2, r2
 8024a36:	fb01 3104 	mla	r1, r1, r4, r3
 8024a3a:	00c3      	lsls	r3, r0, #3
 8024a3c:	b2db      	uxtb	r3, r3
 8024a3e:	b289      	uxth	r1, r1
 8024a40:	fb13 f30c 	smulbb	r3, r3, ip
 8024a44:	fb02 3304 	mla	r3, r2, r4, r3
 8024a48:	b29a      	uxth	r2, r3
 8024a4a:	1c6b      	adds	r3, r5, #1
 8024a4c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024a50:	1c53      	adds	r3, r2, #1
 8024a52:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024a56:	1c4a      	adds	r2, r1, #1
 8024a58:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024a5c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024a60:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024a64:	0949      	lsrs	r1, r1, #5
 8024a66:	432b      	orrs	r3, r5
 8024a68:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024a6c:	430b      	orrs	r3, r1
 8024a6e:	803b      	strh	r3, [r7, #0]
 8024a70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024a72:	3702      	adds	r7, #2
 8024a74:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024a76:	4413      	add	r3, r2
 8024a78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024a7a:	9321      	str	r3, [sp, #132]	@ 0x84
 8024a7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024a7e:	441a      	add	r2, r3
 8024a80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024a82:	3b01      	subs	r3, #1
 8024a84:	9222      	str	r2, [sp, #136]	@ 0x88
 8024a86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024a88:	e687      	b.n	802479a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024a8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024a8c:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8024a8e:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8024a90:	4433      	add	r3, r6
 8024a92:	9321      	str	r3, [sp, #132]	@ 0x84
 8024a94:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024a96:	441c      	add	r4, r3
 8024a98:	9b08      	ldr	r3, [sp, #32]
 8024a9a:	3b01      	subs	r3, #1
 8024a9c:	9422      	str	r4, [sp, #136]	@ 0x88
 8024a9e:	9308      	str	r3, [sp, #32]
 8024aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024aa2:	3302      	adds	r3, #2
 8024aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8024aa6:	e656      	b.n	8024756 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8024aa8:	d028      	beq.n	8024afc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8024aaa:	9b08      	ldr	r3, [sp, #32]
 8024aac:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024aae:	3b01      	subs	r3, #1
 8024ab0:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8024ab2:	fb00 5003 	mla	r0, r0, r3, r5
 8024ab6:	1400      	asrs	r0, r0, #16
 8024ab8:	f53f ae6a 	bmi.w	8024790 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024abc:	3901      	subs	r1, #1
 8024abe:	4288      	cmp	r0, r1
 8024ac0:	f6bf ae66 	bge.w	8024790 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024ac4:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8024ac6:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8024ac8:	fb01 0303 	mla	r3, r1, r3, r0
 8024acc:	141b      	asrs	r3, r3, #16
 8024ace:	f53f ae5f 	bmi.w	8024790 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024ad2:	3a01      	subs	r2, #1
 8024ad4:	4293      	cmp	r3, r2
 8024ad6:	f6bf ae5b 	bge.w	8024790 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024ada:	9b08      	ldr	r3, [sp, #32]
 8024adc:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8024ae0:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8024ae4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024ae6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024ae8:	2b00      	cmp	r3, #0
 8024aea:	f300 8082 	bgt.w	8024bf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8024aee:	9b08      	ldr	r3, [sp, #32]
 8024af0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024af6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024afa:	9309      	str	r3, [sp, #36]	@ 0x24
 8024afc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024afe:	2b00      	cmp	r3, #0
 8024b00:	f340 81ef 	ble.w	8024ee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024b04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024b08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024b0a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024b0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024b12:	eef0 6a62 	vmov.f32	s13, s5
 8024b16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024b1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024b1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b22:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8024b26:	eef0 6a43 	vmov.f32	s13, s6
 8024b2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b2e:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8024b32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024b36:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024b3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024b3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024b42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024b46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024b4a:	ee12 2a90 	vmov	r2, s5
 8024b4e:	eef0 2a47 	vmov.f32	s5, s14
 8024b52:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b56:	ee13 2a10 	vmov	r2, s6
 8024b5a:	9323      	str	r3, [sp, #140]	@ 0x8c
 8024b5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024b5e:	eeb0 3a67 	vmov.f32	s6, s15
 8024b62:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b66:	9324      	str	r3, [sp, #144]	@ 0x90
 8024b68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024b6a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024b6c:	3b01      	subs	r3, #1
 8024b6e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024b70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024b72:	bf08      	it	eq
 8024b74:	4613      	moveq	r3, r2
 8024b76:	9308      	str	r3, [sp, #32]
 8024b78:	e5df      	b.n	802473a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8024b7a:	fb08 f505 	mul.w	r5, r8, r5
 8024b7e:	fb09 5303 	mla	r3, r9, r3, r5
 8024b82:	e65f      	b.n	8024844 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8024b84:	4681      	mov	r9, r0
 8024b86:	e686      	b.n	8024896 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024b88:	f1c1 0210 	rsb	r2, r1, #16
 8024b8c:	4341      	muls	r1, r0
 8024b8e:	fb09 1902 	mla	r9, r9, r2, r1
 8024b92:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024b96:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8024b9a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8024b9e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024ba2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8024ba6:	ea42 0909 	orr.w	r9, r2, r9
 8024baa:	fa1f f289 	uxth.w	r2, r9
 8024bae:	e71b      	b.n	80249e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8024bb0:	803a      	strh	r2, [r7, #0]
 8024bb2:	e75d      	b.n	8024a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024bb4:	f115 0e01 	adds.w	lr, r5, #1
 8024bb8:	f53f af5a 	bmi.w	8024a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024bbc:	4572      	cmp	r2, lr
 8024bbe:	f6ff af57 	blt.w	8024a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024bc2:	f110 0e01 	adds.w	lr, r0, #1
 8024bc6:	f53f af53 	bmi.w	8024a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024bca:	4573      	cmp	r3, lr
 8024bcc:	f6ff af50 	blt.w	8024a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024bd0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024bd2:	b21b      	sxth	r3, r3
 8024bd4:	b212      	sxth	r2, r2
 8024bd6:	9502      	str	r5, [sp, #8]
 8024bd8:	9301      	str	r3, [sp, #4]
 8024bda:	9200      	str	r2, [sp, #0]
 8024bdc:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8024be0:	e9cd c405 	strd	ip, r4, [sp, #20]
 8024be4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8024be8:	4639      	mov	r1, r7
 8024bea:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8024bec:	f7ff fc02 	bl	80243f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8024bf0:	e73e      	b.n	8024a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024bf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024bf4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024bf8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024bfa:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8024bfe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024c00:	fa1f fc82 	uxth.w	ip, r2
 8024c04:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c08:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024c0a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8024c0e:	141f      	asrs	r7, r3, #16
 8024c10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024c12:	141b      	asrs	r3, r3, #16
 8024c14:	fb01 3707 	mla	r7, r1, r7, r3
 8024c18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c1a:	eb03 0a07 	add.w	sl, r3, r7
 8024c1e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8024c22:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8024c26:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024c2a:	b29b      	uxth	r3, r3
 8024c2c:	2d00      	cmp	r5, #0
 8024c2e:	f000 813d 	beq.w	8024eac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8024c32:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8024c36:	eb0a 0b01 	add.w	fp, sl, r1
 8024c3a:	fa1f fa85 	uxth.w	sl, r5
 8024c3e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8024c40:	fb0a fc0c 	mul.w	ip, sl, ip
 8024c44:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024c48:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8024c4c:	eba0 000c 	sub.w	r0, r0, ip
 8024c50:	9410      	str	r4, [sp, #64]	@ 0x40
 8024c52:	fa1f fa8a 	uxth.w	sl, sl
 8024c56:	b280      	uxth	r0, r0
 8024c58:	eba3 030a 	sub.w	r3, r3, sl
 8024c5c:	fb08 f000 	mul.w	r0, r8, r0
 8024c60:	b29b      	uxth	r3, r3
 8024c62:	fb09 0303 	mla	r3, r9, r3, r0
 8024c66:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024c68:	fb0a 3300 	mla	r3, sl, r0, r3
 8024c6c:	fb0c 3304 	mla	r3, ip, r4, r3
 8024c70:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c74:	2b00      	cmp	r3, #0
 8024c76:	f000 810b 	beq.w	8024e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8024c7a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8024c7c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024c80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024c82:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8024c86:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8024c8a:	f000 8114 	beq.w	8024eb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8024c8e:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8024c92:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024c96:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024c9a:	fb0a fc0c 	mul.w	ip, sl, ip
 8024c9e:	fb09 f707 	mul.w	r7, r9, r7
 8024ca2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8024ca6:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8024caa:	f107 0b20 	add.w	fp, r7, #32
 8024cae:	44cc      	add	ip, r9
 8024cb0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8024cb4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024cb8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024cbc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8024cc0:	ea4c 0909 	orr.w	r9, ip, r9
 8024cc4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8024cc8:	8847      	ldrh	r7, [r0, #2]
 8024cca:	d019      	beq.n	8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8024ccc:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8024cd0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024cd4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024cd8:	fb0a fc0c 	mul.w	ip, sl, ip
 8024cdc:	fb08 f807 	mul.w	r8, r8, r7
 8024ce0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8024ce4:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8024ce8:	f108 0b20 	add.w	fp, r8, #32
 8024cec:	44bc      	add	ip, r7
 8024cee:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8024cf2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024cf6:	0a3f      	lsrs	r7, r7, #8
 8024cf8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024cfc:	ea4c 0707 	orr.w	r7, ip, r7
 8024d00:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8024d04:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8024d08:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024d0c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8024d10:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024d14:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024d18:	ea4c 0909 	orr.w	r9, ip, r9
 8024d1c:	ea4a 0707 	orr.w	r7, sl, r7
 8024d20:	2d00      	cmp	r5, #0
 8024d22:	f000 80ca 	beq.w	8024eba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8024d26:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8024d2a:	3901      	subs	r1, #1
 8024d2c:	0049      	lsls	r1, r1, #1
 8024d2e:	3102      	adds	r1, #2
 8024d30:	eb00 0c01 	add.w	ip, r0, r1
 8024d34:	5a41      	ldrh	r1, [r0, r1]
 8024d36:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024d38:	28ff      	cmp	r0, #255	@ 0xff
 8024d3a:	d019      	beq.n	8024d70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8024d3c:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8024d40:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8024d42:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024d46:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024d4a:	fb04 fa01 	mul.w	sl, r4, r1
 8024d4e:	fb08 f800 	mul.w	r8, r8, r0
 8024d52:	f10a 0020 	add.w	r0, sl, #32
 8024d56:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8024d5a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024d5e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024d62:	4441      	add	r1, r8
 8024d64:	0a00      	lsrs	r0, r0, #8
 8024d66:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8024d6a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024d6e:	4301      	orrs	r1, r0
 8024d70:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8024d72:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024d76:	2cff      	cmp	r4, #255	@ 0xff
 8024d78:	d01a      	beq.n	8024db0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8024d7a:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8024d7e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024d82:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024d86:	fb04 fa00 	mul.w	sl, r4, r0
 8024d8a:	fb08 f80c 	mul.w	r8, r8, ip
 8024d8e:	f10a 0c20 	add.w	ip, sl, #32
 8024d92:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8024d96:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024d9a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8024d9e:	4440      	add	r0, r8
 8024da0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024da4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8024da8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8024dac:	ea40 000c 	orr.w	r0, r0, ip
 8024db0:	fb15 fc02 	smulbb	ip, r5, r2
 8024db4:	f1c5 0810 	rsb	r8, r5, #16
 8024db8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024dbc:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8024dc0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8024dc4:	eba8 0802 	sub.w	r8, r8, r2
 8024dc8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024dcc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8024dd0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8024dd4:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024dd8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8024ddc:	ea4a 0101 	orr.w	r1, sl, r1
 8024de0:	437a      	muls	r2, r7
 8024de2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8024de6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8024dea:	fb09 2208 	mla	r2, r9, r8, r2
 8024dee:	ea4b 0000 	orr.w	r0, fp, r0
 8024df2:	fb05 2201 	mla	r2, r5, r1, r2
 8024df6:	fb0c 2200 	mla	r2, ip, r0, r2
 8024dfa:	0d57      	lsrs	r7, r2, #21
 8024dfc:	0952      	lsrs	r2, r2, #5
 8024dfe:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024e02:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024e06:	433a      	orrs	r2, r7
 8024e08:	2bff      	cmp	r3, #255	@ 0xff
 8024e0a:	b292      	uxth	r2, r2
 8024e0c:	d102      	bne.n	8024e14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8024e0e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8024e10:	29ff      	cmp	r1, #255	@ 0xff
 8024e12:	d063      	beq.n	8024edc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8024e14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024e16:	1215      	asrs	r5, r2, #8
 8024e18:	f8be 1000 	ldrh.w	r1, [lr]
 8024e1c:	4343      	muls	r3, r0
 8024e1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024e20:	10cf      	asrs	r7, r1, #3
 8024e22:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024e26:	1c58      	adds	r0, r3, #1
 8024e28:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8024e2c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8024e30:	1208      	asrs	r0, r1, #8
 8024e32:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8024e36:	00c9      	lsls	r1, r1, #3
 8024e38:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024e3c:	b2db      	uxtb	r3, r3
 8024e3e:	b2c9      	uxtb	r1, r1
 8024e40:	fb10 f003 	smulbb	r0, r0, r3
 8024e44:	fb11 f103 	smulbb	r1, r1, r3
 8024e48:	fb05 0504 	mla	r5, r5, r4, r0
 8024e4c:	10d0      	asrs	r0, r2, #3
 8024e4e:	fb17 f703 	smulbb	r7, r7, r3
 8024e52:	00d2      	lsls	r2, r2, #3
 8024e54:	b2ad      	uxth	r5, r5
 8024e56:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8024e5a:	b2d2      	uxtb	r2, r2
 8024e5c:	fb00 7004 	mla	r0, r0, r4, r7
 8024e60:	1c6b      	adds	r3, r5, #1
 8024e62:	fb02 1204 	mla	r2, r2, r4, r1
 8024e66:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024e6a:	b292      	uxth	r2, r2
 8024e6c:	b280      	uxth	r0, r0
 8024e6e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024e72:	1c57      	adds	r7, r2, #1
 8024e74:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024e78:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024e7c:	433d      	orrs	r5, r7
 8024e7e:	1c47      	adds	r7, r0, #1
 8024e80:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024e84:	097f      	lsrs	r7, r7, #5
 8024e86:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8024e8a:	433d      	orrs	r5, r7
 8024e8c:	f8ae 5000 	strh.w	r5, [lr]
 8024e90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024e92:	f10e 0e02 	add.w	lr, lr, #2
 8024e96:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024e98:	4413      	add	r3, r2
 8024e9a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8024e9c:	9321      	str	r3, [sp, #132]	@ 0x84
 8024e9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024ea0:	441a      	add	r2, r3
 8024ea2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024ea4:	3b01      	subs	r3, #1
 8024ea6:	9222      	str	r2, [sp, #136]	@ 0x88
 8024ea8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024eaa:	e61c      	b.n	8024ae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8024eac:	fb08 f000 	mul.w	r0, r8, r0
 8024eb0:	fb09 0303 	mla	r3, r9, r3, r0
 8024eb4:	e6dc      	b.n	8024c70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8024eb6:	46b9      	mov	r9, r7
 8024eb8:	e704      	b.n	8024cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8024eba:	f1c2 0110 	rsb	r1, r2, #16
 8024ebe:	437a      	muls	r2, r7
 8024ec0:	fb09 2901 	mla	r9, r9, r1, r2
 8024ec4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024ec8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8024ecc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8024ed0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8024ed4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024ed8:	4302      	orrs	r2, r0
 8024eda:	e795      	b.n	8024e08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8024edc:	f8ae 2000 	strh.w	r2, [lr]
 8024ee0:	e7d6      	b.n	8024e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8024ee2:	b017      	add	sp, #92	@ 0x5c
 8024ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024ee8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024eec:	b085      	sub	sp, #20
 8024eee:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8024ef2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8024ef6:	2800      	cmp	r0, #0
 8024ef8:	9103      	str	r1, [sp, #12]
 8024efa:	fb00 7406 	mla	r4, r0, r6, r7
 8024efe:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8024f02:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8024f06:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8024f0a:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8024f0e:	eb02 0904 	add.w	r9, r2, r4
 8024f12:	9501      	str	r5, [sp, #4]
 8024f14:	f2c0 8141 	blt.w	802519a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8024f18:	4583      	cmp	fp, r0
 8024f1a:	f340 813e 	ble.w	802519a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8024f1e:	2f00      	cmp	r7, #0
 8024f20:	f2c0 8137 	blt.w	8025192 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8024f24:	42be      	cmp	r6, r7
 8024f26:	f340 8134 	ble.w	8025192 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8024f2a:	f812 c004 	ldrb.w	ip, [r2, r4]
 8024f2e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8024f32:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8024f36:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024f3a:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 8024f3e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024f42:	4355      	muls	r5, r2
 8024f44:	fb0c f203 	mul.w	r2, ip, r3
 8024f48:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8024f4c:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 8024f50:	441d      	add	r5, r3
 8024f52:	f102 0320 	add.w	r3, r2, #32
 8024f56:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024f5a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8024f5e:	0a1b      	lsrs	r3, r3, #8
 8024f60:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024f64:	431c      	orrs	r4, r3
 8024f66:	1c7b      	adds	r3, r7, #1
 8024f68:	f100 811c 	bmi.w	80251a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8024f6c:	429e      	cmp	r6, r3
 8024f6e:	f340 8119 	ble.w	80251a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8024f72:	2900      	cmp	r1, #0
 8024f74:	f000 8119 	beq.w	80251aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8024f78:	9a01      	ldr	r2, [sp, #4]
 8024f7a:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024f7e:	8855      	ldrh	r5, [r2, #2]
 8024f80:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8024f84:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8024f88:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024f8c:	fb08 f802 	mul.w	r8, r8, r2
 8024f90:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8024f94:	435d      	muls	r5, r3
 8024f96:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8024f9a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8024f9e:	44d0      	add	r8, sl
 8024fa0:	f105 0a20 	add.w	sl, r5, #32
 8024fa4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8024fa8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024fac:	0a2d      	lsrs	r5, r5, #8
 8024fae:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024fb2:	432a      	orrs	r2, r5
 8024fb4:	3001      	adds	r0, #1
 8024fb6:	f100 80fe 	bmi.w	80251b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8024fba:	4583      	cmp	fp, r0
 8024fbc:	f340 80fb 	ble.w	80251b6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8024fc0:	f1be 0f00 	cmp.w	lr, #0
 8024fc4:	f000 80fc 	beq.w	80251c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8024fc8:	2f00      	cmp	r7, #0
 8024fca:	f2c0 80f1 	blt.w	80251b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8024fce:	42be      	cmp	r6, r7
 8024fd0:	f340 80ee 	ble.w	80251b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8024fd4:	9801      	ldr	r0, [sp, #4]
 8024fd6:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8024fda:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024fde:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8024fe2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8024fe6:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8024fea:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8024fee:	fb0a fa00 	mul.w	sl, sl, r0
 8024ff2:	fb05 f808 	mul.w	r8, r5, r8
 8024ff6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8024ffa:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 8024ffe:	4482      	add	sl, r0
 8025000:	f108 0020 	add.w	r0, r8, #32
 8025004:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025008:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802500c:	0a00      	lsrs	r0, r0, #8
 802500e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025012:	ea4b 0b00 	orr.w	fp, fp, r0
 8025016:	3701      	adds	r7, #1
 8025018:	f100 80d7 	bmi.w	80251ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802501c:	42be      	cmp	r6, r7
 802501e:	f340 80d4 	ble.w	80251ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8025022:	2900      	cmp	r1, #0
 8025024:	f000 80d4 	beq.w	80251d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8025028:	3601      	adds	r6, #1
 802502a:	9801      	ldr	r0, [sp, #4]
 802502c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025030:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8025034:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8025038:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 802503c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025040:	fb09 f906 	mul.w	r9, r9, r6
 8025044:	fb07 f800 	mul.w	r8, r7, r0
 8025048:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 802504c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8025050:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 8025054:	44d1      	add	r9, sl
 8025056:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802505a:	f108 0020 	add.w	r0, r8, #32
 802505e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025062:	0a00      	lsrs	r0, r0, #8
 8025064:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025068:	4330      	orrs	r0, r6
 802506a:	b28e      	uxth	r6, r1
 802506c:	fa1f f98e 	uxth.w	r9, lr
 8025070:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8025074:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8025078:	fb06 f809 	mul.w	r8, r6, r9
 802507c:	0136      	lsls	r6, r6, #4
 802507e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025082:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025086:	9601      	str	r6, [sp, #4]
 8025088:	ea4a 0404 	orr.w	r4, sl, r4
 802508c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025090:	fa1f f689 	uxth.w	r6, r9
 8025094:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025098:	fb11 f90e 	smulbb	r9, r1, lr
 802509c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80250a0:	9602      	str	r6, [sp, #8]
 80250a2:	4626      	mov	r6, r4
 80250a4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80250a8:	f1ce 0410 	rsb	r4, lr, #16
 80250ac:	ea4a 0202 	orr.w	r2, sl, r2
 80250b0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80250b4:	1a64      	subs	r4, r4, r1
 80250b6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80250ba:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80250be:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80250c2:	434a      	muls	r2, r1
 80250c4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80250c8:	ea4a 0000 	orr.w	r0, sl, r0
 80250cc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80250d0:	fb04 2406 	mla	r4, r4, r6, r2
 80250d4:	9903      	ldr	r1, [sp, #12]
 80250d6:	fb09 4200 	mla	r2, r9, r0, r4
 80250da:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80250de:	9801      	ldr	r0, [sp, #4]
 80250e0:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80250e4:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 80250e8:	8809      	ldrh	r1, [r1, #0]
 80250ea:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 80250ee:	ea44 0b0b 	orr.w	fp, r4, fp
 80250f2:	9c02      	ldr	r4, [sp, #8]
 80250f4:	1b00      	subs	r0, r0, r4
 80250f6:	9c01      	ldr	r4, [sp, #4]
 80250f8:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80250fc:	eba4 0608 	sub.w	r6, r4, r8
 8025100:	b280      	uxth	r0, r0
 8025102:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025106:	b2b6      	uxth	r6, r6
 8025108:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802510c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025110:	4373      	muls	r3, r6
 8025112:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025116:	fb0c 3300 	mla	r3, ip, r0, r3
 802511a:	9802      	ldr	r0, [sp, #8]
 802511c:	ea42 0e0e 	orr.w	lr, r2, lr
 8025120:	fb00 3505 	mla	r5, r0, r5, r3
 8025124:	120b      	asrs	r3, r1, #8
 8025126:	10c8      	asrs	r0, r1, #3
 8025128:	fb08 5707 	mla	r7, r8, r7, r5
 802512c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8025130:	00c9      	lsls	r1, r1, #3
 8025132:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8025136:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802513a:	fa1f f28e 	uxth.w	r2, lr
 802513e:	b2c9      	uxtb	r1, r1
 8025140:	b2ff      	uxtb	r7, r7
 8025142:	437b      	muls	r3, r7
 8025144:	4378      	muls	r0, r7
 8025146:	434f      	muls	r7, r1
 8025148:	1c59      	adds	r1, r3, #1
 802514a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802514e:	1213      	asrs	r3, r2, #8
 8025150:	f023 0307 	bic.w	r3, r3, #7
 8025154:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025158:	1c41      	adds	r1, r0, #1
 802515a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802515e:	10d1      	asrs	r1, r2, #3
 8025160:	021b      	lsls	r3, r3, #8
 8025162:	f021 0103 	bic.w	r1, r1, #3
 8025166:	00d2      	lsls	r2, r2, #3
 8025168:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802516c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025170:	00c9      	lsls	r1, r1, #3
 8025172:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025176:	430b      	orrs	r3, r1
 8025178:	1c79      	adds	r1, r7, #1
 802517a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802517e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025182:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025186:	431a      	orrs	r2, r3
 8025188:	9b03      	ldr	r3, [sp, #12]
 802518a:	801a      	strh	r2, [r3, #0]
 802518c:	b005      	add	sp, #20
 802518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025192:	f04f 0c00 	mov.w	ip, #0
 8025196:	4664      	mov	r4, ip
 8025198:	e6e5      	b.n	8024f66 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802519a:	2300      	movs	r3, #0
 802519c:	469c      	mov	ip, r3
 802519e:	461a      	mov	r2, r3
 80251a0:	461c      	mov	r4, r3
 80251a2:	e707      	b.n	8024fb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80251a4:	2300      	movs	r3, #0
 80251a6:	461a      	mov	r2, r3
 80251a8:	e704      	b.n	8024fb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80251aa:	460b      	mov	r3, r1
 80251ac:	460a      	mov	r2, r1
 80251ae:	e701      	b.n	8024fb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80251b0:	2500      	movs	r5, #0
 80251b2:	46ab      	mov	fp, r5
 80251b4:	e72f      	b.n	8025016 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 80251b6:	2700      	movs	r7, #0
 80251b8:	463d      	mov	r5, r7
 80251ba:	4638      	mov	r0, r7
 80251bc:	46bb      	mov	fp, r7
 80251be:	e754      	b.n	802506a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80251c0:	4677      	mov	r7, lr
 80251c2:	4675      	mov	r5, lr
 80251c4:	4670      	mov	r0, lr
 80251c6:	46f3      	mov	fp, lr
 80251c8:	e74f      	b.n	802506a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80251ca:	2700      	movs	r7, #0
 80251cc:	4638      	mov	r0, r7
 80251ce:	e74c      	b.n	802506a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80251d0:	460f      	mov	r7, r1
 80251d2:	4608      	mov	r0, r1
 80251d4:	e749      	b.n	802506a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080251d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80251d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251dc:	b093      	sub	sp, #76	@ 0x4c
 80251de:	9210      	str	r2, [sp, #64]	@ 0x40
 80251e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80251e2:	9011      	str	r0, [sp, #68]	@ 0x44
 80251e4:	910e      	str	r1, [sp, #56]	@ 0x38
 80251e6:	6850      	ldr	r0, [r2, #4]
 80251e8:	9306      	str	r3, [sp, #24]
 80251ea:	6812      	ldr	r2, [r2, #0]
 80251ec:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80251f0:	fb00 1303 	mla	r3, r0, r3, r1
 80251f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80251f8:	9307      	str	r3, [sp, #28]
 80251fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80251fc:	681b      	ldr	r3, [r3, #0]
 80251fe:	9308      	str	r3, [sp, #32]
 8025200:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025202:	685b      	ldr	r3, [r3, #4]
 8025204:	9309      	str	r3, [sp, #36]	@ 0x24
 8025206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025208:	2b00      	cmp	r3, #0
 802520a:	dc03      	bgt.n	8025214 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802520c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802520e:	2b00      	cmp	r3, #0
 8025210:	f340 83b6 	ble.w	8025980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025214:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025216:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802521a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802521e:	1e48      	subs	r0, r1, #1
 8025220:	1e55      	subs	r5, r2, #1
 8025222:	9b06      	ldr	r3, [sp, #24]
 8025224:	2b00      	cmp	r3, #0
 8025226:	f340 8165 	ble.w	80254f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802522a:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 802522c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802522e:	1436      	asrs	r6, r6, #16
 8025230:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025234:	d406      	bmi.n	8025244 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025236:	4286      	cmp	r6, r0
 8025238:	da04      	bge.n	8025244 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802523a:	2b00      	cmp	r3, #0
 802523c:	db02      	blt.n	8025244 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802523e:	42ab      	cmp	r3, r5
 8025240:	f2c0 8159 	blt.w	80254f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8025244:	3601      	adds	r6, #1
 8025246:	f100 8146 	bmi.w	80254d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802524a:	42b1      	cmp	r1, r6
 802524c:	f2c0 8143 	blt.w	80254d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025250:	3301      	adds	r3, #1
 8025252:	f100 8140 	bmi.w	80254d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025256:	429a      	cmp	r2, r3
 8025258:	f2c0 813d 	blt.w	80254d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802525c:	9b06      	ldr	r3, [sp, #24]
 802525e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8025262:	9f07      	ldr	r7, [sp, #28]
 8025264:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025266:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025268:	2b00      	cmp	r3, #0
 802526a:	f340 8166 	ble.w	802553a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802526e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025270:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8025272:	1418      	asrs	r0, r3, #16
 8025274:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025276:	142d      	asrs	r5, r5, #16
 8025278:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802527c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802527e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025282:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025284:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025288:	f100 81f0 	bmi.w	802566c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802528c:	f102 3eff 	add.w	lr, r2, #4294967295
 8025290:	4575      	cmp	r5, lr
 8025292:	f280 81eb 	bge.w	802566c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025296:	2800      	cmp	r0, #0
 8025298:	f2c0 81e8 	blt.w	802566c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802529c:	f103 3eff 	add.w	lr, r3, #4294967295
 80252a0:	4570      	cmp	r0, lr
 80252a2:	f280 81e3 	bge.w	802566c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80252a6:	b212      	sxth	r2, r2
 80252a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252aa:	fa1f fe81 	uxth.w	lr, r1
 80252ae:	fb00 5002 	mla	r0, r0, r2, r5
 80252b2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80252b6:	eb03 0a00 	add.w	sl, r3, r0
 80252ba:	f813 9000 	ldrb.w	r9, [r3, r0]
 80252be:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80252c2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80252c6:	b29b      	uxth	r3, r3
 80252c8:	f1bc 0f00 	cmp.w	ip, #0
 80252cc:	f000 817b 	beq.w	80255c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80252d0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80252d4:	eb0a 0b02 	add.w	fp, sl, r2
 80252d8:	fa1f fa8c 	uxth.w	sl, ip
 80252dc:	940a      	str	r4, [sp, #40]	@ 0x28
 80252de:	fb0a fe0e 	mul.w	lr, sl, lr
 80252e2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80252e6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80252ea:	eba5 050e 	sub.w	r5, r5, lr
 80252ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80252f0:	fa1f fa8a 	uxth.w	sl, sl
 80252f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80252f6:	b2ad      	uxth	r5, r5
 80252f8:	eba3 030a 	sub.w	r3, r3, sl
 80252fc:	fb08 f505 	mul.w	r5, r8, r5
 8025300:	b29b      	uxth	r3, r3
 8025302:	fb09 5303 	mla	r3, r9, r3, r5
 8025306:	fb0a 3304 	mla	r3, sl, r4, r3
 802530a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802530c:	fb0e 3304 	mla	r3, lr, r4, r3
 8025310:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025314:	2b00      	cmp	r3, #0
 8025316:	f000 80d1 	beq.w	80254bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802531a:	9c08      	ldr	r4, [sp, #32]
 802531c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025320:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025324:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025328:	f000 8152 	beq.w	80255d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802532c:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8025330:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025334:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025338:	fb0a fe0e 	mul.w	lr, sl, lr
 802533c:	fb09 f000 	mul.w	r0, r9, r0
 8025340:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025344:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025348:	f100 0b20 	add.w	fp, r0, #32
 802534c:	44ce      	add	lr, r9
 802534e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025352:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025356:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802535a:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802535e:	ea4e 0909 	orr.w	r9, lr, r9
 8025362:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025366:	8868      	ldrh	r0, [r5, #2]
 8025368:	d019      	beq.n	802539e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802536a:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 802536e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025372:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025376:	fb0a fe0e 	mul.w	lr, sl, lr
 802537a:	fb08 f800 	mul.w	r8, r8, r0
 802537e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025382:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8025386:	f108 0b20 	add.w	fp, r8, #32
 802538a:	4486      	add	lr, r0
 802538c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025390:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025394:	0a00      	lsrs	r0, r0, #8
 8025396:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802539a:	ea4e 0000 	orr.w	r0, lr, r0
 802539e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80253a2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80253a6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80253aa:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80253ae:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80253b2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80253b6:	ea4e 0909 	orr.w	r9, lr, r9
 80253ba:	ea4a 0000 	orr.w	r0, sl, r0
 80253be:	f1bc 0f00 	cmp.w	ip, #0
 80253c2:	f000 8107 	beq.w	80255d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80253c6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80253ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80253cc:	3a01      	subs	r2, #1
 80253ce:	2cff      	cmp	r4, #255	@ 0xff
 80253d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80253d4:	f102 0202 	add.w	r2, r2, #2
 80253d8:	eb05 0e02 	add.w	lr, r5, r2
 80253dc:	5aaa      	ldrh	r2, [r5, r2]
 80253de:	d018      	beq.n	8025412 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80253e0:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80253e4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80253e8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80253ec:	fb04 fa02 	mul.w	sl, r4, r2
 80253f0:	fb08 f805 	mul.w	r8, r8, r5
 80253f4:	f10a 0520 	add.w	r5, sl, #32
 80253f8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80253fc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025400:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025404:	4442      	add	r2, r8
 8025406:	0a2d      	lsrs	r5, r5, #8
 8025408:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802540c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025410:	432a      	orrs	r2, r5
 8025412:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025414:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025418:	2cff      	cmp	r4, #255	@ 0xff
 802541a:	d01a      	beq.n	8025452 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802541c:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8025420:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025424:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025428:	fb04 fa05 	mul.w	sl, r4, r5
 802542c:	fb08 f80e 	mul.w	r8, r8, lr
 8025430:	f10a 0e20 	add.w	lr, sl, #32
 8025434:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025438:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802543c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025440:	4445      	add	r5, r8
 8025442:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025446:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802544a:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802544e:	ea45 050e 	orr.w	r5, r5, lr
 8025452:	fb1c fe01 	smulbb	lr, ip, r1
 8025456:	f1cc 0810 	rsb	r8, ip, #16
 802545a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802545e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025462:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025466:	eba8 0801 	sub.w	r8, r8, r1
 802546a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802546e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025472:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025476:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802547a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802547e:	ea4a 0202 	orr.w	r2, sl, r2
 8025482:	4341      	muls	r1, r0
 8025484:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025488:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802548c:	fb09 1108 	mla	r1, r9, r8, r1
 8025490:	ea4b 0505 	orr.w	r5, fp, r5
 8025494:	fb0c 1102 	mla	r1, ip, r2, r1
 8025498:	fb0e 1e05 	mla	lr, lr, r5, r1
 802549c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80254a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80254a4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80254a8:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80254ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80254b0:	fa1f f28e 	uxth.w	r2, lr
 80254b4:	2bff      	cmp	r3, #255	@ 0xff
 80254b6:	f040 80a1 	bne.w	80255fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80254ba:	803a      	strh	r2, [r7, #0]
 80254bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80254be:	3702      	adds	r7, #2
 80254c0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80254c2:	4413      	add	r3, r2
 80254c4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80254c6:	931d      	str	r3, [sp, #116]	@ 0x74
 80254c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80254ca:	441a      	add	r2, r3
 80254cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80254ce:	3b01      	subs	r3, #1
 80254d0:	921e      	str	r2, [sp, #120]	@ 0x78
 80254d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80254d4:	e6c7      	b.n	8025266 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80254d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80254d8:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80254da:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80254dc:	4433      	add	r3, r6
 80254de:	931d      	str	r3, [sp, #116]	@ 0x74
 80254e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80254e2:	441c      	add	r4, r3
 80254e4:	9b06      	ldr	r3, [sp, #24]
 80254e6:	3b01      	subs	r3, #1
 80254e8:	941e      	str	r4, [sp, #120]	@ 0x78
 80254ea:	9306      	str	r3, [sp, #24]
 80254ec:	9b07      	ldr	r3, [sp, #28]
 80254ee:	3302      	adds	r3, #2
 80254f0:	9307      	str	r3, [sp, #28]
 80254f2:	e696      	b.n	8025222 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80254f4:	d028      	beq.n	8025548 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80254f6:	9b06      	ldr	r3, [sp, #24]
 80254f8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80254fa:	3b01      	subs	r3, #1
 80254fc:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80254fe:	fb00 5003 	mla	r0, r0, r3, r5
 8025502:	1400      	asrs	r0, r0, #16
 8025504:	f53f aeaa 	bmi.w	802525c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025508:	3901      	subs	r1, #1
 802550a:	4288      	cmp	r0, r1
 802550c:	f6bf aea6 	bge.w	802525c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025510:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8025512:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8025514:	fb01 0303 	mla	r3, r1, r3, r0
 8025518:	141b      	asrs	r3, r3, #16
 802551a:	f53f ae9f 	bmi.w	802525c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802551e:	3a01      	subs	r2, #1
 8025520:	4293      	cmp	r3, r2
 8025522:	f6bf ae9b 	bge.w	802525c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025526:	9b06      	ldr	r3, [sp, #24]
 8025528:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 802552c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8025530:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025532:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025534:	2b00      	cmp	r3, #0
 8025536:	f300 80b6 	bgt.w	80256a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802553a:	9b06      	ldr	r3, [sp, #24]
 802553c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025540:	9b07      	ldr	r3, [sp, #28]
 8025542:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025546:	9307      	str	r3, [sp, #28]
 8025548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802554a:	2b00      	cmp	r3, #0
 802554c:	f340 8218 	ble.w	8025980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025554:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025556:	ee30 0a04 	vadd.f32	s0, s0, s8
 802555a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802555e:	eef0 6a62 	vmov.f32	s13, s5
 8025562:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025566:	ee31 1a05 	vadd.f32	s2, s2, s10
 802556a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802556e:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8025572:	eef0 6a43 	vmov.f32	s13, s6
 8025576:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802557a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 802557e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025582:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025586:	ee77 2a62 	vsub.f32	s5, s14, s5
 802558a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802558e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025592:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025596:	ee12 2a90 	vmov	r2, s5
 802559a:	eef0 2a47 	vmov.f32	s5, s14
 802559e:	fb92 f3f3 	sdiv	r3, r2, r3
 80255a2:	ee13 2a10 	vmov	r2, s6
 80255a6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80255a8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80255aa:	eeb0 3a67 	vmov.f32	s6, s15
 80255ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80255b2:	9320      	str	r3, [sp, #128]	@ 0x80
 80255b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80255b6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80255b8:	3b01      	subs	r3, #1
 80255ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80255bc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80255be:	bf08      	it	eq
 80255c0:	4613      	moveq	r3, r2
 80255c2:	9306      	str	r3, [sp, #24]
 80255c4:	e61f      	b.n	8025206 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80255c6:	fb08 f505 	mul.w	r5, r8, r5
 80255ca:	fb09 5303 	mla	r3, r9, r3, r5
 80255ce:	e69f      	b.n	8025310 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80255d0:	4681      	mov	r9, r0
 80255d2:	e6c6      	b.n	8025362 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80255d4:	f1c1 0210 	rsb	r2, r1, #16
 80255d8:	4341      	muls	r1, r0
 80255da:	fb09 1902 	mla	r9, r9, r2, r1
 80255de:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80255e2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80255e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80255ea:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80255ee:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80255f2:	ea42 0909 	orr.w	r9, r2, r9
 80255f6:	fa1f f289 	uxth.w	r2, r9
 80255fa:	e75b      	b.n	80254b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 80255fc:	f8b7 c000 	ldrh.w	ip, [r7]
 8025600:	43db      	mvns	r3, r3
 8025602:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025606:	fa5f fe83 	uxtb.w	lr, r3
 802560a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802560e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8025612:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8025616:	fb00 f00e 	mul.w	r0, r0, lr
 802561a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802561e:	b2db      	uxtb	r3, r3
 8025620:	1c41      	adds	r1, r0, #1
 8025622:	fb05 f50e 	mul.w	r5, r5, lr
 8025626:	fb03 f30e 	mul.w	r3, r3, lr
 802562a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802562e:	1211      	asrs	r1, r2, #8
 8025630:	f021 0107 	bic.w	r1, r1, #7
 8025634:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025638:	48d3      	ldr	r0, [pc, #844]	@ (8025988 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802563a:	b2c9      	uxtb	r1, r1
 802563c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8025640:	1c69      	adds	r1, r5, #1
 8025642:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025646:	10d1      	asrs	r1, r2, #3
 8025648:	00d2      	lsls	r2, r2, #3
 802564a:	f021 0103 	bic.w	r1, r1, #3
 802564e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025652:	00c9      	lsls	r1, r1, #3
 8025654:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025658:	4301      	orrs	r1, r0
 802565a:	1c58      	adds	r0, r3, #1
 802565c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025660:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025664:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025668:	430a      	orrs	r2, r1
 802566a:	e726      	b.n	80254ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 802566c:	f115 0e01 	adds.w	lr, r5, #1
 8025670:	f53f af24 	bmi.w	80254bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025674:	4572      	cmp	r2, lr
 8025676:	f6ff af21 	blt.w	80254bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802567a:	f110 0e01 	adds.w	lr, r0, #1
 802567e:	f53f af1d 	bmi.w	80254bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025682:	4573      	cmp	r3, lr
 8025684:	f6ff af1a 	blt.w	80254bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025688:	b21b      	sxth	r3, r3
 802568a:	b212      	sxth	r2, r2
 802568c:	9301      	str	r3, [sp, #4]
 802568e:	9200      	str	r2, [sp, #0]
 8025690:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8025694:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8025698:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802569c:	4639      	mov	r1, r7
 802569e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80256a0:	f7ff fc22 	bl	8024ee8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80256a4:	e70a      	b.n	80254bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80256a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80256a8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80256ac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80256ae:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80256b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80256b4:	fa1f fc82 	uxth.w	ip, r2
 80256b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80256bc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80256be:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80256c2:	141f      	asrs	r7, r3, #16
 80256c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80256c6:	141b      	asrs	r3, r3, #16
 80256c8:	fb01 3707 	mla	r7, r1, r7, r3
 80256cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256ce:	eb03 0a07 	add.w	sl, r3, r7
 80256d2:	f813 9007 	ldrb.w	r9, [r3, r7]
 80256d6:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80256da:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80256de:	b29b      	uxth	r3, r3
 80256e0:	2d00      	cmp	r5, #0
 80256e2:	f000 80fe 	beq.w	80258e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 80256e6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80256ea:	eb0a 0b01 	add.w	fp, sl, r1
 80256ee:	fa1f fa85 	uxth.w	sl, r5
 80256f2:	940c      	str	r4, [sp, #48]	@ 0x30
 80256f4:	fb0a fc0c 	mul.w	ip, sl, ip
 80256f8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80256fc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025700:	eba0 000c 	sub.w	r0, r0, ip
 8025704:	940d      	str	r4, [sp, #52]	@ 0x34
 8025706:	fa1f fa8a 	uxth.w	sl, sl
 802570a:	b280      	uxth	r0, r0
 802570c:	eba3 030a 	sub.w	r3, r3, sl
 8025710:	fb08 f000 	mul.w	r0, r8, r0
 8025714:	b29b      	uxth	r3, r3
 8025716:	fb09 0303 	mla	r3, r9, r3, r0
 802571a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802571c:	fb0a 3300 	mla	r3, sl, r0, r3
 8025720:	fb0c 3304 	mla	r3, ip, r4, r3
 8025724:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025728:	2b00      	cmp	r3, #0
 802572a:	f000 80cc 	beq.w	80258c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802572e:	9808      	ldr	r0, [sp, #32]
 8025730:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025734:	9c08      	ldr	r4, [sp, #32]
 8025736:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802573a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802573e:	f000 80d5 	beq.w	80258ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8025742:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8025746:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802574a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802574e:	fb0a fc0c 	mul.w	ip, sl, ip
 8025752:	fb09 f707 	mul.w	r7, r9, r7
 8025756:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802575a:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802575e:	f107 0b20 	add.w	fp, r7, #32
 8025762:	44cc      	add	ip, r9
 8025764:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025768:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802576c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025770:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8025774:	ea4c 0909 	orr.w	r9, ip, r9
 8025778:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802577c:	8847      	ldrh	r7, [r0, #2]
 802577e:	d019      	beq.n	80257b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8025780:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8025784:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025788:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802578c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025790:	fb08 f807 	mul.w	r8, r8, r7
 8025794:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025798:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802579c:	f108 0b20 	add.w	fp, r8, #32
 80257a0:	44bc      	add	ip, r7
 80257a2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80257a6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80257aa:	0a3f      	lsrs	r7, r7, #8
 80257ac:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80257b0:	ea4c 0707 	orr.w	r7, ip, r7
 80257b4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80257b8:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 80257bc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80257c0:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80257c4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80257c8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80257cc:	ea4c 0909 	orr.w	r9, ip, r9
 80257d0:	ea4a 0707 	orr.w	r7, sl, r7
 80257d4:	2d00      	cmp	r5, #0
 80257d6:	f000 808b 	beq.w	80258f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80257da:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80257de:	3901      	subs	r1, #1
 80257e0:	0049      	lsls	r1, r1, #1
 80257e2:	3102      	adds	r1, #2
 80257e4:	eb00 0c01 	add.w	ip, r0, r1
 80257e8:	5a41      	ldrh	r1, [r0, r1]
 80257ea:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80257ec:	28ff      	cmp	r0, #255	@ 0xff
 80257ee:	d019      	beq.n	8025824 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80257f0:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 80257f4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80257f6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80257fa:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80257fe:	fb04 fa01 	mul.w	sl, r4, r1
 8025802:	fb08 f800 	mul.w	r8, r8, r0
 8025806:	f10a 0020 	add.w	r0, sl, #32
 802580a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802580e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8025812:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025816:	4441      	add	r1, r8
 8025818:	0a00      	lsrs	r0, r0, #8
 802581a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802581e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025822:	4301      	orrs	r1, r0
 8025824:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025826:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802582a:	2cff      	cmp	r4, #255	@ 0xff
 802582c:	d01a      	beq.n	8025864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 802582e:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8025832:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8025836:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802583a:	fb04 fa00 	mul.w	sl, r4, r0
 802583e:	fb08 f80c 	mul.w	r8, r8, ip
 8025842:	f10a 0c20 	add.w	ip, sl, #32
 8025846:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802584a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802584e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025852:	4440      	add	r0, r8
 8025854:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025858:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802585c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8025860:	ea40 000c 	orr.w	r0, r0, ip
 8025864:	fb15 fc02 	smulbb	ip, r5, r2
 8025868:	f1c5 0810 	rsb	r8, r5, #16
 802586c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025870:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8025874:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025878:	eba8 0802 	sub.w	r8, r8, r2
 802587c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025880:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025884:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025888:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802588c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025890:	ea4a 0101 	orr.w	r1, sl, r1
 8025894:	437a      	muls	r2, r7
 8025896:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802589a:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802589e:	fb09 2208 	mla	r2, r9, r8, r2
 80258a2:	ea4b 0000 	orr.w	r0, fp, r0
 80258a6:	fb05 2201 	mla	r2, r5, r1, r2
 80258aa:	fb0c 2200 	mla	r2, ip, r0, r2
 80258ae:	0d57      	lsrs	r7, r2, #21
 80258b0:	0952      	lsrs	r2, r2, #5
 80258b2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80258b6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80258ba:	433a      	orrs	r2, r7
 80258bc:	2bff      	cmp	r3, #255	@ 0xff
 80258be:	b292      	uxth	r2, r2
 80258c0:	d127      	bne.n	8025912 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 80258c2:	f8ae 2000 	strh.w	r2, [lr]
 80258c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80258c8:	f10e 0e02 	add.w	lr, lr, #2
 80258cc:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80258ce:	4413      	add	r3, r2
 80258d0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80258d2:	931d      	str	r3, [sp, #116]	@ 0x74
 80258d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80258d6:	441a      	add	r2, r3
 80258d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80258da:	3b01      	subs	r3, #1
 80258dc:	921e      	str	r2, [sp, #120]	@ 0x78
 80258de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80258e0:	e627      	b.n	8025532 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80258e2:	fb08 f000 	mul.w	r0, r8, r0
 80258e6:	fb09 0303 	mla	r3, r9, r3, r0
 80258ea:	e71b      	b.n	8025724 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 80258ec:	46b9      	mov	r9, r7
 80258ee:	e743      	b.n	8025778 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 80258f0:	f1c2 0110 	rsb	r1, r2, #16
 80258f4:	437a      	muls	r2, r7
 80258f6:	fb09 2901 	mla	r9, r9, r1, r2
 80258fa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80258fe:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025902:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025906:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802590a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802590e:	4302      	orrs	r2, r0
 8025910:	e7d4      	b.n	80258bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8025912:	f8be 7000 	ldrh.w	r7, [lr]
 8025916:	43db      	mvns	r3, r3
 8025918:	4c1b      	ldr	r4, [pc, #108]	@ (8025988 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802591a:	1238      	asrs	r0, r7, #8
 802591c:	fa5f fc83 	uxtb.w	ip, r3
 8025920:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025924:	10fd      	asrs	r5, r7, #3
 8025926:	00fb      	lsls	r3, r7, #3
 8025928:	fb00 f00c 	mul.w	r0, r0, ip
 802592c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8025930:	b2db      	uxtb	r3, r3
 8025932:	fb05 f10c 	mul.w	r1, r5, ip
 8025936:	1c45      	adds	r5, r0, #1
 8025938:	fb03 f30c 	mul.w	r3, r3, ip
 802593c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025940:	1215      	asrs	r5, r2, #8
 8025942:	f025 0507 	bic.w	r5, r5, #7
 8025946:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802594a:	1c4d      	adds	r5, r1, #1
 802594c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025950:	10d1      	asrs	r1, r2, #3
 8025952:	b2c0      	uxtb	r0, r0
 8025954:	f021 0103 	bic.w	r1, r1, #3
 8025958:	00d2      	lsls	r2, r2, #3
 802595a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802595e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025962:	00c9      	lsls	r1, r1, #3
 8025964:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025968:	4308      	orrs	r0, r1
 802596a:	1c59      	adds	r1, r3, #1
 802596c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025970:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025974:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8025978:	4318      	orrs	r0, r3
 802597a:	f8ae 0000 	strh.w	r0, [lr]
 802597e:	e7a2      	b.n	80258c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8025980:	b013      	add	sp, #76	@ 0x4c
 8025982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025986:	bf00      	nop
 8025988:	fffff800 	.word	0xfffff800

0802598c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 802598c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025990:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8025994:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8025998:	fb05 4c03 	mla	ip, r5, r3, r4
 802599c:	2d00      	cmp	r5, #0
 802599e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80259a2:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80259a6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80259aa:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 80259ae:	8808      	ldrh	r0, [r1, #0]
 80259b0:	f2c0 80a7 	blt.w	8025b02 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80259b4:	45aa      	cmp	sl, r5
 80259b6:	f340 80a4 	ble.w	8025b02 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80259ba:	2c00      	cmp	r4, #0
 80259bc:	f2c0 809f 	blt.w	8025afe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80259c0:	42a3      	cmp	r3, r4
 80259c2:	f340 809c 	ble.w	8025afe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80259c6:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80259ca:	1c62      	adds	r2, r4, #1
 80259cc:	f100 809c 	bmi.w	8025b08 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80259d0:	4293      	cmp	r3, r2
 80259d2:	f340 8099 	ble.w	8025b08 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80259d6:	f1b9 0f00 	cmp.w	r9, #0
 80259da:	f000 8095 	beq.w	8025b08 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80259de:	f8be c002 	ldrh.w	ip, [lr, #2]
 80259e2:	3501      	adds	r5, #1
 80259e4:	f100 8094 	bmi.w	8025b10 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80259e8:	45aa      	cmp	sl, r5
 80259ea:	f340 8091 	ble.w	8025b10 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80259ee:	2f00      	cmp	r7, #0
 80259f0:	f000 808e 	beq.w	8025b10 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80259f4:	2c00      	cmp	r4, #0
 80259f6:	f2c0 8089 	blt.w	8025b0c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80259fa:	42a3      	cmp	r3, r4
 80259fc:	f340 8086 	ble.w	8025b0c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8025a00:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8025a04:	3401      	adds	r4, #1
 8025a06:	f100 8086 	bmi.w	8025b16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025a0a:	42a3      	cmp	r3, r4
 8025a0c:	f340 8083 	ble.w	8025b16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025a10:	f1b9 0f00 	cmp.w	r9, #0
 8025a14:	d07f      	beq.n	8025b16 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025a16:	3301      	adds	r3, #1
 8025a18:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8025a1c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8025a20:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8025a24:	fb19 fe07 	smulbb	lr, r9, r7
 8025a28:	f1c7 0210 	rsb	r2, r7, #16
 8025a2c:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8025a30:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8025a34:	eba2 0209 	sub.w	r2, r2, r9
 8025a38:	ea44 0808 	orr.w	r8, r4, r8
 8025a3c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8025a40:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025a44:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8025a48:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8025a4c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8025a50:	ea44 0c0c 	orr.w	ip, r4, ip
 8025a54:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8025a58:	fb04 f40c 	mul.w	r4, r4, ip
 8025a5c:	fb02 4808 	mla	r8, r2, r8, r4
 8025a60:	041a      	lsls	r2, r3, #16
 8025a62:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025a66:	b2b4      	uxth	r4, r6
 8025a68:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025a6c:	43f6      	mvns	r6, r6
 8025a6e:	4313      	orrs	r3, r2
 8025a70:	042a      	lsls	r2, r5, #16
 8025a72:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8025a76:	b2f6      	uxtb	r6, r6
 8025a78:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025a7c:	fb0e 8303 	mla	r3, lr, r3, r8
 8025a80:	432a      	orrs	r2, r5
 8025a82:	fb07 3202 	mla	r2, r7, r2, r3
 8025a86:	10c7      	asrs	r7, r0, #3
 8025a88:	0d53      	lsrs	r3, r2, #21
 8025a8a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8025a8e:	0952      	lsrs	r2, r2, #5
 8025a90:	fb17 f706 	smulbb	r7, r7, r6
 8025a94:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025a98:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025a9c:	431a      	orrs	r2, r3
 8025a9e:	b293      	uxth	r3, r2
 8025aa0:	1202      	asrs	r2, r0, #8
 8025aa2:	121d      	asrs	r5, r3, #8
 8025aa4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025aa8:	00c0      	lsls	r0, r0, #3
 8025aaa:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025aae:	fb12 f206 	smulbb	r2, r2, r6
 8025ab2:	b2c0      	uxtb	r0, r0
 8025ab4:	fb05 2504 	mla	r5, r5, r4, r2
 8025ab8:	10da      	asrs	r2, r3, #3
 8025aba:	fb10 f006 	smulbb	r0, r0, r6
 8025abe:	00db      	lsls	r3, r3, #3
 8025ac0:	b2ad      	uxth	r5, r5
 8025ac2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025ac6:	b2db      	uxtb	r3, r3
 8025ac8:	fb02 7204 	mla	r2, r2, r4, r7
 8025acc:	fb03 0004 	mla	r0, r3, r4, r0
 8025ad0:	1c6b      	adds	r3, r5, #1
 8025ad2:	b292      	uxth	r2, r2
 8025ad4:	b280      	uxth	r0, r0
 8025ad6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025ada:	1c43      	adds	r3, r0, #1
 8025adc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025ae0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025ae4:	1c50      	adds	r0, r2, #1
 8025ae6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025aea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025aee:	0952      	lsrs	r2, r2, #5
 8025af0:	432b      	orrs	r3, r5
 8025af2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025af6:	4313      	orrs	r3, r2
 8025af8:	800b      	strh	r3, [r1, #0]
 8025afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025afe:	4680      	mov	r8, r0
 8025b00:	e763      	b.n	80259ca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8025b02:	4684      	mov	ip, r0
 8025b04:	4680      	mov	r8, r0
 8025b06:	e76c      	b.n	80259e2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8025b08:	4684      	mov	ip, r0
 8025b0a:	e76a      	b.n	80259e2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8025b0c:	4605      	mov	r5, r0
 8025b0e:	e779      	b.n	8025a04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8025b10:	4603      	mov	r3, r0
 8025b12:	4605      	mov	r5, r0
 8025b14:	e782      	b.n	8025a1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8025b16:	4603      	mov	r3, r0
 8025b18:	e780      	b.n	8025a1c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08025b1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b1e:	b093      	sub	sp, #76	@ 0x4c
 8025b20:	461d      	mov	r5, r3
 8025b22:	9210      	str	r2, [sp, #64]	@ 0x40
 8025b24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8025b26:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8025b2a:	910a      	str	r1, [sp, #40]	@ 0x28
 8025b2c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025b2e:	6859      	ldr	r1, [r3, #4]
 8025b30:	681b      	ldr	r3, [r3, #0]
 8025b32:	9011      	str	r0, [sp, #68]	@ 0x44
 8025b34:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8025b38:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8025b3c:	fb01 2707 	mla	r7, r1, r7, r2
 8025b40:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8025b44:	9307      	str	r3, [sp, #28]
 8025b46:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025b48:	681b      	ldr	r3, [r3, #0]
 8025b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025b4e:	43db      	mvns	r3, r3
 8025b50:	b2db      	uxtb	r3, r3
 8025b52:	9308      	str	r3, [sp, #32]
 8025b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025b56:	2b00      	cmp	r3, #0
 8025b58:	dc03      	bgt.n	8025b62 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025b5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025b5c:	2b00      	cmp	r3, #0
 8025b5e:	f340 8205 	ble.w	8025f6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025b62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025b64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025b68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025b6c:	1e48      	subs	r0, r1, #1
 8025b6e:	f102 3cff 	add.w	ip, r2, #4294967295
 8025b72:	2d00      	cmp	r5, #0
 8025b74:	f340 80da 	ble.w	8025d2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025b78:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025b7c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025b80:	d406      	bmi.n	8025b90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025b82:	4586      	cmp	lr, r0
 8025b84:	da04      	bge.n	8025b90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025b86:	2b00      	cmp	r3, #0
 8025b88:	db02      	blt.n	8025b90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025b8a:	4563      	cmp	r3, ip
 8025b8c:	f2c0 80cf 	blt.w	8025d2e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8025b90:	f11e 0e01 	adds.w	lr, lr, #1
 8025b94:	f100 80c1 	bmi.w	8025d1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025b98:	4571      	cmp	r1, lr
 8025b9a:	f2c0 80be 	blt.w	8025d1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025b9e:	3301      	adds	r3, #1
 8025ba0:	f100 80bb 	bmi.w	8025d1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025ba4:	429a      	cmp	r2, r3
 8025ba6:	f2c0 80b8 	blt.w	8025d1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025baa:	46a9      	mov	r9, r5
 8025bac:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8025bb0:	f1b9 0f00 	cmp.w	r9, #0
 8025bb4:	f340 80d8 	ble.w	8025d68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8025bb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025bba:	1421      	asrs	r1, r4, #16
 8025bbc:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025bc0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025bc4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025bc8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025bcc:	f100 8112 	bmi.w	8025df4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025bd0:	f10e 3aff 	add.w	sl, lr, #4294967295
 8025bd4:	4551      	cmp	r1, sl
 8025bd6:	f280 810d 	bge.w	8025df4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025bda:	2800      	cmp	r0, #0
 8025bdc:	f2c0 810a 	blt.w	8025df4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025be0:	f103 3aff 	add.w	sl, r3, #4294967295
 8025be4:	4550      	cmp	r0, sl
 8025be6:	f280 8105 	bge.w	8025df4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025bea:	fa0f f38e 	sxth.w	r3, lr
 8025bee:	fb00 1103 	mla	r1, r0, r3, r1
 8025bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025bf4:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8025bf8:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8025bfc:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8025c00:	f1bc 0f00 	cmp.w	ip, #0
 8025c04:	d007      	beq.n	8025c16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8025c06:	005b      	lsls	r3, r3, #1
 8025c08:	eb0a 0003 	add.w	r0, sl, r3
 8025c0c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8025c10:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c12:	8843      	ldrh	r3, [r0, #2]
 8025c14:	930d      	str	r3, [sp, #52]	@ 0x34
 8025c16:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8025c1a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025c1e:	fb12 f30c 	smulbb	r3, r2, ip
 8025c22:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025c26:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8025c2a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8025c2e:	10db      	asrs	r3, r3, #3
 8025c30:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8025c34:	ea40 000e 	orr.w	r0, r0, lr
 8025c38:	f1cc 0e10 	rsb	lr, ip, #16
 8025c3c:	ea4a 0101 	orr.w	r1, sl, r1
 8025c40:	9f08      	ldr	r7, [sp, #32]
 8025c42:	ebae 0e02 	sub.w	lr, lr, r2
 8025c46:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025c4a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025c4e:	4351      	muls	r1, r2
 8025c50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025c52:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025c56:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025c58:	0410      	lsls	r0, r2, #16
 8025c5a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8025c5e:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8025c62:	4310      	orrs	r0, r2
 8025c64:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025c66:	0412      	lsls	r2, r2, #16
 8025c68:	fb03 e000 	mla	r0, r3, r0, lr
 8025c6c:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8025c70:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025c74:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025c78:	ea42 020e 	orr.w	r2, r2, lr
 8025c7c:	fb03 0302 	mla	r3, r3, r2, r0
 8025c80:	f8b8 0000 	ldrh.w	r0, [r8]
 8025c84:	0d5a      	lsrs	r2, r3, #21
 8025c86:	095b      	lsrs	r3, r3, #5
 8025c88:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025c8c:	1201      	asrs	r1, r0, #8
 8025c8e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025c92:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8025c96:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025c9a:	00c0      	lsls	r0, r0, #3
 8025c9c:	4313      	orrs	r3, r2
 8025c9e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8025ca2:	fb11 f107 	smulbb	r1, r1, r7
 8025ca6:	b2c0      	uxtb	r0, r0
 8025ca8:	b29b      	uxth	r3, r3
 8025caa:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8025cae:	fb10 f007 	smulbb	r0, r0, r7
 8025cb2:	fb1e fe07 	smulbb	lr, lr, r7
 8025cb6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8025cba:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8025cbe:	fb0c 1c02 	mla	ip, ip, r2, r1
 8025cc2:	10d9      	asrs	r1, r3, #3
 8025cc4:	00db      	lsls	r3, r3, #3
 8025cc6:	fa1f fc8c 	uxth.w	ip, ip
 8025cca:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8025cce:	b2db      	uxtb	r3, r3
 8025cd0:	fb01 e102 	mla	r1, r1, r2, lr
 8025cd4:	fb03 0302 	mla	r3, r3, r2, r0
 8025cd8:	b289      	uxth	r1, r1
 8025cda:	b29a      	uxth	r2, r3
 8025cdc:	f10c 0301 	add.w	r3, ip, #1
 8025ce0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025ce4:	1c53      	adds	r3, r2, #1
 8025ce6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025cea:	1c4a      	adds	r2, r1, #1
 8025cec:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8025cf0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025cf4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025cf8:	0949      	lsrs	r1, r1, #5
 8025cfa:	ea43 030c 	orr.w	r3, r3, ip
 8025cfe:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025d02:	430b      	orrs	r3, r1
 8025d04:	f8a8 3000 	strh.w	r3, [r8]
 8025d08:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025d0a:	f108 0802 	add.w	r8, r8, #2
 8025d0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8025d12:	441c      	add	r4, r3
 8025d14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025d16:	441e      	add	r6, r3
 8025d18:	e74a      	b.n	8025bb0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025d1a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025d1c:	3d01      	subs	r5, #1
 8025d1e:	441c      	add	r4, r3
 8025d20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025d22:	441e      	add	r6, r3
 8025d24:	9b07      	ldr	r3, [sp, #28]
 8025d26:	3302      	adds	r3, #2
 8025d28:	9307      	str	r3, [sp, #28]
 8025d2a:	e722      	b.n	8025b72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025d2c:	d022      	beq.n	8025d74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8025d2e:	1e6b      	subs	r3, r5, #1
 8025d30:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8025d32:	fb00 4003 	mla	r0, r0, r3, r4
 8025d36:	1400      	asrs	r0, r0, #16
 8025d38:	f53f af37 	bmi.w	8025baa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025d3c:	3901      	subs	r1, #1
 8025d3e:	4288      	cmp	r0, r1
 8025d40:	f6bf af33 	bge.w	8025baa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025d44:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8025d46:	fb01 6303 	mla	r3, r1, r3, r6
 8025d4a:	141b      	asrs	r3, r3, #16
 8025d4c:	f53f af2d 	bmi.w	8025baa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025d50:	3a01      	subs	r2, #1
 8025d52:	4293      	cmp	r3, r2
 8025d54:	f6bf af29 	bge.w	8025baa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025d58:	46a8      	mov	r8, r5
 8025d5a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8025d5e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8025d62:	f1b8 0f00 	cmp.w	r8, #0
 8025d66:	dc60      	bgt.n	8025e2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8025d68:	9b07      	ldr	r3, [sp, #28]
 8025d6a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025d6e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025d72:	9307      	str	r3, [sp, #28]
 8025d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025d76:	2b00      	cmp	r3, #0
 8025d78:	f340 80f8 	ble.w	8025f6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025d7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025d80:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025d82:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025d86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025d8a:	eef0 6a62 	vmov.f32	s13, s5
 8025d8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025d92:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025d96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025d9a:	ee16 4a90 	vmov	r4, s13
 8025d9e:	eef0 6a43 	vmov.f32	s13, s6
 8025da2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025da6:	ee16 6a90 	vmov	r6, s13
 8025daa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025dae:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025db2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025db6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025dba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025dbe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025dc2:	ee12 2a90 	vmov	r2, s5
 8025dc6:	eef0 2a47 	vmov.f32	s5, s14
 8025dca:	fb92 f3f3 	sdiv	r3, r2, r3
 8025dce:	ee13 2a10 	vmov	r2, s6
 8025dd2:	931f      	str	r3, [sp, #124]	@ 0x7c
 8025dd4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025dd6:	eeb0 3a67 	vmov.f32	s6, s15
 8025dda:	fb92 f3f3 	sdiv	r3, r2, r3
 8025dde:	9320      	str	r3, [sp, #128]	@ 0x80
 8025de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025de2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025de4:	3b01      	subs	r3, #1
 8025de6:	930a      	str	r3, [sp, #40]	@ 0x28
 8025de8:	bf08      	it	eq
 8025dea:	4615      	moveq	r5, r2
 8025dec:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025dee:	bf18      	it	ne
 8025df0:	461d      	movne	r5, r3
 8025df2:	e6af      	b.n	8025b54 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025df4:	f111 0a01 	adds.w	sl, r1, #1
 8025df8:	d486      	bmi.n	8025d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025dfa:	45d6      	cmp	lr, sl
 8025dfc:	db84      	blt.n	8025d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025dfe:	f110 0a01 	adds.w	sl, r0, #1
 8025e02:	d481      	bmi.n	8025d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025e04:	4553      	cmp	r3, sl
 8025e06:	f6ff af7f 	blt.w	8025d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025e0a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025e0c:	b21b      	sxth	r3, r3
 8025e0e:	9101      	str	r1, [sp, #4]
 8025e10:	4641      	mov	r1, r8
 8025e12:	9300      	str	r3, [sp, #0]
 8025e14:	fa0f f38e 	sxth.w	r3, lr
 8025e18:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8025e1c:	e9cd c704 	strd	ip, r7, [sp, #16]
 8025e20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025e22:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8025e24:	f7ff fdb2 	bl	802598c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8025e28:	e76e      	b.n	8025d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025e2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025e2c:	1430      	asrs	r0, r6, #16
 8025e2e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8025e30:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8025e34:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e38:	1423      	asrs	r3, r4, #16
 8025e3a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025e3e:	fb01 3000 	mla	r0, r1, r0, r3
 8025e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e44:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8025e48:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8025e4c:	8858      	ldrh	r0, [r3, #2]
 8025e4e:	f1be 0f00 	cmp.w	lr, #0
 8025e52:	d00b      	beq.n	8025e6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8025e54:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8025e58:	3901      	subs	r1, #1
 8025e5a:	0049      	lsls	r1, r1, #1
 8025e5c:	3102      	adds	r1, #2
 8025e5e:	eb03 0b01 	add.w	fp, r3, r1
 8025e62:	5a5b      	ldrh	r3, [r3, r1]
 8025e64:	930e      	str	r3, [sp, #56]	@ 0x38
 8025e66:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8025e6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025e6c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8025e70:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025e74:	fb12 f30e 	smulbb	r3, r2, lr
 8025e78:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025e7c:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8025e80:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025e84:	10db      	asrs	r3, r3, #3
 8025e86:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025e8a:	ea41 010c 	orr.w	r1, r1, ip
 8025e8e:	f1ce 0c10 	rsb	ip, lr, #16
 8025e92:	ea4b 0000 	orr.w	r0, fp, r0
 8025e96:	9f08      	ldr	r7, [sp, #32]
 8025e98:	ebac 0c02 	sub.w	ip, ip, r2
 8025e9c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025ea0:	f108 38ff 	add.w	r8, r8, #4294967295
 8025ea4:	4350      	muls	r0, r2
 8025ea6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8025eaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025eac:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025eb0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025eb2:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8025eb6:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 8025eba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025ebc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8025ec0:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025ec4:	0412      	lsls	r2, r2, #16
 8025ec6:	ea4b 0101 	orr.w	r1, fp, r1
 8025eca:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8025ece:	fb03 c101 	mla	r1, r3, r1, ip
 8025ed2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8025ed6:	4302      	orrs	r2, r0
 8025ed8:	fb03 1202 	mla	r2, r3, r2, r1
 8025edc:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8025ee0:	0952      	lsrs	r2, r2, #5
 8025ee2:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8025ee6:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 8025eea:	f8b9 2000 	ldrh.w	r2, [r9]
 8025eee:	ea4b 0303 	orr.w	r3, fp, r3
 8025ef2:	1211      	asrs	r1, r2, #8
 8025ef4:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8025ef8:	b29b      	uxth	r3, r3
 8025efa:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025efe:	00d2      	lsls	r2, r2, #3
 8025f00:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8025f04:	fb11 f107 	smulbb	r1, r1, r7
 8025f08:	1218      	asrs	r0, r3, #8
 8025f0a:	fb1c fc07 	smulbb	ip, ip, r7
 8025f0e:	b2d2      	uxtb	r2, r2
 8025f10:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025f14:	fb12 f207 	smulbb	r2, r2, r7
 8025f18:	fb00 100a 	mla	r0, r0, sl, r1
 8025f1c:	10d9      	asrs	r1, r3, #3
 8025f1e:	00db      	lsls	r3, r3, #3
 8025f20:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8025f24:	b280      	uxth	r0, r0
 8025f26:	b2db      	uxtb	r3, r3
 8025f28:	fb01 c10a 	mla	r1, r1, sl, ip
 8025f2c:	fb03 230a 	mla	r3, r3, sl, r2
 8025f30:	1c42      	adds	r2, r0, #1
 8025f32:	b289      	uxth	r1, r1
 8025f34:	b29b      	uxth	r3, r3
 8025f36:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025f3a:	f101 0c01 	add.w	ip, r1, #1
 8025f3e:	1c5a      	adds	r2, r3, #1
 8025f40:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025f44:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8025f48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025f4c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025f4e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025f52:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025f56:	441c      	add	r4, r3
 8025f58:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8025f5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025f5e:	4310      	orrs	r0, r2
 8025f60:	441e      	add	r6, r3
 8025f62:	ea40 000c 	orr.w	r0, r0, ip
 8025f66:	f829 0b02 	strh.w	r0, [r9], #2
 8025f6a:	e6fa      	b.n	8025d62 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8025f6c:	b013      	add	sp, #76	@ 0x4c
 8025f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025f72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8025f72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025f76:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8025f7a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8025f7e:	fb0e 4703 	mla	r7, lr, r3, r4
 8025f82:	f1be 0f00 	cmp.w	lr, #0
 8025f86:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8025f8a:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 8025f8e:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8025f92:	8808      	ldrh	r0, [r1, #0]
 8025f94:	db60      	blt.n	8026058 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8025f96:	45f1      	cmp	r9, lr
 8025f98:	dd5e      	ble.n	8026058 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8025f9a:	2c00      	cmp	r4, #0
 8025f9c:	db5a      	blt.n	8026054 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8025f9e:	42a3      	cmp	r3, r4
 8025fa0:	dd58      	ble.n	8026054 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8025fa2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8025fa6:	1c62      	adds	r2, r4, #1
 8025fa8:	d459      	bmi.n	802605e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8025faa:	4293      	cmp	r3, r2
 8025fac:	dd57      	ble.n	802605e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8025fae:	2d00      	cmp	r5, #0
 8025fb0:	d055      	beq.n	802605e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8025fb2:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8025fb6:	f11e 0e01 	adds.w	lr, lr, #1
 8025fba:	d454      	bmi.n	8026066 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8025fbc:	45f1      	cmp	r9, lr
 8025fbe:	dd52      	ble.n	8026066 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8025fc0:	2e00      	cmp	r6, #0
 8025fc2:	d050      	beq.n	8026066 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8025fc4:	2c00      	cmp	r4, #0
 8025fc6:	db4c      	blt.n	8026062 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8025fc8:	42a3      	cmp	r3, r4
 8025fca:	dd4a      	ble.n	8026062 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8025fcc:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8025fd0:	3401      	adds	r4, #1
 8025fd2:	d405      	bmi.n	8025fe0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025fd4:	42a3      	cmp	r3, r4
 8025fd6:	dd03      	ble.n	8025fe0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025fd8:	b115      	cbz	r5, 8025fe0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025fda:	3301      	adds	r3, #1
 8025fdc:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8025fe0:	fb15 f406 	smulbb	r4, r5, r6
 8025fe4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8025fe8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8025fec:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025ff0:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025ff4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8025ff8:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8025ffc:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8026000:	ea43 0c0c 	orr.w	ip, r3, ip
 8026004:	f1c6 0310 	rsb	r3, r6, #16
 8026008:	ea4e 0707 	orr.w	r7, lr, r7
 802600c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8026010:	1b5b      	subs	r3, r3, r5
 8026012:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8026016:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802601a:	437d      	muls	r5, r7
 802601c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8026020:	0403      	lsls	r3, r0, #16
 8026022:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026026:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802602a:	4318      	orrs	r0, r3
 802602c:	0413      	lsls	r3, r2, #16
 802602e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026032:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8026036:	fb04 c000 	mla	r0, r4, r0, ip
 802603a:	4313      	orrs	r3, r2
 802603c:	fb06 0003 	mla	r0, r6, r3, r0
 8026040:	0d43      	lsrs	r3, r0, #21
 8026042:	0940      	lsrs	r0, r0, #5
 8026044:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026048:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802604c:	4318      	orrs	r0, r3
 802604e:	8008      	strh	r0, [r1, #0]
 8026050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026054:	4684      	mov	ip, r0
 8026056:	e7a6      	b.n	8025fa6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8026058:	4607      	mov	r7, r0
 802605a:	4684      	mov	ip, r0
 802605c:	e7ab      	b.n	8025fb6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802605e:	4607      	mov	r7, r0
 8026060:	e7a9      	b.n	8025fb6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8026062:	4602      	mov	r2, r0
 8026064:	e7b4      	b.n	8025fd0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8026066:	4602      	mov	r2, r0
 8026068:	e7ba      	b.n	8025fe0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802606a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802606a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802606e:	b08f      	sub	sp, #60	@ 0x3c
 8026070:	461d      	mov	r5, r3
 8026072:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026074:	9107      	str	r1, [sp, #28]
 8026076:	920c      	str	r2, [sp, #48]	@ 0x30
 8026078:	6859      	ldr	r1, [r3, #4]
 802607a:	681b      	ldr	r3, [r3, #0]
 802607c:	900d      	str	r0, [sp, #52]	@ 0x34
 802607e:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 8026082:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 8026086:	fb01 2707 	mla	r7, r1, r7, r2
 802608a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802608e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8026090:	f8d3 8000 	ldr.w	r8, [r3]
 8026094:	9b07      	ldr	r3, [sp, #28]
 8026096:	2b00      	cmp	r3, #0
 8026098:	dc03      	bgt.n	80260a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802609a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802609c:	2b00      	cmp	r3, #0
 802609e:	f340 8182 	ble.w	80263a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80260a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80260a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80260a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80260ac:	1e48      	subs	r0, r1, #1
 80260ae:	f102 3cff 	add.w	ip, r2, #4294967295
 80260b2:	2d00      	cmp	r5, #0
 80260b4:	f340 809b 	ble.w	80261ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80260b8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80260bc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80260c0:	d406      	bmi.n	80260d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80260c2:	4586      	cmp	lr, r0
 80260c4:	da04      	bge.n	80260d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80260c6:	2b00      	cmp	r3, #0
 80260c8:	db02      	blt.n	80260d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80260ca:	4563      	cmp	r3, ip
 80260cc:	f2c0 8090 	blt.w	80261f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80260d0:	f11e 0e01 	adds.w	lr, lr, #1
 80260d4:	f100 8084 	bmi.w	80261e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80260d8:	4571      	cmp	r1, lr
 80260da:	f2c0 8081 	blt.w	80261e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80260de:	3301      	adds	r3, #1
 80260e0:	d47e      	bmi.n	80261e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80260e2:	429a      	cmp	r2, r3
 80260e4:	db7c      	blt.n	80261e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80260e6:	46aa      	mov	sl, r5
 80260e8:	46b9      	mov	r9, r7
 80260ea:	f1ba 0f00 	cmp.w	sl, #0
 80260ee:	f340 8099 	ble.w	8026224 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80260f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80260f4:	1421      	asrs	r1, r4, #16
 80260f6:	ea4f 4026 	mov.w	r0, r6, asr #16
 80260fa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80260fe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026102:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026106:	f100 80d1 	bmi.w	80262ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802610a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802610e:	4559      	cmp	r1, fp
 8026110:	f280 80cc 	bge.w	80262ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026114:	2800      	cmp	r0, #0
 8026116:	f2c0 80c9 	blt.w	80262ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802611a:	f103 3bff 	add.w	fp, r3, #4294967295
 802611e:	4558      	cmp	r0, fp
 8026120:	f280 80c4 	bge.w	80262ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8026124:	fa0f fe8e 	sxth.w	lr, lr
 8026128:	fb00 110e 	mla	r1, r0, lr, r1
 802612c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026130:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8026134:	8841      	ldrh	r1, [r0, #2]
 8026136:	f1bc 0f00 	cmp.w	ip, #0
 802613a:	d00b      	beq.n	8026154 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802613c:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 8026140:	3b01      	subs	r3, #1
 8026142:	005b      	lsls	r3, r3, #1
 8026144:	3302      	adds	r3, #2
 8026146:	eb00 0e03 	add.w	lr, r0, r3
 802614a:	5ac3      	ldrh	r3, [r0, r3]
 802614c:	9308      	str	r3, [sp, #32]
 802614e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8026152:	9309      	str	r3, [sp, #36]	@ 0x24
 8026154:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8026158:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802615c:	fb12 f30c 	smulbb	r3, r2, ip
 8026160:	f1cc 0e10 	rsb	lr, ip, #16
 8026164:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8026168:	10db      	asrs	r3, r3, #3
 802616a:	ebae 0e02 	sub.w	lr, lr, r2
 802616e:	ea40 000b 	orr.w	r0, r0, fp
 8026172:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026176:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802617a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802617e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026182:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026186:	ea4b 0101 	orr.w	r1, fp, r1
 802618a:	4351      	muls	r1, r2
 802618c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802618e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026192:	0410      	lsls	r0, r2, #16
 8026194:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026198:	9908      	ldr	r1, [sp, #32]
 802619a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802619e:	4310      	orrs	r0, r2
 80261a0:	9a08      	ldr	r2, [sp, #32]
 80261a2:	0412      	lsls	r2, r2, #16
 80261a4:	fb03 e000 	mla	r0, r3, r0, lr
 80261a8:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80261ac:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80261b0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80261b4:	ea42 020e 	orr.w	r2, r2, lr
 80261b8:	fb03 0302 	mla	r3, r3, r2, r0
 80261bc:	0d5a      	lsrs	r2, r3, #21
 80261be:	095b      	lsrs	r3, r3, #5
 80261c0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80261c4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80261c8:	4313      	orrs	r3, r2
 80261ca:	f8a9 3000 	strh.w	r3, [r9]
 80261ce:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80261d0:	f109 0902 	add.w	r9, r9, #2
 80261d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80261d8:	441c      	add	r4, r3
 80261da:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80261dc:	441e      	add	r6, r3
 80261de:	e784      	b.n	80260ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80261e0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80261e2:	3d01      	subs	r5, #1
 80261e4:	3702      	adds	r7, #2
 80261e6:	441c      	add	r4, r3
 80261e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80261ea:	441e      	add	r6, r3
 80261ec:	e761      	b.n	80260b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80261ee:	d01d      	beq.n	802622c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80261f0:	1e6b      	subs	r3, r5, #1
 80261f2:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80261f4:	fb00 4003 	mla	r0, r0, r3, r4
 80261f8:	1400      	asrs	r0, r0, #16
 80261fa:	f53f af74 	bmi.w	80260e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80261fe:	3901      	subs	r1, #1
 8026200:	4288      	cmp	r0, r1
 8026202:	f6bf af70 	bge.w	80260e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026206:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026208:	fb01 6303 	mla	r3, r1, r3, r6
 802620c:	141b      	asrs	r3, r3, #16
 802620e:	f53f af6a 	bmi.w	80260e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026212:	3a01      	subs	r2, #1
 8026214:	4293      	cmp	r3, r2
 8026216:	f6bf af66 	bge.w	80260e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802621a:	46a9      	mov	r9, r5
 802621c:	46ba      	mov	sl, r7
 802621e:	f1b9 0f00 	cmp.w	r9, #0
 8026222:	dc5b      	bgt.n	80262dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8026224:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026228:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802622c:	9b07      	ldr	r3, [sp, #28]
 802622e:	2b00      	cmp	r3, #0
 8026230:	f340 80b9 	ble.w	80263a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8026234:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026238:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802623a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802623e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026242:	eef0 6a62 	vmov.f32	s13, s5
 8026246:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802624a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802624e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026252:	ee16 4a90 	vmov	r4, s13
 8026256:	eef0 6a43 	vmov.f32	s13, s6
 802625a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802625e:	ee16 6a90 	vmov	r6, s13
 8026262:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026266:	ee61 7a27 	vmul.f32	s15, s2, s15
 802626a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802626e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026272:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026276:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802627a:	ee12 2a90 	vmov	r2, s5
 802627e:	eef0 2a47 	vmov.f32	s5, s14
 8026282:	fb92 f3f3 	sdiv	r3, r2, r3
 8026286:	ee13 2a10 	vmov	r2, s6
 802628a:	931b      	str	r3, [sp, #108]	@ 0x6c
 802628c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802628e:	eeb0 3a67 	vmov.f32	s6, s15
 8026292:	fb92 f3f3 	sdiv	r3, r2, r3
 8026296:	931c      	str	r3, [sp, #112]	@ 0x70
 8026298:	9b07      	ldr	r3, [sp, #28]
 802629a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802629c:	3b01      	subs	r3, #1
 802629e:	9307      	str	r3, [sp, #28]
 80262a0:	bf08      	it	eq
 80262a2:	4615      	moveq	r5, r2
 80262a4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80262a6:	bf18      	it	ne
 80262a8:	461d      	movne	r5, r3
 80262aa:	e6f3      	b.n	8026094 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80262ac:	f111 0b01 	adds.w	fp, r1, #1
 80262b0:	d48d      	bmi.n	80261ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80262b2:	45de      	cmp	lr, fp
 80262b4:	db8b      	blt.n	80261ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80262b6:	f110 0b01 	adds.w	fp, r0, #1
 80262ba:	d488      	bmi.n	80261ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80262bc:	455b      	cmp	r3, fp
 80262be:	db86      	blt.n	80261ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80262c0:	b21b      	sxth	r3, r3
 80262c2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80262c6:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80262ca:	9300      	str	r3, [sp, #0]
 80262cc:	4642      	mov	r2, r8
 80262ce:	fa0f f38e 	sxth.w	r3, lr
 80262d2:	4649      	mov	r1, r9
 80262d4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80262d6:	f7ff fe4c 	bl	8025f72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80262da:	e778      	b.n	80261ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80262dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80262de:	1420      	asrs	r0, r4, #16
 80262e0:	1431      	asrs	r1, r6, #16
 80262e2:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80262e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80262ea:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80262ee:	fb03 0101 	mla	r1, r3, r1, r0
 80262f2:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80262f6:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80262fa:	8841      	ldrh	r1, [r0, #2]
 80262fc:	f1be 0f00 	cmp.w	lr, #0
 8026300:	d00b      	beq.n	802631a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026302:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8026306:	3b01      	subs	r3, #1
 8026308:	005b      	lsls	r3, r3, #1
 802630a:	3302      	adds	r3, #2
 802630c:	eb00 0b03 	add.w	fp, r0, r3
 8026310:	5ac3      	ldrh	r3, [r0, r3]
 8026312:	930a      	str	r3, [sp, #40]	@ 0x28
 8026314:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026318:	930b      	str	r3, [sp, #44]	@ 0x2c
 802631a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802631e:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8026322:	fb12 f30e 	smulbb	r3, r2, lr
 8026326:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802632a:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802632e:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026332:	10db      	asrs	r3, r3, #3
 8026334:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026338:	ea40 000c 	orr.w	r0, r0, ip
 802633c:	f1ce 0c10 	rsb	ip, lr, #16
 8026340:	ea4b 0101 	orr.w	r1, fp, r1
 8026344:	f109 39ff 	add.w	r9, r9, #4294967295
 8026348:	ebac 0c02 	sub.w	ip, ip, r2
 802634c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026350:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026354:	4351      	muls	r1, r2
 8026356:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026358:	fb0c 1c00 	mla	ip, ip, r0, r1
 802635c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802635e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026362:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 8026366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026368:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802636c:	0412      	lsls	r2, r2, #16
 802636e:	ea4b 0000 	orr.w	r0, fp, r0
 8026372:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 8026376:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 802637a:	fb03 c000 	mla	r0, r3, r0, ip
 802637e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026382:	ea42 0b0b 	orr.w	fp, r2, fp
 8026386:	fb03 000b 	mla	r0, r3, fp, r0
 802638a:	0d43      	lsrs	r3, r0, #21
 802638c:	0940      	lsrs	r0, r0, #5
 802638e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026392:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026396:	4318      	orrs	r0, r3
 8026398:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802639a:	441c      	add	r4, r3
 802639c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802639e:	f82a 0b02 	strh.w	r0, [sl], #2
 80263a2:	441e      	add	r6, r3
 80263a4:	e73b      	b.n	802621e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80263a6:	b00f      	add	sp, #60	@ 0x3c
 80263a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080263ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80263ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263b0:	b085      	sub	sp, #20
 80263b2:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 80263b6:	9102      	str	r1, [sp, #8]
 80263b8:	2c00      	cmp	r4, #0
 80263ba:	fb04 7103 	mla	r1, r4, r3, r7
 80263be:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 80263c2:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 80263c6:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80263ca:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 80263ce:	f2c0 811b 	blt.w	8026608 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80263d2:	45a6      	cmp	lr, r4
 80263d4:	f340 8118 	ble.w	8026608 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80263d8:	2f00      	cmp	r7, #0
 80263da:	f2c0 8113 	blt.w	8026604 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80263de:	42bb      	cmp	r3, r7
 80263e0:	f340 8110 	ble.w	8026604 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80263e4:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80263e8:	1c7a      	adds	r2, r7, #1
 80263ea:	f100 8110 	bmi.w	802660e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80263ee:	4293      	cmp	r3, r2
 80263f0:	f340 810d 	ble.w	802660e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80263f4:	2e00      	cmp	r6, #0
 80263f6:	f000 810c 	beq.w	8026612 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80263fa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80263fe:	3401      	adds	r4, #1
 8026400:	f100 810b 	bmi.w	802661a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026404:	45a6      	cmp	lr, r4
 8026406:	f340 8108 	ble.w	802661a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802640a:	2800      	cmp	r0, #0
 802640c:	f000 8108 	beq.w	8026620 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8026410:	2f00      	cmp	r7, #0
 8026412:	f2c0 8100 	blt.w	8026616 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026416:	42bb      	cmp	r3, r7
 8026418:	f340 80fd 	ble.w	8026616 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802641c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026420:	3701      	adds	r7, #1
 8026422:	f100 8100 	bmi.w	8026626 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026426:	42bb      	cmp	r3, r7
 8026428:	f340 80fd 	ble.w	8026626 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802642c:	2e00      	cmp	r6, #0
 802642e:	f000 80fc 	beq.w	802662a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8026432:	3301      	adds	r3, #1
 8026434:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026438:	b2b6      	uxth	r6, r6
 802643a:	b280      	uxth	r0, r0
 802643c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026440:	fb00 fe06 	mul.w	lr, r0, r6
 8026444:	0136      	lsls	r6, r6, #4
 8026446:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802644a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802644e:	eba6 070e 	sub.w	r7, r6, lr
 8026452:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8026456:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802645a:	b280      	uxth	r0, r0
 802645c:	b2bf      	uxth	r7, r7
 802645e:	1a1b      	subs	r3, r3, r0
 8026460:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026464:	fb0a f607 	mul.w	r6, sl, r7
 8026468:	b29b      	uxth	r3, r3
 802646a:	fb0b 6603 	mla	r6, fp, r3, r6
 802646e:	fb00 6609 	mla	r6, r0, r9, r6
 8026472:	fb0e 6608 	mla	r6, lr, r8, r6
 8026476:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802647a:	9600      	str	r6, [sp, #0]
 802647c:	2e00      	cmp	r6, #0
 802647e:	f000 80be 	beq.w	80265fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8026482:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026486:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802648a:	9e02      	ldr	r6, [sp, #8]
 802648c:	fb0b fc0c 	mul.w	ip, fp, ip
 8026490:	fb0b f505 	mul.w	r5, fp, r5
 8026494:	8836      	ldrh	r6, [r6, #0]
 8026496:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802649a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802649e:	9501      	str	r5, [sp, #4]
 80264a0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80264a4:	44dc      	add	ip, fp
 80264a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80264aa:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80264ae:	9503      	str	r5, [sp, #12]
 80264b0:	9d01      	ldr	r5, [sp, #4]
 80264b2:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80264b6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80264ba:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80264be:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80264c2:	fb0a fc0c 	mul.w	ip, sl, ip
 80264c6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80264ca:	fb0a fa01 	mul.w	sl, sl, r1
 80264ce:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80264d2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80264d6:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 80264da:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80264de:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80264e2:	4465      	add	r5, ip
 80264e4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80264e8:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80264ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80264f0:	fb09 fc0c 	mul.w	ip, r9, ip
 80264f4:	0a2d      	lsrs	r5, r5, #8
 80264f6:	fb09 f904 	mul.w	r9, r9, r4
 80264fa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80264fe:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8026502:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026506:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802650a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802650e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8026512:	437d      	muls	r5, r7
 8026514:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026518:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 802651c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026520:	4461      	add	r1, ip
 8026522:	fb08 f404 	mul.w	r4, r8, r4
 8026526:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802652a:	fb08 f802 	mul.w	r8, r8, r2
 802652e:	0a09      	lsrs	r1, r1, #8
 8026530:	0a22      	lsrs	r2, r4, #8
 8026532:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8026536:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802653a:	fb07 f70a 	mul.w	r7, r7, sl
 802653e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026542:	4414      	add	r4, r2
 8026544:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8026548:	0a24      	lsrs	r4, r4, #8
 802654a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802654e:	9a03      	ldr	r2, [sp, #12]
 8026550:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026554:	fb02 5503 	mla	r5, r2, r3, r5
 8026558:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802655c:	9a00      	ldr	r2, [sp, #0]
 802655e:	fb04 540e 	mla	r4, r4, lr, r5
 8026562:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8026566:	1235      	asrs	r5, r6, #8
 8026568:	fb01 4100 	mla	r1, r1, r0, r4
 802656c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026570:	0a09      	lsrs	r1, r1, #8
 8026572:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8026576:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802657a:	fb03 7101 	mla	r1, r3, r1, r7
 802657e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8026582:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8026586:	fb00 e101 	mla	r1, r0, r1, lr
 802658a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802658e:	b287      	uxth	r7, r0
 8026590:	0a09      	lsrs	r1, r1, #8
 8026592:	437a      	muls	r2, r7
 8026594:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026598:	1c53      	adds	r3, r2, #1
 802659a:	4321      	orrs	r1, r4
 802659c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80265a0:	0c0a      	lsrs	r2, r1, #16
 80265a2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80265a6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80265aa:	b2c8      	uxtb	r0, r1
 80265ac:	fb12 f207 	smulbb	r2, r2, r7
 80265b0:	fb14 f407 	smulbb	r4, r4, r7
 80265b4:	b2db      	uxtb	r3, r3
 80265b6:	fb10 f007 	smulbb	r0, r0, r7
 80265ba:	fb05 2503 	mla	r5, r5, r3, r2
 80265be:	10f2      	asrs	r2, r6, #3
 80265c0:	00f6      	lsls	r6, r6, #3
 80265c2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80265c6:	b2ad      	uxth	r5, r5
 80265c8:	b2f6      	uxtb	r6, r6
 80265ca:	fb02 4203 	mla	r2, r2, r3, r4
 80265ce:	fb06 0303 	mla	r3, r6, r3, r0
 80265d2:	b294      	uxth	r4, r2
 80265d4:	b299      	uxth	r1, r3
 80265d6:	1c6b      	adds	r3, r5, #1
 80265d8:	1c62      	adds	r2, r4, #1
 80265da:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80265de:	1c4b      	adds	r3, r1, #1
 80265e0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80265e4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80265e8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80265ec:	0952      	lsrs	r2, r2, #5
 80265ee:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80265f2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80265f6:	432b      	orrs	r3, r5
 80265f8:	4313      	orrs	r3, r2
 80265fa:	9a02      	ldr	r2, [sp, #8]
 80265fc:	8013      	strh	r3, [r2, #0]
 80265fe:	b005      	add	sp, #20
 8026600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026604:	2500      	movs	r5, #0
 8026606:	e6ef      	b.n	80263e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8026608:	2100      	movs	r1, #0
 802660a:	460d      	mov	r5, r1
 802660c:	e6f7      	b.n	80263fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802660e:	2100      	movs	r1, #0
 8026610:	e6f5      	b.n	80263fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026612:	4631      	mov	r1, r6
 8026614:	e6f3      	b.n	80263fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026616:	2400      	movs	r4, #0
 8026618:	e702      	b.n	8026420 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802661a:	2200      	movs	r2, #0
 802661c:	4614      	mov	r4, r2
 802661e:	e70b      	b.n	8026438 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026620:	4602      	mov	r2, r0
 8026622:	4604      	mov	r4, r0
 8026624:	e708      	b.n	8026438 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026626:	2200      	movs	r2, #0
 8026628:	e706      	b.n	8026438 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802662a:	4632      	mov	r2, r6
 802662c:	e704      	b.n	8026438 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802662e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802662e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026632:	b09d      	sub	sp, #116	@ 0x74
 8026634:	9219      	str	r2, [sp, #100]	@ 0x64
 8026636:	9307      	str	r3, [sp, #28]
 8026638:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 802663a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 802663e:	901b      	str	r0, [sp, #108]	@ 0x6c
 8026640:	931a      	str	r3, [sp, #104]	@ 0x68
 8026642:	6850      	ldr	r0, [r2, #4]
 8026644:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026646:	6812      	ldr	r2, [r2, #0]
 8026648:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 802664c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 8026650:	fb00 1303 	mla	r3, r0, r3, r1
 8026654:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026658:	930a      	str	r3, [sp, #40]	@ 0x28
 802665a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802665c:	681b      	ldr	r3, [r3, #0]
 802665e:	9310      	str	r3, [sp, #64]	@ 0x40
 8026660:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8026664:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026666:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026668:	2b00      	cmp	r3, #0
 802666a:	dc03      	bgt.n	8026674 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802666c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802666e:	2b00      	cmp	r3, #0
 8026670:	f340 8375 	ble.w	8026d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8026674:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026676:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802667a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802667e:	1e48      	subs	r0, r1, #1
 8026680:	1e57      	subs	r7, r2, #1
 8026682:	9b07      	ldr	r3, [sp, #28]
 8026684:	2b00      	cmp	r3, #0
 8026686:	f340 818e 	ble.w	80269a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802668a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802668e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026692:	d406      	bmi.n	80266a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026694:	4584      	cmp	ip, r0
 8026696:	da04      	bge.n	80266a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026698:	2b00      	cmp	r3, #0
 802669a:	db02      	blt.n	80266a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802669c:	42bb      	cmp	r3, r7
 802669e:	f2c0 8183 	blt.w	80269a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80266a2:	f11c 0c01 	adds.w	ip, ip, #1
 80266a6:	f100 8173 	bmi.w	8026990 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80266aa:	4561      	cmp	r1, ip
 80266ac:	f2c0 8170 	blt.w	8026990 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80266b0:	3301      	adds	r3, #1
 80266b2:	f100 816d 	bmi.w	8026990 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80266b6:	429a      	cmp	r2, r3
 80266b8:	f2c0 816a 	blt.w	8026990 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80266bc:	9b07      	ldr	r3, [sp, #28]
 80266be:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80266c0:	9318      	str	r3, [sp, #96]	@ 0x60
 80266c2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80266c4:	2b00      	cmp	r3, #0
 80266c6:	f340 818c 	ble.w	80269e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80266ca:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80266cc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80266d0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80266d2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80266d6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80266da:	1422      	asrs	r2, r4, #16
 80266dc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80266e0:	689b      	ldr	r3, [r3, #8]
 80266e2:	f100 81cd 	bmi.w	8026a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80266e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80266ea:	4542      	cmp	r2, r8
 80266ec:	f280 81c8 	bge.w	8026a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80266f0:	f1bc 0f00 	cmp.w	ip, #0
 80266f4:	f2c0 81c4 	blt.w	8026a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80266f8:	f10e 38ff 	add.w	r8, lr, #4294967295
 80266fc:	45c4      	cmp	ip, r8
 80266fe:	f280 81bf 	bge.w	8026a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026702:	b21b      	sxth	r3, r3
 8026704:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8026706:	fb0c 2203 	mla	r2, ip, r3, r2
 802670a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802670e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026712:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026716:	2800      	cmp	r0, #0
 8026718:	f000 81a9 	beq.w	8026a6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802671c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026720:	950c      	str	r5, [sp, #48]	@ 0x30
 8026722:	0e2d      	lsrs	r5, r5, #24
 8026724:	9513      	str	r5, [sp, #76]	@ 0x4c
 8026726:	b181      	cbz	r1, 802674a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026728:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802672c:	3b01      	subs	r3, #1
 802672e:	009b      	lsls	r3, r3, #2
 8026730:	3304      	adds	r3, #4
 8026732:	eb08 0c03 	add.w	ip, r8, r3
 8026736:	f858 3003 	ldr.w	r3, [r8, r3]
 802673a:	9308      	str	r3, [sp, #32]
 802673c:	0e1b      	lsrs	r3, r3, #24
 802673e:	9311      	str	r3, [sp, #68]	@ 0x44
 8026740:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026744:	930d      	str	r3, [sp, #52]	@ 0x34
 8026746:	0e1b      	lsrs	r3, r3, #24
 8026748:	9314      	str	r3, [sp, #80]	@ 0x50
 802674a:	b280      	uxth	r0, r0
 802674c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802674e:	b289      	uxth	r1, r1
 8026750:	fb00 f901 	mul.w	r9, r0, r1
 8026754:	0100      	lsls	r0, r0, #4
 8026756:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802675a:	eba0 0809 	sub.w	r8, r0, r9
 802675e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8026762:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8026764:	b289      	uxth	r1, r1
 8026766:	fa1f f888 	uxth.w	r8, r8
 802676a:	1a5b      	subs	r3, r3, r1
 802676c:	fb08 f000 	mul.w	r0, r8, r0
 8026770:	b29b      	uxth	r3, r3
 8026772:	fb03 000e 	mla	r0, r3, lr, r0
 8026776:	fb01 0005 	mla	r0, r1, r5, r0
 802677a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802677c:	fb09 0005 	mla	r0, r9, r5, r0
 8026780:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026784:	2800      	cmp	r0, #0
 8026786:	f000 80fa 	beq.w	802697e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802678a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802678e:	d01b      	beq.n	80267c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8026790:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8026794:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026798:	fb0e fa0a 	mul.w	sl, lr, sl
 802679c:	fb0e fe02 	mul.w	lr, lr, r2
 80267a0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80267a4:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80267a8:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80267ac:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80267b0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80267b4:	4452      	add	r2, sl
 80267b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267ba:	0a12      	lsrs	r2, r2, #8
 80267bc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80267c0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80267c4:	ea42 020c 	orr.w	r2, r2, ip
 80267c8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80267ca:	2dff      	cmp	r5, #255	@ 0xff
 80267cc:	d021      	beq.n	8026812 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80267ce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80267d0:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80267d4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80267d6:	fb05 fb0b 	mul.w	fp, r5, fp
 80267da:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80267dc:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80267e0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80267e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80267e6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80267ea:	fb05 fa0a 	mul.w	sl, r5, sl
 80267ee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80267f2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80267f6:	44de      	add	lr, fp
 80267f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80267fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026800:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026804:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026808:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802680c:	ea4e 050a 	orr.w	r5, lr, sl
 8026810:	950c      	str	r5, [sp, #48]	@ 0x30
 8026812:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026814:	2dff      	cmp	r5, #255	@ 0xff
 8026816:	d021      	beq.n	802685c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026818:	9d08      	ldr	r5, [sp, #32]
 802681a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802681e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8026820:	fb05 fb0b 	mul.w	fp, r5, fp
 8026824:	9d08      	ldr	r5, [sp, #32]
 8026826:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802682a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802682c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026830:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026834:	fb05 fa0a 	mul.w	sl, r5, sl
 8026838:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802683c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026840:	44de      	add	lr, fp
 8026842:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026846:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802684a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802684e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026852:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026856:	ea4e 050a 	orr.w	r5, lr, sl
 802685a:	9508      	str	r5, [sp, #32]
 802685c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802685e:	2dff      	cmp	r5, #255	@ 0xff
 8026860:	d021      	beq.n	80268a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8026862:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026864:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8026868:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802686a:	fb05 fb0b 	mul.w	fp, r5, fp
 802686e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8026870:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026874:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026876:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802687a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802687e:	fb05 fa0a 	mul.w	sl, r5, sl
 8026882:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026886:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802688a:	44de      	add	lr, fp
 802688c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026890:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026894:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026898:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802689c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80268a0:	ea4e 050a 	orr.w	r5, lr, sl
 80268a4:	950d      	str	r5, [sp, #52]	@ 0x34
 80268a6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80268a8:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80268ac:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80268b0:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80268b4:	9d08      	ldr	r5, [sp, #32]
 80268b6:	fb08 fc0c 	mul.w	ip, r8, ip
 80268ba:	fb03 cc0e 	mla	ip, r3, lr, ip
 80268be:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80268c2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80268c4:	fb01 cc0e 	mla	ip, r1, lr, ip
 80268c8:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80268cc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80268ce:	fb09 cc0e 	mla	ip, r9, lr, ip
 80268d2:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80268d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80268d8:	fb08 f80e 	mul.w	r8, r8, lr
 80268dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268e0:	fb03 8202 	mla	r2, r3, r2, r8
 80268e4:	9b08      	ldr	r3, [sp, #32]
 80268e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80268ea:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 80268ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80268f0:	fb01 220a 	mla	r2, r1, sl, r2
 80268f4:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 80268f8:	883b      	ldrh	r3, [r7, #0]
 80268fa:	fb09 2901 	mla	r9, r9, r1, r2
 80268fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026900:	1219      	asrs	r1, r3, #8
 8026902:	4342      	muls	r2, r0
 8026904:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026908:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802690c:	1c50      	adds	r0, r2, #1
 802690e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026912:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026916:	ea4c 0c09 	orr.w	ip, ip, r9
 802691a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802691e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8026922:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026926:	fa5f fc8c 	uxtb.w	ip, ip
 802692a:	fb12 f205 	smulbb	r2, r2, r5
 802692e:	b2c0      	uxtb	r0, r0
 8026930:	fb1c fc05 	smulbb	ip, ip, r5
 8026934:	fb01 2100 	mla	r1, r1, r0, r2
 8026938:	10da      	asrs	r2, r3, #3
 802693a:	fb1e fe05 	smulbb	lr, lr, r5
 802693e:	00db      	lsls	r3, r3, #3
 8026940:	b289      	uxth	r1, r1
 8026942:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8026946:	b2db      	uxtb	r3, r3
 8026948:	fb02 e200 	mla	r2, r2, r0, lr
 802694c:	fb03 c300 	mla	r3, r3, r0, ip
 8026950:	b292      	uxth	r2, r2
 8026952:	fa1f fc83 	uxth.w	ip, r3
 8026956:	1c4b      	adds	r3, r1, #1
 8026958:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802695c:	f10c 0301 	add.w	r3, ip, #1
 8026960:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026964:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8026968:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802696c:	430b      	orrs	r3, r1
 802696e:	1c51      	adds	r1, r2, #1
 8026970:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026974:	0952      	lsrs	r2, r2, #5
 8026976:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802697a:	4313      	orrs	r3, r2
 802697c:	803b      	strh	r3, [r7, #0]
 802697e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026980:	3702      	adds	r7, #2
 8026982:	441c      	add	r4, r3
 8026984:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026986:	441e      	add	r6, r3
 8026988:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802698a:	3b01      	subs	r3, #1
 802698c:	9318      	str	r3, [sp, #96]	@ 0x60
 802698e:	e698      	b.n	80266c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026990:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026992:	441c      	add	r4, r3
 8026994:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026996:	441e      	add	r6, r3
 8026998:	9b07      	ldr	r3, [sp, #28]
 802699a:	3b01      	subs	r3, #1
 802699c:	9307      	str	r3, [sp, #28]
 802699e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80269a0:	3302      	adds	r3, #2
 80269a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80269a4:	e66d      	b.n	8026682 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80269a6:	d023      	beq.n	80269f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80269a8:	9b07      	ldr	r3, [sp, #28]
 80269aa:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80269ac:	3b01      	subs	r3, #1
 80269ae:	fb00 4003 	mla	r0, r0, r3, r4
 80269b2:	1400      	asrs	r0, r0, #16
 80269b4:	f53f ae82 	bmi.w	80266bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80269b8:	3901      	subs	r1, #1
 80269ba:	4288      	cmp	r0, r1
 80269bc:	f6bf ae7e 	bge.w	80266bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80269c0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80269c2:	fb01 6303 	mla	r3, r1, r3, r6
 80269c6:	141b      	asrs	r3, r3, #16
 80269c8:	f53f ae78 	bmi.w	80266bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80269cc:	3a01      	subs	r2, #1
 80269ce:	4293      	cmp	r3, r2
 80269d0:	f6bf ae74 	bge.w	80266bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80269d4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80269d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80269dc:	f1bb 0f00 	cmp.w	fp, #0
 80269e0:	dc6c      	bgt.n	8026abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80269e2:	9b07      	ldr	r3, [sp, #28]
 80269e4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80269e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80269ea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80269ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80269f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80269f2:	2b00      	cmp	r3, #0
 80269f4:	f340 81b3 	ble.w	8026d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80269f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80269fc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80269fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026a02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026a06:	eef0 6a62 	vmov.f32	s13, s5
 8026a0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026a0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026a12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a16:	ee16 4a90 	vmov	r4, s13
 8026a1a:	eef0 6a43 	vmov.f32	s13, s6
 8026a1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a22:	ee16 6a90 	vmov	r6, s13
 8026a26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026a2a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026a2e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026a32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026a36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026a3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026a3e:	ee12 2a90 	vmov	r2, s5
 8026a42:	eef0 2a47 	vmov.f32	s5, s14
 8026a46:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a4a:	ee13 2a10 	vmov	r2, s6
 8026a4e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8026a50:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026a52:	eeb0 3a67 	vmov.f32	s6, s15
 8026a56:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a5a:	932a      	str	r3, [sp, #168]	@ 0xa8
 8026a5c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026a5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8026a60:	3b01      	subs	r3, #1
 8026a62:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026a64:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026a66:	bf08      	it	eq
 8026a68:	4613      	moveq	r3, r2
 8026a6a:	9307      	str	r3, [sp, #28]
 8026a6c:	e5fb      	b.n	8026666 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8026a6e:	2900      	cmp	r1, #0
 8026a70:	f43f ae6b 	beq.w	802674a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026a74:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8026a78:	9308      	str	r3, [sp, #32]
 8026a7a:	0e1b      	lsrs	r3, r3, #24
 8026a7c:	9311      	str	r3, [sp, #68]	@ 0x44
 8026a7e:	e664      	b.n	802674a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026a80:	f112 0801 	adds.w	r8, r2, #1
 8026a84:	f53f af7b 	bmi.w	802697e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026a88:	4543      	cmp	r3, r8
 8026a8a:	f6ff af78 	blt.w	802697e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026a8e:	f11c 0801 	adds.w	r8, ip, #1
 8026a92:	f53f af74 	bmi.w	802697e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026a96:	45c6      	cmp	lr, r8
 8026a98:	f6ff af71 	blt.w	802697e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026a9c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8026a9e:	b21b      	sxth	r3, r3
 8026aa0:	9201      	str	r2, [sp, #4]
 8026aa2:	fa0f f28e 	sxth.w	r2, lr
 8026aa6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8026aaa:	e9cd c002 	strd	ip, r0, [sp, #8]
 8026aae:	9200      	str	r2, [sp, #0]
 8026ab0:	4639      	mov	r1, r7
 8026ab2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026ab4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8026ab6:	f7ff fc79 	bl	80263ac <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8026aba:	e760      	b.n	802697e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026abc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026abe:	1427      	asrs	r7, r4, #16
 8026ac0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8026ac2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026ac6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026aca:	1433      	asrs	r3, r6, #16
 8026acc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026ad0:	fb01 7303 	mla	r3, r1, r3, r7
 8026ad4:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8026ad8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8026adc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026ae0:	2a00      	cmp	r2, #0
 8026ae2:	f000 8133 	beq.w	8026d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8026ae6:	687d      	ldr	r5, [r7, #4]
 8026ae8:	950e      	str	r5, [sp, #56]	@ 0x38
 8026aea:	0e2d      	lsrs	r5, r5, #24
 8026aec:	9515      	str	r5, [sp, #84]	@ 0x54
 8026aee:	b178      	cbz	r0, 8026b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026af0:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8026af4:	3901      	subs	r1, #1
 8026af6:	0089      	lsls	r1, r1, #2
 8026af8:	3104      	adds	r1, #4
 8026afa:	eb07 0e01 	add.w	lr, r7, r1
 8026afe:	5879      	ldr	r1, [r7, r1]
 8026b00:	9109      	str	r1, [sp, #36]	@ 0x24
 8026b02:	0e09      	lsrs	r1, r1, #24
 8026b04:	9112      	str	r1, [sp, #72]	@ 0x48
 8026b06:	f8de 1004 	ldr.w	r1, [lr, #4]
 8026b0a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8026b0c:	0e09      	lsrs	r1, r1, #24
 8026b0e:	9116      	str	r1, [sp, #88]	@ 0x58
 8026b10:	b292      	uxth	r2, r2
 8026b12:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8026b14:	b280      	uxth	r0, r0
 8026b16:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026b18:	fb02 f800 	mul.w	r8, r2, r0
 8026b1c:	0112      	lsls	r2, r2, #4
 8026b1e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026b22:	eba2 0e08 	sub.w	lr, r2, r8
 8026b26:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8026b2a:	b280      	uxth	r0, r0
 8026b2c:	fa1f fe8e 	uxth.w	lr, lr
 8026b30:	1a12      	subs	r2, r2, r0
 8026b32:	fb0e f101 	mul.w	r1, lr, r1
 8026b36:	b292      	uxth	r2, r2
 8026b38:	fb02 110c 	mla	r1, r2, ip, r1
 8026b3c:	fb00 1105 	mla	r1, r0, r5, r1
 8026b40:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026b42:	fb08 1105 	mla	r1, r8, r5, r1
 8026b46:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026b4a:	2900      	cmp	r1, #0
 8026b4c:	f000 80f5 	beq.w	8026d3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8026b50:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026b54:	d019      	beq.n	8026b8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8026b56:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026b5a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026b5e:	fb0c fa0a 	mul.w	sl, ip, sl
 8026b62:	fb0c fc03 	mul.w	ip, ip, r3
 8026b66:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026b6a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026b6e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8026b72:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026b76:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026b7a:	4453      	add	r3, sl
 8026b7c:	0a3f      	lsrs	r7, r7, #8
 8026b7e:	0a1b      	lsrs	r3, r3, #8
 8026b80:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026b84:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026b88:	433b      	orrs	r3, r7
 8026b8a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026b8c:	2dff      	cmp	r5, #255	@ 0xff
 8026b8e:	d020      	beq.n	8026bd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8026b90:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026b92:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026b96:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026b98:	436f      	muls	r7, r5
 8026b9a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026b9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026ba0:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026ba4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8026ba6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026baa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026bae:	fb05 fa0a 	mul.w	sl, r5, sl
 8026bb2:	44bc      	add	ip, r7
 8026bb4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026bb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026bbc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026bc0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026bc4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026bc8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026bcc:	ea4c 050a 	orr.w	r5, ip, sl
 8026bd0:	950e      	str	r5, [sp, #56]	@ 0x38
 8026bd2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026bd4:	2dff      	cmp	r5, #255	@ 0xff
 8026bd6:	d020      	beq.n	8026c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8026bd8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026bda:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026bde:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026be0:	436f      	muls	r7, r5
 8026be2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026be4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026be8:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026bec:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026bee:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026bf2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026bf6:	fb05 fa0a 	mul.w	sl, r5, sl
 8026bfa:	44bc      	add	ip, r7
 8026bfc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026c00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c04:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c08:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026c0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c10:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026c14:	ea4c 050a 	orr.w	r5, ip, sl
 8026c18:	9509      	str	r5, [sp, #36]	@ 0x24
 8026c1a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026c1c:	2dff      	cmp	r5, #255	@ 0xff
 8026c1e:	d020      	beq.n	8026c62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8026c20:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026c22:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026c26:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026c28:	436f      	muls	r7, r5
 8026c2a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026c2c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026c30:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8026c34:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026c36:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026c3a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026c3e:	fb05 fa0a 	mul.w	sl, r5, sl
 8026c42:	44bc      	add	ip, r7
 8026c44:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026c48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c50:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026c54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c58:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026c5c:	ea4c 050a 	orr.w	r5, ip, sl
 8026c60:	950f      	str	r5, [sp, #60]	@ 0x3c
 8026c62:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026c64:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026c68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026c6c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8026c70:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8026c72:	fb0e f707 	mul.w	r7, lr, r7
 8026c76:	fb02 770c 	mla	r7, r2, ip, r7
 8026c7a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026c7e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026c80:	fb00 770c 	mla	r7, r0, ip, r7
 8026c84:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026c88:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8026c8a:	fb08 770c 	mla	r7, r8, ip, r7
 8026c8e:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8026c92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8026c94:	fb0e fe0c 	mul.w	lr, lr, ip
 8026c98:	0a3f      	lsrs	r7, r7, #8
 8026c9a:	fb02 e303 	mla	r3, r2, r3, lr
 8026c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026ca0:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026ca4:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8026ca8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026caa:	fb00 330a 	mla	r3, r0, sl, r3
 8026cae:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8026cb2:	f8b9 0000 	ldrh.w	r0, [r9]
 8026cb6:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026cba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026cbc:	1202      	asrs	r2, r0, #8
 8026cbe:	4359      	muls	r1, r3
 8026cc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026cc4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8026cc8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026ccc:	1c4b      	adds	r3, r1, #1
 8026cce:	ea47 070c 	orr.w	r7, r7, ip
 8026cd2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026cd6:	0c3b      	lsrs	r3, r7, #16
 8026cd8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026cdc:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026ce0:	b2ff      	uxtb	r7, r7
 8026ce2:	fb13 f305 	smulbb	r3, r3, r5
 8026ce6:	b2c9      	uxtb	r1, r1
 8026ce8:	fb17 f705 	smulbb	r7, r7, r5
 8026cec:	fb02 3201 	mla	r2, r2, r1, r3
 8026cf0:	10c3      	asrs	r3, r0, #3
 8026cf2:	fb1c fc05 	smulbb	ip, ip, r5
 8026cf6:	00c0      	lsls	r0, r0, #3
 8026cf8:	b292      	uxth	r2, r2
 8026cfa:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026cfe:	b2c0      	uxtb	r0, r0
 8026d00:	fb03 c301 	mla	r3, r3, r1, ip
 8026d04:	fb00 7001 	mla	r0, r0, r1, r7
 8026d08:	1c51      	adds	r1, r2, #1
 8026d0a:	b29b      	uxth	r3, r3
 8026d0c:	b280      	uxth	r0, r0
 8026d0e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026d12:	f100 0c01 	add.w	ip, r0, #1
 8026d16:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8026d1a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8026d1e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8026d22:	ea4c 0202 	orr.w	r2, ip, r2
 8026d26:	f103 0c01 	add.w	ip, r3, #1
 8026d2a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026d2e:	095b      	lsrs	r3, r3, #5
 8026d30:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026d34:	431a      	orrs	r2, r3
 8026d36:	f8a9 2000 	strh.w	r2, [r9]
 8026d3a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026d3c:	f109 0902 	add.w	r9, r9, #2
 8026d40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026d44:	441c      	add	r4, r3
 8026d46:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026d48:	441e      	add	r6, r3
 8026d4a:	e647      	b.n	80269dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026d4c:	2800      	cmp	r0, #0
 8026d4e:	f43f aedf 	beq.w	8026b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026d52:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8026d56:	9109      	str	r1, [sp, #36]	@ 0x24
 8026d58:	0e09      	lsrs	r1, r1, #24
 8026d5a:	9112      	str	r1, [sp, #72]	@ 0x48
 8026d5c:	e6d8      	b.n	8026b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026d5e:	b01d      	add	sp, #116	@ 0x74
 8026d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026d64 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8026d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d68:	b085      	sub	sp, #20
 8026d6a:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8026d6e:	9102      	str	r1, [sp, #8]
 8026d70:	2c00      	cmp	r4, #0
 8026d72:	fb04 7103 	mla	r1, r4, r3, r7
 8026d76:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8026d7a:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8026d7e:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8026d82:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8026d86:	f2c0 810c 	blt.w	8026fa2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8026d8a:	45a6      	cmp	lr, r4
 8026d8c:	f340 8109 	ble.w	8026fa2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8026d90:	2f00      	cmp	r7, #0
 8026d92:	f2c0 8104 	blt.w	8026f9e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8026d96:	42bb      	cmp	r3, r7
 8026d98:	f340 8101 	ble.w	8026f9e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8026d9c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8026da0:	1c7a      	adds	r2, r7, #1
 8026da2:	f100 8101 	bmi.w	8026fa8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8026da6:	4293      	cmp	r3, r2
 8026da8:	f340 80fe 	ble.w	8026fa8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8026dac:	2e00      	cmp	r6, #0
 8026dae:	f000 80fd 	beq.w	8026fac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8026db2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8026db6:	3401      	adds	r4, #1
 8026db8:	f100 80fc 	bmi.w	8026fb4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8026dbc:	45a6      	cmp	lr, r4
 8026dbe:	f340 80f9 	ble.w	8026fb4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8026dc2:	2800      	cmp	r0, #0
 8026dc4:	f000 80f9 	beq.w	8026fba <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8026dc8:	2f00      	cmp	r7, #0
 8026dca:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8026dce:	f2c0 80ef 	blt.w	8026fb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8026dd2:	42bb      	cmp	r3, r7
 8026dd4:	f340 80ec 	ble.w	8026fb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8026dd8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026ddc:	3701      	adds	r7, #1
 8026dde:	f100 80ef 	bmi.w	8026fc0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8026de2:	42bb      	cmp	r3, r7
 8026de4:	f340 80ec 	ble.w	8026fc0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8026de8:	2e00      	cmp	r6, #0
 8026dea:	f000 80eb 	beq.w	8026fc4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8026dee:	6852      	ldr	r2, [r2, #4]
 8026df0:	b2b6      	uxth	r6, r6
 8026df2:	b280      	uxth	r0, r0
 8026df4:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026df8:	fb00 fe06 	mul.w	lr, r0, r6
 8026dfc:	0136      	lsls	r6, r6, #4
 8026dfe:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026e02:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8026e06:	eba6 070e 	sub.w	r7, r6, lr
 8026e0a:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8026e0e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026e12:	b280      	uxth	r0, r0
 8026e14:	b2bf      	uxth	r7, r7
 8026e16:	1a1b      	subs	r3, r3, r0
 8026e18:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026e1c:	fb07 f60a 	mul.w	r6, r7, sl
 8026e20:	b29b      	uxth	r3, r3
 8026e22:	fb0b 6603 	mla	r6, fp, r3, r6
 8026e26:	fb00 6609 	mla	r6, r0, r9, r6
 8026e2a:	fb0e 6608 	mla	r6, lr, r8, r6
 8026e2e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026e32:	9600      	str	r6, [sp, #0]
 8026e34:	2e00      	cmp	r6, #0
 8026e36:	f000 80af 	beq.w	8026f98 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8026e3a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8026e3e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8026e42:	9e02      	ldr	r6, [sp, #8]
 8026e44:	fb0b fc0c 	mul.w	ip, fp, ip
 8026e48:	fb0b f505 	mul.w	r5, fp, r5
 8026e4c:	8836      	ldrh	r6, [r6, #0]
 8026e4e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026e52:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026e56:	9501      	str	r5, [sp, #4]
 8026e58:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8026e5c:	44dc      	add	ip, fp
 8026e5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e62:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8026e66:	9503      	str	r5, [sp, #12]
 8026e68:	9d01      	ldr	r5, [sp, #4]
 8026e6a:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8026e6e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026e72:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8026e76:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026e7a:	fb0a fc0c 	mul.w	ip, sl, ip
 8026e7e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026e82:	fb0a fa01 	mul.w	sl, sl, r1
 8026e86:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026e8a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026e8e:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8026e92:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026e96:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8026e9a:	4465      	add	r5, ip
 8026e9c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026ea0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026ea4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ea8:	fb09 fc0c 	mul.w	ip, r9, ip
 8026eac:	0a2d      	lsrs	r5, r5, #8
 8026eae:	fb09 f904 	mul.w	r9, r9, r4
 8026eb2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026eb6:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8026eba:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026ebe:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8026ec2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026ec6:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8026eca:	437d      	muls	r5, r7
 8026ecc:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026ed0:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8026ed4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026ed8:	4461      	add	r1, ip
 8026eda:	fb08 f404 	mul.w	r4, r8, r4
 8026ede:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026ee2:	fb08 f802 	mul.w	r8, r8, r2
 8026ee6:	0a09      	lsrs	r1, r1, #8
 8026ee8:	0a22      	lsrs	r2, r4, #8
 8026eea:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8026eee:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8026ef2:	fb07 f70a 	mul.w	r7, r7, sl
 8026ef6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026efa:	4414      	add	r4, r2
 8026efc:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8026f00:	0a24      	lsrs	r4, r4, #8
 8026f02:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026f06:	9a03      	ldr	r2, [sp, #12]
 8026f08:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026f0c:	fb02 5503 	mla	r5, r2, r3, r5
 8026f10:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026f14:	fb04 540e 	mla	r4, r4, lr, r5
 8026f18:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8026f1c:	fb01 4100 	mla	r1, r1, r0, r4
 8026f20:	0a09      	lsrs	r1, r1, #8
 8026f22:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8026f26:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 8026f2a:	fb03 7101 	mla	r1, r3, r1, r7
 8026f2e:	9b00      	ldr	r3, [sp, #0]
 8026f30:	fb0e 1e08 	mla	lr, lr, r8, r1
 8026f34:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 8026f38:	43da      	mvns	r2, r3
 8026f3a:	1233      	asrs	r3, r6, #8
 8026f3c:	fb00 e101 	mla	r1, r0, r1, lr
 8026f40:	10f0      	asrs	r0, r6, #3
 8026f42:	b2d2      	uxtb	r2, r2
 8026f44:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026f48:	0a09      	lsrs	r1, r1, #8
 8026f4a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8026f4e:	00f6      	lsls	r6, r6, #3
 8026f50:	4353      	muls	r3, r2
 8026f52:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026f56:	4350      	muls	r0, r2
 8026f58:	b2f6      	uxtb	r6, r6
 8026f5a:	4321      	orrs	r1, r4
 8026f5c:	4356      	muls	r6, r2
 8026f5e:	1c5a      	adds	r2, r3, #1
 8026f60:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026f64:	0c0b      	lsrs	r3, r1, #16
 8026f66:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026f6a:	1c42      	adds	r2, r0, #1
 8026f6c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026f70:	0a0a      	lsrs	r2, r1, #8
 8026f72:	021b      	lsls	r3, r3, #8
 8026f74:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026f78:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8026f7c:	00d2      	lsls	r2, r2, #3
 8026f7e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026f82:	4313      	orrs	r3, r2
 8026f84:	1c72      	adds	r2, r6, #1
 8026f86:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8026f8a:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8026f8e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8026f92:	4319      	orrs	r1, r3
 8026f94:	9b02      	ldr	r3, [sp, #8]
 8026f96:	8019      	strh	r1, [r3, #0]
 8026f98:	b005      	add	sp, #20
 8026f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f9e:	2500      	movs	r5, #0
 8026fa0:	e6fe      	b.n	8026da0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8026fa2:	2100      	movs	r1, #0
 8026fa4:	460d      	mov	r5, r1
 8026fa6:	e706      	b.n	8026db6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8026fa8:	2100      	movs	r1, #0
 8026faa:	e704      	b.n	8026db6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8026fac:	4631      	mov	r1, r6
 8026fae:	e702      	b.n	8026db6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8026fb0:	2400      	movs	r4, #0
 8026fb2:	e713      	b.n	8026ddc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8026fb4:	2200      	movs	r2, #0
 8026fb6:	4614      	mov	r4, r2
 8026fb8:	e71a      	b.n	8026df0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8026fba:	4602      	mov	r2, r0
 8026fbc:	4604      	mov	r4, r0
 8026fbe:	e717      	b.n	8026df0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8026fc0:	2200      	movs	r2, #0
 8026fc2:	e715      	b.n	8026df0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8026fc4:	4632      	mov	r2, r6
 8026fc6:	e713      	b.n	8026df0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08026fc8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fcc:	b09b      	sub	sp, #108	@ 0x6c
 8026fce:	9218      	str	r2, [sp, #96]	@ 0x60
 8026fd0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8026fd2:	9019      	str	r0, [sp, #100]	@ 0x64
 8026fd4:	9116      	str	r1, [sp, #88]	@ 0x58
 8026fd6:	6850      	ldr	r0, [r2, #4]
 8026fd8:	9307      	str	r3, [sp, #28]
 8026fda:	6812      	ldr	r2, [r2, #0]
 8026fdc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8026fe0:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8026fe4:	fb00 1303 	mla	r3, r0, r3, r1
 8026fe8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026fec:	930a      	str	r3, [sp, #40]	@ 0x28
 8026fee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026ff0:	681b      	ldr	r3, [r3, #0]
 8026ff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026ff4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026ff6:	2b00      	cmp	r3, #0
 8026ff8:	dc03      	bgt.n	8027002 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026ffa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026ffc:	2b00      	cmp	r3, #0
 8026ffe:	f340 8387 	ble.w	8027710 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8027002:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027004:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027008:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802700c:	1e48      	subs	r0, r1, #1
 802700e:	1e57      	subs	r7, r2, #1
 8027010:	9b07      	ldr	r3, [sp, #28]
 8027012:	2b00      	cmp	r3, #0
 8027014:	f340 8166 	ble.w	80272e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8027018:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802701c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027020:	d406      	bmi.n	8027030 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8027022:	4584      	cmp	ip, r0
 8027024:	da04      	bge.n	8027030 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8027026:	2b00      	cmp	r3, #0
 8027028:	db02      	blt.n	8027030 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802702a:	42bb      	cmp	r3, r7
 802702c:	f2c0 815b 	blt.w	80272e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8027030:	f11c 0c01 	adds.w	ip, ip, #1
 8027034:	f100 814b 	bmi.w	80272ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027038:	4561      	cmp	r1, ip
 802703a:	f2c0 8148 	blt.w	80272ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802703e:	3301      	adds	r3, #1
 8027040:	f100 8145 	bmi.w	80272ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027044:	429a      	cmp	r2, r3
 8027046:	f2c0 8142 	blt.w	80272ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802704a:	9b07      	ldr	r3, [sp, #28]
 802704c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802704e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8027050:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027052:	2b00      	cmp	r3, #0
 8027054:	f340 8165 	ble.w	8027322 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8027058:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802705a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802705e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027060:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027064:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027068:	1422      	asrs	r2, r4, #16
 802706a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802706e:	689b      	ldr	r3, [r3, #8]
 8027070:	f100 81d5 	bmi.w	802741e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027074:	f103 38ff 	add.w	r8, r3, #4294967295
 8027078:	4542      	cmp	r2, r8
 802707a:	f280 81d0 	bge.w	802741e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802707e:	f1bc 0f00 	cmp.w	ip, #0
 8027082:	f2c0 81cc 	blt.w	802741e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027086:	f10e 38ff 	add.w	r8, lr, #4294967295
 802708a:	45c4      	cmp	ip, r8
 802708c:	f280 81c7 	bge.w	802741e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8027090:	b21b      	sxth	r3, r3
 8027092:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027094:	fb0c 2203 	mla	r2, ip, r3, r2
 8027098:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802709c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80270a0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80270a4:	2900      	cmp	r1, #0
 80270a6:	f000 8182 	beq.w	80273ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80270aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80270ae:	950b      	str	r5, [sp, #44]	@ 0x2c
 80270b0:	0e2d      	lsrs	r5, r5, #24
 80270b2:	9512      	str	r5, [sp, #72]	@ 0x48
 80270b4:	b180      	cbz	r0, 80270d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80270b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80270ba:	3b01      	subs	r3, #1
 80270bc:	009b      	lsls	r3, r3, #2
 80270be:	3304      	adds	r3, #4
 80270c0:	eb08 0c03 	add.w	ip, r8, r3
 80270c4:	f858 3003 	ldr.w	r3, [r8, r3]
 80270c8:	9308      	str	r3, [sp, #32]
 80270ca:	0e1b      	lsrs	r3, r3, #24
 80270cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80270ce:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80270d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80270d4:	0e1b      	lsrs	r3, r3, #24
 80270d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80270d8:	b289      	uxth	r1, r1
 80270da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80270dc:	b280      	uxth	r0, r0
 80270de:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80270e0:	fb01 f900 	mul.w	r9, r1, r0
 80270e4:	0109      	lsls	r1, r1, #4
 80270e6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80270ea:	eba1 0809 	sub.w	r8, r1, r9
 80270ee:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80270f2:	b280      	uxth	r0, r0
 80270f4:	fa1f f888 	uxth.w	r8, r8
 80270f8:	1a09      	subs	r1, r1, r0
 80270fa:	fb08 f303 	mul.w	r3, r8, r3
 80270fe:	b289      	uxth	r1, r1
 8027100:	fb01 330e 	mla	r3, r1, lr, r3
 8027104:	fb00 3305 	mla	r3, r0, r5, r3
 8027108:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802710a:	fb09 3305 	mla	r3, r9, r5, r3
 802710e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027112:	2b00      	cmp	r3, #0
 8027114:	f000 80d2 	beq.w	80272bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027118:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802711c:	d01b      	beq.n	8027156 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802711e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8027122:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027126:	fb0e fa0a 	mul.w	sl, lr, sl
 802712a:	fb0e fe02 	mul.w	lr, lr, r2
 802712e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027132:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027136:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802713a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802713e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027142:	4452      	add	r2, sl
 8027144:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027148:	0a12      	lsrs	r2, r2, #8
 802714a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802714e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027152:	ea42 020c 	orr.w	r2, r2, ip
 8027156:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027158:	2dff      	cmp	r5, #255	@ 0xff
 802715a:	d021      	beq.n	80271a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802715c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802715e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8027162:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027164:	fb05 fb0b 	mul.w	fp, r5, fp
 8027168:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802716a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802716e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027170:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027174:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027178:	fb05 fa0a 	mul.w	sl, r5, sl
 802717c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027180:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027184:	44de      	add	lr, fp
 8027186:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802718a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802718e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027192:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027196:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802719a:	ea4e 050a 	orr.w	r5, lr, sl
 802719e:	950b      	str	r5, [sp, #44]	@ 0x2c
 80271a0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80271a2:	2dff      	cmp	r5, #255	@ 0xff
 80271a4:	d021      	beq.n	80271ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80271a6:	9d08      	ldr	r5, [sp, #32]
 80271a8:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80271ac:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80271ae:	fb05 fb0b 	mul.w	fp, r5, fp
 80271b2:	9d08      	ldr	r5, [sp, #32]
 80271b4:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80271b8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80271ba:	fb05 fa0e 	mul.w	sl, r5, lr
 80271be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80271c2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80271c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80271ca:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80271ce:	44de      	add	lr, fp
 80271d0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80271d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80271d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80271dc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80271e0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80271e4:	ea4e 050a 	orr.w	r5, lr, sl
 80271e8:	9508      	str	r5, [sp, #32]
 80271ea:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80271ec:	2dff      	cmp	r5, #255	@ 0xff
 80271ee:	d021      	beq.n	8027234 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80271f0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80271f2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80271f6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80271f8:	fb05 fb0b 	mul.w	fp, r5, fp
 80271fc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80271fe:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027202:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027204:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027208:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802720c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027210:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027214:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027218:	44de      	add	lr, fp
 802721a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802721e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027222:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027226:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802722a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802722e:	ea4e 050a 	orr.w	r5, lr, sl
 8027232:	950c      	str	r5, [sp, #48]	@ 0x30
 8027234:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027236:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802723a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802723e:	2bff      	cmp	r3, #255	@ 0xff
 8027240:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027244:	9d08      	ldr	r5, [sp, #32]
 8027246:	fb08 fc0c 	mul.w	ip, r8, ip
 802724a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802724e:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8027252:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8027254:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027258:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802725c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802725e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027262:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8027266:	fb08 f80e 	mul.w	r8, r8, lr
 802726a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802726e:	fb01 8202 	mla	r2, r1, r2, r8
 8027272:	9908      	ldr	r1, [sp, #32]
 8027274:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027278:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802727c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802727e:	fb00 220a 	mla	r2, r0, sl, r2
 8027282:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8027286:	fb09 2900 	mla	r9, r9, r0, r2
 802728a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802728e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8027292:	ea4c 0c09 	orr.w	ip, ip, r9
 8027296:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802729a:	f040 8091 	bne.w	80273c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802729e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80272a2:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80272a6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80272aa:	f022 0207 	bic.w	r2, r2, #7
 80272ae:	431a      	orrs	r2, r3
 80272b0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80272b4:	ea4c 0c02 	orr.w	ip, ip, r2
 80272b8:	f8a7 c000 	strh.w	ip, [r7]
 80272bc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80272be:	3702      	adds	r7, #2
 80272c0:	441c      	add	r4, r3
 80272c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80272c4:	441e      	add	r6, r3
 80272c6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80272c8:	3b01      	subs	r3, #1
 80272ca:	9317      	str	r3, [sp, #92]	@ 0x5c
 80272cc:	e6c0      	b.n	8027050 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80272ce:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80272d0:	441c      	add	r4, r3
 80272d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80272d4:	441e      	add	r6, r3
 80272d6:	9b07      	ldr	r3, [sp, #28]
 80272d8:	3b01      	subs	r3, #1
 80272da:	9307      	str	r3, [sp, #28]
 80272dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80272de:	3302      	adds	r3, #2
 80272e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80272e2:	e695      	b.n	8027010 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80272e4:	d024      	beq.n	8027330 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80272e6:	9b07      	ldr	r3, [sp, #28]
 80272e8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80272ea:	3b01      	subs	r3, #1
 80272ec:	fb00 4003 	mla	r0, r0, r3, r4
 80272f0:	1400      	asrs	r0, r0, #16
 80272f2:	f53f aeaa 	bmi.w	802704a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80272f6:	3901      	subs	r1, #1
 80272f8:	4288      	cmp	r0, r1
 80272fa:	f6bf aea6 	bge.w	802704a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80272fe:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8027300:	fb01 6303 	mla	r3, r1, r3, r6
 8027304:	141b      	asrs	r3, r3, #16
 8027306:	f53f aea0 	bmi.w	802704a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802730a:	3a01      	subs	r2, #1
 802730c:	4293      	cmp	r3, r2
 802730e:	f6bf ae9c 	bge.w	802704a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027312:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027316:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802731a:	f1bb 0f00 	cmp.w	fp, #0
 802731e:	f300 809a 	bgt.w	8027456 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8027322:	9b07      	ldr	r3, [sp, #28]
 8027324:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802732a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802732e:	930a      	str	r3, [sp, #40]	@ 0x28
 8027330:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027332:	2b00      	cmp	r3, #0
 8027334:	f340 81ec 	ble.w	8027710 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8027338:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802733c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802733e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027342:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027346:	eef0 6a62 	vmov.f32	s13, s5
 802734a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802734e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027352:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027356:	ee16 4a90 	vmov	r4, s13
 802735a:	eef0 6a43 	vmov.f32	s13, s6
 802735e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027362:	ee16 6a90 	vmov	r6, s13
 8027366:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802736a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802736e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027372:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027376:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802737a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802737e:	ee12 2a90 	vmov	r2, s5
 8027382:	eef0 2a47 	vmov.f32	s5, s14
 8027386:	fb92 f3f3 	sdiv	r3, r2, r3
 802738a:	ee13 2a10 	vmov	r2, s6
 802738e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027390:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027392:	eeb0 3a67 	vmov.f32	s6, s15
 8027396:	fb92 f3f3 	sdiv	r3, r2, r3
 802739a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802739c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802739e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80273a0:	3b01      	subs	r3, #1
 80273a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80273a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80273a6:	bf08      	it	eq
 80273a8:	4613      	moveq	r3, r2
 80273aa:	9307      	str	r3, [sp, #28]
 80273ac:	e622      	b.n	8026ff4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80273ae:	2800      	cmp	r0, #0
 80273b0:	f43f ae92 	beq.w	80270d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80273b4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80273b8:	9308      	str	r3, [sp, #32]
 80273ba:	0e1b      	lsrs	r3, r3, #24
 80273bc:	9310      	str	r3, [sp, #64]	@ 0x40
 80273be:	e68b      	b.n	80270d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80273c0:	8839      	ldrh	r1, [r7, #0]
 80273c2:	43db      	mvns	r3, r3
 80273c4:	4dd4      	ldr	r5, [pc, #848]	@ (8027718 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80273c6:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80273ca:	fa5f f883 	uxtb.w	r8, r3
 80273ce:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80273d2:	10c8      	asrs	r0, r1, #3
 80273d4:	00cb      	lsls	r3, r1, #3
 80273d6:	fb0e fe08 	mul.w	lr, lr, r8
 80273da:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80273de:	b2db      	uxtb	r3, r3
 80273e0:	f10e 0101 	add.w	r1, lr, #1
 80273e4:	fb00 f008 	mul.w	r0, r0, r8
 80273e8:	fb03 f308 	mul.w	r3, r3, r8
 80273ec:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80273f0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80273f4:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80273f8:	f100 0e01 	add.w	lr, r0, #1
 80273fc:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8027400:	b2c9      	uxtb	r1, r1
 8027402:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027406:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802740a:	00d2      	lsls	r2, r2, #3
 802740c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027410:	430a      	orrs	r2, r1
 8027412:	1c59      	adds	r1, r3, #1
 8027414:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027418:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802741c:	e748      	b.n	80272b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802741e:	f112 0801 	adds.w	r8, r2, #1
 8027422:	f53f af4b 	bmi.w	80272bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027426:	4543      	cmp	r3, r8
 8027428:	f6ff af48 	blt.w	80272bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802742c:	f11c 0801 	adds.w	r8, ip, #1
 8027430:	f53f af44 	bmi.w	80272bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027434:	45c6      	cmp	lr, r8
 8027436:	f6ff af41 	blt.w	80272bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802743a:	b21b      	sxth	r3, r3
 802743c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027440:	fa0f f28e 	sxth.w	r2, lr
 8027444:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027448:	9200      	str	r2, [sp, #0]
 802744a:	4639      	mov	r1, r7
 802744c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802744e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8027450:	f7ff fc88 	bl	8026d64 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8027454:	e732      	b.n	80272bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027456:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027458:	1421      	asrs	r1, r4, #16
 802745a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802745c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027460:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8027464:	1433      	asrs	r3, r6, #16
 8027466:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802746a:	fb07 1303 	mla	r3, r7, r3, r1
 802746e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8027470:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8027474:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027478:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802747c:	2a00      	cmp	r2, #0
 802747e:	f000 8108 	beq.w	8027692 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8027482:	684d      	ldr	r5, [r1, #4]
 8027484:	950d      	str	r5, [sp, #52]	@ 0x34
 8027486:	0e2d      	lsrs	r5, r5, #24
 8027488:	9514      	str	r5, [sp, #80]	@ 0x50
 802748a:	b178      	cbz	r0, 80274ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802748c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8027490:	3f01      	subs	r7, #1
 8027492:	00bf      	lsls	r7, r7, #2
 8027494:	3704      	adds	r7, #4
 8027496:	eb01 0e07 	add.w	lr, r1, r7
 802749a:	59c9      	ldr	r1, [r1, r7]
 802749c:	9109      	str	r1, [sp, #36]	@ 0x24
 802749e:	0e09      	lsrs	r1, r1, #24
 80274a0:	9111      	str	r1, [sp, #68]	@ 0x44
 80274a2:	f8de 1004 	ldr.w	r1, [lr, #4]
 80274a6:	910e      	str	r1, [sp, #56]	@ 0x38
 80274a8:	0e09      	lsrs	r1, r1, #24
 80274aa:	9115      	str	r1, [sp, #84]	@ 0x54
 80274ac:	b292      	uxth	r2, r2
 80274ae:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80274b0:	b280      	uxth	r0, r0
 80274b2:	fb02 f900 	mul.w	r9, r2, r0
 80274b6:	0112      	lsls	r2, r2, #4
 80274b8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80274bc:	eba2 0e09 	sub.w	lr, r2, r9
 80274c0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80274c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80274c6:	b280      	uxth	r0, r0
 80274c8:	fa1f fe8e 	uxth.w	lr, lr
 80274cc:	1a09      	subs	r1, r1, r0
 80274ce:	fb0e f202 	mul.w	r2, lr, r2
 80274d2:	b289      	uxth	r1, r1
 80274d4:	fb01 220c 	mla	r2, r1, ip, r2
 80274d8:	fb00 2205 	mla	r2, r0, r5, r2
 80274dc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80274de:	fb09 2205 	mla	r2, r9, r5, r2
 80274e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80274e6:	2a00      	cmp	r2, #0
 80274e8:	f000 80ca 	beq.w	8027680 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80274ec:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80274f0:	d019      	beq.n	8027526 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80274f2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80274f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80274fa:	fb0c fa0a 	mul.w	sl, ip, sl
 80274fe:	fb0c fc03 	mul.w	ip, ip, r3
 8027502:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027506:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802750a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802750e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027512:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027516:	4453      	add	r3, sl
 8027518:	0a3f      	lsrs	r7, r7, #8
 802751a:	0a1b      	lsrs	r3, r3, #8
 802751c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8027520:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027524:	433b      	orrs	r3, r7
 8027526:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027528:	2dff      	cmp	r5, #255	@ 0xff
 802752a:	d020      	beq.n	802756e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802752c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802752e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8027532:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027534:	436f      	muls	r7, r5
 8027536:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027538:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802753c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8027540:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027542:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027546:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802754a:	fb05 fa0a 	mul.w	sl, r5, sl
 802754e:	44bc      	add	ip, r7
 8027550:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027554:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027558:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802755c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027560:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027564:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027568:	ea4c 050a 	orr.w	r5, ip, sl
 802756c:	950d      	str	r5, [sp, #52]	@ 0x34
 802756e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027570:	2dff      	cmp	r5, #255	@ 0xff
 8027572:	d020      	beq.n	80275b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8027574:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027576:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802757a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802757c:	436f      	muls	r7, r5
 802757e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027580:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8027584:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027586:	fb05 fa0c 	mul.w	sl, r5, ip
 802758a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802758e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027592:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027596:	44bc      	add	ip, r7
 8027598:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802759c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80275a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80275a8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80275ac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80275b0:	ea4c 050a 	orr.w	r5, ip, sl
 80275b4:	9509      	str	r5, [sp, #36]	@ 0x24
 80275b6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80275b8:	2dff      	cmp	r5, #255	@ 0xff
 80275ba:	d020      	beq.n	80275fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80275bc:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80275be:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80275c2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80275c4:	436f      	muls	r7, r5
 80275c6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80275c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80275cc:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80275d0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80275d2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80275d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80275da:	fb05 fa0a 	mul.w	sl, r5, sl
 80275de:	44bc      	add	ip, r7
 80275e0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80275e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80275ec:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80275f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80275f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80275f8:	ea4c 050a 	orr.w	r5, ip, sl
 80275fc:	950e      	str	r5, [sp, #56]	@ 0x38
 80275fe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027600:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8027604:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027608:	2aff      	cmp	r2, #255	@ 0xff
 802760a:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802760e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8027610:	fb0e f707 	mul.w	r7, lr, r7
 8027614:	fb01 770c 	mla	r7, r1, ip, r7
 8027618:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802761c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802761e:	fb00 770c 	mla	r7, r0, ip, r7
 8027622:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8027626:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8027628:	fb09 770c 	mla	r7, r9, ip, r7
 802762c:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8027630:	fb0e fe0c 	mul.w	lr, lr, ip
 8027634:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8027638:	fb01 e303 	mla	r3, r1, r3, lr
 802763c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802763e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8027642:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8027646:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8027648:	fb00 330a 	mla	r3, r0, sl, r3
 802764c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8027650:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027654:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027658:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802765c:	ea47 070c 	orr.w	r7, r7, ip
 8027660:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8027664:	d11e      	bne.n	80276a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8027666:	097a      	lsrs	r2, r7, #5
 8027668:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 802766c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8027670:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027674:	f023 0307 	bic.w	r3, r3, #7
 8027678:	4313      	orrs	r3, r2
 802767a:	431f      	orrs	r7, r3
 802767c:	f8a8 7000 	strh.w	r7, [r8]
 8027680:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027682:	f108 0802 	add.w	r8, r8, #2
 8027686:	f10b 3bff 	add.w	fp, fp, #4294967295
 802768a:	441c      	add	r4, r3
 802768c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802768e:	441e      	add	r6, r3
 8027690:	e643      	b.n	802731a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8027692:	2800      	cmp	r0, #0
 8027694:	f43f af0a 	beq.w	80274ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8027698:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802769c:	9109      	str	r1, [sp, #36]	@ 0x24
 802769e:	0e09      	lsrs	r1, r1, #24
 80276a0:	9111      	str	r1, [sp, #68]	@ 0x44
 80276a2:	e703      	b.n	80274ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80276a4:	f8b8 1000 	ldrh.w	r1, [r8]
 80276a8:	43d2      	mvns	r2, r2
 80276aa:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80276ae:	fa5f fe82 	uxtb.w	lr, r2
 80276b2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80276b6:	10c8      	asrs	r0, r1, #3
 80276b8:	00ca      	lsls	r2, r1, #3
 80276ba:	fb0c fc0e 	mul.w	ip, ip, lr
 80276be:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80276c2:	b2d2      	uxtb	r2, r2
 80276c4:	f10c 0101 	add.w	r1, ip, #1
 80276c8:	fb00 f00e 	mul.w	r0, r0, lr
 80276cc:	fb02 f20e 	mul.w	r2, r2, lr
 80276d0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80276d4:	0c39      	lsrs	r1, r7, #16
 80276d6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80276da:	490f      	ldr	r1, [pc, #60]	@ (8027718 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80276dc:	fa5f fc8c 	uxtb.w	ip, ip
 80276e0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80276e4:	1c41      	adds	r1, r0, #1
 80276e6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80276ea:	1c51      	adds	r1, r2, #1
 80276ec:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80276f0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80276f4:	00c0      	lsls	r0, r0, #3
 80276f6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80276fa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80276fe:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8027702:	ea4c 0c00 	orr.w	ip, ip, r0
 8027706:	ea47 0c0c 	orr.w	ip, r7, ip
 802770a:	f8a8 c000 	strh.w	ip, [r8]
 802770e:	e7b7      	b.n	8027680 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027710:	b01b      	add	sp, #108	@ 0x6c
 8027712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027716:	bf00      	nop
 8027718:	fffff800 	.word	0xfffff800

0802771c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802771c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027720:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8027724:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027728:	2d00      	cmp	r5, #0
 802772a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802772e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8027732:	fb05 0e03 	mla	lr, r5, r3, r0
 8027736:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802773a:	f2c0 808c 	blt.w	8027856 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802773e:	45a9      	cmp	r9, r5
 8027740:	f340 8089 	ble.w	8027856 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8027744:	2800      	cmp	r0, #0
 8027746:	f2c0 8084 	blt.w	8027852 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802774a:	4580      	cmp	r8, r0
 802774c:	f340 8081 	ble.w	8027852 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8027750:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027754:	f01e 0f01 	tst.w	lr, #1
 8027758:	5d16      	ldrb	r6, [r2, r4]
 802775a:	bf0c      	ite	eq
 802775c:	f006 060f 	andeq.w	r6, r6, #15
 8027760:	1136      	asrne	r6, r6, #4
 8027762:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027766:	b2f6      	uxtb	r6, r6
 8027768:	1c44      	adds	r4, r0, #1
 802776a:	d477      	bmi.n	802785c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802776c:	45a0      	cmp	r8, r4
 802776e:	dd75      	ble.n	802785c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8027770:	2f00      	cmp	r7, #0
 8027772:	d075      	beq.n	8027860 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8027774:	f10e 0a01 	add.w	sl, lr, #1
 8027778:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802777c:	f01a 0f01 	tst.w	sl, #1
 8027780:	5d14      	ldrb	r4, [r2, r4]
 8027782:	bf0c      	ite	eq
 8027784:	f004 040f 	andeq.w	r4, r4, #15
 8027788:	1124      	asrne	r4, r4, #4
 802778a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802778e:	b2e4      	uxtb	r4, r4
 8027790:	3501      	adds	r5, #1
 8027792:	d469      	bmi.n	8027868 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8027794:	45a9      	cmp	r9, r5
 8027796:	dd67      	ble.n	8027868 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8027798:	f1bc 0f00 	cmp.w	ip, #0
 802779c:	d067      	beq.n	802786e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802779e:	2800      	cmp	r0, #0
 80277a0:	db60      	blt.n	8027864 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80277a2:	4580      	cmp	r8, r0
 80277a4:	dd5e      	ble.n	8027864 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80277a6:	eb03 090e 	add.w	r9, r3, lr
 80277aa:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80277ae:	f019 0f01 	tst.w	r9, #1
 80277b2:	5d55      	ldrb	r5, [r2, r5]
 80277b4:	bf0c      	ite	eq
 80277b6:	f005 050f 	andeq.w	r5, r5, #15
 80277ba:	112d      	asrne	r5, r5, #4
 80277bc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80277c0:	b2ed      	uxtb	r5, r5
 80277c2:	3001      	adds	r0, #1
 80277c4:	d456      	bmi.n	8027874 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80277c6:	4580      	cmp	r8, r0
 80277c8:	dd54      	ble.n	8027874 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80277ca:	2f00      	cmp	r7, #0
 80277cc:	d054      	beq.n	8027878 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80277ce:	3301      	adds	r3, #1
 80277d0:	449e      	add	lr, r3
 80277d2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80277d6:	f01e 0f01 	tst.w	lr, #1
 80277da:	5cd0      	ldrb	r0, [r2, r3]
 80277dc:	bf0c      	ite	eq
 80277de:	f000 000f 	andeq.w	r0, r0, #15
 80277e2:	1100      	asrne	r0, r0, #4
 80277e4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80277e8:	b2c3      	uxtb	r3, r0
 80277ea:	b2ba      	uxth	r2, r7
 80277ec:	fa1f fc8c 	uxth.w	ip, ip
 80277f0:	fb02 f00c 	mul.w	r0, r2, ip
 80277f4:	0112      	lsls	r2, r2, #4
 80277f6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80277fa:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80277fe:	1a12      	subs	r2, r2, r0
 8027800:	fa1f fc8c 	uxth.w	ip, ip
 8027804:	b292      	uxth	r2, r2
 8027806:	eba7 070c 	sub.w	r7, r7, ip
 802780a:	4362      	muls	r2, r4
 802780c:	b2bf      	uxth	r7, r7
 802780e:	fb06 2207 	mla	r2, r6, r7, r2
 8027812:	fb0c 2505 	mla	r5, ip, r5, r2
 8027816:	fb00 5303 	mla	r3, r0, r3, r5
 802781a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802781e:	b1b3      	cbz	r3, 802784e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8027820:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8027824:	435a      	muls	r2, r3
 8027826:	1c53      	adds	r3, r2, #1
 8027828:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802782c:	4a2d      	ldr	r2, [pc, #180]	@ (80278e4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802782e:	121b      	asrs	r3, r3, #8
 8027830:	6812      	ldr	r2, [r2, #0]
 8027832:	2bff      	cmp	r3, #255	@ 0xff
 8027834:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8027838:	d120      	bne.n	802787c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802783a:	0950      	lsrs	r0, r2, #5
 802783c:	4b2a      	ldr	r3, [pc, #168]	@ (80278e8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802783e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027842:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027846:	4033      	ands	r3, r6
 8027848:	4318      	orrs	r0, r3
 802784a:	4302      	orrs	r2, r0
 802784c:	800a      	strh	r2, [r1, #0]
 802784e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027852:	2600      	movs	r6, #0
 8027854:	e788      	b.n	8027768 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8027856:	2400      	movs	r4, #0
 8027858:	4626      	mov	r6, r4
 802785a:	e799      	b.n	8027790 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802785c:	2400      	movs	r4, #0
 802785e:	e797      	b.n	8027790 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027860:	463c      	mov	r4, r7
 8027862:	e795      	b.n	8027790 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027864:	2500      	movs	r5, #0
 8027866:	e7ac      	b.n	80277c2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8027868:	2300      	movs	r3, #0
 802786a:	461d      	mov	r5, r3
 802786c:	e7bd      	b.n	80277ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802786e:	4663      	mov	r3, ip
 8027870:	4665      	mov	r5, ip
 8027872:	e7ba      	b.n	80277ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027874:	2300      	movs	r3, #0
 8027876:	e7b8      	b.n	80277ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8027878:	463b      	mov	r3, r7
 802787a:	e7b6      	b.n	80277ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802787c:	880d      	ldrh	r5, [r1, #0]
 802787e:	b29f      	uxth	r7, r3
 8027880:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8027884:	43db      	mvns	r3, r3
 8027886:	122c      	asrs	r4, r5, #8
 8027888:	fb10 f007 	smulbb	r0, r0, r7
 802788c:	b2db      	uxtb	r3, r3
 802788e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8027892:	b2f6      	uxtb	r6, r6
 8027894:	b2d2      	uxtb	r2, r2
 8027896:	fb04 0403 	mla	r4, r4, r3, r0
 802789a:	10e8      	asrs	r0, r5, #3
 802789c:	fb12 f207 	smulbb	r2, r2, r7
 80278a0:	00ed      	lsls	r5, r5, #3
 80278a2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80278a6:	b2a4      	uxth	r4, r4
 80278a8:	fb16 f607 	smulbb	r6, r6, r7
 80278ac:	b2ed      	uxtb	r5, r5
 80278ae:	fb00 6603 	mla	r6, r0, r3, r6
 80278b2:	fb05 2303 	mla	r3, r5, r3, r2
 80278b6:	b2b0      	uxth	r0, r6
 80278b8:	b29a      	uxth	r2, r3
 80278ba:	1c63      	adds	r3, r4, #1
 80278bc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80278c0:	1c53      	adds	r3, r2, #1
 80278c2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80278c6:	1c42      	adds	r2, r0, #1
 80278c8:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 80278cc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80278d0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80278d4:	0940      	lsrs	r0, r0, #5
 80278d6:	4323      	orrs	r3, r4
 80278d8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80278dc:	4303      	orrs	r3, r0
 80278de:	800b      	strh	r3, [r1, #0]
 80278e0:	e7b5      	b.n	802784e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80278e2:	bf00      	nop
 80278e4:	24006608 	.word	0x24006608
 80278e8:	00fff800 	.word	0x00fff800

080278ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80278ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278f0:	b097      	sub	sp, #92	@ 0x5c
 80278f2:	9214      	str	r2, [sp, #80]	@ 0x50
 80278f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80278f6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80278f8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80278fc:	9015      	str	r0, [sp, #84]	@ 0x54
 80278fe:	910d      	str	r1, [sp, #52]	@ 0x34
 8027900:	6850      	ldr	r0, [r2, #4]
 8027902:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027904:	6812      	ldr	r2, [r2, #0]
 8027906:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802790a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 802790e:	fb00 1303 	mla	r3, r0, r3, r1
 8027912:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8027916:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027918:	689b      	ldr	r3, [r3, #8]
 802791a:	3301      	adds	r3, #1
 802791c:	f023 0301 	bic.w	r3, r3, #1
 8027920:	930a      	str	r3, [sp, #40]	@ 0x28
 8027922:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027924:	681f      	ldr	r7, [r3, #0]
 8027926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027928:	2b00      	cmp	r3, #0
 802792a:	dc03      	bgt.n	8027934 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802792c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802792e:	2b00      	cmp	r3, #0
 8027930:	f340 8289 	ble.w	8027e46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8027934:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027936:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802793a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802793e:	1e48      	subs	r0, r1, #1
 8027940:	f102 3cff 	add.w	ip, r2, #4294967295
 8027944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027946:	2b00      	cmp	r3, #0
 8027948:	f340 80c5 	ble.w	8027ad6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802794c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027950:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027954:	d406      	bmi.n	8027964 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027956:	4586      	cmp	lr, r0
 8027958:	da04      	bge.n	8027964 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802795a:	2b00      	cmp	r3, #0
 802795c:	db02      	blt.n	8027964 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802795e:	4563      	cmp	r3, ip
 8027960:	f2c0 80ba 	blt.w	8027ad8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8027964:	f11e 0e01 	adds.w	lr, lr, #1
 8027968:	f100 80ab 	bmi.w	8027ac2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802796c:	4571      	cmp	r1, lr
 802796e:	f2c0 80a8 	blt.w	8027ac2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027972:	3301      	adds	r3, #1
 8027974:	f100 80a5 	bmi.w	8027ac2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027978:	429a      	cmp	r2, r3
 802797a:	f2c0 80a2 	blt.w	8027ac2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802797e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027980:	46c8      	mov	r8, r9
 8027982:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 8027986:	930e      	str	r3, [sp, #56]	@ 0x38
 8027988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802798a:	2b00      	cmp	r3, #0
 802798c:	f340 80c4 	ble.w	8027b18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8027990:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027992:	1430      	asrs	r0, r6, #16
 8027994:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027998:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802799c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80279a0:	1423      	asrs	r3, r4, #16
 80279a2:	f100 814f 	bmi.w	8027c44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80279a6:	f10c 3bff 	add.w	fp, ip, #4294967295
 80279aa:	455b      	cmp	r3, fp
 80279ac:	f280 814a 	bge.w	8027c44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80279b0:	2800      	cmp	r0, #0
 80279b2:	f2c0 8147 	blt.w	8027c44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80279b6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80279ba:	4558      	cmp	r0, fp
 80279bc:	f280 8142 	bge.w	8027c44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80279c0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80279c2:	fb00 3305 	mla	r3, r0, r5, r3
 80279c6:	0858      	lsrs	r0, r3, #1
 80279c8:	07dd      	lsls	r5, r3, #31
 80279ca:	f817 c000 	ldrb.w	ip, [r7, r0]
 80279ce:	bf54      	ite	pl
 80279d0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80279d4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80279d8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80279dc:	fa5f fc8c 	uxtb.w	ip, ip
 80279e0:	2a00      	cmp	r2, #0
 80279e2:	f000 80dd 	beq.w	8027ba0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80279e6:	1c58      	adds	r0, r3, #1
 80279e8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80279ec:	07c0      	lsls	r0, r0, #31
 80279ee:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80279f2:	bf54      	ite	pl
 80279f4:	f00e 0e0f 	andpl.w	lr, lr, #15
 80279f8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80279fc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027a00:	fa5f f08e 	uxtb.w	r0, lr
 8027a04:	9010      	str	r0, [sp, #64]	@ 0x40
 8027a06:	b1d9      	cbz	r1, 8027a40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027a08:	4453      	add	r3, sl
 8027a0a:	0858      	lsrs	r0, r3, #1
 8027a0c:	07dd      	lsls	r5, r3, #31
 8027a0e:	f103 0301 	add.w	r3, r3, #1
 8027a12:	5c38      	ldrb	r0, [r7, r0]
 8027a14:	bf54      	ite	pl
 8027a16:	f000 000f 	andpl.w	r0, r0, #15
 8027a1a:	1100      	asrmi	r0, r0, #4
 8027a1c:	07dd      	lsls	r5, r3, #31
 8027a1e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027a22:	b2c0      	uxtb	r0, r0
 8027a24:	900b      	str	r0, [sp, #44]	@ 0x2c
 8027a26:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027a2a:	f817 e000 	ldrb.w	lr, [r7, r0]
 8027a2e:	bf54      	ite	pl
 8027a30:	f00e 030f 	andpl.w	r3, lr, #15
 8027a34:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027a38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027a3c:	b2db      	uxtb	r3, r3
 8027a3e:	9311      	str	r3, [sp, #68]	@ 0x44
 8027a40:	b292      	uxth	r2, r2
 8027a42:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8027a44:	b289      	uxth	r1, r1
 8027a46:	fb02 f301 	mul.w	r3, r2, r1
 8027a4a:	0112      	lsls	r2, r2, #4
 8027a4c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027a50:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8027a54:	1ad2      	subs	r2, r2, r3
 8027a56:	b289      	uxth	r1, r1
 8027a58:	b292      	uxth	r2, r2
 8027a5a:	1a40      	subs	r0, r0, r1
 8027a5c:	436a      	muls	r2, r5
 8027a5e:	b280      	uxth	r0, r0
 8027a60:	fb0c 2c00 	mla	ip, ip, r0, r2
 8027a64:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027a66:	fb01 c102 	mla	r1, r1, r2, ip
 8027a6a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027a6c:	fb03 1302 	mla	r3, r3, r2, r1
 8027a70:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027a74:	b1db      	cbz	r3, 8027aae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027a76:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027a78:	4353      	muls	r3, r2
 8027a7a:	1c5a      	adds	r2, r3, #1
 8027a7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027a80:	4ac6      	ldr	r2, [pc, #792]	@ (8027d9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027a82:	121b      	asrs	r3, r3, #8
 8027a84:	6812      	ldr	r2, [r2, #0]
 8027a86:	2bff      	cmp	r3, #255	@ 0xff
 8027a88:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8027a8c:	f040 8099 	bne.w	8027bc2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8027a90:	0953      	lsrs	r3, r2, #5
 8027a92:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8027a96:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027a9a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027a9e:	f02c 0c07 	bic.w	ip, ip, #7
 8027aa2:	ea43 0c0c 	orr.w	ip, r3, ip
 8027aa6:	ea4c 0202 	orr.w	r2, ip, r2
 8027aaa:	f8a8 2000 	strh.w	r2, [r8]
 8027aae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027ab0:	f108 0802 	add.w	r8, r8, #2
 8027ab4:	441c      	add	r4, r3
 8027ab6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027ab8:	441e      	add	r6, r3
 8027aba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027abc:	3b01      	subs	r3, #1
 8027abe:	930e      	str	r3, [sp, #56]	@ 0x38
 8027ac0:	e762      	b.n	8027988 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027ac2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027ac4:	f109 0902 	add.w	r9, r9, #2
 8027ac8:	441c      	add	r4, r3
 8027aca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027acc:	441e      	add	r6, r3
 8027ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ad0:	3b01      	subs	r3, #1
 8027ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8027ad4:	e736      	b.n	8027944 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027ad6:	d024      	beq.n	8027b22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ada:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8027adc:	3b01      	subs	r3, #1
 8027ade:	fb00 4003 	mla	r0, r0, r3, r4
 8027ae2:	1400      	asrs	r0, r0, #16
 8027ae4:	f53f af4b 	bmi.w	802797e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027ae8:	3901      	subs	r1, #1
 8027aea:	4288      	cmp	r0, r1
 8027aec:	f6bf af47 	bge.w	802797e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027af0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8027af2:	fb01 6303 	mla	r3, r1, r3, r6
 8027af6:	141b      	asrs	r3, r3, #16
 8027af8:	f53f af41 	bmi.w	802797e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027afc:	3a01      	subs	r2, #1
 8027afe:	4293      	cmp	r3, r2
 8027b00:	f6bf af3d 	bge.w	802797e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027b04:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8027b08:	46c8      	mov	r8, r9
 8027b0a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8027b0e:	930e      	str	r3, [sp, #56]	@ 0x38
 8027b10:	f1bb 0f00 	cmp.w	fp, #0
 8027b14:	f300 80b7 	bgt.w	8027c86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8027b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027b1a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027b1e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8027b22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027b24:	2b00      	cmp	r3, #0
 8027b26:	f340 818e 	ble.w	8027e46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8027b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027b2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027b30:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027b34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027b38:	eef0 6a62 	vmov.f32	s13, s5
 8027b3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027b40:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027b44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b48:	ee16 4a90 	vmov	r4, s13
 8027b4c:	eef0 6a43 	vmov.f32	s13, s6
 8027b50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b54:	ee16 6a90 	vmov	r6, s13
 8027b58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027b5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027b60:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027b64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027b68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027b6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027b70:	ee12 2a90 	vmov	r2, s5
 8027b74:	eef0 2a47 	vmov.f32	s5, s14
 8027b78:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b7c:	ee13 2a10 	vmov	r2, s6
 8027b80:	9323      	str	r3, [sp, #140]	@ 0x8c
 8027b82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027b84:	eeb0 3a67 	vmov.f32	s6, s15
 8027b88:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b8c:	9324      	str	r3, [sp, #144]	@ 0x90
 8027b8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027b90:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027b92:	3b01      	subs	r3, #1
 8027b94:	930d      	str	r3, [sp, #52]	@ 0x34
 8027b96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027b98:	bf08      	it	eq
 8027b9a:	4613      	moveq	r3, r2
 8027b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8027b9e:	e6c2      	b.n	8027926 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027ba0:	2900      	cmp	r1, #0
 8027ba2:	f43f af4d 	beq.w	8027a40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027ba6:	eb0a 0003 	add.w	r0, sl, r3
 8027baa:	0843      	lsrs	r3, r0, #1
 8027bac:	07c0      	lsls	r0, r0, #31
 8027bae:	5cfb      	ldrb	r3, [r7, r3]
 8027bb0:	bf54      	ite	pl
 8027bb2:	f003 030f 	andpl.w	r3, r3, #15
 8027bb6:	111b      	asrmi	r3, r3, #4
 8027bb8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027bbc:	b2db      	uxtb	r3, r3
 8027bbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027bc0:	e73e      	b.n	8027a40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027bc2:	f8b8 e000 	ldrh.w	lr, [r8]
 8027bc6:	fa1f fb83 	uxth.w	fp, r3
 8027bca:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8027bce:	43db      	mvns	r3, r3
 8027bd0:	ea4f 202e 	mov.w	r0, lr, asr #8
 8027bd4:	fb11 f10b 	smulbb	r1, r1, fp
 8027bd8:	b2db      	uxtb	r3, r3
 8027bda:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027bde:	fa5f fc8c 	uxtb.w	ip, ip
 8027be2:	b2d2      	uxtb	r2, r2
 8027be4:	fb00 1003 	mla	r0, r0, r3, r1
 8027be8:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8027bec:	fb1c fc0b 	smulbb	ip, ip, fp
 8027bf0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027bf4:	b280      	uxth	r0, r0
 8027bf6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027bfa:	fb12 fb0b 	smulbb	fp, r2, fp
 8027bfe:	fa5f fe8e 	uxtb.w	lr, lr
 8027c02:	fb01 cc03 	mla	ip, r1, r3, ip
 8027c06:	fb0e bb03 	mla	fp, lr, r3, fp
 8027c0a:	1c43      	adds	r3, r0, #1
 8027c0c:	fa1f fc8c 	uxth.w	ip, ip
 8027c10:	fa1f fb8b 	uxth.w	fp, fp
 8027c14:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027c18:	f10c 0101 	add.w	r1, ip, #1
 8027c1c:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 8027c20:	f10b 0001 	add.w	r0, fp, #1
 8027c24:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027c28:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027c2c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027c30:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027c34:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027c38:	4318      	orrs	r0, r3
 8027c3a:	ea40 000c 	orr.w	r0, r0, ip
 8027c3e:	f8a8 0000 	strh.w	r0, [r8]
 8027c42:	e734      	b.n	8027aae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027c44:	f113 0b01 	adds.w	fp, r3, #1
 8027c48:	f53f af31 	bmi.w	8027aae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027c4c:	45dc      	cmp	ip, fp
 8027c4e:	f6ff af2e 	blt.w	8027aae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027c52:	f110 0b01 	adds.w	fp, r0, #1
 8027c56:	f53f af2a 	bmi.w	8027aae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027c5a:	45de      	cmp	lr, fp
 8027c5c:	f6ff af27 	blt.w	8027aae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027c60:	9302      	str	r3, [sp, #8]
 8027c62:	fa0f f38e 	sxth.w	r3, lr
 8027c66:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027c68:	9301      	str	r3, [sp, #4]
 8027c6a:	fa0f f38c 	sxth.w	r3, ip
 8027c6e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027c72:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8027c76:	9300      	str	r3, [sp, #0]
 8027c78:	463a      	mov	r2, r7
 8027c7a:	4653      	mov	r3, sl
 8027c7c:	4641      	mov	r1, r8
 8027c7e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8027c80:	f7ff fd4c 	bl	802771c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8027c84:	e713      	b.n	8027aae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027c86:	1422      	asrs	r2, r4, #16
 8027c88:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8027c8a:	1433      	asrs	r3, r6, #16
 8027c8c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027c90:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027c94:	fb05 2303 	mla	r3, r5, r3, r2
 8027c98:	085a      	lsrs	r2, r3, #1
 8027c9a:	07dd      	lsls	r5, r3, #31
 8027c9c:	5cba      	ldrb	r2, [r7, r2]
 8027c9e:	bf54      	ite	pl
 8027ca0:	f002 020f 	andpl.w	r2, r2, #15
 8027ca4:	1112      	asrmi	r2, r2, #4
 8027ca6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027caa:	b2d2      	uxtb	r2, r2
 8027cac:	2900      	cmp	r1, #0
 8027cae:	d077      	beq.n	8027da0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8027cb0:	f103 0e01 	add.w	lr, r3, #1
 8027cb4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8027cb8:	f01e 0f01 	tst.w	lr, #1
 8027cbc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027cc0:	bf0c      	ite	eq
 8027cc2:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027cc6:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8027cca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027cce:	fa5f f58c 	uxtb.w	r5, ip
 8027cd2:	9512      	str	r5, [sp, #72]	@ 0x48
 8027cd4:	b308      	cbz	r0, 8027d1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027cd6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027cd8:	442b      	add	r3, r5
 8027cda:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027cde:	07dd      	lsls	r5, r3, #31
 8027ce0:	f103 0301 	add.w	r3, r3, #1
 8027ce4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027ce8:	bf54      	ite	pl
 8027cea:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027cee:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027cf2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027cf6:	fa5f f58c 	uxtb.w	r5, ip
 8027cfa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027cfe:	950c      	str	r5, [sp, #48]	@ 0x30
 8027d00:	07dd      	lsls	r5, r3, #31
 8027d02:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027d06:	bf54      	ite	pl
 8027d08:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027d0c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027d10:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027d14:	fa5f f38c 	uxtb.w	r3, ip
 8027d18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027d1a:	b289      	uxth	r1, r1
 8027d1c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8027d1e:	b280      	uxth	r0, r0
 8027d20:	fb01 f300 	mul.w	r3, r1, r0
 8027d24:	0109      	lsls	r1, r1, #4
 8027d26:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8027d2a:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8027d2e:	1ac9      	subs	r1, r1, r3
 8027d30:	b280      	uxth	r0, r0
 8027d32:	b289      	uxth	r1, r1
 8027d34:	ebac 0c00 	sub.w	ip, ip, r0
 8027d38:	4369      	muls	r1, r5
 8027d3a:	fa1f fc8c 	uxth.w	ip, ip
 8027d3e:	fb02 120c 	mla	r2, r2, ip, r1
 8027d42:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8027d44:	fb00 2001 	mla	r0, r0, r1, r2
 8027d48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027d4a:	fb03 0302 	mla	r3, r3, r2, r0
 8027d4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027d52:	b1d3      	cbz	r3, 8027d8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027d54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027d56:	4353      	muls	r3, r2
 8027d58:	1c5a      	adds	r2, r3, #1
 8027d5a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8027d9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027d60:	121b      	asrs	r3, r3, #8
 8027d62:	6812      	ldr	r2, [r2, #0]
 8027d64:	2bff      	cmp	r3, #255	@ 0xff
 8027d66:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8027d6a:	d12d      	bne.n	8027dc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8027d6c:	0953      	lsrs	r3, r2, #5
 8027d6e:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8027d72:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027d76:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027d7a:	f02c 0c07 	bic.w	ip, ip, #7
 8027d7e:	ea43 0c0c 	orr.w	ip, r3, ip
 8027d82:	ea4c 0202 	orr.w	r2, ip, r2
 8027d86:	f8a8 2000 	strh.w	r2, [r8]
 8027d8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027d8c:	f108 0802 	add.w	r8, r8, #2
 8027d90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027d94:	441c      	add	r4, r3
 8027d96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027d98:	441e      	add	r6, r3
 8027d9a:	e6b9      	b.n	8027b10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027d9c:	24006608 	.word	0x24006608
 8027da0:	2800      	cmp	r0, #0
 8027da2:	d0ba      	beq.n	8027d1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027da4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8027da6:	442b      	add	r3, r5
 8027da8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027dac:	07db      	lsls	r3, r3, #31
 8027dae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027db2:	bf54      	ite	pl
 8027db4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027db8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027dbc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027dc0:	fa5f f38c 	uxtb.w	r3, ip
 8027dc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8027dc6:	e7a8      	b.n	8027d1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027dc8:	f8b8 e000 	ldrh.w	lr, [r8]
 8027dcc:	fa1f fa83 	uxth.w	sl, r3
 8027dd0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8027dd4:	43db      	mvns	r3, r3
 8027dd6:	ea4f 202e 	mov.w	r0, lr, asr #8
 8027dda:	fb11 f10a 	smulbb	r1, r1, sl
 8027dde:	b2db      	uxtb	r3, r3
 8027de0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027de4:	b2d2      	uxtb	r2, r2
 8027de6:	fa5f fc8c 	uxtb.w	ip, ip
 8027dea:	fb00 1003 	mla	r0, r0, r3, r1
 8027dee:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8027df2:	fb12 f20a 	smulbb	r2, r2, sl
 8027df6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027dfa:	b280      	uxth	r0, r0
 8027dfc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027e00:	fb1c fc0a 	smulbb	ip, ip, sl
 8027e04:	fa5f fe8e 	uxtb.w	lr, lr
 8027e08:	fb0e 2203 	mla	r2, lr, r3, r2
 8027e0c:	fb01 cc03 	mla	ip, r1, r3, ip
 8027e10:	1c43      	adds	r3, r0, #1
 8027e12:	b292      	uxth	r2, r2
 8027e14:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027e18:	1c51      	adds	r1, r2, #1
 8027e1a:	fa1f fc8c 	uxth.w	ip, ip
 8027e1e:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8027e22:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8027e26:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8027e2a:	4308      	orrs	r0, r1
 8027e2c:	f10c 0101 	add.w	r1, ip, #1
 8027e30:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027e34:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027e38:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027e3c:	ea40 000c 	orr.w	r0, r0, ip
 8027e40:	f8a8 0000 	strh.w	r0, [r8]
 8027e44:	e7a1      	b.n	8027d8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027e46:	b017      	add	sp, #92	@ 0x5c
 8027e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027e4c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8027e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027e50:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 8027e54:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027e58:	2d00      	cmp	r5, #0
 8027e5a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8027e5e:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8027e62:	fb05 0e03 	mla	lr, r5, r3, r0
 8027e66:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8027e6a:	f2c0 80b0 	blt.w	8027fce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8027e6e:	45a9      	cmp	r9, r5
 8027e70:	f340 80ad 	ble.w	8027fce <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8027e74:	2800      	cmp	r0, #0
 8027e76:	f2c0 80a8 	blt.w	8027fca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8027e7a:	4580      	cmp	r8, r0
 8027e7c:	f340 80a5 	ble.w	8027fca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8027e80:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027e84:	f01e 0f01 	tst.w	lr, #1
 8027e88:	5d16      	ldrb	r6, [r2, r4]
 8027e8a:	bf0c      	ite	eq
 8027e8c:	f006 060f 	andeq.w	r6, r6, #15
 8027e90:	1136      	asrne	r6, r6, #4
 8027e92:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027e96:	b2f6      	uxtb	r6, r6
 8027e98:	1c44      	adds	r4, r0, #1
 8027e9a:	f100 809b 	bmi.w	8027fd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8027e9e:	45a0      	cmp	r8, r4
 8027ea0:	f340 8098 	ble.w	8027fd4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8027ea4:	2f00      	cmp	r7, #0
 8027ea6:	f000 8097 	beq.w	8027fd8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8027eaa:	f10e 0a01 	add.w	sl, lr, #1
 8027eae:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8027eb2:	f01a 0f01 	tst.w	sl, #1
 8027eb6:	5d14      	ldrb	r4, [r2, r4]
 8027eb8:	bf0c      	ite	eq
 8027eba:	f004 040f 	andeq.w	r4, r4, #15
 8027ebe:	1124      	asrne	r4, r4, #4
 8027ec0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027ec4:	b2e4      	uxtb	r4, r4
 8027ec6:	3501      	adds	r5, #1
 8027ec8:	f100 808a 	bmi.w	8027fe0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8027ecc:	45a9      	cmp	r9, r5
 8027ece:	f340 8087 	ble.w	8027fe0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8027ed2:	f1bc 0f00 	cmp.w	ip, #0
 8027ed6:	f000 8086 	beq.w	8027fe6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8027eda:	2800      	cmp	r0, #0
 8027edc:	db7e      	blt.n	8027fdc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8027ede:	4580      	cmp	r8, r0
 8027ee0:	dd7c      	ble.n	8027fdc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8027ee2:	eb03 090e 	add.w	r9, r3, lr
 8027ee6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8027eea:	f019 0f01 	tst.w	r9, #1
 8027eee:	5d55      	ldrb	r5, [r2, r5]
 8027ef0:	bf0c      	ite	eq
 8027ef2:	f005 050f 	andeq.w	r5, r5, #15
 8027ef6:	112d      	asrne	r5, r5, #4
 8027ef8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027efc:	b2ed      	uxtb	r5, r5
 8027efe:	3001      	adds	r0, #1
 8027f00:	d474      	bmi.n	8027fec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8027f02:	4580      	cmp	r8, r0
 8027f04:	dd72      	ble.n	8027fec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8027f06:	2f00      	cmp	r7, #0
 8027f08:	d072      	beq.n	8027ff0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8027f0a:	3301      	adds	r3, #1
 8027f0c:	449e      	add	lr, r3
 8027f0e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027f12:	f01e 0f01 	tst.w	lr, #1
 8027f16:	5cd0      	ldrb	r0, [r2, r3]
 8027f18:	bf0c      	ite	eq
 8027f1a:	f000 000f 	andeq.w	r0, r0, #15
 8027f1e:	1100      	asrne	r0, r0, #4
 8027f20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027f24:	b2c3      	uxtb	r3, r0
 8027f26:	b2ba      	uxth	r2, r7
 8027f28:	fa1f fc8c 	uxth.w	ip, ip
 8027f2c:	fb02 f00c 	mul.w	r0, r2, ip
 8027f30:	0112      	lsls	r2, r2, #4
 8027f32:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027f36:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8027f3a:	1a12      	subs	r2, r2, r0
 8027f3c:	fa1f fc8c 	uxth.w	ip, ip
 8027f40:	b292      	uxth	r2, r2
 8027f42:	eba7 070c 	sub.w	r7, r7, ip
 8027f46:	4362      	muls	r2, r4
 8027f48:	b2bf      	uxth	r7, r7
 8027f4a:	fb06 2207 	mla	r2, r6, r7, r2
 8027f4e:	fb0c 2505 	mla	r5, ip, r5, r2
 8027f52:	fb00 5303 	mla	r3, r0, r3, r5
 8027f56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027f5a:	b3a3      	cbz	r3, 8027fc6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8027f5c:	4a25      	ldr	r2, [pc, #148]	@ (8027ff4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8027f5e:	880e      	ldrh	r6, [r1, #0]
 8027f60:	6815      	ldr	r5, [r2, #0]
 8027f62:	b29a      	uxth	r2, r3
 8027f64:	1234      	asrs	r4, r6, #8
 8027f66:	43db      	mvns	r3, r3
 8027f68:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8027f6c:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8027f70:	b2db      	uxtb	r3, r3
 8027f72:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8027f76:	fb10 f002 	smulbb	r0, r0, r2
 8027f7a:	b2ed      	uxtb	r5, r5
 8027f7c:	fb17 f702 	smulbb	r7, r7, r2
 8027f80:	fb04 0403 	mla	r4, r4, r3, r0
 8027f84:	10f0      	asrs	r0, r6, #3
 8027f86:	fb15 f202 	smulbb	r2, r5, r2
 8027f8a:	00f6      	lsls	r6, r6, #3
 8027f8c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027f90:	b2a4      	uxth	r4, r4
 8027f92:	b2f6      	uxtb	r6, r6
 8027f94:	fb00 7003 	mla	r0, r0, r3, r7
 8027f98:	fb06 2303 	mla	r3, r6, r3, r2
 8027f9c:	b280      	uxth	r0, r0
 8027f9e:	b29a      	uxth	r2, r3
 8027fa0:	1c63      	adds	r3, r4, #1
 8027fa2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027fa6:	1c53      	adds	r3, r2, #1
 8027fa8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027fac:	1c42      	adds	r2, r0, #1
 8027fae:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8027fb2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027fb6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027fba:	0940      	lsrs	r0, r0, #5
 8027fbc:	4323      	orrs	r3, r4
 8027fbe:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027fc2:	4303      	orrs	r3, r0
 8027fc4:	800b      	strh	r3, [r1, #0]
 8027fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027fca:	2600      	movs	r6, #0
 8027fcc:	e764      	b.n	8027e98 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8027fce:	2400      	movs	r4, #0
 8027fd0:	4626      	mov	r6, r4
 8027fd2:	e778      	b.n	8027ec6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8027fd4:	2400      	movs	r4, #0
 8027fd6:	e776      	b.n	8027ec6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8027fd8:	463c      	mov	r4, r7
 8027fda:	e774      	b.n	8027ec6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8027fdc:	2500      	movs	r5, #0
 8027fde:	e78e      	b.n	8027efe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8027fe0:	2300      	movs	r3, #0
 8027fe2:	461d      	mov	r5, r3
 8027fe4:	e79f      	b.n	8027f26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027fe6:	4663      	mov	r3, ip
 8027fe8:	4665      	mov	r5, ip
 8027fea:	e79c      	b.n	8027f26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027fec:	2300      	movs	r3, #0
 8027fee:	e79a      	b.n	8027f26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027ff0:	463b      	mov	r3, r7
 8027ff2:	e798      	b.n	8027f26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027ff4:	24006608 	.word	0x24006608

08027ff8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ffc:	b093      	sub	sp, #76	@ 0x4c
 8027ffe:	461d      	mov	r5, r3
 8028000:	920c      	str	r2, [sp, #48]	@ 0x30
 8028002:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8028004:	9011      	str	r0, [sp, #68]	@ 0x44
 8028006:	9107      	str	r1, [sp, #28]
 8028008:	6850      	ldr	r0, [r2, #4]
 802800a:	6812      	ldr	r2, [r2, #0]
 802800c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8028010:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8028014:	fb00 1303 	mla	r3, r0, r3, r1
 8028018:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802801c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802801e:	689b      	ldr	r3, [r3, #8]
 8028020:	3301      	adds	r3, #1
 8028022:	f023 0301 	bic.w	r3, r3, #1
 8028026:	9306      	str	r3, [sp, #24]
 8028028:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802802a:	681f      	ldr	r7, [r3, #0]
 802802c:	9b07      	ldr	r3, [sp, #28]
 802802e:	2b00      	cmp	r3, #0
 8028030:	dc03      	bgt.n	802803a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8028032:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028034:	2b00      	cmp	r3, #0
 8028036:	f340 8267 	ble.w	8028508 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802803a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802803c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028040:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028044:	1e48      	subs	r0, r1, #1
 8028046:	f102 3cff 	add.w	ip, r2, #4294967295
 802804a:	2d00      	cmp	r5, #0
 802804c:	f340 80b7 	ble.w	80281be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8028050:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028054:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028058:	d406      	bmi.n	8028068 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802805a:	4586      	cmp	lr, r0
 802805c:	da04      	bge.n	8028068 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802805e:	2b00      	cmp	r3, #0
 8028060:	db02      	blt.n	8028068 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8028062:	4563      	cmp	r3, ip
 8028064:	f2c0 80ac 	blt.w	80281c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8028068:	f11e 0e01 	adds.w	lr, lr, #1
 802806c:	f100 809f 	bmi.w	80281ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8028070:	4571      	cmp	r1, lr
 8028072:	f2c0 809c 	blt.w	80281ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8028076:	3301      	adds	r3, #1
 8028078:	f100 8099 	bmi.w	80281ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802807c:	429a      	cmp	r2, r3
 802807e:	f2c0 8096 	blt.w	80281ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8028082:	46c8      	mov	r8, r9
 8028084:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8028088:	9509      	str	r5, [sp, #36]	@ 0x24
 802808a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802808c:	2b00      	cmp	r3, #0
 802808e:	f340 80b5 	ble.w	80281fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8028092:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8028096:	1430      	asrs	r0, r6, #16
 8028098:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802809c:	9308      	str	r3, [sp, #32]
 802809e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80280a0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80280a4:	1423      	asrs	r3, r4, #16
 80280a6:	f100 813f 	bmi.w	8028328 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80280aa:	f10c 3bff 	add.w	fp, ip, #4294967295
 80280ae:	455b      	cmp	r3, fp
 80280b0:	f280 813a 	bge.w	8028328 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80280b4:	2800      	cmp	r0, #0
 80280b6:	f2c0 8137 	blt.w	8028328 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80280ba:	f10e 3bff 	add.w	fp, lr, #4294967295
 80280be:	4558      	cmp	r0, fp
 80280c0:	f280 8132 	bge.w	8028328 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80280c4:	9a06      	ldr	r2, [sp, #24]
 80280c6:	fb00 3302 	mla	r3, r0, r2, r3
 80280ca:	0858      	lsrs	r0, r3, #1
 80280cc:	07da      	lsls	r2, r3, #31
 80280ce:	9a08      	ldr	r2, [sp, #32]
 80280d0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80280d4:	bf54      	ite	pl
 80280d6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80280da:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80280de:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80280e2:	fa5f fc8c 	uxtb.w	ip, ip
 80280e6:	2a00      	cmp	r2, #0
 80280e8:	f000 80cc 	beq.w	8028284 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80280ec:	1c58      	adds	r0, r3, #1
 80280ee:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80280f2:	07c0      	lsls	r0, r0, #31
 80280f4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80280f8:	bf54      	ite	pl
 80280fa:	f00e 0e0f 	andpl.w	lr, lr, #15
 80280fe:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028102:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028106:	fa5f fe8e 	uxtb.w	lr, lr
 802810a:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802810e:	b1b9      	cbz	r1, 8028140 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8028110:	4453      	add	r3, sl
 8028112:	0858      	lsrs	r0, r3, #1
 8028114:	07da      	lsls	r2, r3, #31
 8028116:	5c38      	ldrb	r0, [r7, r0]
 8028118:	bf54      	ite	pl
 802811a:	f000 000f 	andpl.w	r0, r0, #15
 802811e:	1100      	asrmi	r0, r0, #4
 8028120:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028124:	b2c0      	uxtb	r0, r0
 8028126:	900a      	str	r0, [sp, #40]	@ 0x28
 8028128:	1c58      	adds	r0, r3, #1
 802812a:	0843      	lsrs	r3, r0, #1
 802812c:	07c2      	lsls	r2, r0, #31
 802812e:	5cfb      	ldrb	r3, [r7, r3]
 8028130:	bf54      	ite	pl
 8028132:	f003 030f 	andpl.w	r3, r3, #15
 8028136:	111b      	asrmi	r3, r3, #4
 8028138:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802813c:	b2db      	uxtb	r3, r3
 802813e:	930e      	str	r3, [sp, #56]	@ 0x38
 8028140:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028144:	b289      	uxth	r1, r1
 8028146:	fb02 f301 	mul.w	r3, r2, r1
 802814a:	0112      	lsls	r2, r2, #4
 802814c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028150:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8028154:	1ad2      	subs	r2, r2, r3
 8028156:	b289      	uxth	r1, r1
 8028158:	b292      	uxth	r2, r2
 802815a:	1a40      	subs	r0, r0, r1
 802815c:	fa1f fe80 	uxth.w	lr, r0
 8028160:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028162:	4342      	muls	r2, r0
 8028164:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028168:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802816a:	fb01 c102 	mla	r1, r1, r2, ip
 802816e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028170:	fb03 1302 	mla	r3, r3, r2, r1
 8028174:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028178:	2bff      	cmp	r3, #255	@ 0xff
 802817a:	f040 8094 	bne.w	80282a6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802817e:	4bbf      	ldr	r3, [pc, #764]	@ (802847c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8028180:	681a      	ldr	r2, [r3, #0]
 8028182:	4bbf      	ldr	r3, [pc, #764]	@ (8028480 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8028184:	0951      	lsrs	r1, r2, #5
 8028186:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802818a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802818e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028192:	430b      	orrs	r3, r1
 8028194:	4313      	orrs	r3, r2
 8028196:	f8a8 3000 	strh.w	r3, [r8]
 802819a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802819c:	f108 0802 	add.w	r8, r8, #2
 80281a0:	441c      	add	r4, r3
 80281a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80281a4:	441e      	add	r6, r3
 80281a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80281a8:	3b01      	subs	r3, #1
 80281aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80281ac:	e76d      	b.n	802808a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80281ae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80281b0:	3d01      	subs	r5, #1
 80281b2:	f109 0902 	add.w	r9, r9, #2
 80281b6:	441c      	add	r4, r3
 80281b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80281ba:	441e      	add	r6, r3
 80281bc:	e745      	b.n	802804a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80281be:	d021      	beq.n	8028204 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80281c0:	1e6b      	subs	r3, r5, #1
 80281c2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80281c4:	fb00 4003 	mla	r0, r0, r3, r4
 80281c8:	1400      	asrs	r0, r0, #16
 80281ca:	f53f af5a 	bmi.w	8028082 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80281ce:	3901      	subs	r1, #1
 80281d0:	4288      	cmp	r0, r1
 80281d2:	f6bf af56 	bge.w	8028082 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80281d6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80281d8:	fb01 6303 	mla	r3, r1, r3, r6
 80281dc:	141b      	asrs	r3, r3, #16
 80281de:	f53f af50 	bmi.w	8028082 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80281e2:	3a01      	subs	r2, #1
 80281e4:	4293      	cmp	r3, r2
 80281e6:	f6bf af4c 	bge.w	8028082 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80281ea:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80281ee:	46a8      	mov	r8, r5
 80281f0:	46ce      	mov	lr, r9
 80281f2:	9308      	str	r3, [sp, #32]
 80281f4:	f1b8 0f00 	cmp.w	r8, #0
 80281f8:	f300 80b6 	bgt.w	8028368 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80281fc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028200:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028204:	9b07      	ldr	r3, [sp, #28]
 8028206:	2b00      	cmp	r3, #0
 8028208:	f340 817e 	ble.w	8028508 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802820c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028210:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028212:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028216:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802821a:	eef0 6a62 	vmov.f32	s13, s5
 802821e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028222:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028226:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802822a:	ee16 4a90 	vmov	r4, s13
 802822e:	eef0 6a43 	vmov.f32	s13, s6
 8028232:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028236:	ee16 6a90 	vmov	r6, s13
 802823a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802823e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028242:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028246:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802824a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802824e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028252:	ee12 2a90 	vmov	r2, s5
 8028256:	eef0 2a47 	vmov.f32	s5, s14
 802825a:	fb92 f3f3 	sdiv	r3, r2, r3
 802825e:	ee13 2a10 	vmov	r2, s6
 8028262:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028264:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028266:	eeb0 3a67 	vmov.f32	s6, s15
 802826a:	fb92 f3f3 	sdiv	r3, r2, r3
 802826e:	9320      	str	r3, [sp, #128]	@ 0x80
 8028270:	9b07      	ldr	r3, [sp, #28]
 8028272:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028274:	3b01      	subs	r3, #1
 8028276:	9307      	str	r3, [sp, #28]
 8028278:	bf08      	it	eq
 802827a:	4615      	moveq	r5, r2
 802827c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802827e:	bf18      	it	ne
 8028280:	461d      	movne	r5, r3
 8028282:	e6d3      	b.n	802802c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8028284:	2900      	cmp	r1, #0
 8028286:	f43f af5b 	beq.w	8028140 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802828a:	eb0a 0003 	add.w	r0, sl, r3
 802828e:	0843      	lsrs	r3, r0, #1
 8028290:	07c0      	lsls	r0, r0, #31
 8028292:	5cfb      	ldrb	r3, [r7, r3]
 8028294:	bf54      	ite	pl
 8028296:	f003 030f 	andpl.w	r3, r3, #15
 802829a:	111b      	asrmi	r3, r3, #4
 802829c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80282a0:	b2db      	uxtb	r3, r3
 80282a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80282a4:	e74c      	b.n	8028140 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80282a6:	2b00      	cmp	r3, #0
 80282a8:	f43f af77 	beq.w	802819a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80282ac:	4a73      	ldr	r2, [pc, #460]	@ (802847c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80282ae:	fa1f fe83 	uxth.w	lr, r3
 80282b2:	f8b8 c000 	ldrh.w	ip, [r8]
 80282b6:	43db      	mvns	r3, r3
 80282b8:	6810      	ldr	r0, [r2, #0]
 80282ba:	ea4f 212c 	mov.w	r1, ip, asr #8
 80282be:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80282c2:	b2db      	uxtb	r3, r3
 80282c4:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80282c8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80282cc:	fb12 f20e 	smulbb	r2, r2, lr
 80282d0:	b2c0      	uxtb	r0, r0
 80282d2:	fb1b fb0e 	smulbb	fp, fp, lr
 80282d6:	fb01 2103 	mla	r1, r1, r3, r2
 80282da:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80282de:	fb10 fe0e 	smulbb	lr, r0, lr
 80282e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80282e6:	b289      	uxth	r1, r1
 80282e8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80282ec:	fa5f fc8c 	uxtb.w	ip, ip
 80282f0:	fb02 b203 	mla	r2, r2, r3, fp
 80282f4:	1c48      	adds	r0, r1, #1
 80282f6:	fb0c e303 	mla	r3, ip, r3, lr
 80282fa:	b292      	uxth	r2, r2
 80282fc:	b29b      	uxth	r3, r3
 80282fe:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8028302:	f102 0b01 	add.w	fp, r2, #1
 8028306:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802830a:	1c59      	adds	r1, r3, #1
 802830c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8028310:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028314:	0952      	lsrs	r2, r2, #5
 8028316:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802831a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802831e:	4301      	orrs	r1, r0
 8028320:	4311      	orrs	r1, r2
 8028322:	f8a8 1000 	strh.w	r1, [r8]
 8028326:	e738      	b.n	802819a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028328:	f113 0b01 	adds.w	fp, r3, #1
 802832c:	f53f af35 	bmi.w	802819a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028330:	45dc      	cmp	ip, fp
 8028332:	f6ff af32 	blt.w	802819a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028336:	f110 0b01 	adds.w	fp, r0, #1
 802833a:	f53f af2e 	bmi.w	802819a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802833e:	45de      	cmp	lr, fp
 8028340:	f6ff af2b 	blt.w	802819a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028344:	9302      	str	r3, [sp, #8]
 8028346:	fa0f f38e 	sxth.w	r3, lr
 802834a:	9a08      	ldr	r2, [sp, #32]
 802834c:	9301      	str	r3, [sp, #4]
 802834e:	fa0f f38c 	sxth.w	r3, ip
 8028352:	9105      	str	r1, [sp, #20]
 8028354:	4641      	mov	r1, r8
 8028356:	9300      	str	r3, [sp, #0]
 8028358:	4653      	mov	r3, sl
 802835a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802835e:	463a      	mov	r2, r7
 8028360:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028362:	f7ff fd73 	bl	8027e4c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028366:	e718      	b.n	802819a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028368:	1422      	asrs	r2, r4, #16
 802836a:	9906      	ldr	r1, [sp, #24]
 802836c:	1433      	asrs	r3, r6, #16
 802836e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028372:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028376:	fb01 2303 	mla	r3, r1, r3, r2
 802837a:	085a      	lsrs	r2, r3, #1
 802837c:	07d9      	lsls	r1, r3, #31
 802837e:	5cba      	ldrb	r2, [r7, r2]
 8028380:	bf54      	ite	pl
 8028382:	f002 020f 	andpl.w	r2, r2, #15
 8028386:	1112      	asrmi	r2, r2, #4
 8028388:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802838c:	b2d2      	uxtb	r2, r2
 802838e:	2800      	cmp	r0, #0
 8028390:	d063      	beq.n	802845a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8028392:	f103 0a01 	add.w	sl, r3, #1
 8028396:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802839a:	f01a 0f01 	tst.w	sl, #1
 802839e:	5c79      	ldrb	r1, [r7, r1]
 80283a0:	bf0c      	ite	eq
 80283a2:	f001 010f 	andeq.w	r1, r1, #15
 80283a6:	1109      	asrne	r1, r1, #4
 80283a8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80283ac:	b2c9      	uxtb	r1, r1
 80283ae:	910f      	str	r1, [sp, #60]	@ 0x3c
 80283b0:	f1bc 0f00 	cmp.w	ip, #0
 80283b4:	d01a      	beq.n	80283ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80283b6:	9908      	ldr	r1, [sp, #32]
 80283b8:	440b      	add	r3, r1
 80283ba:	0859      	lsrs	r1, r3, #1
 80283bc:	f013 0f01 	tst.w	r3, #1
 80283c0:	f103 0301 	add.w	r3, r3, #1
 80283c4:	5c79      	ldrb	r1, [r7, r1]
 80283c6:	bf0c      	ite	eq
 80283c8:	f001 010f 	andeq.w	r1, r1, #15
 80283cc:	1109      	asrne	r1, r1, #4
 80283ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80283d2:	b2c9      	uxtb	r1, r1
 80283d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80283d6:	0859      	lsrs	r1, r3, #1
 80283d8:	07db      	lsls	r3, r3, #31
 80283da:	5c79      	ldrb	r1, [r7, r1]
 80283dc:	bf54      	ite	pl
 80283de:	f001 010f 	andpl.w	r1, r1, #15
 80283e2:	1109      	asrmi	r1, r1, #4
 80283e4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80283e8:	b2c9      	uxtb	r1, r1
 80283ea:	9110      	str	r1, [sp, #64]	@ 0x40
 80283ec:	b280      	uxth	r0, r0
 80283ee:	fa1f fc8c 	uxth.w	ip, ip
 80283f2:	fb00 f30c 	mul.w	r3, r0, ip
 80283f6:	0100      	lsls	r0, r0, #4
 80283f8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80283fc:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8028400:	1ac0      	subs	r0, r0, r3
 8028402:	fa1f fc8c 	uxth.w	ip, ip
 8028406:	b280      	uxth	r0, r0
 8028408:	eba1 010c 	sub.w	r1, r1, ip
 802840c:	fa1f fa81 	uxth.w	sl, r1
 8028410:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8028412:	4348      	muls	r0, r1
 8028414:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028416:	fb02 020a 	mla	r2, r2, sl, r0
 802841a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802841e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028420:	fb03 c302 	mla	r3, r3, r2, ip
 8028424:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028428:	2bff      	cmp	r3, #255	@ 0xff
 802842a:	d12b      	bne.n	8028484 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802842c:	4b13      	ldr	r3, [pc, #76]	@ (802847c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802842e:	681a      	ldr	r2, [r3, #0]
 8028430:	4b13      	ldr	r3, [pc, #76]	@ (8028480 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8028432:	0951      	lsrs	r1, r2, #5
 8028434:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8028438:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802843c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028440:	430b      	orrs	r3, r1
 8028442:	4313      	orrs	r3, r2
 8028444:	f8ae 3000 	strh.w	r3, [lr]
 8028448:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802844a:	f10e 0e02 	add.w	lr, lr, #2
 802844e:	f108 38ff 	add.w	r8, r8, #4294967295
 8028452:	441c      	add	r4, r3
 8028454:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028456:	441e      	add	r6, r3
 8028458:	e6cc      	b.n	80281f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802845a:	f1bc 0f00 	cmp.w	ip, #0
 802845e:	d0c5      	beq.n	80283ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8028460:	9908      	ldr	r1, [sp, #32]
 8028462:	440b      	add	r3, r1
 8028464:	0859      	lsrs	r1, r3, #1
 8028466:	07db      	lsls	r3, r3, #31
 8028468:	5c79      	ldrb	r1, [r7, r1]
 802846a:	bf54      	ite	pl
 802846c:	f001 010f 	andpl.w	r1, r1, #15
 8028470:	1109      	asrmi	r1, r1, #4
 8028472:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028476:	b2c9      	uxtb	r1, r1
 8028478:	910b      	str	r1, [sp, #44]	@ 0x2c
 802847a:	e7b7      	b.n	80283ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802847c:	24006608 	.word	0x24006608
 8028480:	fffff800 	.word	0xfffff800
 8028484:	2b00      	cmp	r3, #0
 8028486:	d0df      	beq.n	8028448 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028488:	4a21      	ldr	r2, [pc, #132]	@ (8028510 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802848a:	fa1f fa83 	uxth.w	sl, r3
 802848e:	f8be c000 	ldrh.w	ip, [lr]
 8028492:	43db      	mvns	r3, r3
 8028494:	6810      	ldr	r0, [r2, #0]
 8028496:	ea4f 212c 	mov.w	r1, ip, asr #8
 802849a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802849e:	b2db      	uxtb	r3, r3
 80284a0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80284a4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80284a8:	fb12 f20a 	smulbb	r2, r2, sl
 80284ac:	b2c0      	uxtb	r0, r0
 80284ae:	fb1b fb0a 	smulbb	fp, fp, sl
 80284b2:	fb01 2103 	mla	r1, r1, r3, r2
 80284b6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80284ba:	fb10 f00a 	smulbb	r0, r0, sl
 80284be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80284c2:	b289      	uxth	r1, r1
 80284c4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80284c8:	fa5f fc8c 	uxtb.w	ip, ip
 80284cc:	fb02 b203 	mla	r2, r2, r3, fp
 80284d0:	fb0c 0003 	mla	r0, ip, r3, r0
 80284d4:	1c4b      	adds	r3, r1, #1
 80284d6:	b292      	uxth	r2, r2
 80284d8:	b280      	uxth	r0, r0
 80284da:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80284de:	f100 0b01 	add.w	fp, r0, #1
 80284e2:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80284e6:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80284ea:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80284ee:	ea4b 0101 	orr.w	r1, fp, r1
 80284f2:	f102 0b01 	add.w	fp, r2, #1
 80284f6:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80284fa:	0952      	lsrs	r2, r2, #5
 80284fc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028500:	4311      	orrs	r1, r2
 8028502:	f8ae 1000 	strh.w	r1, [lr]
 8028506:	e79f      	b.n	8028448 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028508:	b013      	add	sp, #76	@ 0x4c
 802850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802850e:	bf00      	nop
 8028510:	24006608 	.word	0x24006608

08028514 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 8028514:	b570      	push	{r4, r5, r6, lr}
 8028516:	1208      	asrs	r0, r1, #8
 8028518:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802851c:	b29e      	uxth	r6, r3
 802851e:	1213      	asrs	r3, r2, #8
 8028520:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028524:	10cc      	asrs	r4, r1, #3
 8028526:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802852a:	00c9      	lsls	r1, r1, #3
 802852c:	fb10 f006 	smulbb	r0, r0, r6
 8028530:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8028534:	fb13 f305 	smulbb	r3, r3, r5
 8028538:	fb14 f406 	smulbb	r4, r4, r6
 802853c:	4418      	add	r0, r3
 802853e:	10d3      	asrs	r3, r2, #3
 8028540:	00d2      	lsls	r2, r2, #3
 8028542:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8028546:	b280      	uxth	r0, r0
 8028548:	b2d2      	uxtb	r2, r2
 802854a:	fb13 f305 	smulbb	r3, r3, r5
 802854e:	fb12 f205 	smulbb	r2, r2, r5
 8028552:	441c      	add	r4, r3
 8028554:	b2cb      	uxtb	r3, r1
 8028556:	fb13 f306 	smulbb	r3, r3, r6
 802855a:	b2a4      	uxth	r4, r4
 802855c:	4413      	add	r3, r2
 802855e:	1c42      	adds	r2, r0, #1
 8028560:	b29b      	uxth	r3, r3
 8028562:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028566:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 802856a:	1c58      	adds	r0, r3, #1
 802856c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028570:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028574:	4310      	orrs	r0, r2
 8028576:	1c62      	adds	r2, r4, #1
 8028578:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802857c:	0964      	lsrs	r4, r4, #5
 802857e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8028582:	4320      	orrs	r0, r4
 8028584:	bd70      	pop	{r4, r5, r6, pc}
	...

08028588 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8028588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802858c:	b08f      	sub	sp, #60	@ 0x3c
 802858e:	461c      	mov	r4, r3
 8028590:	460d      	mov	r5, r1
 8028592:	4616      	mov	r6, r2
 8028594:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8028598:	9004      	str	r0, [sp, #16]
 802859a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802859c:	2f00      	cmp	r7, #0
 802859e:	f000 80f6 	beq.w	802878e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 80285a2:	6820      	ldr	r0, [r4, #0]
 80285a4:	aa0a      	add	r2, sp, #40	@ 0x28
 80285a6:	6861      	ldr	r1, [r4, #4]
 80285a8:	f04f 0802 	mov.w	r8, #2
 80285ac:	3604      	adds	r6, #4
 80285ae:	c203      	stmia	r2!, {r0, r1}
 80285b0:	6818      	ldr	r0, [r3, #0]
 80285b2:	aa0c      	add	r2, sp, #48	@ 0x30
 80285b4:	6859      	ldr	r1, [r3, #4]
 80285b6:	c203      	stmia	r2!, {r0, r1}
 80285b8:	a80a      	add	r0, sp, #40	@ 0x28
 80285ba:	f7ee fbdb 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80285be:	4621      	mov	r1, r4
 80285c0:	a80c      	add	r0, sp, #48	@ 0x30
 80285c2:	f7ee fc1b 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80285c6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80285ca:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 80285ce:	f002 0301 	and.w	r3, r2, #1
 80285d2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80285d6:	9306      	str	r3, [sp, #24]
 80285d8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80285dc:	f003 0101 	and.w	r1, r3, #1
 80285e0:	9105      	str	r1, [sp, #20]
 80285e2:	9805      	ldr	r0, [sp, #20]
 80285e4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80285e8:	4403      	add	r3, r0
 80285ea:	fb01 2303 	mla	r3, r1, r3, r2
 80285ee:	fb93 f3f8 	sdiv	r3, r3, r8
 80285f2:	441d      	add	r5, r3
 80285f4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80285f8:	441a      	add	r2, r3
 80285fa:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80285fe:	4419      	add	r1, r3
 8028600:	4b64      	ldr	r3, [pc, #400]	@ (8028794 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8028602:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8028606:	6818      	ldr	r0, [r3, #0]
 8028608:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802860c:	6803      	ldr	r3, [r0, #0]
 802860e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028610:	4798      	blx	r3
 8028612:	4a61      	ldr	r2, [pc, #388]	@ (8028798 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 8028614:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8028618:	2fff      	cmp	r7, #255	@ 0xff
 802861a:	8813      	ldrh	r3, [r2, #0]
 802861c:	4611      	mov	r1, r2
 802861e:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 8028622:	fb03 fb0b 	mul.w	fp, r3, fp
 8028626:	fb03 a404 	mla	r4, r3, r4, sl
 802862a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802862e:	d06b      	beq.n	8028708 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 8028630:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 8028634:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8028638:	9303      	str	r3, [sp, #12]
 802863a:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802863e:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8028642:	9b07      	ldr	r3, [sp, #28]
 8028644:	42a3      	cmp	r3, r4
 8028646:	f240 809d 	bls.w	8028784 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802864a:	9b06      	ldr	r3, [sp, #24]
 802864c:	2b00      	cmp	r3, #0
 802864e:	d039      	beq.n	80286c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 8028650:	782b      	ldrb	r3, [r5, #0]
 8028652:	f105 0801 	add.w	r8, r5, #1
 8028656:	f109 3bff 	add.w	fp, r9, #4294967295
 802865a:	8822      	ldrh	r2, [r4, #0]
 802865c:	f003 030f 	and.w	r3, r3, #15
 8028660:	9804      	ldr	r0, [sp, #16]
 8028662:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028666:	9b03      	ldr	r3, [sp, #12]
 8028668:	9300      	str	r3, [sp, #0]
 802866a:	463b      	mov	r3, r7
 802866c:	f7ff ff52 	bl	8028514 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8028670:	f824 0b02 	strh.w	r0, [r4], #2
 8028674:	f1bb 0f01 	cmp.w	fp, #1
 8028678:	46a2      	mov	sl, r4
 802867a:	f104 0404 	add.w	r4, r4, #4
 802867e:	dd24      	ble.n	80286ca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 8028680:	f898 3000 	ldrb.w	r3, [r8]
 8028684:	f1ab 0b02 	sub.w	fp, fp, #2
 8028688:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802868c:	091b      	lsrs	r3, r3, #4
 802868e:	9804      	ldr	r0, [sp, #16]
 8028690:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8028694:	9b03      	ldr	r3, [sp, #12]
 8028696:	9300      	str	r3, [sp, #0]
 8028698:	463b      	mov	r3, r7
 802869a:	f7ff ff3b 	bl	8028514 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802869e:	f824 0c04 	strh.w	r0, [r4, #-4]
 80286a2:	f818 3b01 	ldrb.w	r3, [r8], #1
 80286a6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80286aa:	f003 030f 	and.w	r3, r3, #15
 80286ae:	9804      	ldr	r0, [sp, #16]
 80286b0:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80286b4:	9b03      	ldr	r3, [sp, #12]
 80286b6:	9300      	str	r3, [sp, #0]
 80286b8:	463b      	mov	r3, r7
 80286ba:	f7ff ff2b 	bl	8028514 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80286be:	f824 0c02 	strh.w	r0, [r4, #-2]
 80286c2:	e7d7      	b.n	8028674 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 80286c4:	46a8      	mov	r8, r5
 80286c6:	46cb      	mov	fp, r9
 80286c8:	e7d4      	b.n	8028674 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 80286ca:	d10e      	bne.n	80286ea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 80286cc:	f898 3000 	ldrb.w	r3, [r8]
 80286d0:	f8ba 2000 	ldrh.w	r2, [sl]
 80286d4:	091b      	lsrs	r3, r3, #4
 80286d6:	9804      	ldr	r0, [sp, #16]
 80286d8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80286dc:	9b03      	ldr	r3, [sp, #12]
 80286de:	9300      	str	r3, [sp, #0]
 80286e0:	463b      	mov	r3, r7
 80286e2:	f7ff ff17 	bl	8028514 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80286e6:	f82a 0b02 	strh.w	r0, [sl], #2
 80286ea:	9b08      	ldr	r3, [sp, #32]
 80286ec:	9a05      	ldr	r2, [sp, #20]
 80286ee:	881c      	ldrh	r4, [r3, #0]
 80286f0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80286f4:	eba4 0409 	sub.w	r4, r4, r9
 80286f8:	4413      	add	r3, r2
 80286fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80286fc:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8028700:	fb93 f3f2 	sdiv	r3, r3, r2
 8028704:	441d      	add	r5, r3
 8028706:	e79c      	b.n	8028642 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 8028708:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802870c:	45a3      	cmp	fp, r4
 802870e:	d939      	bls.n	8028784 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8028710:	9b06      	ldr	r3, [sp, #24]
 8028712:	b1fb      	cbz	r3, 8028754 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8028714:	782b      	ldrb	r3, [r5, #0]
 8028716:	1c6a      	adds	r2, r5, #1
 8028718:	f109 30ff 	add.w	r0, r9, #4294967295
 802871c:	3402      	adds	r4, #2
 802871e:	f003 030f 	and.w	r3, r3, #15
 8028722:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8028726:	f824 3c02 	strh.w	r3, [r4, #-2]
 802872a:	2801      	cmp	r0, #1
 802872c:	4623      	mov	r3, r4
 802872e:	f104 0404 	add.w	r4, r4, #4
 8028732:	dd12      	ble.n	802875a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8028734:	7813      	ldrb	r3, [r2, #0]
 8028736:	3802      	subs	r0, #2
 8028738:	091b      	lsrs	r3, r3, #4
 802873a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802873e:	f824 3c04 	strh.w	r3, [r4, #-4]
 8028742:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028746:	f003 030f 	and.w	r3, r3, #15
 802874a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802874e:	f824 3c02 	strh.w	r3, [r4, #-2]
 8028752:	e7ea      	b.n	802872a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8028754:	462a      	mov	r2, r5
 8028756:	4648      	mov	r0, r9
 8028758:	e7e7      	b.n	802872a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 802875a:	d106      	bne.n	802876a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 802875c:	7812      	ldrb	r2, [r2, #0]
 802875e:	3302      	adds	r3, #2
 8028760:	0912      	lsrs	r2, r2, #4
 8028762:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8028766:	f823 2c02 	strh.w	r2, [r3, #-2]
 802876a:	880c      	ldrh	r4, [r1, #0]
 802876c:	9a05      	ldr	r2, [sp, #20]
 802876e:	eba4 0409 	sub.w	r4, r4, r9
 8028772:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8028776:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802877a:	4413      	add	r3, r2
 802877c:	fb93 f3f8 	sdiv	r3, r3, r8
 8028780:	441d      	add	r5, r3
 8028782:	e7c3      	b.n	802870c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 8028784:	4b03      	ldr	r3, [pc, #12]	@ (8028794 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8028786:	6818      	ldr	r0, [r3, #0]
 8028788:	6803      	ldr	r3, [r0, #0]
 802878a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802878c:	4798      	blx	r3
 802878e:	b00f      	add	sp, #60	@ 0x3c
 8028790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028794:	24006600 	.word	0x24006600
 8028798:	240065fa 	.word	0x240065fa

0802879c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802879c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802879e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80287a2:	0a0f      	lsrs	r7, r1, #8
 80287a4:	2dff      	cmp	r5, #255	@ 0xff
 80287a6:	d10c      	bne.n	80287c2 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80287a8:	2bff      	cmp	r3, #255	@ 0xff
 80287aa:	d10a      	bne.n	80287c2 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 80287ac:	0948      	lsrs	r0, r1, #5
 80287ae:	4b25      	ldr	r3, [pc, #148]	@ (8028844 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 80287b0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80287b4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80287b8:	403b      	ands	r3, r7
 80287ba:	4318      	orrs	r0, r3
 80287bc:	4308      	orrs	r0, r1
 80287be:	b280      	uxth	r0, r0
 80287c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80287c2:	fb15 f503 	smulbb	r5, r5, r3
 80287c6:	1214      	asrs	r4, r2, #8
 80287c8:	10d6      	asrs	r6, r2, #3
 80287ca:	b2ab      	uxth	r3, r5
 80287cc:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80287d0:	00d0      	lsls	r0, r2, #3
 80287d2:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80287d6:	1c5d      	adds	r5, r3, #1
 80287d8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80287dc:	b2c0      	uxtb	r0, r0
 80287de:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80287e2:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 80287e6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80287ea:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80287ee:	fa1f fc85 	uxth.w	ip, r5
 80287f2:	43ed      	mvns	r5, r5
 80287f4:	fb12 f20c 	smulbb	r2, r2, ip
 80287f8:	b2eb      	uxtb	r3, r5
 80287fa:	b2fd      	uxtb	r5, r7
 80287fc:	fb04 2403 	mla	r4, r4, r3, r2
 8028800:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8028804:	fb15 f50c 	smulbb	r5, r5, ip
 8028808:	b2c8      	uxtb	r0, r1
 802880a:	b2a4      	uxth	r4, r4
 802880c:	fb10 f00c 	smulbb	r0, r0, ip
 8028810:	fb06 5503 	mla	r5, r6, r3, r5
 8028814:	fb02 0003 	mla	r0, r2, r3, r0
 8028818:	b2ad      	uxth	r5, r5
 802881a:	b283      	uxth	r3, r0
 802881c:	1c60      	adds	r0, r4, #1
 802881e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8028822:	1c58      	adds	r0, r3, #1
 8028824:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028828:	1c6b      	adds	r3, r5, #1
 802882a:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802882e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028832:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028836:	096d      	lsrs	r5, r5, #5
 8028838:	4320      	orrs	r0, r4
 802883a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802883e:	4328      	orrs	r0, r5
 8028840:	e7be      	b.n	80287c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 8028842:	bf00      	nop
 8028844:	00fff800 	.word	0x00fff800

08028848 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8028848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802884c:	461c      	mov	r4, r3
 802884e:	b08d      	sub	sp, #52	@ 0x34
 8028850:	460d      	mov	r5, r1
 8028852:	4616      	mov	r6, r2
 8028854:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8028856:	4680      	mov	r8, r0
 8028858:	6861      	ldr	r1, [r4, #4]
 802885a:	aa08      	add	r2, sp, #32
 802885c:	6820      	ldr	r0, [r4, #0]
 802885e:	f04f 0a02 	mov.w	sl, #2
 8028862:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8028866:	3604      	adds	r6, #4
 8028868:	c203      	stmia	r2!, {r0, r1}
 802886a:	6818      	ldr	r0, [r3, #0]
 802886c:	aa0a      	add	r2, sp, #40	@ 0x28
 802886e:	6859      	ldr	r1, [r3, #4]
 8028870:	c203      	stmia	r2!, {r0, r1}
 8028872:	a808      	add	r0, sp, #32
 8028874:	f7ee fa7e 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028878:	4621      	mov	r1, r4
 802887a:	a80a      	add	r0, sp, #40	@ 0x28
 802887c:	f7ee fabe 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028880:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8028884:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 8028888:	f002 0301 	and.w	r3, r2, #1
 802888c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 8028890:	9303      	str	r3, [sp, #12]
 8028892:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8028896:	f003 0101 	and.w	r1, r3, #1
 802889a:	9102      	str	r1, [sp, #8]
 802889c:	9802      	ldr	r0, [sp, #8]
 802889e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80288a2:	4403      	add	r3, r0
 80288a4:	fb01 2303 	mla	r3, r1, r3, r2
 80288a8:	fb93 f3fa 	sdiv	r3, r3, sl
 80288ac:	441d      	add	r5, r3
 80288ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80288b2:	441a      	add	r2, r3
 80288b4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80288b8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80288bc:	4419      	add	r1, r3
 80288be:	4a3e      	ldr	r2, [pc, #248]	@ (80289b8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 80288c0:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 80288c4:	6810      	ldr	r0, [r2, #0]
 80288c6:	9205      	str	r2, [sp, #20]
 80288c8:	6803      	ldr	r3, [r0, #0]
 80288ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80288cc:	4798      	blx	r3
 80288ce:	4b3b      	ldr	r3, [pc, #236]	@ (80289bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 80288d0:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 80288d4:	8819      	ldrh	r1, [r3, #0]
 80288d6:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 80288da:	434f      	muls	r7, r1
 80288dc:	fb01 c404 	mla	r4, r1, r4, ip
 80288e0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80288e4:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 80288e8:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 80288ec:	9204      	str	r2, [sp, #16]
 80288ee:	9b04      	ldr	r3, [sp, #16]
 80288f0:	429c      	cmp	r4, r3
 80288f2:	d258      	bcs.n	80289a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 80288f4:	9b03      	ldr	r3, [sp, #12]
 80288f6:	2b00      	cmp	r3, #0
 80288f8:	d034      	beq.n	8028964 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80288fa:	782b      	ldrb	r3, [r5, #0]
 80288fc:	1c6f      	adds	r7, r5, #1
 80288fe:	f003 030f 	and.w	r3, r3, #15
 8028902:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028906:	0e0b      	lsrs	r3, r1, #24
 8028908:	d006      	beq.n	8028918 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802890a:	8822      	ldrh	r2, [r4, #0]
 802890c:	4640      	mov	r0, r8
 802890e:	9300      	str	r3, [sp, #0]
 8028910:	464b      	mov	r3, r9
 8028912:	f7ff ff43 	bl	802879c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028916:	8020      	strh	r0, [r4, #0]
 8028918:	3402      	adds	r4, #2
 802891a:	f10b 3aff 	add.w	sl, fp, #4294967295
 802891e:	f1ba 0f01 	cmp.w	sl, #1
 8028922:	dd22      	ble.n	802896a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8028924:	783b      	ldrb	r3, [r7, #0]
 8028926:	091b      	lsrs	r3, r3, #4
 8028928:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802892c:	0e0b      	lsrs	r3, r1, #24
 802892e:	d006      	beq.n	802893e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8028930:	8822      	ldrh	r2, [r4, #0]
 8028932:	4640      	mov	r0, r8
 8028934:	9300      	str	r3, [sp, #0]
 8028936:	464b      	mov	r3, r9
 8028938:	f7ff ff30 	bl	802879c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802893c:	8020      	strh	r0, [r4, #0]
 802893e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8028942:	f003 030f 	and.w	r3, r3, #15
 8028946:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802894a:	0e0b      	lsrs	r3, r1, #24
 802894c:	d006      	beq.n	802895c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802894e:	8862      	ldrh	r2, [r4, #2]
 8028950:	4640      	mov	r0, r8
 8028952:	9300      	str	r3, [sp, #0]
 8028954:	464b      	mov	r3, r9
 8028956:	f7ff ff21 	bl	802879c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802895a:	8060      	strh	r0, [r4, #2]
 802895c:	3404      	adds	r4, #4
 802895e:	f1aa 0a02 	sub.w	sl, sl, #2
 8028962:	e7dc      	b.n	802891e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8028964:	462f      	mov	r7, r5
 8028966:	46da      	mov	sl, fp
 8028968:	e7d9      	b.n	802891e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802896a:	d10d      	bne.n	8028988 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802896c:	783b      	ldrb	r3, [r7, #0]
 802896e:	091b      	lsrs	r3, r3, #4
 8028970:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8028974:	0e0b      	lsrs	r3, r1, #24
 8028976:	d006      	beq.n	8028986 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8028978:	8822      	ldrh	r2, [r4, #0]
 802897a:	4640      	mov	r0, r8
 802897c:	9300      	str	r3, [sp, #0]
 802897e:	464b      	mov	r3, r9
 8028980:	f7ff ff0c 	bl	802879c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8028984:	8020      	strh	r0, [r4, #0]
 8028986:	3402      	adds	r4, #2
 8028988:	9b06      	ldr	r3, [sp, #24]
 802898a:	9a02      	ldr	r2, [sp, #8]
 802898c:	881b      	ldrh	r3, [r3, #0]
 802898e:	eba3 030b 	sub.w	r3, r3, fp
 8028992:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8028996:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802899a:	4413      	add	r3, r2
 802899c:	9a07      	ldr	r2, [sp, #28]
 802899e:	fb93 f3f2 	sdiv	r3, r3, r2
 80289a2:	441d      	add	r5, r3
 80289a4:	e7a3      	b.n	80288ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 80289a6:	9b05      	ldr	r3, [sp, #20]
 80289a8:	6818      	ldr	r0, [r3, #0]
 80289aa:	6803      	ldr	r3, [r0, #0]
 80289ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80289ae:	4798      	blx	r3
 80289b0:	b00d      	add	sp, #52	@ 0x34
 80289b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80289b6:	bf00      	nop
 80289b8:	24006600 	.word	0x24006600
 80289bc:	240065fa 	.word	0x240065fa

080289c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 80289c0:	b570      	push	{r4, r5, r6, lr}
 80289c2:	1214      	asrs	r4, r2, #8
 80289c4:	788d      	ldrb	r5, [r1, #2]
 80289c6:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80289ca:	10d0      	asrs	r0, r2, #3
 80289cc:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80289d0:	00d2      	lsls	r2, r2, #3
 80289d2:	fb15 f503 	smulbb	r5, r5, r3
 80289d6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80289da:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80289de:	b2d2      	uxtb	r2, r2
 80289e0:	fb04 5506 	mla	r5, r4, r6, r5
 80289e4:	784c      	ldrb	r4, [r1, #1]
 80289e6:	7809      	ldrb	r1, [r1, #0]
 80289e8:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80289ec:	fb14 f403 	smulbb	r4, r4, r3
 80289f0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80289f4:	fb11 f303 	smulbb	r3, r1, r3
 80289f8:	b2ad      	uxth	r5, r5
 80289fa:	fb00 4406 	mla	r4, r0, r6, r4
 80289fe:	fb02 3306 	mla	r3, r2, r6, r3
 8028a02:	1c68      	adds	r0, r5, #1
 8028a04:	b2a4      	uxth	r4, r4
 8028a06:	b29b      	uxth	r3, r3
 8028a08:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8028a0c:	1c62      	adds	r2, r4, #1
 8028a0e:	1c58      	adds	r0, r3, #1
 8028a10:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028a14:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028a18:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028a1c:	0964      	lsrs	r4, r4, #5
 8028a1e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028a22:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8028a26:	4328      	orrs	r0, r5
 8028a28:	4320      	orrs	r0, r4
 8028a2a:	bd70      	pop	{r4, r5, r6, pc}

08028a2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8028a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a30:	b08f      	sub	sp, #60	@ 0x3c
 8028a32:	461c      	mov	r4, r3
 8028a34:	4682      	mov	sl, r0
 8028a36:	460e      	mov	r6, r1
 8028a38:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8028a3c:	4615      	mov	r5, r2
 8028a3e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028a40:	2f00      	cmp	r7, #0
 8028a42:	f000 8141 	beq.w	8028cc8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 8028a46:	6820      	ldr	r0, [r4, #0]
 8028a48:	aa0a      	add	r2, sp, #40	@ 0x28
 8028a4a:	6861      	ldr	r1, [r4, #4]
 8028a4c:	f04f 0802 	mov.w	r8, #2
 8028a50:	3504      	adds	r5, #4
 8028a52:	c203      	stmia	r2!, {r0, r1}
 8028a54:	6818      	ldr	r0, [r3, #0]
 8028a56:	aa0c      	add	r2, sp, #48	@ 0x30
 8028a58:	6859      	ldr	r1, [r3, #4]
 8028a5a:	c203      	stmia	r2!, {r0, r1}
 8028a5c:	a80a      	add	r0, sp, #40	@ 0x28
 8028a5e:	f7ee f989 	bl	8016d74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8028a62:	4621      	mov	r1, r4
 8028a64:	a80c      	add	r0, sp, #48	@ 0x30
 8028a66:	f7ee f9c9 	bl	8016dfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028a6a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8028a6e:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8028a72:	f002 0301 	and.w	r3, r2, #1
 8028a76:	9306      	str	r3, [sp, #24]
 8028a78:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028a7c:	f003 0101 	and.w	r1, r3, #1
 8028a80:	9105      	str	r1, [sp, #20]
 8028a82:	9805      	ldr	r0, [sp, #20]
 8028a84:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8028a88:	4403      	add	r3, r0
 8028a8a:	fb01 2303 	mla	r3, r1, r3, r2
 8028a8e:	fb93 f3f8 	sdiv	r3, r3, r8
 8028a92:	441e      	add	r6, r3
 8028a94:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8028a98:	441a      	add	r2, r3
 8028a9a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8028a9e:	4419      	add	r1, r3
 8028aa0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8028aa4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8028aa8:	9303      	str	r3, [sp, #12]
 8028aaa:	4b89      	ldr	r3, [pc, #548]	@ (8028cd0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8028aac:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8028ab0:	6818      	ldr	r0, [r3, #0]
 8028ab2:	6803      	ldr	r3, [r0, #0]
 8028ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028ab6:	4798      	blx	r3
 8028ab8:	4a86      	ldr	r2, [pc, #536]	@ (8028cd4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8028aba:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8028abe:	2fff      	cmp	r7, #255	@ 0xff
 8028ac0:	8813      	ldrh	r3, [r2, #0]
 8028ac2:	4694      	mov	ip, r2
 8028ac4:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8028ac8:	fb03 9404 	mla	r4, r3, r4, r9
 8028acc:	fb03 f30b 	mul.w	r3, r3, fp
 8028ad0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028ad4:	d071      	beq.n	8028bba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 8028ad6:	43f9      	mvns	r1, r7
 8028ad8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8028adc:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8028ae0:	b2c9      	uxtb	r1, r1
 8028ae2:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8028ae6:	9104      	str	r1, [sp, #16]
 8028ae8:	9b07      	ldr	r3, [sp, #28]
 8028aea:	42a3      	cmp	r3, r4
 8028aec:	f240 80e7 	bls.w	8028cbe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8028af0:	9b06      	ldr	r3, [sp, #24]
 8028af2:	2b00      	cmp	r3, #0
 8028af4:	d03d      	beq.n	8028b72 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 8028af6:	7831      	ldrb	r1, [r6, #0]
 8028af8:	4650      	mov	r0, sl
 8028afa:	9b04      	ldr	r3, [sp, #16]
 8028afc:	f106 0801 	add.w	r8, r6, #1
 8028b00:	f001 010f 	and.w	r1, r1, #15
 8028b04:	8822      	ldrh	r2, [r4, #0]
 8028b06:	9300      	str	r3, [sp, #0]
 8028b08:	463b      	mov	r3, r7
 8028b0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028b0e:	4429      	add	r1, r5
 8028b10:	f7ff ff56 	bl	80289c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028b14:	9b03      	ldr	r3, [sp, #12]
 8028b16:	f824 0b02 	strh.w	r0, [r4], #2
 8028b1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8028b1e:	f1bb 0f01 	cmp.w	fp, #1
 8028b22:	46a1      	mov	r9, r4
 8028b24:	f104 0404 	add.w	r4, r4, #4
 8028b28:	dd27      	ble.n	8028b7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 8028b2a:	f898 1000 	ldrb.w	r1, [r8]
 8028b2e:	4650      	mov	r0, sl
 8028b30:	9b04      	ldr	r3, [sp, #16]
 8028b32:	f1ab 0b02 	sub.w	fp, fp, #2
 8028b36:	0909      	lsrs	r1, r1, #4
 8028b38:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8028b3c:	9300      	str	r3, [sp, #0]
 8028b3e:	463b      	mov	r3, r7
 8028b40:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028b44:	4429      	add	r1, r5
 8028b46:	f7ff ff3b 	bl	80289c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028b4a:	f824 0c04 	strh.w	r0, [r4, #-4]
 8028b4e:	f818 1b01 	ldrb.w	r1, [r8], #1
 8028b52:	4650      	mov	r0, sl
 8028b54:	9b04      	ldr	r3, [sp, #16]
 8028b56:	f001 010f 	and.w	r1, r1, #15
 8028b5a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8028b5e:	9300      	str	r3, [sp, #0]
 8028b60:	463b      	mov	r3, r7
 8028b62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028b66:	4429      	add	r1, r5
 8028b68:	f7ff ff2a 	bl	80289c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028b6c:	f824 0c02 	strh.w	r0, [r4, #-2]
 8028b70:	e7d5      	b.n	8028b1e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8028b72:	46b0      	mov	r8, r6
 8028b74:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8028b78:	e7d1      	b.n	8028b1e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 8028b7a:	d10f      	bne.n	8028b9c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 8028b7c:	f898 1000 	ldrb.w	r1, [r8]
 8028b80:	4650      	mov	r0, sl
 8028b82:	9b04      	ldr	r3, [sp, #16]
 8028b84:	0909      	lsrs	r1, r1, #4
 8028b86:	f8b9 2000 	ldrh.w	r2, [r9]
 8028b8a:	9300      	str	r3, [sp, #0]
 8028b8c:	463b      	mov	r3, r7
 8028b8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028b92:	4429      	add	r1, r5
 8028b94:	f7ff ff14 	bl	80289c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8028b98:	f829 0b02 	strh.w	r0, [r9], #2
 8028b9c:	9b08      	ldr	r3, [sp, #32]
 8028b9e:	9a05      	ldr	r2, [sp, #20]
 8028ba0:	881c      	ldrh	r4, [r3, #0]
 8028ba2:	9b03      	ldr	r3, [sp, #12]
 8028ba4:	1ae4      	subs	r4, r4, r3
 8028ba6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8028baa:	4413      	add	r3, r2
 8028bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028bae:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8028bb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8028bb6:	441e      	add	r6, r3
 8028bb8:	e796      	b.n	8028ae8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 8028bba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8028bbe:	4f46      	ldr	r7, [pc, #280]	@ (8028cd8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8028bc0:	42a3      	cmp	r3, r4
 8028bc2:	d97c      	bls.n	8028cbe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 8028bc4:	9a06      	ldr	r2, [sp, #24]
 8028bc6:	2a00      	cmp	r2, #0
 8028bc8:	d054      	beq.n	8028c74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 8028bca:	7830      	ldrb	r0, [r6, #0]
 8028bcc:	1c71      	adds	r1, r6, #1
 8028bce:	f000 000f 	and.w	r0, r0, #15
 8028bd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028bd6:	eb05 0e00 	add.w	lr, r5, r0
 8028bda:	5c28      	ldrb	r0, [r5, r0]
 8028bdc:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8028be0:	f89e e001 	ldrb.w	lr, [lr, #1]
 8028be4:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8028be8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028bec:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8028bf0:	ea42 020e 	orr.w	r2, r2, lr
 8028bf4:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8028bf8:	f824 2b02 	strh.w	r2, [r4], #2
 8028bfc:	9a03      	ldr	r2, [sp, #12]
 8028bfe:	f102 3eff 	add.w	lr, r2, #4294967295
 8028c02:	f1be 0f01 	cmp.w	lr, #1
 8028c06:	4620      	mov	r0, r4
 8028c08:	f104 0404 	add.w	r4, r4, #4
 8028c0c:	dd36      	ble.n	8028c7c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 8028c0e:	7808      	ldrb	r0, [r1, #0]
 8028c10:	f1ae 0e02 	sub.w	lr, lr, #2
 8028c14:	0900      	lsrs	r0, r0, #4
 8028c16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028c1a:	eb05 0a00 	add.w	sl, r5, r0
 8028c1e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8028c22:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8028c26:	00d2      	lsls	r2, r2, #3
 8028c28:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8028c2c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028c30:	ea49 0202 	orr.w	r2, r9, r2
 8028c34:	f815 9000 	ldrb.w	r9, [r5, r0]
 8028c38:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8028c3c:	f824 2c04 	strh.w	r2, [r4, #-4]
 8028c40:	f811 0b01 	ldrb.w	r0, [r1], #1
 8028c44:	f000 000f 	and.w	r0, r0, #15
 8028c48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028c4c:	eb05 0a00 	add.w	sl, r5, r0
 8028c50:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8028c54:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8028c58:	00d2      	lsls	r2, r2, #3
 8028c5a:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8028c5e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028c62:	ea49 0202 	orr.w	r2, r9, r2
 8028c66:	f815 9000 	ldrb.w	r9, [r5, r0]
 8028c6a:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8028c6e:	f824 2c02 	strh.w	r2, [r4, #-2]
 8028c72:	e7c6      	b.n	8028c02 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8028c74:	4631      	mov	r1, r6
 8028c76:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8028c7a:	e7c2      	b.n	8028c02 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8028c7c:	d111      	bne.n	8028ca2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 8028c7e:	7809      	ldrb	r1, [r1, #0]
 8028c80:	0909      	lsrs	r1, r1, #4
 8028c82:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028c86:	186c      	adds	r4, r5, r1
 8028c88:	5c69      	ldrb	r1, [r5, r1]
 8028c8a:	78a2      	ldrb	r2, [r4, #2]
 8028c8c:	7864      	ldrb	r4, [r4, #1]
 8028c8e:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8028c92:	00e4      	lsls	r4, r4, #3
 8028c94:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8028c98:	4322      	orrs	r2, r4
 8028c9a:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8028c9e:	f820 2b02 	strh.w	r2, [r0], #2
 8028ca2:	9a03      	ldr	r2, [sp, #12]
 8028ca4:	f8bc 4000 	ldrh.w	r4, [ip]
 8028ca8:	9905      	ldr	r1, [sp, #20]
 8028caa:	1aa4      	subs	r4, r4, r2
 8028cac:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8028cb0:	440a      	add	r2, r1
 8028cb2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8028cb6:	fb92 f2f8 	sdiv	r2, r2, r8
 8028cba:	4416      	add	r6, r2
 8028cbc:	e780      	b.n	8028bc0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 8028cbe:	4b04      	ldr	r3, [pc, #16]	@ (8028cd0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8028cc0:	6818      	ldr	r0, [r3, #0]
 8028cc2:	6803      	ldr	r3, [r0, #0]
 8028cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028cc6:	4798      	blx	r3
 8028cc8:	b00f      	add	sp, #60	@ 0x3c
 8028cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028cce:	bf00      	nop
 8028cd0:	24006600 	.word	0x24006600
 8028cd4:	240065fa 	.word	0x240065fa
 8028cd8:	fffff800 	.word	0xfffff800

08028cdc <CRC_Lock>:
 8028cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8028d94 <CRC_Lock+0xb8>)
 8028cde:	b530      	push	{r4, r5, lr}
 8028ce0:	6813      	ldr	r3, [r2, #0]
 8028ce2:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8028ce6:	f023 0301 	bic.w	r3, r3, #1
 8028cea:	6013      	str	r3, [r2, #0]
 8028cec:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8028cf0:	4b29      	ldr	r3, [pc, #164]	@ (8028d98 <CRC_Lock+0xbc>)
 8028cf2:	681c      	ldr	r4, [r3, #0]
 8028cf4:	4014      	ands	r4, r2
 8028cf6:	42ac      	cmp	r4, r5
 8028cf8:	d005      	beq.n	8028d06 <CRC_Lock+0x2a>
 8028cfa:	681c      	ldr	r4, [r3, #0]
 8028cfc:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8028d00:	4014      	ands	r4, r2
 8028d02:	42ac      	cmp	r4, r5
 8028d04:	d125      	bne.n	8028d52 <CRC_Lock+0x76>
 8028d06:	4b25      	ldr	r3, [pc, #148]	@ (8028d9c <CRC_Lock+0xc0>)
 8028d08:	681b      	ldr	r3, [r3, #0]
 8028d0a:	2b00      	cmp	r3, #0
 8028d0c:	d139      	bne.n	8028d82 <CRC_Lock+0xa6>
 8028d0e:	4b24      	ldr	r3, [pc, #144]	@ (8028da0 <CRC_Lock+0xc4>)
 8028d10:	681a      	ldr	r2, [r3, #0]
 8028d12:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028d16:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8028d1a:	d00d      	beq.n	8028d38 <CRC_Lock+0x5c>
 8028d1c:	681a      	ldr	r2, [r3, #0]
 8028d1e:	f240 4483 	movw	r4, #1155	@ 0x483
 8028d22:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028d26:	42a2      	cmp	r2, r4
 8028d28:	d006      	beq.n	8028d38 <CRC_Lock+0x5c>
 8028d2a:	681b      	ldr	r3, [r3, #0]
 8028d2c:	f240 4285 	movw	r2, #1157	@ 0x485
 8028d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028d34:	4293      	cmp	r3, r2
 8028d36:	d124      	bne.n	8028d82 <CRC_Lock+0xa6>
 8028d38:	4b1a      	ldr	r3, [pc, #104]	@ (8028da4 <CRC_Lock+0xc8>)
 8028d3a:	2201      	movs	r2, #1
 8028d3c:	601a      	str	r2, [r3, #0]
 8028d3e:	681a      	ldr	r2, [r3, #0]
 8028d40:	2a00      	cmp	r2, #0
 8028d42:	d1fc      	bne.n	8028d3e <CRC_Lock+0x62>
 8028d44:	4b18      	ldr	r3, [pc, #96]	@ (8028da8 <CRC_Lock+0xcc>)
 8028d46:	6018      	str	r0, [r3, #0]
 8028d48:	6818      	ldr	r0, [r3, #0]
 8028d4a:	1a43      	subs	r3, r0, r1
 8028d4c:	4258      	negs	r0, r3
 8028d4e:	4158      	adcs	r0, r3
 8028d50:	e00e      	b.n	8028d70 <CRC_Lock+0x94>
 8028d52:	681b      	ldr	r3, [r3, #0]
 8028d54:	4013      	ands	r3, r2
 8028d56:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8028d5a:	4293      	cmp	r3, r2
 8028d5c:	d111      	bne.n	8028d82 <CRC_Lock+0xa6>
 8028d5e:	4b13      	ldr	r3, [pc, #76]	@ (8028dac <CRC_Lock+0xd0>)
 8028d60:	f240 4286 	movw	r2, #1158	@ 0x486
 8028d64:	681b      	ldr	r3, [r3, #0]
 8028d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028d6a:	4293      	cmp	r3, r2
 8028d6c:	d001      	beq.n	8028d72 <CRC_Lock+0x96>
 8028d6e:	2000      	movs	r0, #0
 8028d70:	bd30      	pop	{r4, r5, pc}
 8028d72:	4b0f      	ldr	r3, [pc, #60]	@ (8028db0 <CRC_Lock+0xd4>)
 8028d74:	2201      	movs	r2, #1
 8028d76:	601a      	str	r2, [r3, #0]
 8028d78:	681a      	ldr	r2, [r3, #0]
 8028d7a:	2a00      	cmp	r2, #0
 8028d7c:	d1fc      	bne.n	8028d78 <CRC_Lock+0x9c>
 8028d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8028db4 <CRC_Lock+0xd8>)
 8028d80:	e7e1      	b.n	8028d46 <CRC_Lock+0x6a>
 8028d82:	4b0d      	ldr	r3, [pc, #52]	@ (8028db8 <CRC_Lock+0xdc>)
 8028d84:	2201      	movs	r2, #1
 8028d86:	601a      	str	r2, [r3, #0]
 8028d88:	681a      	ldr	r2, [r3, #0]
 8028d8a:	2a00      	cmp	r2, #0
 8028d8c:	d1fc      	bne.n	8028d88 <CRC_Lock+0xac>
 8028d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8028dbc <CRC_Lock+0xe0>)
 8028d90:	e7d9      	b.n	8028d46 <CRC_Lock+0x6a>
 8028d92:	bf00      	nop
 8028d94:	e0002000 	.word	0xe0002000
 8028d98:	e000ed00 	.word	0xe000ed00
 8028d9c:	e0042000 	.word	0xe0042000
 8028da0:	5c001000 	.word	0x5c001000
 8028da4:	58024c08 	.word	0x58024c08
 8028da8:	58024c00 	.word	0x58024c00
 8028dac:	46008ff0 	.word	0x46008ff0
 8028db0:	46024c08 	.word	0x46024c08
 8028db4:	46024c00 	.word	0x46024c00
 8028db8:	40023008 	.word	0x40023008
 8028dbc:	40023000 	.word	0x40023000

08028dc0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028dc0:	6101      	str	r1, [r0, #16]
 8028dc2:	4770      	bx	lr

08028dc4 <_ZN8touchgfx8Gestures4tickEv>:
 8028dc4:	7b83      	ldrb	r3, [r0, #14]
 8028dc6:	b14b      	cbz	r3, 8028ddc <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028dc8:	8903      	ldrh	r3, [r0, #8]
 8028dca:	3301      	adds	r3, #1
 8028dcc:	b29b      	uxth	r3, r3
 8028dce:	2b07      	cmp	r3, #7
 8028dd0:	8103      	strh	r3, [r0, #8]
 8028dd2:	bf81      	itttt	hi
 8028dd4:	2300      	movhi	r3, #0
 8028dd6:	8143      	strhhi	r3, [r0, #10]
 8028dd8:	8183      	strhhi	r3, [r0, #12]
 8028dda:	7383      	strbhi	r3, [r0, #14]
 8028ddc:	4770      	bx	lr
	...

08028de0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028de0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028de4:	4698      	mov	r8, r3
 8028de6:	8883      	ldrh	r3, [r0, #4]
 8028de8:	4604      	mov	r4, r0
 8028dea:	4617      	mov	r7, r2
 8028dec:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028df0:	eba8 0303 	sub.w	r3, r8, r3
 8028df4:	4a19      	ldr	r2, [pc, #100]	@ (8028e5c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028df6:	460e      	mov	r6, r1
 8028df8:	b21b      	sxth	r3, r3
 8028dfa:	88c1      	ldrh	r1, [r0, #6]
 8028dfc:	9200      	str	r2, [sp, #0]
 8028dfe:	2000      	movs	r0, #0
 8028e00:	2b00      	cmp	r3, #0
 8028e02:	8aa2      	ldrh	r2, [r4, #20]
 8028e04:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8028e08:	bfb8      	it	lt
 8028e0a:	425b      	neglt	r3, r3
 8028e0c:	f88d 0004 	strb.w	r0, [sp, #4]
 8028e10:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028e14:	b21b      	sxth	r3, r3
 8028e16:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028e1a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028e1e:	4293      	cmp	r3, r2
 8028e20:	dc07      	bgt.n	8028e32 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028e22:	1a69      	subs	r1, r5, r1
 8028e24:	b209      	sxth	r1, r1
 8028e26:	2900      	cmp	r1, #0
 8028e28:	bfb8      	it	lt
 8028e2a:	4249      	neglt	r1, r1
 8028e2c:	b209      	sxth	r1, r1
 8028e2e:	428a      	cmp	r2, r1
 8028e30:	da10      	bge.n	8028e54 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028e32:	6920      	ldr	r0, [r4, #16]
 8028e34:	4669      	mov	r1, sp
 8028e36:	eba8 0606 	sub.w	r6, r8, r6
 8028e3a:	1bef      	subs	r7, r5, r7
 8028e3c:	6803      	ldr	r3, [r0, #0]
 8028e3e:	685b      	ldr	r3, [r3, #4]
 8028e40:	4798      	blx	r3
 8028e42:	2300      	movs	r3, #0
 8028e44:	2001      	movs	r0, #1
 8028e46:	8166      	strh	r6, [r4, #10]
 8028e48:	8123      	strh	r3, [r4, #8]
 8028e4a:	81a7      	strh	r7, [r4, #12]
 8028e4c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028e50:	80e5      	strh	r5, [r4, #6]
 8028e52:	73a0      	strb	r0, [r4, #14]
 8028e54:	b004      	add	sp, #16
 8028e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e5a:	bf00      	nop
 8028e5c:	0802c580 	.word	0x0802c580

08028e60 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028e62:	461e      	mov	r6, r3
 8028e64:	1e4b      	subs	r3, r1, #1
 8028e66:	b085      	sub	sp, #20
 8028e68:	4604      	mov	r4, r0
 8028e6a:	2b01      	cmp	r3, #1
 8028e6c:	460d      	mov	r5, r1
 8028e6e:	4617      	mov	r7, r2
 8028e70:	d84b      	bhi.n	8028f0a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028e72:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028e76:	1cd3      	adds	r3, r2, #3
 8028e78:	b29b      	uxth	r3, r3
 8028e7a:	2b06      	cmp	r3, #6
 8028e7c:	d916      	bls.n	8028eac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028e7e:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8028f20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028e82:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028e86:	f8cd c004 	str.w	ip, [sp, #4]
 8028e8a:	f04f 0c00 	mov.w	ip, #0
 8028e8e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028e92:	6900      	ldr	r0, [r0, #16]
 8028e94:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028e98:	a901      	add	r1, sp, #4
 8028e9a:	f88d c008 	strb.w	ip, [sp, #8]
 8028e9e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028ea2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028ea6:	6803      	ldr	r3, [r0, #0]
 8028ea8:	689b      	ldr	r3, [r3, #8]
 8028eaa:	4798      	blx	r3
 8028eac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028eb0:	1cd3      	adds	r3, r2, #3
 8028eb2:	b29b      	uxth	r3, r3
 8028eb4:	2b06      	cmp	r3, #6
 8028eb6:	d916      	bls.n	8028ee6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028eb8:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8028f20 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8028ebc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028ec0:	f8cd c004 	str.w	ip, [sp, #4]
 8028ec4:	f04f 0c01 	mov.w	ip, #1
 8028ec8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028ecc:	6920      	ldr	r0, [r4, #16]
 8028ece:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028ed2:	a901      	add	r1, sp, #4
 8028ed4:	f88d c008 	strb.w	ip, [sp, #8]
 8028ed8:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028edc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028ee0:	6803      	ldr	r3, [r0, #0]
 8028ee2:	689b      	ldr	r3, [r3, #8]
 8028ee4:	4798      	blx	r3
 8028ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8028f1c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028ee8:	a901      	add	r1, sp, #4
 8028eea:	6920      	ldr	r0, [r4, #16]
 8028eec:	9301      	str	r3, [sp, #4]
 8028eee:	2300      	movs	r3, #0
 8028ef0:	f88d 5008 	strb.w	r5, [sp, #8]
 8028ef4:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028ef8:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028efc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028f00:	6803      	ldr	r3, [r0, #0]
 8028f02:	681b      	ldr	r3, [r3, #0]
 8028f04:	4798      	blx	r3
 8028f06:	b005      	add	sp, #20
 8028f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028f0a:	2900      	cmp	r1, #0
 8028f0c:	d1eb      	bne.n	8028ee6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028f0e:	80a2      	strh	r2, [r4, #4]
 8028f10:	80c6      	strh	r6, [r0, #6]
 8028f12:	60a1      	str	r1, [r4, #8]
 8028f14:	81a1      	strh	r1, [r4, #12]
 8028f16:	73a1      	strb	r1, [r4, #14]
 8028f18:	e7e5      	b.n	8028ee6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028f1a:	bf00      	nop
 8028f1c:	0802c56c 	.word	0x0802c56c
 8028f20:	0802c594 	.word	0x0802c594

08028f24 <__aeabi_atexit>:
 8028f24:	460b      	mov	r3, r1
 8028f26:	4601      	mov	r1, r0
 8028f28:	4618      	mov	r0, r3
 8028f2a:	f000 baaf 	b.w	802948c <__cxa_atexit>

08028f2e <_ZdlPvj>:
 8028f2e:	f000 b803 	b.w	8028f38 <_ZdlPv>

08028f32 <__cxa_pure_virtual>:
 8028f32:	b508      	push	{r3, lr}
 8028f34:	f000 f80e 	bl	8028f54 <_ZSt9terminatev>

08028f38 <_ZdlPv>:
 8028f38:	f000 b9f2 	b.w	8029320 <free>

08028f3c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028f3c:	b508      	push	{r3, lr}
 8028f3e:	4780      	blx	r0
 8028f40:	f000 f9bb 	bl	80292ba <abort>

08028f44 <_ZSt13get_terminatev>:
 8028f44:	4b02      	ldr	r3, [pc, #8]	@ (8028f50 <_ZSt13get_terminatev+0xc>)
 8028f46:	6818      	ldr	r0, [r3, #0]
 8028f48:	f3bf 8f5b 	dmb	ish
 8028f4c:	4770      	bx	lr
 8028f4e:	bf00      	nop
 8028f50:	2400009c 	.word	0x2400009c

08028f54 <_ZSt9terminatev>:
 8028f54:	b508      	push	{r3, lr}
 8028f56:	f7ff fff5 	bl	8028f44 <_ZSt13get_terminatev>
 8028f5a:	f7ff ffef 	bl	8028f3c <_ZN10__cxxabiv111__terminateEPFvvE>

08028f5e <sinf_poly>:
 8028f5e:	07cb      	lsls	r3, r1, #31
 8028f60:	d412      	bmi.n	8028f88 <sinf_poly+0x2a>
 8028f62:	ee21 5b00 	vmul.f64	d5, d1, d0
 8028f66:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8028f6a:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8028f6e:	eea6 7b01 	vfma.f64	d7, d6, d1
 8028f72:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8028f76:	ee21 1b05 	vmul.f64	d1, d1, d5
 8028f7a:	eea6 0b05 	vfma.f64	d0, d6, d5
 8028f7e:	eea7 0b01 	vfma.f64	d0, d7, d1
 8028f82:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8028f86:	4770      	bx	lr
 8028f88:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8028f8c:	ee21 5b01 	vmul.f64	d5, d1, d1
 8028f90:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8028f94:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8028f98:	eea1 7b06 	vfma.f64	d7, d1, d6
 8028f9c:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8028fa0:	eea1 0b06 	vfma.f64	d0, d1, d6
 8028fa4:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8028fa8:	ee21 1b05 	vmul.f64	d1, d1, d5
 8028fac:	eea5 0b06 	vfma.f64	d0, d5, d6
 8028fb0:	e7e5      	b.n	8028f7e <sinf_poly+0x20>
 8028fb2:	0000      	movs	r0, r0
 8028fb4:	0000      	movs	r0, r0
	...

08028fb8 <sinf>:
 8028fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028fba:	ee10 4a10 	vmov	r4, s0
 8028fbe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8028fc2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8028fc6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8028fca:	eef0 7a40 	vmov.f32	s15, s0
 8028fce:	d218      	bcs.n	8029002 <sinf+0x4a>
 8028fd0:	ee26 1b06 	vmul.f64	d1, d6, d6
 8028fd4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8028fd8:	d20a      	bcs.n	8028ff0 <sinf+0x38>
 8028fda:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8028fde:	d103      	bne.n	8028fe8 <sinf+0x30>
 8028fe0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8028fe4:	ed8d 1a01 	vstr	s2, [sp, #4]
 8028fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8028fec:	b003      	add	sp, #12
 8028fee:	bd30      	pop	{r4, r5, pc}
 8028ff0:	483b      	ldr	r0, [pc, #236]	@ (80290e0 <sinf+0x128>)
 8028ff2:	eeb0 0b46 	vmov.f64	d0, d6
 8028ff6:	2100      	movs	r1, #0
 8028ff8:	b003      	add	sp, #12
 8028ffa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028ffe:	f7ff bfae 	b.w	8028f5e <sinf_poly>
 8029002:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029006:	4293      	cmp	r3, r2
 8029008:	d824      	bhi.n	8029054 <sinf+0x9c>
 802900a:	4b35      	ldr	r3, [pc, #212]	@ (80290e0 <sinf+0x128>)
 802900c:	ed93 7b08 	vldr	d7, [r3, #32]
 8029010:	ee26 7b07 	vmul.f64	d7, d6, d7
 8029014:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8029018:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802901c:	ee17 1a90 	vmov	r1, s15
 8029020:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8029024:	1609      	asrs	r1, r1, #24
 8029026:	ee07 1a90 	vmov	s15, r1
 802902a:	f001 0203 	and.w	r2, r1, #3
 802902e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029032:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8029036:	ed92 0b00 	vldr	d0, [r2]
 802903a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802903e:	f011 0f02 	tst.w	r1, #2
 8029042:	eea5 6b47 	vfms.f64	d6, d5, d7
 8029046:	bf08      	it	eq
 8029048:	4618      	moveq	r0, r3
 802904a:	ee26 1b06 	vmul.f64	d1, d6, d6
 802904e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8029052:	e7d1      	b.n	8028ff8 <sinf+0x40>
 8029054:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8029058:	d237      	bcs.n	80290ca <sinf+0x112>
 802905a:	4922      	ldr	r1, [pc, #136]	@ (80290e4 <sinf+0x12c>)
 802905c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8029060:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029064:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029068:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802906c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8029070:	6a10      	ldr	r0, [r2, #32]
 8029072:	6912      	ldr	r2, [r2, #16]
 8029074:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029078:	40ab      	lsls	r3, r5
 802907a:	fba0 5003 	umull	r5, r0, r0, r3
 802907e:	4359      	muls	r1, r3
 8029080:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029084:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029088:	0f9d      	lsrs	r5, r3, #30
 802908a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802908e:	1ac9      	subs	r1, r1, r3
 8029090:	f7d7 fb04 	bl	800069c <__aeabi_l2d>
 8029094:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029098:	4b11      	ldr	r3, [pc, #68]	@ (80290e0 <sinf+0x128>)
 802909a:	f004 0203 	and.w	r2, r4, #3
 802909e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80290a2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80290d8 <sinf+0x120>
 80290a6:	ed92 0b00 	vldr	d0, [r2]
 80290aa:	ec41 0b17 	vmov	d7, r0, r1
 80290ae:	f014 0f02 	tst.w	r4, #2
 80290b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80290b6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80290ba:	4629      	mov	r1, r5
 80290bc:	bf08      	it	eq
 80290be:	4618      	moveq	r0, r3
 80290c0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80290c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80290c8:	e796      	b.n	8028ff8 <sinf+0x40>
 80290ca:	b003      	add	sp, #12
 80290cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80290d0:	f000 b8e4 	b.w	802929c <__math_invalidf>
 80290d4:	f3af 8000 	nop.w
 80290d8:	54442d18 	.word	0x54442d18
 80290dc:	3c1921fb 	.word	0x3c1921fb
 80290e0:	0802c928 	.word	0x0802c928
 80290e4:	0802c8c8 	.word	0x0802c8c8

080290e8 <sinf_poly>:
 80290e8:	07cb      	lsls	r3, r1, #31
 80290ea:	d412      	bmi.n	8029112 <sinf_poly+0x2a>
 80290ec:	ee21 5b00 	vmul.f64	d5, d1, d0
 80290f0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80290f4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80290f8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80290fc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8029100:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029104:	eea6 0b05 	vfma.f64	d0, d6, d5
 8029108:	eea7 0b01 	vfma.f64	d0, d7, d1
 802910c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029110:	4770      	bx	lr
 8029112:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8029116:	ee21 5b01 	vmul.f64	d5, d1, d1
 802911a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802911e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8029122:	eea1 7b06 	vfma.f64	d7, d1, d6
 8029126:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802912a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802912e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8029132:	ee21 1b05 	vmul.f64	d1, d1, d5
 8029136:	eea5 0b06 	vfma.f64	d0, d5, d6
 802913a:	e7e5      	b.n	8029108 <sinf_poly+0x20>
 802913c:	0000      	movs	r0, r0
	...

08029140 <cosf>:
 8029140:	b538      	push	{r3, r4, r5, lr}
 8029142:	ee10 4a10 	vmov	r4, s0
 8029146:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802914a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802914e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8029152:	d21f      	bcs.n	8029194 <cosf+0x54>
 8029154:	ee27 7b07 	vmul.f64	d7, d7, d7
 8029158:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802915c:	f0c0 8082 	bcc.w	8029264 <cosf+0x124>
 8029160:	ee27 4b07 	vmul.f64	d4, d7, d7
 8029164:	4b44      	ldr	r3, [pc, #272]	@ (8029278 <cosf+0x138>)
 8029166:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802916a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802916e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8029172:	eea7 6b05 	vfma.f64	d6, d7, d5
 8029176:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 802917a:	eea7 0b05 	vfma.f64	d0, d7, d5
 802917e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8029182:	ee27 7b04 	vmul.f64	d7, d7, d4
 8029186:	eea4 0b05 	vfma.f64	d0, d4, d5
 802918a:	eea6 0b07 	vfma.f64	d0, d6, d7
 802918e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8029192:	bd38      	pop	{r3, r4, r5, pc}
 8029194:	f240 422e 	movw	r2, #1070	@ 0x42e
 8029198:	4293      	cmp	r3, r2
 802919a:	d829      	bhi.n	80291f0 <cosf+0xb0>
 802919c:	4b36      	ldr	r3, [pc, #216]	@ (8029278 <cosf+0x138>)
 802919e:	ed93 6b08 	vldr	d6, [r3, #32]
 80291a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80291a6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80291aa:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80291ae:	ee16 1a90 	vmov	r1, s13
 80291b2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80291b6:	1609      	asrs	r1, r1, #24
 80291b8:	ee06 1a90 	vmov	s13, r1
 80291bc:	f001 0203 	and.w	r2, r1, #3
 80291c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80291c4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80291c8:	ed92 0b00 	vldr	d0, [r2]
 80291cc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80291d0:	f011 0f02 	tst.w	r1, #2
 80291d4:	f081 0101 	eor.w	r1, r1, #1
 80291d8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80291dc:	bf08      	it	eq
 80291de:	4618      	moveq	r0, r3
 80291e0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80291e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80291e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80291ec:	f7ff bf7c 	b.w	80290e8 <sinf_poly>
 80291f0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80291f4:	d232      	bcs.n	802925c <cosf+0x11c>
 80291f6:	4921      	ldr	r1, [pc, #132]	@ (802927c <cosf+0x13c>)
 80291f8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80291fc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8029200:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8029204:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8029208:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802920c:	6a10      	ldr	r0, [r2, #32]
 802920e:	6912      	ldr	r2, [r2, #16]
 8029210:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8029214:	40ab      	lsls	r3, r5
 8029216:	fba0 5003 	umull	r5, r0, r0, r3
 802921a:	4359      	muls	r1, r3
 802921c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8029220:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8029224:	0f9d      	lsrs	r5, r3, #30
 8029226:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802922a:	1ac9      	subs	r1, r1, r3
 802922c:	f7d7 fa36 	bl	800069c <__aeabi_l2d>
 8029230:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8029234:	4b10      	ldr	r3, [pc, #64]	@ (8029278 <cosf+0x138>)
 8029236:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8029270 <cosf+0x130>
 802923a:	ec41 0b17 	vmov	d7, r0, r1
 802923e:	f004 0203 	and.w	r2, r4, #3
 8029242:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8029246:	ed92 0b00 	vldr	d0, [r2]
 802924a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802924e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8029252:	f014 0f02 	tst.w	r4, #2
 8029256:	f085 0101 	eor.w	r1, r5, #1
 802925a:	e7bf      	b.n	80291dc <cosf+0x9c>
 802925c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029260:	f000 b81c 	b.w	802929c <__math_invalidf>
 8029264:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8029268:	e793      	b.n	8029192 <cosf+0x52>
 802926a:	bf00      	nop
 802926c:	f3af 8000 	nop.w
 8029270:	54442d18 	.word	0x54442d18
 8029274:	3c1921fb 	.word	0x3c1921fb
 8029278:	0802c928 	.word	0x0802c928
 802927c:	0802c8c8 	.word	0x0802c8c8

08029280 <with_errnof>:
 8029280:	b510      	push	{r4, lr}
 8029282:	ed2d 8b02 	vpush	{d8}
 8029286:	eeb0 8a40 	vmov.f32	s16, s0
 802928a:	4604      	mov	r4, r0
 802928c:	f000 fb36 	bl	80298fc <__errno>
 8029290:	eeb0 0a48 	vmov.f32	s0, s16
 8029294:	ecbd 8b02 	vpop	{d8}
 8029298:	6004      	str	r4, [r0, #0]
 802929a:	bd10      	pop	{r4, pc}

0802929c <__math_invalidf>:
 802929c:	eef0 7a40 	vmov.f32	s15, s0
 80292a0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80292a4:	eef4 7a67 	vcmp.f32	s15, s15
 80292a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80292ac:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80292b0:	d602      	bvs.n	80292b8 <__math_invalidf+0x1c>
 80292b2:	2021      	movs	r0, #33	@ 0x21
 80292b4:	f7ff bfe4 	b.w	8029280 <with_errnof>
 80292b8:	4770      	bx	lr

080292ba <abort>:
 80292ba:	b508      	push	{r3, lr}
 80292bc:	2006      	movs	r0, #6
 80292be:	f000 fa4d 	bl	802975c <raise>
 80292c2:	2001      	movs	r0, #1
 80292c4:	f7d9 f842 	bl	800234c <_exit>

080292c8 <__assert_func>:
 80292c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80292ca:	4614      	mov	r4, r2
 80292cc:	461a      	mov	r2, r3
 80292ce:	4b09      	ldr	r3, [pc, #36]	@ (80292f4 <__assert_func+0x2c>)
 80292d0:	681b      	ldr	r3, [r3, #0]
 80292d2:	4605      	mov	r5, r0
 80292d4:	68d8      	ldr	r0, [r3, #12]
 80292d6:	b14c      	cbz	r4, 80292ec <__assert_func+0x24>
 80292d8:	4b07      	ldr	r3, [pc, #28]	@ (80292f8 <__assert_func+0x30>)
 80292da:	9100      	str	r1, [sp, #0]
 80292dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80292e0:	4906      	ldr	r1, [pc, #24]	@ (80292fc <__assert_func+0x34>)
 80292e2:	462b      	mov	r3, r5
 80292e4:	f000 f984 	bl	80295f0 <fiprintf>
 80292e8:	f7ff ffe7 	bl	80292ba <abort>
 80292ec:	4b04      	ldr	r3, [pc, #16]	@ (8029300 <__assert_func+0x38>)
 80292ee:	461c      	mov	r4, r3
 80292f0:	e7f3      	b.n	80292da <__assert_func+0x12>
 80292f2:	bf00      	nop
 80292f4:	240000ac 	.word	0x240000ac
 80292f8:	0802b93c 	.word	0x0802b93c
 80292fc:	0802b949 	.word	0x0802b949
 8029300:	0802b977 	.word	0x0802b977

08029304 <atexit>:
 8029304:	2300      	movs	r3, #0
 8029306:	4601      	mov	r1, r0
 8029308:	461a      	mov	r2, r3
 802930a:	4618      	mov	r0, r3
 802930c:	f000 bb2e 	b.w	802996c <__register_exitproc>

08029310 <malloc>:
 8029310:	4b02      	ldr	r3, [pc, #8]	@ (802931c <malloc+0xc>)
 8029312:	4601      	mov	r1, r0
 8029314:	6818      	ldr	r0, [r3, #0]
 8029316:	f000 b82d 	b.w	8029374 <_malloc_r>
 802931a:	bf00      	nop
 802931c:	240000ac 	.word	0x240000ac

08029320 <free>:
 8029320:	4b02      	ldr	r3, [pc, #8]	@ (802932c <free+0xc>)
 8029322:	4601      	mov	r1, r0
 8029324:	6818      	ldr	r0, [r3, #0]
 8029326:	f000 bb7d 	b.w	8029a24 <_free_r>
 802932a:	bf00      	nop
 802932c:	240000ac 	.word	0x240000ac

08029330 <sbrk_aligned>:
 8029330:	b570      	push	{r4, r5, r6, lr}
 8029332:	4e0f      	ldr	r6, [pc, #60]	@ (8029370 <sbrk_aligned+0x40>)
 8029334:	460c      	mov	r4, r1
 8029336:	6831      	ldr	r1, [r6, #0]
 8029338:	4605      	mov	r5, r0
 802933a:	b911      	cbnz	r1, 8029342 <sbrk_aligned+0x12>
 802933c:	f000 fabc 	bl	80298b8 <_sbrk_r>
 8029340:	6030      	str	r0, [r6, #0]
 8029342:	4621      	mov	r1, r4
 8029344:	4628      	mov	r0, r5
 8029346:	f000 fab7 	bl	80298b8 <_sbrk_r>
 802934a:	1c43      	adds	r3, r0, #1
 802934c:	d103      	bne.n	8029356 <sbrk_aligned+0x26>
 802934e:	f04f 34ff 	mov.w	r4, #4294967295
 8029352:	4620      	mov	r0, r4
 8029354:	bd70      	pop	{r4, r5, r6, pc}
 8029356:	1cc4      	adds	r4, r0, #3
 8029358:	f024 0403 	bic.w	r4, r4, #3
 802935c:	42a0      	cmp	r0, r4
 802935e:	d0f8      	beq.n	8029352 <sbrk_aligned+0x22>
 8029360:	1a21      	subs	r1, r4, r0
 8029362:	4628      	mov	r0, r5
 8029364:	f000 faa8 	bl	80298b8 <_sbrk_r>
 8029368:	3001      	adds	r0, #1
 802936a:	d1f2      	bne.n	8029352 <sbrk_aligned+0x22>
 802936c:	e7ef      	b.n	802934e <sbrk_aligned+0x1e>
 802936e:	bf00      	nop
 8029370:	24007054 	.word	0x24007054

08029374 <_malloc_r>:
 8029374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029378:	1ccd      	adds	r5, r1, #3
 802937a:	f025 0503 	bic.w	r5, r5, #3
 802937e:	3508      	adds	r5, #8
 8029380:	2d0c      	cmp	r5, #12
 8029382:	bf38      	it	cc
 8029384:	250c      	movcc	r5, #12
 8029386:	2d00      	cmp	r5, #0
 8029388:	4606      	mov	r6, r0
 802938a:	db01      	blt.n	8029390 <_malloc_r+0x1c>
 802938c:	42a9      	cmp	r1, r5
 802938e:	d904      	bls.n	802939a <_malloc_r+0x26>
 8029390:	230c      	movs	r3, #12
 8029392:	6033      	str	r3, [r6, #0]
 8029394:	2000      	movs	r0, #0
 8029396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802939a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8029470 <_malloc_r+0xfc>
 802939e:	f000 f869 	bl	8029474 <__malloc_lock>
 80293a2:	f8d8 3000 	ldr.w	r3, [r8]
 80293a6:	461c      	mov	r4, r3
 80293a8:	bb44      	cbnz	r4, 80293fc <_malloc_r+0x88>
 80293aa:	4629      	mov	r1, r5
 80293ac:	4630      	mov	r0, r6
 80293ae:	f7ff ffbf 	bl	8029330 <sbrk_aligned>
 80293b2:	1c43      	adds	r3, r0, #1
 80293b4:	4604      	mov	r4, r0
 80293b6:	d158      	bne.n	802946a <_malloc_r+0xf6>
 80293b8:	f8d8 4000 	ldr.w	r4, [r8]
 80293bc:	4627      	mov	r7, r4
 80293be:	2f00      	cmp	r7, #0
 80293c0:	d143      	bne.n	802944a <_malloc_r+0xd6>
 80293c2:	2c00      	cmp	r4, #0
 80293c4:	d04b      	beq.n	802945e <_malloc_r+0xea>
 80293c6:	6823      	ldr	r3, [r4, #0]
 80293c8:	4639      	mov	r1, r7
 80293ca:	4630      	mov	r0, r6
 80293cc:	eb04 0903 	add.w	r9, r4, r3
 80293d0:	f000 fa72 	bl	80298b8 <_sbrk_r>
 80293d4:	4581      	cmp	r9, r0
 80293d6:	d142      	bne.n	802945e <_malloc_r+0xea>
 80293d8:	6821      	ldr	r1, [r4, #0]
 80293da:	1a6d      	subs	r5, r5, r1
 80293dc:	4629      	mov	r1, r5
 80293de:	4630      	mov	r0, r6
 80293e0:	f7ff ffa6 	bl	8029330 <sbrk_aligned>
 80293e4:	3001      	adds	r0, #1
 80293e6:	d03a      	beq.n	802945e <_malloc_r+0xea>
 80293e8:	6823      	ldr	r3, [r4, #0]
 80293ea:	442b      	add	r3, r5
 80293ec:	6023      	str	r3, [r4, #0]
 80293ee:	f8d8 3000 	ldr.w	r3, [r8]
 80293f2:	685a      	ldr	r2, [r3, #4]
 80293f4:	bb62      	cbnz	r2, 8029450 <_malloc_r+0xdc>
 80293f6:	f8c8 7000 	str.w	r7, [r8]
 80293fa:	e00f      	b.n	802941c <_malloc_r+0xa8>
 80293fc:	6822      	ldr	r2, [r4, #0]
 80293fe:	1b52      	subs	r2, r2, r5
 8029400:	d420      	bmi.n	8029444 <_malloc_r+0xd0>
 8029402:	2a0b      	cmp	r2, #11
 8029404:	d917      	bls.n	8029436 <_malloc_r+0xc2>
 8029406:	1961      	adds	r1, r4, r5
 8029408:	42a3      	cmp	r3, r4
 802940a:	6025      	str	r5, [r4, #0]
 802940c:	bf18      	it	ne
 802940e:	6059      	strne	r1, [r3, #4]
 8029410:	6863      	ldr	r3, [r4, #4]
 8029412:	bf08      	it	eq
 8029414:	f8c8 1000 	streq.w	r1, [r8]
 8029418:	5162      	str	r2, [r4, r5]
 802941a:	604b      	str	r3, [r1, #4]
 802941c:	4630      	mov	r0, r6
 802941e:	f000 f82f 	bl	8029480 <__malloc_unlock>
 8029422:	f104 000b 	add.w	r0, r4, #11
 8029426:	1d23      	adds	r3, r4, #4
 8029428:	f020 0007 	bic.w	r0, r0, #7
 802942c:	1ac2      	subs	r2, r0, r3
 802942e:	bf1c      	itt	ne
 8029430:	1a1b      	subne	r3, r3, r0
 8029432:	50a3      	strne	r3, [r4, r2]
 8029434:	e7af      	b.n	8029396 <_malloc_r+0x22>
 8029436:	6862      	ldr	r2, [r4, #4]
 8029438:	42a3      	cmp	r3, r4
 802943a:	bf0c      	ite	eq
 802943c:	f8c8 2000 	streq.w	r2, [r8]
 8029440:	605a      	strne	r2, [r3, #4]
 8029442:	e7eb      	b.n	802941c <_malloc_r+0xa8>
 8029444:	4623      	mov	r3, r4
 8029446:	6864      	ldr	r4, [r4, #4]
 8029448:	e7ae      	b.n	80293a8 <_malloc_r+0x34>
 802944a:	463c      	mov	r4, r7
 802944c:	687f      	ldr	r7, [r7, #4]
 802944e:	e7b6      	b.n	80293be <_malloc_r+0x4a>
 8029450:	461a      	mov	r2, r3
 8029452:	685b      	ldr	r3, [r3, #4]
 8029454:	42a3      	cmp	r3, r4
 8029456:	d1fb      	bne.n	8029450 <_malloc_r+0xdc>
 8029458:	2300      	movs	r3, #0
 802945a:	6053      	str	r3, [r2, #4]
 802945c:	e7de      	b.n	802941c <_malloc_r+0xa8>
 802945e:	230c      	movs	r3, #12
 8029460:	6033      	str	r3, [r6, #0]
 8029462:	4630      	mov	r0, r6
 8029464:	f000 f80c 	bl	8029480 <__malloc_unlock>
 8029468:	e794      	b.n	8029394 <_malloc_r+0x20>
 802946a:	6005      	str	r5, [r0, #0]
 802946c:	e7d6      	b.n	802941c <_malloc_r+0xa8>
 802946e:	bf00      	nop
 8029470:	24007058 	.word	0x24007058

08029474 <__malloc_lock>:
 8029474:	4801      	ldr	r0, [pc, #4]	@ (802947c <__malloc_lock+0x8>)
 8029476:	f7d9 badb 	b.w	8002a30 <__retarget_lock_acquire_recursive>
 802947a:	bf00      	nop
 802947c:	24000640 	.word	0x24000640

08029480 <__malloc_unlock>:
 8029480:	4801      	ldr	r0, [pc, #4]	@ (8029488 <__malloc_unlock+0x8>)
 8029482:	f7d9 baea 	b.w	8002a5a <__retarget_lock_release_recursive>
 8029486:	bf00      	nop
 8029488:	24000640 	.word	0x24000640

0802948c <__cxa_atexit>:
 802948c:	b510      	push	{r4, lr}
 802948e:	4604      	mov	r4, r0
 8029490:	4804      	ldr	r0, [pc, #16]	@ (80294a4 <__cxa_atexit+0x18>)
 8029492:	4613      	mov	r3, r2
 8029494:	b120      	cbz	r0, 80294a0 <__cxa_atexit+0x14>
 8029496:	460a      	mov	r2, r1
 8029498:	2002      	movs	r0, #2
 802949a:	4621      	mov	r1, r4
 802949c:	f000 fa66 	bl	802996c <__register_exitproc>
 80294a0:	bd10      	pop	{r4, pc}
 80294a2:	bf00      	nop
 80294a4:	0802996d 	.word	0x0802996d

080294a8 <std>:
 80294a8:	2300      	movs	r3, #0
 80294aa:	b510      	push	{r4, lr}
 80294ac:	4604      	mov	r4, r0
 80294ae:	e9c0 3300 	strd	r3, r3, [r0]
 80294b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80294b6:	6083      	str	r3, [r0, #8]
 80294b8:	8181      	strh	r1, [r0, #12]
 80294ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80294bc:	81c2      	strh	r2, [r0, #14]
 80294be:	6183      	str	r3, [r0, #24]
 80294c0:	4619      	mov	r1, r3
 80294c2:	2208      	movs	r2, #8
 80294c4:	305c      	adds	r0, #92	@ 0x5c
 80294c6:	f000 f918 	bl	80296fa <memset>
 80294ca:	4b0d      	ldr	r3, [pc, #52]	@ (8029500 <std+0x58>)
 80294cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80294ce:	4b0d      	ldr	r3, [pc, #52]	@ (8029504 <std+0x5c>)
 80294d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80294d2:	4b0d      	ldr	r3, [pc, #52]	@ (8029508 <std+0x60>)
 80294d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80294d6:	4b0d      	ldr	r3, [pc, #52]	@ (802950c <std+0x64>)
 80294d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80294da:	4b0d      	ldr	r3, [pc, #52]	@ (8029510 <std+0x68>)
 80294dc:	6224      	str	r4, [r4, #32]
 80294de:	429c      	cmp	r4, r3
 80294e0:	d006      	beq.n	80294f0 <std+0x48>
 80294e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80294e6:	4294      	cmp	r4, r2
 80294e8:	d002      	beq.n	80294f0 <std+0x48>
 80294ea:	33d0      	adds	r3, #208	@ 0xd0
 80294ec:	429c      	cmp	r4, r3
 80294ee:	d105      	bne.n	80294fc <std+0x54>
 80294f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80294f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80294f8:	f7d9 ba73 	b.w	80029e2 <__retarget_lock_init_recursive>
 80294fc:	bd10      	pop	{r4, pc}
 80294fe:	bf00      	nop
 8029500:	08029675 	.word	0x08029675
 8029504:	08029697 	.word	0x08029697
 8029508:	080296cf 	.word	0x080296cf
 802950c:	080296f3 	.word	0x080296f3
 8029510:	2400705c 	.word	0x2400705c

08029514 <stdio_exit_handler>:
 8029514:	4a02      	ldr	r2, [pc, #8]	@ (8029520 <stdio_exit_handler+0xc>)
 8029516:	4903      	ldr	r1, [pc, #12]	@ (8029524 <stdio_exit_handler+0x10>)
 8029518:	4803      	ldr	r0, [pc, #12]	@ (8029528 <stdio_exit_handler+0x14>)
 802951a:	f000 b87b 	b.w	8029614 <_fwalk_sglue>
 802951e:	bf00      	nop
 8029520:	240000a0 	.word	0x240000a0
 8029524:	0802a15d 	.word	0x0802a15d
 8029528:	240000b0 	.word	0x240000b0

0802952c <cleanup_stdio>:
 802952c:	6841      	ldr	r1, [r0, #4]
 802952e:	4b0c      	ldr	r3, [pc, #48]	@ (8029560 <cleanup_stdio+0x34>)
 8029530:	4299      	cmp	r1, r3
 8029532:	b510      	push	{r4, lr}
 8029534:	4604      	mov	r4, r0
 8029536:	d001      	beq.n	802953c <cleanup_stdio+0x10>
 8029538:	f000 fe10 	bl	802a15c <_fflush_r>
 802953c:	68a1      	ldr	r1, [r4, #8]
 802953e:	4b09      	ldr	r3, [pc, #36]	@ (8029564 <cleanup_stdio+0x38>)
 8029540:	4299      	cmp	r1, r3
 8029542:	d002      	beq.n	802954a <cleanup_stdio+0x1e>
 8029544:	4620      	mov	r0, r4
 8029546:	f000 fe09 	bl	802a15c <_fflush_r>
 802954a:	68e1      	ldr	r1, [r4, #12]
 802954c:	4b06      	ldr	r3, [pc, #24]	@ (8029568 <cleanup_stdio+0x3c>)
 802954e:	4299      	cmp	r1, r3
 8029550:	d004      	beq.n	802955c <cleanup_stdio+0x30>
 8029552:	4620      	mov	r0, r4
 8029554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029558:	f000 be00 	b.w	802a15c <_fflush_r>
 802955c:	bd10      	pop	{r4, pc}
 802955e:	bf00      	nop
 8029560:	2400705c 	.word	0x2400705c
 8029564:	240070c4 	.word	0x240070c4
 8029568:	2400712c 	.word	0x2400712c

0802956c <global_stdio_init.part.0>:
 802956c:	b510      	push	{r4, lr}
 802956e:	4b0b      	ldr	r3, [pc, #44]	@ (802959c <global_stdio_init.part.0+0x30>)
 8029570:	4c0b      	ldr	r4, [pc, #44]	@ (80295a0 <global_stdio_init.part.0+0x34>)
 8029572:	4a0c      	ldr	r2, [pc, #48]	@ (80295a4 <global_stdio_init.part.0+0x38>)
 8029574:	601a      	str	r2, [r3, #0]
 8029576:	4620      	mov	r0, r4
 8029578:	2200      	movs	r2, #0
 802957a:	2104      	movs	r1, #4
 802957c:	f7ff ff94 	bl	80294a8 <std>
 8029580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8029584:	2201      	movs	r2, #1
 8029586:	2109      	movs	r1, #9
 8029588:	f7ff ff8e 	bl	80294a8 <std>
 802958c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8029590:	2202      	movs	r2, #2
 8029592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029596:	2112      	movs	r1, #18
 8029598:	f7ff bf86 	b.w	80294a8 <std>
 802959c:	24007194 	.word	0x24007194
 80295a0:	2400705c 	.word	0x2400705c
 80295a4:	08029515 	.word	0x08029515

080295a8 <__sfp_lock_acquire>:
 80295a8:	4801      	ldr	r0, [pc, #4]	@ (80295b0 <__sfp_lock_acquire+0x8>)
 80295aa:	f7d9 ba41 	b.w	8002a30 <__retarget_lock_acquire_recursive>
 80295ae:	bf00      	nop
 80295b0:	24000628 	.word	0x24000628

080295b4 <__sfp_lock_release>:
 80295b4:	4801      	ldr	r0, [pc, #4]	@ (80295bc <__sfp_lock_release+0x8>)
 80295b6:	f7d9 ba50 	b.w	8002a5a <__retarget_lock_release_recursive>
 80295ba:	bf00      	nop
 80295bc:	24000628 	.word	0x24000628

080295c0 <__sinit>:
 80295c0:	b510      	push	{r4, lr}
 80295c2:	4604      	mov	r4, r0
 80295c4:	f7ff fff0 	bl	80295a8 <__sfp_lock_acquire>
 80295c8:	6a23      	ldr	r3, [r4, #32]
 80295ca:	b11b      	cbz	r3, 80295d4 <__sinit+0x14>
 80295cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80295d0:	f7ff bff0 	b.w	80295b4 <__sfp_lock_release>
 80295d4:	4b04      	ldr	r3, [pc, #16]	@ (80295e8 <__sinit+0x28>)
 80295d6:	6223      	str	r3, [r4, #32]
 80295d8:	4b04      	ldr	r3, [pc, #16]	@ (80295ec <__sinit+0x2c>)
 80295da:	681b      	ldr	r3, [r3, #0]
 80295dc:	2b00      	cmp	r3, #0
 80295de:	d1f5      	bne.n	80295cc <__sinit+0xc>
 80295e0:	f7ff ffc4 	bl	802956c <global_stdio_init.part.0>
 80295e4:	e7f2      	b.n	80295cc <__sinit+0xc>
 80295e6:	bf00      	nop
 80295e8:	0802952d 	.word	0x0802952d
 80295ec:	24007194 	.word	0x24007194

080295f0 <fiprintf>:
 80295f0:	b40e      	push	{r1, r2, r3}
 80295f2:	b503      	push	{r0, r1, lr}
 80295f4:	4601      	mov	r1, r0
 80295f6:	ab03      	add	r3, sp, #12
 80295f8:	4805      	ldr	r0, [pc, #20]	@ (8029610 <fiprintf+0x20>)
 80295fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80295fe:	6800      	ldr	r0, [r0, #0]
 8029600:	9301      	str	r3, [sp, #4]
 8029602:	f000 fa83 	bl	8029b0c <_vfiprintf_r>
 8029606:	b002      	add	sp, #8
 8029608:	f85d eb04 	ldr.w	lr, [sp], #4
 802960c:	b003      	add	sp, #12
 802960e:	4770      	bx	lr
 8029610:	240000ac 	.word	0x240000ac

08029614 <_fwalk_sglue>:
 8029614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029618:	4607      	mov	r7, r0
 802961a:	4688      	mov	r8, r1
 802961c:	4614      	mov	r4, r2
 802961e:	2600      	movs	r6, #0
 8029620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029624:	f1b9 0901 	subs.w	r9, r9, #1
 8029628:	d505      	bpl.n	8029636 <_fwalk_sglue+0x22>
 802962a:	6824      	ldr	r4, [r4, #0]
 802962c:	2c00      	cmp	r4, #0
 802962e:	d1f7      	bne.n	8029620 <_fwalk_sglue+0xc>
 8029630:	4630      	mov	r0, r6
 8029632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029636:	89ab      	ldrh	r3, [r5, #12]
 8029638:	2b01      	cmp	r3, #1
 802963a:	d907      	bls.n	802964c <_fwalk_sglue+0x38>
 802963c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029640:	3301      	adds	r3, #1
 8029642:	d003      	beq.n	802964c <_fwalk_sglue+0x38>
 8029644:	4629      	mov	r1, r5
 8029646:	4638      	mov	r0, r7
 8029648:	47c0      	blx	r8
 802964a:	4306      	orrs	r6, r0
 802964c:	3568      	adds	r5, #104	@ 0x68
 802964e:	e7e9      	b.n	8029624 <_fwalk_sglue+0x10>

08029650 <iprintf>:
 8029650:	b40f      	push	{r0, r1, r2, r3}
 8029652:	b507      	push	{r0, r1, r2, lr}
 8029654:	4906      	ldr	r1, [pc, #24]	@ (8029670 <iprintf+0x20>)
 8029656:	ab04      	add	r3, sp, #16
 8029658:	6808      	ldr	r0, [r1, #0]
 802965a:	f853 2b04 	ldr.w	r2, [r3], #4
 802965e:	6881      	ldr	r1, [r0, #8]
 8029660:	9301      	str	r3, [sp, #4]
 8029662:	f000 fa53 	bl	8029b0c <_vfiprintf_r>
 8029666:	b003      	add	sp, #12
 8029668:	f85d eb04 	ldr.w	lr, [sp], #4
 802966c:	b004      	add	sp, #16
 802966e:	4770      	bx	lr
 8029670:	240000ac 	.word	0x240000ac

08029674 <__sread>:
 8029674:	b510      	push	{r4, lr}
 8029676:	460c      	mov	r4, r1
 8029678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802967c:	f000 f8f6 	bl	802986c <_read_r>
 8029680:	2800      	cmp	r0, #0
 8029682:	bfab      	itete	ge
 8029684:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8029686:	89a3      	ldrhlt	r3, [r4, #12]
 8029688:	181b      	addge	r3, r3, r0
 802968a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802968e:	bfac      	ite	ge
 8029690:	6563      	strge	r3, [r4, #84]	@ 0x54
 8029692:	81a3      	strhlt	r3, [r4, #12]
 8029694:	bd10      	pop	{r4, pc}

08029696 <__swrite>:
 8029696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802969a:	461f      	mov	r7, r3
 802969c:	898b      	ldrh	r3, [r1, #12]
 802969e:	05db      	lsls	r3, r3, #23
 80296a0:	4605      	mov	r5, r0
 80296a2:	460c      	mov	r4, r1
 80296a4:	4616      	mov	r6, r2
 80296a6:	d505      	bpl.n	80296b4 <__swrite+0x1e>
 80296a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80296ac:	2302      	movs	r3, #2
 80296ae:	2200      	movs	r2, #0
 80296b0:	f000 f8ca 	bl	8029848 <_lseek_r>
 80296b4:	89a3      	ldrh	r3, [r4, #12]
 80296b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80296ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80296be:	81a3      	strh	r3, [r4, #12]
 80296c0:	4632      	mov	r2, r6
 80296c2:	463b      	mov	r3, r7
 80296c4:	4628      	mov	r0, r5
 80296c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80296ca:	f000 b905 	b.w	80298d8 <_write_r>

080296ce <__sseek>:
 80296ce:	b510      	push	{r4, lr}
 80296d0:	460c      	mov	r4, r1
 80296d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80296d6:	f000 f8b7 	bl	8029848 <_lseek_r>
 80296da:	1c43      	adds	r3, r0, #1
 80296dc:	89a3      	ldrh	r3, [r4, #12]
 80296de:	bf15      	itete	ne
 80296e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80296e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80296e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80296ea:	81a3      	strheq	r3, [r4, #12]
 80296ec:	bf18      	it	ne
 80296ee:	81a3      	strhne	r3, [r4, #12]
 80296f0:	bd10      	pop	{r4, pc}

080296f2 <__sclose>:
 80296f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80296f6:	f000 b839 	b.w	802976c <_close_r>

080296fa <memset>:
 80296fa:	4402      	add	r2, r0
 80296fc:	4603      	mov	r3, r0
 80296fe:	4293      	cmp	r3, r2
 8029700:	d100      	bne.n	8029704 <memset+0xa>
 8029702:	4770      	bx	lr
 8029704:	f803 1b01 	strb.w	r1, [r3], #1
 8029708:	e7f9      	b.n	80296fe <memset+0x4>

0802970a <_raise_r>:
 802970a:	291f      	cmp	r1, #31
 802970c:	b538      	push	{r3, r4, r5, lr}
 802970e:	4605      	mov	r5, r0
 8029710:	460c      	mov	r4, r1
 8029712:	d904      	bls.n	802971e <_raise_r+0x14>
 8029714:	2316      	movs	r3, #22
 8029716:	6003      	str	r3, [r0, #0]
 8029718:	f04f 30ff 	mov.w	r0, #4294967295
 802971c:	bd38      	pop	{r3, r4, r5, pc}
 802971e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8029720:	b112      	cbz	r2, 8029728 <_raise_r+0x1e>
 8029722:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029726:	b94b      	cbnz	r3, 802973c <_raise_r+0x32>
 8029728:	4628      	mov	r0, r5
 802972a:	f000 f8c3 	bl	80298b4 <_getpid_r>
 802972e:	4622      	mov	r2, r4
 8029730:	4601      	mov	r1, r0
 8029732:	4628      	mov	r0, r5
 8029734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029738:	f000 b8aa 	b.w	8029890 <_kill_r>
 802973c:	2b01      	cmp	r3, #1
 802973e:	d00a      	beq.n	8029756 <_raise_r+0x4c>
 8029740:	1c59      	adds	r1, r3, #1
 8029742:	d103      	bne.n	802974c <_raise_r+0x42>
 8029744:	2316      	movs	r3, #22
 8029746:	6003      	str	r3, [r0, #0]
 8029748:	2001      	movs	r0, #1
 802974a:	e7e7      	b.n	802971c <_raise_r+0x12>
 802974c:	2100      	movs	r1, #0
 802974e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8029752:	4620      	mov	r0, r4
 8029754:	4798      	blx	r3
 8029756:	2000      	movs	r0, #0
 8029758:	e7e0      	b.n	802971c <_raise_r+0x12>
	...

0802975c <raise>:
 802975c:	4b02      	ldr	r3, [pc, #8]	@ (8029768 <raise+0xc>)
 802975e:	4601      	mov	r1, r0
 8029760:	6818      	ldr	r0, [r3, #0]
 8029762:	f7ff bfd2 	b.w	802970a <_raise_r>
 8029766:	bf00      	nop
 8029768:	240000ac 	.word	0x240000ac

0802976c <_close_r>:
 802976c:	b538      	push	{r3, r4, r5, lr}
 802976e:	4d06      	ldr	r5, [pc, #24]	@ (8029788 <_close_r+0x1c>)
 8029770:	2300      	movs	r3, #0
 8029772:	4604      	mov	r4, r0
 8029774:	4608      	mov	r0, r1
 8029776:	602b      	str	r3, [r5, #0]
 8029778:	f7d8 fe2c 	bl	80023d4 <_close>
 802977c:	1c43      	adds	r3, r0, #1
 802977e:	d102      	bne.n	8029786 <_close_r+0x1a>
 8029780:	682b      	ldr	r3, [r5, #0]
 8029782:	b103      	cbz	r3, 8029786 <_close_r+0x1a>
 8029784:	6023      	str	r3, [r4, #0]
 8029786:	bd38      	pop	{r3, r4, r5, pc}
 8029788:	24007198 	.word	0x24007198

0802978c <_reclaim_reent>:
 802978c:	4b2d      	ldr	r3, [pc, #180]	@ (8029844 <_reclaim_reent+0xb8>)
 802978e:	681b      	ldr	r3, [r3, #0]
 8029790:	4283      	cmp	r3, r0
 8029792:	b570      	push	{r4, r5, r6, lr}
 8029794:	4604      	mov	r4, r0
 8029796:	d053      	beq.n	8029840 <_reclaim_reent+0xb4>
 8029798:	69c3      	ldr	r3, [r0, #28]
 802979a:	b31b      	cbz	r3, 80297e4 <_reclaim_reent+0x58>
 802979c:	68db      	ldr	r3, [r3, #12]
 802979e:	b163      	cbz	r3, 80297ba <_reclaim_reent+0x2e>
 80297a0:	2500      	movs	r5, #0
 80297a2:	69e3      	ldr	r3, [r4, #28]
 80297a4:	68db      	ldr	r3, [r3, #12]
 80297a6:	5959      	ldr	r1, [r3, r5]
 80297a8:	b9b1      	cbnz	r1, 80297d8 <_reclaim_reent+0x4c>
 80297aa:	3504      	adds	r5, #4
 80297ac:	2d80      	cmp	r5, #128	@ 0x80
 80297ae:	d1f8      	bne.n	80297a2 <_reclaim_reent+0x16>
 80297b0:	69e3      	ldr	r3, [r4, #28]
 80297b2:	4620      	mov	r0, r4
 80297b4:	68d9      	ldr	r1, [r3, #12]
 80297b6:	f000 f935 	bl	8029a24 <_free_r>
 80297ba:	69e3      	ldr	r3, [r4, #28]
 80297bc:	6819      	ldr	r1, [r3, #0]
 80297be:	b111      	cbz	r1, 80297c6 <_reclaim_reent+0x3a>
 80297c0:	4620      	mov	r0, r4
 80297c2:	f000 f92f 	bl	8029a24 <_free_r>
 80297c6:	69e3      	ldr	r3, [r4, #28]
 80297c8:	689d      	ldr	r5, [r3, #8]
 80297ca:	b15d      	cbz	r5, 80297e4 <_reclaim_reent+0x58>
 80297cc:	4629      	mov	r1, r5
 80297ce:	4620      	mov	r0, r4
 80297d0:	682d      	ldr	r5, [r5, #0]
 80297d2:	f000 f927 	bl	8029a24 <_free_r>
 80297d6:	e7f8      	b.n	80297ca <_reclaim_reent+0x3e>
 80297d8:	680e      	ldr	r6, [r1, #0]
 80297da:	4620      	mov	r0, r4
 80297dc:	f000 f922 	bl	8029a24 <_free_r>
 80297e0:	4631      	mov	r1, r6
 80297e2:	e7e1      	b.n	80297a8 <_reclaim_reent+0x1c>
 80297e4:	6961      	ldr	r1, [r4, #20]
 80297e6:	b111      	cbz	r1, 80297ee <_reclaim_reent+0x62>
 80297e8:	4620      	mov	r0, r4
 80297ea:	f000 f91b 	bl	8029a24 <_free_r>
 80297ee:	69e1      	ldr	r1, [r4, #28]
 80297f0:	b111      	cbz	r1, 80297f8 <_reclaim_reent+0x6c>
 80297f2:	4620      	mov	r0, r4
 80297f4:	f000 f916 	bl	8029a24 <_free_r>
 80297f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80297fa:	b111      	cbz	r1, 8029802 <_reclaim_reent+0x76>
 80297fc:	4620      	mov	r0, r4
 80297fe:	f000 f911 	bl	8029a24 <_free_r>
 8029802:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029804:	b111      	cbz	r1, 802980c <_reclaim_reent+0x80>
 8029806:	4620      	mov	r0, r4
 8029808:	f000 f90c 	bl	8029a24 <_free_r>
 802980c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802980e:	b111      	cbz	r1, 8029816 <_reclaim_reent+0x8a>
 8029810:	4620      	mov	r0, r4
 8029812:	f000 f907 	bl	8029a24 <_free_r>
 8029816:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8029818:	b111      	cbz	r1, 8029820 <_reclaim_reent+0x94>
 802981a:	4620      	mov	r0, r4
 802981c:	f000 f902 	bl	8029a24 <_free_r>
 8029820:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8029822:	b111      	cbz	r1, 802982a <_reclaim_reent+0x9e>
 8029824:	4620      	mov	r0, r4
 8029826:	f000 f8fd 	bl	8029a24 <_free_r>
 802982a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802982c:	b111      	cbz	r1, 8029834 <_reclaim_reent+0xa8>
 802982e:	4620      	mov	r0, r4
 8029830:	f000 f8f8 	bl	8029a24 <_free_r>
 8029834:	6a23      	ldr	r3, [r4, #32]
 8029836:	b11b      	cbz	r3, 8029840 <_reclaim_reent+0xb4>
 8029838:	4620      	mov	r0, r4
 802983a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802983e:	4718      	bx	r3
 8029840:	bd70      	pop	{r4, r5, r6, pc}
 8029842:	bf00      	nop
 8029844:	240000ac 	.word	0x240000ac

08029848 <_lseek_r>:
 8029848:	b538      	push	{r3, r4, r5, lr}
 802984a:	4d07      	ldr	r5, [pc, #28]	@ (8029868 <_lseek_r+0x20>)
 802984c:	4604      	mov	r4, r0
 802984e:	4608      	mov	r0, r1
 8029850:	4611      	mov	r1, r2
 8029852:	2200      	movs	r2, #0
 8029854:	602a      	str	r2, [r5, #0]
 8029856:	461a      	mov	r2, r3
 8029858:	f7d8 fde3 	bl	8002422 <_lseek>
 802985c:	1c43      	adds	r3, r0, #1
 802985e:	d102      	bne.n	8029866 <_lseek_r+0x1e>
 8029860:	682b      	ldr	r3, [r5, #0]
 8029862:	b103      	cbz	r3, 8029866 <_lseek_r+0x1e>
 8029864:	6023      	str	r3, [r4, #0]
 8029866:	bd38      	pop	{r3, r4, r5, pc}
 8029868:	24007198 	.word	0x24007198

0802986c <_read_r>:
 802986c:	b538      	push	{r3, r4, r5, lr}
 802986e:	4d07      	ldr	r5, [pc, #28]	@ (802988c <_read_r+0x20>)
 8029870:	4604      	mov	r4, r0
 8029872:	4608      	mov	r0, r1
 8029874:	4611      	mov	r1, r2
 8029876:	2200      	movs	r2, #0
 8029878:	602a      	str	r2, [r5, #0]
 802987a:	461a      	mov	r2, r3
 802987c:	f7d8 fd71 	bl	8002362 <_read>
 8029880:	1c43      	adds	r3, r0, #1
 8029882:	d102      	bne.n	802988a <_read_r+0x1e>
 8029884:	682b      	ldr	r3, [r5, #0]
 8029886:	b103      	cbz	r3, 802988a <_read_r+0x1e>
 8029888:	6023      	str	r3, [r4, #0]
 802988a:	bd38      	pop	{r3, r4, r5, pc}
 802988c:	24007198 	.word	0x24007198

08029890 <_kill_r>:
 8029890:	b538      	push	{r3, r4, r5, lr}
 8029892:	4d07      	ldr	r5, [pc, #28]	@ (80298b0 <_kill_r+0x20>)
 8029894:	2300      	movs	r3, #0
 8029896:	4604      	mov	r4, r0
 8029898:	4608      	mov	r0, r1
 802989a:	4611      	mov	r1, r2
 802989c:	602b      	str	r3, [r5, #0]
 802989e:	f7d8 fd45 	bl	800232c <_kill>
 80298a2:	1c43      	adds	r3, r0, #1
 80298a4:	d102      	bne.n	80298ac <_kill_r+0x1c>
 80298a6:	682b      	ldr	r3, [r5, #0]
 80298a8:	b103      	cbz	r3, 80298ac <_kill_r+0x1c>
 80298aa:	6023      	str	r3, [r4, #0]
 80298ac:	bd38      	pop	{r3, r4, r5, pc}
 80298ae:	bf00      	nop
 80298b0:	24007198 	.word	0x24007198

080298b4 <_getpid_r>:
 80298b4:	f7d8 bd32 	b.w	800231c <_getpid>

080298b8 <_sbrk_r>:
 80298b8:	b538      	push	{r3, r4, r5, lr}
 80298ba:	4d06      	ldr	r5, [pc, #24]	@ (80298d4 <_sbrk_r+0x1c>)
 80298bc:	2300      	movs	r3, #0
 80298be:	4604      	mov	r4, r0
 80298c0:	4608      	mov	r0, r1
 80298c2:	602b      	str	r3, [r5, #0]
 80298c4:	f7d8 fdba 	bl	800243c <_sbrk>
 80298c8:	1c43      	adds	r3, r0, #1
 80298ca:	d102      	bne.n	80298d2 <_sbrk_r+0x1a>
 80298cc:	682b      	ldr	r3, [r5, #0]
 80298ce:	b103      	cbz	r3, 80298d2 <_sbrk_r+0x1a>
 80298d0:	6023      	str	r3, [r4, #0]
 80298d2:	bd38      	pop	{r3, r4, r5, pc}
 80298d4:	24007198 	.word	0x24007198

080298d8 <_write_r>:
 80298d8:	b538      	push	{r3, r4, r5, lr}
 80298da:	4d07      	ldr	r5, [pc, #28]	@ (80298f8 <_write_r+0x20>)
 80298dc:	4604      	mov	r4, r0
 80298de:	4608      	mov	r0, r1
 80298e0:	4611      	mov	r1, r2
 80298e2:	2200      	movs	r2, #0
 80298e4:	602a      	str	r2, [r5, #0]
 80298e6:	461a      	mov	r2, r3
 80298e8:	f7d8 fd58 	bl	800239c <_write>
 80298ec:	1c43      	adds	r3, r0, #1
 80298ee:	d102      	bne.n	80298f6 <_write_r+0x1e>
 80298f0:	682b      	ldr	r3, [r5, #0]
 80298f2:	b103      	cbz	r3, 80298f6 <_write_r+0x1e>
 80298f4:	6023      	str	r3, [r4, #0]
 80298f6:	bd38      	pop	{r3, r4, r5, pc}
 80298f8:	24007198 	.word	0x24007198

080298fc <__errno>:
 80298fc:	4b01      	ldr	r3, [pc, #4]	@ (8029904 <__errno+0x8>)
 80298fe:	6818      	ldr	r0, [r3, #0]
 8029900:	4770      	bx	lr
 8029902:	bf00      	nop
 8029904:	240000ac 	.word	0x240000ac

08029908 <__libc_init_array>:
 8029908:	b570      	push	{r4, r5, r6, lr}
 802990a:	4d0d      	ldr	r5, [pc, #52]	@ (8029940 <__libc_init_array+0x38>)
 802990c:	4c0d      	ldr	r4, [pc, #52]	@ (8029944 <__libc_init_array+0x3c>)
 802990e:	1b64      	subs	r4, r4, r5
 8029910:	10a4      	asrs	r4, r4, #2
 8029912:	2600      	movs	r6, #0
 8029914:	42a6      	cmp	r6, r4
 8029916:	d109      	bne.n	802992c <__libc_init_array+0x24>
 8029918:	4d0b      	ldr	r5, [pc, #44]	@ (8029948 <__libc_init_array+0x40>)
 802991a:	4c0c      	ldr	r4, [pc, #48]	@ (802994c <__libc_init_array+0x44>)
 802991c:	f000 fd5e 	bl	802a3dc <_init>
 8029920:	1b64      	subs	r4, r4, r5
 8029922:	10a4      	asrs	r4, r4, #2
 8029924:	2600      	movs	r6, #0
 8029926:	42a6      	cmp	r6, r4
 8029928:	d105      	bne.n	8029936 <__libc_init_array+0x2e>
 802992a:	bd70      	pop	{r4, r5, r6, pc}
 802992c:	f855 3b04 	ldr.w	r3, [r5], #4
 8029930:	4798      	blx	r3
 8029932:	3601      	adds	r6, #1
 8029934:	e7ee      	b.n	8029914 <__libc_init_array+0xc>
 8029936:	f855 3b04 	ldr.w	r3, [r5], #4
 802993a:	4798      	blx	r3
 802993c:	3601      	adds	r6, #1
 802993e:	e7f2      	b.n	8029926 <__libc_init_array+0x1e>
 8029940:	0802ca1c 	.word	0x0802ca1c
 8029944:	0802ca1c 	.word	0x0802ca1c
 8029948:	0802ca1c 	.word	0x0802ca1c
 802994c:	0802ca30 	.word	0x0802ca30

08029950 <memcpy>:
 8029950:	440a      	add	r2, r1
 8029952:	4291      	cmp	r1, r2
 8029954:	f100 33ff 	add.w	r3, r0, #4294967295
 8029958:	d100      	bne.n	802995c <memcpy+0xc>
 802995a:	4770      	bx	lr
 802995c:	b510      	push	{r4, lr}
 802995e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029966:	4291      	cmp	r1, r2
 8029968:	d1f9      	bne.n	802995e <memcpy+0xe>
 802996a:	bd10      	pop	{r4, pc}

0802996c <__register_exitproc>:
 802996c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029970:	4d27      	ldr	r5, [pc, #156]	@ (8029a10 <__register_exitproc+0xa4>)
 8029972:	4607      	mov	r7, r0
 8029974:	6828      	ldr	r0, [r5, #0]
 8029976:	4691      	mov	r9, r2
 8029978:	460e      	mov	r6, r1
 802997a:	4698      	mov	r8, r3
 802997c:	f7d9 f858 	bl	8002a30 <__retarget_lock_acquire_recursive>
 8029980:	4a24      	ldr	r2, [pc, #144]	@ (8029a14 <__register_exitproc+0xa8>)
 8029982:	6814      	ldr	r4, [r2, #0]
 8029984:	b93c      	cbnz	r4, 8029996 <__register_exitproc+0x2a>
 8029986:	4b24      	ldr	r3, [pc, #144]	@ (8029a18 <__register_exitproc+0xac>)
 8029988:	6013      	str	r3, [r2, #0]
 802998a:	4a24      	ldr	r2, [pc, #144]	@ (8029a1c <__register_exitproc+0xb0>)
 802998c:	b112      	cbz	r2, 8029994 <__register_exitproc+0x28>
 802998e:	6812      	ldr	r2, [r2, #0]
 8029990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8029994:	4c20      	ldr	r4, [pc, #128]	@ (8029a18 <__register_exitproc+0xac>)
 8029996:	6863      	ldr	r3, [r4, #4]
 8029998:	2b1f      	cmp	r3, #31
 802999a:	dd06      	ble.n	80299aa <__register_exitproc+0x3e>
 802999c:	6828      	ldr	r0, [r5, #0]
 802999e:	f7d9 f85c 	bl	8002a5a <__retarget_lock_release_recursive>
 80299a2:	f04f 30ff 	mov.w	r0, #4294967295
 80299a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80299aa:	b32f      	cbz	r7, 80299f8 <__register_exitproc+0x8c>
 80299ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80299b0:	b968      	cbnz	r0, 80299ce <__register_exitproc+0x62>
 80299b2:	4b1b      	ldr	r3, [pc, #108]	@ (8029a20 <__register_exitproc+0xb4>)
 80299b4:	2b00      	cmp	r3, #0
 80299b6:	d0f1      	beq.n	802999c <__register_exitproc+0x30>
 80299b8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80299bc:	f7ff fca8 	bl	8029310 <malloc>
 80299c0:	2800      	cmp	r0, #0
 80299c2:	d0eb      	beq.n	802999c <__register_exitproc+0x30>
 80299c4:	2300      	movs	r3, #0
 80299c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80299ca:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80299ce:	6863      	ldr	r3, [r4, #4]
 80299d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80299d4:	2201      	movs	r2, #1
 80299d6:	409a      	lsls	r2, r3
 80299d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80299dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80299e0:	4313      	orrs	r3, r2
 80299e2:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80299e6:	2f02      	cmp	r7, #2
 80299e8:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80299ec:	bf02      	ittt	eq
 80299ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80299f2:	4313      	orreq	r3, r2
 80299f4:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80299f8:	6863      	ldr	r3, [r4, #4]
 80299fa:	6828      	ldr	r0, [r5, #0]
 80299fc:	1c5a      	adds	r2, r3, #1
 80299fe:	3302      	adds	r3, #2
 8029a00:	6062      	str	r2, [r4, #4]
 8029a02:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8029a06:	f7d9 f828 	bl	8002a5a <__retarget_lock_release_recursive>
 8029a0a:	2000      	movs	r0, #0
 8029a0c:	e7cb      	b.n	80299a6 <__register_exitproc+0x3a>
 8029a0e:	bf00      	nop
 8029a10:	240000fc 	.word	0x240000fc
 8029a14:	24007228 	.word	0x24007228
 8029a18:	2400719c 	.word	0x2400719c
 8029a1c:	0802ca08 	.word	0x0802ca08
 8029a20:	08029311 	.word	0x08029311

08029a24 <_free_r>:
 8029a24:	b538      	push	{r3, r4, r5, lr}
 8029a26:	4605      	mov	r5, r0
 8029a28:	2900      	cmp	r1, #0
 8029a2a:	d041      	beq.n	8029ab0 <_free_r+0x8c>
 8029a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029a30:	1f0c      	subs	r4, r1, #4
 8029a32:	2b00      	cmp	r3, #0
 8029a34:	bfb8      	it	lt
 8029a36:	18e4      	addlt	r4, r4, r3
 8029a38:	f7ff fd1c 	bl	8029474 <__malloc_lock>
 8029a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8029ab4 <_free_r+0x90>)
 8029a3e:	6813      	ldr	r3, [r2, #0]
 8029a40:	b933      	cbnz	r3, 8029a50 <_free_r+0x2c>
 8029a42:	6063      	str	r3, [r4, #4]
 8029a44:	6014      	str	r4, [r2, #0]
 8029a46:	4628      	mov	r0, r5
 8029a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029a4c:	f7ff bd18 	b.w	8029480 <__malloc_unlock>
 8029a50:	42a3      	cmp	r3, r4
 8029a52:	d908      	bls.n	8029a66 <_free_r+0x42>
 8029a54:	6820      	ldr	r0, [r4, #0]
 8029a56:	1821      	adds	r1, r4, r0
 8029a58:	428b      	cmp	r3, r1
 8029a5a:	bf01      	itttt	eq
 8029a5c:	6819      	ldreq	r1, [r3, #0]
 8029a5e:	685b      	ldreq	r3, [r3, #4]
 8029a60:	1809      	addeq	r1, r1, r0
 8029a62:	6021      	streq	r1, [r4, #0]
 8029a64:	e7ed      	b.n	8029a42 <_free_r+0x1e>
 8029a66:	461a      	mov	r2, r3
 8029a68:	685b      	ldr	r3, [r3, #4]
 8029a6a:	b10b      	cbz	r3, 8029a70 <_free_r+0x4c>
 8029a6c:	42a3      	cmp	r3, r4
 8029a6e:	d9fa      	bls.n	8029a66 <_free_r+0x42>
 8029a70:	6811      	ldr	r1, [r2, #0]
 8029a72:	1850      	adds	r0, r2, r1
 8029a74:	42a0      	cmp	r0, r4
 8029a76:	d10b      	bne.n	8029a90 <_free_r+0x6c>
 8029a78:	6820      	ldr	r0, [r4, #0]
 8029a7a:	4401      	add	r1, r0
 8029a7c:	1850      	adds	r0, r2, r1
 8029a7e:	4283      	cmp	r3, r0
 8029a80:	6011      	str	r1, [r2, #0]
 8029a82:	d1e0      	bne.n	8029a46 <_free_r+0x22>
 8029a84:	6818      	ldr	r0, [r3, #0]
 8029a86:	685b      	ldr	r3, [r3, #4]
 8029a88:	6053      	str	r3, [r2, #4]
 8029a8a:	4408      	add	r0, r1
 8029a8c:	6010      	str	r0, [r2, #0]
 8029a8e:	e7da      	b.n	8029a46 <_free_r+0x22>
 8029a90:	d902      	bls.n	8029a98 <_free_r+0x74>
 8029a92:	230c      	movs	r3, #12
 8029a94:	602b      	str	r3, [r5, #0]
 8029a96:	e7d6      	b.n	8029a46 <_free_r+0x22>
 8029a98:	6820      	ldr	r0, [r4, #0]
 8029a9a:	1821      	adds	r1, r4, r0
 8029a9c:	428b      	cmp	r3, r1
 8029a9e:	bf04      	itt	eq
 8029aa0:	6819      	ldreq	r1, [r3, #0]
 8029aa2:	685b      	ldreq	r3, [r3, #4]
 8029aa4:	6063      	str	r3, [r4, #4]
 8029aa6:	bf04      	itt	eq
 8029aa8:	1809      	addeq	r1, r1, r0
 8029aaa:	6021      	streq	r1, [r4, #0]
 8029aac:	6054      	str	r4, [r2, #4]
 8029aae:	e7ca      	b.n	8029a46 <_free_r+0x22>
 8029ab0:	bd38      	pop	{r3, r4, r5, pc}
 8029ab2:	bf00      	nop
 8029ab4:	24007058 	.word	0x24007058

08029ab8 <__sfputc_r>:
 8029ab8:	6893      	ldr	r3, [r2, #8]
 8029aba:	3b01      	subs	r3, #1
 8029abc:	2b00      	cmp	r3, #0
 8029abe:	b410      	push	{r4}
 8029ac0:	6093      	str	r3, [r2, #8]
 8029ac2:	da08      	bge.n	8029ad6 <__sfputc_r+0x1e>
 8029ac4:	6994      	ldr	r4, [r2, #24]
 8029ac6:	42a3      	cmp	r3, r4
 8029ac8:	db01      	blt.n	8029ace <__sfputc_r+0x16>
 8029aca:	290a      	cmp	r1, #10
 8029acc:	d103      	bne.n	8029ad6 <__sfputc_r+0x1e>
 8029ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029ad2:	f000 bb6b 	b.w	802a1ac <__swbuf_r>
 8029ad6:	6813      	ldr	r3, [r2, #0]
 8029ad8:	1c58      	adds	r0, r3, #1
 8029ada:	6010      	str	r0, [r2, #0]
 8029adc:	7019      	strb	r1, [r3, #0]
 8029ade:	4608      	mov	r0, r1
 8029ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029ae4:	4770      	bx	lr

08029ae6 <__sfputs_r>:
 8029ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029ae8:	4606      	mov	r6, r0
 8029aea:	460f      	mov	r7, r1
 8029aec:	4614      	mov	r4, r2
 8029aee:	18d5      	adds	r5, r2, r3
 8029af0:	42ac      	cmp	r4, r5
 8029af2:	d101      	bne.n	8029af8 <__sfputs_r+0x12>
 8029af4:	2000      	movs	r0, #0
 8029af6:	e007      	b.n	8029b08 <__sfputs_r+0x22>
 8029af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029afc:	463a      	mov	r2, r7
 8029afe:	4630      	mov	r0, r6
 8029b00:	f7ff ffda 	bl	8029ab8 <__sfputc_r>
 8029b04:	1c43      	adds	r3, r0, #1
 8029b06:	d1f3      	bne.n	8029af0 <__sfputs_r+0xa>
 8029b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029b0c <_vfiprintf_r>:
 8029b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b10:	460d      	mov	r5, r1
 8029b12:	b09d      	sub	sp, #116	@ 0x74
 8029b14:	4614      	mov	r4, r2
 8029b16:	4698      	mov	r8, r3
 8029b18:	4606      	mov	r6, r0
 8029b1a:	b118      	cbz	r0, 8029b24 <_vfiprintf_r+0x18>
 8029b1c:	6a03      	ldr	r3, [r0, #32]
 8029b1e:	b90b      	cbnz	r3, 8029b24 <_vfiprintf_r+0x18>
 8029b20:	f7ff fd4e 	bl	80295c0 <__sinit>
 8029b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029b26:	07d9      	lsls	r1, r3, #31
 8029b28:	d405      	bmi.n	8029b36 <_vfiprintf_r+0x2a>
 8029b2a:	89ab      	ldrh	r3, [r5, #12]
 8029b2c:	059a      	lsls	r2, r3, #22
 8029b2e:	d402      	bmi.n	8029b36 <_vfiprintf_r+0x2a>
 8029b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029b32:	f7d8 ff7d 	bl	8002a30 <__retarget_lock_acquire_recursive>
 8029b36:	89ab      	ldrh	r3, [r5, #12]
 8029b38:	071b      	lsls	r3, r3, #28
 8029b3a:	d501      	bpl.n	8029b40 <_vfiprintf_r+0x34>
 8029b3c:	692b      	ldr	r3, [r5, #16]
 8029b3e:	b99b      	cbnz	r3, 8029b68 <_vfiprintf_r+0x5c>
 8029b40:	4629      	mov	r1, r5
 8029b42:	4630      	mov	r0, r6
 8029b44:	f000 fb70 	bl	802a228 <__swsetup_r>
 8029b48:	b170      	cbz	r0, 8029b68 <_vfiprintf_r+0x5c>
 8029b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029b4c:	07dc      	lsls	r4, r3, #31
 8029b4e:	d504      	bpl.n	8029b5a <_vfiprintf_r+0x4e>
 8029b50:	f04f 30ff 	mov.w	r0, #4294967295
 8029b54:	b01d      	add	sp, #116	@ 0x74
 8029b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b5a:	89ab      	ldrh	r3, [r5, #12]
 8029b5c:	0598      	lsls	r0, r3, #22
 8029b5e:	d4f7      	bmi.n	8029b50 <_vfiprintf_r+0x44>
 8029b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029b62:	f7d8 ff7a 	bl	8002a5a <__retarget_lock_release_recursive>
 8029b66:	e7f3      	b.n	8029b50 <_vfiprintf_r+0x44>
 8029b68:	2300      	movs	r3, #0
 8029b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8029b6c:	2320      	movs	r3, #32
 8029b6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8029b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8029b76:	2330      	movs	r3, #48	@ 0x30
 8029b78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8029d28 <_vfiprintf_r+0x21c>
 8029b7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8029b80:	f04f 0901 	mov.w	r9, #1
 8029b84:	4623      	mov	r3, r4
 8029b86:	469a      	mov	sl, r3
 8029b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029b8c:	b10a      	cbz	r2, 8029b92 <_vfiprintf_r+0x86>
 8029b8e:	2a25      	cmp	r2, #37	@ 0x25
 8029b90:	d1f9      	bne.n	8029b86 <_vfiprintf_r+0x7a>
 8029b92:	ebba 0b04 	subs.w	fp, sl, r4
 8029b96:	d00b      	beq.n	8029bb0 <_vfiprintf_r+0xa4>
 8029b98:	465b      	mov	r3, fp
 8029b9a:	4622      	mov	r2, r4
 8029b9c:	4629      	mov	r1, r5
 8029b9e:	4630      	mov	r0, r6
 8029ba0:	f7ff ffa1 	bl	8029ae6 <__sfputs_r>
 8029ba4:	3001      	adds	r0, #1
 8029ba6:	f000 80a7 	beq.w	8029cf8 <_vfiprintf_r+0x1ec>
 8029baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029bac:	445a      	add	r2, fp
 8029bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8029bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8029bb4:	2b00      	cmp	r3, #0
 8029bb6:	f000 809f 	beq.w	8029cf8 <_vfiprintf_r+0x1ec>
 8029bba:	2300      	movs	r3, #0
 8029bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8029bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029bc4:	f10a 0a01 	add.w	sl, sl, #1
 8029bc8:	9304      	str	r3, [sp, #16]
 8029bca:	9307      	str	r3, [sp, #28]
 8029bcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8029bd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8029bd2:	4654      	mov	r4, sl
 8029bd4:	2205      	movs	r2, #5
 8029bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029bda:	4853      	ldr	r0, [pc, #332]	@ (8029d28 <_vfiprintf_r+0x21c>)
 8029bdc:	f7d6 fb80 	bl	80002e0 <memchr>
 8029be0:	9a04      	ldr	r2, [sp, #16]
 8029be2:	b9d8      	cbnz	r0, 8029c1c <_vfiprintf_r+0x110>
 8029be4:	06d1      	lsls	r1, r2, #27
 8029be6:	bf44      	itt	mi
 8029be8:	2320      	movmi	r3, #32
 8029bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029bee:	0713      	lsls	r3, r2, #28
 8029bf0:	bf44      	itt	mi
 8029bf2:	232b      	movmi	r3, #43	@ 0x2b
 8029bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8029bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8029bfe:	d015      	beq.n	8029c2c <_vfiprintf_r+0x120>
 8029c00:	9a07      	ldr	r2, [sp, #28]
 8029c02:	4654      	mov	r4, sl
 8029c04:	2000      	movs	r0, #0
 8029c06:	f04f 0c0a 	mov.w	ip, #10
 8029c0a:	4621      	mov	r1, r4
 8029c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029c10:	3b30      	subs	r3, #48	@ 0x30
 8029c12:	2b09      	cmp	r3, #9
 8029c14:	d94b      	bls.n	8029cae <_vfiprintf_r+0x1a2>
 8029c16:	b1b0      	cbz	r0, 8029c46 <_vfiprintf_r+0x13a>
 8029c18:	9207      	str	r2, [sp, #28]
 8029c1a:	e014      	b.n	8029c46 <_vfiprintf_r+0x13a>
 8029c1c:	eba0 0308 	sub.w	r3, r0, r8
 8029c20:	fa09 f303 	lsl.w	r3, r9, r3
 8029c24:	4313      	orrs	r3, r2
 8029c26:	9304      	str	r3, [sp, #16]
 8029c28:	46a2      	mov	sl, r4
 8029c2a:	e7d2      	b.n	8029bd2 <_vfiprintf_r+0xc6>
 8029c2c:	9b03      	ldr	r3, [sp, #12]
 8029c2e:	1d19      	adds	r1, r3, #4
 8029c30:	681b      	ldr	r3, [r3, #0]
 8029c32:	9103      	str	r1, [sp, #12]
 8029c34:	2b00      	cmp	r3, #0
 8029c36:	bfbb      	ittet	lt
 8029c38:	425b      	neglt	r3, r3
 8029c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8029c3e:	9307      	strge	r3, [sp, #28]
 8029c40:	9307      	strlt	r3, [sp, #28]
 8029c42:	bfb8      	it	lt
 8029c44:	9204      	strlt	r2, [sp, #16]
 8029c46:	7823      	ldrb	r3, [r4, #0]
 8029c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8029c4a:	d10a      	bne.n	8029c62 <_vfiprintf_r+0x156>
 8029c4c:	7863      	ldrb	r3, [r4, #1]
 8029c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8029c50:	d132      	bne.n	8029cb8 <_vfiprintf_r+0x1ac>
 8029c52:	9b03      	ldr	r3, [sp, #12]
 8029c54:	1d1a      	adds	r2, r3, #4
 8029c56:	681b      	ldr	r3, [r3, #0]
 8029c58:	9203      	str	r2, [sp, #12]
 8029c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8029c5e:	3402      	adds	r4, #2
 8029c60:	9305      	str	r3, [sp, #20]
 8029c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8029d38 <_vfiprintf_r+0x22c>
 8029c66:	7821      	ldrb	r1, [r4, #0]
 8029c68:	2203      	movs	r2, #3
 8029c6a:	4650      	mov	r0, sl
 8029c6c:	f7d6 fb38 	bl	80002e0 <memchr>
 8029c70:	b138      	cbz	r0, 8029c82 <_vfiprintf_r+0x176>
 8029c72:	9b04      	ldr	r3, [sp, #16]
 8029c74:	eba0 000a 	sub.w	r0, r0, sl
 8029c78:	2240      	movs	r2, #64	@ 0x40
 8029c7a:	4082      	lsls	r2, r0
 8029c7c:	4313      	orrs	r3, r2
 8029c7e:	3401      	adds	r4, #1
 8029c80:	9304      	str	r3, [sp, #16]
 8029c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029c86:	4829      	ldr	r0, [pc, #164]	@ (8029d2c <_vfiprintf_r+0x220>)
 8029c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8029c8c:	2206      	movs	r2, #6
 8029c8e:	f7d6 fb27 	bl	80002e0 <memchr>
 8029c92:	2800      	cmp	r0, #0
 8029c94:	d03f      	beq.n	8029d16 <_vfiprintf_r+0x20a>
 8029c96:	4b26      	ldr	r3, [pc, #152]	@ (8029d30 <_vfiprintf_r+0x224>)
 8029c98:	bb1b      	cbnz	r3, 8029ce2 <_vfiprintf_r+0x1d6>
 8029c9a:	9b03      	ldr	r3, [sp, #12]
 8029c9c:	3307      	adds	r3, #7
 8029c9e:	f023 0307 	bic.w	r3, r3, #7
 8029ca2:	3308      	adds	r3, #8
 8029ca4:	9303      	str	r3, [sp, #12]
 8029ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029ca8:	443b      	add	r3, r7
 8029caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8029cac:	e76a      	b.n	8029b84 <_vfiprintf_r+0x78>
 8029cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8029cb2:	460c      	mov	r4, r1
 8029cb4:	2001      	movs	r0, #1
 8029cb6:	e7a8      	b.n	8029c0a <_vfiprintf_r+0xfe>
 8029cb8:	2300      	movs	r3, #0
 8029cba:	3401      	adds	r4, #1
 8029cbc:	9305      	str	r3, [sp, #20]
 8029cbe:	4619      	mov	r1, r3
 8029cc0:	f04f 0c0a 	mov.w	ip, #10
 8029cc4:	4620      	mov	r0, r4
 8029cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029cca:	3a30      	subs	r2, #48	@ 0x30
 8029ccc:	2a09      	cmp	r2, #9
 8029cce:	d903      	bls.n	8029cd8 <_vfiprintf_r+0x1cc>
 8029cd0:	2b00      	cmp	r3, #0
 8029cd2:	d0c6      	beq.n	8029c62 <_vfiprintf_r+0x156>
 8029cd4:	9105      	str	r1, [sp, #20]
 8029cd6:	e7c4      	b.n	8029c62 <_vfiprintf_r+0x156>
 8029cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8029cdc:	4604      	mov	r4, r0
 8029cde:	2301      	movs	r3, #1
 8029ce0:	e7f0      	b.n	8029cc4 <_vfiprintf_r+0x1b8>
 8029ce2:	ab03      	add	r3, sp, #12
 8029ce4:	9300      	str	r3, [sp, #0]
 8029ce6:	462a      	mov	r2, r5
 8029ce8:	4b12      	ldr	r3, [pc, #72]	@ (8029d34 <_vfiprintf_r+0x228>)
 8029cea:	a904      	add	r1, sp, #16
 8029cec:	4630      	mov	r0, r6
 8029cee:	f3af 8000 	nop.w
 8029cf2:	4607      	mov	r7, r0
 8029cf4:	1c78      	adds	r0, r7, #1
 8029cf6:	d1d6      	bne.n	8029ca6 <_vfiprintf_r+0x19a>
 8029cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029cfa:	07d9      	lsls	r1, r3, #31
 8029cfc:	d405      	bmi.n	8029d0a <_vfiprintf_r+0x1fe>
 8029cfe:	89ab      	ldrh	r3, [r5, #12]
 8029d00:	059a      	lsls	r2, r3, #22
 8029d02:	d402      	bmi.n	8029d0a <_vfiprintf_r+0x1fe>
 8029d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029d06:	f7d8 fea8 	bl	8002a5a <__retarget_lock_release_recursive>
 8029d0a:	89ab      	ldrh	r3, [r5, #12]
 8029d0c:	065b      	lsls	r3, r3, #25
 8029d0e:	f53f af1f 	bmi.w	8029b50 <_vfiprintf_r+0x44>
 8029d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029d14:	e71e      	b.n	8029b54 <_vfiprintf_r+0x48>
 8029d16:	ab03      	add	r3, sp, #12
 8029d18:	9300      	str	r3, [sp, #0]
 8029d1a:	462a      	mov	r2, r5
 8029d1c:	4b05      	ldr	r3, [pc, #20]	@ (8029d34 <_vfiprintf_r+0x228>)
 8029d1e:	a904      	add	r1, sp, #16
 8029d20:	4630      	mov	r0, r6
 8029d22:	f000 f879 	bl	8029e18 <_printf_i>
 8029d26:	e7e4      	b.n	8029cf2 <_vfiprintf_r+0x1e6>
 8029d28:	0802b978 	.word	0x0802b978
 8029d2c:	0802b982 	.word	0x0802b982
 8029d30:	00000000 	.word	0x00000000
 8029d34:	08029ae7 	.word	0x08029ae7
 8029d38:	0802b97e 	.word	0x0802b97e

08029d3c <_printf_common>:
 8029d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029d40:	4616      	mov	r6, r2
 8029d42:	4698      	mov	r8, r3
 8029d44:	688a      	ldr	r2, [r1, #8]
 8029d46:	690b      	ldr	r3, [r1, #16]
 8029d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8029d4c:	4293      	cmp	r3, r2
 8029d4e:	bfb8      	it	lt
 8029d50:	4613      	movlt	r3, r2
 8029d52:	6033      	str	r3, [r6, #0]
 8029d54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8029d58:	4607      	mov	r7, r0
 8029d5a:	460c      	mov	r4, r1
 8029d5c:	b10a      	cbz	r2, 8029d62 <_printf_common+0x26>
 8029d5e:	3301      	adds	r3, #1
 8029d60:	6033      	str	r3, [r6, #0]
 8029d62:	6823      	ldr	r3, [r4, #0]
 8029d64:	0699      	lsls	r1, r3, #26
 8029d66:	bf42      	ittt	mi
 8029d68:	6833      	ldrmi	r3, [r6, #0]
 8029d6a:	3302      	addmi	r3, #2
 8029d6c:	6033      	strmi	r3, [r6, #0]
 8029d6e:	6825      	ldr	r5, [r4, #0]
 8029d70:	f015 0506 	ands.w	r5, r5, #6
 8029d74:	d106      	bne.n	8029d84 <_printf_common+0x48>
 8029d76:	f104 0a19 	add.w	sl, r4, #25
 8029d7a:	68e3      	ldr	r3, [r4, #12]
 8029d7c:	6832      	ldr	r2, [r6, #0]
 8029d7e:	1a9b      	subs	r3, r3, r2
 8029d80:	42ab      	cmp	r3, r5
 8029d82:	dc26      	bgt.n	8029dd2 <_printf_common+0x96>
 8029d84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8029d88:	6822      	ldr	r2, [r4, #0]
 8029d8a:	3b00      	subs	r3, #0
 8029d8c:	bf18      	it	ne
 8029d8e:	2301      	movne	r3, #1
 8029d90:	0692      	lsls	r2, r2, #26
 8029d92:	d42b      	bmi.n	8029dec <_printf_common+0xb0>
 8029d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8029d98:	4641      	mov	r1, r8
 8029d9a:	4638      	mov	r0, r7
 8029d9c:	47c8      	blx	r9
 8029d9e:	3001      	adds	r0, #1
 8029da0:	d01e      	beq.n	8029de0 <_printf_common+0xa4>
 8029da2:	6823      	ldr	r3, [r4, #0]
 8029da4:	6922      	ldr	r2, [r4, #16]
 8029da6:	f003 0306 	and.w	r3, r3, #6
 8029daa:	2b04      	cmp	r3, #4
 8029dac:	bf02      	ittt	eq
 8029dae:	68e5      	ldreq	r5, [r4, #12]
 8029db0:	6833      	ldreq	r3, [r6, #0]
 8029db2:	1aed      	subeq	r5, r5, r3
 8029db4:	68a3      	ldr	r3, [r4, #8]
 8029db6:	bf0c      	ite	eq
 8029db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029dbc:	2500      	movne	r5, #0
 8029dbe:	4293      	cmp	r3, r2
 8029dc0:	bfc4      	itt	gt
 8029dc2:	1a9b      	subgt	r3, r3, r2
 8029dc4:	18ed      	addgt	r5, r5, r3
 8029dc6:	2600      	movs	r6, #0
 8029dc8:	341a      	adds	r4, #26
 8029dca:	42b5      	cmp	r5, r6
 8029dcc:	d11a      	bne.n	8029e04 <_printf_common+0xc8>
 8029dce:	2000      	movs	r0, #0
 8029dd0:	e008      	b.n	8029de4 <_printf_common+0xa8>
 8029dd2:	2301      	movs	r3, #1
 8029dd4:	4652      	mov	r2, sl
 8029dd6:	4641      	mov	r1, r8
 8029dd8:	4638      	mov	r0, r7
 8029dda:	47c8      	blx	r9
 8029ddc:	3001      	adds	r0, #1
 8029dde:	d103      	bne.n	8029de8 <_printf_common+0xac>
 8029de0:	f04f 30ff 	mov.w	r0, #4294967295
 8029de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029de8:	3501      	adds	r5, #1
 8029dea:	e7c6      	b.n	8029d7a <_printf_common+0x3e>
 8029dec:	18e1      	adds	r1, r4, r3
 8029dee:	1c5a      	adds	r2, r3, #1
 8029df0:	2030      	movs	r0, #48	@ 0x30
 8029df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8029df6:	4422      	add	r2, r4
 8029df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8029dfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8029e00:	3302      	adds	r3, #2
 8029e02:	e7c7      	b.n	8029d94 <_printf_common+0x58>
 8029e04:	2301      	movs	r3, #1
 8029e06:	4622      	mov	r2, r4
 8029e08:	4641      	mov	r1, r8
 8029e0a:	4638      	mov	r0, r7
 8029e0c:	47c8      	blx	r9
 8029e0e:	3001      	adds	r0, #1
 8029e10:	d0e6      	beq.n	8029de0 <_printf_common+0xa4>
 8029e12:	3601      	adds	r6, #1
 8029e14:	e7d9      	b.n	8029dca <_printf_common+0x8e>
	...

08029e18 <_printf_i>:
 8029e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029e1c:	7e0f      	ldrb	r7, [r1, #24]
 8029e1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8029e20:	2f78      	cmp	r7, #120	@ 0x78
 8029e22:	4691      	mov	r9, r2
 8029e24:	4680      	mov	r8, r0
 8029e26:	460c      	mov	r4, r1
 8029e28:	469a      	mov	sl, r3
 8029e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8029e2e:	d807      	bhi.n	8029e40 <_printf_i+0x28>
 8029e30:	2f62      	cmp	r7, #98	@ 0x62
 8029e32:	d80a      	bhi.n	8029e4a <_printf_i+0x32>
 8029e34:	2f00      	cmp	r7, #0
 8029e36:	f000 80d1 	beq.w	8029fdc <_printf_i+0x1c4>
 8029e3a:	2f58      	cmp	r7, #88	@ 0x58
 8029e3c:	f000 80b8 	beq.w	8029fb0 <_printf_i+0x198>
 8029e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8029e48:	e03a      	b.n	8029ec0 <_printf_i+0xa8>
 8029e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8029e4e:	2b15      	cmp	r3, #21
 8029e50:	d8f6      	bhi.n	8029e40 <_printf_i+0x28>
 8029e52:	a101      	add	r1, pc, #4	@ (adr r1, 8029e58 <_printf_i+0x40>)
 8029e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8029e58:	08029eb1 	.word	0x08029eb1
 8029e5c:	08029ec5 	.word	0x08029ec5
 8029e60:	08029e41 	.word	0x08029e41
 8029e64:	08029e41 	.word	0x08029e41
 8029e68:	08029e41 	.word	0x08029e41
 8029e6c:	08029e41 	.word	0x08029e41
 8029e70:	08029ec5 	.word	0x08029ec5
 8029e74:	08029e41 	.word	0x08029e41
 8029e78:	08029e41 	.word	0x08029e41
 8029e7c:	08029e41 	.word	0x08029e41
 8029e80:	08029e41 	.word	0x08029e41
 8029e84:	08029fc3 	.word	0x08029fc3
 8029e88:	08029eef 	.word	0x08029eef
 8029e8c:	08029f7d 	.word	0x08029f7d
 8029e90:	08029e41 	.word	0x08029e41
 8029e94:	08029e41 	.word	0x08029e41
 8029e98:	08029fe5 	.word	0x08029fe5
 8029e9c:	08029e41 	.word	0x08029e41
 8029ea0:	08029eef 	.word	0x08029eef
 8029ea4:	08029e41 	.word	0x08029e41
 8029ea8:	08029e41 	.word	0x08029e41
 8029eac:	08029f85 	.word	0x08029f85
 8029eb0:	6833      	ldr	r3, [r6, #0]
 8029eb2:	1d1a      	adds	r2, r3, #4
 8029eb4:	681b      	ldr	r3, [r3, #0]
 8029eb6:	6032      	str	r2, [r6, #0]
 8029eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8029ec0:	2301      	movs	r3, #1
 8029ec2:	e09c      	b.n	8029ffe <_printf_i+0x1e6>
 8029ec4:	6833      	ldr	r3, [r6, #0]
 8029ec6:	6820      	ldr	r0, [r4, #0]
 8029ec8:	1d19      	adds	r1, r3, #4
 8029eca:	6031      	str	r1, [r6, #0]
 8029ecc:	0606      	lsls	r6, r0, #24
 8029ece:	d501      	bpl.n	8029ed4 <_printf_i+0xbc>
 8029ed0:	681d      	ldr	r5, [r3, #0]
 8029ed2:	e003      	b.n	8029edc <_printf_i+0xc4>
 8029ed4:	0645      	lsls	r5, r0, #25
 8029ed6:	d5fb      	bpl.n	8029ed0 <_printf_i+0xb8>
 8029ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8029edc:	2d00      	cmp	r5, #0
 8029ede:	da03      	bge.n	8029ee8 <_printf_i+0xd0>
 8029ee0:	232d      	movs	r3, #45	@ 0x2d
 8029ee2:	426d      	negs	r5, r5
 8029ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029ee8:	4858      	ldr	r0, [pc, #352]	@ (802a04c <_printf_i+0x234>)
 8029eea:	230a      	movs	r3, #10
 8029eec:	e011      	b.n	8029f12 <_printf_i+0xfa>
 8029eee:	6821      	ldr	r1, [r4, #0]
 8029ef0:	6833      	ldr	r3, [r6, #0]
 8029ef2:	0608      	lsls	r0, r1, #24
 8029ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8029ef8:	d402      	bmi.n	8029f00 <_printf_i+0xe8>
 8029efa:	0649      	lsls	r1, r1, #25
 8029efc:	bf48      	it	mi
 8029efe:	b2ad      	uxthmi	r5, r5
 8029f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8029f02:	4852      	ldr	r0, [pc, #328]	@ (802a04c <_printf_i+0x234>)
 8029f04:	6033      	str	r3, [r6, #0]
 8029f06:	bf14      	ite	ne
 8029f08:	230a      	movne	r3, #10
 8029f0a:	2308      	moveq	r3, #8
 8029f0c:	2100      	movs	r1, #0
 8029f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8029f12:	6866      	ldr	r6, [r4, #4]
 8029f14:	60a6      	str	r6, [r4, #8]
 8029f16:	2e00      	cmp	r6, #0
 8029f18:	db05      	blt.n	8029f26 <_printf_i+0x10e>
 8029f1a:	6821      	ldr	r1, [r4, #0]
 8029f1c:	432e      	orrs	r6, r5
 8029f1e:	f021 0104 	bic.w	r1, r1, #4
 8029f22:	6021      	str	r1, [r4, #0]
 8029f24:	d04b      	beq.n	8029fbe <_printf_i+0x1a6>
 8029f26:	4616      	mov	r6, r2
 8029f28:	fbb5 f1f3 	udiv	r1, r5, r3
 8029f2c:	fb03 5711 	mls	r7, r3, r1, r5
 8029f30:	5dc7      	ldrb	r7, [r0, r7]
 8029f32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8029f36:	462f      	mov	r7, r5
 8029f38:	42bb      	cmp	r3, r7
 8029f3a:	460d      	mov	r5, r1
 8029f3c:	d9f4      	bls.n	8029f28 <_printf_i+0x110>
 8029f3e:	2b08      	cmp	r3, #8
 8029f40:	d10b      	bne.n	8029f5a <_printf_i+0x142>
 8029f42:	6823      	ldr	r3, [r4, #0]
 8029f44:	07df      	lsls	r7, r3, #31
 8029f46:	d508      	bpl.n	8029f5a <_printf_i+0x142>
 8029f48:	6923      	ldr	r3, [r4, #16]
 8029f4a:	6861      	ldr	r1, [r4, #4]
 8029f4c:	4299      	cmp	r1, r3
 8029f4e:	bfde      	ittt	le
 8029f50:	2330      	movle	r3, #48	@ 0x30
 8029f52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8029f56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8029f5a:	1b92      	subs	r2, r2, r6
 8029f5c:	6122      	str	r2, [r4, #16]
 8029f5e:	f8cd a000 	str.w	sl, [sp]
 8029f62:	464b      	mov	r3, r9
 8029f64:	aa03      	add	r2, sp, #12
 8029f66:	4621      	mov	r1, r4
 8029f68:	4640      	mov	r0, r8
 8029f6a:	f7ff fee7 	bl	8029d3c <_printf_common>
 8029f6e:	3001      	adds	r0, #1
 8029f70:	d14a      	bne.n	802a008 <_printf_i+0x1f0>
 8029f72:	f04f 30ff 	mov.w	r0, #4294967295
 8029f76:	b004      	add	sp, #16
 8029f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029f7c:	6823      	ldr	r3, [r4, #0]
 8029f7e:	f043 0320 	orr.w	r3, r3, #32
 8029f82:	6023      	str	r3, [r4, #0]
 8029f84:	4832      	ldr	r0, [pc, #200]	@ (802a050 <_printf_i+0x238>)
 8029f86:	2778      	movs	r7, #120	@ 0x78
 8029f88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8029f8c:	6823      	ldr	r3, [r4, #0]
 8029f8e:	6831      	ldr	r1, [r6, #0]
 8029f90:	061f      	lsls	r7, r3, #24
 8029f92:	f851 5b04 	ldr.w	r5, [r1], #4
 8029f96:	d402      	bmi.n	8029f9e <_printf_i+0x186>
 8029f98:	065f      	lsls	r7, r3, #25
 8029f9a:	bf48      	it	mi
 8029f9c:	b2ad      	uxthmi	r5, r5
 8029f9e:	6031      	str	r1, [r6, #0]
 8029fa0:	07d9      	lsls	r1, r3, #31
 8029fa2:	bf44      	itt	mi
 8029fa4:	f043 0320 	orrmi.w	r3, r3, #32
 8029fa8:	6023      	strmi	r3, [r4, #0]
 8029faa:	b11d      	cbz	r5, 8029fb4 <_printf_i+0x19c>
 8029fac:	2310      	movs	r3, #16
 8029fae:	e7ad      	b.n	8029f0c <_printf_i+0xf4>
 8029fb0:	4826      	ldr	r0, [pc, #152]	@ (802a04c <_printf_i+0x234>)
 8029fb2:	e7e9      	b.n	8029f88 <_printf_i+0x170>
 8029fb4:	6823      	ldr	r3, [r4, #0]
 8029fb6:	f023 0320 	bic.w	r3, r3, #32
 8029fba:	6023      	str	r3, [r4, #0]
 8029fbc:	e7f6      	b.n	8029fac <_printf_i+0x194>
 8029fbe:	4616      	mov	r6, r2
 8029fc0:	e7bd      	b.n	8029f3e <_printf_i+0x126>
 8029fc2:	6833      	ldr	r3, [r6, #0]
 8029fc4:	6825      	ldr	r5, [r4, #0]
 8029fc6:	6961      	ldr	r1, [r4, #20]
 8029fc8:	1d18      	adds	r0, r3, #4
 8029fca:	6030      	str	r0, [r6, #0]
 8029fcc:	062e      	lsls	r6, r5, #24
 8029fce:	681b      	ldr	r3, [r3, #0]
 8029fd0:	d501      	bpl.n	8029fd6 <_printf_i+0x1be>
 8029fd2:	6019      	str	r1, [r3, #0]
 8029fd4:	e002      	b.n	8029fdc <_printf_i+0x1c4>
 8029fd6:	0668      	lsls	r0, r5, #25
 8029fd8:	d5fb      	bpl.n	8029fd2 <_printf_i+0x1ba>
 8029fda:	8019      	strh	r1, [r3, #0]
 8029fdc:	2300      	movs	r3, #0
 8029fde:	6123      	str	r3, [r4, #16]
 8029fe0:	4616      	mov	r6, r2
 8029fe2:	e7bc      	b.n	8029f5e <_printf_i+0x146>
 8029fe4:	6833      	ldr	r3, [r6, #0]
 8029fe6:	1d1a      	adds	r2, r3, #4
 8029fe8:	6032      	str	r2, [r6, #0]
 8029fea:	681e      	ldr	r6, [r3, #0]
 8029fec:	6862      	ldr	r2, [r4, #4]
 8029fee:	2100      	movs	r1, #0
 8029ff0:	4630      	mov	r0, r6
 8029ff2:	f7d6 f975 	bl	80002e0 <memchr>
 8029ff6:	b108      	cbz	r0, 8029ffc <_printf_i+0x1e4>
 8029ff8:	1b80      	subs	r0, r0, r6
 8029ffa:	6060      	str	r0, [r4, #4]
 8029ffc:	6863      	ldr	r3, [r4, #4]
 8029ffe:	6123      	str	r3, [r4, #16]
 802a000:	2300      	movs	r3, #0
 802a002:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a006:	e7aa      	b.n	8029f5e <_printf_i+0x146>
 802a008:	6923      	ldr	r3, [r4, #16]
 802a00a:	4632      	mov	r2, r6
 802a00c:	4649      	mov	r1, r9
 802a00e:	4640      	mov	r0, r8
 802a010:	47d0      	blx	sl
 802a012:	3001      	adds	r0, #1
 802a014:	d0ad      	beq.n	8029f72 <_printf_i+0x15a>
 802a016:	6823      	ldr	r3, [r4, #0]
 802a018:	079b      	lsls	r3, r3, #30
 802a01a:	d413      	bmi.n	802a044 <_printf_i+0x22c>
 802a01c:	68e0      	ldr	r0, [r4, #12]
 802a01e:	9b03      	ldr	r3, [sp, #12]
 802a020:	4298      	cmp	r0, r3
 802a022:	bfb8      	it	lt
 802a024:	4618      	movlt	r0, r3
 802a026:	e7a6      	b.n	8029f76 <_printf_i+0x15e>
 802a028:	2301      	movs	r3, #1
 802a02a:	4632      	mov	r2, r6
 802a02c:	4649      	mov	r1, r9
 802a02e:	4640      	mov	r0, r8
 802a030:	47d0      	blx	sl
 802a032:	3001      	adds	r0, #1
 802a034:	d09d      	beq.n	8029f72 <_printf_i+0x15a>
 802a036:	3501      	adds	r5, #1
 802a038:	68e3      	ldr	r3, [r4, #12]
 802a03a:	9903      	ldr	r1, [sp, #12]
 802a03c:	1a5b      	subs	r3, r3, r1
 802a03e:	42ab      	cmp	r3, r5
 802a040:	dcf2      	bgt.n	802a028 <_printf_i+0x210>
 802a042:	e7eb      	b.n	802a01c <_printf_i+0x204>
 802a044:	2500      	movs	r5, #0
 802a046:	f104 0619 	add.w	r6, r4, #25
 802a04a:	e7f5      	b.n	802a038 <_printf_i+0x220>
 802a04c:	0802b989 	.word	0x0802b989
 802a050:	0802b99a 	.word	0x0802b99a

0802a054 <__sflush_r>:
 802a054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802a058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a05c:	0716      	lsls	r6, r2, #28
 802a05e:	4605      	mov	r5, r0
 802a060:	460c      	mov	r4, r1
 802a062:	d454      	bmi.n	802a10e <__sflush_r+0xba>
 802a064:	684b      	ldr	r3, [r1, #4]
 802a066:	2b00      	cmp	r3, #0
 802a068:	dc02      	bgt.n	802a070 <__sflush_r+0x1c>
 802a06a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802a06c:	2b00      	cmp	r3, #0
 802a06e:	dd48      	ble.n	802a102 <__sflush_r+0xae>
 802a070:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802a072:	2e00      	cmp	r6, #0
 802a074:	d045      	beq.n	802a102 <__sflush_r+0xae>
 802a076:	2300      	movs	r3, #0
 802a078:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802a07c:	682f      	ldr	r7, [r5, #0]
 802a07e:	6a21      	ldr	r1, [r4, #32]
 802a080:	602b      	str	r3, [r5, #0]
 802a082:	d030      	beq.n	802a0e6 <__sflush_r+0x92>
 802a084:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802a086:	89a3      	ldrh	r3, [r4, #12]
 802a088:	0759      	lsls	r1, r3, #29
 802a08a:	d505      	bpl.n	802a098 <__sflush_r+0x44>
 802a08c:	6863      	ldr	r3, [r4, #4]
 802a08e:	1ad2      	subs	r2, r2, r3
 802a090:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802a092:	b10b      	cbz	r3, 802a098 <__sflush_r+0x44>
 802a094:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802a096:	1ad2      	subs	r2, r2, r3
 802a098:	2300      	movs	r3, #0
 802a09a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802a09c:	6a21      	ldr	r1, [r4, #32]
 802a09e:	4628      	mov	r0, r5
 802a0a0:	47b0      	blx	r6
 802a0a2:	1c43      	adds	r3, r0, #1
 802a0a4:	89a3      	ldrh	r3, [r4, #12]
 802a0a6:	d106      	bne.n	802a0b6 <__sflush_r+0x62>
 802a0a8:	6829      	ldr	r1, [r5, #0]
 802a0aa:	291d      	cmp	r1, #29
 802a0ac:	d82b      	bhi.n	802a106 <__sflush_r+0xb2>
 802a0ae:	4a2a      	ldr	r2, [pc, #168]	@ (802a158 <__sflush_r+0x104>)
 802a0b0:	40ca      	lsrs	r2, r1
 802a0b2:	07d6      	lsls	r6, r2, #31
 802a0b4:	d527      	bpl.n	802a106 <__sflush_r+0xb2>
 802a0b6:	2200      	movs	r2, #0
 802a0b8:	6062      	str	r2, [r4, #4]
 802a0ba:	04d9      	lsls	r1, r3, #19
 802a0bc:	6922      	ldr	r2, [r4, #16]
 802a0be:	6022      	str	r2, [r4, #0]
 802a0c0:	d504      	bpl.n	802a0cc <__sflush_r+0x78>
 802a0c2:	1c42      	adds	r2, r0, #1
 802a0c4:	d101      	bne.n	802a0ca <__sflush_r+0x76>
 802a0c6:	682b      	ldr	r3, [r5, #0]
 802a0c8:	b903      	cbnz	r3, 802a0cc <__sflush_r+0x78>
 802a0ca:	6560      	str	r0, [r4, #84]	@ 0x54
 802a0cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a0ce:	602f      	str	r7, [r5, #0]
 802a0d0:	b1b9      	cbz	r1, 802a102 <__sflush_r+0xae>
 802a0d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a0d6:	4299      	cmp	r1, r3
 802a0d8:	d002      	beq.n	802a0e0 <__sflush_r+0x8c>
 802a0da:	4628      	mov	r0, r5
 802a0dc:	f7ff fca2 	bl	8029a24 <_free_r>
 802a0e0:	2300      	movs	r3, #0
 802a0e2:	6363      	str	r3, [r4, #52]	@ 0x34
 802a0e4:	e00d      	b.n	802a102 <__sflush_r+0xae>
 802a0e6:	2301      	movs	r3, #1
 802a0e8:	4628      	mov	r0, r5
 802a0ea:	47b0      	blx	r6
 802a0ec:	4602      	mov	r2, r0
 802a0ee:	1c50      	adds	r0, r2, #1
 802a0f0:	d1c9      	bne.n	802a086 <__sflush_r+0x32>
 802a0f2:	682b      	ldr	r3, [r5, #0]
 802a0f4:	2b00      	cmp	r3, #0
 802a0f6:	d0c6      	beq.n	802a086 <__sflush_r+0x32>
 802a0f8:	2b1d      	cmp	r3, #29
 802a0fa:	d001      	beq.n	802a100 <__sflush_r+0xac>
 802a0fc:	2b16      	cmp	r3, #22
 802a0fe:	d11e      	bne.n	802a13e <__sflush_r+0xea>
 802a100:	602f      	str	r7, [r5, #0]
 802a102:	2000      	movs	r0, #0
 802a104:	e022      	b.n	802a14c <__sflush_r+0xf8>
 802a106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a10a:	b21b      	sxth	r3, r3
 802a10c:	e01b      	b.n	802a146 <__sflush_r+0xf2>
 802a10e:	690f      	ldr	r7, [r1, #16]
 802a110:	2f00      	cmp	r7, #0
 802a112:	d0f6      	beq.n	802a102 <__sflush_r+0xae>
 802a114:	0793      	lsls	r3, r2, #30
 802a116:	680e      	ldr	r6, [r1, #0]
 802a118:	bf08      	it	eq
 802a11a:	694b      	ldreq	r3, [r1, #20]
 802a11c:	600f      	str	r7, [r1, #0]
 802a11e:	bf18      	it	ne
 802a120:	2300      	movne	r3, #0
 802a122:	eba6 0807 	sub.w	r8, r6, r7
 802a126:	608b      	str	r3, [r1, #8]
 802a128:	f1b8 0f00 	cmp.w	r8, #0
 802a12c:	dde9      	ble.n	802a102 <__sflush_r+0xae>
 802a12e:	6a21      	ldr	r1, [r4, #32]
 802a130:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802a132:	4643      	mov	r3, r8
 802a134:	463a      	mov	r2, r7
 802a136:	4628      	mov	r0, r5
 802a138:	47b0      	blx	r6
 802a13a:	2800      	cmp	r0, #0
 802a13c:	dc08      	bgt.n	802a150 <__sflush_r+0xfc>
 802a13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a146:	81a3      	strh	r3, [r4, #12]
 802a148:	f04f 30ff 	mov.w	r0, #4294967295
 802a14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a150:	4407      	add	r7, r0
 802a152:	eba8 0800 	sub.w	r8, r8, r0
 802a156:	e7e7      	b.n	802a128 <__sflush_r+0xd4>
 802a158:	20400001 	.word	0x20400001

0802a15c <_fflush_r>:
 802a15c:	b538      	push	{r3, r4, r5, lr}
 802a15e:	690b      	ldr	r3, [r1, #16]
 802a160:	4605      	mov	r5, r0
 802a162:	460c      	mov	r4, r1
 802a164:	b913      	cbnz	r3, 802a16c <_fflush_r+0x10>
 802a166:	2500      	movs	r5, #0
 802a168:	4628      	mov	r0, r5
 802a16a:	bd38      	pop	{r3, r4, r5, pc}
 802a16c:	b118      	cbz	r0, 802a176 <_fflush_r+0x1a>
 802a16e:	6a03      	ldr	r3, [r0, #32]
 802a170:	b90b      	cbnz	r3, 802a176 <_fflush_r+0x1a>
 802a172:	f7ff fa25 	bl	80295c0 <__sinit>
 802a176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a17a:	2b00      	cmp	r3, #0
 802a17c:	d0f3      	beq.n	802a166 <_fflush_r+0xa>
 802a17e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802a180:	07d0      	lsls	r0, r2, #31
 802a182:	d404      	bmi.n	802a18e <_fflush_r+0x32>
 802a184:	0599      	lsls	r1, r3, #22
 802a186:	d402      	bmi.n	802a18e <_fflush_r+0x32>
 802a188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a18a:	f7d8 fc51 	bl	8002a30 <__retarget_lock_acquire_recursive>
 802a18e:	4628      	mov	r0, r5
 802a190:	4621      	mov	r1, r4
 802a192:	f7ff ff5f 	bl	802a054 <__sflush_r>
 802a196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a198:	07da      	lsls	r2, r3, #31
 802a19a:	4605      	mov	r5, r0
 802a19c:	d4e4      	bmi.n	802a168 <_fflush_r+0xc>
 802a19e:	89a3      	ldrh	r3, [r4, #12]
 802a1a0:	059b      	lsls	r3, r3, #22
 802a1a2:	d4e1      	bmi.n	802a168 <_fflush_r+0xc>
 802a1a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a1a6:	f7d8 fc58 	bl	8002a5a <__retarget_lock_release_recursive>
 802a1aa:	e7dd      	b.n	802a168 <_fflush_r+0xc>

0802a1ac <__swbuf_r>:
 802a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a1ae:	460e      	mov	r6, r1
 802a1b0:	4614      	mov	r4, r2
 802a1b2:	4605      	mov	r5, r0
 802a1b4:	b118      	cbz	r0, 802a1be <__swbuf_r+0x12>
 802a1b6:	6a03      	ldr	r3, [r0, #32]
 802a1b8:	b90b      	cbnz	r3, 802a1be <__swbuf_r+0x12>
 802a1ba:	f7ff fa01 	bl	80295c0 <__sinit>
 802a1be:	69a3      	ldr	r3, [r4, #24]
 802a1c0:	60a3      	str	r3, [r4, #8]
 802a1c2:	89a3      	ldrh	r3, [r4, #12]
 802a1c4:	071a      	lsls	r2, r3, #28
 802a1c6:	d501      	bpl.n	802a1cc <__swbuf_r+0x20>
 802a1c8:	6923      	ldr	r3, [r4, #16]
 802a1ca:	b943      	cbnz	r3, 802a1de <__swbuf_r+0x32>
 802a1cc:	4621      	mov	r1, r4
 802a1ce:	4628      	mov	r0, r5
 802a1d0:	f000 f82a 	bl	802a228 <__swsetup_r>
 802a1d4:	b118      	cbz	r0, 802a1de <__swbuf_r+0x32>
 802a1d6:	f04f 37ff 	mov.w	r7, #4294967295
 802a1da:	4638      	mov	r0, r7
 802a1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a1de:	6823      	ldr	r3, [r4, #0]
 802a1e0:	6922      	ldr	r2, [r4, #16]
 802a1e2:	1a98      	subs	r0, r3, r2
 802a1e4:	6963      	ldr	r3, [r4, #20]
 802a1e6:	b2f6      	uxtb	r6, r6
 802a1e8:	4283      	cmp	r3, r0
 802a1ea:	4637      	mov	r7, r6
 802a1ec:	dc05      	bgt.n	802a1fa <__swbuf_r+0x4e>
 802a1ee:	4621      	mov	r1, r4
 802a1f0:	4628      	mov	r0, r5
 802a1f2:	f7ff ffb3 	bl	802a15c <_fflush_r>
 802a1f6:	2800      	cmp	r0, #0
 802a1f8:	d1ed      	bne.n	802a1d6 <__swbuf_r+0x2a>
 802a1fa:	68a3      	ldr	r3, [r4, #8]
 802a1fc:	3b01      	subs	r3, #1
 802a1fe:	60a3      	str	r3, [r4, #8]
 802a200:	6823      	ldr	r3, [r4, #0]
 802a202:	1c5a      	adds	r2, r3, #1
 802a204:	6022      	str	r2, [r4, #0]
 802a206:	701e      	strb	r6, [r3, #0]
 802a208:	6962      	ldr	r2, [r4, #20]
 802a20a:	1c43      	adds	r3, r0, #1
 802a20c:	429a      	cmp	r2, r3
 802a20e:	d004      	beq.n	802a21a <__swbuf_r+0x6e>
 802a210:	89a3      	ldrh	r3, [r4, #12]
 802a212:	07db      	lsls	r3, r3, #31
 802a214:	d5e1      	bpl.n	802a1da <__swbuf_r+0x2e>
 802a216:	2e0a      	cmp	r6, #10
 802a218:	d1df      	bne.n	802a1da <__swbuf_r+0x2e>
 802a21a:	4621      	mov	r1, r4
 802a21c:	4628      	mov	r0, r5
 802a21e:	f7ff ff9d 	bl	802a15c <_fflush_r>
 802a222:	2800      	cmp	r0, #0
 802a224:	d0d9      	beq.n	802a1da <__swbuf_r+0x2e>
 802a226:	e7d6      	b.n	802a1d6 <__swbuf_r+0x2a>

0802a228 <__swsetup_r>:
 802a228:	b538      	push	{r3, r4, r5, lr}
 802a22a:	4b29      	ldr	r3, [pc, #164]	@ (802a2d0 <__swsetup_r+0xa8>)
 802a22c:	4605      	mov	r5, r0
 802a22e:	6818      	ldr	r0, [r3, #0]
 802a230:	460c      	mov	r4, r1
 802a232:	b118      	cbz	r0, 802a23c <__swsetup_r+0x14>
 802a234:	6a03      	ldr	r3, [r0, #32]
 802a236:	b90b      	cbnz	r3, 802a23c <__swsetup_r+0x14>
 802a238:	f7ff f9c2 	bl	80295c0 <__sinit>
 802a23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a240:	0719      	lsls	r1, r3, #28
 802a242:	d422      	bmi.n	802a28a <__swsetup_r+0x62>
 802a244:	06da      	lsls	r2, r3, #27
 802a246:	d407      	bmi.n	802a258 <__swsetup_r+0x30>
 802a248:	2209      	movs	r2, #9
 802a24a:	602a      	str	r2, [r5, #0]
 802a24c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a250:	81a3      	strh	r3, [r4, #12]
 802a252:	f04f 30ff 	mov.w	r0, #4294967295
 802a256:	e033      	b.n	802a2c0 <__swsetup_r+0x98>
 802a258:	0758      	lsls	r0, r3, #29
 802a25a:	d512      	bpl.n	802a282 <__swsetup_r+0x5a>
 802a25c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a25e:	b141      	cbz	r1, 802a272 <__swsetup_r+0x4a>
 802a260:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a264:	4299      	cmp	r1, r3
 802a266:	d002      	beq.n	802a26e <__swsetup_r+0x46>
 802a268:	4628      	mov	r0, r5
 802a26a:	f7ff fbdb 	bl	8029a24 <_free_r>
 802a26e:	2300      	movs	r3, #0
 802a270:	6363      	str	r3, [r4, #52]	@ 0x34
 802a272:	89a3      	ldrh	r3, [r4, #12]
 802a274:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802a278:	81a3      	strh	r3, [r4, #12]
 802a27a:	2300      	movs	r3, #0
 802a27c:	6063      	str	r3, [r4, #4]
 802a27e:	6923      	ldr	r3, [r4, #16]
 802a280:	6023      	str	r3, [r4, #0]
 802a282:	89a3      	ldrh	r3, [r4, #12]
 802a284:	f043 0308 	orr.w	r3, r3, #8
 802a288:	81a3      	strh	r3, [r4, #12]
 802a28a:	6923      	ldr	r3, [r4, #16]
 802a28c:	b94b      	cbnz	r3, 802a2a2 <__swsetup_r+0x7a>
 802a28e:	89a3      	ldrh	r3, [r4, #12]
 802a290:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802a294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802a298:	d003      	beq.n	802a2a2 <__swsetup_r+0x7a>
 802a29a:	4621      	mov	r1, r4
 802a29c:	4628      	mov	r0, r5
 802a29e:	f000 f83f 	bl	802a320 <__smakebuf_r>
 802a2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a2a6:	f013 0201 	ands.w	r2, r3, #1
 802a2aa:	d00a      	beq.n	802a2c2 <__swsetup_r+0x9a>
 802a2ac:	2200      	movs	r2, #0
 802a2ae:	60a2      	str	r2, [r4, #8]
 802a2b0:	6962      	ldr	r2, [r4, #20]
 802a2b2:	4252      	negs	r2, r2
 802a2b4:	61a2      	str	r2, [r4, #24]
 802a2b6:	6922      	ldr	r2, [r4, #16]
 802a2b8:	b942      	cbnz	r2, 802a2cc <__swsetup_r+0xa4>
 802a2ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802a2be:	d1c5      	bne.n	802a24c <__swsetup_r+0x24>
 802a2c0:	bd38      	pop	{r3, r4, r5, pc}
 802a2c2:	0799      	lsls	r1, r3, #30
 802a2c4:	bf58      	it	pl
 802a2c6:	6962      	ldrpl	r2, [r4, #20]
 802a2c8:	60a2      	str	r2, [r4, #8]
 802a2ca:	e7f4      	b.n	802a2b6 <__swsetup_r+0x8e>
 802a2cc:	2000      	movs	r0, #0
 802a2ce:	e7f7      	b.n	802a2c0 <__swsetup_r+0x98>
 802a2d0:	240000ac 	.word	0x240000ac

0802a2d4 <__swhatbuf_r>:
 802a2d4:	b570      	push	{r4, r5, r6, lr}
 802a2d6:	460c      	mov	r4, r1
 802a2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a2dc:	2900      	cmp	r1, #0
 802a2de:	b096      	sub	sp, #88	@ 0x58
 802a2e0:	4615      	mov	r5, r2
 802a2e2:	461e      	mov	r6, r3
 802a2e4:	da0d      	bge.n	802a302 <__swhatbuf_r+0x2e>
 802a2e6:	89a3      	ldrh	r3, [r4, #12]
 802a2e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802a2ec:	f04f 0100 	mov.w	r1, #0
 802a2f0:	bf14      	ite	ne
 802a2f2:	2340      	movne	r3, #64	@ 0x40
 802a2f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802a2f8:	2000      	movs	r0, #0
 802a2fa:	6031      	str	r1, [r6, #0]
 802a2fc:	602b      	str	r3, [r5, #0]
 802a2fe:	b016      	add	sp, #88	@ 0x58
 802a300:	bd70      	pop	{r4, r5, r6, pc}
 802a302:	466a      	mov	r2, sp
 802a304:	f000 f848 	bl	802a398 <_fstat_r>
 802a308:	2800      	cmp	r0, #0
 802a30a:	dbec      	blt.n	802a2e6 <__swhatbuf_r+0x12>
 802a30c:	9901      	ldr	r1, [sp, #4]
 802a30e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802a312:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802a316:	4259      	negs	r1, r3
 802a318:	4159      	adcs	r1, r3
 802a31a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802a31e:	e7eb      	b.n	802a2f8 <__swhatbuf_r+0x24>

0802a320 <__smakebuf_r>:
 802a320:	898b      	ldrh	r3, [r1, #12]
 802a322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a324:	079d      	lsls	r5, r3, #30
 802a326:	4606      	mov	r6, r0
 802a328:	460c      	mov	r4, r1
 802a32a:	d507      	bpl.n	802a33c <__smakebuf_r+0x1c>
 802a32c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802a330:	6023      	str	r3, [r4, #0]
 802a332:	6123      	str	r3, [r4, #16]
 802a334:	2301      	movs	r3, #1
 802a336:	6163      	str	r3, [r4, #20]
 802a338:	b003      	add	sp, #12
 802a33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a33c:	ab01      	add	r3, sp, #4
 802a33e:	466a      	mov	r2, sp
 802a340:	f7ff ffc8 	bl	802a2d4 <__swhatbuf_r>
 802a344:	9f00      	ldr	r7, [sp, #0]
 802a346:	4605      	mov	r5, r0
 802a348:	4639      	mov	r1, r7
 802a34a:	4630      	mov	r0, r6
 802a34c:	f7ff f812 	bl	8029374 <_malloc_r>
 802a350:	b948      	cbnz	r0, 802a366 <__smakebuf_r+0x46>
 802a352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a356:	059a      	lsls	r2, r3, #22
 802a358:	d4ee      	bmi.n	802a338 <__smakebuf_r+0x18>
 802a35a:	f023 0303 	bic.w	r3, r3, #3
 802a35e:	f043 0302 	orr.w	r3, r3, #2
 802a362:	81a3      	strh	r3, [r4, #12]
 802a364:	e7e2      	b.n	802a32c <__smakebuf_r+0xc>
 802a366:	89a3      	ldrh	r3, [r4, #12]
 802a368:	6020      	str	r0, [r4, #0]
 802a36a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a36e:	81a3      	strh	r3, [r4, #12]
 802a370:	9b01      	ldr	r3, [sp, #4]
 802a372:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802a376:	b15b      	cbz	r3, 802a390 <__smakebuf_r+0x70>
 802a378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a37c:	4630      	mov	r0, r6
 802a37e:	f000 f81d 	bl	802a3bc <_isatty_r>
 802a382:	b128      	cbz	r0, 802a390 <__smakebuf_r+0x70>
 802a384:	89a3      	ldrh	r3, [r4, #12]
 802a386:	f023 0303 	bic.w	r3, r3, #3
 802a38a:	f043 0301 	orr.w	r3, r3, #1
 802a38e:	81a3      	strh	r3, [r4, #12]
 802a390:	89a3      	ldrh	r3, [r4, #12]
 802a392:	431d      	orrs	r5, r3
 802a394:	81a5      	strh	r5, [r4, #12]
 802a396:	e7cf      	b.n	802a338 <__smakebuf_r+0x18>

0802a398 <_fstat_r>:
 802a398:	b538      	push	{r3, r4, r5, lr}
 802a39a:	4d07      	ldr	r5, [pc, #28]	@ (802a3b8 <_fstat_r+0x20>)
 802a39c:	2300      	movs	r3, #0
 802a39e:	4604      	mov	r4, r0
 802a3a0:	4608      	mov	r0, r1
 802a3a2:	4611      	mov	r1, r2
 802a3a4:	602b      	str	r3, [r5, #0]
 802a3a6:	f7d8 f821 	bl	80023ec <_fstat>
 802a3aa:	1c43      	adds	r3, r0, #1
 802a3ac:	d102      	bne.n	802a3b4 <_fstat_r+0x1c>
 802a3ae:	682b      	ldr	r3, [r5, #0]
 802a3b0:	b103      	cbz	r3, 802a3b4 <_fstat_r+0x1c>
 802a3b2:	6023      	str	r3, [r4, #0]
 802a3b4:	bd38      	pop	{r3, r4, r5, pc}
 802a3b6:	bf00      	nop
 802a3b8:	24007198 	.word	0x24007198

0802a3bc <_isatty_r>:
 802a3bc:	b538      	push	{r3, r4, r5, lr}
 802a3be:	4d06      	ldr	r5, [pc, #24]	@ (802a3d8 <_isatty_r+0x1c>)
 802a3c0:	2300      	movs	r3, #0
 802a3c2:	4604      	mov	r4, r0
 802a3c4:	4608      	mov	r0, r1
 802a3c6:	602b      	str	r3, [r5, #0]
 802a3c8:	f7d8 f820 	bl	800240c <_isatty>
 802a3cc:	1c43      	adds	r3, r0, #1
 802a3ce:	d102      	bne.n	802a3d6 <_isatty_r+0x1a>
 802a3d0:	682b      	ldr	r3, [r5, #0]
 802a3d2:	b103      	cbz	r3, 802a3d6 <_isatty_r+0x1a>
 802a3d4:	6023      	str	r3, [r4, #0]
 802a3d6:	bd38      	pop	{r3, r4, r5, pc}
 802a3d8:	24007198 	.word	0x24007198

0802a3dc <_init>:
 802a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a3de:	bf00      	nop
 802a3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a3e2:	bc08      	pop	{r3}
 802a3e4:	469e      	mov	lr, r3
 802a3e6:	4770      	bx	lr

0802a3e8 <_fini>:
 802a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a3ea:	bf00      	nop
 802a3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a3ee:	bc08      	pop	{r3}
 802a3f0:	469e      	mov	lr, r3
 802a3f2:	4770      	bx	lr
