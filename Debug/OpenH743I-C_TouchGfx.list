
OpenH743I-C_TouchGfx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac78  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800af18  0800af18  0000bf18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000916  0800b414  0800b414  0000c414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000008  0800bd2c  0800bd2c  0000cd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800bd34  0800bd34  0000d074  2**0
                  CONTENTS
  6 .ARM          00000008  0800bd34  0800bd34  0000cd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800bd3c  0800bd3c  0000d074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000010  0800bd3c  0800bd3c  0000cd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800bd4c  0800bd4c  0000cd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000074  24000000  0800bd50  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005fc  24000074  0800bdc4  0000d074  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000670  0800bdc4  0000d670  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY
 14 .debug_info   000304a2  00000000  00000000  0000d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006e20  00000000  00000000  0003d544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e98  00000000  00000000  00044368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000176b  00000000  00000000  00046200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003de74  00000000  00000000  0004796b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002bebc  00000000  00000000  000857df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00179a1c  00000000  00000000  000b169b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c2  00000000  00000000  0022b0b7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008a84  00000000  00000000  0022b17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  00233c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800af00 	.word	0x0800af00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800af00 	.word	0x0800af00

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{  
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80006b0:	f000 f906 	bl	80008c0 <BSP_SDRAM_Init>
	BSP_LCD_SelectLayer(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f833 	bl	8000720 <BSP_LCD_SelectLayer>
  /* Clear the LCD Foreground layer */
  BSP_LCD_SetLayerVisible(1, DISABLE);
 80006ba:	2100      	movs	r1, #0
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 f83f 	bl	8000740 <BSP_LCD_SetLayerVisible>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f82c 	bl	8000720 <BSP_LCD_SelectLayer>

  return LCD_OK;
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <BSP_LCD_GetXSize+0x20>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a06      	ldr	r2, [pc, #24]	@ (80006f4 <BSP_LCD_GetXSize+0x24>)
 80006da:	2134      	movs	r1, #52	@ 0x34
 80006dc:	fb01 f303 	mul.w	r3, r1, r3
 80006e0:	4413      	add	r3, r2
 80006e2:	3360      	adds	r3, #96	@ 0x60
 80006e4:	681b      	ldr	r3, [r3, #0]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	24000090 	.word	0x24000090
 80006f4:	240001bc 	.word	0x240001bc

080006f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <BSP_LCD_GetYSize+0x20>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a06      	ldr	r2, [pc, #24]	@ (800071c <BSP_LCD_GetYSize+0x24>)
 8000702:	2134      	movs	r1, #52	@ 0x34
 8000704:	fb01 f303 	mul.w	r3, r1, r3
 8000708:	4413      	add	r3, r2
 800070a:	3364      	adds	r3, #100	@ 0x64
 800070c:	681b      	ldr	r3, [r3, #0]
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	24000090 	.word	0x24000090
 800071c:	240001bc 	.word	0x240001bc

08000720 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000728:	4a04      	ldr	r2, [pc, #16]	@ (800073c <BSP_LCD_SelectLayer+0x1c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6013      	str	r3, [r2, #0]
} 
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	24000090 	.word	0x24000090

08000740 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d112      	bne.n	8000778 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8000752:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <BSP_LCD_SetLayerVisible+0x78>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	01db      	lsls	r3, r3, #7
 800075c:	4413      	add	r3, r2
 800075e:	3384      	adds	r3, #132	@ 0x84
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a15      	ldr	r2, [pc, #84]	@ (80007b8 <BSP_LCD_SetLayerVisible+0x78>)
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	4611      	mov	r1, r2
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	01d2      	lsls	r2, r2, #7
 800076c:	440a      	add	r2, r1
 800076e:	3284      	adds	r2, #132	@ 0x84
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e011      	b.n	800079c <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <BSP_LCD_SetLayerVisible+0x78>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	01db      	lsls	r3, r3, #7
 8000782:	4413      	add	r3, r2
 8000784:	3384      	adds	r3, #132	@ 0x84
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a0b      	ldr	r2, [pc, #44]	@ (80007b8 <BSP_LCD_SetLayerVisible+0x78>)
 800078a:	6812      	ldr	r2, [r2, #0]
 800078c:	4611      	mov	r1, r2
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	01d2      	lsls	r2, r2, #7
 8000792:	440a      	add	r2, r1
 8000794:	3284      	adds	r2, #132	@ 0x84
 8000796:	f023 0301 	bic.w	r3, r3, #1
 800079a:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <BSP_LCD_SetLayerVisible+0x78>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007a2:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <BSP_LCD_SetLayerVisible+0x78>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f042 0201 	orr.w	r2, r2, #1
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
} 
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	240001bc 	.word	0x240001bc

080007bc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	b085      	sub	sp, #20
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <BSP_LCD_Clear+0x48>)
 80007c6:	681c      	ldr	r4, [r3, #0]
 80007c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <BSP_LCD_Clear+0x48>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000808 <BSP_LCD_Clear+0x4c>)
 80007ce:	2134      	movs	r1, #52	@ 0x34
 80007d0:	fb01 f303 	mul.w	r3, r1, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	335c      	adds	r3, #92	@ 0x5c
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	461e      	mov	r6, r3
 80007dc:	f7ff ff78 	bl	80006d0 <BSP_LCD_GetXSize>
 80007e0:	4605      	mov	r5, r0
 80007e2:	f7ff ff89 	bl	80006f8 <BSP_LCD_GetYSize>
 80007e6:	4602      	mov	r2, r0
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	2300      	movs	r3, #0
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	4613      	mov	r3, r2
 80007f2:	462a      	mov	r2, r5
 80007f4:	4631      	mov	r1, r6
 80007f6:	4620      	mov	r0, r4
 80007f8:	f000 f808 	bl	800080c <LL_FillBuffer>
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000804:	24000090 	.word	0x24000090
 8000808:	240001bc 	.word	0x240001bc

0800080c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af02      	add	r7, sp, #8
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800081a:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <LL_FillBuffer+0xa4>)
 800081c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000820:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000822:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <LL_FillBuffer+0xa8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a24      	ldr	r2, [pc, #144]	@ (80008b8 <LL_FillBuffer+0xac>)
 8000828:	2134      	movs	r1, #52	@ 0x34
 800082a:	fb01 f303 	mul.w	r3, r1, r3
 800082e:	4413      	add	r3, r2
 8000830:	3348      	adds	r3, #72	@ 0x48
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b02      	cmp	r3, #2
 8000836:	d111      	bne.n	800085c <LL_FillBuffer+0x50>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_OUTPUT_RGB565;
 8000838:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <LL_FillBuffer+0xa4>)
 800083a:	2202      	movs	r2, #2
 800083c:	609a      	str	r2, [r3, #8]
		ColorIndex = ((ColorIndex & LCD_COLOR_RED)<<8) | ((ColorIndex & LCD_COLOR_GREEN )<<5) | ((ColorIndex & LCD_COLOR_BLUE) << 3);
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	f403 0278 	and.w	r2, r3, #16252928	@ 0xf80000
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	015b      	lsls	r3, r3, #5
 800084a:	f403 437c 	and.w	r3, r3, #64512	@ 0xfc00
 800084e:	431a      	orrs	r2, r3
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	61fb      	str	r3, [r7, #28]
 800085a:	e002      	b.n	8000862 <LL_FillBuffer+0x56>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <LL_FillBuffer+0xa4>)
 800085e:	2201      	movs	r2, #1
 8000860:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000862:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <LL_FillBuffer+0xa4>)
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <LL_FillBuffer+0xa4>)
 800086a:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <LL_FillBuffer+0xb0>)
 800086c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800086e:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <LL_FillBuffer+0xa4>)
 8000870:	f002 f890 	bl	8002994 <HAL_DMA2D_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d115      	bne.n	80008a6 <LL_FillBuffer+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800087a:	68f9      	ldr	r1, [r7, #12]
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <LL_FillBuffer+0xa4>)
 800087e:	f002 fb11 	bl	8002ea4 <HAL_DMA2D_ConfigLayer>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10e      	bne.n	80008a6 <LL_FillBuffer+0x9a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	69f9      	ldr	r1, [r7, #28]
 8000892:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <LL_FillBuffer+0xa4>)
 8000894:	f002 f8e2 	bl	8002a5c <HAL_DMA2D_Start>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <LL_FillBuffer+0x9a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800089e:	210a      	movs	r1, #10
 80008a0:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <LL_FillBuffer+0xa4>)
 80008a2:	f002 f906 	bl	8002ab2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}    
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	240000c8 	.word	0x240000c8
 80008b4:	24000090 	.word	0x24000090
 80008b8:	240001bc 	.word	0x240001bc
 80008bc:	52001000 	.word	0x52001000

080008c0 <BSP_SDRAM_Init>:

/******************************************************************************
function:	SDRAM device configuration
******************************************************************************/
void BSP_SDRAM_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <BSP_SDRAM_Init+0x18>)
 80008c6:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <BSP_SDRAM_Init+0x1c>)
 80008c8:	601a      	str	r2, [r3, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80008ca:	f240 6003 	movw	r0, #1539	@ 0x603
 80008ce:	f000 f807 	bl	80008e0 <BSP_SDRAM_Initialization_sequence>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	24000130 	.word	0x24000130
 80008dc:	52004140 	.word	0x52004140

080008e0 <BSP_SDRAM_Initialization_sequence>:
function:	Programs the SDRAM device.
parameter:
	RefreshCount : SDRAM refresh counter value 
******************************************************************************/
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80008f4:	2208      	movs	r2, #8
 80008f6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000908:	4923      	ldr	r1, [pc, #140]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800090a:	4824      	ldr	r0, [pc, #144]	@ (800099c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800090c:	f006 f8f2 	bl	8006af4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f001 fe0d 	bl	8002530 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000916:	4b20      	ldr	r3, [pc, #128]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000918:	2202      	movs	r2, #2
 800091a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 800091c:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800091e:	2208      	movs	r2, #8
 8000920:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000922:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000924:	2201      	movs	r2, #1
 8000926:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800092e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000932:	4919      	ldr	r1, [pc, #100]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000934:	4819      	ldr	r0, [pc, #100]	@ (800099c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000936:	f006 f8dd 	bl	8006af4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800093c:	2203      	movs	r2, #3
 800093e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000942:	2208      	movs	r2, #8
 8000944:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000948:	2208      	movs	r2, #8
 800094a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000952:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000956:	4910      	ldr	r1, [pc, #64]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000958:	4810      	ldr	r0, [pc, #64]	@ (800099c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800095a:	f006 f8cb 	bl	8006af4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800095e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000962:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000966:	2204      	movs	r2, #4
 8000968:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800096c:	2208      	movs	r2, #8
 800096e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000972:	2201      	movs	r2, #1
 8000974:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4a07      	ldr	r2, [pc, #28]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800097a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800097c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000980:	4905      	ldr	r1, [pc, #20]	@ (8000998 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000982:	4806      	ldr	r0, [pc, #24]	@ (800099c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000984:	f006 f8b6 	bl	8006af4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	4804      	ldr	r0, [pc, #16]	@ (800099c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800098c:	f006 f8e7 	bl	8006b5e <HAL_SDRAM_ProgramRefreshRate>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	24000094 	.word	0x24000094
 800099c:	24000130 	.word	0x24000130

080009a0 <GT811_Init>:
 * @brief  Initialize the GT811 communication bus
 *         from MCU to GT811 : ie I2C channel initialization (if required).
 * @retval None
 */

uint8_t GT811_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b09c      	sub	sp, #112	@ 0x70
 80009a4:	af00      	add	r7, sp, #0
	I2C_Init();
 80009a6:	f000 f875 	bl	8000a94 <I2C_Init>

	/* reset GT811 */
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2140      	movs	r1, #64	@ 0x40
 80009ae:	481a      	ldr	r0, [pc, #104]	@ (8000a18 <GT811_Init+0x78>)
 80009b0:	f002 fd94 	bl	80034dc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80009b4:	20c8      	movs	r0, #200	@ 0xc8
 80009b6:	f001 fdbb 	bl	8002530 <HAL_Delay>
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2140      	movs	r1, #64	@ 0x40
 80009be:	4816      	ldr	r0, [pc, #88]	@ (8000a18 <GT811_Init+0x78>)
 80009c0:	f002 fd8c 	bl	80034dc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80009c4:	20c8      	movs	r0, #200	@ 0xc8
 80009c6:	f001 fdb3 	bl	8002530 <HAL_Delay>

	/* if Version is correct, send the configuration parameters */
	if (GT811_ReadID() == GT811_VERSION_VALUE) {
 80009ca:	f000 f829 	bl	8000a20 <GT811_ReadID>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	f242 0310 	movw	r3, #8208	@ 0x2010
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d119      	bne.n	8000a0e <GT811_Init+0x6e>
		/* touch screen configuration parameter (touch screen manufacturers provide) */
		uint8_t GTP_CFG_DATA[] = { 0x12, 0x10, 0x0E, 0x0C, 0x0A, 0x08, 0x06,
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <GT811_Init+0x7c>)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4611      	mov	r1, r2
 80009e0:	226a      	movs	r2, #106	@ 0x6a
 80009e2:	4618      	mov	r0, r3
 80009e4:	f009 fd45 	bl	800a472 <memcpy>
				0x00, 0x00, 0x00, 0x20, 0x14, 0xEC, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x30, 0x25,
				0x28, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, };

		/* config  */
		GTP_CFG_DATA[62] = GT811_MAX_WIDTH >> 8;
 80009e8:	2303      	movs	r3, #3
 80009ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
		GTP_CFG_DATA[61] = GT811_MAX_WIDTH & 0xff;
 80009ee:	2320      	movs	r3, #32
 80009f0:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		GTP_CFG_DATA[60] = GT811_MAX_HEIGHT >> 8;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
		GTP_CFG_DATA[59] = GT811_MAX_HEIGHT & 0xff;
 80009fa:	23e0      	movs	r3, #224	@ 0xe0
 80009fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		I2C_WriteReg(GT811_CMD_WR, GT811_CONFIG_REG, (uint8_t*) GTP_CFG_DATA,
 8000a00:	1d3a      	adds	r2, r7, #4
 8000a02:	236a      	movs	r3, #106	@ 0x6a
 8000a04:	f240 61a2 	movw	r1, #1698	@ 0x6a2
 8000a08:	20ba      	movs	r0, #186	@ 0xba
 8000a0a:	f000 fa3f 	bl	8000e8c <I2C_WriteReg>
				sizeof(GTP_CFG_DATA));
	}
	return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3770      	adds	r7, #112	@ 0x70
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	58021400 	.word	0x58021400
 8000a1c:	0800af18 	.word	0x0800af18

08000a20 <GT811_ReadID>:
 * @brief  Read the GT811 device ID, pre initialize I2C in case of need to be
 *         able to read the GT811 device ID, and verify this is a GT811.
 * @param  DeviceAddr: I2C GT811 Slave address.
 * @retval The Device ID (two bytes).
 */
uint16_t GT811_ReadID() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
	uint8_t value[2];
	I2C_ReadReg(GT811_CMD_WR, GT811_VERSION, value, 2);
 8000a26:	1d3a      	adds	r2, r7, #4
 8000a28:	2302      	movs	r3, #2
 8000a2a:	f240 7117 	movw	r1, #1815	@ 0x717
 8000a2e:	20ba      	movs	r0, #186	@ 0xba
 8000a30:	f000 fa72 	bl	8000f18 <I2C_ReadReg>
	printf("ID    %x\r\n", (((uint16_t) value[0] << 8) + value[1]));
 8000a34:	793b      	ldrb	r3, [r7, #4]
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	797a      	ldrb	r2, [r7, #5]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <GT811_ReadID+0x38>)
 8000a40:	f009 fbf2 	bl	800a228 <iprintf>
	return value[0] * 0x100 + value[1];
 8000a44:	793b      	ldrb	r3, [r7, #4]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	797a      	ldrb	r2, [r7, #5]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	b29b      	uxth	r3, r3
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	0800af84 	.word	0x0800af84

08000a5c <delay_us>:
/**
 * @brief  I2C delay.
 * @param  None
 * @retval None
 */
static void delay_us(uint32_t value) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint32_t i;
	i = value * 250;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	22fa      	movs	r2, #250	@ 0xfa
 8000a68:	fb02 f303 	mul.w	r3, r2, r3
 8000a6c:	60fb      	str	r3, [r7, #12]
	while (i--) {
 8000a6e:	e005      	b.n	8000a7c <delay_us+0x20>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a70:	f3bf 8f4f 	dsb	sy
}
 8000a74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a76:	f3bf 8f6f 	isb	sy
}
 8000a7a:	bf00      	nop
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	1e5a      	subs	r2, r3, #1
 8000a80:	60fa      	str	r2, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f4      	bne.n	8000a70 <delay_us+0x14>
		__DSB();
		__ISB();
	};
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <I2C_Init>:
/**
 * @brief  I2C Init.
 * @param  None
 * @retval None
 */
void I2C_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
  __ASM volatile ("isb 0xF":::"memory");
 8000a9a:	f3bf 8f6f 	isb	sy
}
 8000a9e:	bf00      	nop
#if !(defined(__i2c_H)||defined(__I2C_H__))
	GPIO_InitTypeDef GPIO_InitStruct;

	SDA_CLK()
 8000aa0:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <I2C_Init+0xa0>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	4a23      	ldr	r2, [pc, #140]	@ (8000b34 <I2C_Init+0xa0>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab0:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <I2C_Init+0xa0>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("isb 0xF":::"memory");
 8000abe:	f3bf 8f6f 	isb	sy
}
 8000ac2:	bf00      	nop
	SCL_CLK()
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <I2C_Init+0xa0>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	4a1a      	ldr	r2, [pc, #104]	@ (8000b34 <I2C_Init+0xa0>)
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad4:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <I2C_Init+0xa0>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	480f      	ldr	r0, [pc, #60]	@ (8000b38 <I2C_Init+0xa4>)
 8000afc:	f002 fb26 	bl	800314c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SDA_GPIO_PORT, SDA_GPIO_PIN, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b06:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <I2C_Init+0xa4>)
 8000b08:	f002 fce8 	bl	80034dc <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = SCL_GPIO_PIN;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b10:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(SCL_GPIO_PORT, &GPIO_InitStruct);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <I2C_Init+0xa4>)
 8000b1a:	f002 fb17 	bl	800314c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(SCL_GPIO_PORT, SCL_GPIO_PIN, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <I2C_Init+0xa4>)
 8000b26:	f002 fcd9 	bl	80034dc <HAL_GPIO_WritePin>
#else
	MX_I2C4_Init();
#endif
}
 8000b2a:	bf00      	nop
 8000b2c:	3720      	adds	r7, #32
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	58024400 	.word	0x58024400
 8000b38:	58020c00 	.word	0x58020c00

08000b3c <SDA_IN>:
/**
 * @brief  Set SDA In.
 * @param  None
 * @retval None
 */
static void SDA_IN() {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b46:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <SDA_IN+0x2c>)
 8000b5a:	f002 faf7 	bl	800314c <HAL_GPIO_Init>

}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	58020c00 	.word	0x58020c00

08000b6c <SDA_OUT>:
/**
 * @brief  Set SDA Out.
 * @param  None
 * @retval None
 */
static void SDA_OUT() {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = SDA_GPIO_PIN;
 8000b72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b76:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SDA_GPIO_PORT, &GPIO_InitStruct);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <SDA_OUT+0x2c>)
 8000b8a:	f002 fadf 	bl	800314c <HAL_GPIO_Init>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58020c00 	.word	0x58020c00

08000b9c <I2C_Start>:
/**
 * @brief  I2C Start.
 * @param  None
 * @retval None
 */
void I2C_Start(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000ba0:	f7ff ffe4 	bl	8000b6c <SDA_OUT>

	SET_SDA();
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000baa:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <I2C_Start+0x54>)
 8000bac:	f002 fc96 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff ff53 	bl	8000a5c <delay_us>

	SET_CLK();
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <I2C_Start+0x54>)
 8000bbe:	f002 fc8d 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff ff4a 	bl	8000a5c <delay_us>

	CLR_SDA();
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bce:	4808      	ldr	r0, [pc, #32]	@ (8000bf0 <I2C_Start+0x54>)
 8000bd0:	f002 fc84 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff ff41 	bl	8000a5c <delay_us>

	CLR_CLK();
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <I2C_Start+0x54>)
 8000be2:	f002 fc7b 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff ff38 	bl	8000a5c <delay_us>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	58020c00 	.word	0x58020c00

08000bf4 <I2C_Stop>:
/**
 * @brief  I2C Stop.
 * @param  None
 * @retval None
 */
void I2C_Stop(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000bf8:	f7ff ffb8 	bl	8000b6c <SDA_OUT>

	CLR_SDA();
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <I2C_Stop+0x44>)
 8000c04:	f002 fc6a 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff ff27 	bl	8000a5c <delay_us>

	SET_CLK();
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c14:	4808      	ldr	r0, [pc, #32]	@ (8000c38 <I2C_Stop+0x44>)
 8000c16:	f002 fc61 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff ff1e 	bl	8000a5c <delay_us>

	SET_SDA();
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c26:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <I2C_Stop+0x44>)
 8000c28:	f002 fc58 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff ff15 	bl	8000a5c <delay_us>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	58020c00 	.word	0x58020c00

08000c3c <I2C_Wait_Ack>:
/**
 * @brief  I2C Ack.
 * @param  None
 * @retval None
 */
uint8_t I2C_Wait_Ack(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
	uint16_t ucErrTime = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	80fb      	strh	r3, [r7, #6]

	SDA_IN();
 8000c46:	f7ff ff79 	bl	8000b3c <SDA_IN>
	SET_SDA();
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c50:	4816      	ldr	r0, [pc, #88]	@ (8000cac <I2C_Wait_Ack+0x70>)
 8000c52:	f002 fc43 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff ff00 	bl	8000a5c <delay_us>
	SET_CLK();
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c62:	4812      	ldr	r0, [pc, #72]	@ (8000cac <I2C_Wait_Ack+0x70>)
 8000c64:	f002 fc3a 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fef7 	bl	8000a5c <delay_us>

	while (READ_SDA()) {
 8000c6e:	e009      	b.n	8000c84 <I2C_Wait_Ack+0x48>
		ucErrTime++;
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	3301      	adds	r3, #1
 8000c74:	80fb      	strh	r3, [r7, #6]
		if (ucErrTime > 250) {
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c7a:	d903      	bls.n	8000c84 <I2C_Wait_Ack+0x48>
			I2C_Stop();
 8000c7c:	f7ff ffba 	bl	8000bf4 <I2C_Stop>
			return 1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e00e      	b.n	8000ca2 <I2C_Wait_Ack+0x66>
	while (READ_SDA()) {
 8000c84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c88:	4808      	ldr	r0, [pc, #32]	@ (8000cac <I2C_Wait_Ack+0x70>)
 8000c8a:	f002 fc0f 	bl	80034ac <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1ed      	bne.n	8000c70 <I2C_Wait_Ack+0x34>
		}
	}
	CLR_CLK();
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c9a:	4804      	ldr	r0, [pc, #16]	@ (8000cac <I2C_Wait_Ack+0x70>)
 8000c9c:	f002 fc1e 	bl	80034dc <HAL_GPIO_WritePin>
	return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	58020c00 	.word	0x58020c00

08000cb0 <I2C_Ack>:
/**
 * @brief  I2C Ack.
 * @param  None
 * @retval None
 */
void I2C_Ack(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000cb4:	f7ff ff5a 	bl	8000b6c <SDA_OUT>
	CLR_CLK();
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cbe:	4810      	ldr	r0, [pc, #64]	@ (8000d00 <I2C_Ack+0x50>)
 8000cc0:	f002 fc0c 	bl	80034dc <HAL_GPIO_WritePin>

	CLR_SDA();
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cca:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <I2C_Ack+0x50>)
 8000ccc:	f002 fc06 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff fec3 	bl	8000a5c <delay_us>

	SET_CLK();
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cdc:	4808      	ldr	r0, [pc, #32]	@ (8000d00 <I2C_Ack+0x50>)
 8000cde:	f002 fbfd 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff feba 	bl	8000a5c <delay_us>

	CLR_CLK();
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cee:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <I2C_Ack+0x50>)
 8000cf0:	f002 fbf4 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff feb1 	bl	8000a5c <delay_us>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	58020c00 	.word	0x58020c00

08000d04 <I2C_NAck>:
/**
 * @brief  No I2C Ack.
 * @param  None
 * @retval None
 */
void I2C_NAck(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	SDA_OUT();
 8000d08:	f7ff ff30 	bl	8000b6c <SDA_OUT>

	SET_SDA();
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <I2C_NAck+0x44>)
 8000d14:	f002 fbe2 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f7ff fe9f 	bl	8000a5c <delay_us>

	SET_CLK();
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d24:	4808      	ldr	r0, [pc, #32]	@ (8000d48 <I2C_NAck+0x44>)
 8000d26:	f002 fbd9 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fe96 	bl	8000a5c <delay_us>

	CLR_CLK();
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d36:	4804      	ldr	r0, [pc, #16]	@ (8000d48 <I2C_NAck+0x44>)
 8000d38:	f002 fbd0 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f7ff fe8d 	bl	8000a5c <delay_us>
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	58020c00 	.word	0x58020c00

08000d4c <I2C_Send_Byte>:
/**
 * @brief  I2C Send one byte
 * @param  1:ack 0:without ack
 * @retval None
 */
void I2C_Send_Byte(uint8_t txd) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	uint8_t t;

	SDA_OUT();
 8000d56:	f7ff ff09 	bl	8000b6c <SDA_OUT>
	CLR_CLK();       //Put low CLK to send data
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d60:	4825      	ldr	r0, [pc, #148]	@ (8000df8 <I2C_Send_Byte+0xac>)
 8000d62:	f002 fbbb 	bl	80034dc <HAL_GPIO_WritePin>

	for (t = 0; t < 8; t++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
 8000d6a:	e02b      	b.n	8000dc4 <I2C_Send_Byte+0x78>
		if (txd & 0x80)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	da06      	bge.n	8000d82 <I2C_Send_Byte+0x36>
			SET_SDA();
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7a:	481f      	ldr	r0, [pc, #124]	@ (8000df8 <I2C_Send_Byte+0xac>)
 8000d7c:	f002 fbae 	bl	80034dc <HAL_GPIO_WritePin>
 8000d80:	e005      	b.n	8000d8e <I2C_Send_Byte+0x42>
		else
			CLR_SDA();
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d88:	481b      	ldr	r0, [pc, #108]	@ (8000df8 <I2C_Send_Byte+0xac>)
 8000d8a:	f002 fba7 	bl	80034dc <HAL_GPIO_WritePin>

		txd <<= 1;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff fe61 	bl	8000a5c <delay_us>

		SET_CLK();
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da0:	4815      	ldr	r0, [pc, #84]	@ (8000df8 <I2C_Send_Byte+0xac>)
 8000da2:	f002 fb9b 	bl	80034dc <HAL_GPIO_WritePin>
		delay_us(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fe58 	bl	8000a5c <delay_us>
		CLR_CLK();
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db2:	4811      	ldr	r0, [pc, #68]	@ (8000df8 <I2C_Send_Byte+0xac>)
 8000db4:	f002 fb92 	bl	80034dc <HAL_GPIO_WritePin>
		delay_us(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff fe4f 	bl	8000a5c <delay_us>
	for (t = 0; t < 8; t++) {
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	2b07      	cmp	r3, #7
 8000dc8:	d9d0      	bls.n	8000d6c <I2C_Send_Byte+0x20>
	}

	SET_SDA();
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd0:	4809      	ldr	r0, [pc, #36]	@ (8000df8 <I2C_Send_Byte+0xac>)
 8000dd2:	f002 fb83 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f7ff fe40 	bl	8000a5c <delay_us>
	CLR_CLK();
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <I2C_Send_Byte+0xac>)
 8000de4:	f002 fb7a 	bl	80034dc <HAL_GPIO_WritePin>
	delay_us(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff fe37 	bl	8000a5c <delay_us>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	58020c00 	.word	0x58020c00

08000dfc <I2C_Read_Byte>:
/**
 * @brief  I2C read one byte
 * @param  1:ack 0:without ack
 * @retval read value
 */
uint8_t I2C_Read_Byte(unsigned char ack) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	unsigned char i, receive = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73bb      	strb	r3, [r7, #14]
	SDA_IN();         //SDA set in
 8000e0a:	f7ff fe97 	bl	8000b3c <SDA_IN>
	for (i = 0; i < 8; i++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	e022      	b.n	8000e5a <I2C_Read_Byte+0x5e>
		CLR_CLK();
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e1a:	481b      	ldr	r0, [pc, #108]	@ (8000e88 <I2C_Read_Byte+0x8c>)
 8000e1c:	f002 fb5e 	bl	80034dc <HAL_GPIO_WritePin>
		delay_us(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff fe1b 	bl	8000a5c <delay_us>
		SET_CLK();
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e2c:	4816      	ldr	r0, [pc, #88]	@ (8000e88 <I2C_Read_Byte+0x8c>)
 8000e2e:	f002 fb55 	bl	80034dc <HAL_GPIO_WritePin>
		receive <<= 1;
 8000e32:	7bbb      	ldrb	r3, [r7, #14]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	73bb      	strb	r3, [r7, #14]
		if (READ_SDA())
 8000e38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e3c:	4812      	ldr	r0, [pc, #72]	@ (8000e88 <I2C_Read_Byte+0x8c>)
 8000e3e:	f002 fb35 	bl	80034ac <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <I2C_Read_Byte+0x52>
			receive++;
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	73bb      	strb	r3, [r7, #14]
		delay_us(1);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff fe04 	bl	8000a5c <delay_us>
	for (i = 0; i < 8; i++) {
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	3301      	adds	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b07      	cmp	r3, #7
 8000e5e:	d9d9      	bls.n	8000e14 <I2C_Read_Byte+0x18>
	}
	CLR_CLK();
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e66:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <I2C_Read_Byte+0x8c>)
 8000e68:	f002 fb38 	bl	80034dc <HAL_GPIO_WritePin>
	if (!ack)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <I2C_Read_Byte+0x7c>
		I2C_NAck();   //sent nACK
 8000e72:	f7ff ff47 	bl	8000d04 <I2C_NAck>
 8000e76:	e001      	b.n	8000e7c <I2C_Read_Byte+0x80>
	else
		I2C_Ack();        //sent ACK
 8000e78:	f7ff ff1a 	bl	8000cb0 <I2C_Ack>

	return receive;
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	58020c00 	.word	0x58020c00

08000e8c <I2C_WriteReg>:
 * Return         : ret
 -0  succeed
 -1  error
 * Attention		 : None
 *******************************************************************************/
uint8_t I2C_WriteReg(uint8_t I2c_Addr, uint16_t reg, uint8_t *buf, uint8_t len) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	603a      	str	r2, [r7, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	71bb      	strb	r3, [r7, #6]
#if !(defined(__i2c_H)||defined(__I2C_H__))
	uint8_t i;
	uint8_t ret = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73bb      	strb	r3, [r7, #14]
	I2C_Start();
 8000ea6:	f7ff fe79 	bl	8000b9c <I2C_Start>

	I2C_Send_Byte(I2c_Addr);   //Slaver Addr
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff4d 	bl	8000d4c <I2C_Send_Byte>
	I2C_Wait_Ack();
 8000eb2:	f7ff fec3 	bl	8000c3c <I2C_Wait_Ack>

#ifdef I2C_MEMADD_16BIT
	I2C_Send_Byte(reg >> 8);   	     //Data Addr high
 8000eb6:	88bb      	ldrh	r3, [r7, #4]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff44 	bl	8000d4c <I2C_Send_Byte>
	I2C_Wait_Ack();
 8000ec4:	f7ff feba 	bl	8000c3c <I2C_Wait_Ack>
#endif

	I2C_Send_Byte(reg & 0xFF);   	   //Data Addr low
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff3d 	bl	8000d4c <I2C_Send_Byte>
	I2C_Wait_Ack();
 8000ed2:	f7ff feb3 	bl	8000c3c <I2C_Wait_Ack>

	for (i = 0; i < len; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e010      	b.n	8000efe <I2C_WriteReg+0x72>
		I2C_Send_Byte(buf[i]);
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff31 	bl	8000d4c <I2C_Send_Byte>
		ret = I2C_Wait_Ack();
 8000eea:	f7ff fea7 	bl	8000c3c <I2C_Wait_Ack>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73bb      	strb	r3, [r7, #14]
		if (ret)
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d107      	bne.n	8000f08 <I2C_WriteReg+0x7c>
	for (i = 0; i < len; i++) {
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	3301      	adds	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3ea      	bcc.n	8000edc <I2C_WriteReg+0x50>
 8000f06:	e000      	b.n	8000f0a <I2C_WriteReg+0x7e>
			break;
 8000f08:	bf00      	nop
	}
	I2C_Stop();
 8000f0a:	f7ff fe73 	bl	8000bf4 <I2C_Stop>
	return ret;
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
#else
	uint8_t result = HAL_I2C_Mem_Write(&hi2c4, I2c_Addr, reg, sizeof(reg), buf,
			len, 1000);
	return result;
#endif
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <I2C_ReadReg>:
 *                  - len: The length of the array
 * Output         : None
 * Return         : None
 * Attention		 : None
 *******************************************************************************/
void I2C_ReadReg(uint8_t I2c_Addr, uint16_t reg, uint8_t *buf, uint8_t len) {
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	603a      	str	r2, [r7, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	460b      	mov	r3, r1
 8000f28:	80bb      	strh	r3, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	71bb      	strb	r3, [r7, #6]
#if !(defined(__i2c_H)||defined(__I2C_H__))
	uint8_t i;
	I2C_Start();
 8000f2e:	f7ff fe35 	bl	8000b9c <I2C_Start>
	I2C_Send_Byte(I2c_Addr);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff09 	bl	8000d4c <I2C_Send_Byte>
	I2C_Wait_Ack();
 8000f3a:	f7ff fe7f 	bl	8000c3c <I2C_Wait_Ack>

#ifdef I2C_MEMADD_16BIT
	I2C_Send_Byte(reg >> 8);   	     //Data Addr high
 8000f3e:	88bb      	ldrh	r3, [r7, #4]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff00 	bl	8000d4c <I2C_Send_Byte>
	I2C_Wait_Ack();
 8000f4c:	f7ff fe76 	bl	8000c3c <I2C_Wait_Ack>
#endif

	I2C_Send_Byte(reg & 0xFF);   	   //Data Addr low
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fef9 	bl	8000d4c <I2C_Send_Byte>
	I2C_Wait_Ack();
 8000f5a:	f7ff fe6f 	bl	8000c3c <I2C_Wait_Ack>
	I2C_Stop();
 8000f5e:	f7ff fe49 	bl	8000bf4 <I2C_Stop>

	I2C_Start();
 8000f62:	f7ff fe1b 	bl	8000b9c <I2C_Start>
	I2C_Send_Byte(I2c_Addr + 1);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff feed 	bl	8000d4c <I2C_Send_Byte>
	I2C_Wait_Ack();
 8000f72:	f7ff fe63 	bl	8000c3c <I2C_Wait_Ack>

	for (i = 0; i < len; i++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e013      	b.n	8000fa4 <I2C_ReadReg+0x8c>
		buf[i] = I2C_Read_Byte(i == (len - 1) ? 0 : 1);
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	429a      	cmp	r2, r3
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	18d4      	adds	r4, r2, r3
 8000f94:	4608      	mov	r0, r1
 8000f96:	f7ff ff31 	bl	8000dfc <I2C_Read_Byte>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++) {
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3e7      	bcc.n	8000f7c <I2C_ReadReg+0x64>
	}
	I2C_Stop();
 8000fac:	f7ff fe22 	bl	8000bf4 <I2C_Stop>
#else
	HAL_I2C_Mem_Read(&hi2c4, I2c_Addr, reg, sizeof(uint16_t), buf, len, 1000);
#endif
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}

08000fb8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <MX_CRC_Init+0x40>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fe2:	f001 fbe5 	bl	80027b0 <HAL_CRC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fec:	f000 feac 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	240000a4 	.word	0x240000a4
 8000ff8:	58024c00 	.word	0x58024c00

08000ffc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <HAL_CRC_MspInit+0x3c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10e      	bne.n	800102c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <HAL_CRC_MspInit+0x40>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001014:	4a09      	ldr	r2, [pc, #36]	@ (800103c <HAL_CRC_MspInit+0x40>)
 8001016:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <HAL_CRC_MspInit+0x40>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001024:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	58024c00 	.word	0x58024c00
 800103c:	58024400 	.word	0x58024400

08001040 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 8001046:	4a1a      	ldr	r2, [pc, #104]	@ (80010b0 <MX_DMA2D_Init+0x70>)
 8001048:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 8001052:	2202      	movs	r2, #2
 8001054:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800105c:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 800105e:	2200      	movs	r2, #0
 8001060:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 8001064:	2202      	movs	r2, #2
 8001066:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 800106a:	2200      	movs	r2, #0
 800106c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 8001070:	2200      	movs	r2, #0
 8001072:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 8001076:	2200      	movs	r2, #0
 8001078:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 800107c:	2200      	movs	r2, #0
 800107e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 8001082:	2200      	movs	r2, #0
 8001084:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001086:	4809      	ldr	r0, [pc, #36]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 8001088:	f001 fc84 	bl	8002994 <HAL_DMA2D_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001092:	f000 fe59 	bl	8001d48 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001096:	2101      	movs	r1, #1
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_DMA2D_Init+0x6c>)
 800109a:	f001 ff03 	bl	8002ea4 <HAL_DMA2D_ConfigLayer>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80010a4:	f000 fe50 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	240000c8 	.word	0x240000c8
 80010b0:	52001000 	.word	0x52001000

080010b4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <HAL_DMA2D_MspInit+0x48>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d116      	bne.n	80010f4 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_DMA2D_MspInit+0x4c>)
 80010c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <HAL_DMA2D_MspInit+0x4c>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_DMA2D_MspInit+0x4c>)
 80010d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	205a      	movs	r0, #90	@ 0x5a
 80010ea:	f001 fb2c 	bl	8002746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010ee:	205a      	movs	r0, #90	@ 0x5a
 80010f0:	f001 fb43 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	52001000 	.word	0x52001000
 8001100:	58024400 	.word	0x58024400

08001104 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <MX_FMC_Init+0x98>)
 800111e:	4a20      	ldr	r2, [pc, #128]	@ (80011a0 <MX_FMC_Init+0x9c>)
 8001120:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001122:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <MX_FMC_Init+0x98>)
 8001124:	2201      	movs	r2, #1
 8001126:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001128:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_FMC_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800112e:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <MX_FMC_Init+0x98>)
 8001130:	2204      	movs	r2, #4
 8001132:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001134:	4b19      	ldr	r3, [pc, #100]	@ (800119c <MX_FMC_Init+0x98>)
 8001136:	2210      	movs	r2, #16
 8001138:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800113a:	4b18      	ldr	r3, [pc, #96]	@ (800119c <MX_FMC_Init+0x98>)
 800113c:	2240      	movs	r2, #64	@ 0x40
 800113e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001140:	4b16      	ldr	r3, [pc, #88]	@ (800119c <MX_FMC_Init+0x98>)
 8001142:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001146:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_FMC_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <MX_FMC_Init+0x98>)
 8001150:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001154:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_FMC_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <MX_FMC_Init+0x98>)
 800115e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001168:	2307      	movs	r3, #7
 800116a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800116c:	2304      	movs	r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001170:	2306      	movs	r3, #6
 8001172:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8001174:	2302      	movs	r3, #2
 8001176:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_FMC_Init+0x98>)
 8001186:	f005 fc79 	bl	8006a7c <HAL_SDRAM_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001190:	f000 fdda 	bl	8001d48 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	24000130 	.word	0x24000130
 80011a0:	52004140 	.word	0x52004140

080011a4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0b8      	sub	sp, #224	@ 0xe0
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011ba:	4b51      	ldr	r3, [pc, #324]	@ (8001300 <HAL_FMC_MspInit+0x15c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 8099 	bne.w	80012f6 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80011c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001300 <HAL_FMC_MspInit+0x15c>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	22c0      	movs	r2, #192	@ 0xc0
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 f87d 	bl	800a2d2 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80011d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fe19 	bl	8004e24 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80011f8:	f000 fda6 	bl	8001d48 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011fc:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <HAL_FMC_MspInit+0x160>)
 80011fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001202:	4a40      	ldr	r2, [pc, #256]	@ (8001304 <HAL_FMC_MspInit+0x160>)
 8001204:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001208:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800120c:	4b3d      	ldr	r3, [pc, #244]	@ (8001304 <HAL_FMC_MspInit+0x160>)
 800120e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001212:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800121a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800121e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001234:	230c      	movs	r3, #12
 8001236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800123a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800123e:	4619      	mov	r1, r3
 8001240:	4831      	ldr	r0, [pc, #196]	@ (8001308 <HAL_FMC_MspInit+0x164>)
 8001242:	f001 ff83 	bl	800314c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001246:	23e0      	movs	r3, #224	@ 0xe0
 8001248:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800125e:	230c      	movs	r3, #12
 8001260:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001264:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001268:	4619      	mov	r1, r3
 800126a:	4828      	ldr	r0, [pc, #160]	@ (800130c <HAL_FMC_MspInit+0x168>)
 800126c:	f001 ff6e 	bl	800314c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001270:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001274:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800128a:	230c      	movs	r3, #12
 800128c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001290:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001294:	4619      	mov	r1, r3
 8001296:	481e      	ldr	r0, [pc, #120]	@ (8001310 <HAL_FMC_MspInit+0x16c>)
 8001298:	f001 ff58 	bl	800314c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800129c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80012a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012b6:	230c      	movs	r3, #12
 80012b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80012c0:	4619      	mov	r1, r3
 80012c2:	4814      	ldr	r0, [pc, #80]	@ (8001314 <HAL_FMC_MspInit+0x170>)
 80012c4:	f001 ff42 	bl	800314c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80012c8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80012cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e2:	230c      	movs	r3, #12
 80012e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80012ec:	4619      	mov	r1, r3
 80012ee:	480a      	ldr	r0, [pc, #40]	@ (8001318 <HAL_FMC_MspInit+0x174>)
 80012f0:	f001 ff2c 	bl	800314c <HAL_GPIO_Init>
 80012f4:	e000      	b.n	80012f8 <HAL_FMC_MspInit+0x154>
    return;
 80012f6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012f8:	37e0      	adds	r7, #224	@ 0xe0
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	24000164 	.word	0x24000164
 8001304:	58024400 	.word	0x58024400
 8001308:	58021400 	.word	0x58021400
 800130c:	58021c00 	.word	0x58021c00
 8001310:	58021800 	.word	0x58021800
 8001314:	58021000 	.word	0x58021000
 8001318:	58020c00 	.word	0x58020c00

0800131c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001324:	f7ff ff3e 	bl	80011a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	@ 0x38
 8001334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001346:	4b83      	ldr	r3, [pc, #524]	@ (8001554 <MX_GPIO_Init+0x224>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134c:	4a81      	ldr	r2, [pc, #516]	@ (8001554 <MX_GPIO_Init+0x224>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001356:	4b7f      	ldr	r3, [pc, #508]	@ (8001554 <MX_GPIO_Init+0x224>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	623b      	str	r3, [r7, #32]
 8001362:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001364:	4b7b      	ldr	r3, [pc, #492]	@ (8001554 <MX_GPIO_Init+0x224>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136a:	4a7a      	ldr	r2, [pc, #488]	@ (8001554 <MX_GPIO_Init+0x224>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001374:	4b77      	ldr	r3, [pc, #476]	@ (8001554 <MX_GPIO_Init+0x224>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001382:	4b74      	ldr	r3, [pc, #464]	@ (8001554 <MX_GPIO_Init+0x224>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001388:	4a72      	ldr	r2, [pc, #456]	@ (8001554 <MX_GPIO_Init+0x224>)
 800138a:	f043 0320 	orr.w	r3, r3, #32
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001392:	4b70      	ldr	r3, [pc, #448]	@ (8001554 <MX_GPIO_Init+0x224>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001398:	f003 0320 	and.w	r3, r3, #32
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001554 <MX_GPIO_Init+0x224>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a6:	4a6b      	ldr	r2, [pc, #428]	@ (8001554 <MX_GPIO_Init+0x224>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b0:	4b68      	ldr	r3, [pc, #416]	@ (8001554 <MX_GPIO_Init+0x224>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	4b65      	ldr	r3, [pc, #404]	@ (8001554 <MX_GPIO_Init+0x224>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c4:	4a63      	ldr	r2, [pc, #396]	@ (8001554 <MX_GPIO_Init+0x224>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ce:	4b61      	ldr	r3, [pc, #388]	@ (8001554 <MX_GPIO_Init+0x224>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b5d      	ldr	r3, [pc, #372]	@ (8001554 <MX_GPIO_Init+0x224>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001554 <MX_GPIO_Init+0x224>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ec:	4b59      	ldr	r3, [pc, #356]	@ (8001554 <MX_GPIO_Init+0x224>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b56      	ldr	r3, [pc, #344]	@ (8001554 <MX_GPIO_Init+0x224>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001400:	4a54      	ldr	r2, [pc, #336]	@ (8001554 <MX_GPIO_Init+0x224>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140a:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <MX_GPIO_Init+0x224>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001418:	4b4e      	ldr	r3, [pc, #312]	@ (8001554 <MX_GPIO_Init+0x224>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141e:	4a4d      	ldr	r2, [pc, #308]	@ (8001554 <MX_GPIO_Init+0x224>)
 8001420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001424:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001428:	4b4a      	ldr	r3, [pc, #296]	@ (8001554 <MX_GPIO_Init+0x224>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	4b47      	ldr	r3, [pc, #284]	@ (8001554 <MX_GPIO_Init+0x224>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143c:	4a45      	ldr	r2, [pc, #276]	@ (8001554 <MX_GPIO_Init+0x224>)
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001446:	4b43      	ldr	r3, [pc, #268]	@ (8001554 <MX_GPIO_Init+0x224>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISP_GPIO_Port, DISP_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800145a:	483f      	ldr	r0, [pc, #252]	@ (8001558 <MX_GPIO_Init+0x228>)
 800145c:	f002 f83e 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2140      	movs	r1, #64	@ 0x40
 8001464:	483d      	ldr	r0, [pc, #244]	@ (800155c <MX_GPIO_Init+0x22c>)
 8001466:	f002 f839 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2110      	movs	r1, #16
 800146e:	483c      	ldr	r0, [pc, #240]	@ (8001560 <MX_GPIO_Init+0x230>)
 8001470:	f002 f834 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	21c0      	movs	r1, #192	@ 0xc0
 8001478:	483a      	ldr	r0, [pc, #232]	@ (8001564 <MX_GPIO_Init+0x234>)
 800147a:	f002 f82f 	bl	80034dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISP_Pin */
  GPIO_InitStruct.Pin = DISP_Pin;
 800147e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DISP_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	4830      	ldr	r0, [pc, #192]	@ (8001558 <MX_GPIO_Init+0x228>)
 8001498:	f001 fe58 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_RST_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin;
 800149c:	2340      	movs	r3, #64	@ 0x40
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TP_RST_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	482a      	ldr	r0, [pc, #168]	@ (800155c <MX_GPIO_Init+0x22c>)
 80014b4:	f001 fe4a 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_SCL_Pin */
  GPIO_InitStruct.Pin = TP_SCL_Pin;
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_SCL_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4824      	ldr	r0, [pc, #144]	@ (800155c <MX_GPIO_Init+0x22c>)
 80014cc:	f001 fe3e 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_SDA_Pin */
  GPIO_InitStruct.Pin = TP_SDA_Pin;
 80014d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014da:	2301      	movs	r3, #1
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_SDA_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	481d      	ldr	r0, [pc, #116]	@ (800155c <MX_GPIO_Init+0x22c>)
 80014e6:	f001 fe31 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 80014ea:	2310      	movs	r3, #16
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4817      	ldr	r0, [pc, #92]	@ (8001560 <MX_GPIO_Init+0x230>)
 8001502:	f001 fe23 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001510:	2301      	movs	r3, #1
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4813      	ldr	r0, [pc, #76]	@ (8001568 <MX_GPIO_Init+0x238>)
 800151c:	f001 fe16 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001520:	23c0      	movs	r3, #192	@ 0xc0
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	480b      	ldr	r0, [pc, #44]	@ (8001564 <MX_GPIO_Init+0x234>)
 8001538:	f001 fe08 	bl	800314c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2017      	movs	r0, #23
 8001542:	f001 f900 	bl	8002746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001546:	2017      	movs	r0, #23
 8001548:	f001 f917 	bl	800277a <HAL_NVIC_EnableIRQ>

}
 800154c:	bf00      	nop
 800154e:	3738      	adds	r7, #56	@ 0x38
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	58024400 	.word	0x58024400
 8001558:	58022000 	.word	0x58022000
 800155c:	58021400 	.word	0x58021400
 8001560:	58021c00 	.word	0x58021c00
 8001564:	58020400 	.word	0x58020400
 8001568:	58020c00 	.word	0x58020c00

0800156c <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001570:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <MX_I2C4_Init+0x78>)
 8001572:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <MX_I2C4_Init+0x7c>)
 8001574:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00000E14;
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <MX_I2C4_Init+0x78>)
 8001578:	f640 6214 	movw	r2, #3604	@ 0xe14
 800157c:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <MX_I2C4_Init+0x78>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <MX_I2C4_Init+0x78>)
 8001586:	2201      	movs	r2, #1
 8001588:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <MX_I2C4_Init+0x78>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_I2C4_Init+0x78>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001596:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <MX_I2C4_Init+0x78>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_I2C4_Init+0x78>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_I2C4_Init+0x78>)
 80015a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80015aa:	480e      	ldr	r0, [pc, #56]	@ (80015e4 <MX_I2C4_Init+0x78>)
 80015ac:	f001 ffd4 	bl	8003558 <HAL_I2C_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_I2C4_Init+0x4e>
  {
    Error_Handler();
 80015b6:	f000 fbc7 	bl	8001d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	4809      	ldr	r0, [pc, #36]	@ (80015e4 <MX_I2C4_Init+0x78>)
 80015be:	f002 f867 	bl	8003690 <HAL_I2CEx_ConfigAnalogFilter>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C4_Init+0x60>
  {
    Error_Handler();
 80015c8:	f000 fbbe 	bl	8001d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_I2C4_Init+0x78>)
 80015d0:	f002 f8a9 	bl	8003726 <HAL_I2CEx_ConfigDigitalFilter>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_I2C4_Init+0x72>
  {
    Error_Handler();
 80015da:	f000 fbb5 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	24000168 	.word	0x24000168
 80015e8:	58001c00 	.word	0x58001c00

080015ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0ba      	sub	sp, #232	@ 0xe8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	22c0      	movs	r2, #192	@ 0xc0
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f008 fe60 	bl	800a2d2 <memset>
  if(i2cHandle->Instance==I2C4)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a27      	ldr	r2, [pc, #156]	@ (80016b4 <HAL_I2C_MspInit+0xc8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d147      	bne.n	80016ac <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800161c:	f04f 0210 	mov.w	r2, #16
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_CSI;
 8001628:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800162c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4618      	mov	r0, r3
 8001636:	f003 fbf5 	bl	8004e24 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001640:	f000 fb82 	bl	8001d48 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001644:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <HAL_I2C_MspInit+0xcc>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	4a1b      	ldr	r2, [pc, #108]	@ (80016b8 <HAL_I2C_MspInit+0xcc>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_I2C_MspInit+0xcc>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = TP_SCLD12_Pin|TP_SDAD13_Pin;
 8001662:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166a:	2312      	movs	r3, #18
 800166c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001670:	2301      	movs	r3, #1
 8001672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800167c:	2304      	movs	r3, #4
 800167e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001682:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001686:	4619      	mov	r1, r3
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <HAL_I2C_MspInit+0xd0>)
 800168a:	f001 fd5f 	bl	800314c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_I2C_MspInit+0xcc>)
 8001690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001694:	4a08      	ldr	r2, [pc, #32]	@ (80016b8 <HAL_I2C_MspInit+0xcc>)
 8001696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_I2C_MspInit+0xcc>)
 80016a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80016ac:	bf00      	nop
 80016ae:	37e8      	adds	r7, #232	@ 0xe8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	58001c00 	.word	0x58001c00
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58020c00 	.word	0x58020c00

080016c0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08e      	sub	sp, #56	@ 0x38
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2234      	movs	r2, #52	@ 0x34
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f008 fe00 	bl	800a2d2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80016d2:	4b3a      	ldr	r3, [pc, #232]	@ (80017bc <MX_LTDC_Init+0xfc>)
 80016d4:	4a3a      	ldr	r2, [pc, #232]	@ (80017c0 <MX_LTDC_Init+0x100>)
 80016d6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80016d8:	4b38      	ldr	r3, [pc, #224]	@ (80017bc <MX_LTDC_Init+0xfc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80016de:	4b37      	ldr	r3, [pc, #220]	@ (80017bc <MX_LTDC_Init+0xfc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016e4:	4b35      	ldr	r3, [pc, #212]	@ (80017bc <MX_LTDC_Init+0xfc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016ea:	4b34      	ldr	r3, [pc, #208]	@ (80017bc <MX_LTDC_Init+0xfc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 29;
 80016f0:	4b32      	ldr	r3, [pc, #200]	@ (80017bc <MX_LTDC_Init+0xfc>)
 80016f2:	221d      	movs	r2, #29
 80016f4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80016f6:	4b31      	ldr	r3, [pc, #196]	@ (80017bc <MX_LTDC_Init+0xfc>)
 80016f8:	2209      	movs	r2, #9
 80016fa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 75;
 80016fc:	4b2f      	ldr	r3, [pc, #188]	@ (80017bc <MX_LTDC_Init+0xfc>)
 80016fe:	224b      	movs	r2, #75	@ 0x4b
 8001700:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 32;
 8001702:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <MX_LTDC_Init+0xfc>)
 8001704:	2220      	movs	r2, #32
 8001706:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 875;
 8001708:	4b2c      	ldr	r3, [pc, #176]	@ (80017bc <MX_LTDC_Init+0xfc>)
 800170a:	f240 326b 	movw	r2, #875	@ 0x36b
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8001710:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <MX_LTDC_Init+0xfc>)
 8001712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 881;
 8001718:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <MX_LTDC_Init+0xfc>)
 800171a:	f240 3271 	movw	r2, #881	@ 0x371
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 534;
 8001720:	4b26      	ldr	r3, [pc, #152]	@ (80017bc <MX_LTDC_Init+0xfc>)
 8001722:	f240 2216 	movw	r2, #534	@ 0x216
 8001726:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001728:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <MX_LTDC_Init+0xfc>)
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001730:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <MX_LTDC_Init+0xfc>)
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001738:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <MX_LTDC_Init+0xfc>)
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001740:	481e      	ldr	r0, [pc, #120]	@ (80017bc <MX_LTDC_Init+0xfc>)
 8001742:	f002 f83c 	bl	80037be <HAL_LTDC_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800174c:	f000 fafc 	bl	8001d48 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001754:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001758:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800175e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001762:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001764:	2302      	movs	r3, #2
 8001766:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0xff;
 8001768:	23ff      	movs	r3, #255	@ 0xff
 800176a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001774:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001776:	2305      	movs	r3, #5
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800177a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 800;
 8001780:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8001786:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800178a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	@ (80017bc <MX_LTDC_Init+0xfc>)
 80017a6:	f002 f969 	bl	8003a7c <HAL_LTDC_ConfigLayer>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80017b0:	f000 faca 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3738      	adds	r7, #56	@ 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	240001bc 	.word	0x240001bc
 80017c0:	50001000 	.word	0x50001000

080017c4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0c2      	sub	sp, #264	@ 0x108
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80017ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80017d2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017e8:	22c0      	movs	r2, #192	@ 0xc0
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f008 fd70 	bl	800a2d2 <memset>
  if(ltdcHandle->Instance==LTDC)
 80017f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80017f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4ad2      	ldr	r2, [pc, #840]	@ (8001b48 <HAL_LTDC_MspInit+0x384>)
 8001800:	4293      	cmp	r3, r2
 8001802:	f040 819c 	bne.w	8001b3e <HAL_LTDC_MspInit+0x37a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001806:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8001812:	2304      	movs	r3, #4
 8001814:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3N = 96;
 8001816:	2360      	movs	r3, #96	@ 0x60
 8001818:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800181a:	2302      	movs	r3, #2
 800181c:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800181e:	2304      	movs	r3, #4
 8001820:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3R = 9;
 8001822:	2309      	movs	r3, #9
 8001824:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800182a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800182c:	2300      	movs	r3, #0
 800182e:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001834:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001838:	4618      	mov	r0, r3
 800183a:	f003 faf3 	bl	8004e24 <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_LTDC_MspInit+0x84>
    {
      Error_Handler();
 8001844:	f000 fa80 	bl	8001d48 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001848:	4bc0      	ldr	r3, [pc, #768]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 800184a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800184e:	4abf      	ldr	r2, [pc, #764]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001858:	4bbc      	ldr	r3, [pc, #752]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 800185a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001866:	4bb9      	ldr	r3, [pc, #740]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186c:	4ab7      	ldr	r2, [pc, #732]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001876:	4bb5      	ldr	r3, [pc, #724]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 8001878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001884:	4bb1      	ldr	r3, [pc, #708]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188a:	4ab0      	ldr	r2, [pc, #704]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001894:	4bad      	ldr	r3, [pc, #692]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a2:	4baa      	ldr	r3, [pc, #680]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a8:	4aa8      	ldr	r2, [pc, #672]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 80018aa:	f043 0320 	orr.w	r3, r3, #32
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b2:	4ba6      	ldr	r3, [pc, #664]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	4ba2      	ldr	r3, [pc, #648]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c6:	4aa1      	ldr	r2, [pc, #644]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d0:	4b9e      	ldr	r3, [pc, #632]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018de:	4b9b      	ldr	r3, [pc, #620]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e4:	4a99      	ldr	r2, [pc, #612]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 80018e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ee:	4b97      	ldr	r3, [pc, #604]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b93      	ldr	r3, [pc, #588]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001902:	4a92      	ldr	r2, [pc, #584]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800190c:	4b8f      	ldr	r3, [pc, #572]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800191a:	4b8c      	ldr	r3, [pc, #560]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001920:	4a8a      	ldr	r2, [pc, #552]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 8001922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800192a:	4b88      	ldr	r3, [pc, #544]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001938:	4b84      	ldr	r3, [pc, #528]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193e:	4a83      	ldr	r2, [pc, #524]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001948:	4b80      	ldr	r3, [pc, #512]	@ (8001b4c <HAL_LTDC_MspInit+0x388>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001956:	2370      	movs	r3, #112	@ 0x70
 8001958:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800196e:	230e      	movs	r3, #14
 8001970:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001974:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001978:	4619      	mov	r1, r3
 800197a:	4875      	ldr	r0, [pc, #468]	@ (8001b50 <HAL_LTDC_MspInit+0x38c>)
 800197c:	f001 fbe6 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001980:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001984:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800199a:	230e      	movs	r3, #14
 800199c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019a0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019a4:	4619      	mov	r1, r3
 80019a6:	486b      	ldr	r0, [pc, #428]	@ (8001b54 <HAL_LTDC_MspInit+0x390>)
 80019a8:	f001 fbd0 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019c6:	230e      	movs	r3, #14
 80019c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019cc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4861      	ldr	r0, [pc, #388]	@ (8001b58 <HAL_LTDC_MspInit+0x394>)
 80019d4:	f001 fbba 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019d8:	2301      	movs	r3, #1
 80019da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019f0:	230e      	movs	r3, #14
 80019f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4857      	ldr	r0, [pc, #348]	@ (8001b5c <HAL_LTDC_MspInit+0x398>)
 80019fe:	f001 fba5 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8001a02:	f24a 730c 	movw	r3, #42764	@ 0xa70c
 8001a06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a1c:	230e      	movs	r3, #14
 8001a1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a22:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a26:	4619      	mov	r1, r3
 8001a28:	484d      	ldr	r0, [pc, #308]	@ (8001b60 <HAL_LTDC_MspInit+0x39c>)
 8001a2a:	f001 fb8f 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a46:	2309      	movs	r3, #9
 8001a48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4844      	ldr	r0, [pc, #272]	@ (8001b64 <HAL_LTDC_MspInit+0x3a0>)
 8001a54:	f001 fb7a 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 8001a58:	f44f 53c2 	mov.w	r3, #6208	@ 0x1840
 8001a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a72:	230e      	movs	r3, #14
 8001a74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a78:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	483a      	ldr	r0, [pc, #232]	@ (8001b68 <HAL_LTDC_MspInit+0x3a4>)
 8001a80:	f001 fb64 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a9c:	230e      	movs	r3, #14
 8001a9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	482f      	ldr	r0, [pc, #188]	@ (8001b68 <HAL_LTDC_MspInit+0x3a4>)
 8001aaa:	f001 fb4f 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001aae:	23f7      	movs	r3, #247	@ 0xf7
 8001ab0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ac6:	230e      	movs	r3, #14
 8001ac8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001acc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4820      	ldr	r0, [pc, #128]	@ (8001b54 <HAL_LTDC_MspInit+0x390>)
 8001ad4:	f001 fb3a 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ad8:	2340      	movs	r3, #64	@ 0x40
 8001ada:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001af0:	230e      	movs	r3, #14
 8001af2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001afa:	4619      	mov	r1, r3
 8001afc:	481b      	ldr	r0, [pc, #108]	@ (8001b6c <HAL_LTDC_MspInit+0x3a8>)
 8001afe:	f001 fb25 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b1c:	2309      	movs	r3, #9
 8001b1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b22:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001b26:	4619      	mov	r1, r3
 8001b28:	480f      	ldr	r0, [pc, #60]	@ (8001b68 <HAL_LTDC_MspInit+0x3a4>)
 8001b2a:	f001 fb0f 	bl	800314c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	2058      	movs	r0, #88	@ 0x58
 8001b34:	f000 fe07 	bl	8002746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001b38:	2058      	movs	r0, #88	@ 0x58
 8001b3a:	f000 fe1e 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001b3e:	bf00      	nop
 8001b40:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	50001000 	.word	0x50001000
 8001b4c:	58024400 	.word	0x58024400
 8001b50:	58021000 	.word	0x58021000
 8001b54:	58022000 	.word	0x58022000
 8001b58:	58021400 	.word	0x58021400
 8001b5c:	58020800 	.word	0x58020800
 8001b60:	58021c00 	.word	0x58021c00
 8001b64:	58020400 	.word	0x58020400
 8001b68:	58021800 	.word	0x58021800
 8001b6c:	58020c00 	.word	0x58020c00

08001b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b74:	f000 fc4a 	bl	800240c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b78:	f000 f866 	bl	8001c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b7c:	f7ff fbd8 	bl	8001330 <MX_GPIO_Init>
  MX_FMC_Init();
 8001b80:	f7ff fac0 	bl	8001104 <MX_FMC_Init>
  MX_USART1_UART_Init();
 8001b84:	f000 fb62 	bl	800224c <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8001b88:	f7ff fd9a 	bl	80016c0 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001b8c:	f7ff fa58 	bl	8001040 <MX_DMA2D_Init>
  MX_TIM2_Init();
 8001b90:	f000 faaa 	bl	80020e8 <MX_TIM2_Init>
  MX_CRC_Init();
 8001b94:	f7ff fa10 	bl	8000fb8 <MX_CRC_Init>
  MX_I2C4_Init();
 8001b98:	f7ff fce8 	bl	800156c <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8001b9c:	f7fe fd86 	bl	80006ac <BSP_LCD_Init>
	GT811_Init();
 8001ba0:	f7fe fefe 	bl	80009a0 <GT811_Init>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7fe fe09 	bl	80007bc <BSP_LCD_Clear>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001baa:	2201      	movs	r2, #1
 8001bac:	2140      	movs	r1, #64	@ 0x40
 8001bae:	4824      	ldr	r0, [pc, #144]	@ (8001c40 <main+0xd0>)
 8001bb0:	f001 fc94 	bl	80034dc <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001bb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bb8:	f000 fcba 	bl	8002530 <HAL_Delay>
		BSP_LCD_Clear(0xf000);
 8001bbc:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8001bc0:	f7fe fdfc 	bl	80007bc <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	2180      	movs	r1, #128	@ 0x80
 8001bc8:	481d      	ldr	r0, [pc, #116]	@ (8001c40 <main+0xd0>)
 8001bca:	f001 fc87 	bl	80034dc <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001bce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bd2:	f000 fcad 	bl	8002530 <HAL_Delay>
		BSP_LCD_Clear(0x0f00);
 8001bd6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001bda:	f7fe fdef 	bl	80007bc <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	2110      	movs	r1, #16
 8001be2:	4818      	ldr	r0, [pc, #96]	@ (8001c44 <main+0xd4>)
 8001be4:	f001 fc7a 	bl	80034dc <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001be8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bec:	f000 fca0 	bl	8002530 <HAL_Delay>
		BSP_LCD_Clear(0x00f0);
 8001bf0:	20f0      	movs	r0, #240	@ 0xf0
 8001bf2:	f7fe fde3 	bl	80007bc <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2140      	movs	r1, #64	@ 0x40
 8001bfa:	4811      	ldr	r0, [pc, #68]	@ (8001c40 <main+0xd0>)
 8001bfc:	f001 fc6e 	bl	80034dc <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001c00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c04:	f000 fc94 	bl	8002530 <HAL_Delay>
		BSP_LCD_Clear(0x000f);
 8001c08:	200f      	movs	r0, #15
 8001c0a:	f7fe fdd7 	bl	80007bc <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2180      	movs	r1, #128	@ 0x80
 8001c12:	480b      	ldr	r0, [pc, #44]	@ (8001c40 <main+0xd0>)
 8001c14:	f001 fc62 	bl	80034dc <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c1c:	f000 fc88 	bl	8002530 <HAL_Delay>
		BSP_LCD_Clear(0xf00f);
 8001c20:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8001c24:	f7fe fdca 	bl	80007bc <BSP_LCD_Clear>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <main+0xd4>)
 8001c2e:	f001 fc55 	bl	80034dc <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c36:	f000 fc7b 	bl	8002530 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001c3a:	bf00      	nop
 8001c3c:	e7b5      	b.n	8001baa <main+0x3a>
 8001c3e:	bf00      	nop
 8001c40:	58020400 	.word	0x58020400
 8001c44:	58021c00 	.word	0x58021c00

08001c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b09c      	sub	sp, #112	@ 0x70
 8001c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c52:	224c      	movs	r2, #76	@ 0x4c
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f008 fb3b 	bl	800a2d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	2220      	movs	r2, #32
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f008 fb35 	bl	800a2d2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f002 f8bb 	bl	8003de4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	4b33      	ldr	r3, [pc, #204]	@ (8001d40 <SystemClock_Config+0xf8>)
 8001c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c76:	4a32      	ldr	r2, [pc, #200]	@ (8001d40 <SystemClock_Config+0xf8>)
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001c7e:	4b30      	ldr	r3, [pc, #192]	@ (8001d40 <SystemClock_Config+0xf8>)
 8001c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <SystemClock_Config+0xfc>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001d44 <SystemClock_Config+0xfc>)
 8001c8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <SystemClock_Config+0xfc>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ca0:	bf00      	nop
 8001ca2:	4b28      	ldr	r3, [pc, #160]	@ (8001d44 <SystemClock_Config+0xfc>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cae:	d1f8      	bne.n	8001ca2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8001cb0:	2311      	movs	r3, #17
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001cce:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001cd2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f002 f8b1 	bl	8003e58 <HAL_RCC_OscConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001cfc:	f000 f824 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d00:	233f      	movs	r3, #63	@ 0x3f
 8001d02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d04:	2303      	movs	r3, #3
 8001d06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d10:	2340      	movs	r3, #64	@ 0x40
 8001d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001d14:	2350      	movs	r3, #80	@ 0x50
 8001d16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d1e:	2340      	movs	r3, #64	@ 0x40
 8001d20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2102      	movs	r1, #2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 fcf0 	bl	800470c <HAL_RCC_ClockConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001d32:	f000 f809 	bl	8001d48 <Error_Handler>
  }
}
 8001d36:	bf00      	nop
 8001d38:	3770      	adds	r7, #112	@ 0x70
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	58000400 	.word	0x58000400
 8001d44:	58024800 	.word	0x58024800

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001d50:	2201      	movs	r2, #1
 8001d52:	2140      	movs	r1, #64	@ 0x40
 8001d54:	4807      	ldr	r0, [pc, #28]	@ (8001d74 <Error_Handler+0x2c>)
 8001d56:	f001 fbc1 	bl	80034dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2180      	movs	r1, #128	@ 0x80
 8001d5e:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <Error_Handler+0x2c>)
 8001d60:	f001 fbbc 	bl	80034dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	2110      	movs	r1, #16
 8001d68:	4803      	ldr	r0, [pc, #12]	@ (8001d78 <Error_Handler+0x30>)
 8001d6a:	f001 fbb7 	bl	80034dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001d6e:	bf00      	nop
 8001d70:	e7ee      	b.n	8001d50 <Error_Handler+0x8>
 8001d72:	bf00      	nop
 8001d74:	58020400 	.word	0x58020400
 8001d78:	58021c00 	.word	0x58021c00

08001d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_MspInit+0x30>)
 8001d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d88:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <HAL_MspInit+0x30>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_MspInit+0x30>)
 8001d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	58024400 	.word	0x58024400

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <NMI_Handler+0x4>

08001db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e06:	f000 fb73 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_INT_Pin);
 8001e12:	2080      	movs	r0, #128	@ 0x80
 8001e14:	f001 fb7b 	bl	800350e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <LTDC_IRQHandler+0x10>)
 8001e22:	f001 fd69 	bl	80038f8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	240001bc 	.word	0x240001bc

08001e30 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <DMA2D_IRQHandler+0x10>)
 8001e36:	f000 ff25 	bl	8002c84 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	240000c8 	.word	0x240000c8

08001e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_kill>:

int _kill(int pid, int sig)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e5e:	f008 fadb 	bl	800a418 <__errno>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2216      	movs	r2, #22
 8001e66:	601a      	str	r2, [r3, #0]
	return -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_exit>:

void _exit (int status)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffe7 	bl	8001e54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e86:	bf00      	nop
 8001e88:	e7fd      	b.n	8001e86 <_exit+0x12>

08001e8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e00a      	b.n	8001eb2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	4601      	mov	r1, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	60ba      	str	r2, [r7, #8]
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbf0      	blt.n	8001e9c <_read+0x12>
	}

return len;
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e009      	b.n	8001eea <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	60ba      	str	r2, [r7, #8]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	dbf1      	blt.n	8001ed6 <_write+0x12>
	}
	return len;
 8001ef2:	687b      	ldr	r3, [r7, #4]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_close>:

int _close(int file)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	return -1;
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f24:	605a      	str	r2, [r3, #4]
	return 0;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_isatty>:

int _isatty(int file)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	return 1;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
	return 0;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	@ (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f008 fa40 	bl	800a418 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	@ (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	@ (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	24080000 	.word	0x24080000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	24000264 	.word	0x24000264
 8001fcc:	24000670 	.word	0x24000670

08001fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fd4:	4b39      	ldr	r3, [pc, #228]	@ (80020bc <SystemInit+0xec>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fda:	4a38      	ldr	r2, [pc, #224]	@ (80020bc <SystemInit+0xec>)
 8001fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fe4:	4b36      	ldr	r3, [pc, #216]	@ (80020c0 <SystemInit+0xf0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	2b06      	cmp	r3, #6
 8001fee:	d807      	bhi.n	8002000 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ff0:	4b33      	ldr	r3, [pc, #204]	@ (80020c0 <SystemInit+0xf0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 030f 	bic.w	r3, r3, #15
 8001ff8:	4a31      	ldr	r2, [pc, #196]	@ (80020c0 <SystemInit+0xf0>)
 8001ffa:	f043 0307 	orr.w	r3, r3, #7
 8001ffe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002000:	4b30      	ldr	r3, [pc, #192]	@ (80020c4 <SystemInit+0xf4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a2f      	ldr	r2, [pc, #188]	@ (80020c4 <SystemInit+0xf4>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800200c:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <SystemInit+0xf4>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002012:	4b2c      	ldr	r3, [pc, #176]	@ (80020c4 <SystemInit+0xf4>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	492b      	ldr	r1, [pc, #172]	@ (80020c4 <SystemInit+0xf4>)
 8002018:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <SystemInit+0xf8>)
 800201a:	4013      	ands	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800201e:	4b28      	ldr	r3, [pc, #160]	@ (80020c0 <SystemInit+0xf0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800202a:	4b25      	ldr	r3, [pc, #148]	@ (80020c0 <SystemInit+0xf0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 030f 	bic.w	r3, r3, #15
 8002032:	4a23      	ldr	r2, [pc, #140]	@ (80020c0 <SystemInit+0xf0>)
 8002034:	f043 0307 	orr.w	r3, r3, #7
 8002038:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800203a:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <SystemInit+0xf4>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002040:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <SystemInit+0xf4>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002046:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <SystemInit+0xf4>)
 8002048:	2200      	movs	r2, #0
 800204a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <SystemInit+0xf4>)
 800204e:	4a1f      	ldr	r2, [pc, #124]	@ (80020cc <SystemInit+0xfc>)
 8002050:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002052:	4b1c      	ldr	r3, [pc, #112]	@ (80020c4 <SystemInit+0xf4>)
 8002054:	4a1e      	ldr	r2, [pc, #120]	@ (80020d0 <SystemInit+0x100>)
 8002056:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <SystemInit+0xf4>)
 800205a:	4a1e      	ldr	r2, [pc, #120]	@ (80020d4 <SystemInit+0x104>)
 800205c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800205e:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <SystemInit+0xf4>)
 8002060:	2200      	movs	r2, #0
 8002062:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <SystemInit+0xf4>)
 8002066:	4a1b      	ldr	r2, [pc, #108]	@ (80020d4 <SystemInit+0x104>)
 8002068:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <SystemInit+0xf4>)
 800206c:	2200      	movs	r2, #0
 800206e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <SystemInit+0xf4>)
 8002072:	4a18      	ldr	r2, [pc, #96]	@ (80020d4 <SystemInit+0x104>)
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002076:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <SystemInit+0xf4>)
 8002078:	2200      	movs	r2, #0
 800207a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <SystemInit+0xf4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a10      	ldr	r2, [pc, #64]	@ (80020c4 <SystemInit+0xf4>)
 8002082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002086:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002088:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <SystemInit+0xf4>)
 800208a:	2200      	movs	r2, #0
 800208c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800208e:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <SystemInit+0x108>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <SystemInit+0x10c>)
 8002094:	4013      	ands	r3, r2
 8002096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800209a:	d202      	bcs.n	80020a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800209c:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <SystemInit+0x110>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <SystemInit+0x114>)
 80020a4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80020a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020aa:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <SystemInit+0xec>)
 80020ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020b0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00
 80020c0:	52002000 	.word	0x52002000
 80020c4:	58024400 	.word	0x58024400
 80020c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80020cc:	02020200 	.word	0x02020200
 80020d0:	01ff0000 	.word	0x01ff0000
 80020d4:	01010280 	.word	0x01010280
 80020d8:	5c001000 	.word	0x5c001000
 80020dc:	ffff0000 	.word	0xffff0000
 80020e0:	51008108 	.word	0x51008108
 80020e4:	52004000 	.word	0x52004000

080020e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	f107 031c 	add.w	r3, r7, #28
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020fa:	463b      	mov	r3, r7
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
 8002108:	615a      	str	r2, [r3, #20]
 800210a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800210c:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <MX_TIM2_Init+0xb0>)
 800210e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8002114:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <MX_TIM2_Init+0xb0>)
 8002116:	2263      	movs	r2, #99	@ 0x63
 8002118:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211a:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <MX_TIM2_Init+0xb0>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002120:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <MX_TIM2_Init+0xb0>)
 8002122:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002126:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <MX_TIM2_Init+0xb0>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800212e:	4b1a      	ldr	r3, [pc, #104]	@ (8002198 <MX_TIM2_Init+0xb0>)
 8002130:	2280      	movs	r2, #128	@ 0x80
 8002132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002134:	4818      	ldr	r0, [pc, #96]	@ (8002198 <MX_TIM2_Init+0xb0>)
 8002136:	f004 fd3a 	bl	8006bae <HAL_TIM_PWM_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002140:	f7ff fe02 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	4619      	mov	r1, r3
 8002152:	4811      	ldr	r0, [pc, #68]	@ (8002198 <MX_TIM2_Init+0xb0>)
 8002154:	f005 fa0c 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800215e:	f7ff fdf3 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002162:	2360      	movs	r3, #96	@ 0x60
 8002164:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002166:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800216a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002174:	463b      	mov	r3, r7
 8002176:	220c      	movs	r2, #12
 8002178:	4619      	mov	r1, r3
 800217a:	4807      	ldr	r0, [pc, #28]	@ (8002198 <MX_TIM2_Init+0xb0>)
 800217c:	f004 fd6e 	bl	8006c5c <HAL_TIM_PWM_ConfigChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002186:	f7ff fddf 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800218a:	4803      	ldr	r0, [pc, #12]	@ (8002198 <MX_TIM2_Init+0xb0>)
 800218c:	f000 f826 	bl	80021dc <HAL_TIM_MspPostInit>

}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	@ 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	24000268 	.word	0x24000268

0800219c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80021b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021b4:	4a08      	ldr	r2, [pc, #32]	@ (80021d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80021c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	58024400 	.word	0x58024400

080021dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021fc:	d11e      	bne.n	800223c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_TIM_MspPostInit+0x68>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002204:	4a0f      	ldr	r2, [pc, #60]	@ (8002244 <HAL_TIM_MspPostInit+0x68>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <HAL_TIM_MspPostInit+0x68>)
 8002210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800221c:	2308      	movs	r3, #8
 800221e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800222c:	2301      	movs	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	4619      	mov	r1, r3
 8002236:	4804      	ldr	r0, [pc, #16]	@ (8002248 <HAL_TIM_MspPostInit+0x6c>)
 8002238:	f000 ff88 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	58024400 	.word	0x58024400
 8002248:	58020000 	.word	0x58020000

0800224c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002250:	4b22      	ldr	r3, [pc, #136]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002252:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <MX_USART1_UART_Init+0x94>)
 8002254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800225c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800226a:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002282:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002288:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800228e:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002290:	2200      	movs	r2, #0
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002294:	4811      	ldr	r0, [pc, #68]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002296:	f005 f9f9 	bl	800768c <HAL_UART_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80022a0:	f7ff fd52 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a4:	2100      	movs	r1, #0
 80022a6:	480d      	ldr	r0, [pc, #52]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 80022a8:	f006 fa01 	bl	80086ae <HAL_UARTEx_SetTxFifoThreshold>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80022b2:	f7ff fd49 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022b6:	2100      	movs	r1, #0
 80022b8:	4808      	ldr	r0, [pc, #32]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 80022ba:	f006 fa36 	bl	800872a <HAL_UARTEx_SetRxFifoThreshold>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022c4:	f7ff fd40 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 80022ca:	f006 f9b7 	bl	800863c <HAL_UARTEx_DisableFifoMode>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022d4:	f7ff fd38 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	240002b4 	.word	0x240002b4
 80022e0:	40011000 	.word	0x40011000

080022e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0ba      	sub	sp, #232	@ 0xe8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	22c0      	movs	r2, #192	@ 0xc0
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f007 ffe4 	bl	800a2d2 <memset>
  if(uartHandle->Instance==USART1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a27      	ldr	r2, [pc, #156]	@ (80023ac <HAL_UART_MspInit+0xc8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d146      	bne.n	80023a2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002314:	f04f 0201 	mov.w	r2, #1
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	4618      	mov	r0, r3
 800232c:	f002 fd7a 	bl	8004e24 <HAL_RCCEx_PeriphCLKConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002336:	f7ff fd07 	bl	8001d48 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800233a:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <HAL_UART_MspInit+0xcc>)
 800233c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002340:	4a1b      	ldr	r2, [pc, #108]	@ (80023b0 <HAL_UART_MspInit+0xcc>)
 8002342:	f043 0310 	orr.w	r3, r3, #16
 8002346:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800234a:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_UART_MspInit+0xcc>)
 800234c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_UART_MspInit+0xcc>)
 800235a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235e:	4a14      	ldr	r2, [pc, #80]	@ (80023b0 <HAL_UART_MspInit+0xcc>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_UART_MspInit+0xcc>)
 800236a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002376:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800237a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002390:	2307      	movs	r3, #7
 8002392:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800239a:	4619      	mov	r1, r3
 800239c:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <HAL_UART_MspInit+0xd0>)
 800239e:	f000 fed5 	bl	800314c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023a2:	bf00      	nop
 80023a4:	37e8      	adds	r7, #232	@ 0xe8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40011000 	.word	0x40011000
 80023b0:	58024400 	.word	0x58024400
 80023b4:	58020000 	.word	0x58020000

080023b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023f0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80023bc:	f7ff fe08 	bl	8001fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023c2:	e003      	b.n	80023cc <LoopCopyDataInit>

080023c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80023c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023ca:	3104      	adds	r1, #4

080023cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023cc:	480a      	ldr	r0, [pc, #40]	@ (80023f8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80023d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023d4:	d3f6      	bcc.n	80023c4 <CopyDataInit>
  ldr  r2, =_sbss
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80023d8:	e002      	b.n	80023e0 <LoopFillZerobss>

080023da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023dc:	f842 3b04 	str.w	r3, [r2], #4

080023e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023e0:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80023e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023e4:	d3f9      	bcc.n	80023da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e6:	f008 f81d 	bl	800a424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ea:	f7ff fbc1 	bl	8001b70 <main>
  bx  lr    
 80023ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80023f4:	0800bd50 	.word	0x0800bd50
  ldr  r0, =_sdata
 80023f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80023fc:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8002400:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 8002404:	24000670 	.word	0x24000670

08002408 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002408:	e7fe      	b.n	8002408 <ADC3_IRQHandler>
	...

0800240c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002412:	2003      	movs	r0, #3
 8002414:	f000 f98c 	bl	8002730 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002418:	f002 fb2e 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_Init+0x68>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	4913      	ldr	r1, [pc, #76]	@ (8002478 <HAL_Init+0x6c>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
 8002434:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002436:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <HAL_Init+0x68>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	4a0e      	ldr	r2, [pc, #56]	@ (8002478 <HAL_Init+0x6c>)
 8002440:	5cd3      	ldrb	r3, [r2, r3]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
 800244c:	4a0b      	ldr	r2, [pc, #44]	@ (800247c <HAL_Init+0x70>)
 800244e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002450:	4a0b      	ldr	r2, [pc, #44]	@ (8002480 <HAL_Init+0x74>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002456:	2000      	movs	r0, #0
 8002458:	f000 f814 	bl	8002484 <HAL_InitTick>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e002      	b.n	800246c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002466:	f7ff fc89 	bl	8001d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024400 	.word	0x58024400
 8002478:	0800b234 	.word	0x0800b234
 800247c:	24000004 	.word	0x24000004
 8002480:	24000000 	.word	0x24000000

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800248c:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <HAL_InitTick+0x60>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e021      	b.n	80024dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <HAL_InitTick+0x64>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <HAL_InitTick+0x60>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f971 	bl	8002796 <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00e      	b.n	80024dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d80a      	bhi.n	80024da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c4:	2200      	movs	r2, #0
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f000 f93b 	bl	8002746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d0:	4a06      	ldr	r2, [pc, #24]	@ (80024ec <HAL_InitTick+0x68>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	2400000c 	.word	0x2400000c
 80024e8:	24000000 	.word	0x24000000
 80024ec:	24000008 	.word	0x24000008

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	2400000c 	.word	0x2400000c
 8002514:	24000348 	.word	0x24000348

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	24000348 	.word	0x24000348

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff ffee 	bl	8002518 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d005      	beq.n	8002556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_Delay+0x44>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002556:	bf00      	nop
 8002558:	f7ff ffde 	bl	8002518 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d8f7      	bhi.n	8002558 <HAL_Delay+0x28>
  {
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2400000c 	.word	0x2400000c

08002578 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800257c:	4b03      	ldr	r3, [pc, #12]	@ (800258c <HAL_GetREVID+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0c1b      	lsrs	r3, r3, #16
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	5c001000 	.word	0x5c001000

08002590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <__NVIC_SetPriorityGrouping+0x40>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <__NVIC_SetPriorityGrouping+0x40>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00
 80025d4:	05fa0000 	.word	0x05fa0000

080025d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db0b      	blt.n	800261e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4907      	ldr	r1, [pc, #28]	@ (800262c <__NVIC_EnableIRQ+0x38>)
 800260e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	@ (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	@ (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
         );
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	@ 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026fc:	d301      	bcc.n	8002702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fe:	2301      	movs	r3, #1
 8002700:	e00f      	b.n	8002722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002702:	4a0a      	ldr	r2, [pc, #40]	@ (800272c <SysTick_Config+0x40>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270a:	210f      	movs	r1, #15
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	f7ff ff8e 	bl	8002630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <SysTick_Config+0x40>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271a:	4b04      	ldr	r3, [pc, #16]	@ (800272c <SysTick_Config+0x40>)
 800271c:	2207      	movs	r2, #7
 800271e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	e000e010 	.word	0xe000e010

08002730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ff29 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002754:	f7ff ff40 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 8002758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff ff90 	bl	8002684 <NVIC_EncodePriority>
 8002764:	4602      	mov	r2, r0
 8002766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff5f 	bl	8002630 <__NVIC_SetPriority>
}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff33 	bl	80025f4 <__NVIC_EnableIRQ>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffa4 	bl	80026ec <SysTick_Config>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e054      	b.n	800286c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7f5b      	ldrb	r3, [r3, #29]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d105      	bne.n	80027d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe fc12 	bl	8000ffc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	791b      	ldrb	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a22      	ldr	r2, [pc, #136]	@ (8002874 <HAL_CRC_Init+0xc4>)
 80027ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0218 	bic.w	r2, r2, #24
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	e00c      	b.n	800281a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	461a      	mov	r2, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f834 	bl	8002878 <HAL_CRCEx_Polynomial_Set>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e028      	b.n	800286c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	795b      	ldrb	r3, [r3, #5]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f04f 32ff 	mov.w	r2, #4294967295
 800282a:	611a      	str	r2, [r3, #16]
 800282c:	e004      	b.n	8002838 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6912      	ldr	r2, [r2, #16]
 8002836:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	04c11db7 	.word	0x04c11db7

08002878 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002888:	231f      	movs	r3, #31
 800288a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
 800289a:	e063      	b.n	8002964 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800289c:	bf00      	nop
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1e5a      	subs	r2, r3, #1
 80028a2:	613a      	str	r2, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d009      	beq.n	80028bc <HAL_CRCEx_Polynomial_Set+0x44>
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b18      	cmp	r3, #24
 80028c0:	d846      	bhi.n	8002950 <HAL_CRCEx_Polynomial_Set+0xd8>
 80028c2:	a201      	add	r2, pc, #4	@ (adr r2, 80028c8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80028c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c8:	08002957 	.word	0x08002957
 80028cc:	08002951 	.word	0x08002951
 80028d0:	08002951 	.word	0x08002951
 80028d4:	08002951 	.word	0x08002951
 80028d8:	08002951 	.word	0x08002951
 80028dc:	08002951 	.word	0x08002951
 80028e0:	08002951 	.word	0x08002951
 80028e4:	08002951 	.word	0x08002951
 80028e8:	08002945 	.word	0x08002945
 80028ec:	08002951 	.word	0x08002951
 80028f0:	08002951 	.word	0x08002951
 80028f4:	08002951 	.word	0x08002951
 80028f8:	08002951 	.word	0x08002951
 80028fc:	08002951 	.word	0x08002951
 8002900:	08002951 	.word	0x08002951
 8002904:	08002951 	.word	0x08002951
 8002908:	08002939 	.word	0x08002939
 800290c:	08002951 	.word	0x08002951
 8002910:	08002951 	.word	0x08002951
 8002914:	08002951 	.word	0x08002951
 8002918:	08002951 	.word	0x08002951
 800291c:	08002951 	.word	0x08002951
 8002920:	08002951 	.word	0x08002951
 8002924:	08002951 	.word	0x08002951
 8002928:	0800292d 	.word	0x0800292d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b06      	cmp	r3, #6
 8002930:	d913      	bls.n	800295a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002936:	e010      	b.n	800295a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b07      	cmp	r3, #7
 800293c:	d90f      	bls.n	800295e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002942:	e00c      	b.n	800295e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	d90b      	bls.n	8002962 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800294e:	e008      	b.n	8002962 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	75fb      	strb	r3, [r7, #23]
        break;
 8002954:	e006      	b.n	8002964 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002956:	bf00      	nop
 8002958:	e004      	b.n	8002964 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800295a:	bf00      	nop
 800295c:	e002      	b.n	8002964 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800295e:	bf00      	nop
 8002960:	e000      	b.n	8002964 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002962:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 0118 	bic.w	r1, r3, #24
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002986:	7dfb      	ldrb	r3, [r7, #23]
}
 8002988:	4618      	mov	r0, r3
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e04f      	b.n	8002a46 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fb7a 	bl	80010b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <HAL_DMA2D_Init+0xbc>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6851      	ldr	r1, [r2, #4]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	69d2      	ldr	r2, [r2, #28]
 80029da:	4311      	orrs	r1, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002a54 <HAL_DMA2D_Init+0xc0>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6891      	ldr	r1, [r2, #8]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6992      	ldr	r2, [r2, #24]
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a06:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_DMA2D_Init+0xc4>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68d1      	ldr	r1, [r2, #12]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	430b      	orrs	r3, r1
 8002a14:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	051a      	lsls	r2, r3, #20
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	055b      	lsls	r3, r3, #21
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	fff8ffbf 	.word	0xfff8ffbf
 8002a54:	fffffef8 	.word	0xfffffef8
 8002a58:	ffff0000 	.word	0xffff0000

08002a5c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_DMA2D_Start+0x1c>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e018      	b.n	8002aaa <HAL_DMA2D_Start+0x4e>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fab4 	bl	8003000 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d056      	beq.n	8002b7c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ace:	f7ff fd23 	bl	8002518 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002ad4:	e04b      	b.n	8002b6e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d023      	beq.n	8002b30 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002af6:	f043 0202 	orr.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2221      	movs	r2, #33	@ 0x21
 8002b1a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2204      	movs	r2, #4
 8002b20:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0a5      	b.n	8002c7c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d01a      	beq.n	8002b6e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b38:	f7ff fcee 	bl	8002518 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <HAL_DMA2D_PollForTransfer+0x9c>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e086      	b.n	8002c7c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ac      	beq.n	8002ad6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d061      	beq.n	8002c62 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b9e:	f7ff fcbb 	bl	8002518 <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002ba4:	e056      	b.n	8002c54 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d02e      	beq.n	8002c16 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bc6:	f043 0204 	orr.w	r2, r3, #4
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bdc:	f043 0202 	orr.w	r2, r3, #2
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2229      	movs	r2, #41	@ 0x29
 8002c00:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2204      	movs	r2, #4
 8002c06:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e032      	b.n	8002c7c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d01a      	beq.n	8002c54 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7ff fc7b 	bl	8002518 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <HAL_DMA2D_PollForTransfer+0x182>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10f      	bne.n	8002c54 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2203      	movs	r2, #3
 8002c44:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e013      	b.n	8002c7c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0a1      	beq.n	8002ba6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2212      	movs	r2, #18
 8002c68:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d026      	beq.n	8002cf4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d021      	beq.n	8002cf4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d026      	beq.n	8002d4c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d021      	beq.n	8002d4c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d16:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d24:	f043 0202 	orr.w	r2, r3, #2
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d026      	beq.n	8002da4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d021      	beq.n	8002da4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2208      	movs	r2, #8
 8002d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2204      	movs	r2, #4
 8002d88:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d013      	beq.n	8002dd6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00e      	beq.n	8002dd6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f853 	bl	8002e7c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d024      	beq.n	8002e2a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01f      	beq.n	8002e2a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002df8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01f      	beq.n	8002e74 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01a      	beq.n	8002e74 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2210      	movs	r2, #16
 8002e54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f80e 	bl	8002e90 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_DMA2D_ConfigLayer+0x24>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e092      	b.n	8002fee <HAL_DMA2D_ConfigLayer+0x14a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	3328      	adds	r3, #40	@ 0x28
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002efc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002f08:	4b3c      	ldr	r3, [pc, #240]	@ (8002ffc <HAL_DMA2D_ConfigLayer+0x158>)
 8002f0a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b0a      	cmp	r3, #10
 8002f12:	d003      	beq.n	8002f1c <HAL_DMA2D_ConfigLayer+0x78>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b09      	cmp	r3, #9
 8002f1a:	d107      	bne.n	8002f2c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	e005      	b.n	8002f38 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d120      	bne.n	8002f80 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	ea02 0103 	and.w	r1, r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b0a      	cmp	r3, #10
 8002f66:	d003      	beq.n	8002f70 <HAL_DMA2D_ConfigLayer+0xcc>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d135      	bne.n	8002fdc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002f7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f7e:	e02d      	b.n	8002fdc <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b0b      	cmp	r3, #11
 8002f86:	d109      	bne.n	8002f9c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	049b      	lsls	r3, r3, #18
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002f9a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	ea02 0103 	and.w	r1, r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b0a      	cmp	r3, #10
 8002fc4:	d003      	beq.n	8002fce <HAL_DMA2D_ConfigLayer+0x12a>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	d106      	bne.n	8002fdc <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002fda:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	ff33000f 	.word	0xff33000f

08003000 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003000:	b480      	push	{r7}
 8003002:	b08b      	sub	sp, #44	@ 0x2c
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003014:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	041a      	lsls	r2, r3, #16
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	431a      	orrs	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003038:	d174      	bne.n	8003124 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003040:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003048:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003050:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d108      	bne.n	8003072 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	431a      	orrs	r2, r3
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	4313      	orrs	r3, r2
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003070:	e053      	b.n	800311a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d106      	bne.n	8003088 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	4313      	orrs	r3, r2
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
 8003086:	e048      	b.n	800311a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d111      	bne.n	80030b4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	0cdb      	lsrs	r3, r3, #19
 8003094:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	0a9b      	lsrs	r3, r3, #10
 800309a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	08db      	lsrs	r3, r3, #3
 80030a0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	02db      	lsls	r3, r3, #11
 80030aa:	4313      	orrs	r3, r2
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b2:	e032      	b.n	800311a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d117      	bne.n	80030ec <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	0fdb      	lsrs	r3, r3, #31
 80030c0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	0cdb      	lsrs	r3, r3, #19
 80030c6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	0adb      	lsrs	r3, r3, #11
 80030cc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	029b      	lsls	r3, r3, #10
 80030dc:	431a      	orrs	r2, r3
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	03db      	lsls	r3, r3, #15
 80030e2:	4313      	orrs	r3, r2
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ea:	e016      	b.n	800311a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	0f1b      	lsrs	r3, r3, #28
 80030f0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	0d1b      	lsrs	r3, r3, #20
 80030f6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	0b1b      	lsrs	r3, r3, #12
 80030fc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	011a      	lsls	r2, r3, #4
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	431a      	orrs	r2, r3
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	031b      	lsls	r3, r3, #12
 8003112:	4313      	orrs	r3, r2
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003120:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003122:	e00d      	b.n	8003140 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800312c:	d104      	bne.n	8003138 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	615a      	str	r2, [r3, #20]
}
 8003136:	e003      	b.n	8003140 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	60da      	str	r2, [r3, #12]
}
 8003140:	bf00      	nop
 8003142:	372c      	adds	r7, #44	@ 0x2c
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	@ 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800315a:	4b89      	ldr	r3, [pc, #548]	@ (8003380 <HAL_GPIO_Init+0x234>)
 800315c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800315e:	e194      	b.n	800348a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	2101      	movs	r1, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 8186 	beq.w	8003484 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d005      	beq.n	8003190 <HAL_GPIO_Init+0x44>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d130      	bne.n	80031f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031c6:	2201      	movs	r2, #1
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	f003 0201 	and.w	r2, r3, #1
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d017      	beq.n	800322e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	2203      	movs	r2, #3
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d123      	bne.n	8003282 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	08da      	lsrs	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3208      	adds	r2, #8
 8003242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	220f      	movs	r2, #15
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	08da      	lsrs	r2, r3, #3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3208      	adds	r2, #8
 800327c:	69b9      	ldr	r1, [r7, #24]
 800327e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	2203      	movs	r2, #3
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0203 	and.w	r2, r3, #3
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80e0 	beq.w	8003484 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003384 <HAL_GPIO_Init+0x238>)
 80032c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003384 <HAL_GPIO_Init+0x238>)
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80032d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003384 <HAL_GPIO_Init+0x238>)
 80032d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032e2:	4a29      	ldr	r2, [pc, #164]	@ (8003388 <HAL_GPIO_Init+0x23c>)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	3302      	adds	r3, #2
 80032ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a20      	ldr	r2, [pc, #128]	@ (800338c <HAL_GPIO_Init+0x240>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d052      	beq.n	80033b4 <HAL_GPIO_Init+0x268>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <HAL_GPIO_Init+0x244>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d031      	beq.n	800337a <HAL_GPIO_Init+0x22e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1e      	ldr	r2, [pc, #120]	@ (8003394 <HAL_GPIO_Init+0x248>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d02b      	beq.n	8003376 <HAL_GPIO_Init+0x22a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <HAL_GPIO_Init+0x24c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d025      	beq.n	8003372 <HAL_GPIO_Init+0x226>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a1c      	ldr	r2, [pc, #112]	@ (800339c <HAL_GPIO_Init+0x250>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01f      	beq.n	800336e <HAL_GPIO_Init+0x222>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a1b      	ldr	r2, [pc, #108]	@ (80033a0 <HAL_GPIO_Init+0x254>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d019      	beq.n	800336a <HAL_GPIO_Init+0x21e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a1a      	ldr	r2, [pc, #104]	@ (80033a4 <HAL_GPIO_Init+0x258>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_GPIO_Init+0x21a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a19      	ldr	r2, [pc, #100]	@ (80033a8 <HAL_GPIO_Init+0x25c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00d      	beq.n	8003362 <HAL_GPIO_Init+0x216>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a18      	ldr	r2, [pc, #96]	@ (80033ac <HAL_GPIO_Init+0x260>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <HAL_GPIO_Init+0x212>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a17      	ldr	r2, [pc, #92]	@ (80033b0 <HAL_GPIO_Init+0x264>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_GPIO_Init+0x20e>
 8003356:	2309      	movs	r3, #9
 8003358:	e02d      	b.n	80033b6 <HAL_GPIO_Init+0x26a>
 800335a:	230a      	movs	r3, #10
 800335c:	e02b      	b.n	80033b6 <HAL_GPIO_Init+0x26a>
 800335e:	2308      	movs	r3, #8
 8003360:	e029      	b.n	80033b6 <HAL_GPIO_Init+0x26a>
 8003362:	2307      	movs	r3, #7
 8003364:	e027      	b.n	80033b6 <HAL_GPIO_Init+0x26a>
 8003366:	2306      	movs	r3, #6
 8003368:	e025      	b.n	80033b6 <HAL_GPIO_Init+0x26a>
 800336a:	2305      	movs	r3, #5
 800336c:	e023      	b.n	80033b6 <HAL_GPIO_Init+0x26a>
 800336e:	2304      	movs	r3, #4
 8003370:	e021      	b.n	80033b6 <HAL_GPIO_Init+0x26a>
 8003372:	2303      	movs	r3, #3
 8003374:	e01f      	b.n	80033b6 <HAL_GPIO_Init+0x26a>
 8003376:	2302      	movs	r3, #2
 8003378:	e01d      	b.n	80033b6 <HAL_GPIO_Init+0x26a>
 800337a:	2301      	movs	r3, #1
 800337c:	e01b      	b.n	80033b6 <HAL_GPIO_Init+0x26a>
 800337e:	bf00      	nop
 8003380:	58000080 	.word	0x58000080
 8003384:	58024400 	.word	0x58024400
 8003388:	58000400 	.word	0x58000400
 800338c:	58020000 	.word	0x58020000
 8003390:	58020400 	.word	0x58020400
 8003394:	58020800 	.word	0x58020800
 8003398:	58020c00 	.word	0x58020c00
 800339c:	58021000 	.word	0x58021000
 80033a0:	58021400 	.word	0x58021400
 80033a4:	58021800 	.word	0x58021800
 80033a8:	58021c00 	.word	0x58021c00
 80033ac:	58022000 	.word	0x58022000
 80033b0:	58022400 	.word	0x58022400
 80033b4:	2300      	movs	r3, #0
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	f002 0203 	and.w	r2, r2, #3
 80033bc:	0092      	lsls	r2, r2, #2
 80033be:	4093      	lsls	r3, r2
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033c6:	4938      	ldr	r1, [pc, #224]	@ (80034a8 <HAL_GPIO_Init+0x35c>)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3302      	adds	r3, #2
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80033fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003428:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	3301      	adds	r3, #1
 8003488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	f47f ae63 	bne.w	8003160 <HAL_GPIO_Init+0x14>
  }
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	3724      	adds	r7, #36	@ 0x24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	58000400 	.word	0x58000400

080034ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
 80034c8:	e001      	b.n	80034ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ca:	2300      	movs	r3, #0
 80034cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
 80034e8:	4613      	mov	r3, r2
 80034ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ec:	787b      	ldrb	r3, [r7, #1]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f2:	887a      	ldrh	r2, [r7, #2]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034f8:	e003      	b.n	8003502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034fa:	887b      	ldrh	r3, [r7, #2]
 80034fc:	041a      	lsls	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	619a      	str	r2, [r3, #24]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800351c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003528:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 f804 	bl	8003542 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e08b      	b.n	8003682 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe f834 	bl	80015ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	@ 0x24
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d107      	bne.n	80035d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	e006      	b.n	80035e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d108      	bne.n	80035fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	e007      	b.n	800360a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b1d      	ldr	r3, [pc, #116]	@ (800368c <HAL_I2C_Init+0x134>)
 8003616:	430b      	orrs	r3, r1
 8003618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69d9      	ldr	r1, [r3, #28]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1a      	ldr	r2, [r3, #32]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	02008000 	.word	0x02008000

08003690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d138      	bne.n	8003718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e032      	b.n	800371a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	@ 0x24
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	d139      	bne.n	80037b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003746:	2302      	movs	r3, #2
 8003748:	e033      	b.n	80037b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2224      	movs	r2, #36	@ 0x24
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e08f      	b.n	80038f0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fd ffed 	bl	80017c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003800:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6999      	ldr	r1, [r3, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003816:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	041b      	lsls	r3, r3, #16
 800382c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6999      	ldr	r1, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a19      	ldr	r1, [r3, #32]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	430a      	orrs	r2, r1
 8003850:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	041b      	lsls	r3, r3, #16
 8003858:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	430a      	orrs	r2, r1
 8003866:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	430a      	orrs	r2, r1
 800387c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80038a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0206 	orr.w	r2, r2, #6
 80038cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003906:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b00      	cmp	r3, #0
 8003918:	d023      	beq.n	8003962 <HAL_LTDC_IRQHandler+0x6a>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01e      	beq.n	8003962 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0204 	bic.w	r2, r2, #4
 8003932:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2204      	movs	r2, #4
 800393a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2204      	movs	r2, #4
 8003950:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f86f 	bl	8003a40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d023      	beq.n	80039b4 <HAL_LTDC_IRQHandler+0xbc>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01e      	beq.n	80039b4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0202 	bic.w	r2, r2, #2
 8003984:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2202      	movs	r2, #2
 800398c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003994:	f043 0202 	orr.w	r2, r3, #2
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2204      	movs	r2, #4
 80039a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f846 	bl	8003a40 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01b      	beq.n	80039f6 <HAL_LTDC_IRQHandler+0xfe>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d016      	beq.n	80039f6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f82f 	bl	8003a54 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_LTDC_IRQHandler+0x140>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d016      	beq.n	8003a38 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0208 	bic.w	r2, r2, #8
 8003a18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2208      	movs	r2, #8
 8003a20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f818 	bl	8003a68 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a7c:	b5b0      	push	{r4, r5, r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_LTDC_ConfigLayer+0x1a>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e02c      	b.n	8003af0 <HAL_LTDC_ConfigLayer+0x74>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2134      	movs	r1, #52	@ 0x34
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4614      	mov	r4, r2
 8003aba:	461d      	mov	r5, r3
 8003abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f811 	bl	8003af8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bdb0      	pop	{r4, r5, r7, pc}

08003af8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	@ 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b14:	4413      	add	r3, r2
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	01db      	lsls	r3, r3, #7
 8003b24:	4413      	add	r3, r2
 8003b26:	3384      	adds	r3, #132	@ 0x84
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	01d2      	lsls	r2, r2, #7
 8003b34:	440a      	add	r2, r1
 8003b36:	3284      	adds	r2, #132	@ 0x84
 8003b38:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003b3c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0c1b      	lsrs	r3, r3, #16
 8003b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b4e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b50:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4619      	mov	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	01db      	lsls	r3, r3, #7
 8003b5c:	440b      	add	r3, r1
 8003b5e:	3384      	adds	r3, #132	@ 0x84
 8003b60:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b66:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b76:	4413      	add	r3, r2
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	01db      	lsls	r3, r3, #7
 8003b86:	4413      	add	r3, r2
 8003b88:	3384      	adds	r3, #132	@ 0x84
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	4611      	mov	r1, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	01d2      	lsls	r2, r2, #7
 8003b96:	440a      	add	r2, r1
 8003b98:	3284      	adds	r2, #132	@ 0x84
 8003b9a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003b9e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bae:	4413      	add	r3, r2
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	01db      	lsls	r3, r3, #7
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3384      	adds	r3, #132	@ 0x84
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	01db      	lsls	r3, r3, #7
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3384      	adds	r3, #132	@ 0x84
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	01d2      	lsls	r2, r2, #7
 8003be2:	440a      	add	r2, r1
 8003be4:	3284      	adds	r2, #132	@ 0x84
 8003be6:	f023 0307 	bic.w	r3, r3, #7
 8003bea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	01db      	lsls	r3, r3, #7
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3384      	adds	r3, #132	@ 0x84
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	061b      	lsls	r3, r3, #24
 8003c1c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c24:	461a      	mov	r2, r3
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4619      	mov	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	01db      	lsls	r3, r3, #7
 8003c38:	440b      	add	r3, r1
 8003c3a:	3384      	adds	r3, #132	@ 0x84
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	01db      	lsls	r3, r3, #7
 8003c4e:	4413      	add	r3, r2
 8003c50:	3384      	adds	r3, #132	@ 0x84
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	4611      	mov	r1, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	01d2      	lsls	r2, r2, #7
 8003c5e:	440a      	add	r2, r1
 8003c60:	3284      	adds	r2, #132	@ 0x84
 8003c62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c66:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	01db      	lsls	r3, r3, #7
 8003c72:	4413      	add	r3, r2
 8003c74:	3384      	adds	r3, #132	@ 0x84
 8003c76:	461a      	mov	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	01db      	lsls	r3, r3, #7
 8003c88:	4413      	add	r3, r2
 8003c8a:	3384      	adds	r3, #132	@ 0x84
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4619      	mov	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	01db      	lsls	r3, r3, #7
 8003c98:	440b      	add	r3, r1
 8003c9a:	3384      	adds	r3, #132	@ 0x84
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8003ddc <LTDC_SetConfig+0x2e4>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	68f9      	ldr	r1, [r7, #12]
 8003cae:	6809      	ldr	r1, [r1, #0]
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	01c9      	lsls	r1, r1, #7
 8003cb6:	4401      	add	r1, r0
 8003cb8:	3184      	adds	r1, #132	@ 0x84
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	01db      	lsls	r3, r3, #7
 8003cc8:	4413      	add	r3, r2
 8003cca:	3384      	adds	r3, #132	@ 0x84
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8003cdc:	2304      	movs	r3, #4
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	e01b      	b.n	8003d1a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d102      	bne.n	8003cf0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8003cea:	2303      	movs	r3, #3
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e014      	b.n	8003d1a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d00b      	beq.n	8003d10 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d007      	beq.n	8003d10 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d003      	beq.n	8003d10 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d0c:	2b07      	cmp	r3, #7
 8003d0e:	d102      	bne.n	8003d16 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8003d10:	2302      	movs	r3, #2
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	e001      	b.n	8003d1a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8003d16:	2301      	movs	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	4413      	add	r3, r2
 8003d26:	3384      	adds	r3, #132	@ 0x84
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	4611      	mov	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	01d2      	lsls	r2, r2, #7
 8003d34:	440a      	add	r2, r1
 8003d36:	3284      	adds	r2, #132	@ 0x84
 8003d38:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1acb      	subs	r3, r1, r3
 8003d54:	69f9      	ldr	r1, [r7, #28]
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	6809      	ldr	r1, [r1, #0]
 8003d60:	4608      	mov	r0, r1
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	01c9      	lsls	r1, r1, #7
 8003d66:	4401      	add	r1, r0
 8003d68:	3184      	adds	r1, #132	@ 0x84
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	01db      	lsls	r3, r3, #7
 8003d78:	4413      	add	r3, r2
 8003d7a:	3384      	adds	r3, #132	@ 0x84
 8003d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4619      	mov	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	01db      	lsls	r3, r3, #7
 8003d88:	440b      	add	r3, r1
 8003d8a:	3384      	adds	r3, #132	@ 0x84
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4b14      	ldr	r3, [pc, #80]	@ (8003de0 <LTDC_SetConfig+0x2e8>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	01db      	lsls	r3, r3, #7
 8003d9e:	4413      	add	r3, r2
 8003da0:	3384      	adds	r3, #132	@ 0x84
 8003da2:	461a      	mov	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	01db      	lsls	r3, r3, #7
 8003db4:	4413      	add	r3, r2
 8003db6:	3384      	adds	r3, #132	@ 0x84
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	01d2      	lsls	r2, r2, #7
 8003dc4:	440a      	add	r2, r1
 8003dc6:	3284      	adds	r2, #132	@ 0x84
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6013      	str	r3, [r2, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	3724      	adds	r7, #36	@ 0x24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	fffff8f8 	.word	0xfffff8f8
 8003de0:	fffff800 	.word	0xfffff800

08003de4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003dec:	4b19      	ldr	r3, [pc, #100]	@ (8003e54 <HAL_PWREx_ConfigSupply+0x70>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d00a      	beq.n	8003e0e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003df8:	4b16      	ldr	r3, [pc, #88]	@ (8003e54 <HAL_PWREx_ConfigSupply+0x70>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d001      	beq.n	8003e0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e01f      	b.n	8003e4a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e01d      	b.n	8003e4a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e0e:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <HAL_PWREx_ConfigSupply+0x70>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 0207 	bic.w	r2, r3, #7
 8003e16:	490f      	ldr	r1, [pc, #60]	@ (8003e54 <HAL_PWREx_ConfigSupply+0x70>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e1e:	f7fe fb7b 	bl	8002518 <HAL_GetTick>
 8003e22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e24:	e009      	b.n	8003e3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e26:	f7fe fb77 	bl	8002518 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e34:	d901      	bls.n	8003e3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e007      	b.n	8003e4a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <HAL_PWREx_ConfigSupply+0x70>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e46:	d1ee      	bne.n	8003e26 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	58024800 	.word	0x58024800

08003e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	@ 0x30
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f000 bc48 	b.w	80046fc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8088 	beq.w	8003f8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7a:	4b99      	ldr	r3, [pc, #612]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e84:	4b96      	ldr	r3, [pc, #600]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d007      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x48>
 8003e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e92:	2b18      	cmp	r3, #24
 8003e94:	d111      	bne.n	8003eba <HAL_RCC_OscConfig+0x62>
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d06d      	beq.n	8003f88 <HAL_RCC_OscConfig+0x130>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d169      	bne.n	8003f88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f000 bc21 	b.w	80046fc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x7a>
 8003ec4:	4b86      	ldr	r3, [pc, #536]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a85      	ldr	r2, [pc, #532]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e02e      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x9c>
 8003eda:	4b81      	ldr	r3, [pc, #516]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a80      	ldr	r2, [pc, #512]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b7e      	ldr	r3, [pc, #504]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7d      	ldr	r2, [pc, #500]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e01d      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0xc0>
 8003efe:	4b78      	ldr	r3, [pc, #480]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a77      	ldr	r2, [pc, #476]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b75      	ldr	r3, [pc, #468]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a74      	ldr	r2, [pc, #464]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003f18:	4b71      	ldr	r3, [pc, #452]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a70      	ldr	r2, [pc, #448]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b6e      	ldr	r3, [pc, #440]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6d      	ldr	r2, [pc, #436]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe faee 	bl	8002518 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fe faea 	bl	8002518 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	@ 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e3d4      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f52:	4b63      	ldr	r3, [pc, #396]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0xe8>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe fada 	bl	8002518 <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f68:	f7fe fad6 	bl	8002518 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	@ 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e3c0      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f7a:	4b59      	ldr	r3, [pc, #356]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x110>
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80ca 	beq.w	800412c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f98:	4b51      	ldr	r3, [pc, #324]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fa0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d007      	beq.n	8003fbe <HAL_RCC_OscConfig+0x166>
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	2b18      	cmp	r3, #24
 8003fb2:	d156      	bne.n	8004062 <HAL_RCC_OscConfig+0x20a>
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d151      	bne.n	8004062 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fbe:	4b48      	ldr	r3, [pc, #288]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x17e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e392      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fd6:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 0219 	bic.w	r2, r3, #25
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	493f      	ldr	r1, [pc, #252]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fa96 	bl	8002518 <HAL_GetTick>
 8003fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fe fa92 	bl	8002518 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e37c      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004002:	4b37      	ldr	r3, [pc, #220]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400e:	f7fe fab3 	bl	8002578 <HAL_GetREVID>
 8004012:	4603      	mov	r3, r0
 8004014:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004018:	4293      	cmp	r3, r2
 800401a:	d817      	bhi.n	800404c <HAL_RCC_OscConfig+0x1f4>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	d108      	bne.n	8004036 <HAL_RCC_OscConfig+0x1de>
 8004024:	4b2e      	ldr	r3, [pc, #184]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800402c:	4a2c      	ldr	r2, [pc, #176]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 800402e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004032:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004034:	e07a      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004036:	4b2a      	ldr	r3, [pc, #168]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	031b      	lsls	r3, r3, #12
 8004044:	4926      	ldr	r1, [pc, #152]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004046:	4313      	orrs	r3, r2
 8004048:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800404a:	e06f      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404c:	4b24      	ldr	r3, [pc, #144]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	4921      	ldr	r1, [pc, #132]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004060:	e064      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d047      	beq.n	80040fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800406a:	4b1d      	ldr	r3, [pc, #116]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 0219 	bic.w	r2, r3, #25
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	491a      	ldr	r1, [pc, #104]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004078:	4313      	orrs	r3, r2
 800407a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fe fa4c 	bl	8002518 <HAL_GetTick>
 8004080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004084:	f7fe fa48 	bl	8002518 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e332      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004096:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	f7fe fa69 	bl	8002578 <HAL_GetREVID>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d819      	bhi.n	80040e4 <HAL_RCC_OscConfig+0x28c>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b40      	cmp	r3, #64	@ 0x40
 80040b6:	d108      	bne.n	80040ca <HAL_RCC_OscConfig+0x272>
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80040c0:	4a07      	ldr	r2, [pc, #28]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 80040c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040c6:	6053      	str	r3, [r2, #4]
 80040c8:	e030      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
 80040ca:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	031b      	lsls	r3, r3, #12
 80040d8:	4901      	ldr	r1, [pc, #4]	@ (80040e0 <HAL_RCC_OscConfig+0x288>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	604b      	str	r3, [r1, #4]
 80040de:	e025      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
 80040e0:	58024400 	.word	0x58024400
 80040e4:	4b9a      	ldr	r3, [pc, #616]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	4997      	ldr	r1, [pc, #604]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
 80040f8:	e018      	b.n	800412c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fa:	4b95      	ldr	r3, [pc, #596]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a94      	ldr	r2, [pc, #592]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fe fa07 	bl	8002518 <HAL_GetTick>
 800410a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410e:	f7fe fa03 	bl	8002518 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e2ed      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004120:	4b8b      	ldr	r3, [pc, #556]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f0      	bne.n	800410e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a9 	beq.w	800428c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413a:	4b85      	ldr	r3, [pc, #532]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004142:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004144:	4b82      	ldr	r3, [pc, #520]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d007      	beq.n	8004160 <HAL_RCC_OscConfig+0x308>
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b18      	cmp	r3, #24
 8004154:	d13a      	bne.n	80041cc <HAL_RCC_OscConfig+0x374>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d135      	bne.n	80041cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004160:	4b7b      	ldr	r3, [pc, #492]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_OscConfig+0x320>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	2b80      	cmp	r3, #128	@ 0x80
 8004172:	d001      	beq.n	8004178 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e2c1      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004178:	f7fe f9fe 	bl	8002578 <HAL_GetREVID>
 800417c:	4603      	mov	r3, r0
 800417e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004182:	4293      	cmp	r3, r2
 8004184:	d817      	bhi.n	80041b6 <HAL_RCC_OscConfig+0x35e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	2b20      	cmp	r3, #32
 800418c:	d108      	bne.n	80041a0 <HAL_RCC_OscConfig+0x348>
 800418e:	4b70      	ldr	r3, [pc, #448]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004196:	4a6e      	ldr	r2, [pc, #440]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004198:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800419c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800419e:	e075      	b.n	800428c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	069b      	lsls	r3, r3, #26
 80041ae:	4968      	ldr	r1, [pc, #416]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041b4:	e06a      	b.n	800428c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041b6:	4b66      	ldr	r3, [pc, #408]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	061b      	lsls	r3, r3, #24
 80041c4:	4962      	ldr	r1, [pc, #392]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041ca:	e05f      	b.n	800428c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d042      	beq.n	800425a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fe f99a 	bl	8002518 <HAL_GetTick>
 80041e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041e8:	f7fe f996 	bl	8002518 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e280      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041fa:	4b55      	ldr	r3, [pc, #340]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004206:	f7fe f9b7 	bl	8002578 <HAL_GetREVID>
 800420a:	4603      	mov	r3, r0
 800420c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004210:	4293      	cmp	r3, r2
 8004212:	d817      	bhi.n	8004244 <HAL_RCC_OscConfig+0x3ec>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	2b20      	cmp	r3, #32
 800421a:	d108      	bne.n	800422e <HAL_RCC_OscConfig+0x3d6>
 800421c:	4b4c      	ldr	r3, [pc, #304]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004224:	4a4a      	ldr	r2, [pc, #296]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004226:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800422a:	6053      	str	r3, [r2, #4]
 800422c:	e02e      	b.n	800428c <HAL_RCC_OscConfig+0x434>
 800422e:	4b48      	ldr	r3, [pc, #288]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	069b      	lsls	r3, r3, #26
 800423c:	4944      	ldr	r1, [pc, #272]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
 8004242:	e023      	b.n	800428c <HAL_RCC_OscConfig+0x434>
 8004244:	4b42      	ldr	r3, [pc, #264]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	493f      	ldr	r1, [pc, #252]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	60cb      	str	r3, [r1, #12]
 8004258:	e018      	b.n	800428c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800425a:	4b3d      	ldr	r3, [pc, #244]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a3c      	ldr	r2, [pc, #240]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fe f957 	bl	8002518 <HAL_GetTick>
 800426a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800426e:	f7fe f953 	bl	8002518 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e23d      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004280:	4b33      	ldr	r3, [pc, #204]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d036      	beq.n	8004306 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d019      	beq.n	80042d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fe f934 	bl	8002518 <HAL_GetTick>
 80042b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b4:	f7fe f930 	bl	8002518 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e21a      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042c6:	4b22      	ldr	r3, [pc, #136]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x45c>
 80042d2:	e018      	b.n	8004306 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fe f91a 	bl	8002518 <HAL_GetTick>
 80042e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e8:	f7fe f916 	bl	8002518 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e200      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 80042fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d039      	beq.n	8004386 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01c      	beq.n	8004354 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a0c      	ldr	r2, [pc, #48]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004320:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004324:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004326:	f7fe f8f7 	bl	8002518 <HAL_GetTick>
 800432a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800432e:	f7fe f8f3 	bl	8002518 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e1dd      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004340:	4b03      	ldr	r3, [pc, #12]	@ (8004350 <HAL_RCC_OscConfig+0x4f8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x4d6>
 800434c:	e01b      	b.n	8004386 <HAL_RCC_OscConfig+0x52e>
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004354:	4b9b      	ldr	r3, [pc, #620]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a9a      	ldr	r2, [pc, #616]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800435a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800435e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004360:	f7fe f8da 	bl	8002518 <HAL_GetTick>
 8004364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004368:	f7fe f8d6 	bl	8002518 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1c0      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800437a:	4b92      	ldr	r3, [pc, #584]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8081 	beq.w	8004496 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004394:	4b8c      	ldr	r3, [pc, #560]	@ (80045c8 <HAL_RCC_OscConfig+0x770>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a8b      	ldr	r2, [pc, #556]	@ (80045c8 <HAL_RCC_OscConfig+0x770>)
 800439a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800439e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a0:	f7fe f8ba 	bl	8002518 <HAL_GetTick>
 80043a4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a8:	f7fe f8b6 	bl	8002518 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	@ 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1a0      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043ba:	4b83      	ldr	r3, [pc, #524]	@ (80045c8 <HAL_RCC_OscConfig+0x770>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d106      	bne.n	80043dc <HAL_RCC_OscConfig+0x584>
 80043ce:	4b7d      	ldr	r3, [pc, #500]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	4a7c      	ldr	r2, [pc, #496]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043da:	e02d      	b.n	8004438 <HAL_RCC_OscConfig+0x5e0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10c      	bne.n	80043fe <HAL_RCC_OscConfig+0x5a6>
 80043e4:	4b77      	ldr	r3, [pc, #476]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	4a76      	ldr	r2, [pc, #472]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f0:	4b74      	ldr	r3, [pc, #464]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f4:	4a73      	ldr	r2, [pc, #460]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80043f6:	f023 0304 	bic.w	r3, r3, #4
 80043fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80043fc:	e01c      	b.n	8004438 <HAL_RCC_OscConfig+0x5e0>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b05      	cmp	r3, #5
 8004404:	d10c      	bne.n	8004420 <HAL_RCC_OscConfig+0x5c8>
 8004406:	4b6f      	ldr	r3, [pc, #444]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	4a6e      	ldr	r2, [pc, #440]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800440c:	f043 0304 	orr.w	r3, r3, #4
 8004410:	6713      	str	r3, [r2, #112]	@ 0x70
 8004412:	4b6c      	ldr	r3, [pc, #432]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	4a6b      	ldr	r2, [pc, #428]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	6713      	str	r3, [r2, #112]	@ 0x70
 800441e:	e00b      	b.n	8004438 <HAL_RCC_OscConfig+0x5e0>
 8004420:	4b68      	ldr	r3, [pc, #416]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	4a67      	ldr	r2, [pc, #412]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	6713      	str	r3, [r2, #112]	@ 0x70
 800442c:	4b65      	ldr	r3, [pc, #404]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	4a64      	ldr	r2, [pc, #400]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004432:	f023 0304 	bic.w	r3, r3, #4
 8004436:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d015      	beq.n	800446c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fe f86a 	bl	8002518 <HAL_GetTick>
 8004444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004446:	e00a      	b.n	800445e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	f7fe f866 	bl	8002518 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e14e      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800445e:	4b59      	ldr	r3, [pc, #356]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ee      	beq.n	8004448 <HAL_RCC_OscConfig+0x5f0>
 800446a:	e014      	b.n	8004496 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fe f854 	bl	8002518 <HAL_GetTick>
 8004470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004472:	e00a      	b.n	800448a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004474:	f7fe f850 	bl	8002518 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e138      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800448a:	4b4e      	ldr	r3, [pc, #312]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1ee      	bne.n	8004474 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 812d 	beq.w	80046fa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044a0:	4b48      	ldr	r3, [pc, #288]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044a8:	2b18      	cmp	r3, #24
 80044aa:	f000 80bd 	beq.w	8004628 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	f040 809e 	bne.w	80045f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b8:	4b42      	ldr	r3, [pc, #264]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a41      	ldr	r2, [pc, #260]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80044be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fe f828 	bl	8002518 <HAL_GetTick>
 80044c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fe f824 	bl	8002518 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e10e      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044de:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ea:	4b36      	ldr	r3, [pc, #216]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80044ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044ee:	4b37      	ldr	r3, [pc, #220]	@ (80045cc <HAL_RCC_OscConfig+0x774>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044fa:	0112      	lsls	r2, r2, #4
 80044fc:	430a      	orrs	r2, r1
 80044fe:	4931      	ldr	r1, [pc, #196]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	628b      	str	r3, [r1, #40]	@ 0x28
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	3b01      	subs	r3, #1
 800450a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004512:	3b01      	subs	r3, #1
 8004514:	025b      	lsls	r3, r3, #9
 8004516:	b29b      	uxth	r3, r3
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	3b01      	subs	r3, #1
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	3b01      	subs	r3, #1
 800452e:	061b      	lsls	r3, r3, #24
 8004530:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004534:	4923      	ldr	r1, [pc, #140]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800453a:	4b22      	ldr	r3, [pc, #136]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	4a21      	ldr	r2, [pc, #132]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004546:	4b1f      	ldr	r3, [pc, #124]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800454a:	4b21      	ldr	r3, [pc, #132]	@ (80045d0 <HAL_RCC_OscConfig+0x778>)
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004552:	00d2      	lsls	r2, r2, #3
 8004554:	491b      	ldr	r1, [pc, #108]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800455a:	4b1a      	ldr	r3, [pc, #104]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455e:	f023 020c 	bic.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	4917      	ldr	r1, [pc, #92]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004568:	4313      	orrs	r3, r2
 800456a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800456c:	4b15      	ldr	r3, [pc, #84]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800456e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004570:	f023 0202 	bic.w	r2, r3, #2
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004578:	4912      	ldr	r1, [pc, #72]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800457e:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004582:	4a10      	ldr	r2, [pc, #64]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458a:	4b0e      	ldr	r3, [pc, #56]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	4a0d      	ldr	r2, [pc, #52]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	4a0a      	ldr	r2, [pc, #40]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80045a2:	4b08      	ldr	r3, [pc, #32]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	4a07      	ldr	r2, [pc, #28]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ae:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a04      	ldr	r2, [pc, #16]	@ (80045c4 <HAL_RCC_OscConfig+0x76c>)
 80045b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fd ffad 	bl	8002518 <HAL_GetTick>
 80045be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045c0:	e011      	b.n	80045e6 <HAL_RCC_OscConfig+0x78e>
 80045c2:	bf00      	nop
 80045c4:	58024400 	.word	0x58024400
 80045c8:	58024800 	.word	0x58024800
 80045cc:	fffffc0c 	.word	0xfffffc0c
 80045d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d4:	f7fd ffa0 	bl	8002518 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e08a      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045e6:	4b47      	ldr	r3, [pc, #284]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x77c>
 80045f2:	e082      	b.n	80046fa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f4:	4b43      	ldr	r3, [pc, #268]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a42      	ldr	r2, [pc, #264]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80045fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd ff8a 	bl	8002518 <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7fd ff86 	bl	8002518 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e070      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800461a:	4b3a      	ldr	r3, [pc, #232]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x7b0>
 8004626:	e068      	b.n	80046fa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004628:	4b36      	ldr	r3, [pc, #216]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800462e:	4b35      	ldr	r3, [pc, #212]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004632:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	2b01      	cmp	r3, #1
 800463a:	d031      	beq.n	80046a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f003 0203 	and.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d12a      	bne.n	80046a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d122      	bne.n	80046a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004664:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d11a      	bne.n	80046a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	0a5b      	lsrs	r3, r3, #9
 800466e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004676:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d111      	bne.n	80046a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d108      	bne.n	80046a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	0e1b      	lsrs	r3, r3, #24
 8004692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e02b      	b.n	80046fc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046a4:	4b17      	ldr	r3, [pc, #92]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a8:	08db      	lsrs	r3, r3, #3
 80046aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d01f      	beq.n	80046fa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80046ba:	4b12      	ldr	r3, [pc, #72]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	4a11      	ldr	r2, [pc, #68]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046c6:	f7fd ff27 	bl	8002518 <HAL_GetTick>
 80046ca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80046cc:	bf00      	nop
 80046ce:	f7fd ff23 	bl	8002518 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d0f9      	beq.n	80046ce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046da:	4b0a      	ldr	r3, [pc, #40]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046de:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <HAL_RCC_OscConfig+0x8b0>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046e6:	00d2      	lsls	r2, r2, #3
 80046e8:	4906      	ldr	r1, [pc, #24]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80046ee:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f2:	4a04      	ldr	r2, [pc, #16]	@ (8004704 <HAL_RCC_OscConfig+0x8ac>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3730      	adds	r7, #48	@ 0x30
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	58024400 	.word	0x58024400
 8004708:	ffff0007 	.word	0xffff0007

0800470c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e19c      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004720:	4b8a      	ldr	r3, [pc, #552]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d910      	bls.n	8004750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472e:	4b87      	ldr	r3, [pc, #540]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f023 020f 	bic.w	r2, r3, #15
 8004736:	4985      	ldr	r1, [pc, #532]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	4313      	orrs	r3, r2
 800473c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b83      	ldr	r3, [pc, #524]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e184      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d010      	beq.n	800477e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	4b7b      	ldr	r3, [pc, #492]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004768:	429a      	cmp	r2, r3
 800476a:	d908      	bls.n	800477e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800476c:	4b78      	ldr	r3, [pc, #480]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	4975      	ldr	r1, [pc, #468]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800477a:	4313      	orrs	r3, r2
 800477c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	4b70      	ldr	r3, [pc, #448]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004796:	429a      	cmp	r2, r3
 8004798:	d908      	bls.n	80047ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800479a:	4b6d      	ldr	r3, [pc, #436]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	496a      	ldr	r1, [pc, #424]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d010      	beq.n	80047da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	4b64      	ldr	r3, [pc, #400]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d908      	bls.n	80047da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047c8:	4b61      	ldr	r3, [pc, #388]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	495e      	ldr	r1, [pc, #376]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d010      	beq.n	8004808 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	4b59      	ldr	r3, [pc, #356]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d908      	bls.n	8004808 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047f6:	4b56      	ldr	r3, [pc, #344]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4953      	ldr	r1, [pc, #332]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004804:	4313      	orrs	r3, r2
 8004806:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d010      	beq.n	8004836 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	4b4d      	ldr	r3, [pc, #308]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	429a      	cmp	r2, r3
 8004822:	d908      	bls.n	8004836 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b4a      	ldr	r3, [pc, #296]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f023 020f 	bic.w	r2, r3, #15
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4947      	ldr	r1, [pc, #284]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004832:	4313      	orrs	r3, r2
 8004834:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d055      	beq.n	80048ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004842:	4b43      	ldr	r3, [pc, #268]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4940      	ldr	r1, [pc, #256]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004850:	4313      	orrs	r3, r2
 8004852:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d107      	bne.n	800486c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800485c:	4b3c      	ldr	r3, [pc, #240]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d121      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0f6      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d107      	bne.n	8004884 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004874:	4b36      	ldr	r3, [pc, #216]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d115      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0ea      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d107      	bne.n	800489c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800488c:	4b30      	ldr	r3, [pc, #192]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0de      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800489c:	4b2c      	ldr	r3, [pc, #176]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0d6      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ac:	4b28      	ldr	r3, [pc, #160]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f023 0207 	bic.w	r2, r3, #7
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4925      	ldr	r1, [pc, #148]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048be:	f7fd fe2b 	bl	8002518 <HAL_GetTick>
 80048c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c4:	e00a      	b.n	80048dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c6:	f7fd fe27 	bl	8002518 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e0be      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d1eb      	bne.n	80048c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d010      	beq.n	800491c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	4b14      	ldr	r3, [pc, #80]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	429a      	cmp	r2, r3
 8004908:	d208      	bcs.n	800491c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490a:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f023 020f 	bic.w	r2, r3, #15
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	490e      	ldr	r1, [pc, #56]	@ (8004950 <HAL_RCC_ClockConfig+0x244>)
 8004918:	4313      	orrs	r3, r2
 800491a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d214      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b08      	ldr	r3, [pc, #32]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 020f 	bic.w	r2, r3, #15
 8004932:	4906      	ldr	r1, [pc, #24]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b04      	ldr	r3, [pc, #16]	@ (800494c <HAL_RCC_ClockConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e086      	b.n	8004a5a <HAL_RCC_ClockConfig+0x34e>
 800494c:	52002000 	.word	0x52002000
 8004950:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d010      	beq.n	8004982 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	4b3f      	ldr	r3, [pc, #252]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800496c:	429a      	cmp	r2, r3
 800496e:	d208      	bcs.n	8004982 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004970:	4b3c      	ldr	r3, [pc, #240]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	4939      	ldr	r1, [pc, #228]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 800497e:	4313      	orrs	r3, r2
 8004980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d010      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	4b34      	ldr	r3, [pc, #208]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800499a:	429a      	cmp	r2, r3
 800499c:	d208      	bcs.n	80049b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800499e:	4b31      	ldr	r3, [pc, #196]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	492e      	ldr	r1, [pc, #184]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d010      	beq.n	80049de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	4b28      	ldr	r3, [pc, #160]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d208      	bcs.n	80049de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049cc:	4b25      	ldr	r3, [pc, #148]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	4922      	ldr	r1, [pc, #136]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d208      	bcs.n	8004a0c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4917      	ldr	r1, [pc, #92]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a0c:	f000 f834 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b14      	ldr	r3, [pc, #80]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	4912      	ldr	r1, [pc, #72]	@ (8004a68 <HAL_RCC_ClockConfig+0x35c>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	fa22 f303 	lsr.w	r3, r2, r3
 8004a28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a64 <HAL_RCC_ClockConfig+0x358>)
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	4a0d      	ldr	r2, [pc, #52]	@ (8004a68 <HAL_RCC_ClockConfig+0x35c>)
 8004a34:	5cd3      	ldrb	r3, [r2, r3]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a40:	4a0a      	ldr	r2, [pc, #40]	@ (8004a6c <HAL_RCC_ClockConfig+0x360>)
 8004a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a44:	4a0a      	ldr	r2, [pc, #40]	@ (8004a70 <HAL_RCC_ClockConfig+0x364>)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <HAL_RCC_ClockConfig+0x368>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fd fd18 	bl	8002484 <HAL_InitTick>
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400
 8004a68:	0800b234 	.word	0x0800b234
 8004a6c:	24000004 	.word	0x24000004
 8004a70:	24000000 	.word	0x24000000
 8004a74:	24000008 	.word	0x24000008

08004a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	@ 0x24
 8004a7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a7e:	4bb3      	ldr	r3, [pc, #716]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a86:	2b18      	cmp	r3, #24
 8004a88:	f200 8155 	bhi.w	8004d36 <HAL_RCC_GetSysClockFreq+0x2be>
 8004a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004af9 	.word	0x08004af9
 8004a98:	08004d37 	.word	0x08004d37
 8004a9c:	08004d37 	.word	0x08004d37
 8004aa0:	08004d37 	.word	0x08004d37
 8004aa4:	08004d37 	.word	0x08004d37
 8004aa8:	08004d37 	.word	0x08004d37
 8004aac:	08004d37 	.word	0x08004d37
 8004ab0:	08004d37 	.word	0x08004d37
 8004ab4:	08004b1f 	.word	0x08004b1f
 8004ab8:	08004d37 	.word	0x08004d37
 8004abc:	08004d37 	.word	0x08004d37
 8004ac0:	08004d37 	.word	0x08004d37
 8004ac4:	08004d37 	.word	0x08004d37
 8004ac8:	08004d37 	.word	0x08004d37
 8004acc:	08004d37 	.word	0x08004d37
 8004ad0:	08004d37 	.word	0x08004d37
 8004ad4:	08004b25 	.word	0x08004b25
 8004ad8:	08004d37 	.word	0x08004d37
 8004adc:	08004d37 	.word	0x08004d37
 8004ae0:	08004d37 	.word	0x08004d37
 8004ae4:	08004d37 	.word	0x08004d37
 8004ae8:	08004d37 	.word	0x08004d37
 8004aec:	08004d37 	.word	0x08004d37
 8004af0:	08004d37 	.word	0x08004d37
 8004af4:	08004b2b 	.word	0x08004b2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004af8:	4b94      	ldr	r3, [pc, #592]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b04:	4b91      	ldr	r3, [pc, #580]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	08db      	lsrs	r3, r3, #3
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	4a90      	ldr	r2, [pc, #576]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
 8004b14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b16:	e111      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b18:	4b8d      	ldr	r3, [pc, #564]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b1a:	61bb      	str	r3, [r7, #24]
      break;
 8004b1c:	e10e      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b20:	61bb      	str	r3, [r7, #24]
      break;
 8004b22:	e10b      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004b24:	4b8c      	ldr	r3, [pc, #560]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b26:	61bb      	str	r3, [r7, #24]
      break;
 8004b28:	e108      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b2a:	4b88      	ldr	r3, [pc, #544]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004b34:	4b85      	ldr	r3, [pc, #532]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b40:	4b82      	ldr	r3, [pc, #520]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004b4a:	4b80      	ldr	r3, [pc, #512]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4e:	08db      	lsrs	r3, r3, #3
 8004b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80e1 	beq.w	8004d30 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	f000 8083 	beq.w	8004c7c <HAL_RCC_GetSysClockFreq+0x204>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	f200 80a1 	bhi.w	8004cc0 <HAL_RCC_GetSysClockFreq+0x248>
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x114>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d056      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b8a:	e099      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02d      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b98:	4b6c      	ldr	r3, [pc, #432]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	08db      	lsrs	r3, r3, #3
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	4a6b      	ldr	r2, [pc, #428]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	ee07 3a90 	vmov	s15, r3
 8004bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc2:	4b62      	ldr	r3, [pc, #392]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bd6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004bf2:	e087      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004d60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c06:	4b51      	ldr	r3, [pc, #324]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c1a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c36:	e065      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c4a:	4b40      	ldr	r3, [pc, #256]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c5e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c7a:	e043      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c86:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004d68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ca2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cbe:	e021      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ce6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d08:	0a5b      	lsrs	r3, r3, #9
 8004d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d0e:	3301      	adds	r3, #1
 8004d10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	ee07 3a90 	vmov	s15, r3
 8004d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d28:	ee17 3a90 	vmov	r3, s15
 8004d2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004d2e:	e005      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61bb      	str	r3, [r7, #24]
      break;
 8004d34:	e002      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004d36:	4b07      	ldr	r3, [pc, #28]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d38:	61bb      	str	r3, [r7, #24]
      break;
 8004d3a:	bf00      	nop
  }

  return sysclockfreq;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3724      	adds	r7, #36	@ 0x24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	58024400 	.word	0x58024400
 8004d50:	03d09000 	.word	0x03d09000
 8004d54:	003d0900 	.word	0x003d0900
 8004d58:	007a1200 	.word	0x007a1200
 8004d5c:	46000000 	.word	0x46000000
 8004d60:	4c742400 	.word	0x4c742400
 8004d64:	4a742400 	.word	0x4a742400
 8004d68:	4af42400 	.word	0x4af42400

08004d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d72:	f7ff fe81 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004d76:	4602      	mov	r2, r0
 8004d78:	4b10      	ldr	r3, [pc, #64]	@ (8004dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	490f      	ldr	r1, [pc, #60]	@ (8004dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d84:	5ccb      	ldrb	r3, [r1, r3]
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d90:	4b0a      	ldr	r3, [pc, #40]	@ (8004dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	4a09      	ldr	r2, [pc, #36]	@ (8004dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d9a:	5cd3      	ldrb	r3, [r2, r3]
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	fa22 f303 	lsr.w	r3, r2, r3
 8004da6:	4a07      	ldr	r2, [pc, #28]	@ (8004dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004da8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004daa:	4a07      	ldr	r2, [pc, #28]	@ (8004dc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004db0:	4b04      	ldr	r3, [pc, #16]	@ (8004dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	0800b234 	.word	0x0800b234
 8004dc4:	24000004 	.word	0x24000004
 8004dc8:	24000000 	.word	0x24000000

08004dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004dd0:	f7ff ffcc 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4904      	ldr	r1, [pc, #16]	@ (8004df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	58024400 	.word	0x58024400
 8004df4:	0800b234 	.word	0x0800b234

08004df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004dfc:	f7ff ffb6 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4904      	ldr	r1, [pc, #16]	@ (8004e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	0800b234 	.word	0x0800b234

08004e24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e28:	b0ca      	sub	sp, #296	@ 0x128
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004e48:	2500      	movs	r5, #0
 8004e4a:	ea54 0305 	orrs.w	r3, r4, r5
 8004e4e:	d049      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e5a:	d02f      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e60:	d828      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e66:	d01a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e6c:	d822      	bhi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e76:	d007      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e78:	e01c      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7a:	4bb8      	ldr	r3, [pc, #736]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	4ab7      	ldr	r2, [pc, #732]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e86:	e01a      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	2102      	movs	r1, #2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 fc8f 	bl	80067b4 <RCCEx_PLL2_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e9c:	e00f      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea2:	3328      	adds	r3, #40	@ 0x28
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 fd36 	bl	8006918 <RCCEx_PLL3_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004eb2:	e004      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eba:	e000      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ec6:	4ba5      	ldr	r3, [pc, #660]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ed4:	4aa1      	ldr	r2, [pc, #644]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004eda:	e003      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004ef0:	f04f 0900 	mov.w	r9, #0
 8004ef4:	ea58 0309 	orrs.w	r3, r8, r9
 8004ef8:	d047      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d82a      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f04:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f21 	.word	0x08004f21
 8004f10:	08004f2f 	.word	0x08004f2f
 8004f14:	08004f45 	.word	0x08004f45
 8004f18:	08004f63 	.word	0x08004f63
 8004f1c:	08004f63 	.word	0x08004f63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f20:	4b8e      	ldr	r3, [pc, #568]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f24:	4a8d      	ldr	r2, [pc, #564]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f2c:	e01a      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	3308      	adds	r3, #8
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 fc3c 	bl	80067b4 <RCCEx_PLL2_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f42:	e00f      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f48:	3328      	adds	r3, #40	@ 0x28
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fce3 	bl	8006918 <RCCEx_PLL3_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f58:	e004      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f70:	f023 0107 	bic.w	r1, r3, #7
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7a:	4a78      	ldr	r2, [pc, #480]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f80:	e003      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004f96:	f04f 0b00 	mov.w	fp, #0
 8004f9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f9e:	d04c      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004faa:	d030      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb0:	d829      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004fb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fb4:	d02d      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fb8:	d825      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004fba:	2b80      	cmp	r3, #128	@ 0x80
 8004fbc:	d018      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004fbe:	2b80      	cmp	r3, #128	@ 0x80
 8004fc0:	d821      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004fc6:	2b40      	cmp	r3, #64	@ 0x40
 8004fc8:	d007      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004fca:	e01c      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fcc:	4b63      	ldr	r3, [pc, #396]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	4a62      	ldr	r2, [pc, #392]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fd8:	e01c      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fde:	3308      	adds	r3, #8
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 fbe6 	bl	80067b4 <RCCEx_PLL2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fee:	e011      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff4:	3328      	adds	r3, #40	@ 0x28
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f001 fc8d 	bl	8006918 <RCCEx_PLL3_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005004:	e006      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800500c:	e002      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800501c:	4b4f      	ldr	r3, [pc, #316]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800501e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005020:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502a:	4a4c      	ldr	r2, [pc, #304]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800502c:	430b      	orrs	r3, r1
 800502e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005030:	e003      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005046:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800504a:	2300      	movs	r3, #0
 800504c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005050:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005054:	460b      	mov	r3, r1
 8005056:	4313      	orrs	r3, r2
 8005058:	d053      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005062:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005066:	d035      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005068:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800506c:	d82e      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800506e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005072:	d031      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005074:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005078:	d828      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800507a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800507e:	d01a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005080:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005084:	d822      	bhi.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800508a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800508e:	d007      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005090:	e01c      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005092:	4b32      	ldr	r3, [pc, #200]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	4a31      	ldr	r2, [pc, #196]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800509c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800509e:	e01c      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a4:	3308      	adds	r3, #8
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 fb83 	bl	80067b4 <RCCEx_PLL2_Config>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80050b4:	e011      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ba:	3328      	adds	r3, #40	@ 0x28
 80050bc:	2100      	movs	r1, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	f001 fc2a 	bl	8006918 <RCCEx_PLL3_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050ca:	e006      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050d2:	e002      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80050d4:	bf00      	nop
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80050d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80050e2:	4b1e      	ldr	r3, [pc, #120]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80050ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80050f2:	4a1a      	ldr	r2, [pc, #104]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80050f8:	e003      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800510e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005112:	2300      	movs	r3, #0
 8005114:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005118:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800511c:	460b      	mov	r3, r1
 800511e:	4313      	orrs	r3, r2
 8005120:	d056      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800512a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800512e:	d038      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005130:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005134:	d831      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005136:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800513a:	d034      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800513c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005140:	d82b      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005146:	d01d      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005148:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800514c:	d825      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d006      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005158:	e01f      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800515a:	bf00      	nop
 800515c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005160:	4ba2      	ldr	r3, [pc, #648]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	4aa1      	ldr	r2, [pc, #644]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800516a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800516c:	e01c      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005172:	3308      	adds	r3, #8
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f001 fb1c 	bl	80067b4 <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005182:	e011      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005188:	3328      	adds	r3, #40	@ 0x28
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f001 fbc3 	bl	8006918 <RCCEx_PLL3_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005198:	e006      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051a0:	e002      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80051a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80051b0:	4b8e      	ldr	r3, [pc, #568]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80051b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80051c0:	4a8a      	ldr	r2, [pc, #552]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051c2:	430b      	orrs	r3, r1
 80051c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051c6:	e003      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80051dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80051ea:	460b      	mov	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d03a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f6:	2b30      	cmp	r3, #48	@ 0x30
 80051f8:	d01f      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80051fa:	2b30      	cmp	r3, #48	@ 0x30
 80051fc:	d819      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d00c      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005202:	2b20      	cmp	r3, #32
 8005204:	d815      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d019      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800520a:	2b10      	cmp	r3, #16
 800520c:	d111      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520e:	4b77      	ldr	r3, [pc, #476]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	4a76      	ldr	r2, [pc, #472]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800521a:	e011      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800521c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005220:	3308      	adds	r3, #8
 8005222:	2102      	movs	r1, #2
 8005224:	4618      	mov	r0, r3
 8005226:	f001 fac5 	bl	80067b4 <RCCEx_PLL2_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005230:	e006      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005238:	e002      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800523e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005248:	4b68      	ldr	r3, [pc, #416]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800524a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005256:	4a65      	ldr	r2, [pc, #404]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005258:	430b      	orrs	r3, r1
 800525a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800525c:	e003      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005272:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005276:	2300      	movs	r3, #0
 8005278:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800527c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005280:	460b      	mov	r3, r1
 8005282:	4313      	orrs	r3, r2
 8005284:	d051      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005290:	d035      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005292:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005296:	d82e      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005298:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800529c:	d031      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800529e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052a2:	d828      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a8:	d01a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80052aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ae:	d822      	bhi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b8:	d007      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80052ba:	e01c      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052bc:	4b4b      	ldr	r3, [pc, #300]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	4a4a      	ldr	r2, [pc, #296]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052c8:	e01c      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ce:	3308      	adds	r3, #8
 80052d0:	2100      	movs	r1, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 fa6e 	bl	80067b4 <RCCEx_PLL2_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052de:	e011      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e4:	3328      	adds	r3, #40	@ 0x28
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 fb15 	bl	8006918 <RCCEx_PLL3_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800530c:	4b37      	ldr	r3, [pc, #220]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800530e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005310:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531a:	4a34      	ldr	r2, [pc, #208]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800531c:	430b      	orrs	r3, r1
 800531e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005320:	e003      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005336:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800533a:	2300      	movs	r3, #0
 800533c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005340:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005344:	460b      	mov	r3, r1
 8005346:	4313      	orrs	r3, r2
 8005348:	d056      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800534a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005354:	d033      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005356:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800535a:	d82c      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800535c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005360:	d02f      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005362:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005366:	d826      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005368:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800536c:	d02b      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800536e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005372:	d820      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005378:	d012      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800537a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800537e:	d81a      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d022      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005388:	d115      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538e:	3308      	adds	r3, #8
 8005390:	2101      	movs	r1, #1
 8005392:	4618      	mov	r0, r3
 8005394:	f001 fa0e 	bl	80067b4 <RCCEx_PLL2_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800539e:	e015      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a4:	3328      	adds	r3, #40	@ 0x28
 80053a6:	2101      	movs	r1, #1
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 fab5 	bl	8006918 <RCCEx_PLL3_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80053b4:	e00a      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053bc:	e006      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053be:	bf00      	nop
 80053c0:	e004      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053c2:	bf00      	nop
 80053c4:	e002      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053c6:	bf00      	nop
 80053c8:	e000      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80053ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10d      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053d4:	4b05      	ldr	r3, [pc, #20]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80053dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053e2:	4a02      	ldr	r2, [pc, #8]	@ (80053ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80053e8:	e006      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80053ea:	bf00      	nop
 80053ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005408:	2300      	movs	r3, #0
 800540a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800540e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	d055      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005420:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005424:	d033      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005426:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800542a:	d82c      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005430:	d02f      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005436:	d826      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005438:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800543c:	d02b      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800543e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005442:	d820      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005444:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005448:	d012      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800544a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800544e:	d81a      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d022      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005454:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005458:	d115      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545e:	3308      	adds	r3, #8
 8005460:	2101      	movs	r1, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f001 f9a6 	bl	80067b4 <RCCEx_PLL2_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800546e:	e015      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005474:	3328      	adds	r3, #40	@ 0x28
 8005476:	2101      	movs	r1, #1
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fa4d 	bl	8006918 <RCCEx_PLL3_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005484:	e00a      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800548c:	e006      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800548e:	bf00      	nop
 8005490:	e004      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005492:	bf00      	nop
 8005494:	e002      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005496:	bf00      	nop
 8005498:	e000      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800549a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800549c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80054a4:	4ba3      	ldr	r3, [pc, #652]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054b4:	4a9f      	ldr	r2, [pc, #636]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ba:	e003      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80054d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80054da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d037      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054ee:	d00e      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80054f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054f4:	d816      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d018      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80054fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054fe:	d111      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005500:	4b8c      	ldr	r3, [pc, #560]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	4a8b      	ldr	r2, [pc, #556]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800550a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800550c:	e00f      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800550e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005512:	3308      	adds	r3, #8
 8005514:	2101      	movs	r1, #1
 8005516:	4618      	mov	r0, r3
 8005518:	f001 f94c 	bl	80067b4 <RCCEx_PLL2_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005522:	e004      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800552a:	e000      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800552c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005536:	4b7f      	ldr	r3, [pc, #508]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005544:	4a7b      	ldr	r2, [pc, #492]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005546:	430b      	orrs	r3, r1
 8005548:	6513      	str	r3, [r2, #80]	@ 0x50
 800554a:	e003      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800556a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800556e:	460b      	mov	r3, r1
 8005570:	4313      	orrs	r3, r2
 8005572:	d039      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800557a:	2b03      	cmp	r3, #3
 800557c:	d81c      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800557e:	a201      	add	r2, pc, #4	@ (adr r2, 8005584 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	080055c1 	.word	0x080055c1
 8005588:	08005595 	.word	0x08005595
 800558c:	080055a3 	.word	0x080055a3
 8005590:	080055c1 	.word	0x080055c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005594:	4b67      	ldr	r3, [pc, #412]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005598:	4a66      	ldr	r2, [pc, #408]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800559a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800559e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80055a0:	e00f      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a6:	3308      	adds	r3, #8
 80055a8:	2102      	movs	r1, #2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 f902 	bl	80067b4 <RCCEx_PLL2_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80055b6:	e004      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80055c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055ca:	4b5a      	ldr	r3, [pc, #360]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ce:	f023 0103 	bic.w	r1, r3, #3
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d8:	4a56      	ldr	r2, [pc, #344]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055da:	430b      	orrs	r3, r1
 80055dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055de:	e003      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055f8:	2300      	movs	r3, #0
 80055fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005602:	460b      	mov	r3, r1
 8005604:	4313      	orrs	r3, r2
 8005606:	f000 809f 	beq.w	8005748 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800560a:	4b4b      	ldr	r3, [pc, #300]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a4a      	ldr	r2, [pc, #296]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005614:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005616:	f7fc ff7f 	bl	8002518 <HAL_GetTick>
 800561a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800561e:	e00b      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005620:	f7fc ff7a 	bl	8002518 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b64      	cmp	r3, #100	@ 0x64
 800562e:	d903      	bls.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005636:	e005      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005638:	4b3f      	ldr	r3, [pc, #252]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0ed      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005648:	2b00      	cmp	r3, #0
 800564a:	d179      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800564c:	4b39      	ldr	r3, [pc, #228]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800564e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005654:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005658:	4053      	eors	r3, r2
 800565a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800565e:	2b00      	cmp	r3, #0
 8005660:	d015      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005662:	4b34      	ldr	r3, [pc, #208]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800566a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800566e:	4b31      	ldr	r3, [pc, #196]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	4a30      	ldr	r2, [pc, #192]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005678:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800567a:	4b2e      	ldr	r3, [pc, #184]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567e:	4a2d      	ldr	r2, [pc, #180]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005684:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005686:	4a2b      	ldr	r2, [pc, #172]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800568c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005692:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569a:	d118      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fc ff3c 	bl	8002518 <HAL_GetTick>
 80056a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a4:	e00d      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fc ff37 	bl	8002518 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80056b0:	1ad2      	subs	r2, r2, r3
 80056b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d903      	bls.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80056c0:	e005      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0eb      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80056ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d129      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056e6:	d10e      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80056e8:	4b12      	ldr	r3, [pc, #72]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80056f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056f8:	091a      	lsrs	r2, r3, #4
 80056fa:	4b10      	ldr	r3, [pc, #64]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005700:	430b      	orrs	r3, r1
 8005702:	6113      	str	r3, [r2, #16]
 8005704:	e005      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005706:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	4a0a      	ldr	r2, [pc, #40]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800570c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005710:	6113      	str	r3, [r2, #16]
 8005712:	4b08      	ldr	r3, [pc, #32]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005714:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800571e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005722:	4a04      	ldr	r2, [pc, #16]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005724:	430b      	orrs	r3, r1
 8005726:	6713      	str	r3, [r2, #112]	@ 0x70
 8005728:	e00e      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800572a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800572e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005732:	e009      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005734:	58024400 	.word	0x58024400
 8005738:	58024800 	.word	0x58024800
 800573c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f002 0301 	and.w	r3, r2, #1
 8005754:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005758:	2300      	movs	r3, #0
 800575a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800575e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005762:	460b      	mov	r3, r1
 8005764:	4313      	orrs	r3, r2
 8005766:	f000 8089 	beq.w	800587c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005770:	2b28      	cmp	r3, #40	@ 0x28
 8005772:	d86b      	bhi.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005774:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	08005855 	.word	0x08005855
 8005780:	0800584d 	.word	0x0800584d
 8005784:	0800584d 	.word	0x0800584d
 8005788:	0800584d 	.word	0x0800584d
 800578c:	0800584d 	.word	0x0800584d
 8005790:	0800584d 	.word	0x0800584d
 8005794:	0800584d 	.word	0x0800584d
 8005798:	0800584d 	.word	0x0800584d
 800579c:	08005821 	.word	0x08005821
 80057a0:	0800584d 	.word	0x0800584d
 80057a4:	0800584d 	.word	0x0800584d
 80057a8:	0800584d 	.word	0x0800584d
 80057ac:	0800584d 	.word	0x0800584d
 80057b0:	0800584d 	.word	0x0800584d
 80057b4:	0800584d 	.word	0x0800584d
 80057b8:	0800584d 	.word	0x0800584d
 80057bc:	08005837 	.word	0x08005837
 80057c0:	0800584d 	.word	0x0800584d
 80057c4:	0800584d 	.word	0x0800584d
 80057c8:	0800584d 	.word	0x0800584d
 80057cc:	0800584d 	.word	0x0800584d
 80057d0:	0800584d 	.word	0x0800584d
 80057d4:	0800584d 	.word	0x0800584d
 80057d8:	0800584d 	.word	0x0800584d
 80057dc:	08005855 	.word	0x08005855
 80057e0:	0800584d 	.word	0x0800584d
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	0800584d 	.word	0x0800584d
 80057ec:	0800584d 	.word	0x0800584d
 80057f0:	0800584d 	.word	0x0800584d
 80057f4:	0800584d 	.word	0x0800584d
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	08005855 	.word	0x08005855
 8005800:	0800584d 	.word	0x0800584d
 8005804:	0800584d 	.word	0x0800584d
 8005808:	0800584d 	.word	0x0800584d
 800580c:	0800584d 	.word	0x0800584d
 8005810:	0800584d 	.word	0x0800584d
 8005814:	0800584d 	.word	0x0800584d
 8005818:	0800584d 	.word	0x0800584d
 800581c:	08005855 	.word	0x08005855
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005824:	3308      	adds	r3, #8
 8005826:	2101      	movs	r1, #1
 8005828:	4618      	mov	r0, r3
 800582a:	f000 ffc3 	bl	80067b4 <RCCEx_PLL2_Config>
 800582e:	4603      	mov	r3, r0
 8005830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005834:	e00f      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583a:	3328      	adds	r3, #40	@ 0x28
 800583c:	2101      	movs	r1, #1
 800583e:	4618      	mov	r0, r3
 8005840:	f001 f86a 	bl	8006918 <RCCEx_PLL3_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800584a:	e004      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800585e:	4bbf      	ldr	r3, [pc, #764]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005862:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800586c:	4abb      	ldr	r2, [pc, #748]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800586e:	430b      	orrs	r3, r1
 8005870:	6553      	str	r3, [r2, #84]	@ 0x54
 8005872:	e003      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f002 0302 	and.w	r3, r2, #2
 8005888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800588c:	2300      	movs	r3, #0
 800588e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005892:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005896:	460b      	mov	r3, r1
 8005898:	4313      	orrs	r3, r2
 800589a:	d041      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d824      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80058a6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058f9 	.word	0x080058f9
 80058b0:	080058c5 	.word	0x080058c5
 80058b4:	080058db 	.word	0x080058db
 80058b8:	080058f9 	.word	0x080058f9
 80058bc:	080058f9 	.word	0x080058f9
 80058c0:	080058f9 	.word	0x080058f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	3308      	adds	r3, #8
 80058ca:	2101      	movs	r1, #1
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 ff71 	bl	80067b4 <RCCEx_PLL2_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058d8:	e00f      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	3328      	adds	r3, #40	@ 0x28
 80058e0:	2101      	movs	r1, #1
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 f818 	bl	8006918 <RCCEx_PLL3_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058ee:	e004      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058f6:	e000      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80058f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005902:	4b96      	ldr	r3, [pc, #600]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005906:	f023 0107 	bic.w	r1, r3, #7
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005910:	4a92      	ldr	r2, [pc, #584]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005912:	430b      	orrs	r3, r1
 8005914:	6553      	str	r3, [r2, #84]	@ 0x54
 8005916:	e003      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800591c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f002 0304 	and.w	r3, r2, #4
 800592c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005930:	2300      	movs	r3, #0
 8005932:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005936:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	d044      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005948:	2b05      	cmp	r3, #5
 800594a:	d825      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800594c:	a201      	add	r2, pc, #4	@ (adr r2, 8005954 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	080059a1 	.word	0x080059a1
 8005958:	0800596d 	.word	0x0800596d
 800595c:	08005983 	.word	0x08005983
 8005960:	080059a1 	.word	0x080059a1
 8005964:	080059a1 	.word	0x080059a1
 8005968:	080059a1 	.word	0x080059a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005970:	3308      	adds	r3, #8
 8005972:	2101      	movs	r1, #1
 8005974:	4618      	mov	r0, r3
 8005976:	f000 ff1d 	bl	80067b4 <RCCEx_PLL2_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005980:	e00f      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005986:	3328      	adds	r3, #40	@ 0x28
 8005988:	2101      	movs	r1, #1
 800598a:	4618      	mov	r0, r3
 800598c:	f000 ffc4 	bl	8006918 <RCCEx_PLL3_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005996:	e004      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800599e:	e000      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80059a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059aa:	4b6c      	ldr	r3, [pc, #432]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ae:	f023 0107 	bic.w	r1, r3, #7
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ba:	4a68      	ldr	r2, [pc, #416]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059bc:	430b      	orrs	r3, r1
 80059be:	6593      	str	r3, [r2, #88]	@ 0x58
 80059c0:	e003      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f002 0320 	and.w	r3, r2, #32
 80059d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059da:	2300      	movs	r3, #0
 80059dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059e4:	460b      	mov	r3, r1
 80059e6:	4313      	orrs	r3, r2
 80059e8:	d055      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059f6:	d033      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80059f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059fc:	d82c      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80059fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a02:	d02f      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a08:	d826      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a0e:	d02b      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005a10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a14:	d820      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a1a:	d012      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a20:	d81a      	bhi.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d022      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a2a:	d115      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	3308      	adds	r3, #8
 8005a32:	2100      	movs	r1, #0
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 febd 	bl	80067b4 <RCCEx_PLL2_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a40:	e015      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	3328      	adds	r3, #40	@ 0x28
 8005a48:	2102      	movs	r1, #2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 ff64 	bl	8006918 <RCCEx_PLL3_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a56:	e00a      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a5e:	e006      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a60:	bf00      	nop
 8005a62:	e004      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a64:	bf00      	nop
 8005a66:	e002      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10b      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a76:	4b39      	ldr	r3, [pc, #228]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a86:	4a35      	ldr	r2, [pc, #212]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a8c:	e003      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005aac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	d058      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005abe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ac2:	d033      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005ac4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ac8:	d82c      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ace:	d02f      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad4:	d826      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ad6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ada:	d02b      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ae0:	d820      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae6:	d012      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aec:	d81a      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d022      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af6:	d115      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	3308      	adds	r3, #8
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fe57 	bl	80067b4 <RCCEx_PLL2_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b0c:	e015      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b12:	3328      	adds	r3, #40	@ 0x28
 8005b14:	2102      	movs	r1, #2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fefe 	bl	8006918 <RCCEx_PLL3_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b22:	e00a      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b2a:	e006      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b2c:	bf00      	nop
 8005b2e:	e004      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b30:	bf00      	nop
 8005b32:	e002      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b34:	bf00      	nop
 8005b36:	e000      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10e      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b42:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b52:	4a02      	ldr	r2, [pc, #8]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b54:	430b      	orrs	r3, r1
 8005b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b58:	e006      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005b5a:	bf00      	nop
 8005b5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005b82:	460b      	mov	r3, r1
 8005b84:	4313      	orrs	r3, r2
 8005b86:	d055      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b94:	d033      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005b96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b9a:	d82c      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba0:	d02f      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba6:	d826      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ba8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005bac:	d02b      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005bae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005bb2:	d820      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bb8:	d012      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bbe:	d81a      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d022      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc8:	d115      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bce:	3308      	adds	r3, #8
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fdee 	bl	80067b4 <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bde:	e015      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be4:	3328      	adds	r3, #40	@ 0x28
 8005be6:	2102      	movs	r1, #2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fe95 	bl	8006918 <RCCEx_PLL3_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bf4:	e00a      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bfc:	e006      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005bfe:	bf00      	nop
 8005c00:	e004      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c02:	bf00      	nop
 8005c04:	e002      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c06:	bf00      	nop
 8005c08:	e000      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10b      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005c14:	4ba1      	ldr	r3, [pc, #644]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c18:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c24:	4a9d      	ldr	r2, [pc, #628]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c26:	430b      	orrs	r3, r1
 8005c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c2a:	e003      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f002 0308 	and.w	r3, r2, #8
 8005c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c44:	2300      	movs	r3, #0
 8005c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4313      	orrs	r3, r2
 8005c52:	d01e      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c60:	d10c      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c66:	3328      	adds	r3, #40	@ 0x28
 8005c68:	2102      	movs	r1, #2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fe54 	bl	8006918 <RCCEx_PLL3_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c7c:	4b87      	ldr	r3, [pc, #540]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8c:	4a83      	ldr	r2, [pc, #524]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c8e:	430b      	orrs	r3, r1
 8005c90:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f002 0310 	and.w	r3, r2, #16
 8005c9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ca8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005cac:	460b      	mov	r3, r1
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	d01e      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cbe:	d10c      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc4:	3328      	adds	r3, #40	@ 0x28
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fe25 	bl	8006918 <RCCEx_PLL3_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cda:	4b70      	ldr	r3, [pc, #448]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cea:	4a6c      	ldr	r2, [pc, #432]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d00:	2300      	movs	r3, #0
 8005d02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	d03e      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d1c:	d022      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d22:	d81b      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d2c:	d00b      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005d2e:	e015      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d34:	3308      	adds	r3, #8
 8005d36:	2100      	movs	r1, #0
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fd3b 	bl	80067b4 <RCCEx_PLL2_Config>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d44:	e00f      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4a:	3328      	adds	r3, #40	@ 0x28
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fde2 	bl	8006918 <RCCEx_PLL3_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d5a:	e004      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d7e:	4a47      	ldr	r2, [pc, #284]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d84:	e003      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005da0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005da4:	460b      	mov	r3, r1
 8005da6:	4313      	orrs	r3, r2
 8005da8:	d03b      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005db6:	d01f      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005db8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dbc:	d818      	bhi.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dc2:	d003      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dc8:	d007      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005dca:	e011      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dcc:	4b33      	ldr	r3, [pc, #204]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	4a32      	ldr	r2, [pc, #200]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dd8:	e00f      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dde:	3328      	adds	r3, #40	@ 0x28
 8005de0:	2101      	movs	r1, #1
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fd98 	bl	8006918 <RCCEx_PLL3_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dee:	e004      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005df6:	e000      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10b      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e02:	4b26      	ldr	r3, [pc, #152]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e12:	4a22      	ldr	r2, [pc, #136]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e14:	430b      	orrs	r3, r1
 8005e16:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e18:	e003      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005e2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e30:	2300      	movs	r3, #0
 8005e32:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	d034      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e4c:	d007      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005e4e:	e011      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e50:	4b12      	ldr	r3, [pc, #72]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	4a11      	ldr	r2, [pc, #68]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e5c:	e00e      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	3308      	adds	r3, #8
 8005e64:	2102      	movs	r1, #2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fca4 	bl	80067b4 <RCCEx_PLL2_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e72:	e003      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10d      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e84:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e92:	4a02      	ldr	r2, [pc, #8]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e94:	430b      	orrs	r3, r1
 8005e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e98:	e006      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005e9a:	bf00      	nop
 8005e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005eba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	d00c      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	3328      	adds	r3, #40	@ 0x28
 8005eca:	2102      	movs	r1, #2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fd23 	bl	8006918 <RCCEx_PLL3_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005eea:	663b      	str	r3, [r7, #96]	@ 0x60
 8005eec:	2300      	movs	r3, #0
 8005eee:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ef0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	d038      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f06:	d018      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005f08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f0c:	d811      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f12:	d014      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f18:	d80b      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d011      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f22:	d106      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f24:	4bc3      	ldr	r3, [pc, #780]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f28:	4ac2      	ldr	r2, [pc, #776]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005f30:	e008      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f38:	e004      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e002      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e000      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f4c:	4bb9      	ldr	r3, [pc, #740]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f5c:	4ab5      	ldr	r2, [pc, #724]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f62:	e003      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f82:	460b      	mov	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	d009      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f88:	4baa      	ldr	r3, [pc, #680]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f96:	4aa7      	ldr	r2, [pc, #668]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005fa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005faa:	2300      	movs	r3, #0
 8005fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	d00a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005fb8:	4b9e      	ldr	r3, [pc, #632]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005fc8:	4a9a      	ldr	r2, [pc, #616]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fdc:	2300      	movs	r3, #0
 8005fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fea:	4b92      	ldr	r3, [pc, #584]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ff8:	4a8e      	ldr	r2, [pc, #568]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800600a:	643b      	str	r3, [r7, #64]	@ 0x40
 800600c:	2300      	movs	r3, #0
 800600e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006010:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006014:	460b      	mov	r3, r1
 8006016:	4313      	orrs	r3, r2
 8006018:	d00e      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800601a:	4b86      	ldr	r3, [pc, #536]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	4a85      	ldr	r2, [pc, #532]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006020:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006024:	6113      	str	r3, [r2, #16]
 8006026:	4b83      	ldr	r3, [pc, #524]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006028:	6919      	ldr	r1, [r3, #16]
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006032:	4a80      	ldr	r2, [pc, #512]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006034:	430b      	orrs	r3, r1
 8006036:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006046:	2300      	movs	r3, #0
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800604a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800604e:	460b      	mov	r3, r1
 8006050:	4313      	orrs	r3, r2
 8006052:	d009      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006054:	4b77      	ldr	r3, [pc, #476]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006058:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006062:	4a74      	ldr	r2, [pc, #464]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006064:	430b      	orrs	r3, r1
 8006066:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006074:	633b      	str	r3, [r7, #48]	@ 0x30
 8006076:	2300      	movs	r3, #0
 8006078:	637b      	str	r3, [r7, #52]	@ 0x34
 800607a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800607e:	460b      	mov	r3, r1
 8006080:	4313      	orrs	r3, r2
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006084:	4b6b      	ldr	r3, [pc, #428]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006088:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006094:	4a67      	ldr	r2, [pc, #412]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006096:	430b      	orrs	r3, r1
 8006098:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	2100      	movs	r1, #0
 80060a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80060b0:	460b      	mov	r3, r1
 80060b2:	4313      	orrs	r3, r2
 80060b4:	d011      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ba:	3308      	adds	r3, #8
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fb78 	bl	80067b4 <RCCEx_PLL2_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	2100      	movs	r1, #0
 80060e4:	6239      	str	r1, [r7, #32]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80060f0:	460b      	mov	r3, r1
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d011      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fa:	3308      	adds	r3, #8
 80060fc:	2101      	movs	r1, #1
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fb58 	bl	80067b4 <RCCEx_PLL2_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800611a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	2100      	movs	r1, #0
 8006124:	61b9      	str	r1, [r7, #24]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d011      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	3308      	adds	r3, #8
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fb38 	bl	80067b4 <RCCEx_PLL2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800614a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800615a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	2100      	movs	r1, #0
 8006164:	6139      	str	r1, [r7, #16]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006170:	460b      	mov	r3, r1
 8006172:	4313      	orrs	r3, r2
 8006174:	d011      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617a:	3328      	adds	r3, #40	@ 0x28
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fbca 	bl	8006918 <RCCEx_PLL3_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800618a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	2100      	movs	r1, #0
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80061b0:	460b      	mov	r3, r1
 80061b2:	4313      	orrs	r3, r2
 80061b4:	d011      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ba:	3328      	adds	r3, #40	@ 0x28
 80061bc:	2101      	movs	r1, #1
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fbaa 	bl	8006918 <RCCEx_PLL3_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80061ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	2100      	movs	r1, #0
 80061e4:	6039      	str	r1, [r7, #0]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	607b      	str	r3, [r7, #4]
 80061ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061f0:	460b      	mov	r3, r1
 80061f2:	4313      	orrs	r3, r2
 80061f4:	d011      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fa:	3328      	adds	r3, #40	@ 0x28
 80061fc:	2102      	movs	r1, #2
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fb8a 	bl	8006918 <RCCEx_PLL3_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800620a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800621a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	e000      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
}
 8006228:	4618      	mov	r0, r3
 800622a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800622e:	46bd      	mov	sp, r7
 8006230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006234:	58024400 	.word	0x58024400

08006238 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800623c:	f7fe fd96 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b06      	ldr	r3, [pc, #24]	@ (800625c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	091b      	lsrs	r3, r3, #4
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4904      	ldr	r1, [pc, #16]	@ (8006260 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006258:	4618      	mov	r0, r3
 800625a:	bd80      	pop	{r7, pc}
 800625c:	58024400 	.word	0x58024400
 8006260:	0800b234 	.word	0x0800b234

08006264 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006264:	b480      	push	{r7}
 8006266:	b089      	sub	sp, #36	@ 0x24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800626c:	4ba1      	ldr	r3, [pc, #644]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006276:	4b9f      	ldr	r3, [pc, #636]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627a:	0b1b      	lsrs	r3, r3, #12
 800627c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006280:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006282:	4b9c      	ldr	r3, [pc, #624]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006286:	091b      	lsrs	r3, r3, #4
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800628e:	4b99      	ldr	r3, [pc, #612]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8111 	beq.w	80064d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	f000 8083 	beq.w	80063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	f200 80a1 	bhi.w	8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d056      	beq.n	800637c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80062ce:	e099      	b.n	8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062d0:	4b88      	ldr	r3, [pc, #544]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d02d      	beq.n	8006338 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062dc:	4b85      	ldr	r3, [pc, #532]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	08db      	lsrs	r3, r3, #3
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	4a84      	ldr	r2, [pc, #528]	@ (80064f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
 80062ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006306:	4b7b      	ldr	r3, [pc, #492]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006316:	ed97 6a03 	vldr	s12, [r7, #12]
 800631a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800631e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800632a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006336:	e087      	b.n	8006448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006500 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634a:	4b6a      	ldr	r3, [pc, #424]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800634c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635a:	ed97 6a03 	vldr	s12, [r7, #12]
 800635e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80064fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800637a:	e065      	b.n	8006448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006386:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800638a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638e:	4b59      	ldr	r3, [pc, #356]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639e:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80064fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063be:	e043      	b.n	8006448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80063ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d2:	4b48      	ldr	r3, [pc, #288]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80064fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006402:	e021      	b.n	8006448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006416:	4b37      	ldr	r3, [pc, #220]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006426:	ed97 6a03 	vldr	s12, [r7, #12]
 800642a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80064fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006446:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006448:	4b2a      	ldr	r3, [pc, #168]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644c:	0a5b      	lsrs	r3, r3, #9
 800644e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800645e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006462:	edd7 6a07 	vldr	s13, [r7, #28]
 8006466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800646a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800646e:	ee17 2a90 	vmov	r2, s15
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006476:	4b1f      	ldr	r3, [pc, #124]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800648c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006490:	edd7 6a07 	vldr	s13, [r7, #28]
 8006494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649c:	ee17 2a90 	vmov	r2, s15
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80064a4:	4b13      	ldr	r3, [pc, #76]	@ (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a8:	0e1b      	lsrs	r3, r3, #24
 80064aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064be:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ca:	ee17 2a90 	vmov	r2, s15
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80064d2:	e008      	b.n	80064e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	609a      	str	r2, [r3, #8]
}
 80064e6:	bf00      	nop
 80064e8:	3724      	adds	r7, #36	@ 0x24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	58024400 	.word	0x58024400
 80064f8:	03d09000 	.word	0x03d09000
 80064fc:	46000000 	.word	0x46000000
 8006500:	4c742400 	.word	0x4c742400
 8006504:	4a742400 	.word	0x4a742400
 8006508:	4af42400 	.word	0x4af42400

0800650c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	@ 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006514:	4ba1      	ldr	r3, [pc, #644]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006518:	f003 0303 	and.w	r3, r3, #3
 800651c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800651e:	4b9f      	ldr	r3, [pc, #636]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006522:	0d1b      	lsrs	r3, r3, #20
 8006524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006528:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800652a:	4b9c      	ldr	r3, [pc, #624]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800652c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006536:	4b99      	ldr	r3, [pc, #612]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800653a:	08db      	lsrs	r3, r3, #3
 800653c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	fb02 f303 	mul.w	r3, r2, r3
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8111 	beq.w	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	2b02      	cmp	r3, #2
 800655e:	f000 8083 	beq.w	8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b02      	cmp	r3, #2
 8006566:	f200 80a1 	bhi.w	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d056      	beq.n	8006624 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006576:	e099      	b.n	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006578:	4b88      	ldr	r3, [pc, #544]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d02d      	beq.n	80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006584:	4b85      	ldr	r3, [pc, #532]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	08db      	lsrs	r3, r3, #3
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	4a84      	ldr	r2, [pc, #528]	@ (80067a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	ee07 3a90 	vmov	s15, r3
 800659c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ae:	4b7b      	ldr	r3, [pc, #492]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065be:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065de:	e087      	b.n	80066f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80065ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f2:	4b6a      	ldr	r3, [pc, #424]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006602:	ed97 6a03 	vldr	s12, [r7, #12]
 8006606:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800660a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006622:	e065      	b.n	80066f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006636:	4b59      	ldr	r3, [pc, #356]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006646:	ed97 6a03 	vldr	s12, [r7, #12]
 800664a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800664e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800665a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006666:	e043      	b.n	80066f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006672:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667a:	4b48      	ldr	r3, [pc, #288]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668a:	ed97 6a03 	vldr	s12, [r7, #12]
 800668e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800669e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066aa:	e021      	b.n	80066f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066be:	4b37      	ldr	r3, [pc, #220]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80066d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80066f0:	4b2a      	ldr	r3, [pc, #168]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	0a5b      	lsrs	r3, r3, #9
 80066f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006702:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800670a:	edd7 6a07 	vldr	s13, [r7, #28]
 800670e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006716:	ee17 2a90 	vmov	r2, s15
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800671e:	4b1f      	ldr	r3, [pc, #124]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	0c1b      	lsrs	r3, r3, #16
 8006724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006728:	ee07 3a90 	vmov	s15, r3
 800672c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006730:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006738:	edd7 6a07 	vldr	s13, [r7, #28]
 800673c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006744:	ee17 2a90 	vmov	r2, s15
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800674c:	4b13      	ldr	r3, [pc, #76]	@ (800679c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800674e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006750:	0e1b      	lsrs	r3, r3, #24
 8006752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006766:	edd7 6a07 	vldr	s13, [r7, #28]
 800676a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800676e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006772:	ee17 2a90 	vmov	r2, s15
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800677a:	e008      	b.n	800678e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	609a      	str	r2, [r3, #8]
}
 800678e:	bf00      	nop
 8006790:	3724      	adds	r7, #36	@ 0x24
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	58024400 	.word	0x58024400
 80067a0:	03d09000 	.word	0x03d09000
 80067a4:	46000000 	.word	0x46000000
 80067a8:	4c742400 	.word	0x4c742400
 80067ac:	4a742400 	.word	0x4a742400
 80067b0:	4af42400 	.word	0x4af42400

080067b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067c2:	4b53      	ldr	r3, [pc, #332]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d101      	bne.n	80067d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e099      	b.n	8006906 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a4e      	ldr	r2, [pc, #312]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067de:	f7fb fe9b 	bl	8002518 <HAL_GetTick>
 80067e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067e4:	e008      	b.n	80067f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067e6:	f7fb fe97 	bl	8002518 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e086      	b.n	8006906 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067f8:	4b45      	ldr	r3, [pc, #276]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f0      	bne.n	80067e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006804:	4b42      	ldr	r3, [pc, #264]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006808:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	493f      	ldr	r1, [pc, #252]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006814:	4313      	orrs	r3, r2
 8006816:	628b      	str	r3, [r1, #40]	@ 0x28
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	3b01      	subs	r3, #1
 800681e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	3b01      	subs	r3, #1
 8006828:	025b      	lsls	r3, r3, #9
 800682a:	b29b      	uxth	r3, r3
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	3b01      	subs	r3, #1
 8006834:	041b      	lsls	r3, r3, #16
 8006836:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	3b01      	subs	r3, #1
 8006842:	061b      	lsls	r3, r3, #24
 8006844:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006848:	4931      	ldr	r1, [pc, #196]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800684a:	4313      	orrs	r3, r2
 800684c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800684e:	4b30      	ldr	r3, [pc, #192]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006852:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	492d      	ldr	r1, [pc, #180]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800685c:	4313      	orrs	r3, r2
 800685e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006860:	4b2b      	ldr	r3, [pc, #172]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	f023 0220 	bic.w	r2, r3, #32
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	4928      	ldr	r1, [pc, #160]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800686e:	4313      	orrs	r3, r2
 8006870:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006872:	4b27      	ldr	r3, [pc, #156]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	4a26      	ldr	r2, [pc, #152]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006878:	f023 0310 	bic.w	r3, r3, #16
 800687c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800687e:	4b24      	ldr	r3, [pc, #144]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006880:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006882:	4b24      	ldr	r3, [pc, #144]	@ (8006914 <RCCEx_PLL2_Config+0x160>)
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	69d2      	ldr	r2, [r2, #28]
 800688a:	00d2      	lsls	r2, r2, #3
 800688c:	4920      	ldr	r1, [pc, #128]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 800688e:	4313      	orrs	r3, r2
 8006890:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006892:	4b1f      	ldr	r3, [pc, #124]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	4a1e      	ldr	r2, [pc, #120]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 8006898:	f043 0310 	orr.w	r3, r3, #16
 800689c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a8:	4a19      	ldr	r2, [pc, #100]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068b0:	e00f      	b.n	80068d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d106      	bne.n	80068c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068b8:	4b15      	ldr	r3, [pc, #84]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	4a14      	ldr	r2, [pc, #80]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068c4:	e005      	b.n	80068d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068c6:	4b12      	ldr	r3, [pc, #72]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ca:	4a11      	ldr	r2, [pc, #68]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068de:	f7fb fe1b 	bl	8002518 <HAL_GetTick>
 80068e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068e4:	e008      	b.n	80068f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068e6:	f7fb fe17 	bl	8002518 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e006      	b.n	8006906 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068f8:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <RCCEx_PLL2_Config+0x15c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f0      	beq.n	80068e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	58024400 	.word	0x58024400
 8006914:	ffff0007 	.word	0xffff0007

08006918 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006926:	4b53      	ldr	r3, [pc, #332]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b03      	cmp	r3, #3
 8006930:	d101      	bne.n	8006936 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e099      	b.n	8006a6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006936:	4b4f      	ldr	r3, [pc, #316]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a4e      	ldr	r2, [pc, #312]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 800693c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006942:	f7fb fde9 	bl	8002518 <HAL_GetTick>
 8006946:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006948:	e008      	b.n	800695c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800694a:	f7fb fde5 	bl	8002518 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e086      	b.n	8006a6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800695c:	4b45      	ldr	r3, [pc, #276]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f0      	bne.n	800694a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006968:	4b42      	ldr	r3, [pc, #264]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	051b      	lsls	r3, r3, #20
 8006976:	493f      	ldr	r1, [pc, #252]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006978:	4313      	orrs	r3, r2
 800697a:	628b      	str	r3, [r1, #40]	@ 0x28
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	3b01      	subs	r3, #1
 8006982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	3b01      	subs	r3, #1
 800698c:	025b      	lsls	r3, r3, #9
 800698e:	b29b      	uxth	r3, r3
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	3b01      	subs	r3, #1
 8006998:	041b      	lsls	r3, r3, #16
 800699a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	061b      	lsls	r3, r3, #24
 80069a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069ac:	4931      	ldr	r1, [pc, #196]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069b2:	4b30      	ldr	r3, [pc, #192]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	492d      	ldr	r1, [pc, #180]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	4928      	ldr	r1, [pc, #160]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069d6:	4b27      	ldr	r3, [pc, #156]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069da:	4a26      	ldr	r2, [pc, #152]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069e2:	4b24      	ldr	r3, [pc, #144]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069e6:	4b24      	ldr	r3, [pc, #144]	@ (8006a78 <RCCEx_PLL3_Config+0x160>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	69d2      	ldr	r2, [r2, #28]
 80069ee:	00d2      	lsls	r2, r2, #3
 80069f0:	4920      	ldr	r1, [pc, #128]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 80069fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a08:	4b1a      	ldr	r3, [pc, #104]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	4a19      	ldr	r2, [pc, #100]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a14:	e00f      	b.n	8006a36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d106      	bne.n	8006a2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a1c:	4b15      	ldr	r3, [pc, #84]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	4a14      	ldr	r2, [pc, #80]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a28:	e005      	b.n	8006a36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a2a:	4b12      	ldr	r3, [pc, #72]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	4a11      	ldr	r2, [pc, #68]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a36:	4b0f      	ldr	r3, [pc, #60]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a42:	f7fb fd69 	bl	8002518 <HAL_GetTick>
 8006a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a48:	e008      	b.n	8006a5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a4a:	f7fb fd65 	bl	8002518 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e006      	b.n	8006a6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <RCCEx_PLL3_Config+0x15c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0f0      	beq.n	8006a4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	58024400 	.word	0x58024400
 8006a78:	ffff0007 	.word	0xffff0007

08006a7c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e02b      	b.n	8006ae8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d106      	bne.n	8006aaa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7fa fc39 	bl	800131c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2202      	movs	r2, #2
 8006aae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f001 fec1 	bl	8008844 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	461a      	mov	r2, r3
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	f001 ff15 	bl	80088fc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006ad2:	4b07      	ldr	r3, [pc, #28]	@ (8006af0 <HAL_SDRAM_Init+0x74>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a06      	ldr	r2, [pc, #24]	@ (8006af0 <HAL_SDRAM_Init+0x74>)
 8006ad8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006adc:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	52004000 	.word	0x52004000

08006af4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b06:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d101      	bne.n	8006b12 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e021      	b.n	8006b56 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d002      	beq.n	8006b1e <HAL_SDRAM_SendCommand+0x2a>
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	2b05      	cmp	r3, #5
 8006b1c:	d118      	bne.n	8006b50 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 ff4e 	bl	80089d0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d104      	bne.n	8006b46 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2205      	movs	r2, #5
 8006b40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b44:	e006      	b.n	8006b54 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b4e:	e001      	b.n	8006b54 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d101      	bne.n	8006b78 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006b74:	2302      	movs	r3, #2
 8006b76:	e016      	b.n	8006ba6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d10f      	bne.n	8006ba4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 ff40 	bl	8008a18 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e000      	b.n	8006ba6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e049      	b.n	8006c54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7fb fae1 	bl	800219c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3304      	adds	r3, #4
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f000 f949 	bl	8006e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e0ff      	b.n	8006e7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b14      	cmp	r3, #20
 8006c86:	f200 80f0 	bhi.w	8006e6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006ce5 	.word	0x08006ce5
 8006c94:	08006e6b 	.word	0x08006e6b
 8006c98:	08006e6b 	.word	0x08006e6b
 8006c9c:	08006e6b 	.word	0x08006e6b
 8006ca0:	08006d25 	.word	0x08006d25
 8006ca4:	08006e6b 	.word	0x08006e6b
 8006ca8:	08006e6b 	.word	0x08006e6b
 8006cac:	08006e6b 	.word	0x08006e6b
 8006cb0:	08006d67 	.word	0x08006d67
 8006cb4:	08006e6b 	.word	0x08006e6b
 8006cb8:	08006e6b 	.word	0x08006e6b
 8006cbc:	08006e6b 	.word	0x08006e6b
 8006cc0:	08006da7 	.word	0x08006da7
 8006cc4:	08006e6b 	.word	0x08006e6b
 8006cc8:	08006e6b 	.word	0x08006e6b
 8006ccc:	08006e6b 	.word	0x08006e6b
 8006cd0:	08006de9 	.word	0x08006de9
 8006cd4:	08006e6b 	.word	0x08006e6b
 8006cd8:	08006e6b 	.word	0x08006e6b
 8006cdc:	08006e6b 	.word	0x08006e6b
 8006ce0:	08006e29 	.word	0x08006e29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 f96a 	bl	8006fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0208 	orr.w	r2, r2, #8
 8006cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0204 	bic.w	r2, r2, #4
 8006d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6999      	ldr	r1, [r3, #24]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	691a      	ldr	r2, [r3, #16]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	619a      	str	r2, [r3, #24]
      break;
 8006d22:	e0a5      	b.n	8006e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f9da 	bl	80070e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6999      	ldr	r1, [r3, #24]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	021a      	lsls	r2, r3, #8
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	619a      	str	r2, [r3, #24]
      break;
 8006d64:	e084      	b.n	8006e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fa43 	bl	80071f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69da      	ldr	r2, [r3, #28]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0208 	orr.w	r2, r2, #8
 8006d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0204 	bic.w	r2, r2, #4
 8006d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69d9      	ldr	r1, [r3, #28]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	61da      	str	r2, [r3, #28]
      break;
 8006da4:	e064      	b.n	8006e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 faab 	bl	8007308 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69d9      	ldr	r1, [r3, #28]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	021a      	lsls	r2, r3, #8
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	61da      	str	r2, [r3, #28]
      break;
 8006de6:	e043      	b.n	8006e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 faf4 	bl	80073dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0208 	orr.w	r2, r2, #8
 8006e02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0204 	bic.w	r2, r2, #4
 8006e12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006e26:	e023      	b.n	8006e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fb38 	bl	80074a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	021a      	lsls	r2, r3, #8
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006e68:	e002      	b.n	8006e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop

08006e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a43      	ldr	r2, [pc, #268]	@ (8006fa4 <TIM_Base_SetConfig+0x120>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d013      	beq.n	8006ec4 <TIM_Base_SetConfig+0x40>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea2:	d00f      	beq.n	8006ec4 <TIM_Base_SetConfig+0x40>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a40      	ldr	r2, [pc, #256]	@ (8006fa8 <TIM_Base_SetConfig+0x124>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00b      	beq.n	8006ec4 <TIM_Base_SetConfig+0x40>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a3f      	ldr	r2, [pc, #252]	@ (8006fac <TIM_Base_SetConfig+0x128>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d007      	beq.n	8006ec4 <TIM_Base_SetConfig+0x40>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8006fb0 <TIM_Base_SetConfig+0x12c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d003      	beq.n	8006ec4 <TIM_Base_SetConfig+0x40>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8006fb4 <TIM_Base_SetConfig+0x130>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d108      	bne.n	8006ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a32      	ldr	r2, [pc, #200]	@ (8006fa4 <TIM_Base_SetConfig+0x120>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01f      	beq.n	8006f1e <TIM_Base_SetConfig+0x9a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee4:	d01b      	beq.n	8006f1e <TIM_Base_SetConfig+0x9a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8006fa8 <TIM_Base_SetConfig+0x124>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d017      	beq.n	8006f1e <TIM_Base_SetConfig+0x9a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8006fac <TIM_Base_SetConfig+0x128>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d013      	beq.n	8006f1e <TIM_Base_SetConfig+0x9a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8006fb0 <TIM_Base_SetConfig+0x12c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00f      	beq.n	8006f1e <TIM_Base_SetConfig+0x9a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a2c      	ldr	r2, [pc, #176]	@ (8006fb4 <TIM_Base_SetConfig+0x130>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00b      	beq.n	8006f1e <TIM_Base_SetConfig+0x9a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a2b      	ldr	r2, [pc, #172]	@ (8006fb8 <TIM_Base_SetConfig+0x134>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d007      	beq.n	8006f1e <TIM_Base_SetConfig+0x9a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a2a      	ldr	r2, [pc, #168]	@ (8006fbc <TIM_Base_SetConfig+0x138>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d003      	beq.n	8006f1e <TIM_Base_SetConfig+0x9a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a29      	ldr	r2, [pc, #164]	@ (8006fc0 <TIM_Base_SetConfig+0x13c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d108      	bne.n	8006f30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a14      	ldr	r2, [pc, #80]	@ (8006fa4 <TIM_Base_SetConfig+0x120>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00f      	beq.n	8006f76 <TIM_Base_SetConfig+0xf2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a16      	ldr	r2, [pc, #88]	@ (8006fb4 <TIM_Base_SetConfig+0x130>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00b      	beq.n	8006f76 <TIM_Base_SetConfig+0xf2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a15      	ldr	r2, [pc, #84]	@ (8006fb8 <TIM_Base_SetConfig+0x134>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d007      	beq.n	8006f76 <TIM_Base_SetConfig+0xf2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a14      	ldr	r2, [pc, #80]	@ (8006fbc <TIM_Base_SetConfig+0x138>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_Base_SetConfig+0xf2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a13      	ldr	r2, [pc, #76]	@ (8006fc0 <TIM_Base_SetConfig+0x13c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d103      	bne.n	8006f7e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f043 0204 	orr.w	r2, r3, #4
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	601a      	str	r2, [r3, #0]
}
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40010000 	.word	0x40010000
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800
 8006fb0:	40000c00 	.word	0x40000c00
 8006fb4:	40010400 	.word	0x40010400
 8006fb8:	40014000 	.word	0x40014000
 8006fbc:	40014400 	.word	0x40014400
 8006fc0:	40014800 	.word	0x40014800

08006fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	f023 0201 	bic.w	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4b37      	ldr	r3, [pc, #220]	@ (80070cc <TIM_OC1_SetConfig+0x108>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0303 	bic.w	r3, r3, #3
 8006ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f023 0302 	bic.w	r3, r3, #2
 800700c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a2d      	ldr	r2, [pc, #180]	@ (80070d0 <TIM_OC1_SetConfig+0x10c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00f      	beq.n	8007040 <TIM_OC1_SetConfig+0x7c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a2c      	ldr	r2, [pc, #176]	@ (80070d4 <TIM_OC1_SetConfig+0x110>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00b      	beq.n	8007040 <TIM_OC1_SetConfig+0x7c>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a2b      	ldr	r2, [pc, #172]	@ (80070d8 <TIM_OC1_SetConfig+0x114>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d007      	beq.n	8007040 <TIM_OC1_SetConfig+0x7c>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a2a      	ldr	r2, [pc, #168]	@ (80070dc <TIM_OC1_SetConfig+0x118>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d003      	beq.n	8007040 <TIM_OC1_SetConfig+0x7c>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a29      	ldr	r2, [pc, #164]	@ (80070e0 <TIM_OC1_SetConfig+0x11c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10c      	bne.n	800705a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f023 0308 	bic.w	r3, r3, #8
 8007046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 0304 	bic.w	r3, r3, #4
 8007058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a1c      	ldr	r2, [pc, #112]	@ (80070d0 <TIM_OC1_SetConfig+0x10c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00f      	beq.n	8007082 <TIM_OC1_SetConfig+0xbe>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <TIM_OC1_SetConfig+0x110>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00b      	beq.n	8007082 <TIM_OC1_SetConfig+0xbe>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a1a      	ldr	r2, [pc, #104]	@ (80070d8 <TIM_OC1_SetConfig+0x114>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d007      	beq.n	8007082 <TIM_OC1_SetConfig+0xbe>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a19      	ldr	r2, [pc, #100]	@ (80070dc <TIM_OC1_SetConfig+0x118>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_OC1_SetConfig+0xbe>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a18      	ldr	r2, [pc, #96]	@ (80070e0 <TIM_OC1_SetConfig+0x11c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d111      	bne.n	80070a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	621a      	str	r2, [r3, #32]
}
 80070c0:	bf00      	nop
 80070c2:	371c      	adds	r7, #28
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	fffeff8f 	.word	0xfffeff8f
 80070d0:	40010000 	.word	0x40010000
 80070d4:	40010400 	.word	0x40010400
 80070d8:	40014000 	.word	0x40014000
 80070dc:	40014400 	.word	0x40014400
 80070e0:	40014800 	.word	0x40014800

080070e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	f023 0210 	bic.w	r2, r3, #16
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4b34      	ldr	r3, [pc, #208]	@ (80071e0 <TIM_OC2_SetConfig+0xfc>)
 8007110:	4013      	ands	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800711a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	021b      	lsls	r3, r3, #8
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f023 0320 	bic.w	r3, r3, #32
 800712e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a29      	ldr	r2, [pc, #164]	@ (80071e4 <TIM_OC2_SetConfig+0x100>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_OC2_SetConfig+0x68>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a28      	ldr	r2, [pc, #160]	@ (80071e8 <TIM_OC2_SetConfig+0x104>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d10d      	bne.n	8007168 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007166:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a1e      	ldr	r2, [pc, #120]	@ (80071e4 <TIM_OC2_SetConfig+0x100>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00f      	beq.n	8007190 <TIM_OC2_SetConfig+0xac>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a1d      	ldr	r2, [pc, #116]	@ (80071e8 <TIM_OC2_SetConfig+0x104>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00b      	beq.n	8007190 <TIM_OC2_SetConfig+0xac>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a1c      	ldr	r2, [pc, #112]	@ (80071ec <TIM_OC2_SetConfig+0x108>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d007      	beq.n	8007190 <TIM_OC2_SetConfig+0xac>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a1b      	ldr	r2, [pc, #108]	@ (80071f0 <TIM_OC2_SetConfig+0x10c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d003      	beq.n	8007190 <TIM_OC2_SetConfig+0xac>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a1a      	ldr	r2, [pc, #104]	@ (80071f4 <TIM_OC2_SetConfig+0x110>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d113      	bne.n	80071b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800719e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	feff8fff 	.word	0xfeff8fff
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40010400 	.word	0x40010400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800

080071f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4b33      	ldr	r3, [pc, #204]	@ (80072f0 <TIM_OC3_SetConfig+0xf8>)
 8007224:	4013      	ands	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a28      	ldr	r2, [pc, #160]	@ (80072f4 <TIM_OC3_SetConfig+0xfc>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_OC3_SetConfig+0x66>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a27      	ldr	r2, [pc, #156]	@ (80072f8 <TIM_OC3_SetConfig+0x100>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d10d      	bne.n	800727a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a1d      	ldr	r2, [pc, #116]	@ (80072f4 <TIM_OC3_SetConfig+0xfc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00f      	beq.n	80072a2 <TIM_OC3_SetConfig+0xaa>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a1c      	ldr	r2, [pc, #112]	@ (80072f8 <TIM_OC3_SetConfig+0x100>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00b      	beq.n	80072a2 <TIM_OC3_SetConfig+0xaa>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a1b      	ldr	r2, [pc, #108]	@ (80072fc <TIM_OC3_SetConfig+0x104>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d007      	beq.n	80072a2 <TIM_OC3_SetConfig+0xaa>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a1a      	ldr	r2, [pc, #104]	@ (8007300 <TIM_OC3_SetConfig+0x108>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d003      	beq.n	80072a2 <TIM_OC3_SetConfig+0xaa>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a19      	ldr	r2, [pc, #100]	@ (8007304 <TIM_OC3_SetConfig+0x10c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d113      	bne.n	80072ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	621a      	str	r2, [r3, #32]
}
 80072e4:	bf00      	nop
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	fffeff8f 	.word	0xfffeff8f
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40010400 	.word	0x40010400
 80072fc:	40014000 	.word	0x40014000
 8007300:	40014400 	.word	0x40014400
 8007304:	40014800 	.word	0x40014800

08007308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4b24      	ldr	r3, [pc, #144]	@ (80073c4 <TIM_OC4_SetConfig+0xbc>)
 8007334:	4013      	ands	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800733e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	4313      	orrs	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	031b      	lsls	r3, r3, #12
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a19      	ldr	r2, [pc, #100]	@ (80073c8 <TIM_OC4_SetConfig+0xc0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00f      	beq.n	8007388 <TIM_OC4_SetConfig+0x80>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a18      	ldr	r2, [pc, #96]	@ (80073cc <TIM_OC4_SetConfig+0xc4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00b      	beq.n	8007388 <TIM_OC4_SetConfig+0x80>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a17      	ldr	r2, [pc, #92]	@ (80073d0 <TIM_OC4_SetConfig+0xc8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d007      	beq.n	8007388 <TIM_OC4_SetConfig+0x80>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a16      	ldr	r2, [pc, #88]	@ (80073d4 <TIM_OC4_SetConfig+0xcc>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d003      	beq.n	8007388 <TIM_OC4_SetConfig+0x80>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a15      	ldr	r2, [pc, #84]	@ (80073d8 <TIM_OC4_SetConfig+0xd0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d109      	bne.n	800739c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800738e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	019b      	lsls	r3, r3, #6
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	4313      	orrs	r3, r2
 800739a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	bf00      	nop
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	feff8fff 	.word	0xfeff8fff
 80073c8:	40010000 	.word	0x40010000
 80073cc:	40010400 	.word	0x40010400
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40014400 	.word	0x40014400
 80073d8:	40014800 	.word	0x40014800

080073dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4b21      	ldr	r3, [pc, #132]	@ (800748c <TIM_OC5_SetConfig+0xb0>)
 8007408:	4013      	ands	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800741c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	041b      	lsls	r3, r3, #16
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4313      	orrs	r3, r2
 8007428:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a18      	ldr	r2, [pc, #96]	@ (8007490 <TIM_OC5_SetConfig+0xb4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00f      	beq.n	8007452 <TIM_OC5_SetConfig+0x76>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a17      	ldr	r2, [pc, #92]	@ (8007494 <TIM_OC5_SetConfig+0xb8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00b      	beq.n	8007452 <TIM_OC5_SetConfig+0x76>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a16      	ldr	r2, [pc, #88]	@ (8007498 <TIM_OC5_SetConfig+0xbc>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d007      	beq.n	8007452 <TIM_OC5_SetConfig+0x76>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a15      	ldr	r2, [pc, #84]	@ (800749c <TIM_OC5_SetConfig+0xc0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_OC5_SetConfig+0x76>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a14      	ldr	r2, [pc, #80]	@ (80074a0 <TIM_OC5_SetConfig+0xc4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d109      	bne.n	8007466 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007458:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	621a      	str	r2, [r3, #32]
}
 8007480:	bf00      	nop
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	fffeff8f 	.word	0xfffeff8f
 8007490:	40010000 	.word	0x40010000
 8007494:	40010400 	.word	0x40010400
 8007498:	40014000 	.word	0x40014000
 800749c:	40014400 	.word	0x40014400
 80074a0:	40014800 	.word	0x40014800

080074a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4b22      	ldr	r3, [pc, #136]	@ (8007558 <TIM_OC6_SetConfig+0xb4>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	051b      	lsls	r3, r3, #20
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a19      	ldr	r2, [pc, #100]	@ (800755c <TIM_OC6_SetConfig+0xb8>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00f      	beq.n	800751c <TIM_OC6_SetConfig+0x78>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a18      	ldr	r2, [pc, #96]	@ (8007560 <TIM_OC6_SetConfig+0xbc>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00b      	beq.n	800751c <TIM_OC6_SetConfig+0x78>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a17      	ldr	r2, [pc, #92]	@ (8007564 <TIM_OC6_SetConfig+0xc0>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d007      	beq.n	800751c <TIM_OC6_SetConfig+0x78>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a16      	ldr	r2, [pc, #88]	@ (8007568 <TIM_OC6_SetConfig+0xc4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_OC6_SetConfig+0x78>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a15      	ldr	r2, [pc, #84]	@ (800756c <TIM_OC6_SetConfig+0xc8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d109      	bne.n	8007530 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007522:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	029b      	lsls	r3, r3, #10
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	621a      	str	r2, [r3, #32]
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	feff8fff 	.word	0xfeff8fff
 800755c:	40010000 	.word	0x40010000
 8007560:	40010400 	.word	0x40010400
 8007564:	40014000 	.word	0x40014000
 8007568:	40014400 	.word	0x40014400
 800756c:	40014800 	.word	0x40014800

08007570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007584:	2302      	movs	r3, #2
 8007586:	e06d      	b.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a30      	ldr	r2, [pc, #192]	@ (8007670 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d004      	beq.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d108      	bne.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a20      	ldr	r2, [pc, #128]	@ (8007670 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d022      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075fa:	d01d      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a1d      	ldr	r2, [pc, #116]	@ (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d018      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a1c      	ldr	r2, [pc, #112]	@ (800767c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d013      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1a      	ldr	r2, [pc, #104]	@ (8007680 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00e      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a15      	ldr	r2, [pc, #84]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d009      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a16      	ldr	r2, [pc, #88]	@ (8007684 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a15      	ldr	r2, [pc, #84]	@ (8007688 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d10c      	bne.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800763e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	4313      	orrs	r3, r2
 8007648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	40010000 	.word	0x40010000
 8007674:	40010400 	.word	0x40010400
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40000c00 	.word	0x40000c00
 8007684:	40001800 	.word	0x40001800
 8007688:	40014000 	.word	0x40014000

0800768c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e042      	b.n	8007724 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d106      	bne.n	80076b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7fa fe17 	bl	80022e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2224      	movs	r2, #36	@ 0x24
 80076ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0201 	bic.w	r2, r2, #1
 80076cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fd90 	bl	80081fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f825 	bl	800772c <UART_SetConfig>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e01b      	b.n	8007724 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800770a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fe0f 	bl	8008340 <UART_CheckIdleState>
 8007722:	4603      	mov	r3, r0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800772c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007730:	b092      	sub	sp, #72	@ 0x48
 8007732:	af00      	add	r7, sp, #0
 8007734:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	431a      	orrs	r2, r3
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	431a      	orrs	r2, r3
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	4313      	orrs	r3, r2
 8007752:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	4bbe      	ldr	r3, [pc, #760]	@ (8007a54 <UART_SetConfig+0x328>)
 800775c:	4013      	ands	r3, r2
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007764:	430b      	orrs	r3, r1
 8007766:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4ab3      	ldr	r2, [pc, #716]	@ (8007a58 <UART_SetConfig+0x32c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d004      	beq.n	8007798 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007794:	4313      	orrs	r3, r2
 8007796:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	4baf      	ldr	r3, [pc, #700]	@ (8007a5c <UART_SetConfig+0x330>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	6812      	ldr	r2, [r2, #0]
 80077a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077a8:	430b      	orrs	r3, r1
 80077aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b2:	f023 010f 	bic.w	r1, r3, #15
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4aa6      	ldr	r2, [pc, #664]	@ (8007a60 <UART_SetConfig+0x334>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d177      	bne.n	80078bc <UART_SetConfig+0x190>
 80077cc:	4ba5      	ldr	r3, [pc, #660]	@ (8007a64 <UART_SetConfig+0x338>)
 80077ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077d4:	2b28      	cmp	r3, #40	@ 0x28
 80077d6:	d86d      	bhi.n	80078b4 <UART_SetConfig+0x188>
 80077d8:	a201      	add	r2, pc, #4	@ (adr r2, 80077e0 <UART_SetConfig+0xb4>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	08007885 	.word	0x08007885
 80077e4:	080078b5 	.word	0x080078b5
 80077e8:	080078b5 	.word	0x080078b5
 80077ec:	080078b5 	.word	0x080078b5
 80077f0:	080078b5 	.word	0x080078b5
 80077f4:	080078b5 	.word	0x080078b5
 80077f8:	080078b5 	.word	0x080078b5
 80077fc:	080078b5 	.word	0x080078b5
 8007800:	0800788d 	.word	0x0800788d
 8007804:	080078b5 	.word	0x080078b5
 8007808:	080078b5 	.word	0x080078b5
 800780c:	080078b5 	.word	0x080078b5
 8007810:	080078b5 	.word	0x080078b5
 8007814:	080078b5 	.word	0x080078b5
 8007818:	080078b5 	.word	0x080078b5
 800781c:	080078b5 	.word	0x080078b5
 8007820:	08007895 	.word	0x08007895
 8007824:	080078b5 	.word	0x080078b5
 8007828:	080078b5 	.word	0x080078b5
 800782c:	080078b5 	.word	0x080078b5
 8007830:	080078b5 	.word	0x080078b5
 8007834:	080078b5 	.word	0x080078b5
 8007838:	080078b5 	.word	0x080078b5
 800783c:	080078b5 	.word	0x080078b5
 8007840:	0800789d 	.word	0x0800789d
 8007844:	080078b5 	.word	0x080078b5
 8007848:	080078b5 	.word	0x080078b5
 800784c:	080078b5 	.word	0x080078b5
 8007850:	080078b5 	.word	0x080078b5
 8007854:	080078b5 	.word	0x080078b5
 8007858:	080078b5 	.word	0x080078b5
 800785c:	080078b5 	.word	0x080078b5
 8007860:	080078a5 	.word	0x080078a5
 8007864:	080078b5 	.word	0x080078b5
 8007868:	080078b5 	.word	0x080078b5
 800786c:	080078b5 	.word	0x080078b5
 8007870:	080078b5 	.word	0x080078b5
 8007874:	080078b5 	.word	0x080078b5
 8007878:	080078b5 	.word	0x080078b5
 800787c:	080078b5 	.word	0x080078b5
 8007880:	080078ad 	.word	0x080078ad
 8007884:	2301      	movs	r3, #1
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e222      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 800788c:	2304      	movs	r3, #4
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e21e      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007894:	2308      	movs	r3, #8
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e21a      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 800789c:	2310      	movs	r3, #16
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e216      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80078a4:	2320      	movs	r3, #32
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e212      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80078ac:	2340      	movs	r3, #64	@ 0x40
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e20e      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80078b4:	2380      	movs	r3, #128	@ 0x80
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e20a      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a69      	ldr	r2, [pc, #420]	@ (8007a68 <UART_SetConfig+0x33c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d130      	bne.n	8007928 <UART_SetConfig+0x1fc>
 80078c6:	4b67      	ldr	r3, [pc, #412]	@ (8007a64 <UART_SetConfig+0x338>)
 80078c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d826      	bhi.n	8007920 <UART_SetConfig+0x1f4>
 80078d2:	a201      	add	r2, pc, #4	@ (adr r2, 80078d8 <UART_SetConfig+0x1ac>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	080078f9 	.word	0x080078f9
 80078e0:	08007901 	.word	0x08007901
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e1ec      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e1e8      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e1e4      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e1e0      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007910:	2320      	movs	r3, #32
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e1dc      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007918:	2340      	movs	r3, #64	@ 0x40
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e1d8      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007920:	2380      	movs	r3, #128	@ 0x80
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e1d4      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a4f      	ldr	r2, [pc, #316]	@ (8007a6c <UART_SetConfig+0x340>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d130      	bne.n	8007994 <UART_SetConfig+0x268>
 8007932:	4b4c      	ldr	r3, [pc, #304]	@ (8007a64 <UART_SetConfig+0x338>)
 8007934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b05      	cmp	r3, #5
 800793c:	d826      	bhi.n	800798c <UART_SetConfig+0x260>
 800793e:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <UART_SetConfig+0x218>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	0800795d 	.word	0x0800795d
 8007948:	08007965 	.word	0x08007965
 800794c:	0800796d 	.word	0x0800796d
 8007950:	08007975 	.word	0x08007975
 8007954:	0800797d 	.word	0x0800797d
 8007958:	08007985 	.word	0x08007985
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e1b6      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007964:	2304      	movs	r3, #4
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e1b2      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 800796c:	2308      	movs	r3, #8
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e1ae      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007974:	2310      	movs	r3, #16
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e1aa      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 800797c:	2320      	movs	r3, #32
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e1a6      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007984:	2340      	movs	r3, #64	@ 0x40
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e1a2      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 800798c:	2380      	movs	r3, #128	@ 0x80
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e19e      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a35      	ldr	r2, [pc, #212]	@ (8007a70 <UART_SetConfig+0x344>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d130      	bne.n	8007a00 <UART_SetConfig+0x2d4>
 800799e:	4b31      	ldr	r3, [pc, #196]	@ (8007a64 <UART_SetConfig+0x338>)
 80079a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	2b05      	cmp	r3, #5
 80079a8:	d826      	bhi.n	80079f8 <UART_SetConfig+0x2cc>
 80079aa:	a201      	add	r2, pc, #4	@ (adr r2, 80079b0 <UART_SetConfig+0x284>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079c9 	.word	0x080079c9
 80079b4:	080079d1 	.word	0x080079d1
 80079b8:	080079d9 	.word	0x080079d9
 80079bc:	080079e1 	.word	0x080079e1
 80079c0:	080079e9 	.word	0x080079e9
 80079c4:	080079f1 	.word	0x080079f1
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e180      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80079d0:	2304      	movs	r3, #4
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e17c      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80079d8:	2308      	movs	r3, #8
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e178      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80079e0:	2310      	movs	r3, #16
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e174      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80079e8:	2320      	movs	r3, #32
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e170      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80079f0:	2340      	movs	r3, #64	@ 0x40
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e16c      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 80079f8:	2380      	movs	r3, #128	@ 0x80
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e168      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a1b      	ldr	r2, [pc, #108]	@ (8007a74 <UART_SetConfig+0x348>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d142      	bne.n	8007a90 <UART_SetConfig+0x364>
 8007a0a:	4b16      	ldr	r3, [pc, #88]	@ (8007a64 <UART_SetConfig+0x338>)
 8007a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	2b05      	cmp	r3, #5
 8007a14:	d838      	bhi.n	8007a88 <UART_SetConfig+0x35c>
 8007a16:	a201      	add	r2, pc, #4	@ (adr r2, 8007a1c <UART_SetConfig+0x2f0>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a35 	.word	0x08007a35
 8007a20:	08007a3d 	.word	0x08007a3d
 8007a24:	08007a45 	.word	0x08007a45
 8007a28:	08007a4d 	.word	0x08007a4d
 8007a2c:	08007a79 	.word	0x08007a79
 8007a30:	08007a81 	.word	0x08007a81
 8007a34:	2300      	movs	r3, #0
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	e14a      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a42:	e146      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007a44:	2308      	movs	r3, #8
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4a:	e142      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a52:	e13e      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007a54:	cfff69f3 	.word	0xcfff69f3
 8007a58:	58000c00 	.word	0x58000c00
 8007a5c:	11fff4ff 	.word	0x11fff4ff
 8007a60:	40011000 	.word	0x40011000
 8007a64:	58024400 	.word	0x58024400
 8007a68:	40004400 	.word	0x40004400
 8007a6c:	40004800 	.word	0x40004800
 8007a70:	40004c00 	.word	0x40004c00
 8007a74:	40005000 	.word	0x40005000
 8007a78:	2320      	movs	r3, #32
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7e:	e128      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007a80:	2340      	movs	r3, #64	@ 0x40
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a86:	e124      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007a88:	2380      	movs	r3, #128	@ 0x80
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8e:	e120      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4acb      	ldr	r2, [pc, #812]	@ (8007dc4 <UART_SetConfig+0x698>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d176      	bne.n	8007b88 <UART_SetConfig+0x45c>
 8007a9a:	4bcb      	ldr	r3, [pc, #812]	@ (8007dc8 <UART_SetConfig+0x69c>)
 8007a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aa2:	2b28      	cmp	r3, #40	@ 0x28
 8007aa4:	d86c      	bhi.n	8007b80 <UART_SetConfig+0x454>
 8007aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8007aac <UART_SetConfig+0x380>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007b51 	.word	0x08007b51
 8007ab0:	08007b81 	.word	0x08007b81
 8007ab4:	08007b81 	.word	0x08007b81
 8007ab8:	08007b81 	.word	0x08007b81
 8007abc:	08007b81 	.word	0x08007b81
 8007ac0:	08007b81 	.word	0x08007b81
 8007ac4:	08007b81 	.word	0x08007b81
 8007ac8:	08007b81 	.word	0x08007b81
 8007acc:	08007b59 	.word	0x08007b59
 8007ad0:	08007b81 	.word	0x08007b81
 8007ad4:	08007b81 	.word	0x08007b81
 8007ad8:	08007b81 	.word	0x08007b81
 8007adc:	08007b81 	.word	0x08007b81
 8007ae0:	08007b81 	.word	0x08007b81
 8007ae4:	08007b81 	.word	0x08007b81
 8007ae8:	08007b81 	.word	0x08007b81
 8007aec:	08007b61 	.word	0x08007b61
 8007af0:	08007b81 	.word	0x08007b81
 8007af4:	08007b81 	.word	0x08007b81
 8007af8:	08007b81 	.word	0x08007b81
 8007afc:	08007b81 	.word	0x08007b81
 8007b00:	08007b81 	.word	0x08007b81
 8007b04:	08007b81 	.word	0x08007b81
 8007b08:	08007b81 	.word	0x08007b81
 8007b0c:	08007b69 	.word	0x08007b69
 8007b10:	08007b81 	.word	0x08007b81
 8007b14:	08007b81 	.word	0x08007b81
 8007b18:	08007b81 	.word	0x08007b81
 8007b1c:	08007b81 	.word	0x08007b81
 8007b20:	08007b81 	.word	0x08007b81
 8007b24:	08007b81 	.word	0x08007b81
 8007b28:	08007b81 	.word	0x08007b81
 8007b2c:	08007b71 	.word	0x08007b71
 8007b30:	08007b81 	.word	0x08007b81
 8007b34:	08007b81 	.word	0x08007b81
 8007b38:	08007b81 	.word	0x08007b81
 8007b3c:	08007b81 	.word	0x08007b81
 8007b40:	08007b81 	.word	0x08007b81
 8007b44:	08007b81 	.word	0x08007b81
 8007b48:	08007b81 	.word	0x08007b81
 8007b4c:	08007b79 	.word	0x08007b79
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b56:	e0bc      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007b58:	2304      	movs	r3, #4
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5e:	e0b8      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007b60:	2308      	movs	r3, #8
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e0b4      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007b68:	2310      	movs	r3, #16
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e0b0      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007b70:	2320      	movs	r3, #32
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e0ac      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007b78:	2340      	movs	r3, #64	@ 0x40
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e0a8      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007b80:	2380      	movs	r3, #128	@ 0x80
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e0a4      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a8f      	ldr	r2, [pc, #572]	@ (8007dcc <UART_SetConfig+0x6a0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d130      	bne.n	8007bf4 <UART_SetConfig+0x4c8>
 8007b92:	4b8d      	ldr	r3, [pc, #564]	@ (8007dc8 <UART_SetConfig+0x69c>)
 8007b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	d826      	bhi.n	8007bec <UART_SetConfig+0x4c0>
 8007b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <UART_SetConfig+0x478>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bbd 	.word	0x08007bbd
 8007ba8:	08007bc5 	.word	0x08007bc5
 8007bac:	08007bcd 	.word	0x08007bcd
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007bdd 	.word	0x08007bdd
 8007bb8:	08007be5 	.word	0x08007be5
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc2:	e086      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bca:	e082      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd2:	e07e      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e07a      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007bdc:	2320      	movs	r3, #32
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e076      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007be4:	2340      	movs	r3, #64	@ 0x40
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e072      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007bec:	2380      	movs	r3, #128	@ 0x80
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e06e      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a75      	ldr	r2, [pc, #468]	@ (8007dd0 <UART_SetConfig+0x6a4>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d130      	bne.n	8007c60 <UART_SetConfig+0x534>
 8007bfe:	4b72      	ldr	r3, [pc, #456]	@ (8007dc8 <UART_SetConfig+0x69c>)
 8007c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	2b05      	cmp	r3, #5
 8007c08:	d826      	bhi.n	8007c58 <UART_SetConfig+0x52c>
 8007c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c10 <UART_SetConfig+0x4e4>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007c29 	.word	0x08007c29
 8007c14:	08007c31 	.word	0x08007c31
 8007c18:	08007c39 	.word	0x08007c39
 8007c1c:	08007c41 	.word	0x08007c41
 8007c20:	08007c49 	.word	0x08007c49
 8007c24:	08007c51 	.word	0x08007c51
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2e:	e050      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007c30:	2304      	movs	r3, #4
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c36:	e04c      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007c38:	2308      	movs	r3, #8
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3e:	e048      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007c40:	2310      	movs	r3, #16
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c46:	e044      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007c48:	2320      	movs	r3, #32
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e040      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007c50:	2340      	movs	r3, #64	@ 0x40
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e03c      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007c58:	2380      	movs	r3, #128	@ 0x80
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e038      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a5b      	ldr	r2, [pc, #364]	@ (8007dd4 <UART_SetConfig+0x6a8>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d130      	bne.n	8007ccc <UART_SetConfig+0x5a0>
 8007c6a:	4b57      	ldr	r3, [pc, #348]	@ (8007dc8 <UART_SetConfig+0x69c>)
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	d826      	bhi.n	8007cc4 <UART_SetConfig+0x598>
 8007c76:	a201      	add	r2, pc, #4	@ (adr r2, 8007c7c <UART_SetConfig+0x550>)
 8007c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7c:	08007c95 	.word	0x08007c95
 8007c80:	08007c9d 	.word	0x08007c9d
 8007c84:	08007ca5 	.word	0x08007ca5
 8007c88:	08007cad 	.word	0x08007cad
 8007c8c:	08007cb5 	.word	0x08007cb5
 8007c90:	08007cbd 	.word	0x08007cbd
 8007c94:	2302      	movs	r3, #2
 8007c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9a:	e01a      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca2:	e016      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007ca4:	2308      	movs	r3, #8
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007caa:	e012      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007cac:	2310      	movs	r3, #16
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e00e      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007cb4:	2320      	movs	r3, #32
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e00a      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007cbc:	2340      	movs	r3, #64	@ 0x40
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e006      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007cc4:	2380      	movs	r3, #128	@ 0x80
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e002      	b.n	8007cd2 <UART_SetConfig+0x5a6>
 8007ccc:	2380      	movs	r3, #128	@ 0x80
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8007dd4 <UART_SetConfig+0x6a8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	f040 80f8 	bne.w	8007ece <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	dc46      	bgt.n	8007d74 <UART_SetConfig+0x648>
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	f2c0 8082 	blt.w	8007df0 <UART_SetConfig+0x6c4>
 8007cec:	3b02      	subs	r3, #2
 8007cee:	2b1e      	cmp	r3, #30
 8007cf0:	d87e      	bhi.n	8007df0 <UART_SetConfig+0x6c4>
 8007cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf8 <UART_SetConfig+0x5cc>)
 8007cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf8:	08007d7b 	.word	0x08007d7b
 8007cfc:	08007df1 	.word	0x08007df1
 8007d00:	08007d83 	.word	0x08007d83
 8007d04:	08007df1 	.word	0x08007df1
 8007d08:	08007df1 	.word	0x08007df1
 8007d0c:	08007df1 	.word	0x08007df1
 8007d10:	08007d93 	.word	0x08007d93
 8007d14:	08007df1 	.word	0x08007df1
 8007d18:	08007df1 	.word	0x08007df1
 8007d1c:	08007df1 	.word	0x08007df1
 8007d20:	08007df1 	.word	0x08007df1
 8007d24:	08007df1 	.word	0x08007df1
 8007d28:	08007df1 	.word	0x08007df1
 8007d2c:	08007df1 	.word	0x08007df1
 8007d30:	08007da3 	.word	0x08007da3
 8007d34:	08007df1 	.word	0x08007df1
 8007d38:	08007df1 	.word	0x08007df1
 8007d3c:	08007df1 	.word	0x08007df1
 8007d40:	08007df1 	.word	0x08007df1
 8007d44:	08007df1 	.word	0x08007df1
 8007d48:	08007df1 	.word	0x08007df1
 8007d4c:	08007df1 	.word	0x08007df1
 8007d50:	08007df1 	.word	0x08007df1
 8007d54:	08007df1 	.word	0x08007df1
 8007d58:	08007df1 	.word	0x08007df1
 8007d5c:	08007df1 	.word	0x08007df1
 8007d60:	08007df1 	.word	0x08007df1
 8007d64:	08007df1 	.word	0x08007df1
 8007d68:	08007df1 	.word	0x08007df1
 8007d6c:	08007df1 	.word	0x08007df1
 8007d70:	08007de3 	.word	0x08007de3
 8007d74:	2b40      	cmp	r3, #64	@ 0x40
 8007d76:	d037      	beq.n	8007de8 <UART_SetConfig+0x6bc>
 8007d78:	e03a      	b.n	8007df0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007d7a:	f7fe fa5d 	bl	8006238 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d80:	e03c      	b.n	8007dfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe fa6c 	bl	8006264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d90:	e034      	b.n	8007dfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d92:	f107 0318 	add.w	r3, r7, #24
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe fbb8 	bl	800650c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da0:	e02c      	b.n	8007dfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007da2:	4b09      	ldr	r3, [pc, #36]	@ (8007dc8 <UART_SetConfig+0x69c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d016      	beq.n	8007ddc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007dae:	4b06      	ldr	r3, [pc, #24]	@ (8007dc8 <UART_SetConfig+0x69c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	08db      	lsrs	r3, r3, #3
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	4a07      	ldr	r2, [pc, #28]	@ (8007dd8 <UART_SetConfig+0x6ac>)
 8007dba:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007dc0:	e01c      	b.n	8007dfc <UART_SetConfig+0x6d0>
 8007dc2:	bf00      	nop
 8007dc4:	40011400 	.word	0x40011400
 8007dc8:	58024400 	.word	0x58024400
 8007dcc:	40007800 	.word	0x40007800
 8007dd0:	40007c00 	.word	0x40007c00
 8007dd4:	58000c00 	.word	0x58000c00
 8007dd8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007ddc:	4b9d      	ldr	r3, [pc, #628]	@ (8008054 <UART_SetConfig+0x928>)
 8007dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de0:	e00c      	b.n	8007dfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007de2:	4b9d      	ldr	r3, [pc, #628]	@ (8008058 <UART_SetConfig+0x92c>)
 8007de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de6:	e009      	b.n	8007dfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dee:	e005      	b.n	8007dfc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007dfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 81de 	beq.w	80081c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e08:	4a94      	ldr	r2, [pc, #592]	@ (800805c <UART_SetConfig+0x930>)
 8007e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e16:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	4413      	add	r3, r2
 8007e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d305      	bcc.n	8007e34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d903      	bls.n	8007e3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007e3a:	e1c1      	b.n	80081c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e3e:	2200      	movs	r2, #0
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	60fa      	str	r2, [r7, #12]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	4a84      	ldr	r2, [pc, #528]	@ (800805c <UART_SetConfig+0x930>)
 8007e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	2200      	movs	r2, #0
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e5e:	f7f8 fa8f 	bl	8000380 <__aeabi_uldivmod>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4610      	mov	r0, r2
 8007e68:	4619      	mov	r1, r3
 8007e6a:	f04f 0200 	mov.w	r2, #0
 8007e6e:	f04f 0300 	mov.w	r3, #0
 8007e72:	020b      	lsls	r3, r1, #8
 8007e74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e78:	0202      	lsls	r2, r0, #8
 8007e7a:	6979      	ldr	r1, [r7, #20]
 8007e7c:	6849      	ldr	r1, [r1, #4]
 8007e7e:	0849      	lsrs	r1, r1, #1
 8007e80:	2000      	movs	r0, #0
 8007e82:	460c      	mov	r4, r1
 8007e84:	4605      	mov	r5, r0
 8007e86:	eb12 0804 	adds.w	r8, r2, r4
 8007e8a:	eb43 0905 	adc.w	r9, r3, r5
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	469a      	mov	sl, r3
 8007e96:	4693      	mov	fp, r2
 8007e98:	4652      	mov	r2, sl
 8007e9a:	465b      	mov	r3, fp
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	f7f8 fa6e 	bl	8000380 <__aeabi_uldivmod>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eb2:	d308      	bcc.n	8007ec6 <UART_SetConfig+0x79a>
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eba:	d204      	bcs.n	8007ec6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	e17c      	b.n	80081c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ecc:	e178      	b.n	80081c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ed6:	f040 80c5 	bne.w	8008064 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007eda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	dc48      	bgt.n	8007f74 <UART_SetConfig+0x848>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	db7b      	blt.n	8007fde <UART_SetConfig+0x8b2>
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	d879      	bhi.n	8007fde <UART_SetConfig+0x8b2>
 8007eea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef0 <UART_SetConfig+0x7c4>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f7b 	.word	0x08007f7b
 8007ef4:	08007f83 	.word	0x08007f83
 8007ef8:	08007fdf 	.word	0x08007fdf
 8007efc:	08007fdf 	.word	0x08007fdf
 8007f00:	08007f8b 	.word	0x08007f8b
 8007f04:	08007fdf 	.word	0x08007fdf
 8007f08:	08007fdf 	.word	0x08007fdf
 8007f0c:	08007fdf 	.word	0x08007fdf
 8007f10:	08007f9b 	.word	0x08007f9b
 8007f14:	08007fdf 	.word	0x08007fdf
 8007f18:	08007fdf 	.word	0x08007fdf
 8007f1c:	08007fdf 	.word	0x08007fdf
 8007f20:	08007fdf 	.word	0x08007fdf
 8007f24:	08007fdf 	.word	0x08007fdf
 8007f28:	08007fdf 	.word	0x08007fdf
 8007f2c:	08007fdf 	.word	0x08007fdf
 8007f30:	08007fab 	.word	0x08007fab
 8007f34:	08007fdf 	.word	0x08007fdf
 8007f38:	08007fdf 	.word	0x08007fdf
 8007f3c:	08007fdf 	.word	0x08007fdf
 8007f40:	08007fdf 	.word	0x08007fdf
 8007f44:	08007fdf 	.word	0x08007fdf
 8007f48:	08007fdf 	.word	0x08007fdf
 8007f4c:	08007fdf 	.word	0x08007fdf
 8007f50:	08007fdf 	.word	0x08007fdf
 8007f54:	08007fdf 	.word	0x08007fdf
 8007f58:	08007fdf 	.word	0x08007fdf
 8007f5c:	08007fdf 	.word	0x08007fdf
 8007f60:	08007fdf 	.word	0x08007fdf
 8007f64:	08007fdf 	.word	0x08007fdf
 8007f68:	08007fdf 	.word	0x08007fdf
 8007f6c:	08007fdf 	.word	0x08007fdf
 8007f70:	08007fd1 	.word	0x08007fd1
 8007f74:	2b40      	cmp	r3, #64	@ 0x40
 8007f76:	d02e      	beq.n	8007fd6 <UART_SetConfig+0x8aa>
 8007f78:	e031      	b.n	8007fde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f7a:	f7fc ff27 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 8007f7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f80:	e033      	b.n	8007fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f82:	f7fc ff39 	bl	8004df8 <HAL_RCC_GetPCLK2Freq>
 8007f86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f88:	e02f      	b.n	8007fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe f968 	bl	8006264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f98:	e027      	b.n	8007fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f9a:	f107 0318 	add.w	r3, r7, #24
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fab4 	bl	800650c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fa8:	e01f      	b.n	8007fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007faa:	4b2d      	ldr	r3, [pc, #180]	@ (8008060 <UART_SetConfig+0x934>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d009      	beq.n	8007fca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8008060 <UART_SetConfig+0x934>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	08db      	lsrs	r3, r3, #3
 8007fbc:	f003 0303 	and.w	r3, r3, #3
 8007fc0:	4a24      	ldr	r2, [pc, #144]	@ (8008054 <UART_SetConfig+0x928>)
 8007fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fc8:	e00f      	b.n	8007fea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007fca:	4b22      	ldr	r3, [pc, #136]	@ (8008054 <UART_SetConfig+0x928>)
 8007fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fce:	e00c      	b.n	8007fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fd0:	4b21      	ldr	r3, [pc, #132]	@ (8008058 <UART_SetConfig+0x92c>)
 8007fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd4:	e009      	b.n	8007fea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fdc:	e005      	b.n	8007fea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 80e7 	beq.w	80081c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff6:	4a19      	ldr	r2, [pc, #100]	@ (800805c <UART_SetConfig+0x930>)
 8007ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008000:	fbb3 f3f2 	udiv	r3, r3, r2
 8008004:	005a      	lsls	r2, r3, #1
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	085b      	lsrs	r3, r3, #1
 800800c:	441a      	add	r2, r3
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	fbb2 f3f3 	udiv	r3, r2, r3
 8008016:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801a:	2b0f      	cmp	r3, #15
 800801c:	d916      	bls.n	800804c <UART_SetConfig+0x920>
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008024:	d212      	bcs.n	800804c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008028:	b29b      	uxth	r3, r3
 800802a:	f023 030f 	bic.w	r3, r3, #15
 800802e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	b29b      	uxth	r3, r3
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	b29a      	uxth	r2, r3
 800803c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800803e:	4313      	orrs	r3, r2
 8008040:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008048:	60da      	str	r2, [r3, #12]
 800804a:	e0b9      	b.n	80081c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008052:	e0b5      	b.n	80081c0 <UART_SetConfig+0xa94>
 8008054:	03d09000 	.word	0x03d09000
 8008058:	003d0900 	.word	0x003d0900
 800805c:	0800b244 	.word	0x0800b244
 8008060:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008064:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008068:	2b20      	cmp	r3, #32
 800806a:	dc49      	bgt.n	8008100 <UART_SetConfig+0x9d4>
 800806c:	2b00      	cmp	r3, #0
 800806e:	db7c      	blt.n	800816a <UART_SetConfig+0xa3e>
 8008070:	2b20      	cmp	r3, #32
 8008072:	d87a      	bhi.n	800816a <UART_SetConfig+0xa3e>
 8008074:	a201      	add	r2, pc, #4	@ (adr r2, 800807c <UART_SetConfig+0x950>)
 8008076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807a:	bf00      	nop
 800807c:	08008107 	.word	0x08008107
 8008080:	0800810f 	.word	0x0800810f
 8008084:	0800816b 	.word	0x0800816b
 8008088:	0800816b 	.word	0x0800816b
 800808c:	08008117 	.word	0x08008117
 8008090:	0800816b 	.word	0x0800816b
 8008094:	0800816b 	.word	0x0800816b
 8008098:	0800816b 	.word	0x0800816b
 800809c:	08008127 	.word	0x08008127
 80080a0:	0800816b 	.word	0x0800816b
 80080a4:	0800816b 	.word	0x0800816b
 80080a8:	0800816b 	.word	0x0800816b
 80080ac:	0800816b 	.word	0x0800816b
 80080b0:	0800816b 	.word	0x0800816b
 80080b4:	0800816b 	.word	0x0800816b
 80080b8:	0800816b 	.word	0x0800816b
 80080bc:	08008137 	.word	0x08008137
 80080c0:	0800816b 	.word	0x0800816b
 80080c4:	0800816b 	.word	0x0800816b
 80080c8:	0800816b 	.word	0x0800816b
 80080cc:	0800816b 	.word	0x0800816b
 80080d0:	0800816b 	.word	0x0800816b
 80080d4:	0800816b 	.word	0x0800816b
 80080d8:	0800816b 	.word	0x0800816b
 80080dc:	0800816b 	.word	0x0800816b
 80080e0:	0800816b 	.word	0x0800816b
 80080e4:	0800816b 	.word	0x0800816b
 80080e8:	0800816b 	.word	0x0800816b
 80080ec:	0800816b 	.word	0x0800816b
 80080f0:	0800816b 	.word	0x0800816b
 80080f4:	0800816b 	.word	0x0800816b
 80080f8:	0800816b 	.word	0x0800816b
 80080fc:	0800815d 	.word	0x0800815d
 8008100:	2b40      	cmp	r3, #64	@ 0x40
 8008102:	d02e      	beq.n	8008162 <UART_SetConfig+0xa36>
 8008104:	e031      	b.n	800816a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008106:	f7fc fe61 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 800810a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800810c:	e033      	b.n	8008176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800810e:	f7fc fe73 	bl	8004df8 <HAL_RCC_GetPCLK2Freq>
 8008112:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008114:	e02f      	b.n	8008176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800811a:	4618      	mov	r0, r3
 800811c:	f7fe f8a2 	bl	8006264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008124:	e027      	b.n	8008176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008126:	f107 0318 	add.w	r3, r7, #24
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe f9ee 	bl	800650c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008134:	e01f      	b.n	8008176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008136:	4b2d      	ldr	r3, [pc, #180]	@ (80081ec <UART_SetConfig+0xac0>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008142:	4b2a      	ldr	r3, [pc, #168]	@ (80081ec <UART_SetConfig+0xac0>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	08db      	lsrs	r3, r3, #3
 8008148:	f003 0303 	and.w	r3, r3, #3
 800814c:	4a28      	ldr	r2, [pc, #160]	@ (80081f0 <UART_SetConfig+0xac4>)
 800814e:	fa22 f303 	lsr.w	r3, r2, r3
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008154:	e00f      	b.n	8008176 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008156:	4b26      	ldr	r3, [pc, #152]	@ (80081f0 <UART_SetConfig+0xac4>)
 8008158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800815a:	e00c      	b.n	8008176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800815c:	4b25      	ldr	r3, [pc, #148]	@ (80081f4 <UART_SetConfig+0xac8>)
 800815e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008160:	e009      	b.n	8008176 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008168:	e005      	b.n	8008176 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008174:	bf00      	nop
    }

    if (pclk != 0U)
 8008176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008178:	2b00      	cmp	r3, #0
 800817a:	d021      	beq.n	80081c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008180:	4a1d      	ldr	r2, [pc, #116]	@ (80081f8 <UART_SetConfig+0xacc>)
 8008182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008186:	461a      	mov	r2, r3
 8008188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800818a:	fbb3 f2f2 	udiv	r2, r3, r2
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	085b      	lsrs	r3, r3, #1
 8008194:	441a      	add	r2, r3
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	fbb2 f3f3 	udiv	r3, r2, r3
 800819e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a2:	2b0f      	cmp	r3, #15
 80081a4:	d909      	bls.n	80081ba <UART_SetConfig+0xa8e>
 80081a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081ac:	d205      	bcs.n	80081ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60da      	str	r2, [r3, #12]
 80081b8:	e002      	b.n	80081c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2200      	movs	r2, #0
 80081d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2200      	movs	r2, #0
 80081da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80081dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3748      	adds	r7, #72	@ 0x48
 80081e4:	46bd      	mov	sp, r7
 80081e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ea:	bf00      	nop
 80081ec:	58024400 	.word	0x58024400
 80081f0:	03d09000 	.word	0x03d09000
 80081f4:	003d0900 	.word	0x003d0900
 80081f8:	0800b244 	.word	0x0800b244

080081fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008208:	f003 0308 	and.w	r3, r3, #8
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00a      	beq.n	800826a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00a      	beq.n	80082ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01a      	beq.n	8008312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082fa:	d10a      	bne.n	8008312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	605a      	str	r2, [r3, #4]
  }
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b098      	sub	sp, #96	@ 0x60
 8008344:	af02      	add	r7, sp, #8
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008350:	f7fa f8e2 	bl	8002518 <HAL_GetTick>
 8008354:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0308 	and.w	r3, r3, #8
 8008360:	2b08      	cmp	r3, #8
 8008362:	d12f      	bne.n	80083c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008364:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800836c:	2200      	movs	r2, #0
 800836e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f88e 	bl	8008494 <UART_WaitOnFlagUntilTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d022      	beq.n	80083c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008392:	653b      	str	r3, [r7, #80]	@ 0x50
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800839c:	647b      	str	r3, [r7, #68]	@ 0x44
 800839e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e6      	bne.n	800837e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e063      	b.n	800848c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d149      	bne.n	8008466 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083da:	2200      	movs	r2, #0
 80083dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f857 	bl	8008494 <UART_WaitOnFlagUntilTimeout>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d03c      	beq.n	8008466 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	623b      	str	r3, [r7, #32]
   return(result);
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800840a:	633b      	str	r3, [r7, #48]	@ 0x30
 800840c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e6      	bne.n	80083ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3308      	adds	r3, #8
 8008424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	60fb      	str	r3, [r7, #12]
   return(result);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3308      	adds	r3, #8
 800843c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800843e:	61fa      	str	r2, [r7, #28]
 8008440:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	69b9      	ldr	r1, [r7, #24]
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	617b      	str	r3, [r7, #20]
   return(result);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e5      	bne.n	800841e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2220      	movs	r2, #32
 8008456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e012      	b.n	800848c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3758      	adds	r7, #88	@ 0x58
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	4613      	mov	r3, r2
 80084a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a4:	e04f      	b.n	8008546 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ac:	d04b      	beq.n	8008546 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ae:	f7fa f833 	bl	8002518 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d302      	bcc.n	80084c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e04e      	b.n	8008566 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0304 	and.w	r3, r3, #4
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d037      	beq.n	8008546 <UART_WaitOnFlagUntilTimeout+0xb2>
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b80      	cmp	r3, #128	@ 0x80
 80084da:	d034      	beq.n	8008546 <UART_WaitOnFlagUntilTimeout+0xb2>
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2b40      	cmp	r3, #64	@ 0x40
 80084e0:	d031      	beq.n	8008546 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	f003 0308 	and.w	r3, r3, #8
 80084ec:	2b08      	cmp	r3, #8
 80084ee:	d110      	bne.n	8008512 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2208      	movs	r2, #8
 80084f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 f839 	bl	8008570 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2208      	movs	r2, #8
 8008502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e029      	b.n	8008566 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800851c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008520:	d111      	bne.n	8008546 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800852a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f81f 	bl	8008570 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2220      	movs	r2, #32
 8008536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e00f      	b.n	8008566 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69da      	ldr	r2, [r3, #28]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	4013      	ands	r3, r2
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	429a      	cmp	r2, r3
 8008554:	bf0c      	ite	eq
 8008556:	2301      	moveq	r3, #1
 8008558:	2300      	movne	r3, #0
 800855a:	b2db      	uxtb	r3, r3
 800855c:	461a      	mov	r2, r3
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	429a      	cmp	r2, r3
 8008562:	d0a0      	beq.n	80084a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
	...

08008570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008570:	b480      	push	{r7}
 8008572:	b095      	sub	sp, #84	@ 0x54
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008588:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800858c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008596:	643b      	str	r3, [r7, #64]	@ 0x40
 8008598:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800859c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e6      	bne.n	8008578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3308      	adds	r3, #8
 80085b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	4b1e      	ldr	r3, [pc, #120]	@ (8008638 <UART_EndRxTransfer+0xc8>)
 80085be:	4013      	ands	r3, r2
 80085c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e5      	bne.n	80085aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d118      	bne.n	8008618 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f023 0310 	bic.w	r3, r3, #16
 80085fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008604:	61bb      	str	r3, [r7, #24]
 8008606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6979      	ldr	r1, [r7, #20]
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	613b      	str	r3, [r7, #16]
   return(result);
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e6      	bne.n	80085e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2220      	movs	r2, #32
 800861c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800862c:	bf00      	nop
 800862e:	3754      	adds	r7, #84	@ 0x54
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	effffffe 	.word	0xeffffffe

0800863c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800864a:	2b01      	cmp	r3, #1
 800864c:	d101      	bne.n	8008652 <HAL_UARTEx_DisableFifoMode+0x16>
 800864e:	2302      	movs	r3, #2
 8008650:	e027      	b.n	80086a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2224      	movs	r2, #36	@ 0x24
 800865e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 0201 	bic.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008680:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2220      	movs	r2, #32
 8008694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086c2:	2302      	movs	r3, #2
 80086c4:	e02d      	b.n	8008722 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2224      	movs	r2, #36	@ 0x24
 80086d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0201 	bic.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f850 	bl	80087a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2220      	movs	r2, #32
 8008714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800873a:	2b01      	cmp	r3, #1
 800873c:	d101      	bne.n	8008742 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800873e:	2302      	movs	r3, #2
 8008740:	e02d      	b.n	800879e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2224      	movs	r2, #36	@ 0x24
 800874e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0201 	bic.w	r2, r2, #1
 8008768:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f812 	bl	80087a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d108      	bne.n	80087ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087c8:	e031      	b.n	800882e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ca:	2310      	movs	r3, #16
 80087cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087ce:	2310      	movs	r3, #16
 80087d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	0e5b      	lsrs	r3, r3, #25
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	0f5b      	lsrs	r3, r3, #29
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	7b3a      	ldrb	r2, [r7, #12]
 80087f6:	4911      	ldr	r1, [pc, #68]	@ (800883c <UARTEx_SetNbDataToProcess+0x94>)
 80087f8:	5c8a      	ldrb	r2, [r1, r2]
 80087fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087fe:	7b3a      	ldrb	r2, [r7, #12]
 8008800:	490f      	ldr	r1, [pc, #60]	@ (8008840 <UARTEx_SetNbDataToProcess+0x98>)
 8008802:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008804:	fb93 f3f2 	sdiv	r3, r3, r2
 8008808:	b29a      	uxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	7b7a      	ldrb	r2, [r7, #13]
 8008814:	4909      	ldr	r1, [pc, #36]	@ (800883c <UARTEx_SetNbDataToProcess+0x94>)
 8008816:	5c8a      	ldrb	r2, [r1, r2]
 8008818:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800881c:	7b7a      	ldrb	r2, [r7, #13]
 800881e:	4908      	ldr	r1, [pc, #32]	@ (8008840 <UARTEx_SetNbDataToProcess+0x98>)
 8008820:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008822:	fb93 f3f2 	sdiv	r3, r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	0800b25c 	.word	0x0800b25c
 8008840:	0800b264 	.word	0x0800b264

08008844 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d121      	bne.n	800889a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	4b27      	ldr	r3, [pc, #156]	@ (80088f8 <FMC_SDRAM_Init+0xb4>)
 800885c:	4013      	ands	r3, r2
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	6851      	ldr	r1, [r2, #4]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	6892      	ldr	r2, [r2, #8]
 8008866:	4311      	orrs	r1, r2
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	68d2      	ldr	r2, [r2, #12]
 800886c:	4311      	orrs	r1, r2
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	6912      	ldr	r2, [r2, #16]
 8008872:	4311      	orrs	r1, r2
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	6952      	ldr	r2, [r2, #20]
 8008878:	4311      	orrs	r1, r2
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	6992      	ldr	r2, [r2, #24]
 800887e:	4311      	orrs	r1, r2
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	69d2      	ldr	r2, [r2, #28]
 8008884:	4311      	orrs	r1, r2
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	6a12      	ldr	r2, [r2, #32]
 800888a:	4311      	orrs	r1, r2
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008890:	430a      	orrs	r2, r1
 8008892:	431a      	orrs	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	e026      	b.n	80088e8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	69d9      	ldr	r1, [r3, #28]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	4319      	orrs	r1, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b0:	430b      	orrs	r3, r1
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	4b0e      	ldr	r3, [pc, #56]	@ (80088f8 <FMC_SDRAM_Init+0xb4>)
 80088be:	4013      	ands	r3, r2
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	6851      	ldr	r1, [r2, #4]
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	6892      	ldr	r2, [r2, #8]
 80088c8:	4311      	orrs	r1, r2
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	68d2      	ldr	r2, [r2, #12]
 80088ce:	4311      	orrs	r1, r2
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	6912      	ldr	r2, [r2, #16]
 80088d4:	4311      	orrs	r1, r2
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	6952      	ldr	r2, [r2, #20]
 80088da:	4311      	orrs	r1, r2
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	6992      	ldr	r2, [r2, #24]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	ffff8000 	.word	0xffff8000

080088fc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d128      	bne.n	8008960 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	1e59      	subs	r1, r3, #1
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	3b01      	subs	r3, #1
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	4319      	orrs	r1, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	3b01      	subs	r3, #1
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	4319      	orrs	r1, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	3b01      	subs	r3, #1
 8008936:	031b      	lsls	r3, r3, #12
 8008938:	4319      	orrs	r1, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	3b01      	subs	r3, #1
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	4319      	orrs	r1, r3
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	3b01      	subs	r3, #1
 800894a:	051b      	lsls	r3, r3, #20
 800894c:	4319      	orrs	r1, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	3b01      	subs	r3, #1
 8008954:	061b      	lsls	r3, r3, #24
 8008956:	430b      	orrs	r3, r1
 8008958:	431a      	orrs	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	609a      	str	r2, [r3, #8]
 800895e:	e02d      	b.n	80089bc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	4b19      	ldr	r3, [pc, #100]	@ (80089cc <FMC_SDRAM_Timing_Init+0xd0>)
 8008966:	4013      	ands	r3, r2
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	68d2      	ldr	r2, [r2, #12]
 800896c:	3a01      	subs	r2, #1
 800896e:	0311      	lsls	r1, r2, #12
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	6952      	ldr	r2, [r2, #20]
 8008974:	3a01      	subs	r2, #1
 8008976:	0512      	lsls	r2, r2, #20
 8008978:	430a      	orrs	r2, r1
 800897a:	431a      	orrs	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	1e59      	subs	r1, r3, #1
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	3b01      	subs	r3, #1
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	4319      	orrs	r1, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	3b01      	subs	r3, #1
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	4319      	orrs	r1, r3
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	041b      	lsls	r3, r3, #16
 80089aa:	4319      	orrs	r1, r3
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	061b      	lsls	r3, r3, #24
 80089b4:	430b      	orrs	r3, r1
 80089b6:	431a      	orrs	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	ff0f0fff 	.word	0xff0f0fff

080089d0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008a14 <FMC_SDRAM_SendCommand+0x44>)
 80089e2:	4013      	ands	r3, r2
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	6811      	ldr	r1, [r2, #0]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	6852      	ldr	r2, [r2, #4]
 80089ec:	4311      	orrs	r1, r2
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	6892      	ldr	r2, [r2, #8]
 80089f2:	3a01      	subs	r2, #1
 80089f4:	0152      	lsls	r2, r2, #5
 80089f6:	4311      	orrs	r1, r2
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	68d2      	ldr	r2, [r2, #12]
 80089fc:	0252      	lsls	r2, r2, #9
 80089fe:	430a      	orrs	r2, r1
 8008a00:	431a      	orrs	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	ffc00000 	.word	0xffc00000

08008a18 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	695a      	ldr	r2, [r3, #20]
 8008a26:	4b07      	ldr	r3, [pc, #28]	@ (8008a44 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	0052      	lsls	r2, r2, #1
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	ffffc001 	.word	0xffffc001

08008a48 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
    {
 8008a50:	4a04      	ldr	r2, [pc, #16]	@ (8008a64 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	601a      	str	r2, [r3, #0]
    }
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	0800b2dc 	.word	0x0800b2dc

08008a68 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
    }
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff ffe9 	bl	8008a48 <_ZN8touchgfx4FontD1Ev>
 8008a76:	2114      	movs	r1, #20
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f001 f9f0 	bl	8009e5e <_ZdlPvj>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8008a88:	b590      	push	{r4, r7, lr}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8008a94:	887b      	ldrh	r3, [r7, #2]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e010      	b.n	8008ac0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	681c      	ldr	r4, [r3, #0]
 8008aae:	f107 030f 	add.w	r3, r7, #15
 8008ab2:	f107 0210 	add.w	r2, r7, #16
 8008ab6:	8879      	ldrh	r1, [r7, #2]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	47a0      	blx	r4
 8008abc:	6178      	str	r0, [r7, #20]
        return glyph;
 8008abe:	697b      	ldr	r3, [r7, #20]
    }
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	371c      	adds	r7, #28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd90      	pop	{r4, r7, pc}

08008ac8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	89db      	ldrh	r3, [r3, #14]
    }
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	8a1b      	ldrh	r3, [r3, #16]
    }
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	88db      	ldrh	r3, [r3, #6]
    }
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	889b      	ldrh	r3, [r3, #4]
    }
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	7a9b      	ldrb	r3, [r3, #10]
 8008b34:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008b38:	b2db      	uxtb	r3, r3
    }
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	7a9b      	ldrb	r3, [r3, #10]
 8008b52:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008b56:	b2db      	uxtb	r3, r3
    }
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
    {
        return false;
 8008b6c:	2300      	movs	r3, #0
    }
 8008b6e:	4618      	mov	r0, r3
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8008b82:	f04f 0300 	mov.w	r3, #0
 8008b86:	ee07 3a90 	vmov	s15, r3
    }
 8008b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	4a05      	ldr	r2, [pc, #20]	@ (8008bb8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff ff4d 	bl	8008a48 <_ZN8touchgfx4FontD1Ev>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	0800b340 	.word	0x0800b340

08008bbc <_ZN8touchgfx9ConstFontD0Ev>:
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff ffe7 	bl	8008b98 <_ZN8touchgfx9ConstFontD1Ev>
 8008bca:	211c      	movs	r1, #28
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 f946 	bl	8009e5e <_ZdlPvj>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	4a05      	ldr	r2, [pc, #20]	@ (8008bfc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7ff ffd3 	bl	8008b98 <_ZN8touchgfx9ConstFontD1Ev>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	0800b274 	.word	0x0800b274

08008c00 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff ffe7 	bl	8008bdc <_ZN8touchgfx13GeneratedFontD1Ev>
 8008c0e:	212c      	movs	r1, #44	@ 0x2c
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 f924 	bl	8009e5e <_ZdlPvj>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08e      	sub	sp, #56	@ 0x38
 8008c54:	af0a      	add	r7, sp, #40	@ 0x28
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	460b      	mov	r3, r1
 8008c60:	80fb      	strh	r3, [r7, #6]
 8008c62:	4613      	mov	r3, r2
 8008c64:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	88b9      	ldrh	r1, [r7, #4]
 8008c6a:	88fa      	ldrh	r2, [r7, #6]
 8008c6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c70:	9308      	str	r3, [sp, #32]
 8008c72:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008c74:	9307      	str	r3, [sp, #28]
 8008c76:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008c7a:	9306      	str	r3, [sp, #24]
 8008c7c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c86:	9304      	str	r3, [sp, #16]
 8008c88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c8c:	9303      	str	r3, [sp, #12]
 8008c8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c92:	9302      	str	r3, [sp, #8]
 8008c94:	7f3b      	ldrb	r3, [r7, #28]
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	8b3b      	ldrh	r3, [r7, #24]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	68b9      	ldr	r1, [r7, #8]
 8008ca0:	f000 fb38 	bl	8009314 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8008ca4:	4a09      	ldr	r2, [pc, #36]	@ (8008ccc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cae:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cb4:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cba:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cc0:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	0800b274 	.word	0x0800b274

08008cd0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	3302      	adds	r3, #2
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	041b      	lsls	r3, r3, #16
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	889b      	ldrh	r3, [r3, #4]
 8008d02:	0adb      	lsrs	r3, r3, #11
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	4413      	add	r3, r2
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	371c      	adds	r7, #28
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8008d22:	b480      	push	{r7}
 8008d24:	b089      	sub	sp, #36	@ 0x24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	607a      	str	r2, [r7, #4]
 8008d2e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	7b1b      	ldrb	r3, [r3, #12]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e032      	b.n	8008da8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a1a      	ldr	r2, [r3, #32]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	7b5b      	ldrb	r3, [r3, #13]
 8008d4e:	b21b      	sxth	r3, r3
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	b21b      	sxth	r3, r3
 8008d54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d58:	b219      	sxth	r1, r3
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	7adb      	ldrb	r3, [r3, #11]
 8008d5e:	b21b      	sxth	r3, r3
 8008d60:	430b      	orrs	r3, r1
 8008d62:	b21b      	sxth	r3, r3
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	7b1b      	ldrb	r3, [r3, #12]
 8008d70:	837b      	strh	r3, [r7, #26]
 8008d72:	e013      	b.n	8008d9c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	897a      	ldrh	r2, [r7, #10]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d103      	bne.n	8008d86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008d84:	e010      	b.n	8008da8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	897a      	ldrh	r2, [r7, #10]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d309      	bcc.n	8008da4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8008d90:	8b7b      	ldrh	r3, [r7, #26]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	837b      	strh	r3, [r7, #26]
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	3304      	adds	r3, #4
 8008d9a:	61fb      	str	r3, [r7, #28]
 8008d9c:	8b7b      	ldrh	r3, [r7, #26]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e8      	bne.n	8008d74 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 8008da2:	e000      	b.n	8008da6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 8008da4:	bf00      	nop
        }
    }
    return 0;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3724      	adds	r7, #36	@ 0x24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Asap_Regular_24_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Asap_Regular_24_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_24_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_24_4bpp(glyphs_Asap_Regular_24_4bpp, 21, 24, 24, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_24_4bpp, kerning_Asap_Regular_24_4bpp, 0, 0, 0, 0);
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	4801      	ldr	r0, [pc, #4]	@ (8008dc0 <__tcf_0+0xc>)
 8008dba:	f7ff ff0f 	bl	8008bdc <_ZN8touchgfx13GeneratedFontD1Ev>
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	2400034c 	.word	0x2400034c

08008dc4 <_Z28getFont_Asap_Regular_24_4bppv>:
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08e      	sub	sp, #56	@ 0x38
 8008dc8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont Asap_Regular_24_4bpp(glyphs_Asap_Regular_24_4bpp, 21, 24, 24, 0, 0, 4, 1, 0, 0, unicodes_Asap_Regular_24_4bpp, kerning_Asap_Regular_24_4bpp, 0, 0, 0, 0);
 8008dca:	4b21      	ldr	r3, [pc, #132]	@ (8008e50 <_Z28getFont_Asap_Regular_24_4bppv+0x8c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f3bf 8f5b 	dmb	ish
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bf0c      	ite	eq
 8008dda:	2301      	moveq	r3, #1
 8008ddc:	2300      	movne	r3, #0
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d030      	beq.n	8008e46 <_Z28getFont_Asap_Regular_24_4bppv+0x82>
 8008de4:	481a      	ldr	r0, [pc, #104]	@ (8008e50 <_Z28getFont_Asap_Regular_24_4bppv+0x8c>)
 8008de6:	f001 f83c 	bl	8009e62 <__cxa_guard_acquire>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bf14      	ite	ne
 8008df0:	2301      	movne	r3, #1
 8008df2:	2300      	moveq	r3, #0
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d025      	beq.n	8008e46 <_Z28getFont_Asap_Regular_24_4bppv+0x82>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008dfe:	2300      	movs	r3, #0
 8008e00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e02:	2300      	movs	r3, #0
 8008e04:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e06:	2300      	movs	r3, #0
 8008e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e0a:	4b12      	ldr	r3, [pc, #72]	@ (8008e54 <_Z28getFont_Asap_Regular_24_4bppv+0x90>)
 8008e0c:	9308      	str	r3, [sp, #32]
 8008e0e:	4b12      	ldr	r3, [pc, #72]	@ (8008e58 <_Z28getFont_Asap_Regular_24_4bppv+0x94>)
 8008e10:	9307      	str	r3, [sp, #28]
 8008e12:	2300      	movs	r3, #0
 8008e14:	9306      	str	r3, [sp, #24]
 8008e16:	2300      	movs	r3, #0
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	2304      	movs	r3, #4
 8008e20:	9303      	str	r3, [sp, #12]
 8008e22:	2300      	movs	r3, #0
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	2300      	movs	r3, #0
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	2318      	movs	r3, #24
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	2318      	movs	r3, #24
 8008e30:	2215      	movs	r2, #21
 8008e32:	490a      	ldr	r1, [pc, #40]	@ (8008e5c <_Z28getFont_Asap_Regular_24_4bppv+0x98>)
 8008e34:	480a      	ldr	r0, [pc, #40]	@ (8008e60 <_Z28getFont_Asap_Regular_24_4bppv+0x9c>)
 8008e36:	f7ff ff0b 	bl	8008c50 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008e3a:	480a      	ldr	r0, [pc, #40]	@ (8008e64 <_Z28getFont_Asap_Regular_24_4bppv+0xa0>)
 8008e3c:	f001 f85c 	bl	8009ef8 <atexit>
 8008e40:	4803      	ldr	r0, [pc, #12]	@ (8008e50 <_Z28getFont_Asap_Regular_24_4bppv+0x8c>)
 8008e42:	f001 f81a 	bl	8009e7a <__cxa_guard_release>
    return Asap_Regular_24_4bpp;
 8008e46:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <_Z28getFont_Asap_Regular_24_4bppv+0x9c>)
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	24000378 	.word	0x24000378
 8008e54:	0800bd2c 	.word	0x0800bd2c
 8008e58:	0800bd30 	.word	0x0800bd30
 8008e5c:	0800bc04 	.word	0x0800bc04
 8008e60:	2400034c 	.word	0x2400034c
 8008e64:	08008db5 	.word	0x08008db5

08008e68 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	460b      	mov	r3, r1
 8008e72:	607a      	str	r2, [r7, #4]
 8008e74:	817b      	strh	r3, [r7, #10]
        return 0;
 8008e76:	2300      	movs	r3, #0
    }
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
        return 0;
 8008e8c:	2300      	movs	r3, #0
    }
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
        return 0;
 8008ea2:	2300      	movs	r3, #0
    }
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008eb0:	b40e      	push	{r1, r2, r3}
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8008eba:	f107 0320 	add.w	r3, r7, #32
 8008ebe:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f8f8 	bl	80090bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008ed0:	89fb      	ldrh	r3, [r7, #14]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008edc:	b003      	add	sp, #12
 8008ede:	4770      	bx	lr

08008ee0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008ee0:	b40c      	push	{r2, r3}
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	460b      	mov	r3, r1
 8008eec:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8008eee:	f107 031c 	add.w	r3, r7, #28
 8008ef2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008ef4:	78f9      	ldrb	r1, [r7, #3]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f8de 	bl	80090bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008f00:	4603      	mov	r3, r0
 8008f02:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008f04:	89fb      	ldrh	r3, [r7, #14]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f10:	b002      	add	sp, #8
 8008f12:	4770      	bx	lr

08008f14 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	@ 0x28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d016      	beq.n	8008f56 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3322      	adds	r3, #34	@ 0x22
 8008f2c:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f30:	8adb      	ldrh	r3, [r3, #22]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d105      	bne.n	8008f42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8008f36:	4b43      	ldr	r3, [pc, #268]	@ (8009044 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008f38:	4a43      	ldr	r2, [pc, #268]	@ (8009048 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008f3a:	21c5      	movs	r1, #197	@ 0xc5
 8008f3c:	4843      	ldr	r0, [pc, #268]	@ (800904c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008f3e:	f000 ffbd 	bl	8009ebc <__assert_func>
            return buffer[pos];
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	8a9b      	ldrh	r3, [r3, #20]
 8008f46:	461a      	mov	r2, r3
 8008f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e000      	b.n	8008f58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8008f56:	2300      	movs	r3, #0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d06a      	beq.n	8009032 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 ff5f 	bl	8009e20 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3322      	adds	r3, #34	@ 0x22
 8008f66:	623b      	str	r3, [r7, #32]
 8008f68:	2301      	movs	r3, #1
 8008f6a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	8adb      	ldrh	r3, [r3, #22]
 8008f70:	8bfa      	ldrh	r2, [r7, #30]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d305      	bcc.n	8008f82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8008f76:	4b36      	ldr	r3, [pc, #216]	@ (8009050 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8008f78:	4a36      	ldr	r2, [pc, #216]	@ (8009054 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8008f7a:	21cb      	movs	r1, #203	@ 0xcb
 8008f7c:	4833      	ldr	r0, [pc, #204]	@ (800904c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008f7e:	f000 ff9d 	bl	8009ebc <__assert_func>
            const uint16_t index = pos + offset;
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	8a9a      	ldrh	r2, [r3, #20]
 8008f86:	8bfb      	ldrh	r3, [r7, #30]
 8008f88:	4413      	add	r3, r2
 8008f8a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8008f8c:	8bbb      	ldrh	r3, [r7, #28]
 8008f8e:	2b09      	cmp	r3, #9
 8008f90:	d801      	bhi.n	8008f96 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8008f92:	8bbb      	ldrh	r3, [r7, #28]
 8008f94:	e001      	b.n	8008f9a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008f96:	8bbb      	ldrh	r3, [r7, #28]
 8008f98:	3b0a      	subs	r3, #10
 8008f9a:	6a3a      	ldr	r2, [r7, #32]
 8008f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fa0:	f640 123f 	movw	r2, #2367	@ 0x93f
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	bf0c      	ite	eq
 8008fa8:	2301      	moveq	r3, #1
 8008faa:	2300      	movne	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d03f      	beq.n	8009032 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3322      	adds	r3, #34	@ 0x22
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	3222      	adds	r2, #34	@ 0x22
 8008fba:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	8ad2      	ldrh	r2, [r2, #22]
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	d105      	bne.n	8008fd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8009044 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008fc6:	4a20      	ldr	r2, [pc, #128]	@ (8009048 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008fc8:	21c5      	movs	r1, #197	@ 0xc5
 8008fca:	4820      	ldr	r0, [pc, #128]	@ (800904c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008fcc:	f000 ff76 	bl	8009ebc <__assert_func>
            return buffer[pos];
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	8a92      	ldrh	r2, [r2, #20]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008fdc:	613b      	str	r3, [r7, #16]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	8adb      	ldrh	r3, [r3, #22]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d806      	bhi.n	8008ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8008fea:	4b1b      	ldr	r3, [pc, #108]	@ (8009058 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8008fec:	4a1b      	ldr	r2, [pc, #108]	@ (800905c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8008fee:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8008ff2:	4816      	ldr	r0, [pc, #88]	@ (800904c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008ff4:	f000 ff62 	bl	8009ebc <__assert_func>
            const uint16_t index = pos + 1;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	8a9b      	ldrh	r3, [r3, #20]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009000:	89bb      	ldrh	r3, [r7, #12]
 8009002:	2b09      	cmp	r3, #9
 8009004:	d801      	bhi.n	800900a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009006:	89bb      	ldrh	r3, [r7, #12]
 8009008:	e000      	b.n	800900c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800900a:	2300      	movs	r3, #0
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	89f9      	ldrh	r1, [r7, #14]
 8009010:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009014:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3322      	adds	r3, #34	@ 0x22
 800901a:	61bb      	str	r3, [r7, #24]
 800901c:	f640 133f 	movw	r3, #2367	@ 0x93f
 8009020:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	8a9b      	ldrh	r3, [r3, #20]
 8009026:	4619      	mov	r1, r3
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	8afa      	ldrh	r2, [r7, #22]
 800902c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009030:	bf00      	nop
        }
    }
    return getNextChar();
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fdf6 	bl	8009c24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009038:	4603      	mov	r3, r0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3728      	adds	r7, #40	@ 0x28
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	0800af90 	.word	0x0800af90
 8009048:	0800af9c 	.word	0x0800af9c
 800904c:	0800b048 	.word	0x0800b048
 8009050:	0800b090 	.word	0x0800b090
 8009054:	0800b0a0 	.word	0x0800b0a0
 8009058:	0800b174 	.word	0x0800b174
 800905c:	0800b180 	.word	0x0800b180

08009060 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fda4 	bl	8009bb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800906e:	bf00      	nop
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <_Z41__static_initialization_and_destruction_0v>:
    case 0:
        touchgfx_fonts[0] = &(getFont_Asap_Regular_24_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
    &(getFont_Asap_Regular_24_4bpp())
 800907c:	f7ff fea2 	bl	8008dc4 <_Z28getFont_Asap_Regular_24_4bppv>
 8009080:	4603      	mov	r3, r0
};
 8009082:	4a02      	ldr	r2, [pc, #8]	@ (800908c <_Z41__static_initialization_and_destruction_0v+0x14>)
 8009084:	6013      	str	r3, [r2, #0]
} // namespace TypedTextDatabase
 8009086:	bf00      	nop
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	2400037c 	.word	0x2400037c

08009090 <_GLOBAL__sub_I_touchgfx_fonts>:
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
 8009094:	f7ff fff0 	bl	8009078 <_Z41__static_initialization_and_destruction_0v>
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800909c:	4b01      	ldr	r3, [pc, #4]	@ (80090a4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	4770      	bx	lr
 80090a4:	24000380 	.word	0x24000380

080090a8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80090a8:	4b03      	ldr	r3, [pc, #12]	@ (80090b8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	801a      	strh	r2, [r3, #0]
 80090ae:	805a      	strh	r2, [r3, #2]
 80090b0:	809a      	strh	r2, [r3, #4]
 80090b2:	80da      	strh	r2, [r3, #6]
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	24000384 	.word	0x24000384

080090bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	b09d      	sub	sp, #116	@ 0x74
 80090c2:	4606      	mov	r6, r0
 80090c4:	4614      	mov	r4, r2
 80090c6:	468a      	mov	sl, r1
 80090c8:	a803      	add	r0, sp, #12
 80090ca:	461d      	mov	r5, r3
 80090cc:	f000 f9b4 	bl	8009438 <_ZN8touchgfx12TextProviderC1Ev>
 80090d0:	6833      	ldr	r3, [r6, #0]
 80090d2:	4630      	mov	r0, r6
 80090d4:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80090d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090da:	4798      	blx	r3
 80090dc:	6833      	ldr	r3, [r6, #0]
 80090de:	4607      	mov	r7, r0
 80090e0:	4630      	mov	r0, r6
 80090e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090e4:	4798      	blx	r3
 80090e6:	462a      	mov	r2, r5
 80090e8:	2500      	movs	r5, #0
 80090ea:	4621      	mov	r1, r4
 80090ec:	9000      	str	r0, [sp, #0]
 80090ee:	463b      	mov	r3, r7
 80090f0:	462c      	mov	r4, r5
 80090f2:	46a9      	mov	r9, r5
 80090f4:	46a8      	mov	r8, r5
 80090f6:	a803      	add	r0, sp, #12
 80090f8:	f000 f9f1 	bl	80094de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80090fc:	2300      	movs	r3, #0
 80090fe:	9302      	str	r3, [sp, #8]
 8009100:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8009104:	429c      	cmp	r4, r3
 8009106:	d002      	beq.n	800910e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8009108:	455c      	cmp	r4, fp
 800910a:	bf18      	it	ne
 800910c:	4625      	movne	r5, r4
 800910e:	ab02      	add	r3, sp, #8
 8009110:	4632      	mov	r2, r6
 8009112:	4651      	mov	r1, sl
 8009114:	a803      	add	r0, sp, #12
 8009116:	f000 fd05 	bl	8009b24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800911a:	4604      	mov	r4, r0
 800911c:	b108      	cbz	r0, 8009122 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800911e:	280a      	cmp	r0, #10
 8009120:	d10a      	bne.n	8009138 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8009122:	45c1      	cmp	r9, r8
 8009124:	bf38      	it	cc
 8009126:	46c1      	movcc	r9, r8
 8009128:	f04f 0800 	mov.w	r8, #0
 800912c:	2c00      	cmp	r4, #0
 800912e:	d1e5      	bne.n	80090fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8009130:	4648      	mov	r0, r9
 8009132:	b01d      	add	sp, #116	@ 0x74
 8009134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009138:	9a02      	ldr	r2, [sp, #8]
 800913a:	2a00      	cmp	r2, #0
 800913c:	d0de      	beq.n	80090fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800913e:	7b57      	ldrb	r7, [r2, #13]
 8009140:	4629      	mov	r1, r5
 8009142:	6833      	ldr	r3, [r6, #0]
 8009144:	007f      	lsls	r7, r7, #1
 8009146:	8894      	ldrh	r4, [r2, #4]
 8009148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800914a:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800914e:	7a97      	ldrb	r7, [r2, #10]
 8009150:	4307      	orrs	r7, r0
 8009152:	4630      	mov	r0, r6
 8009154:	4798      	blx	r3
 8009156:	4438      	add	r0, r7
 8009158:	4480      	add	r8, r0
 800915a:	fa1f f888 	uxth.w	r8, r8
 800915e:	e7e5      	b.n	800912c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08009160 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8009160:	b508      	push	{r3, lr}
 8009162:	6803      	ldr	r3, [r0, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	4798      	blx	r3
 8009168:	b128      	cbz	r0, 8009176 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800916a:	7b43      	ldrb	r3, [r0, #13]
 800916c:	7a80      	ldrb	r0, [r0, #10]
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009174:	4318      	orrs	r0, r3
 8009176:	bd08      	pop	{r3, pc}

08009178 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8009178:	b40e      	push	{r1, r2, r3}
 800917a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800917c:	b09e      	sub	sp, #120	@ 0x78
 800917e:	4605      	mov	r5, r0
 8009180:	ab23      	add	r3, sp, #140	@ 0x8c
 8009182:	a805      	add	r0, sp, #20
 8009184:	f853 4b04 	ldr.w	r4, [r3], #4
 8009188:	9303      	str	r3, [sp, #12]
 800918a:	f000 f955 	bl	8009438 <_ZN8touchgfx12TextProviderC1Ev>
 800918e:	682b      	ldr	r3, [r5, #0]
 8009190:	4628      	mov	r0, r5
 8009192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009194:	4798      	blx	r3
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	4606      	mov	r6, r0
 800919a:	4628      	mov	r0, r5
 800919c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800919e:	4798      	blx	r3
 80091a0:	4633      	mov	r3, r6
 80091a2:	4621      	mov	r1, r4
 80091a4:	ae1e      	add	r6, sp, #120	@ 0x78
 80091a6:	2400      	movs	r4, #0
 80091a8:	9000      	str	r0, [sp, #0]
 80091aa:	9a03      	ldr	r2, [sp, #12]
 80091ac:	a805      	add	r0, sp, #20
 80091ae:	f000 f996 	bl	80094de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80091b2:	f846 4d68 	str.w	r4, [r6, #-104]!
 80091b6:	462a      	mov	r2, r5
 80091b8:	4633      	mov	r3, r6
 80091ba:	4621      	mov	r1, r4
 80091bc:	a805      	add	r0, sp, #20
 80091be:	f000 fcb1 	bl	8009b24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80091c2:	b300      	cbz	r0, 8009206 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80091c4:	280a      	cmp	r0, #10
 80091c6:	d01a      	beq.n	80091fe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80091c8:	9f04      	ldr	r7, [sp, #16]
 80091ca:	b1c7      	cbz	r7, 80091fe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80091cc:	7b78      	ldrb	r0, [r7, #13]
 80091ce:	7a3b      	ldrb	r3, [r7, #8]
 80091d0:	00c1      	lsls	r1, r0, #3
 80091d2:	88ea      	ldrh	r2, [r5, #6]
 80091d4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80091d8:	4319      	orrs	r1, r3
 80091da:	0643      	lsls	r3, r0, #25
 80091dc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80091e0:	bf48      	it	mi
 80091e2:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80091e6:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80091ea:	bf48      	it	mi
 80091ec:	b219      	sxthmi	r1, r3
 80091ee:	79fb      	ldrb	r3, [r7, #7]
 80091f0:	4303      	orrs	r3, r0
 80091f2:	4413      	add	r3, r2
 80091f4:	1a5b      	subs	r3, r3, r1
 80091f6:	b21b      	sxth	r3, r3
 80091f8:	429c      	cmp	r4, r3
 80091fa:	bfb8      	it	lt
 80091fc:	461c      	movlt	r4, r3
 80091fe:	4633      	mov	r3, r6
 8009200:	462a      	mov	r2, r5
 8009202:	2100      	movs	r1, #0
 8009204:	e7da      	b.n	80091bc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8009206:	b2a0      	uxth	r0, r4
 8009208:	b01e      	add	sp, #120	@ 0x78
 800920a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800920e:	b003      	add	sp, #12
 8009210:	4770      	bx	lr

08009212 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8009212:	7a43      	ldrb	r3, [r0, #9]
 8009214:	8880      	ldrh	r0, [r0, #4]
 8009216:	4418      	add	r0, r3
 8009218:	b280      	uxth	r0, r0
 800921a:	4770      	bx	lr

0800921c <_ZNK8touchgfx4Font13getFontHeightEv>:
 800921c:	6803      	ldr	r3, [r0, #0]
 800921e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009220:	4718      	bx	r3

08009222 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8009222:	b40e      	push	{r1, r2, r3}
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	b09d      	sub	sp, #116	@ 0x74
 8009228:	4604      	mov	r4, r0
 800922a:	ab21      	add	r3, sp, #132	@ 0x84
 800922c:	a803      	add	r0, sp, #12
 800922e:	f853 5b04 	ldr.w	r5, [r3], #4
 8009232:	9302      	str	r3, [sp, #8]
 8009234:	f000 f900 	bl	8009438 <_ZN8touchgfx12TextProviderC1Ev>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	4620      	mov	r0, r4
 800923c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800923e:	4798      	blx	r3
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	4606      	mov	r6, r0
 8009244:	4620      	mov	r0, r4
 8009246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009248:	2401      	movs	r4, #1
 800924a:	4798      	blx	r3
 800924c:	4633      	mov	r3, r6
 800924e:	9000      	str	r0, [sp, #0]
 8009250:	4629      	mov	r1, r5
 8009252:	9a02      	ldr	r2, [sp, #8]
 8009254:	a803      	add	r0, sp, #12
 8009256:	f000 f942 	bl	80094de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800925a:	a803      	add	r0, sp, #12
 800925c:	f000 fce2 	bl	8009c24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009260:	b2a3      	uxth	r3, r4
 8009262:	b138      	cbz	r0, 8009274 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8009264:	280a      	cmp	r0, #10
 8009266:	a803      	add	r0, sp, #12
 8009268:	bf04      	itt	eq
 800926a:	3301      	addeq	r3, #1
 800926c:	b21c      	sxtheq	r4, r3
 800926e:	f000 fcd9 	bl	8009c24 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009272:	e7f5      	b.n	8009260 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8009274:	4618      	mov	r0, r3
 8009276:	b01d      	add	sp, #116	@ 0x74
 8009278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800927c:	b003      	add	sp, #12
 800927e:	4770      	bx	lr

08009280 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8009280:	b40e      	push	{r1, r2, r3}
 8009282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009284:	b09e      	sub	sp, #120	@ 0x78
 8009286:	4604      	mov	r4, r0
 8009288:	ab23      	add	r3, sp, #140	@ 0x8c
 800928a:	a805      	add	r0, sp, #20
 800928c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009290:	9303      	str	r3, [sp, #12]
 8009292:	f000 f8d1 	bl	8009438 <_ZN8touchgfx12TextProviderC1Ev>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	4620      	mov	r0, r4
 800929a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800929c:	4798      	blx	r3
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	4606      	mov	r6, r0
 80092a2:	4620      	mov	r0, r4
 80092a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a6:	4798      	blx	r3
 80092a8:	4633      	mov	r3, r6
 80092aa:	4629      	mov	r1, r5
 80092ac:	9000      	str	r0, [sp, #0]
 80092ae:	9a03      	ldr	r2, [sp, #12]
 80092b0:	a805      	add	r0, sp, #20
 80092b2:	f000 f914 	bl	80094de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80092b6:	ad1e      	add	r5, sp, #120	@ 0x78
 80092b8:	2100      	movs	r1, #0
 80092ba:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80092be:	4622      	mov	r2, r4
 80092c0:	a805      	add	r0, sp, #20
 80092c2:	f845 1d68 	str.w	r1, [r5, #-104]!
 80092c6:	462b      	mov	r3, r5
 80092c8:	f000 fc2c 	bl	8009b24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80092cc:	b1d8      	cbz	r0, 8009306 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80092ce:	280a      	cmp	r0, #10
 80092d0:	d012      	beq.n	80092f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80092d2:	9804      	ldr	r0, [sp, #16]
 80092d4:	b180      	cbz	r0, 80092f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80092d6:	7b47      	ldrb	r7, [r0, #13]
 80092d8:	88e2      	ldrh	r2, [r4, #6]
 80092da:	00fb      	lsls	r3, r7, #3
 80092dc:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80092e0:	7a03      	ldrb	r3, [r0, #8]
 80092e2:	430b      	orrs	r3, r1
 80092e4:	0679      	lsls	r1, r7, #25
 80092e6:	bf44      	itt	mi
 80092e8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80092ec:	b21b      	sxthmi	r3, r3
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	b21b      	sxth	r3, r3
 80092f2:	429e      	cmp	r6, r3
 80092f4:	bfa8      	it	ge
 80092f6:	461e      	movge	r6, r3
 80092f8:	462b      	mov	r3, r5
 80092fa:	4622      	mov	r2, r4
 80092fc:	2100      	movs	r1, #0
 80092fe:	a805      	add	r0, sp, #20
 8009300:	f000 fc10 	bl	8009b24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8009304:	e7e2      	b.n	80092cc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8009306:	4630      	mov	r0, r6
 8009308:	b01e      	add	sp, #120	@ 0x78
 800930a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800930e:	b003      	add	sp, #12
 8009310:	4770      	bx	lr
	...

08009314 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8009314:	b530      	push	{r4, r5, lr}
 8009316:	8083      	strh	r3, [r0, #4]
 8009318:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800931c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8009320:	80c3      	strh	r3, [r0, #6]
 8009322:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009326:	6141      	str	r1, [r0, #20]
 8009328:	7203      	strb	r3, [r0, #8]
 800932a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800932e:	8302      	strh	r2, [r0, #24]
 8009330:	7243      	strb	r3, [r0, #9]
 8009332:	7a83      	ldrb	r3, [r0, #10]
 8009334:	f365 0306 	bfi	r3, r5, #0, #7
 8009338:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800933c:	f365 13c7 	bfi	r3, r5, #7, #1
 8009340:	7283      	strb	r3, [r0, #10]
 8009342:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8009346:	72c3      	strb	r3, [r0, #11]
 8009348:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800934c:	7303      	strb	r3, [r0, #12]
 800934e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8009352:	81c3      	strh	r3, [r0, #14]
 8009354:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8009358:	8203      	strh	r3, [r0, #16]
 800935a:	4b01      	ldr	r3, [pc, #4]	@ (8009360 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800935c:	6003      	str	r3, [r0, #0]
 800935e:	bd30      	pop	{r4, r5, pc}
 8009360:	0800b340 	.word	0x0800b340

08009364 <_ZNK8touchgfx9ConstFont4findEt>:
 8009364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009366:	6944      	ldr	r4, [r0, #20]
 8009368:	b3bc      	cbz	r4, 80093da <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800936a:	88a3      	ldrh	r3, [r4, #4]
 800936c:	8b02      	ldrh	r2, [r0, #24]
 800936e:	1acb      	subs	r3, r1, r3
 8009370:	f102 32ff 	add.w	r2, r2, #4294967295
 8009374:	d431      	bmi.n	80093da <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8009376:	4293      	cmp	r3, r2
 8009378:	dd0c      	ble.n	8009394 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800937a:	230e      	movs	r3, #14
 800937c:	fb03 4302 	mla	r3, r3, r2, r4
 8009380:	889b      	ldrh	r3, [r3, #4]
 8009382:	1a5b      	subs	r3, r3, r1
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	429a      	cmp	r2, r3
 8009388:	db27      	blt.n	80093da <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800938a:	2b00      	cmp	r3, #0
 800938c:	bfbc      	itt	lt
 800938e:	2302      	movlt	r3, #2
 8009390:	fb92 f3f3 	sdivlt	r3, r2, r3
 8009394:	2500      	movs	r5, #0
 8009396:	260e      	movs	r6, #14
 8009398:	4295      	cmp	r5, r2
 800939a:	dc1e      	bgt.n	80093da <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800939c:	fb06 4003 	mla	r0, r6, r3, r4
 80093a0:	8887      	ldrh	r7, [r0, #4]
 80093a2:	42b9      	cmp	r1, r7
 80093a4:	d01a      	beq.n	80093dc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80093a6:	d20d      	bcs.n	80093c4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80093a8:	1e5a      	subs	r2, r3, #1
 80093aa:	4295      	cmp	r5, r2
 80093ac:	dc15      	bgt.n	80093da <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80093ae:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80093b2:	1a5b      	subs	r3, r3, r1
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	429a      	cmp	r2, r3
 80093b8:	db0f      	blt.n	80093da <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80093ba:	429d      	cmp	r5, r3
 80093bc:	ddec      	ble.n	8009398 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80093be:	1953      	adds	r3, r2, r5
 80093c0:	105b      	asrs	r3, r3, #1
 80093c2:	e7e9      	b.n	8009398 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80093c4:	1c5d      	adds	r5, r3, #1
 80093c6:	42aa      	cmp	r2, r5
 80093c8:	db07      	blt.n	80093da <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80093ca:	8a43      	ldrh	r3, [r0, #18]
 80093cc:	1acb      	subs	r3, r1, r3
 80093ce:	442b      	add	r3, r5
 80093d0:	429d      	cmp	r5, r3
 80093d2:	dc02      	bgt.n	80093da <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80093d4:	429a      	cmp	r2, r3
 80093d6:	dadf      	bge.n	8009398 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80093d8:	e7f1      	b.n	80093be <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80093da:	2000      	movs	r0, #0
 80093dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80093de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e0:	4604      	mov	r4, r0
 80093e2:	4617      	mov	r7, r2
 80093e4:	461e      	mov	r6, r3
 80093e6:	b911      	cbnz	r1, 80093ee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80093e8:	2500      	movs	r5, #0
 80093ea:	4628      	mov	r0, r5
 80093ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ee:	290a      	cmp	r1, #10
 80093f0:	d0fa      	beq.n	80093e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80093f2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80093f6:	4291      	cmp	r1, r2
 80093f8:	d0f6      	beq.n	80093e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80093fa:	f242 020b 	movw	r2, #8203	@ 0x200b
 80093fe:	4291      	cmp	r1, r2
 8009400:	d0f2      	beq.n	80093e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8009402:	f7ff ffaf 	bl	8009364 <_ZNK8touchgfx9ConstFont4findEt>
 8009406:	4605      	mov	r5, r0
 8009408:	b950      	cbnz	r0, 8009420 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	4620      	mov	r0, r4
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	4798      	blx	r3
 8009412:	4601      	mov	r1, r0
 8009414:	4620      	mov	r0, r4
 8009416:	f7ff ffa5 	bl	8009364 <_ZNK8touchgfx9ConstFont4findEt>
 800941a:	4605      	mov	r5, r0
 800941c:	2800      	cmp	r0, #0
 800941e:	d0e3      	beq.n	80093e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	4629      	mov	r1, r5
 8009424:	4620      	mov	r0, r4
 8009426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009428:	4798      	blx	r3
 800942a:	6038      	str	r0, [r7, #0]
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	4620      	mov	r0, r4
 8009430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009432:	4798      	blx	r3
 8009434:	7030      	strb	r0, [r6, #0]
 8009436:	e7d8      	b.n	80093ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08009438 <_ZN8touchgfx12TextProviderC1Ev>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	2500      	movs	r5, #0
 800943c:	2302      	movs	r3, #2
 800943e:	4604      	mov	r4, r0
 8009440:	220e      	movs	r2, #14
 8009442:	7403      	strb	r3, [r0, #16]
 8009444:	4629      	mov	r1, r5
 8009446:	6145      	str	r5, [r0, #20]
 8009448:	7605      	strb	r5, [r0, #24]
 800944a:	83c5      	strh	r5, [r0, #30]
 800944c:	8405      	strh	r5, [r0, #32]
 800944e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8009450:	8705      	strh	r5, [r0, #56]	@ 0x38
 8009452:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8009454:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8009458:	e9c0 5500 	strd	r5, r5, [r0]
 800945c:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8009460:	304c      	adds	r0, #76	@ 0x4c
 8009462:	f000 ff36 	bl	800a2d2 <memset>
 8009466:	2301      	movs	r3, #1
 8009468:	4620      	mov	r0, r4
 800946a:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800946e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8009472:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8009476:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800947a:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800947e:	f7ff fdef 	bl	8009060 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8009482:	4620      	mov	r0, r4
 8009484:	bd38      	pop	{r3, r4, r5, pc}

08009486 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8009486:	b530      	push	{r4, r5, lr}
 8009488:	2500      	movs	r5, #0
 800948a:	2401      	movs	r4, #1
 800948c:	6843      	ldr	r3, [r0, #4]
 800948e:	b913      	cbnz	r3, 8009496 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8009490:	6803      	ldr	r3, [r0, #0]
 8009492:	b313      	cbz	r3, 80094da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8009494:	6043      	str	r3, [r0, #4]
 8009496:	7e03      	ldrb	r3, [r0, #24]
 8009498:	b143      	cbz	r3, 80094ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800949a:	6943      	ldr	r3, [r0, #20]
 800949c:	b12b      	cbz	r3, 80094aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800949e:	881a      	ldrh	r2, [r3, #0]
 80094a0:	b11a      	cbz	r2, 80094aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80094a2:	1c9a      	adds	r2, r3, #2
 80094a4:	6142      	str	r2, [r0, #20]
 80094a6:	8818      	ldrh	r0, [r3, #0]
 80094a8:	bd30      	pop	{r4, r5, pc}
 80094aa:	7605      	strb	r5, [r0, #24]
 80094ac:	6843      	ldr	r3, [r0, #4]
 80094ae:	8819      	ldrh	r1, [r3, #0]
 80094b0:	b199      	cbz	r1, 80094da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80094b2:	1c9a      	adds	r2, r3, #2
 80094b4:	2902      	cmp	r1, #2
 80094b6:	6042      	str	r2, [r0, #4]
 80094b8:	d1f5      	bne.n	80094a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80094ba:	7c03      	ldrb	r3, [r0, #16]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d8e5      	bhi.n	800948c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	3302      	adds	r3, #2
 80094c4:	7402      	strb	r2, [r0, #16]
 80094c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80094ca:	6143      	str	r3, [r0, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0dd      	beq.n	800948c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0da      	beq.n	800948c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80094d6:	7604      	strb	r4, [r0, #24]
 80094d8:	e7d8      	b.n	800948c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80094da:	2000      	movs	r0, #0
 80094dc:	e7e4      	b.n	80094a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080094de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80094de:	6001      	str	r1, [r0, #0]
 80094e0:	2100      	movs	r1, #0
 80094e2:	b430      	push	{r4, r5}
 80094e4:	6041      	str	r1, [r0, #4]
 80094e6:	6815      	ldr	r5, [r2, #0]
 80094e8:	6085      	str	r5, [r0, #8]
 80094ea:	6852      	ldr	r2, [r2, #4]
 80094ec:	6443      	str	r3, [r0, #68]	@ 0x44
 80094ee:	9b02      	ldr	r3, [sp, #8]
 80094f0:	60c2      	str	r2, [r0, #12]
 80094f2:	7401      	strb	r1, [r0, #16]
 80094f4:	6141      	str	r1, [r0, #20]
 80094f6:	7601      	strb	r1, [r0, #24]
 80094f8:	8701      	strh	r1, [r0, #56]	@ 0x38
 80094fa:	8401      	strh	r1, [r0, #32]
 80094fc:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8009500:	6483      	str	r3, [r0, #72]	@ 0x48
 8009502:	bc30      	pop	{r4, r5}
 8009504:	f7ff bdac 	b.w	8009060 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08009508 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8009508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950a:	4605      	mov	r5, r0
 800950c:	4608      	mov	r0, r1
 800950e:	b1f1      	cbz	r1, 800954e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8009510:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8009514:	460b      	mov	r3, r1
 8009516:	f101 0708 	add.w	r7, r1, #8
 800951a:	4622      	mov	r2, r4
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	3308      	adds	r3, #8
 8009520:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8009524:	4626      	mov	r6, r4
 8009526:	42bb      	cmp	r3, r7
 8009528:	c603      	stmia	r6!, {r0, r1}
 800952a:	4634      	mov	r4, r6
 800952c:	d1f6      	bne.n	800951c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	6030      	str	r0, [r6, #0]
 8009532:	4610      	mov	r0, r2
 8009534:	889b      	ldrh	r3, [r3, #4]
 8009536:	80b3      	strh	r3, [r6, #4]
 8009538:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800953c:	015b      	lsls	r3, r3, #5
 800953e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8009542:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8009546:	430b      	orrs	r3, r1
 8009548:	425b      	negs	r3, r3
 800954a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800954e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009550 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	460c      	mov	r4, r1
 8009554:	6811      	ldr	r1, [r2, #0]
 8009556:	4610      	mov	r0, r2
 8009558:	68cd      	ldr	r5, [r1, #12]
 800955a:	4619      	mov	r1, r3
 800955c:	47a8      	blx	r5
 800955e:	2800      	cmp	r0, #0
 8009560:	bf08      	it	eq
 8009562:	4620      	moveq	r0, r4
 8009564:	bd38      	pop	{r3, r4, r5, pc}
	...

08009568 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8009568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956c:	468c      	mov	ip, r1
 800956e:	4605      	mov	r5, r0
 8009570:	4614      	mov	r4, r2
 8009572:	b942      	cbnz	r2, 8009586 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8009574:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8009578:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800957c:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8009580:	4620      	mov	r0, r4
 8009582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009586:	7b50      	ldrb	r0, [r2, #13]
 8009588:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800958c:	8893      	ldrh	r3, [r2, #4]
 800958e:	0106      	lsls	r6, r0, #4
 8009590:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8009594:	79e6      	ldrb	r6, [r4, #7]
 8009596:	4316      	orrs	r6, r2
 8009598:	185a      	adds	r2, r3, r1
 800959a:	b291      	uxth	r1, r2
 800959c:	b2b7      	uxth	r7, r6
 800959e:	291d      	cmp	r1, #29
 80095a0:	d87f      	bhi.n	80096a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80095a2:	2201      	movs	r2, #1
 80095a4:	10f6      	asrs	r6, r6, #3
 80095a6:	408a      	lsls	r2, r1
 80095a8:	498b      	ldr	r1, [pc, #556]	@ (80097d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 80095aa:	420a      	tst	r2, r1
 80095ac:	d12e      	bne.n	800960c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80095ae:	f412 7f60 	tst.w	r2, #896	@ 0x380
 80095b2:	d076      	beq.n	80096a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80095b4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80095b8:	4623      	mov	r3, r4
 80095ba:	f104 0e08 	add.w	lr, r4, #8
 80095be:	4614      	mov	r4, r2
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	3308      	adds	r3, #8
 80095c4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80095c8:	4694      	mov	ip, r2
 80095ca:	4573      	cmp	r3, lr
 80095cc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80095d0:	4662      	mov	r2, ip
 80095d2:	d1f5      	bne.n	80095c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	f8cc 0000 	str.w	r0, [ip]
 80095da:	889b      	ldrh	r3, [r3, #4]
 80095dc:	f8ac 3004 	strh.w	r3, [ip, #4]
 80095e0:	b2b3      	uxth	r3, r6
 80095e2:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 80095e6:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 80095ea:	1aca      	subs	r2, r1, r3
 80095ec:	1bcf      	subs	r7, r1, r7
 80095ee:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80095f2:	b292      	uxth	r2, r2
 80095f4:	1afb      	subs	r3, r7, r3
 80095f6:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 80095fa:	10d2      	asrs	r2, r2, #3
 80095fc:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8009600:	4302      	orrs	r2, r0
 8009602:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8009606:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800960a:	e7b9      	b.n	8009580 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800960c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8009610:	4623      	mov	r3, r4
 8009612:	f104 0808 	add.w	r8, r4, #8
 8009616:	4614      	mov	r4, r2
 8009618:	6818      	ldr	r0, [r3, #0]
 800961a:	3308      	adds	r3, #8
 800961c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8009620:	4696      	mov	lr, r2
 8009622:	4543      	cmp	r3, r8
 8009624:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8009628:	4672      	mov	r2, lr
 800962a:	d1f5      	bne.n	8009618 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800962c:	6818      	ldr	r0, [r3, #0]
 800962e:	f8ce 0000 	str.w	r0, [lr]
 8009632:	889b      	ldrh	r3, [r3, #4]
 8009634:	f8ae 3004 	strh.w	r3, [lr, #4]
 8009638:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800963a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800963e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8009640:	f640 6333 	movw	r3, #3635	@ 0xe33
 8009644:	4299      	cmp	r1, r3
 8009646:	d111      	bne.n	800966c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8009648:	f8dc 3000 	ldr.w	r3, [ip]
 800964c:	4660      	mov	r0, ip
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	4798      	blx	r3
 8009652:	7b41      	ldrb	r1, [r0, #13]
 8009654:	00cb      	lsls	r3, r1, #3
 8009656:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800965a:	7a03      	ldrb	r3, [r0, #8]
 800965c:	4313      	orrs	r3, r2
 800965e:	064a      	lsls	r2, r1, #25
 8009660:	bf44      	itt	mi
 8009662:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8009666:	b21b      	sxthmi	r3, r3
 8009668:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800966c:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8009670:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8009674:	443b      	add	r3, r7
 8009676:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800967a:	4433      	add	r3, r6
 800967c:	b29b      	uxth	r3, r3
 800967e:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8009682:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8009686:	10db      	asrs	r3, r3, #3
 8009688:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800968c:	4313      	orrs	r3, r2
 800968e:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8009692:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8009696:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800969a:	1a9b      	subs	r3, r3, r2
 800969c:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80096a0:	e76e      	b.n	8009580 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80096a2:	f023 0204 	bic.w	r2, r3, #4
 80096a6:	f640 611b 	movw	r1, #3611	@ 0xe1b
 80096aa:	428a      	cmp	r2, r1
 80096ac:	d003      	beq.n	80096b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 80096ae:	f640 621d 	movw	r2, #3613	@ 0xe1d
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d138      	bne.n	8009728 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 80096b6:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 80096ba:	4622      	mov	r2, r4
 80096bc:	f104 0808 	add.w	r8, r4, #8
 80096c0:	4634      	mov	r4, r6
 80096c2:	6810      	ldr	r0, [r2, #0]
 80096c4:	3208      	adds	r2, #8
 80096c6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80096ca:	46b6      	mov	lr, r6
 80096cc:	4542      	cmp	r2, r8
 80096ce:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80096d2:	4676      	mov	r6, lr
 80096d4:	d1f5      	bne.n	80096c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 80096d6:	6810      	ldr	r0, [r2, #0]
 80096d8:	3b01      	subs	r3, #1
 80096da:	4621      	mov	r1, r4
 80096dc:	f8ce 0000 	str.w	r0, [lr]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	8892      	ldrh	r2, [r2, #4]
 80096e4:	4628      	mov	r0, r5
 80096e6:	f8ae 2004 	strh.w	r2, [lr, #4]
 80096ea:	4662      	mov	r2, ip
 80096ec:	f7ff ff30 	bl	8009550 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80096f0:	7b41      	ldrb	r1, [r0, #13]
 80096f2:	00cb      	lsls	r3, r1, #3
 80096f4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80096f8:	7a03      	ldrb	r3, [r0, #8]
 80096fa:	0648      	lsls	r0, r1, #25
 80096fc:	ea43 0302 	orr.w	r3, r3, r2
 8009700:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8009704:	bf44      	itt	mi
 8009706:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800970a:	b21b      	sxthmi	r3, r3
 800970c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8009710:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800971a:	4313      	orrs	r3, r2
 800971c:	115a      	asrs	r2, r3, #5
 800971e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8009722:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8009726:	e047      	b.n	80097b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8009728:	00c2      	lsls	r2, r0, #3
 800972a:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800972e:	7a22      	ldrb	r2, [r4, #8]
 8009730:	430a      	orrs	r2, r1
 8009732:	0641      	lsls	r1, r0, #25
 8009734:	f640 6109 	movw	r1, #3593	@ 0xe09
 8009738:	bf44      	itt	mi
 800973a:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800973e:	b212      	sxthmi	r2, r2
 8009740:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8009744:	f023 0210 	bic.w	r2, r3, #16
 8009748:	428a      	cmp	r2, r1
 800974a:	d003      	beq.n	8009754 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 800974c:	f640 6213 	movw	r2, #3603	@ 0xe13
 8009750:	4293      	cmp	r3, r2
 8009752:	d13e      	bne.n	80097d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8009754:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8009758:	f104 0808 	add.w	r8, r4, #8
 800975c:	4696      	mov	lr, r2
 800975e:	6820      	ldr	r0, [r4, #0]
 8009760:	3408      	adds	r4, #8
 8009762:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009766:	4616      	mov	r6, r2
 8009768:	4544      	cmp	r4, r8
 800976a:	c603      	stmia	r6!, {r0, r1}
 800976c:	4632      	mov	r2, r6
 800976e:	d1f6      	bne.n	800975e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8009770:	6820      	ldr	r0, [r4, #0]
 8009772:	6030      	str	r0, [r6, #0]
 8009774:	4628      	mov	r0, r5
 8009776:	88a1      	ldrh	r1, [r4, #4]
 8009778:	4674      	mov	r4, lr
 800977a:	80b1      	strh	r1, [r6, #4]
 800977c:	4671      	mov	r1, lr
 800977e:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8009782:	0076      	lsls	r6, r6, #1
 8009784:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8009788:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800978c:	4316      	orrs	r6, r2
 800978e:	f640 6213 	movw	r2, #3603	@ 0xe13
 8009792:	4293      	cmp	r3, r2
 8009794:	4662      	mov	r2, ip
 8009796:	bf16      	itet	ne
 8009798:	f103 33ff 	addne.w	r3, r3, #4294967295
 800979c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 80097a0:	b29b      	uxthne	r3, r3
 80097a2:	f7ff fed5 	bl	8009550 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80097a6:	7b43      	ldrb	r3, [r0, #13]
 80097a8:	7a82      	ldrb	r2, [r0, #10]
 80097aa:	005b      	lsls	r3, r3, #1
 80097ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b0:	4313      	orrs	r3, r2
 80097b2:	1af6      	subs	r6, r6, r3
 80097b4:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 80097b8:	7b61      	ldrb	r1, [r4, #13]
 80097ba:	00cb      	lsls	r3, r1, #3
 80097bc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80097c0:	7a23      	ldrb	r3, [r4, #8]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	064a      	lsls	r2, r1, #25
 80097c6:	bf44      	itt	mi
 80097c8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80097cc:	b21b      	sxthmi	r3, r3
 80097ce:	1bdb      	subs	r3, r3, r7
 80097d0:	e719      	b.n	8009606 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80097d2:	2300      	movs	r3, #0
 80097d4:	e7a5      	b.n	8009722 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 80097d6:	bf00      	nop
 80097d8:	3fc00079 	.word	0x3fc00079

080097dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80097dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097e0:	4604      	mov	r4, r0
 80097e2:	b942      	cbnz	r2, 80097f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80097e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097e8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80097ec:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80097f0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80097f4:	e047      	b.n	8009886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80097f6:	7b51      	ldrb	r1, [r2, #13]
 80097f8:	8893      	ldrh	r3, [r2, #4]
 80097fa:	010d      	lsls	r5, r1, #4
 80097fc:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8009800:	79d5      	ldrb	r5, [r2, #7]
 8009802:	4305      	orrs	r5, r0
 8009804:	2d04      	cmp	r5, #4
 8009806:	bfcc      	ite	gt
 8009808:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800980c:	f04f 0e01 	movle.w	lr, #1
 8009810:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8009814:	f200 80ab 	bhi.w	800996e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8009818:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800981c:	4283      	cmp	r3, r0
 800981e:	d216      	bcs.n	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8009820:	f240 605b 	movw	r0, #1627	@ 0x65b
 8009824:	4283      	cmp	r3, r0
 8009826:	d859      	bhi.n	80098dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8009828:	f240 6057 	movw	r0, #1623	@ 0x657
 800982c:	4283      	cmp	r3, r0
 800982e:	d20e      	bcs.n	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8009830:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8009834:	d24a      	bcs.n	80098cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8009836:	f240 604e 	movw	r0, #1614	@ 0x64e
 800983a:	4283      	cmp	r3, r0
 800983c:	d207      	bcs.n	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800983e:	f240 601a 	movw	r0, #1562	@ 0x61a
 8009842:	4283      	cmp	r3, r0
 8009844:	d02a      	beq.n	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8009846:	d821      	bhi.n	800988c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8009848:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800984c:	d35b      	bcc.n	8009906 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800984e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8009852:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8009856:	f040 80d0 	bne.w	80099fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800985a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800985e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8009862:	f040 80ca 	bne.w	80099fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8009866:	00cb      	lsls	r3, r1, #3
 8009868:	0649      	lsls	r1, r1, #25
 800986a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800986e:	7a13      	ldrb	r3, [r2, #8]
 8009870:	ea43 0300 	orr.w	r3, r3, r0
 8009874:	bf44      	itt	mi
 8009876:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800987a:	b21b      	sxthmi	r3, r3
 800987c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8009880:	1b5d      	subs	r5, r3, r5
 8009882:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8009886:	4610      	mov	r0, r2
 8009888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800988c:	f240 604b 	movw	r0, #1611	@ 0x64b
 8009890:	4283      	cmp	r3, r0
 8009892:	d338      	bcc.n	8009906 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8009894:	f240 604c 	movw	r0, #1612	@ 0x64c
 8009898:	4283      	cmp	r3, r0
 800989a:	d9d8      	bls.n	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800989c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 80098a0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 80098a4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80098a8:	f040 80f3 	bne.w	8009a92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80098ac:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80098b0:	f040 80ef 	bne.w	8009a92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80098b4:	00cb      	lsls	r3, r1, #3
 80098b6:	064e      	lsls	r6, r1, #25
 80098b8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80098bc:	7a13      	ldrb	r3, [r2, #8]
 80098be:	ea43 0300 	orr.w	r3, r3, r0
 80098c2:	bf44      	itt	mi
 80098c4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80098c8:	b21b      	sxthmi	r3, r3
 80098ca:	e7d9      	b.n	8009880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80098cc:	f240 6054 	movw	r0, #1620	@ 0x654
 80098d0:	4283      	cmp	r3, r0
 80098d2:	d8e3      	bhi.n	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80098d4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80098d8:	d9e0      	bls.n	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80098da:	e7b8      	b.n	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80098dc:	f240 6074 	movw	r0, #1652	@ 0x674
 80098e0:	4283      	cmp	r3, r0
 80098e2:	d0b4      	beq.n	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80098e4:	d82d      	bhi.n	8009942 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80098e6:	f240 605e 	movw	r0, #1630	@ 0x65e
 80098ea:	4283      	cmp	r3, r0
 80098ec:	d804      	bhi.n	80098f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80098ee:	f240 605d 	movw	r0, #1629	@ 0x65d
 80098f2:	4283      	cmp	r3, r0
 80098f4:	d3d2      	bcc.n	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80098f6:	e7aa      	b.n	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80098f8:	f240 605f 	movw	r0, #1631	@ 0x65f
 80098fc:	4283      	cmp	r3, r0
 80098fe:	d0cd      	beq.n	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8009900:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8009904:	d0a3      	beq.n	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8009906:	00cb      	lsls	r3, r1, #3
 8009908:	0649      	lsls	r1, r1, #25
 800990a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800990e:	7a13      	ldrb	r3, [r2, #8]
 8009910:	ea43 0300 	orr.w	r3, r3, r0
 8009914:	bf44      	itt	mi
 8009916:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800991a:	b21b      	sxthmi	r3, r3
 800991c:	1b5d      	subs	r5, r3, r5
 800991e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8009922:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8009926:	7b53      	ldrb	r3, [r2, #13]
 8009928:	015b      	lsls	r3, r3, #5
 800992a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800992e:	7993      	ldrb	r3, [r2, #6]
 8009930:	430b      	orrs	r3, r1
 8009932:	2105      	movs	r1, #5
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	fb93 f3f1 	sdiv	r3, r3, r1
 800993a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800993e:	440b      	add	r3, r1
 8009940:	e756      	b.n	80097f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8009942:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8009946:	4283      	cmp	r3, r0
 8009948:	d809      	bhi.n	800995e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800994a:	f240 60df 	movw	r0, #1759	@ 0x6df
 800994e:	4283      	cmp	r3, r0
 8009950:	f4bf af7d 	bcs.w	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8009954:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8009958:	2b05      	cmp	r3, #5
 800995a:	d8d4      	bhi.n	8009906 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800995c:	e777      	b.n	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800995e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8009962:	4283      	cmp	r3, r0
 8009964:	d09a      	beq.n	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8009966:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800996a:	4283      	cmp	r3, r0
 800996c:	e7ca      	b.n	8009904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800996e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8009972:	d22b      	bcs.n	80099cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8009974:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8009978:	4283      	cmp	r3, r0
 800997a:	d28f      	bcs.n	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800997c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009980:	4283      	cmp	r3, r0
 8009982:	d816      	bhi.n	80099b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8009984:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8009988:	4283      	cmp	r3, r0
 800998a:	f4bf af60 	bcs.w	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800998e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8009992:	4283      	cmp	r3, r0
 8009994:	d80a      	bhi.n	80099ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8009996:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800999a:	4283      	cmp	r3, r0
 800999c:	f4bf af57 	bcs.w	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80099a0:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 80099a4:	4283      	cmp	r3, r0
 80099a6:	f43f af79 	beq.w	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80099aa:	e7ac      	b.n	8009906 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80099ac:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 80099b0:	e7f8      	b.n	80099a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80099b2:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 80099b6:	4283      	cmp	r3, r0
 80099b8:	d802      	bhi.n	80099c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80099ba:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80099be:	e798      	b.n	80098f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80099c0:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 80099c4:	4283      	cmp	r3, r0
 80099c6:	f47f af42 	bne.w	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80099ca:	e767      	b.n	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80099cc:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 80099d0:	4283      	cmp	r3, r0
 80099d2:	f43f af63 	beq.w	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80099d6:	d802      	bhi.n	80099de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80099d8:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80099dc:	e7f2      	b.n	80099c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80099de:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 80099e2:	4283      	cmp	r3, r0
 80099e4:	d805      	bhi.n	80099f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80099e6:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80099ea:	4283      	cmp	r3, r0
 80099ec:	f4ff af2f 	bcc.w	800984e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80099f0:	e754      	b.n	800989c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80099f2:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80099f6:	4283      	cmp	r3, r0
 80099f8:	e7af      	b.n	800995a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80099fa:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80099fe:	4617      	mov	r7, r2
 8009a00:	f102 0808 	add.w	r8, r2, #8
 8009a04:	4666      	mov	r6, ip
 8009a06:	6838      	ldr	r0, [r7, #0]
 8009a08:	3708      	adds	r7, #8
 8009a0a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8009a0e:	46e6      	mov	lr, ip
 8009a10:	4547      	cmp	r7, r8
 8009a12:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8009a16:	46f4      	mov	ip, lr
 8009a18:	d1f5      	bne.n	8009a06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8009a1a:	6838      	ldr	r0, [r7, #0]
 8009a1c:	f8ce 0000 	str.w	r0, [lr]
 8009a20:	88b9      	ldrh	r1, [r7, #4]
 8009a22:	f8ae 1004 	strh.w	r1, [lr, #4]
 8009a26:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8009a2a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8009a2e:	d009      	beq.n	8009a44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8009a30:	7b51      	ldrb	r1, [r2, #13]
 8009a32:	7992      	ldrb	r2, [r2, #6]
 8009a34:	0149      	lsls	r1, r1, #5
 8009a36:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8009a3a:	4311      	orrs	r1, r2
 8009a3c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8009a40:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8009a44:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8009a48:	b2ad      	uxth	r5, r5
 8009a4a:	d00d      	beq.n	8009a68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8009a4c:	442b      	add	r3, r5
 8009a4e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009a58:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8009a5c:	10db      	asrs	r3, r3, #3
 8009a5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a62:	4313      	orrs	r3, r2
 8009a64:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8009a68:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8009a6c:	00cb      	lsls	r3, r1, #3
 8009a6e:	064f      	lsls	r7, r1, #25
 8009a70:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8009a74:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8009a78:	ea43 0302 	orr.w	r3, r3, r2
 8009a7c:	bf44      	itt	mi
 8009a7e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8009a82:	b21b      	sxthmi	r3, r3
 8009a84:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8009a88:	1b5b      	subs	r3, r3, r5
 8009a8a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8009a8e:	4632      	mov	r2, r6
 8009a90:	e6f9      	b.n	8009886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8009a92:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8009a96:	4617      	mov	r7, r2
 8009a98:	f102 0908 	add.w	r9, r2, #8
 8009a9c:	4666      	mov	r6, ip
 8009a9e:	6838      	ldr	r0, [r7, #0]
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8009aa6:	46e0      	mov	r8, ip
 8009aa8:	454f      	cmp	r7, r9
 8009aaa:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8009aae:	46c4      	mov	ip, r8
 8009ab0:	d1f5      	bne.n	8009a9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8009ab2:	6838      	ldr	r0, [r7, #0]
 8009ab4:	f8c8 0000 	str.w	r0, [r8]
 8009ab8:	88b9      	ldrh	r1, [r7, #4]
 8009aba:	f8a8 1004 	strh.w	r1, [r8, #4]
 8009abe:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8009ac2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8009ac6:	d009      	beq.n	8009adc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8009ac8:	7b51      	ldrb	r1, [r2, #13]
 8009aca:	7992      	ldrb	r2, [r2, #6]
 8009acc:	0149      	lsls	r1, r1, #5
 8009ace:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8009ad2:	4311      	orrs	r1, r2
 8009ad4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8009ad8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8009adc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8009ae0:	d00e      	beq.n	8009b00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8009ae2:	eba3 030e 	sub.w	r3, r3, lr
 8009ae6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009af0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8009af4:	10db      	asrs	r3, r3, #3
 8009af6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009afa:	4313      	orrs	r3, r2
 8009afc:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8009b00:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8009b04:	00cb      	lsls	r3, r1, #3
 8009b06:	0648      	lsls	r0, r1, #25
 8009b08:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8009b0c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8009b10:	ea43 0302 	orr.w	r3, r3, r2
 8009b14:	bf44      	itt	mi
 8009b16:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8009b1a:	b21b      	sxthmi	r3, r3
 8009b1c:	1b5d      	subs	r5, r3, r5
 8009b1e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8009b22:	e7b4      	b.n	8009a8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08009b24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8009b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b28:	461e      	mov	r6, r3
 8009b2a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	4617      	mov	r7, r2
 8009b30:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009b34:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8009b38:	f7ff f9ec 	bl	8008f14 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	b918      	cbnz	r0, 8009b48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8009b40:	6030      	str	r0, [r6, #0]
 8009b42:	4628      	mov	r0, r5
 8009b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	4798      	blx	r3
 8009b52:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8009b56:	4602      	mov	r2, r0
 8009b58:	6030      	str	r0, [r6, #0]
 8009b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b5e:	d213      	bcs.n	8009b88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8009b60:	4643      	mov	r3, r8
 8009b62:	4639      	mov	r1, r7
 8009b64:	4620      	mov	r0, r4
 8009b66:	f7ff fe39 	bl	80097dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8009b6a:	6030      	str	r0, [r6, #0]
 8009b6c:	6833      	ldr	r3, [r6, #0]
 8009b6e:	b143      	cbz	r3, 8009b82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8009b70:	7b5a      	ldrb	r2, [r3, #13]
 8009b72:	7a9b      	ldrb	r3, [r3, #10]
 8009b74:	0052      	lsls	r2, r2, #1
 8009b76:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	bf0c      	ite	eq
 8009b7e:	2301      	moveq	r3, #1
 8009b80:	2300      	movne	r3, #0
 8009b82:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8009b86:	e7dc      	b.n	8009b42 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8009b88:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b90:	d804      	bhi.n	8009b9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8009b92:	4639      	mov	r1, r7
 8009b94:	4620      	mov	r0, r4
 8009b96:	f7ff fce7 	bl	8009568 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8009b9a:	e7e6      	b.n	8009b6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8009b9c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0e3      	beq.n	8009b6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8009ba4:	f640 1302 	movw	r3, #2306	@ 0x902
 8009ba8:	429d      	cmp	r5, r3
 8009baa:	d1df      	bne.n	8009b6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8009bac:	4601      	mov	r1, r0
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f7ff fcaa 	bl	8009508 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8009bb4:	e7d9      	b.n	8009b6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08009bb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	4604      	mov	r4, r0
 8009bba:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8009bbe:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8009bc0:	b1e1      	cbz	r1, 8009bfc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8009bc2:	2b0a      	cmp	r3, #10
 8009bc4:	d02d      	beq.n	8009c22 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8009bc6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8009bc8:	3901      	subs	r1, #1
 8009bca:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8009bce:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8009bd0:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8009bd4:	1c51      	adds	r1, r2, #1
 8009bd6:	b289      	uxth	r1, r1
 8009bd8:	2901      	cmp	r1, #1
 8009bda:	bf8a      	itet	hi
 8009bdc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009be0:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8009be2:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	8722      	strh	r2, [r4, #56]	@ 0x38
 8009be8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8009bea:	4413      	add	r3, r2
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	bf88      	it	hi
 8009bf2:	3b0a      	subhi	r3, #10
 8009bf4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8009bf8:	8458      	strh	r0, [r3, #34]	@ 0x22
 8009bfa:	e7de      	b.n	8009bba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8009bfc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8009bfe:	2b0a      	cmp	r3, #10
 8009c00:	d00f      	beq.n	8009c22 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8009c02:	4620      	mov	r0, r4
 8009c04:	f7ff fc3f 	bl	8009486 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8009c08:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	8722      	strh	r2, [r4, #56]	@ 0x38
 8009c0e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8009c10:	4413      	add	r3, r2
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	2b09      	cmp	r3, #9
 8009c16:	bf88      	it	hi
 8009c18:	3b0a      	subhi	r3, #10
 8009c1a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8009c1e:	8458      	strh	r0, [r3, #34]	@ 0x22
 8009c20:	e7ec      	b.n	8009bfc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8009c22:	bd10      	pop	{r4, pc}

08009c24 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8009c28:	4604      	mov	r4, r0
 8009c2a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8009c2e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8009c30:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8009c32:	3a01      	subs	r2, #1
 8009c34:	8702      	strh	r2, [r0, #56]	@ 0x38
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	b292      	uxth	r2, r2
 8009c3a:	2a09      	cmp	r2, #9
 8009c3c:	bf8a      	itet	hi
 8009c3e:	3b09      	subhi	r3, #9
 8009c40:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8009c42:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8009c44:	f7ff ffb7 	bl	8009bb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8009c48:	8c23      	ldrh	r3, [r4, #32]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	bf9c      	itt	ls
 8009c4e:	3301      	addls	r3, #1
 8009c50:	8423      	strhls	r3, [r4, #32]
 8009c52:	8be3      	ldrh	r3, [r4, #30]
 8009c54:	b90b      	cbnz	r3, 8009c5a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8009c56:	2302      	movs	r3, #2
 8009c58:	83e3      	strh	r3, [r4, #30]
 8009c5a:	8be3      	ldrh	r3, [r4, #30]
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	83e3      	strh	r3, [r4, #30]
 8009c64:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8009c68:	8365      	strh	r5, [r4, #26]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}

08009c6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8009c6c:	428a      	cmp	r2, r1
 8009c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c72:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8009c74:	d932      	bls.n	8009cdc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8009c76:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8009c78:	1a54      	subs	r4, r2, r1
 8009c7a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8009c7e:	19ee      	adds	r6, r5, r7
 8009c80:	fa1f fe84 	uxth.w	lr, r4
 8009c84:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8009c88:	3e01      	subs	r6, #1
 8009c8a:	b2b4      	uxth	r4, r6
 8009c8c:	eba4 090e 	sub.w	r9, r4, lr
 8009c90:	fa1f f989 	uxth.w	r9, r9
 8009c94:	2c09      	cmp	r4, #9
 8009c96:	4626      	mov	r6, r4
 8009c98:	bf88      	it	hi
 8009c9a:	f1a4 060a 	subhi.w	r6, r4, #10
 8009c9e:	f1bc 0f00 	cmp.w	ip, #0
 8009ca2:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ca6:	bf08      	it	eq
 8009ca8:	f04f 0c02 	moveq.w	ip, #2
 8009cac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8009cb0:	b2a4      	uxth	r4, r4
 8009cb2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009cb6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8009cba:	454c      	cmp	r4, r9
 8009cbc:	fa1f fc8c 	uxth.w	ip, ip
 8009cc0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8009cc4:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8009cc8:	d1e4      	bne.n	8009c94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8009cca:	eba5 050e 	sub.w	r5, r5, lr
 8009cce:	eb0e 0408 	add.w	r4, lr, r8
 8009cd2:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8009cd6:	8705      	strh	r5, [r0, #56]	@ 0x38
 8009cd8:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8009cdc:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8009cde:	250a      	movs	r5, #10
 8009ce0:	1a64      	subs	r4, r4, r1
 8009ce2:	4439      	add	r1, r7
 8009ce4:	b289      	uxth	r1, r1
 8009ce6:	8704      	strh	r4, [r0, #56]	@ 0x38
 8009ce8:	2909      	cmp	r1, #9
 8009cea:	bf88      	it	hi
 8009cec:	390a      	subhi	r1, #10
 8009cee:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8009cf0:	b18a      	cbz	r2, 8009d16 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8009cf2:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8009cf4:	3a01      	subs	r2, #1
 8009cf6:	3101      	adds	r1, #1
 8009cf8:	b292      	uxth	r2, r2
 8009cfa:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8009cfe:	8701      	strh	r1, [r0, #56]	@ 0x38
 8009d00:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8009d02:	b901      	cbnz	r1, 8009d06 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8009d04:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8009d06:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8009d08:	3901      	subs	r1, #1
 8009d0a:	b289      	uxth	r1, r1
 8009d0c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8009d0e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8009d12:	844c      	strh	r4, [r1, #34]	@ 0x22
 8009d14:	e7ec      	b.n	8009cf0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8009d16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1a:	f7ff bf4c 	b.w	8009bb6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08009d1e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8009d1e:	b570      	push	{r4, r5, r6, lr}
 8009d20:	2500      	movs	r5, #0
 8009d22:	4295      	cmp	r5, r2
 8009d24:	d011      	beq.n	8009d4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8009d26:	8bc4      	ldrh	r4, [r0, #30]
 8009d28:	f831 6b02 	ldrh.w	r6, [r1], #2
 8009d2c:	4414      	add	r4, r2
 8009d2e:	3c01      	subs	r4, #1
 8009d30:	1b64      	subs	r4, r4, r5
 8009d32:	b2a4      	uxth	r4, r4
 8009d34:	2c01      	cmp	r4, #1
 8009d36:	bf88      	it	hi
 8009d38:	3c02      	subhi	r4, #2
 8009d3a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8009d3e:	8b64      	ldrh	r4, [r4, #26]
 8009d40:	42b4      	cmp	r4, r6
 8009d42:	d117      	bne.n	8009d74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8009d44:	3501      	adds	r5, #1
 8009d46:	b2ad      	uxth	r5, r5
 8009d48:	e7eb      	b.n	8009d22 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8009d4a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8009d4e:	2400      	movs	r4, #0
 8009d50:	4413      	add	r3, r2
 8009d52:	b2a2      	uxth	r2, r4
 8009d54:	429a      	cmp	r2, r3
 8009d56:	da0f      	bge.n	8009d78 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8009d58:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8009d5a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8009d5e:	3401      	adds	r4, #1
 8009d60:	4432      	add	r2, r6
 8009d62:	b292      	uxth	r2, r2
 8009d64:	2a09      	cmp	r2, #9
 8009d66:	bf88      	it	hi
 8009d68:	3a0a      	subhi	r2, #10
 8009d6a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009d6e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8009d70:	42aa      	cmp	r2, r5
 8009d72:	d0ee      	beq.n	8009d52 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8009d74:	2000      	movs	r0, #0
 8009d76:	bd70      	pop	{r4, r5, r6, pc}
 8009d78:	2001      	movs	r0, #1
 8009d7a:	e7fc      	b.n	8009d76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08009d7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8009d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	4605      	mov	r5, r0
 8009d82:	4616      	mov	r6, r2
 8009d84:	1c8c      	adds	r4, r1, #2
 8009d86:	8809      	ldrh	r1, [r1, #0]
 8009d88:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8009d8c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8009d90:	42b3      	cmp	r3, r6
 8009d92:	d124      	bne.n	8009dde <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8009d94:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8009d98:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8009d9c:	f001 070f 	and.w	r7, r1, #15
 8009da0:	4652      	mov	r2, sl
 8009da2:	f8cd 8000 	str.w	r8, [sp]
 8009da6:	464b      	mov	r3, r9
 8009da8:	4621      	mov	r1, r4
 8009daa:	4628      	mov	r0, r5
 8009dac:	f7ff ffb7 	bl	8009d1e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8009db0:	4683      	mov	fp, r0
 8009db2:	b168      	cbz	r0, 8009dd0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8009db4:	eb0a 0109 	add.w	r1, sl, r9
 8009db8:	463a      	mov	r2, r7
 8009dba:	4628      	mov	r0, r5
 8009dbc:	4441      	add	r1, r8
 8009dbe:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	f7ff ff52 	bl	8009c6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8009dc8:	4658      	mov	r0, fp
 8009dca:	b003      	add	sp, #12
 8009dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd0:	eb07 010a 	add.w	r1, r7, sl
 8009dd4:	4449      	add	r1, r9
 8009dd6:	4441      	add	r1, r8
 8009dd8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8009ddc:	e7d2      	b.n	8009d84 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8009dde:	f04f 0b00 	mov.w	fp, #0
 8009de2:	e7f1      	b.n	8009dc8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08009de4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	8810      	ldrh	r0, [r2, #0]
 8009de8:	4298      	cmp	r0, r3
 8009dea:	d817      	bhi.n	8009e1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8009dec:	1e48      	subs	r0, r1, #1
 8009dee:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8009df2:	4298      	cmp	r0, r3
 8009df4:	d312      	bcc.n	8009e1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8009df6:	2400      	movs	r4, #0
 8009df8:	428c      	cmp	r4, r1
 8009dfa:	d20f      	bcs.n	8009e1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8009dfc:	1860      	adds	r0, r4, r1
 8009dfe:	1040      	asrs	r0, r0, #1
 8009e00:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8009e04:	0085      	lsls	r5, r0, #2
 8009e06:	42b3      	cmp	r3, r6
 8009e08:	d902      	bls.n	8009e10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	b284      	uxth	r4, r0
 8009e0e:	e7f3      	b.n	8009df8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8009e10:	d201      	bcs.n	8009e16 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8009e12:	b281      	uxth	r1, r0
 8009e14:	e7f0      	b.n	8009df8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8009e16:	442a      	add	r2, r5
 8009e18:	8850      	ldrh	r0, [r2, #2]
 8009e1a:	bd70      	pop	{r4, r5, r6, pc}
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e7fc      	b.n	8009e1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08009e20 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8009e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e24:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8009e26:	4604      	mov	r4, r0
 8009e28:	260b      	movs	r6, #11
 8009e2a:	886f      	ldrh	r7, [r5, #2]
 8009e2c:	087f      	lsrs	r7, r7, #1
 8009e2e:	3e01      	subs	r6, #1
 8009e30:	d013      	beq.n	8009e5a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8009e32:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009e34:	462a      	mov	r2, r5
 8009e36:	4639      	mov	r1, r7
 8009e38:	4620      	mov	r0, r4
 8009e3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8009e3e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8009e42:	4643      	mov	r3, r8
 8009e44:	f7ff ffce 	bl	8009de4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8009e48:	b138      	cbz	r0, 8009e5a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8009e4a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8009e4e:	4642      	mov	r2, r8
 8009e50:	4620      	mov	r0, r4
 8009e52:	f7ff ff93 	bl	8009d7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d1e9      	bne.n	8009e2e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8009e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009e5e <_ZdlPvj>:
 8009e5e:	f000 b812 	b.w	8009e86 <_ZdlPv>

08009e62 <__cxa_guard_acquire>:
 8009e62:	6802      	ldr	r2, [r0, #0]
 8009e64:	07d2      	lsls	r2, r2, #31
 8009e66:	4603      	mov	r3, r0
 8009e68:	d405      	bmi.n	8009e76 <__cxa_guard_acquire+0x14>
 8009e6a:	7842      	ldrb	r2, [r0, #1]
 8009e6c:	b102      	cbz	r2, 8009e70 <__cxa_guard_acquire+0xe>
 8009e6e:	deff      	udf	#255	@ 0xff
 8009e70:	2001      	movs	r0, #1
 8009e72:	7058      	strb	r0, [r3, #1]
 8009e74:	4770      	bx	lr
 8009e76:	2000      	movs	r0, #0
 8009e78:	4770      	bx	lr

08009e7a <__cxa_guard_release>:
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	6003      	str	r3, [r0, #0]
 8009e7e:	4770      	bx	lr

08009e80 <__cxa_pure_virtual>:
 8009e80:	b508      	push	{r3, lr}
 8009e82:	f000 f80f 	bl	8009ea4 <_ZSt9terminatev>

08009e86 <_ZdlPv>:
 8009e86:	f000 b845 	b.w	8009f14 <free>

08009e8a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009e8a:	b508      	push	{r3, lr}
 8009e8c:	4780      	blx	r0
 8009e8e:	f000 f80e 	bl	8009eae <abort>
	...

08009e94 <_ZSt13get_terminatev>:
 8009e94:	4b02      	ldr	r3, [pc, #8]	@ (8009ea0 <_ZSt13get_terminatev+0xc>)
 8009e96:	6818      	ldr	r0, [r3, #0]
 8009e98:	f3bf 8f5b 	dmb	ish
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	24000010 	.word	0x24000010

08009ea4 <_ZSt9terminatev>:
 8009ea4:	b508      	push	{r3, lr}
 8009ea6:	f7ff fff5 	bl	8009e94 <_ZSt13get_terminatev>
 8009eaa:	f7ff ffee 	bl	8009e8a <_ZN10__cxxabiv111__terminateEPFvvE>

08009eae <abort>:
 8009eae:	b508      	push	{r3, lr}
 8009eb0:	2006      	movs	r0, #6
 8009eb2:	f000 fa3f 	bl	800a334 <raise>
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	f7f7 ffdc 	bl	8001e74 <_exit>

08009ebc <__assert_func>:
 8009ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ebe:	4614      	mov	r4, r2
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	4b09      	ldr	r3, [pc, #36]	@ (8009ee8 <__assert_func+0x2c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	68d8      	ldr	r0, [r3, #12]
 8009eca:	b14c      	cbz	r4, 8009ee0 <__assert_func+0x24>
 8009ecc:	4b07      	ldr	r3, [pc, #28]	@ (8009eec <__assert_func+0x30>)
 8009ece:	9100      	str	r1, [sp, #0]
 8009ed0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ed4:	4906      	ldr	r1, [pc, #24]	@ (8009ef0 <__assert_func+0x34>)
 8009ed6:	462b      	mov	r3, r5
 8009ed8:	f000 f976 	bl	800a1c8 <fiprintf>
 8009edc:	f7ff ffe7 	bl	8009eae <abort>
 8009ee0:	4b04      	ldr	r3, [pc, #16]	@ (8009ef4 <__assert_func+0x38>)
 8009ee2:	461c      	mov	r4, r3
 8009ee4:	e7f3      	b.n	8009ece <__assert_func+0x12>
 8009ee6:	bf00      	nop
 8009ee8:	24000020 	.word	0x24000020
 8009eec:	0800b3a0 	.word	0x0800b3a0
 8009ef0:	0800b3ad 	.word	0x0800b3ad
 8009ef4:	0800b3db 	.word	0x0800b3db

08009ef8 <atexit>:
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4601      	mov	r1, r0
 8009efc:	461a      	mov	r2, r3
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 bac6 	b.w	800a490 <__register_exitproc>

08009f04 <malloc>:
 8009f04:	4b02      	ldr	r3, [pc, #8]	@ (8009f10 <malloc+0xc>)
 8009f06:	4601      	mov	r1, r0
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	f000 b82d 	b.w	8009f68 <_malloc_r>
 8009f0e:	bf00      	nop
 8009f10:	24000020 	.word	0x24000020

08009f14 <free>:
 8009f14:	4b02      	ldr	r3, [pc, #8]	@ (8009f20 <free+0xc>)
 8009f16:	4601      	mov	r1, r0
 8009f18:	6818      	ldr	r0, [r3, #0]
 8009f1a:	f000 bb15 	b.w	800a548 <_free_r>
 8009f1e:	bf00      	nop
 8009f20:	24000020 	.word	0x24000020

08009f24 <sbrk_aligned>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	4e0f      	ldr	r6, [pc, #60]	@ (8009f64 <sbrk_aligned+0x40>)
 8009f28:	460c      	mov	r4, r1
 8009f2a:	6831      	ldr	r1, [r6, #0]
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	b911      	cbnz	r1, 8009f36 <sbrk_aligned+0x12>
 8009f30:	f000 fa50 	bl	800a3d4 <_sbrk_r>
 8009f34:	6030      	str	r0, [r6, #0]
 8009f36:	4621      	mov	r1, r4
 8009f38:	4628      	mov	r0, r5
 8009f3a:	f000 fa4b 	bl	800a3d4 <_sbrk_r>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	d103      	bne.n	8009f4a <sbrk_aligned+0x26>
 8009f42:	f04f 34ff 	mov.w	r4, #4294967295
 8009f46:	4620      	mov	r0, r4
 8009f48:	bd70      	pop	{r4, r5, r6, pc}
 8009f4a:	1cc4      	adds	r4, r0, #3
 8009f4c:	f024 0403 	bic.w	r4, r4, #3
 8009f50:	42a0      	cmp	r0, r4
 8009f52:	d0f8      	beq.n	8009f46 <sbrk_aligned+0x22>
 8009f54:	1a21      	subs	r1, r4, r0
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 fa3c 	bl	800a3d4 <_sbrk_r>
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d1f2      	bne.n	8009f46 <sbrk_aligned+0x22>
 8009f60:	e7ef      	b.n	8009f42 <sbrk_aligned+0x1e>
 8009f62:	bf00      	nop
 8009f64:	2400038c 	.word	0x2400038c

08009f68 <_malloc_r>:
 8009f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f6c:	1ccd      	adds	r5, r1, #3
 8009f6e:	f025 0503 	bic.w	r5, r5, #3
 8009f72:	3508      	adds	r5, #8
 8009f74:	2d0c      	cmp	r5, #12
 8009f76:	bf38      	it	cc
 8009f78:	250c      	movcc	r5, #12
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	db01      	blt.n	8009f84 <_malloc_r+0x1c>
 8009f80:	42a9      	cmp	r1, r5
 8009f82:	d904      	bls.n	8009f8e <_malloc_r+0x26>
 8009f84:	230c      	movs	r3, #12
 8009f86:	6033      	str	r3, [r6, #0]
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a064 <_malloc_r+0xfc>
 8009f92:	f000 f869 	bl	800a068 <__malloc_lock>
 8009f96:	f8d8 3000 	ldr.w	r3, [r8]
 8009f9a:	461c      	mov	r4, r3
 8009f9c:	bb44      	cbnz	r4, 8009ff0 <_malloc_r+0x88>
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7ff ffbf 	bl	8009f24 <sbrk_aligned>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	4604      	mov	r4, r0
 8009faa:	d158      	bne.n	800a05e <_malloc_r+0xf6>
 8009fac:	f8d8 4000 	ldr.w	r4, [r8]
 8009fb0:	4627      	mov	r7, r4
 8009fb2:	2f00      	cmp	r7, #0
 8009fb4:	d143      	bne.n	800a03e <_malloc_r+0xd6>
 8009fb6:	2c00      	cmp	r4, #0
 8009fb8:	d04b      	beq.n	800a052 <_malloc_r+0xea>
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	eb04 0903 	add.w	r9, r4, r3
 8009fc4:	f000 fa06 	bl	800a3d4 <_sbrk_r>
 8009fc8:	4581      	cmp	r9, r0
 8009fca:	d142      	bne.n	800a052 <_malloc_r+0xea>
 8009fcc:	6821      	ldr	r1, [r4, #0]
 8009fce:	1a6d      	subs	r5, r5, r1
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7ff ffa6 	bl	8009f24 <sbrk_aligned>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d03a      	beq.n	800a052 <_malloc_r+0xea>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	442b      	add	r3, r5
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	bb62      	cbnz	r2, 800a044 <_malloc_r+0xdc>
 8009fea:	f8c8 7000 	str.w	r7, [r8]
 8009fee:	e00f      	b.n	800a010 <_malloc_r+0xa8>
 8009ff0:	6822      	ldr	r2, [r4, #0]
 8009ff2:	1b52      	subs	r2, r2, r5
 8009ff4:	d420      	bmi.n	800a038 <_malloc_r+0xd0>
 8009ff6:	2a0b      	cmp	r2, #11
 8009ff8:	d917      	bls.n	800a02a <_malloc_r+0xc2>
 8009ffa:	1961      	adds	r1, r4, r5
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	6025      	str	r5, [r4, #0]
 800a000:	bf18      	it	ne
 800a002:	6059      	strne	r1, [r3, #4]
 800a004:	6863      	ldr	r3, [r4, #4]
 800a006:	bf08      	it	eq
 800a008:	f8c8 1000 	streq.w	r1, [r8]
 800a00c:	5162      	str	r2, [r4, r5]
 800a00e:	604b      	str	r3, [r1, #4]
 800a010:	4630      	mov	r0, r6
 800a012:	f000 f82f 	bl	800a074 <__malloc_unlock>
 800a016:	f104 000b 	add.w	r0, r4, #11
 800a01a:	1d23      	adds	r3, r4, #4
 800a01c:	f020 0007 	bic.w	r0, r0, #7
 800a020:	1ac2      	subs	r2, r0, r3
 800a022:	bf1c      	itt	ne
 800a024:	1a1b      	subne	r3, r3, r0
 800a026:	50a3      	strne	r3, [r4, r2]
 800a028:	e7af      	b.n	8009f8a <_malloc_r+0x22>
 800a02a:	6862      	ldr	r2, [r4, #4]
 800a02c:	42a3      	cmp	r3, r4
 800a02e:	bf0c      	ite	eq
 800a030:	f8c8 2000 	streq.w	r2, [r8]
 800a034:	605a      	strne	r2, [r3, #4]
 800a036:	e7eb      	b.n	800a010 <_malloc_r+0xa8>
 800a038:	4623      	mov	r3, r4
 800a03a:	6864      	ldr	r4, [r4, #4]
 800a03c:	e7ae      	b.n	8009f9c <_malloc_r+0x34>
 800a03e:	463c      	mov	r4, r7
 800a040:	687f      	ldr	r7, [r7, #4]
 800a042:	e7b6      	b.n	8009fb2 <_malloc_r+0x4a>
 800a044:	461a      	mov	r2, r3
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	42a3      	cmp	r3, r4
 800a04a:	d1fb      	bne.n	800a044 <_malloc_r+0xdc>
 800a04c:	2300      	movs	r3, #0
 800a04e:	6053      	str	r3, [r2, #4]
 800a050:	e7de      	b.n	800a010 <_malloc_r+0xa8>
 800a052:	230c      	movs	r3, #12
 800a054:	6033      	str	r3, [r6, #0]
 800a056:	4630      	mov	r0, r6
 800a058:	f000 f80c 	bl	800a074 <__malloc_unlock>
 800a05c:	e794      	b.n	8009f88 <_malloc_r+0x20>
 800a05e:	6005      	str	r5, [r0, #0]
 800a060:	e7d6      	b.n	800a010 <_malloc_r+0xa8>
 800a062:	bf00      	nop
 800a064:	24000390 	.word	0x24000390

0800a068 <__malloc_lock>:
 800a068:	4801      	ldr	r0, [pc, #4]	@ (800a070 <__malloc_lock+0x8>)
 800a06a:	f000 ba00 	b.w	800a46e <__retarget_lock_acquire_recursive>
 800a06e:	bf00      	nop
 800a070:	240004d4 	.word	0x240004d4

0800a074 <__malloc_unlock>:
 800a074:	4801      	ldr	r0, [pc, #4]	@ (800a07c <__malloc_unlock+0x8>)
 800a076:	f000 b9fb 	b.w	800a470 <__retarget_lock_release_recursive>
 800a07a:	bf00      	nop
 800a07c:	240004d4 	.word	0x240004d4

0800a080 <std>:
 800a080:	2300      	movs	r3, #0
 800a082:	b510      	push	{r4, lr}
 800a084:	4604      	mov	r4, r0
 800a086:	e9c0 3300 	strd	r3, r3, [r0]
 800a08a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a08e:	6083      	str	r3, [r0, #8]
 800a090:	8181      	strh	r1, [r0, #12]
 800a092:	6643      	str	r3, [r0, #100]	@ 0x64
 800a094:	81c2      	strh	r2, [r0, #14]
 800a096:	6183      	str	r3, [r0, #24]
 800a098:	4619      	mov	r1, r3
 800a09a:	2208      	movs	r2, #8
 800a09c:	305c      	adds	r0, #92	@ 0x5c
 800a09e:	f000 f918 	bl	800a2d2 <memset>
 800a0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d8 <std+0x58>)
 800a0a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a0dc <std+0x5c>)
 800a0a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e0 <std+0x60>)
 800a0ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e4 <std+0x64>)
 800a0b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e8 <std+0x68>)
 800a0b4:	6224      	str	r4, [r4, #32]
 800a0b6:	429c      	cmp	r4, r3
 800a0b8:	d006      	beq.n	800a0c8 <std+0x48>
 800a0ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a0be:	4294      	cmp	r4, r2
 800a0c0:	d002      	beq.n	800a0c8 <std+0x48>
 800a0c2:	33d0      	adds	r3, #208	@ 0xd0
 800a0c4:	429c      	cmp	r4, r3
 800a0c6:	d105      	bne.n	800a0d4 <std+0x54>
 800a0c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d0:	f000 b9cc 	b.w	800a46c <__retarget_lock_init_recursive>
 800a0d4:	bd10      	pop	{r4, pc}
 800a0d6:	bf00      	nop
 800a0d8:	0800a24d 	.word	0x0800a24d
 800a0dc:	0800a26f 	.word	0x0800a26f
 800a0e0:	0800a2a7 	.word	0x0800a2a7
 800a0e4:	0800a2cb 	.word	0x0800a2cb
 800a0e8:	24000394 	.word	0x24000394

0800a0ec <stdio_exit_handler>:
 800a0ec:	4a02      	ldr	r2, [pc, #8]	@ (800a0f8 <stdio_exit_handler+0xc>)
 800a0ee:	4903      	ldr	r1, [pc, #12]	@ (800a0fc <stdio_exit_handler+0x10>)
 800a0f0:	4803      	ldr	r0, [pc, #12]	@ (800a100 <stdio_exit_handler+0x14>)
 800a0f2:	f000 b87b 	b.w	800a1ec <_fwalk_sglue>
 800a0f6:	bf00      	nop
 800a0f8:	24000014 	.word	0x24000014
 800a0fc:	0800ac81 	.word	0x0800ac81
 800a100:	24000024 	.word	0x24000024

0800a104 <cleanup_stdio>:
 800a104:	6841      	ldr	r1, [r0, #4]
 800a106:	4b0c      	ldr	r3, [pc, #48]	@ (800a138 <cleanup_stdio+0x34>)
 800a108:	4299      	cmp	r1, r3
 800a10a:	b510      	push	{r4, lr}
 800a10c:	4604      	mov	r4, r0
 800a10e:	d001      	beq.n	800a114 <cleanup_stdio+0x10>
 800a110:	f000 fdb6 	bl	800ac80 <_fflush_r>
 800a114:	68a1      	ldr	r1, [r4, #8]
 800a116:	4b09      	ldr	r3, [pc, #36]	@ (800a13c <cleanup_stdio+0x38>)
 800a118:	4299      	cmp	r1, r3
 800a11a:	d002      	beq.n	800a122 <cleanup_stdio+0x1e>
 800a11c:	4620      	mov	r0, r4
 800a11e:	f000 fdaf 	bl	800ac80 <_fflush_r>
 800a122:	68e1      	ldr	r1, [r4, #12]
 800a124:	4b06      	ldr	r3, [pc, #24]	@ (800a140 <cleanup_stdio+0x3c>)
 800a126:	4299      	cmp	r1, r3
 800a128:	d004      	beq.n	800a134 <cleanup_stdio+0x30>
 800a12a:	4620      	mov	r0, r4
 800a12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a130:	f000 bda6 	b.w	800ac80 <_fflush_r>
 800a134:	bd10      	pop	{r4, pc}
 800a136:	bf00      	nop
 800a138:	24000394 	.word	0x24000394
 800a13c:	240003fc 	.word	0x240003fc
 800a140:	24000464 	.word	0x24000464

0800a144 <global_stdio_init.part.0>:
 800a144:	b510      	push	{r4, lr}
 800a146:	4b0b      	ldr	r3, [pc, #44]	@ (800a174 <global_stdio_init.part.0+0x30>)
 800a148:	4c0b      	ldr	r4, [pc, #44]	@ (800a178 <global_stdio_init.part.0+0x34>)
 800a14a:	4a0c      	ldr	r2, [pc, #48]	@ (800a17c <global_stdio_init.part.0+0x38>)
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	4620      	mov	r0, r4
 800a150:	2200      	movs	r2, #0
 800a152:	2104      	movs	r1, #4
 800a154:	f7ff ff94 	bl	800a080 <std>
 800a158:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a15c:	2201      	movs	r2, #1
 800a15e:	2109      	movs	r1, #9
 800a160:	f7ff ff8e 	bl	800a080 <std>
 800a164:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a168:	2202      	movs	r2, #2
 800a16a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a16e:	2112      	movs	r1, #18
 800a170:	f7ff bf86 	b.w	800a080 <std>
 800a174:	240004cc 	.word	0x240004cc
 800a178:	24000394 	.word	0x24000394
 800a17c:	0800a0ed 	.word	0x0800a0ed

0800a180 <__sfp_lock_acquire>:
 800a180:	4801      	ldr	r0, [pc, #4]	@ (800a188 <__sfp_lock_acquire+0x8>)
 800a182:	f000 b974 	b.w	800a46e <__retarget_lock_acquire_recursive>
 800a186:	bf00      	nop
 800a188:	240004d6 	.word	0x240004d6

0800a18c <__sfp_lock_release>:
 800a18c:	4801      	ldr	r0, [pc, #4]	@ (800a194 <__sfp_lock_release+0x8>)
 800a18e:	f000 b96f 	b.w	800a470 <__retarget_lock_release_recursive>
 800a192:	bf00      	nop
 800a194:	240004d6 	.word	0x240004d6

0800a198 <__sinit>:
 800a198:	b510      	push	{r4, lr}
 800a19a:	4604      	mov	r4, r0
 800a19c:	f7ff fff0 	bl	800a180 <__sfp_lock_acquire>
 800a1a0:	6a23      	ldr	r3, [r4, #32]
 800a1a2:	b11b      	cbz	r3, 800a1ac <__sinit+0x14>
 800a1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1a8:	f7ff bff0 	b.w	800a18c <__sfp_lock_release>
 800a1ac:	4b04      	ldr	r3, [pc, #16]	@ (800a1c0 <__sinit+0x28>)
 800a1ae:	6223      	str	r3, [r4, #32]
 800a1b0:	4b04      	ldr	r3, [pc, #16]	@ (800a1c4 <__sinit+0x2c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1f5      	bne.n	800a1a4 <__sinit+0xc>
 800a1b8:	f7ff ffc4 	bl	800a144 <global_stdio_init.part.0>
 800a1bc:	e7f2      	b.n	800a1a4 <__sinit+0xc>
 800a1be:	bf00      	nop
 800a1c0:	0800a105 	.word	0x0800a105
 800a1c4:	240004cc 	.word	0x240004cc

0800a1c8 <fiprintf>:
 800a1c8:	b40e      	push	{r1, r2, r3}
 800a1ca:	b503      	push	{r0, r1, lr}
 800a1cc:	4601      	mov	r1, r0
 800a1ce:	ab03      	add	r3, sp, #12
 800a1d0:	4805      	ldr	r0, [pc, #20]	@ (800a1e8 <fiprintf+0x20>)
 800a1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1d6:	6800      	ldr	r0, [r0, #0]
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	f000 fa29 	bl	800a630 <_vfiprintf_r>
 800a1de:	b002      	add	sp, #8
 800a1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1e4:	b003      	add	sp, #12
 800a1e6:	4770      	bx	lr
 800a1e8:	24000020 	.word	0x24000020

0800a1ec <_fwalk_sglue>:
 800a1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	4688      	mov	r8, r1
 800a1f4:	4614      	mov	r4, r2
 800a1f6:	2600      	movs	r6, #0
 800a1f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1fc:	f1b9 0901 	subs.w	r9, r9, #1
 800a200:	d505      	bpl.n	800a20e <_fwalk_sglue+0x22>
 800a202:	6824      	ldr	r4, [r4, #0]
 800a204:	2c00      	cmp	r4, #0
 800a206:	d1f7      	bne.n	800a1f8 <_fwalk_sglue+0xc>
 800a208:	4630      	mov	r0, r6
 800a20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d907      	bls.n	800a224 <_fwalk_sglue+0x38>
 800a214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a218:	3301      	adds	r3, #1
 800a21a:	d003      	beq.n	800a224 <_fwalk_sglue+0x38>
 800a21c:	4629      	mov	r1, r5
 800a21e:	4638      	mov	r0, r7
 800a220:	47c0      	blx	r8
 800a222:	4306      	orrs	r6, r0
 800a224:	3568      	adds	r5, #104	@ 0x68
 800a226:	e7e9      	b.n	800a1fc <_fwalk_sglue+0x10>

0800a228 <iprintf>:
 800a228:	b40f      	push	{r0, r1, r2, r3}
 800a22a:	b507      	push	{r0, r1, r2, lr}
 800a22c:	4906      	ldr	r1, [pc, #24]	@ (800a248 <iprintf+0x20>)
 800a22e:	ab04      	add	r3, sp, #16
 800a230:	6808      	ldr	r0, [r1, #0]
 800a232:	f853 2b04 	ldr.w	r2, [r3], #4
 800a236:	6881      	ldr	r1, [r0, #8]
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	f000 f9f9 	bl	800a630 <_vfiprintf_r>
 800a23e:	b003      	add	sp, #12
 800a240:	f85d eb04 	ldr.w	lr, [sp], #4
 800a244:	b004      	add	sp, #16
 800a246:	4770      	bx	lr
 800a248:	24000020 	.word	0x24000020

0800a24c <__sread>:
 800a24c:	b510      	push	{r4, lr}
 800a24e:	460c      	mov	r4, r1
 800a250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a254:	f000 f898 	bl	800a388 <_read_r>
 800a258:	2800      	cmp	r0, #0
 800a25a:	bfab      	itete	ge
 800a25c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a25e:	89a3      	ldrhlt	r3, [r4, #12]
 800a260:	181b      	addge	r3, r3, r0
 800a262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a266:	bfac      	ite	ge
 800a268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a26a:	81a3      	strhlt	r3, [r4, #12]
 800a26c:	bd10      	pop	{r4, pc}

0800a26e <__swrite>:
 800a26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a272:	461f      	mov	r7, r3
 800a274:	898b      	ldrh	r3, [r1, #12]
 800a276:	05db      	lsls	r3, r3, #23
 800a278:	4605      	mov	r5, r0
 800a27a:	460c      	mov	r4, r1
 800a27c:	4616      	mov	r6, r2
 800a27e:	d505      	bpl.n	800a28c <__swrite+0x1e>
 800a280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a284:	2302      	movs	r3, #2
 800a286:	2200      	movs	r2, #0
 800a288:	f000 f86c 	bl	800a364 <_lseek_r>
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a296:	81a3      	strh	r3, [r4, #12]
 800a298:	4632      	mov	r2, r6
 800a29a:	463b      	mov	r3, r7
 800a29c:	4628      	mov	r0, r5
 800a29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a2:	f000 b8a7 	b.w	800a3f4 <_write_r>

0800a2a6 <__sseek>:
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ae:	f000 f859 	bl	800a364 <_lseek_r>
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	bf15      	itete	ne
 800a2b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a2ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a2be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a2c2:	81a3      	strheq	r3, [r4, #12]
 800a2c4:	bf18      	it	ne
 800a2c6:	81a3      	strhne	r3, [r4, #12]
 800a2c8:	bd10      	pop	{r4, pc}

0800a2ca <__sclose>:
 800a2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ce:	f000 b839 	b.w	800a344 <_close_r>

0800a2d2 <memset>:
 800a2d2:	4402      	add	r2, r0
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d100      	bne.n	800a2dc <memset+0xa>
 800a2da:	4770      	bx	lr
 800a2dc:	f803 1b01 	strb.w	r1, [r3], #1
 800a2e0:	e7f9      	b.n	800a2d6 <memset+0x4>

0800a2e2 <_raise_r>:
 800a2e2:	291f      	cmp	r1, #31
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	d904      	bls.n	800a2f6 <_raise_r+0x14>
 800a2ec:	2316      	movs	r3, #22
 800a2ee:	6003      	str	r3, [r0, #0]
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f4:	bd38      	pop	{r3, r4, r5, pc}
 800a2f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2f8:	b112      	cbz	r2, 800a300 <_raise_r+0x1e>
 800a2fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2fe:	b94b      	cbnz	r3, 800a314 <_raise_r+0x32>
 800a300:	4628      	mov	r0, r5
 800a302:	f000 f865 	bl	800a3d0 <_getpid_r>
 800a306:	4622      	mov	r2, r4
 800a308:	4601      	mov	r1, r0
 800a30a:	4628      	mov	r0, r5
 800a30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a310:	f000 b84c 	b.w	800a3ac <_kill_r>
 800a314:	2b01      	cmp	r3, #1
 800a316:	d00a      	beq.n	800a32e <_raise_r+0x4c>
 800a318:	1c59      	adds	r1, r3, #1
 800a31a:	d103      	bne.n	800a324 <_raise_r+0x42>
 800a31c:	2316      	movs	r3, #22
 800a31e:	6003      	str	r3, [r0, #0]
 800a320:	2001      	movs	r0, #1
 800a322:	e7e7      	b.n	800a2f4 <_raise_r+0x12>
 800a324:	2100      	movs	r1, #0
 800a326:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a32a:	4620      	mov	r0, r4
 800a32c:	4798      	blx	r3
 800a32e:	2000      	movs	r0, #0
 800a330:	e7e0      	b.n	800a2f4 <_raise_r+0x12>
	...

0800a334 <raise>:
 800a334:	4b02      	ldr	r3, [pc, #8]	@ (800a340 <raise+0xc>)
 800a336:	4601      	mov	r1, r0
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	f7ff bfd2 	b.w	800a2e2 <_raise_r>
 800a33e:	bf00      	nop
 800a340:	24000020 	.word	0x24000020

0800a344 <_close_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4d06      	ldr	r5, [pc, #24]	@ (800a360 <_close_r+0x1c>)
 800a348:	2300      	movs	r3, #0
 800a34a:	4604      	mov	r4, r0
 800a34c:	4608      	mov	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7f7 fdd4 	bl	8001efc <_close>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_close_r+0x1a>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_close_r+0x1a>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	240004d0 	.word	0x240004d0

0800a364 <_lseek_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4d07      	ldr	r5, [pc, #28]	@ (800a384 <_lseek_r+0x20>)
 800a368:	4604      	mov	r4, r0
 800a36a:	4608      	mov	r0, r1
 800a36c:	4611      	mov	r1, r2
 800a36e:	2200      	movs	r2, #0
 800a370:	602a      	str	r2, [r5, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	f7f7 fde9 	bl	8001f4a <_lseek>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_lseek_r+0x1e>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_lseek_r+0x1e>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	240004d0 	.word	0x240004d0

0800a388 <_read_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4d07      	ldr	r5, [pc, #28]	@ (800a3a8 <_read_r+0x20>)
 800a38c:	4604      	mov	r4, r0
 800a38e:	4608      	mov	r0, r1
 800a390:	4611      	mov	r1, r2
 800a392:	2200      	movs	r2, #0
 800a394:	602a      	str	r2, [r5, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	f7f7 fd77 	bl	8001e8a <_read>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_read_r+0x1e>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_read_r+0x1e>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	240004d0 	.word	0x240004d0

0800a3ac <_kill_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d07      	ldr	r5, [pc, #28]	@ (800a3cc <_kill_r+0x20>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	602b      	str	r3, [r5, #0]
 800a3ba:	f7f7 fd4b 	bl	8001e54 <_kill>
 800a3be:	1c43      	adds	r3, r0, #1
 800a3c0:	d102      	bne.n	800a3c8 <_kill_r+0x1c>
 800a3c2:	682b      	ldr	r3, [r5, #0]
 800a3c4:	b103      	cbz	r3, 800a3c8 <_kill_r+0x1c>
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ca:	bf00      	nop
 800a3cc:	240004d0 	.word	0x240004d0

0800a3d0 <_getpid_r>:
 800a3d0:	f7f7 bd38 	b.w	8001e44 <_getpid>

0800a3d4 <_sbrk_r>:
 800a3d4:	b538      	push	{r3, r4, r5, lr}
 800a3d6:	4d06      	ldr	r5, [pc, #24]	@ (800a3f0 <_sbrk_r+0x1c>)
 800a3d8:	2300      	movs	r3, #0
 800a3da:	4604      	mov	r4, r0
 800a3dc:	4608      	mov	r0, r1
 800a3de:	602b      	str	r3, [r5, #0]
 800a3e0:	f7f7 fdc0 	bl	8001f64 <_sbrk>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_sbrk_r+0x1a>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_sbrk_r+0x1a>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	240004d0 	.word	0x240004d0

0800a3f4 <_write_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d07      	ldr	r5, [pc, #28]	@ (800a414 <_write_r+0x20>)
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	2200      	movs	r2, #0
 800a400:	602a      	str	r2, [r5, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	f7f7 fd5e 	bl	8001ec4 <_write>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_write_r+0x1e>
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_write_r+0x1e>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	240004d0 	.word	0x240004d0

0800a418 <__errno>:
 800a418:	4b01      	ldr	r3, [pc, #4]	@ (800a420 <__errno+0x8>)
 800a41a:	6818      	ldr	r0, [r3, #0]
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	24000020 	.word	0x24000020

0800a424 <__libc_init_array>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	4d0d      	ldr	r5, [pc, #52]	@ (800a45c <__libc_init_array+0x38>)
 800a428:	4c0d      	ldr	r4, [pc, #52]	@ (800a460 <__libc_init_array+0x3c>)
 800a42a:	1b64      	subs	r4, r4, r5
 800a42c:	10a4      	asrs	r4, r4, #2
 800a42e:	2600      	movs	r6, #0
 800a430:	42a6      	cmp	r6, r4
 800a432:	d109      	bne.n	800a448 <__libc_init_array+0x24>
 800a434:	4d0b      	ldr	r5, [pc, #44]	@ (800a464 <__libc_init_array+0x40>)
 800a436:	4c0c      	ldr	r4, [pc, #48]	@ (800a468 <__libc_init_array+0x44>)
 800a438:	f000 fd62 	bl	800af00 <_init>
 800a43c:	1b64      	subs	r4, r4, r5
 800a43e:	10a4      	asrs	r4, r4, #2
 800a440:	2600      	movs	r6, #0
 800a442:	42a6      	cmp	r6, r4
 800a444:	d105      	bne.n	800a452 <__libc_init_array+0x2e>
 800a446:	bd70      	pop	{r4, r5, r6, pc}
 800a448:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44c:	4798      	blx	r3
 800a44e:	3601      	adds	r6, #1
 800a450:	e7ee      	b.n	800a430 <__libc_init_array+0xc>
 800a452:	f855 3b04 	ldr.w	r3, [r5], #4
 800a456:	4798      	blx	r3
 800a458:	3601      	adds	r6, #1
 800a45a:	e7f2      	b.n	800a442 <__libc_init_array+0x1e>
 800a45c:	0800bd3c 	.word	0x0800bd3c
 800a460:	0800bd3c 	.word	0x0800bd3c
 800a464:	0800bd3c 	.word	0x0800bd3c
 800a468:	0800bd4c 	.word	0x0800bd4c

0800a46c <__retarget_lock_init_recursive>:
 800a46c:	4770      	bx	lr

0800a46e <__retarget_lock_acquire_recursive>:
 800a46e:	4770      	bx	lr

0800a470 <__retarget_lock_release_recursive>:
 800a470:	4770      	bx	lr

0800a472 <memcpy>:
 800a472:	440a      	add	r2, r1
 800a474:	4291      	cmp	r1, r2
 800a476:	f100 33ff 	add.w	r3, r0, #4294967295
 800a47a:	d100      	bne.n	800a47e <memcpy+0xc>
 800a47c:	4770      	bx	lr
 800a47e:	b510      	push	{r4, lr}
 800a480:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a484:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a488:	4291      	cmp	r1, r2
 800a48a:	d1f9      	bne.n	800a480 <memcpy+0xe>
 800a48c:	bd10      	pop	{r4, pc}
	...

0800a490 <__register_exitproc>:
 800a490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a494:	4d27      	ldr	r5, [pc, #156]	@ (800a534 <__register_exitproc+0xa4>)
 800a496:	4607      	mov	r7, r0
 800a498:	6828      	ldr	r0, [r5, #0]
 800a49a:	4691      	mov	r9, r2
 800a49c:	460e      	mov	r6, r1
 800a49e:	4698      	mov	r8, r3
 800a4a0:	f7ff ffe5 	bl	800a46e <__retarget_lock_acquire_recursive>
 800a4a4:	4a24      	ldr	r2, [pc, #144]	@ (800a538 <__register_exitproc+0xa8>)
 800a4a6:	6814      	ldr	r4, [r2, #0]
 800a4a8:	b93c      	cbnz	r4, 800a4ba <__register_exitproc+0x2a>
 800a4aa:	4b24      	ldr	r3, [pc, #144]	@ (800a53c <__register_exitproc+0xac>)
 800a4ac:	6013      	str	r3, [r2, #0]
 800a4ae:	4a24      	ldr	r2, [pc, #144]	@ (800a540 <__register_exitproc+0xb0>)
 800a4b0:	b112      	cbz	r2, 800a4b8 <__register_exitproc+0x28>
 800a4b2:	6812      	ldr	r2, [r2, #0]
 800a4b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800a4b8:	4c20      	ldr	r4, [pc, #128]	@ (800a53c <__register_exitproc+0xac>)
 800a4ba:	6863      	ldr	r3, [r4, #4]
 800a4bc:	2b1f      	cmp	r3, #31
 800a4be:	dd06      	ble.n	800a4ce <__register_exitproc+0x3e>
 800a4c0:	6828      	ldr	r0, [r5, #0]
 800a4c2:	f7ff ffd5 	bl	800a470 <__retarget_lock_release_recursive>
 800a4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ce:	b32f      	cbz	r7, 800a51c <__register_exitproc+0x8c>
 800a4d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800a4d4:	b968      	cbnz	r0, 800a4f2 <__register_exitproc+0x62>
 800a4d6:	4b1b      	ldr	r3, [pc, #108]	@ (800a544 <__register_exitproc+0xb4>)
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d0f1      	beq.n	800a4c0 <__register_exitproc+0x30>
 800a4dc:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800a4e0:	f7ff fd10 	bl	8009f04 <malloc>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d0eb      	beq.n	800a4c0 <__register_exitproc+0x30>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 800a4ee:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 800a4f2:	6863      	ldr	r3, [r4, #4]
 800a4f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	409a      	lsls	r2, r3
 800a4fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800a500:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 800a504:	4313      	orrs	r3, r2
 800a506:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800a50a:	2f02      	cmp	r7, #2
 800a50c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 800a510:	bf02      	ittt	eq
 800a512:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 800a516:	4313      	orreq	r3, r2
 800a518:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800a51c:	6863      	ldr	r3, [r4, #4]
 800a51e:	6828      	ldr	r0, [r5, #0]
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	3302      	adds	r3, #2
 800a524:	6062      	str	r2, [r4, #4]
 800a526:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800a52a:	f7ff ffa1 	bl	800a470 <__retarget_lock_release_recursive>
 800a52e:	2000      	movs	r0, #0
 800a530:	e7cb      	b.n	800a4ca <__register_exitproc+0x3a>
 800a532:	bf00      	nop
 800a534:	24000070 	.word	0x24000070
 800a538:	24000564 	.word	0x24000564
 800a53c:	240004d8 	.word	0x240004d8
 800a540:	0800b410 	.word	0x0800b410
 800a544:	08009f05 	.word	0x08009f05

0800a548 <_free_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4605      	mov	r5, r0
 800a54c:	2900      	cmp	r1, #0
 800a54e:	d041      	beq.n	800a5d4 <_free_r+0x8c>
 800a550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a554:	1f0c      	subs	r4, r1, #4
 800a556:	2b00      	cmp	r3, #0
 800a558:	bfb8      	it	lt
 800a55a:	18e4      	addlt	r4, r4, r3
 800a55c:	f7ff fd84 	bl	800a068 <__malloc_lock>
 800a560:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d8 <_free_r+0x90>)
 800a562:	6813      	ldr	r3, [r2, #0]
 800a564:	b933      	cbnz	r3, 800a574 <_free_r+0x2c>
 800a566:	6063      	str	r3, [r4, #4]
 800a568:	6014      	str	r4, [r2, #0]
 800a56a:	4628      	mov	r0, r5
 800a56c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a570:	f7ff bd80 	b.w	800a074 <__malloc_unlock>
 800a574:	42a3      	cmp	r3, r4
 800a576:	d908      	bls.n	800a58a <_free_r+0x42>
 800a578:	6820      	ldr	r0, [r4, #0]
 800a57a:	1821      	adds	r1, r4, r0
 800a57c:	428b      	cmp	r3, r1
 800a57e:	bf01      	itttt	eq
 800a580:	6819      	ldreq	r1, [r3, #0]
 800a582:	685b      	ldreq	r3, [r3, #4]
 800a584:	1809      	addeq	r1, r1, r0
 800a586:	6021      	streq	r1, [r4, #0]
 800a588:	e7ed      	b.n	800a566 <_free_r+0x1e>
 800a58a:	461a      	mov	r2, r3
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	b10b      	cbz	r3, 800a594 <_free_r+0x4c>
 800a590:	42a3      	cmp	r3, r4
 800a592:	d9fa      	bls.n	800a58a <_free_r+0x42>
 800a594:	6811      	ldr	r1, [r2, #0]
 800a596:	1850      	adds	r0, r2, r1
 800a598:	42a0      	cmp	r0, r4
 800a59a:	d10b      	bne.n	800a5b4 <_free_r+0x6c>
 800a59c:	6820      	ldr	r0, [r4, #0]
 800a59e:	4401      	add	r1, r0
 800a5a0:	1850      	adds	r0, r2, r1
 800a5a2:	4283      	cmp	r3, r0
 800a5a4:	6011      	str	r1, [r2, #0]
 800a5a6:	d1e0      	bne.n	800a56a <_free_r+0x22>
 800a5a8:	6818      	ldr	r0, [r3, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	6053      	str	r3, [r2, #4]
 800a5ae:	4408      	add	r0, r1
 800a5b0:	6010      	str	r0, [r2, #0]
 800a5b2:	e7da      	b.n	800a56a <_free_r+0x22>
 800a5b4:	d902      	bls.n	800a5bc <_free_r+0x74>
 800a5b6:	230c      	movs	r3, #12
 800a5b8:	602b      	str	r3, [r5, #0]
 800a5ba:	e7d6      	b.n	800a56a <_free_r+0x22>
 800a5bc:	6820      	ldr	r0, [r4, #0]
 800a5be:	1821      	adds	r1, r4, r0
 800a5c0:	428b      	cmp	r3, r1
 800a5c2:	bf04      	itt	eq
 800a5c4:	6819      	ldreq	r1, [r3, #0]
 800a5c6:	685b      	ldreq	r3, [r3, #4]
 800a5c8:	6063      	str	r3, [r4, #4]
 800a5ca:	bf04      	itt	eq
 800a5cc:	1809      	addeq	r1, r1, r0
 800a5ce:	6021      	streq	r1, [r4, #0]
 800a5d0:	6054      	str	r4, [r2, #4]
 800a5d2:	e7ca      	b.n	800a56a <_free_r+0x22>
 800a5d4:	bd38      	pop	{r3, r4, r5, pc}
 800a5d6:	bf00      	nop
 800a5d8:	24000390 	.word	0x24000390

0800a5dc <__sfputc_r>:
 800a5dc:	6893      	ldr	r3, [r2, #8]
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	b410      	push	{r4}
 800a5e4:	6093      	str	r3, [r2, #8]
 800a5e6:	da08      	bge.n	800a5fa <__sfputc_r+0x1e>
 800a5e8:	6994      	ldr	r4, [r2, #24]
 800a5ea:	42a3      	cmp	r3, r4
 800a5ec:	db01      	blt.n	800a5f2 <__sfputc_r+0x16>
 800a5ee:	290a      	cmp	r1, #10
 800a5f0:	d103      	bne.n	800a5fa <__sfputc_r+0x1e>
 800a5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5f6:	f000 bb6b 	b.w	800acd0 <__swbuf_r>
 800a5fa:	6813      	ldr	r3, [r2, #0]
 800a5fc:	1c58      	adds	r0, r3, #1
 800a5fe:	6010      	str	r0, [r2, #0]
 800a600:	7019      	strb	r1, [r3, #0]
 800a602:	4608      	mov	r0, r1
 800a604:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <__sfputs_r>:
 800a60a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60c:	4606      	mov	r6, r0
 800a60e:	460f      	mov	r7, r1
 800a610:	4614      	mov	r4, r2
 800a612:	18d5      	adds	r5, r2, r3
 800a614:	42ac      	cmp	r4, r5
 800a616:	d101      	bne.n	800a61c <__sfputs_r+0x12>
 800a618:	2000      	movs	r0, #0
 800a61a:	e007      	b.n	800a62c <__sfputs_r+0x22>
 800a61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a620:	463a      	mov	r2, r7
 800a622:	4630      	mov	r0, r6
 800a624:	f7ff ffda 	bl	800a5dc <__sfputc_r>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d1f3      	bne.n	800a614 <__sfputs_r+0xa>
 800a62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a630 <_vfiprintf_r>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	460d      	mov	r5, r1
 800a636:	b09d      	sub	sp, #116	@ 0x74
 800a638:	4614      	mov	r4, r2
 800a63a:	4698      	mov	r8, r3
 800a63c:	4606      	mov	r6, r0
 800a63e:	b118      	cbz	r0, 800a648 <_vfiprintf_r+0x18>
 800a640:	6a03      	ldr	r3, [r0, #32]
 800a642:	b90b      	cbnz	r3, 800a648 <_vfiprintf_r+0x18>
 800a644:	f7ff fda8 	bl	800a198 <__sinit>
 800a648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a64a:	07d9      	lsls	r1, r3, #31
 800a64c:	d405      	bmi.n	800a65a <_vfiprintf_r+0x2a>
 800a64e:	89ab      	ldrh	r3, [r5, #12]
 800a650:	059a      	lsls	r2, r3, #22
 800a652:	d402      	bmi.n	800a65a <_vfiprintf_r+0x2a>
 800a654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a656:	f7ff ff0a 	bl	800a46e <__retarget_lock_acquire_recursive>
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	071b      	lsls	r3, r3, #28
 800a65e:	d501      	bpl.n	800a664 <_vfiprintf_r+0x34>
 800a660:	692b      	ldr	r3, [r5, #16]
 800a662:	b99b      	cbnz	r3, 800a68c <_vfiprintf_r+0x5c>
 800a664:	4629      	mov	r1, r5
 800a666:	4630      	mov	r0, r6
 800a668:	f000 fb70 	bl	800ad4c <__swsetup_r>
 800a66c:	b170      	cbz	r0, 800a68c <_vfiprintf_r+0x5c>
 800a66e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a670:	07dc      	lsls	r4, r3, #31
 800a672:	d504      	bpl.n	800a67e <_vfiprintf_r+0x4e>
 800a674:	f04f 30ff 	mov.w	r0, #4294967295
 800a678:	b01d      	add	sp, #116	@ 0x74
 800a67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67e:	89ab      	ldrh	r3, [r5, #12]
 800a680:	0598      	lsls	r0, r3, #22
 800a682:	d4f7      	bmi.n	800a674 <_vfiprintf_r+0x44>
 800a684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a686:	f7ff fef3 	bl	800a470 <__retarget_lock_release_recursive>
 800a68a:	e7f3      	b.n	800a674 <_vfiprintf_r+0x44>
 800a68c:	2300      	movs	r3, #0
 800a68e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a690:	2320      	movs	r3, #32
 800a692:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a696:	f8cd 800c 	str.w	r8, [sp, #12]
 800a69a:	2330      	movs	r3, #48	@ 0x30
 800a69c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a84c <_vfiprintf_r+0x21c>
 800a6a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6a4:	f04f 0901 	mov.w	r9, #1
 800a6a8:	4623      	mov	r3, r4
 800a6aa:	469a      	mov	sl, r3
 800a6ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6b0:	b10a      	cbz	r2, 800a6b6 <_vfiprintf_r+0x86>
 800a6b2:	2a25      	cmp	r2, #37	@ 0x25
 800a6b4:	d1f9      	bne.n	800a6aa <_vfiprintf_r+0x7a>
 800a6b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a6ba:	d00b      	beq.n	800a6d4 <_vfiprintf_r+0xa4>
 800a6bc:	465b      	mov	r3, fp
 800a6be:	4622      	mov	r2, r4
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7ff ffa1 	bl	800a60a <__sfputs_r>
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	f000 80a7 	beq.w	800a81c <_vfiprintf_r+0x1ec>
 800a6ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6d0:	445a      	add	r2, fp
 800a6d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f000 809f 	beq.w	800a81c <_vfiprintf_r+0x1ec>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6e8:	f10a 0a01 	add.w	sl, sl, #1
 800a6ec:	9304      	str	r3, [sp, #16]
 800a6ee:	9307      	str	r3, [sp, #28]
 800a6f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6f6:	4654      	mov	r4, sl
 800a6f8:	2205      	movs	r2, #5
 800a6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6fe:	4853      	ldr	r0, [pc, #332]	@ (800a84c <_vfiprintf_r+0x21c>)
 800a700:	f7f5 fdee 	bl	80002e0 <memchr>
 800a704:	9a04      	ldr	r2, [sp, #16]
 800a706:	b9d8      	cbnz	r0, 800a740 <_vfiprintf_r+0x110>
 800a708:	06d1      	lsls	r1, r2, #27
 800a70a:	bf44      	itt	mi
 800a70c:	2320      	movmi	r3, #32
 800a70e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a712:	0713      	lsls	r3, r2, #28
 800a714:	bf44      	itt	mi
 800a716:	232b      	movmi	r3, #43	@ 0x2b
 800a718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a71c:	f89a 3000 	ldrb.w	r3, [sl]
 800a720:	2b2a      	cmp	r3, #42	@ 0x2a
 800a722:	d015      	beq.n	800a750 <_vfiprintf_r+0x120>
 800a724:	9a07      	ldr	r2, [sp, #28]
 800a726:	4654      	mov	r4, sl
 800a728:	2000      	movs	r0, #0
 800a72a:	f04f 0c0a 	mov.w	ip, #10
 800a72e:	4621      	mov	r1, r4
 800a730:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a734:	3b30      	subs	r3, #48	@ 0x30
 800a736:	2b09      	cmp	r3, #9
 800a738:	d94b      	bls.n	800a7d2 <_vfiprintf_r+0x1a2>
 800a73a:	b1b0      	cbz	r0, 800a76a <_vfiprintf_r+0x13a>
 800a73c:	9207      	str	r2, [sp, #28]
 800a73e:	e014      	b.n	800a76a <_vfiprintf_r+0x13a>
 800a740:	eba0 0308 	sub.w	r3, r0, r8
 800a744:	fa09 f303 	lsl.w	r3, r9, r3
 800a748:	4313      	orrs	r3, r2
 800a74a:	9304      	str	r3, [sp, #16]
 800a74c:	46a2      	mov	sl, r4
 800a74e:	e7d2      	b.n	800a6f6 <_vfiprintf_r+0xc6>
 800a750:	9b03      	ldr	r3, [sp, #12]
 800a752:	1d19      	adds	r1, r3, #4
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	9103      	str	r1, [sp, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	bfbb      	ittet	lt
 800a75c:	425b      	neglt	r3, r3
 800a75e:	f042 0202 	orrlt.w	r2, r2, #2
 800a762:	9307      	strge	r3, [sp, #28]
 800a764:	9307      	strlt	r3, [sp, #28]
 800a766:	bfb8      	it	lt
 800a768:	9204      	strlt	r2, [sp, #16]
 800a76a:	7823      	ldrb	r3, [r4, #0]
 800a76c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a76e:	d10a      	bne.n	800a786 <_vfiprintf_r+0x156>
 800a770:	7863      	ldrb	r3, [r4, #1]
 800a772:	2b2a      	cmp	r3, #42	@ 0x2a
 800a774:	d132      	bne.n	800a7dc <_vfiprintf_r+0x1ac>
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	1d1a      	adds	r2, r3, #4
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	9203      	str	r2, [sp, #12]
 800a77e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a782:	3402      	adds	r4, #2
 800a784:	9305      	str	r3, [sp, #20]
 800a786:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a85c <_vfiprintf_r+0x22c>
 800a78a:	7821      	ldrb	r1, [r4, #0]
 800a78c:	2203      	movs	r2, #3
 800a78e:	4650      	mov	r0, sl
 800a790:	f7f5 fda6 	bl	80002e0 <memchr>
 800a794:	b138      	cbz	r0, 800a7a6 <_vfiprintf_r+0x176>
 800a796:	9b04      	ldr	r3, [sp, #16]
 800a798:	eba0 000a 	sub.w	r0, r0, sl
 800a79c:	2240      	movs	r2, #64	@ 0x40
 800a79e:	4082      	lsls	r2, r0
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	3401      	adds	r4, #1
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7aa:	4829      	ldr	r0, [pc, #164]	@ (800a850 <_vfiprintf_r+0x220>)
 800a7ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7b0:	2206      	movs	r2, #6
 800a7b2:	f7f5 fd95 	bl	80002e0 <memchr>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d03f      	beq.n	800a83a <_vfiprintf_r+0x20a>
 800a7ba:	4b26      	ldr	r3, [pc, #152]	@ (800a854 <_vfiprintf_r+0x224>)
 800a7bc:	bb1b      	cbnz	r3, 800a806 <_vfiprintf_r+0x1d6>
 800a7be:	9b03      	ldr	r3, [sp, #12]
 800a7c0:	3307      	adds	r3, #7
 800a7c2:	f023 0307 	bic.w	r3, r3, #7
 800a7c6:	3308      	adds	r3, #8
 800a7c8:	9303      	str	r3, [sp, #12]
 800a7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7cc:	443b      	add	r3, r7
 800a7ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7d0:	e76a      	b.n	800a6a8 <_vfiprintf_r+0x78>
 800a7d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	2001      	movs	r0, #1
 800a7da:	e7a8      	b.n	800a72e <_vfiprintf_r+0xfe>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	3401      	adds	r4, #1
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	f04f 0c0a 	mov.w	ip, #10
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ee:	3a30      	subs	r2, #48	@ 0x30
 800a7f0:	2a09      	cmp	r2, #9
 800a7f2:	d903      	bls.n	800a7fc <_vfiprintf_r+0x1cc>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d0c6      	beq.n	800a786 <_vfiprintf_r+0x156>
 800a7f8:	9105      	str	r1, [sp, #20]
 800a7fa:	e7c4      	b.n	800a786 <_vfiprintf_r+0x156>
 800a7fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a800:	4604      	mov	r4, r0
 800a802:	2301      	movs	r3, #1
 800a804:	e7f0      	b.n	800a7e8 <_vfiprintf_r+0x1b8>
 800a806:	ab03      	add	r3, sp, #12
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	462a      	mov	r2, r5
 800a80c:	4b12      	ldr	r3, [pc, #72]	@ (800a858 <_vfiprintf_r+0x228>)
 800a80e:	a904      	add	r1, sp, #16
 800a810:	4630      	mov	r0, r6
 800a812:	f3af 8000 	nop.w
 800a816:	4607      	mov	r7, r0
 800a818:	1c78      	adds	r0, r7, #1
 800a81a:	d1d6      	bne.n	800a7ca <_vfiprintf_r+0x19a>
 800a81c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a81e:	07d9      	lsls	r1, r3, #31
 800a820:	d405      	bmi.n	800a82e <_vfiprintf_r+0x1fe>
 800a822:	89ab      	ldrh	r3, [r5, #12]
 800a824:	059a      	lsls	r2, r3, #22
 800a826:	d402      	bmi.n	800a82e <_vfiprintf_r+0x1fe>
 800a828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a82a:	f7ff fe21 	bl	800a470 <__retarget_lock_release_recursive>
 800a82e:	89ab      	ldrh	r3, [r5, #12]
 800a830:	065b      	lsls	r3, r3, #25
 800a832:	f53f af1f 	bmi.w	800a674 <_vfiprintf_r+0x44>
 800a836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a838:	e71e      	b.n	800a678 <_vfiprintf_r+0x48>
 800a83a:	ab03      	add	r3, sp, #12
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	462a      	mov	r2, r5
 800a840:	4b05      	ldr	r3, [pc, #20]	@ (800a858 <_vfiprintf_r+0x228>)
 800a842:	a904      	add	r1, sp, #16
 800a844:	4630      	mov	r0, r6
 800a846:	f000 f879 	bl	800a93c <_printf_i>
 800a84a:	e7e4      	b.n	800a816 <_vfiprintf_r+0x1e6>
 800a84c:	0800b3dc 	.word	0x0800b3dc
 800a850:	0800b3e6 	.word	0x0800b3e6
 800a854:	00000000 	.word	0x00000000
 800a858:	0800a60b 	.word	0x0800a60b
 800a85c:	0800b3e2 	.word	0x0800b3e2

0800a860 <_printf_common>:
 800a860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a864:	4616      	mov	r6, r2
 800a866:	4698      	mov	r8, r3
 800a868:	688a      	ldr	r2, [r1, #8]
 800a86a:	690b      	ldr	r3, [r1, #16]
 800a86c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a870:	4293      	cmp	r3, r2
 800a872:	bfb8      	it	lt
 800a874:	4613      	movlt	r3, r2
 800a876:	6033      	str	r3, [r6, #0]
 800a878:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a87c:	4607      	mov	r7, r0
 800a87e:	460c      	mov	r4, r1
 800a880:	b10a      	cbz	r2, 800a886 <_printf_common+0x26>
 800a882:	3301      	adds	r3, #1
 800a884:	6033      	str	r3, [r6, #0]
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	0699      	lsls	r1, r3, #26
 800a88a:	bf42      	ittt	mi
 800a88c:	6833      	ldrmi	r3, [r6, #0]
 800a88e:	3302      	addmi	r3, #2
 800a890:	6033      	strmi	r3, [r6, #0]
 800a892:	6825      	ldr	r5, [r4, #0]
 800a894:	f015 0506 	ands.w	r5, r5, #6
 800a898:	d106      	bne.n	800a8a8 <_printf_common+0x48>
 800a89a:	f104 0a19 	add.w	sl, r4, #25
 800a89e:	68e3      	ldr	r3, [r4, #12]
 800a8a0:	6832      	ldr	r2, [r6, #0]
 800a8a2:	1a9b      	subs	r3, r3, r2
 800a8a4:	42ab      	cmp	r3, r5
 800a8a6:	dc26      	bgt.n	800a8f6 <_printf_common+0x96>
 800a8a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a8ac:	6822      	ldr	r2, [r4, #0]
 800a8ae:	3b00      	subs	r3, #0
 800a8b0:	bf18      	it	ne
 800a8b2:	2301      	movne	r3, #1
 800a8b4:	0692      	lsls	r2, r2, #26
 800a8b6:	d42b      	bmi.n	800a910 <_printf_common+0xb0>
 800a8b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a8bc:	4641      	mov	r1, r8
 800a8be:	4638      	mov	r0, r7
 800a8c0:	47c8      	blx	r9
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	d01e      	beq.n	800a904 <_printf_common+0xa4>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	6922      	ldr	r2, [r4, #16]
 800a8ca:	f003 0306 	and.w	r3, r3, #6
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	bf02      	ittt	eq
 800a8d2:	68e5      	ldreq	r5, [r4, #12]
 800a8d4:	6833      	ldreq	r3, [r6, #0]
 800a8d6:	1aed      	subeq	r5, r5, r3
 800a8d8:	68a3      	ldr	r3, [r4, #8]
 800a8da:	bf0c      	ite	eq
 800a8dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8e0:	2500      	movne	r5, #0
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	bfc4      	itt	gt
 800a8e6:	1a9b      	subgt	r3, r3, r2
 800a8e8:	18ed      	addgt	r5, r5, r3
 800a8ea:	2600      	movs	r6, #0
 800a8ec:	341a      	adds	r4, #26
 800a8ee:	42b5      	cmp	r5, r6
 800a8f0:	d11a      	bne.n	800a928 <_printf_common+0xc8>
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	e008      	b.n	800a908 <_printf_common+0xa8>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	4652      	mov	r2, sl
 800a8fa:	4641      	mov	r1, r8
 800a8fc:	4638      	mov	r0, r7
 800a8fe:	47c8      	blx	r9
 800a900:	3001      	adds	r0, #1
 800a902:	d103      	bne.n	800a90c <_printf_common+0xac>
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90c:	3501      	adds	r5, #1
 800a90e:	e7c6      	b.n	800a89e <_printf_common+0x3e>
 800a910:	18e1      	adds	r1, r4, r3
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	2030      	movs	r0, #48	@ 0x30
 800a916:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a91a:	4422      	add	r2, r4
 800a91c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a924:	3302      	adds	r3, #2
 800a926:	e7c7      	b.n	800a8b8 <_printf_common+0x58>
 800a928:	2301      	movs	r3, #1
 800a92a:	4622      	mov	r2, r4
 800a92c:	4641      	mov	r1, r8
 800a92e:	4638      	mov	r0, r7
 800a930:	47c8      	blx	r9
 800a932:	3001      	adds	r0, #1
 800a934:	d0e6      	beq.n	800a904 <_printf_common+0xa4>
 800a936:	3601      	adds	r6, #1
 800a938:	e7d9      	b.n	800a8ee <_printf_common+0x8e>
	...

0800a93c <_printf_i>:
 800a93c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a940:	7e0f      	ldrb	r7, [r1, #24]
 800a942:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a944:	2f78      	cmp	r7, #120	@ 0x78
 800a946:	4691      	mov	r9, r2
 800a948:	4680      	mov	r8, r0
 800a94a:	460c      	mov	r4, r1
 800a94c:	469a      	mov	sl, r3
 800a94e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a952:	d807      	bhi.n	800a964 <_printf_i+0x28>
 800a954:	2f62      	cmp	r7, #98	@ 0x62
 800a956:	d80a      	bhi.n	800a96e <_printf_i+0x32>
 800a958:	2f00      	cmp	r7, #0
 800a95a:	f000 80d1 	beq.w	800ab00 <_printf_i+0x1c4>
 800a95e:	2f58      	cmp	r7, #88	@ 0x58
 800a960:	f000 80b8 	beq.w	800aad4 <_printf_i+0x198>
 800a964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a968:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a96c:	e03a      	b.n	800a9e4 <_printf_i+0xa8>
 800a96e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a972:	2b15      	cmp	r3, #21
 800a974:	d8f6      	bhi.n	800a964 <_printf_i+0x28>
 800a976:	a101      	add	r1, pc, #4	@ (adr r1, 800a97c <_printf_i+0x40>)
 800a978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a97c:	0800a9d5 	.word	0x0800a9d5
 800a980:	0800a9e9 	.word	0x0800a9e9
 800a984:	0800a965 	.word	0x0800a965
 800a988:	0800a965 	.word	0x0800a965
 800a98c:	0800a965 	.word	0x0800a965
 800a990:	0800a965 	.word	0x0800a965
 800a994:	0800a9e9 	.word	0x0800a9e9
 800a998:	0800a965 	.word	0x0800a965
 800a99c:	0800a965 	.word	0x0800a965
 800a9a0:	0800a965 	.word	0x0800a965
 800a9a4:	0800a965 	.word	0x0800a965
 800a9a8:	0800aae7 	.word	0x0800aae7
 800a9ac:	0800aa13 	.word	0x0800aa13
 800a9b0:	0800aaa1 	.word	0x0800aaa1
 800a9b4:	0800a965 	.word	0x0800a965
 800a9b8:	0800a965 	.word	0x0800a965
 800a9bc:	0800ab09 	.word	0x0800ab09
 800a9c0:	0800a965 	.word	0x0800a965
 800a9c4:	0800aa13 	.word	0x0800aa13
 800a9c8:	0800a965 	.word	0x0800a965
 800a9cc:	0800a965 	.word	0x0800a965
 800a9d0:	0800aaa9 	.word	0x0800aaa9
 800a9d4:	6833      	ldr	r3, [r6, #0]
 800a9d6:	1d1a      	adds	r2, r3, #4
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6032      	str	r2, [r6, #0]
 800a9dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e09c      	b.n	800ab22 <_printf_i+0x1e6>
 800a9e8:	6833      	ldr	r3, [r6, #0]
 800a9ea:	6820      	ldr	r0, [r4, #0]
 800a9ec:	1d19      	adds	r1, r3, #4
 800a9ee:	6031      	str	r1, [r6, #0]
 800a9f0:	0606      	lsls	r6, r0, #24
 800a9f2:	d501      	bpl.n	800a9f8 <_printf_i+0xbc>
 800a9f4:	681d      	ldr	r5, [r3, #0]
 800a9f6:	e003      	b.n	800aa00 <_printf_i+0xc4>
 800a9f8:	0645      	lsls	r5, r0, #25
 800a9fa:	d5fb      	bpl.n	800a9f4 <_printf_i+0xb8>
 800a9fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	da03      	bge.n	800aa0c <_printf_i+0xd0>
 800aa04:	232d      	movs	r3, #45	@ 0x2d
 800aa06:	426d      	negs	r5, r5
 800aa08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa0c:	4858      	ldr	r0, [pc, #352]	@ (800ab70 <_printf_i+0x234>)
 800aa0e:	230a      	movs	r3, #10
 800aa10:	e011      	b.n	800aa36 <_printf_i+0xfa>
 800aa12:	6821      	ldr	r1, [r4, #0]
 800aa14:	6833      	ldr	r3, [r6, #0]
 800aa16:	0608      	lsls	r0, r1, #24
 800aa18:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa1c:	d402      	bmi.n	800aa24 <_printf_i+0xe8>
 800aa1e:	0649      	lsls	r1, r1, #25
 800aa20:	bf48      	it	mi
 800aa22:	b2ad      	uxthmi	r5, r5
 800aa24:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa26:	4852      	ldr	r0, [pc, #328]	@ (800ab70 <_printf_i+0x234>)
 800aa28:	6033      	str	r3, [r6, #0]
 800aa2a:	bf14      	ite	ne
 800aa2c:	230a      	movne	r3, #10
 800aa2e:	2308      	moveq	r3, #8
 800aa30:	2100      	movs	r1, #0
 800aa32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa36:	6866      	ldr	r6, [r4, #4]
 800aa38:	60a6      	str	r6, [r4, #8]
 800aa3a:	2e00      	cmp	r6, #0
 800aa3c:	db05      	blt.n	800aa4a <_printf_i+0x10e>
 800aa3e:	6821      	ldr	r1, [r4, #0]
 800aa40:	432e      	orrs	r6, r5
 800aa42:	f021 0104 	bic.w	r1, r1, #4
 800aa46:	6021      	str	r1, [r4, #0]
 800aa48:	d04b      	beq.n	800aae2 <_printf_i+0x1a6>
 800aa4a:	4616      	mov	r6, r2
 800aa4c:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa50:	fb03 5711 	mls	r7, r3, r1, r5
 800aa54:	5dc7      	ldrb	r7, [r0, r7]
 800aa56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa5a:	462f      	mov	r7, r5
 800aa5c:	42bb      	cmp	r3, r7
 800aa5e:	460d      	mov	r5, r1
 800aa60:	d9f4      	bls.n	800aa4c <_printf_i+0x110>
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	d10b      	bne.n	800aa7e <_printf_i+0x142>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	07df      	lsls	r7, r3, #31
 800aa6a:	d508      	bpl.n	800aa7e <_printf_i+0x142>
 800aa6c:	6923      	ldr	r3, [r4, #16]
 800aa6e:	6861      	ldr	r1, [r4, #4]
 800aa70:	4299      	cmp	r1, r3
 800aa72:	bfde      	ittt	le
 800aa74:	2330      	movle	r3, #48	@ 0x30
 800aa76:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa7e:	1b92      	subs	r2, r2, r6
 800aa80:	6122      	str	r2, [r4, #16]
 800aa82:	f8cd a000 	str.w	sl, [sp]
 800aa86:	464b      	mov	r3, r9
 800aa88:	aa03      	add	r2, sp, #12
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	f7ff fee7 	bl	800a860 <_printf_common>
 800aa92:	3001      	adds	r0, #1
 800aa94:	d14a      	bne.n	800ab2c <_printf_i+0x1f0>
 800aa96:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9a:	b004      	add	sp, #16
 800aa9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa0:	6823      	ldr	r3, [r4, #0]
 800aaa2:	f043 0320 	orr.w	r3, r3, #32
 800aaa6:	6023      	str	r3, [r4, #0]
 800aaa8:	4832      	ldr	r0, [pc, #200]	@ (800ab74 <_printf_i+0x238>)
 800aaaa:	2778      	movs	r7, #120	@ 0x78
 800aaac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	6831      	ldr	r1, [r6, #0]
 800aab4:	061f      	lsls	r7, r3, #24
 800aab6:	f851 5b04 	ldr.w	r5, [r1], #4
 800aaba:	d402      	bmi.n	800aac2 <_printf_i+0x186>
 800aabc:	065f      	lsls	r7, r3, #25
 800aabe:	bf48      	it	mi
 800aac0:	b2ad      	uxthmi	r5, r5
 800aac2:	6031      	str	r1, [r6, #0]
 800aac4:	07d9      	lsls	r1, r3, #31
 800aac6:	bf44      	itt	mi
 800aac8:	f043 0320 	orrmi.w	r3, r3, #32
 800aacc:	6023      	strmi	r3, [r4, #0]
 800aace:	b11d      	cbz	r5, 800aad8 <_printf_i+0x19c>
 800aad0:	2310      	movs	r3, #16
 800aad2:	e7ad      	b.n	800aa30 <_printf_i+0xf4>
 800aad4:	4826      	ldr	r0, [pc, #152]	@ (800ab70 <_printf_i+0x234>)
 800aad6:	e7e9      	b.n	800aaac <_printf_i+0x170>
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	f023 0320 	bic.w	r3, r3, #32
 800aade:	6023      	str	r3, [r4, #0]
 800aae0:	e7f6      	b.n	800aad0 <_printf_i+0x194>
 800aae2:	4616      	mov	r6, r2
 800aae4:	e7bd      	b.n	800aa62 <_printf_i+0x126>
 800aae6:	6833      	ldr	r3, [r6, #0]
 800aae8:	6825      	ldr	r5, [r4, #0]
 800aaea:	6961      	ldr	r1, [r4, #20]
 800aaec:	1d18      	adds	r0, r3, #4
 800aaee:	6030      	str	r0, [r6, #0]
 800aaf0:	062e      	lsls	r6, r5, #24
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	d501      	bpl.n	800aafa <_printf_i+0x1be>
 800aaf6:	6019      	str	r1, [r3, #0]
 800aaf8:	e002      	b.n	800ab00 <_printf_i+0x1c4>
 800aafa:	0668      	lsls	r0, r5, #25
 800aafc:	d5fb      	bpl.n	800aaf6 <_printf_i+0x1ba>
 800aafe:	8019      	strh	r1, [r3, #0]
 800ab00:	2300      	movs	r3, #0
 800ab02:	6123      	str	r3, [r4, #16]
 800ab04:	4616      	mov	r6, r2
 800ab06:	e7bc      	b.n	800aa82 <_printf_i+0x146>
 800ab08:	6833      	ldr	r3, [r6, #0]
 800ab0a:	1d1a      	adds	r2, r3, #4
 800ab0c:	6032      	str	r2, [r6, #0]
 800ab0e:	681e      	ldr	r6, [r3, #0]
 800ab10:	6862      	ldr	r2, [r4, #4]
 800ab12:	2100      	movs	r1, #0
 800ab14:	4630      	mov	r0, r6
 800ab16:	f7f5 fbe3 	bl	80002e0 <memchr>
 800ab1a:	b108      	cbz	r0, 800ab20 <_printf_i+0x1e4>
 800ab1c:	1b80      	subs	r0, r0, r6
 800ab1e:	6060      	str	r0, [r4, #4]
 800ab20:	6863      	ldr	r3, [r4, #4]
 800ab22:	6123      	str	r3, [r4, #16]
 800ab24:	2300      	movs	r3, #0
 800ab26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab2a:	e7aa      	b.n	800aa82 <_printf_i+0x146>
 800ab2c:	6923      	ldr	r3, [r4, #16]
 800ab2e:	4632      	mov	r2, r6
 800ab30:	4649      	mov	r1, r9
 800ab32:	4640      	mov	r0, r8
 800ab34:	47d0      	blx	sl
 800ab36:	3001      	adds	r0, #1
 800ab38:	d0ad      	beq.n	800aa96 <_printf_i+0x15a>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	079b      	lsls	r3, r3, #30
 800ab3e:	d413      	bmi.n	800ab68 <_printf_i+0x22c>
 800ab40:	68e0      	ldr	r0, [r4, #12]
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	4298      	cmp	r0, r3
 800ab46:	bfb8      	it	lt
 800ab48:	4618      	movlt	r0, r3
 800ab4a:	e7a6      	b.n	800aa9a <_printf_i+0x15e>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	4632      	mov	r2, r6
 800ab50:	4649      	mov	r1, r9
 800ab52:	4640      	mov	r0, r8
 800ab54:	47d0      	blx	sl
 800ab56:	3001      	adds	r0, #1
 800ab58:	d09d      	beq.n	800aa96 <_printf_i+0x15a>
 800ab5a:	3501      	adds	r5, #1
 800ab5c:	68e3      	ldr	r3, [r4, #12]
 800ab5e:	9903      	ldr	r1, [sp, #12]
 800ab60:	1a5b      	subs	r3, r3, r1
 800ab62:	42ab      	cmp	r3, r5
 800ab64:	dcf2      	bgt.n	800ab4c <_printf_i+0x210>
 800ab66:	e7eb      	b.n	800ab40 <_printf_i+0x204>
 800ab68:	2500      	movs	r5, #0
 800ab6a:	f104 0619 	add.w	r6, r4, #25
 800ab6e:	e7f5      	b.n	800ab5c <_printf_i+0x220>
 800ab70:	0800b3ed 	.word	0x0800b3ed
 800ab74:	0800b3fe 	.word	0x0800b3fe

0800ab78 <__sflush_r>:
 800ab78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab80:	0716      	lsls	r6, r2, #28
 800ab82:	4605      	mov	r5, r0
 800ab84:	460c      	mov	r4, r1
 800ab86:	d454      	bmi.n	800ac32 <__sflush_r+0xba>
 800ab88:	684b      	ldr	r3, [r1, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	dc02      	bgt.n	800ab94 <__sflush_r+0x1c>
 800ab8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	dd48      	ble.n	800ac26 <__sflush_r+0xae>
 800ab94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab96:	2e00      	cmp	r6, #0
 800ab98:	d045      	beq.n	800ac26 <__sflush_r+0xae>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aba0:	682f      	ldr	r7, [r5, #0]
 800aba2:	6a21      	ldr	r1, [r4, #32]
 800aba4:	602b      	str	r3, [r5, #0]
 800aba6:	d030      	beq.n	800ac0a <__sflush_r+0x92>
 800aba8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800abaa:	89a3      	ldrh	r3, [r4, #12]
 800abac:	0759      	lsls	r1, r3, #29
 800abae:	d505      	bpl.n	800abbc <__sflush_r+0x44>
 800abb0:	6863      	ldr	r3, [r4, #4]
 800abb2:	1ad2      	subs	r2, r2, r3
 800abb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800abb6:	b10b      	cbz	r3, 800abbc <__sflush_r+0x44>
 800abb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abba:	1ad2      	subs	r2, r2, r3
 800abbc:	2300      	movs	r3, #0
 800abbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abc0:	6a21      	ldr	r1, [r4, #32]
 800abc2:	4628      	mov	r0, r5
 800abc4:	47b0      	blx	r6
 800abc6:	1c43      	adds	r3, r0, #1
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	d106      	bne.n	800abda <__sflush_r+0x62>
 800abcc:	6829      	ldr	r1, [r5, #0]
 800abce:	291d      	cmp	r1, #29
 800abd0:	d82b      	bhi.n	800ac2a <__sflush_r+0xb2>
 800abd2:	4a2a      	ldr	r2, [pc, #168]	@ (800ac7c <__sflush_r+0x104>)
 800abd4:	40ca      	lsrs	r2, r1
 800abd6:	07d6      	lsls	r6, r2, #31
 800abd8:	d527      	bpl.n	800ac2a <__sflush_r+0xb2>
 800abda:	2200      	movs	r2, #0
 800abdc:	6062      	str	r2, [r4, #4]
 800abde:	04d9      	lsls	r1, r3, #19
 800abe0:	6922      	ldr	r2, [r4, #16]
 800abe2:	6022      	str	r2, [r4, #0]
 800abe4:	d504      	bpl.n	800abf0 <__sflush_r+0x78>
 800abe6:	1c42      	adds	r2, r0, #1
 800abe8:	d101      	bne.n	800abee <__sflush_r+0x76>
 800abea:	682b      	ldr	r3, [r5, #0]
 800abec:	b903      	cbnz	r3, 800abf0 <__sflush_r+0x78>
 800abee:	6560      	str	r0, [r4, #84]	@ 0x54
 800abf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abf2:	602f      	str	r7, [r5, #0]
 800abf4:	b1b9      	cbz	r1, 800ac26 <__sflush_r+0xae>
 800abf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abfa:	4299      	cmp	r1, r3
 800abfc:	d002      	beq.n	800ac04 <__sflush_r+0x8c>
 800abfe:	4628      	mov	r0, r5
 800ac00:	f7ff fca2 	bl	800a548 <_free_r>
 800ac04:	2300      	movs	r3, #0
 800ac06:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac08:	e00d      	b.n	800ac26 <__sflush_r+0xae>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	47b0      	blx	r6
 800ac10:	4602      	mov	r2, r0
 800ac12:	1c50      	adds	r0, r2, #1
 800ac14:	d1c9      	bne.n	800abaa <__sflush_r+0x32>
 800ac16:	682b      	ldr	r3, [r5, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d0c6      	beq.n	800abaa <__sflush_r+0x32>
 800ac1c:	2b1d      	cmp	r3, #29
 800ac1e:	d001      	beq.n	800ac24 <__sflush_r+0xac>
 800ac20:	2b16      	cmp	r3, #22
 800ac22:	d11e      	bne.n	800ac62 <__sflush_r+0xea>
 800ac24:	602f      	str	r7, [r5, #0]
 800ac26:	2000      	movs	r0, #0
 800ac28:	e022      	b.n	800ac70 <__sflush_r+0xf8>
 800ac2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac2e:	b21b      	sxth	r3, r3
 800ac30:	e01b      	b.n	800ac6a <__sflush_r+0xf2>
 800ac32:	690f      	ldr	r7, [r1, #16]
 800ac34:	2f00      	cmp	r7, #0
 800ac36:	d0f6      	beq.n	800ac26 <__sflush_r+0xae>
 800ac38:	0793      	lsls	r3, r2, #30
 800ac3a:	680e      	ldr	r6, [r1, #0]
 800ac3c:	bf08      	it	eq
 800ac3e:	694b      	ldreq	r3, [r1, #20]
 800ac40:	600f      	str	r7, [r1, #0]
 800ac42:	bf18      	it	ne
 800ac44:	2300      	movne	r3, #0
 800ac46:	eba6 0807 	sub.w	r8, r6, r7
 800ac4a:	608b      	str	r3, [r1, #8]
 800ac4c:	f1b8 0f00 	cmp.w	r8, #0
 800ac50:	dde9      	ble.n	800ac26 <__sflush_r+0xae>
 800ac52:	6a21      	ldr	r1, [r4, #32]
 800ac54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac56:	4643      	mov	r3, r8
 800ac58:	463a      	mov	r2, r7
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b0      	blx	r6
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	dc08      	bgt.n	800ac74 <__sflush_r+0xfc>
 800ac62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac6a:	81a3      	strh	r3, [r4, #12]
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac74:	4407      	add	r7, r0
 800ac76:	eba8 0800 	sub.w	r8, r8, r0
 800ac7a:	e7e7      	b.n	800ac4c <__sflush_r+0xd4>
 800ac7c:	20400001 	.word	0x20400001

0800ac80 <_fflush_r>:
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	690b      	ldr	r3, [r1, #16]
 800ac84:	4605      	mov	r5, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	b913      	cbnz	r3, 800ac90 <_fflush_r+0x10>
 800ac8a:	2500      	movs	r5, #0
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	bd38      	pop	{r3, r4, r5, pc}
 800ac90:	b118      	cbz	r0, 800ac9a <_fflush_r+0x1a>
 800ac92:	6a03      	ldr	r3, [r0, #32]
 800ac94:	b90b      	cbnz	r3, 800ac9a <_fflush_r+0x1a>
 800ac96:	f7ff fa7f 	bl	800a198 <__sinit>
 800ac9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0f3      	beq.n	800ac8a <_fflush_r+0xa>
 800aca2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aca4:	07d0      	lsls	r0, r2, #31
 800aca6:	d404      	bmi.n	800acb2 <_fflush_r+0x32>
 800aca8:	0599      	lsls	r1, r3, #22
 800acaa:	d402      	bmi.n	800acb2 <_fflush_r+0x32>
 800acac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acae:	f7ff fbde 	bl	800a46e <__retarget_lock_acquire_recursive>
 800acb2:	4628      	mov	r0, r5
 800acb4:	4621      	mov	r1, r4
 800acb6:	f7ff ff5f 	bl	800ab78 <__sflush_r>
 800acba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acbc:	07da      	lsls	r2, r3, #31
 800acbe:	4605      	mov	r5, r0
 800acc0:	d4e4      	bmi.n	800ac8c <_fflush_r+0xc>
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	059b      	lsls	r3, r3, #22
 800acc6:	d4e1      	bmi.n	800ac8c <_fflush_r+0xc>
 800acc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acca:	f7ff fbd1 	bl	800a470 <__retarget_lock_release_recursive>
 800acce:	e7dd      	b.n	800ac8c <_fflush_r+0xc>

0800acd0 <__swbuf_r>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	460e      	mov	r6, r1
 800acd4:	4614      	mov	r4, r2
 800acd6:	4605      	mov	r5, r0
 800acd8:	b118      	cbz	r0, 800ace2 <__swbuf_r+0x12>
 800acda:	6a03      	ldr	r3, [r0, #32]
 800acdc:	b90b      	cbnz	r3, 800ace2 <__swbuf_r+0x12>
 800acde:	f7ff fa5b 	bl	800a198 <__sinit>
 800ace2:	69a3      	ldr	r3, [r4, #24]
 800ace4:	60a3      	str	r3, [r4, #8]
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	071a      	lsls	r2, r3, #28
 800acea:	d501      	bpl.n	800acf0 <__swbuf_r+0x20>
 800acec:	6923      	ldr	r3, [r4, #16]
 800acee:	b943      	cbnz	r3, 800ad02 <__swbuf_r+0x32>
 800acf0:	4621      	mov	r1, r4
 800acf2:	4628      	mov	r0, r5
 800acf4:	f000 f82a 	bl	800ad4c <__swsetup_r>
 800acf8:	b118      	cbz	r0, 800ad02 <__swbuf_r+0x32>
 800acfa:	f04f 37ff 	mov.w	r7, #4294967295
 800acfe:	4638      	mov	r0, r7
 800ad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	6922      	ldr	r2, [r4, #16]
 800ad06:	1a98      	subs	r0, r3, r2
 800ad08:	6963      	ldr	r3, [r4, #20]
 800ad0a:	b2f6      	uxtb	r6, r6
 800ad0c:	4283      	cmp	r3, r0
 800ad0e:	4637      	mov	r7, r6
 800ad10:	dc05      	bgt.n	800ad1e <__swbuf_r+0x4e>
 800ad12:	4621      	mov	r1, r4
 800ad14:	4628      	mov	r0, r5
 800ad16:	f7ff ffb3 	bl	800ac80 <_fflush_r>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d1ed      	bne.n	800acfa <__swbuf_r+0x2a>
 800ad1e:	68a3      	ldr	r3, [r4, #8]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	60a3      	str	r3, [r4, #8]
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	6022      	str	r2, [r4, #0]
 800ad2a:	701e      	strb	r6, [r3, #0]
 800ad2c:	6962      	ldr	r2, [r4, #20]
 800ad2e:	1c43      	adds	r3, r0, #1
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d004      	beq.n	800ad3e <__swbuf_r+0x6e>
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	07db      	lsls	r3, r3, #31
 800ad38:	d5e1      	bpl.n	800acfe <__swbuf_r+0x2e>
 800ad3a:	2e0a      	cmp	r6, #10
 800ad3c:	d1df      	bne.n	800acfe <__swbuf_r+0x2e>
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4628      	mov	r0, r5
 800ad42:	f7ff ff9d 	bl	800ac80 <_fflush_r>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d0d9      	beq.n	800acfe <__swbuf_r+0x2e>
 800ad4a:	e7d6      	b.n	800acfa <__swbuf_r+0x2a>

0800ad4c <__swsetup_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4b29      	ldr	r3, [pc, #164]	@ (800adf4 <__swsetup_r+0xa8>)
 800ad50:	4605      	mov	r5, r0
 800ad52:	6818      	ldr	r0, [r3, #0]
 800ad54:	460c      	mov	r4, r1
 800ad56:	b118      	cbz	r0, 800ad60 <__swsetup_r+0x14>
 800ad58:	6a03      	ldr	r3, [r0, #32]
 800ad5a:	b90b      	cbnz	r3, 800ad60 <__swsetup_r+0x14>
 800ad5c:	f7ff fa1c 	bl	800a198 <__sinit>
 800ad60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad64:	0719      	lsls	r1, r3, #28
 800ad66:	d422      	bmi.n	800adae <__swsetup_r+0x62>
 800ad68:	06da      	lsls	r2, r3, #27
 800ad6a:	d407      	bmi.n	800ad7c <__swsetup_r+0x30>
 800ad6c:	2209      	movs	r2, #9
 800ad6e:	602a      	str	r2, [r5, #0]
 800ad70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7a:	e033      	b.n	800ade4 <__swsetup_r+0x98>
 800ad7c:	0758      	lsls	r0, r3, #29
 800ad7e:	d512      	bpl.n	800ada6 <__swsetup_r+0x5a>
 800ad80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad82:	b141      	cbz	r1, 800ad96 <__swsetup_r+0x4a>
 800ad84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad88:	4299      	cmp	r1, r3
 800ad8a:	d002      	beq.n	800ad92 <__swsetup_r+0x46>
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f7ff fbdb 	bl	800a548 <_free_r>
 800ad92:	2300      	movs	r3, #0
 800ad94:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad96:	89a3      	ldrh	r3, [r4, #12]
 800ad98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad9c:	81a3      	strh	r3, [r4, #12]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	6063      	str	r3, [r4, #4]
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	f043 0308 	orr.w	r3, r3, #8
 800adac:	81a3      	strh	r3, [r4, #12]
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	b94b      	cbnz	r3, 800adc6 <__swsetup_r+0x7a>
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800adb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adbc:	d003      	beq.n	800adc6 <__swsetup_r+0x7a>
 800adbe:	4621      	mov	r1, r4
 800adc0:	4628      	mov	r0, r5
 800adc2:	f000 f83f 	bl	800ae44 <__smakebuf_r>
 800adc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adca:	f013 0201 	ands.w	r2, r3, #1
 800adce:	d00a      	beq.n	800ade6 <__swsetup_r+0x9a>
 800add0:	2200      	movs	r2, #0
 800add2:	60a2      	str	r2, [r4, #8]
 800add4:	6962      	ldr	r2, [r4, #20]
 800add6:	4252      	negs	r2, r2
 800add8:	61a2      	str	r2, [r4, #24]
 800adda:	6922      	ldr	r2, [r4, #16]
 800addc:	b942      	cbnz	r2, 800adf0 <__swsetup_r+0xa4>
 800adde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ade2:	d1c5      	bne.n	800ad70 <__swsetup_r+0x24>
 800ade4:	bd38      	pop	{r3, r4, r5, pc}
 800ade6:	0799      	lsls	r1, r3, #30
 800ade8:	bf58      	it	pl
 800adea:	6962      	ldrpl	r2, [r4, #20]
 800adec:	60a2      	str	r2, [r4, #8]
 800adee:	e7f4      	b.n	800adda <__swsetup_r+0x8e>
 800adf0:	2000      	movs	r0, #0
 800adf2:	e7f7      	b.n	800ade4 <__swsetup_r+0x98>
 800adf4:	24000020 	.word	0x24000020

0800adf8 <__swhatbuf_r>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	460c      	mov	r4, r1
 800adfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae00:	2900      	cmp	r1, #0
 800ae02:	b096      	sub	sp, #88	@ 0x58
 800ae04:	4615      	mov	r5, r2
 800ae06:	461e      	mov	r6, r3
 800ae08:	da0d      	bge.n	800ae26 <__swhatbuf_r+0x2e>
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae10:	f04f 0100 	mov.w	r1, #0
 800ae14:	bf14      	ite	ne
 800ae16:	2340      	movne	r3, #64	@ 0x40
 800ae18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	6031      	str	r1, [r6, #0]
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	b016      	add	sp, #88	@ 0x58
 800ae24:	bd70      	pop	{r4, r5, r6, pc}
 800ae26:	466a      	mov	r2, sp
 800ae28:	f000 f848 	bl	800aebc <_fstat_r>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	dbec      	blt.n	800ae0a <__swhatbuf_r+0x12>
 800ae30:	9901      	ldr	r1, [sp, #4]
 800ae32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae3a:	4259      	negs	r1, r3
 800ae3c:	4159      	adcs	r1, r3
 800ae3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae42:	e7eb      	b.n	800ae1c <__swhatbuf_r+0x24>

0800ae44 <__smakebuf_r>:
 800ae44:	898b      	ldrh	r3, [r1, #12]
 800ae46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae48:	079d      	lsls	r5, r3, #30
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	d507      	bpl.n	800ae60 <__smakebuf_r+0x1c>
 800ae50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	2301      	movs	r3, #1
 800ae5a:	6163      	str	r3, [r4, #20]
 800ae5c:	b003      	add	sp, #12
 800ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae60:	ab01      	add	r3, sp, #4
 800ae62:	466a      	mov	r2, sp
 800ae64:	f7ff ffc8 	bl	800adf8 <__swhatbuf_r>
 800ae68:	9f00      	ldr	r7, [sp, #0]
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	4639      	mov	r1, r7
 800ae6e:	4630      	mov	r0, r6
 800ae70:	f7ff f87a 	bl	8009f68 <_malloc_r>
 800ae74:	b948      	cbnz	r0, 800ae8a <__smakebuf_r+0x46>
 800ae76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7a:	059a      	lsls	r2, r3, #22
 800ae7c:	d4ee      	bmi.n	800ae5c <__smakebuf_r+0x18>
 800ae7e:	f023 0303 	bic.w	r3, r3, #3
 800ae82:	f043 0302 	orr.w	r3, r3, #2
 800ae86:	81a3      	strh	r3, [r4, #12]
 800ae88:	e7e2      	b.n	800ae50 <__smakebuf_r+0xc>
 800ae8a:	89a3      	ldrh	r3, [r4, #12]
 800ae8c:	6020      	str	r0, [r4, #0]
 800ae8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	9b01      	ldr	r3, [sp, #4]
 800ae96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae9a:	b15b      	cbz	r3, 800aeb4 <__smakebuf_r+0x70>
 800ae9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aea0:	4630      	mov	r0, r6
 800aea2:	f000 f81d 	bl	800aee0 <_isatty_r>
 800aea6:	b128      	cbz	r0, 800aeb4 <__smakebuf_r+0x70>
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	f023 0303 	bic.w	r3, r3, #3
 800aeae:	f043 0301 	orr.w	r3, r3, #1
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	431d      	orrs	r5, r3
 800aeb8:	81a5      	strh	r5, [r4, #12]
 800aeba:	e7cf      	b.n	800ae5c <__smakebuf_r+0x18>

0800aebc <_fstat_r>:
 800aebc:	b538      	push	{r3, r4, r5, lr}
 800aebe:	4d07      	ldr	r5, [pc, #28]	@ (800aedc <_fstat_r+0x20>)
 800aec0:	2300      	movs	r3, #0
 800aec2:	4604      	mov	r4, r0
 800aec4:	4608      	mov	r0, r1
 800aec6:	4611      	mov	r1, r2
 800aec8:	602b      	str	r3, [r5, #0]
 800aeca:	f7f7 f823 	bl	8001f14 <_fstat>
 800aece:	1c43      	adds	r3, r0, #1
 800aed0:	d102      	bne.n	800aed8 <_fstat_r+0x1c>
 800aed2:	682b      	ldr	r3, [r5, #0]
 800aed4:	b103      	cbz	r3, 800aed8 <_fstat_r+0x1c>
 800aed6:	6023      	str	r3, [r4, #0]
 800aed8:	bd38      	pop	{r3, r4, r5, pc}
 800aeda:	bf00      	nop
 800aedc:	240004d0 	.word	0x240004d0

0800aee0 <_isatty_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4d06      	ldr	r5, [pc, #24]	@ (800aefc <_isatty_r+0x1c>)
 800aee4:	2300      	movs	r3, #0
 800aee6:	4604      	mov	r4, r0
 800aee8:	4608      	mov	r0, r1
 800aeea:	602b      	str	r3, [r5, #0]
 800aeec:	f7f7 f822 	bl	8001f34 <_isatty>
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	d102      	bne.n	800aefa <_isatty_r+0x1a>
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	b103      	cbz	r3, 800aefa <_isatty_r+0x1a>
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	240004d0 	.word	0x240004d0

0800af00 <_init>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr

0800af0c <_fini>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	bf00      	nop
 800af10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af12:	bc08      	pop	{r3}
 800af14:	469e      	mov	lr, r3
 800af16:	4770      	bx	lr
